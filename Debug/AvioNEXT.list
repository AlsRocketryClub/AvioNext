
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017158  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08017428  08017428  00027428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801762c  0801762c  0002762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017634  08017634  00027634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017638  08017638  00027638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  0801763c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  0801778c  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  0801778c  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035703  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006251  00000000  00000000  000658c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214a  00000000  00000000  0006e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003dffd  00000000  00000000  0007074a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a82e  00000000  00000000  000ae747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d41c  00000000  00000000  000e8f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bf58  00000000  00000000  00266394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  002722ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017410 	.word	0x08017410

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08017410 	.word	0x08017410

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <HG2_Write_Register+0x48>)
 80006d4:	f007 f9b0 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006d8:	1df9      	adds	r1, r7, #7
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	2201      	movs	r2, #1
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <HG2_Write_Register+0x4c>)
 80006e0:	f00d ff46 	bl	800e570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80006e4:	1db9      	adds	r1, r7, #6
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	2201      	movs	r2, #1
 80006ea:	4807      	ldr	r0, [pc, #28]	; (8000708 <HG2_Write_Register+0x4c>)
 80006ec:	f00d ff40 	bl	800e570 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <HG2_Write_Register+0x48>)
 80006f8:	f007 f99e 	bl	8007a38 <HAL_GPIO_WritePin>

}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58020c00 	.word	0x58020c00
 8000708:	24000fc0 	.word	0x24000fc0

0800070c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800071c:	b2db      	uxtb	r3, r3
 800071e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <LG2_Read_Register+0x50>)
 8000728:	f007 f986 	bl	8007a38 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800072c:	1df9      	adds	r1, r7, #7
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	2201      	movs	r2, #1
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <LG2_Read_Register+0x54>)
 8000734:	f00d ff1c 	bl	800e570 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000738:	f107 010f 	add.w	r1, r7, #15
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2201      	movs	r2, #1
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <LG2_Read_Register+0x54>)
 8000742:	f00e f911 	bl	800e968 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <LG2_Read_Register+0x50>)
 800074e:	f007 f973 	bl	8007a38 <HAL_GPIO_WritePin>

	return reg_value;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58020c00 	.word	0x58020c00
 8000760:	24000fc0 	.word	0x24000fc0

08000764 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <LG2_Write_Register+0x48>)
 800077c:	f007 f95c 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000780:	1df9      	adds	r1, r7, #7
 8000782:	2364      	movs	r3, #100	; 0x64
 8000784:	2201      	movs	r2, #1
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <LG2_Write_Register+0x4c>)
 8000788:	f00d fef2 	bl	800e570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800078c:	1db9      	adds	r1, r7, #6
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	2201      	movs	r2, #1
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <LG2_Write_Register+0x4c>)
 8000794:	f00d feec 	bl	800e570 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <LG2_Write_Register+0x48>)
 80007a0:	f007 f94a 	bl	8007a38 <HAL_GPIO_WritePin>

}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	58020c00 	.word	0x58020c00
 80007b0:	24000fc0 	.word	0x24000fc0

080007b4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ffa6 	bl	800070c <LG2_Read_Register>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007c4:	2023      	movs	r0, #35	; 0x23
 80007c6:	f7ff ffa1 	bl	800070c <LG2_Read_Register>
 80007ca:	4603      	mov	r3, r0
 80007cc:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e8:	eddf 6a08 	vldr	s13, [pc, #32]	; 800080c <LG2_Get_Gyro_X+0x58>
 80007ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000810 <LG2_Get_Gyro_X+0x5c>
 80007f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f8:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	ee07 3a90 	vmov	s15, r3
}
 8000802:	eeb0 0a67 	vmov.f32	s0, s15
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	46fffe00 	.word	0x46fffe00
 8000810:	437a0000 	.word	0x437a0000

08000814 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800081a:	2024      	movs	r0, #36	; 0x24
 800081c:	f7ff ff76 	bl	800070c <LG2_Read_Register>
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000824:	2025      	movs	r0, #37	; 0x25
 8000826:	f7ff ff71 	bl	800070c <LG2_Read_Register>
 800082a:	4603      	mov	r3, r0
 800082c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	b21a      	sxth	r2, r3
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800083c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000840:	ee07 3a90 	vmov	s15, r3
 8000844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000848:	eddf 6a08 	vldr	s13, [pc, #32]	; 800086c <LG2_Get_Gyro_Y+0x58>
 800084c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000850:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000870 <LG2_Get_Gyro_Y+0x5c>
 8000854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000858:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	ee07 3a90 	vmov	s15, r3
}
 8000862:	eeb0 0a67 	vmov.f32	s0, s15
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	46fffe00 	.word	0x46fffe00
 8000870:	437a0000 	.word	0x437a0000
 8000874:	00000000 	.word	0x00000000

08000878 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800087e:	2026      	movs	r0, #38	; 0x26
 8000880:	f7ff ff44 	bl	800070c <LG2_Read_Register>
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000888:	2027      	movs	r0, #39	; 0x27
 800088a:	f7ff ff3f 	bl	800070c <LG2_Read_Register>
 800088e:	4603      	mov	r3, r0
 8000890:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008b0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008d8 <LG2_Get_Gyro_Z+0x60>
 80008b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008b8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80008e0 <LG2_Get_Gyro_Z+0x68>
 80008bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	ee07 3a90 	vmov	s15, r3
}
 80008ce:	eeb0 0a67 	vmov.f32	s0, s15
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	00000000 	.word	0x00000000
 80008dc:	40dfffc0 	.word	0x40dfffc0
 80008e0:	00000000 	.word	0x00000000
 80008e4:	406f4000 	.word	0x406f4000

080008e8 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 80008f4:	ed97 7a00 	vldr	s14, [r7]
 80008f8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000968 <setServo+0x80>
 80008fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000900:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800096c <setServo+0x84>
 8000904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000908:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000970 <setServo+0x88>
 800090c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000914:	ee17 3a90 	vmov	r3, s15
 8000918:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
 800091e:	2b03      	cmp	r3, #3
 8000920:	d81a      	bhi.n	8000958 <setServo+0x70>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <setServo+0x40>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000939 	.word	0x08000939
 800092c:	08000941 	.word	0x08000941
 8000930:	08000949 	.word	0x08000949
 8000934:	08000951 	.word	0x08000951
		case 1:
			TIM4->CCR4 = timerVal;
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <setServo+0x8c>)
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800093e:	e00c      	b.n	800095a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <setServo+0x8c>)
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000946:	e008      	b.n	800095a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <setServo+0x8c>)
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800094e:	e004      	b.n	800095a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000950:	4a08      	ldr	r2, [pc, #32]	; (8000974 <setServo+0x8c>)
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000956:	e000      	b.n	800095a <setServo+0x72>

		default:
			break;
 8000958:	bf00      	nop
	}
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	43340000 	.word	0x43340000
 800096c:	457a0000 	.word	0x457a0000
 8000970:	453b8000 	.word	0x453b8000
 8000974:	40000800 	.word	0x40000800

08000978 <setLEDs>:

void setLEDs(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
 8000982:	e181      	b.n	8000c88 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000984:	4aa1      	ldr	r2, [pc, #644]	; (8000c0c <setLEDs+0x294>)
 8000986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800098c:	2b03      	cmp	r3, #3
 800098e:	f200 8177 	bhi.w	8000c80 <setLEDs+0x308>
 8000992:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <setLEDs+0x20>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	080009a9 	.word	0x080009a9
 800099c:	08000a59 	.word	0x08000a59
 80009a0:	08000b09 	.word	0x08000b09
 80009a4:	08000bb9 	.word	0x08000bb9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
 80009ac:	e042      	b.n	8000a34 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009b2:	e039      	b.n	8000a28 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009b4:	4996      	ldr	r1, [pc, #600]	; (8000c10 <setLEDs+0x298>)
 80009b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009c0:	4413      	add	r3, r2
 80009c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ca:	fa41 f202 	asr.w	r2, r1, r2
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d013      	beq.n	80009fc <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d6:	00da      	lsls	r2, r3, #3
 80009d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009da:	18d1      	adds	r1, r2, r3
 80009dc:	4a8b      	ldr	r2, [pc, #556]	; (8000c0c <setLEDs+0x294>)
 80009de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	4413      	add	r3, r2
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3308      	adds	r3, #8
 80009f2:	4a88      	ldr	r2, [pc, #544]	; (8000c14 <setLEDs+0x29c>)
 80009f4:	213c      	movs	r1, #60	; 0x3c
 80009f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fa:	e012      	b.n	8000a22 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	00da      	lsls	r2, r3, #3
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	18d1      	adds	r1, r2, r3
 8000a04:	4a81      	ldr	r2, [pc, #516]	; (8000c0c <setLEDs+0x294>)
 8000a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3308      	adds	r3, #8
 8000a1a:	4a7e      	ldr	r2, [pc, #504]	; (8000c14 <setLEDs+0x29c>)
 8000a1c:	211e      	movs	r1, #30
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a24:	3301      	adds	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	ddc2      	ble.n	80009b4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a30:	3301      	adds	r3, #1
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
 8000a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	ddb9      	ble.n	80009ae <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a3e:	e007      	b.n	8000a50 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a40:	4a74      	ldr	r2, [pc, #464]	; (8000c14 <setLEDs+0x29c>)
 8000a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a44:	2100      	movs	r1, #0
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	2bb1      	cmp	r3, #177	; 0xb1
 8000a54:	ddf4      	ble.n	8000a40 <setLEDs+0xc8>
			}
			break;
 8000a56:	e114      	b.n	8000c82 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5c:	e042      	b.n	8000ae4 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
 8000a62:	e039      	b.n	8000ad8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a64:	496a      	ldr	r1, [pc, #424]	; (8000c10 <setLEDs+0x298>)
 8000a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a70:	4413      	add	r3, r2
 8000a72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	6a3a      	ldr	r2, [r7, #32]
 8000a7a:	fa41 f202 	asr.w	r2, r1, r2
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d013      	beq.n	8000aac <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	00da      	lsls	r2, r3, #3
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	18d1      	adds	r1, r2, r3
 8000a8c:	4a5f      	ldr	r2, [pc, #380]	; (8000c0c <setLEDs+0x294>)
 8000a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	4a5d      	ldr	r2, [pc, #372]	; (8000c18 <setLEDs+0x2a0>)
 8000aa4:	213c      	movs	r1, #60	; 0x3c
 8000aa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aaa:	e012      	b.n	8000ad2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	00da      	lsls	r2, r3, #3
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	18d1      	adds	r1, r2, r3
 8000ab4:	4a55      	ldr	r2, [pc, #340]	; (8000c0c <setLEDs+0x294>)
 8000ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	440b      	add	r3, r1
 8000ac8:	3308      	adds	r3, #8
 8000aca:	4a53      	ldr	r2, [pc, #332]	; (8000c18 <setLEDs+0x2a0>)
 8000acc:	211e      	movs	r1, #30
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ad2:	6a3b      	ldr	r3, [r7, #32]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	2b07      	cmp	r3, #7
 8000adc:	ddc2      	ble.n	8000a64 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	ddb9      	ble.n	8000a5e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	e007      	b.n	8000b00 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000af0:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <setLEDs+0x2a0>)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	2100      	movs	r1, #0
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3301      	adds	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	2bb1      	cmp	r3, #177	; 0xb1
 8000b04:	ddf4      	ble.n	8000af0 <setLEDs+0x178>
			}
			break;
 8000b06:	e0bc      	b.n	8000c82 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e042      	b.n	8000b94 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e039      	b.n	8000b88 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b14:	493e      	ldr	r1, [pc, #248]	; (8000c10 <setLEDs+0x298>)
 8000b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4413      	add	r3, r2
 8000b22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	fa41 f202 	asr.w	r2, r1, r2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d013      	beq.n	8000b5c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	00da      	lsls	r2, r3, #3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	18d1      	adds	r1, r2, r3
 8000b3c:	4a33      	ldr	r2, [pc, #204]	; (8000c0c <setLEDs+0x294>)
 8000b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4413      	add	r3, r2
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	440b      	add	r3, r1
 8000b50:	3308      	adds	r3, #8
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <setLEDs+0x2a4>)
 8000b54:	213c      	movs	r1, #60	; 0x3c
 8000b56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b5a:	e012      	b.n	8000b82 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	00da      	lsls	r2, r3, #3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	18d1      	adds	r1, r2, r3
 8000b64:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <setLEDs+0x294>)
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3308      	adds	r3, #8
 8000b7a:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <setLEDs+0x2a4>)
 8000b7c:	211e      	movs	r1, #30
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	ddc2      	ble.n	8000b14 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	3301      	adds	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	ddb9      	ble.n	8000b0e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000b9a:	2338      	movs	r3, #56	; 0x38
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	e007      	b.n	8000bb0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000ba0:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <setLEDs+0x2a4>)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	3301      	adds	r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2b69      	cmp	r3, #105	; 0x69
 8000bb4:	ddf4      	ble.n	8000ba0 <setLEDs+0x228>
			}
			break;
 8000bb6:	e064      	b.n	8000c82 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e04e      	b.n	8000c5c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	e045      	b.n	8000c50 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000bc4:	4912      	ldr	r1, [pc, #72]	; (8000c10 <setLEDs+0x298>)
 8000bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	fa41 f202 	asr.w	r2, r1, r2
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d01f      	beq.n	8000c24 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	00da      	lsls	r2, r3, #3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	18d1      	adds	r1, r2, r3
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <setLEDs+0x294>)
 8000bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	440b      	add	r3, r1
 8000c00:	3308      	adds	r3, #8
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <setLEDs+0x2a8>)
 8000c04:	213c      	movs	r1, #60	; 0x3c
 8000c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c0a:	e01e      	b.n	8000c4a <setLEDs+0x2d2>
 8000c0c:	08017534 	.word	0x08017534
 8000c10:	24000b50 	.word	0x24000b50
 8000c14:	24000270 	.word	0x24000270
 8000c18:	24000538 	.word	0x24000538
 8000c1c:	24000800 	.word	0x24000800
 8000c20:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	00da      	lsls	r2, r3, #3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	18d1      	adds	r1, r2, r3
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <setLEDs+0x350>)
 8000c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4413      	add	r3, r2
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	440b      	add	r3, r1
 8000c40:	3308      	adds	r3, #8
 8000c42:	4a22      	ldr	r2, [pc, #136]	; (8000ccc <setLEDs+0x354>)
 8000c44:	211e      	movs	r1, #30
 8000c46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	ddb6      	ble.n	8000bc4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	ddad      	ble.n	8000bbe <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c62:	2338      	movs	r3, #56	; 0x38
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	e007      	b.n	8000c78 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <setLEDs+0x354>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3301      	adds	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b69      	cmp	r3, #105	; 0x69
 8000c7c:	ddf4      	ble.n	8000c68 <setLEDs+0x2f0>
			}
			break;
 8000c7e:	e000      	b.n	8000c82 <setLEDs+0x30a>
		default:
			break;
 8000c80:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c84:	3301      	adds	r3, #1
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
 8000c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8a:	2b0d      	cmp	r3, #13
 8000c8c:	f77f ae7a 	ble.w	8000984 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000c90:	23b2      	movs	r3, #178	; 0xb2
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <setLEDs+0x358>)
 8000c94:	210c      	movs	r1, #12
 8000c96:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <setLEDs+0x35c>)
 8000c98:	f00e faaa 	bl	800f1f0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000c9c:	23b2      	movs	r3, #178	; 0xb2
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <setLEDs+0x360>)
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <setLEDs+0x364>)
 8000ca4:	f00e faa4 	bl	800f1f0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000ca8:	236a      	movs	r3, #106	; 0x6a
 8000caa:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <setLEDs+0x368>)
 8000cac:	2104      	movs	r1, #4
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <setLEDs+0x36c>)
 8000cb0:	f00e fa9e 	bl	800f1f0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cb4:	236a      	movs	r3, #106	; 0x6a
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <setLEDs+0x354>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <setLEDs+0x36c>)
 8000cbc:	f00e fa98 	bl	800f1f0 <HAL_TIM_PWM_Start_DMA>

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	08017534 	.word	0x08017534
 8000ccc:	240009a8 	.word	0x240009a8
 8000cd0:	24000270 	.word	0x24000270
 8000cd4:	240011b4 	.word	0x240011b4
 8000cd8:	24000538 	.word	0x24000538
 8000cdc:	240010d0 	.word	0x240010d0
 8000ce0:	24000800 	.word	0x24000800
 8000ce4:	2400111c 	.word	0x2400111c

08000ce8 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoRA_Read_Register+0x48>)
 8000cfa:	f006 fe9d 	bl	8007a38 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000cfe:	1df9      	adds	r1, r7, #7
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2201      	movs	r2, #1
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <LoRA_Read_Register+0x4c>)
 8000d06:	f00d fc33 	bl	800e570 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d0a:	f107 010f 	add.w	r1, r7, #15
 8000d0e:	2364      	movs	r3, #100	; 0x64
 8000d10:	2201      	movs	r2, #1
 8000d12:	4808      	ldr	r0, [pc, #32]	; (8000d34 <LoRA_Read_Register+0x4c>)
 8000d14:	f00d fe28 	bl	800e968 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <LoRA_Read_Register+0x48>)
 8000d20:	f006 fe8a 	bl	8007a38 <HAL_GPIO_WritePin>

	return reg_value;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	58020000 	.word	0x58020000
 8000d34:	24001048 	.word	0x24001048

08000d38 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoRA_Write_Register+0x54>)
 8000d5a:	f006 fe6d 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d5e:	1df9      	adds	r1, r7, #7
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	2201      	movs	r2, #1
 8000d64:	480a      	ldr	r0, [pc, #40]	; (8000d90 <LoRA_Write_Register+0x58>)
 8000d66:	f00d fc03 	bl	800e570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d6a:	1db9      	adds	r1, r7, #6
 8000d6c:	2364      	movs	r3, #100	; 0x64
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <LoRA_Write_Register+0x58>)
 8000d72:	f00d fbfd 	bl	800e570 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <LoRA_Write_Register+0x54>)
 8000d7e:	f006 fe5b 	bl	8007a38 <HAL_GPIO_WritePin>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	58020000 	.word	0x58020000
 8000d90:	24001048 	.word	0x24001048

08000d94 <LoRA_sleep>:


void LoRA_sleep(void){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ffcc 	bl	8000d38 <LoRA_Write_Register>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	17c8      	asrs	r0, r1, #31
 8000db0:	460a      	mov	r2, r1
 8000db2:	4603      	mov	r3, r0
 8000db4:	1355      	asrs	r5, r2, #13
 8000db6:	04d4      	lsls	r4, r2, #19
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <LoRA_set_frequency+0x78>)
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	4629      	mov	r1, r5
 8000dc2:	f7ff fafd 	bl	80003c0 <__aeabi_uldivmod>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	0c02      	lsrs	r2, r0, #16
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	b2d3      	uxtb	r3, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	2006      	movs	r0, #6
 8000de8:	f7ff ffa6 	bl	8000d38 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000dec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	0a02      	lsrs	r2, r0, #8
 8000dfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000dfe:	0a0b      	lsrs	r3, r1, #8
 8000e00:	b2d3      	uxtb	r3, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	2007      	movs	r0, #7
 8000e06:	f7ff ff97 	bl	8000d38 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e0a:	7a3b      	ldrb	r3, [r7, #8]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2008      	movs	r0, #8
 8000e10:	f7ff ff92 	bl	8000d38 <LoRA_Write_Register>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1c:	01e84800 	.word	0x01e84800

08000e20 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e2a:	231b      	movs	r3, #27
 8000e2c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b78      	cmp	r3, #120	; 0x78
 8000e32:	d809      	bhi.n	8000e48 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	3b2d      	subs	r3, #45	; 0x2d
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <LoRA_setOCP+0x60>)
 8000e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3e:	1052      	asrs	r2, r2, #1
 8000e40:	17db      	asrs	r3, r3, #31
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	e00b      	b.n	8000e60 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e4c:	d808      	bhi.n	8000e60 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	331e      	adds	r3, #30
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoRA_setOCP+0x60>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1092      	asrs	r2, r2, #2
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	200b      	movs	r0, #11
 8000e72:	f7ff ff61 	bl	8000d38 <LoRA_Write_Register>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	66666667 	.word	0x66666667

08000e84 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b11      	cmp	r3, #17
 8000e90:	dd0f      	ble.n	8000eb2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b14      	cmp	r3, #20
 8000e96:	dd01      	ble.n	8000e9c <LoRA_setTxPower+0x18>
        level = 20;
 8000e98:	2314      	movs	r3, #20
 8000e9a:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b03      	subs	r3, #3
 8000ea0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ea2:	2187      	movs	r1, #135	; 0x87
 8000ea4:	204d      	movs	r0, #77	; 0x4d
 8000ea6:	f7ff ff47 	bl	8000d38 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eaa:	208c      	movs	r0, #140	; 0x8c
 8000eac:	f7ff ffb8 	bl	8000e20 <LoRA_setOCP>
 8000eb0:	e00b      	b.n	8000eca <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	dc01      	bgt.n	8000ebc <LoRA_setTxPower+0x38>
        level = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ebc:	2184      	movs	r1, #132	; 0x84
 8000ebe:	204d      	movs	r0, #77	; 0x4d
 8000ec0:	f7ff ff3a 	bl	8000d38 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ec4:	2064      	movs	r0, #100	; 0x64
 8000ec6:	f7ff ffab 	bl	8000e20 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	2009      	movs	r0, #9
 8000ee0:	f7ff ff2a 	bl	8000d38 <LoRA_Write_Register>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000ef0:	201d      	movs	r0, #29
 8000ef2:	f7ff fef9 	bl	8000ce8 <LoRA_Read_Register>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	201d      	movs	r0, #29
 8000f02:	f7ff ff19 	bl	8000d38 <LoRA_Write_Register>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09c      	sub	sp, #112	; 0x70
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2101      	movs	r1, #1
 8000f18:	4822      	ldr	r0, [pc, #136]	; (8000fa4 <LoRA_begin+0x98>)
 8000f1a:	f006 fd8d 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f24:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <LoRA_begin+0x9c>)
 8000f26:	f006 fd87 	bl	8007a38 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f2a:	2042      	movs	r0, #66	; 0x42
 8000f2c:	f7ff fedc 	bl	8000ce8 <LoRA_Read_Register>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f36:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	491b      	ldr	r1, [pc, #108]	; (8000fac <LoRA_begin+0xa0>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f015 fdc1 	bl	8016ac8 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f9e0 	bl	8000310 <strlen>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 f961 	bl	8016220 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f5e:	f7ff ff19 	bl	8000d94 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f62:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <LoRA_begin+0xa4>)
 8000f64:	f7ff ff1e 	bl	8000da4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f7ff fee4 	bl	8000d38 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	200e      	movs	r0, #14
 8000f74:	f7ff fee0 	bl	8000d38 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000f78:	200c      	movs	r0, #12
 8000f7a:	f7ff feb5 	bl	8000ce8 <LoRA_Read_Register>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f043 0303 	orr.w	r3, r3, #3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	200c      	movs	r0, #12
 8000f8a:	f7ff fed5 	bl	8000d38 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000f8e:	2104      	movs	r1, #4
 8000f90:	2026      	movs	r0, #38	; 0x26
 8000f92:	f7ff fed1 	bl	8000d38 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000f96:	2011      	movs	r0, #17
 8000f98:	f7ff ff74 	bl	8000e84 <LoRA_setTxPower>

}
 8000f9c:	bf00      	nop
 8000f9e:	3770      	adds	r7, #112	; 0x70
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58020c00 	.word	0x58020c00
 8000fa8:	58020000 	.word	0x58020000
 8000fac:	08017428 	.word	0x08017428
 8000fb0:	33bca100 	.word	0x33bca100

08000fb4 <LoRA_parsePacket>:
	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);

}


int LoRA_parsePacket(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000fbe:	2012      	movs	r0, #18
 8000fc0:	f7ff fe92 	bl	8000ce8 <LoRA_Read_Register>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000fc8:	f7ff ff90 	bl	8000eec <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2012      	movs	r0, #18
 8000fd4:	f7ff feb0 	bl	8000d38 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d016      	beq.n	8001010 <LoRA_parsePacket+0x5c>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d111      	bne.n	8001010 <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000fec:	2013      	movs	r0, #19
 8000fee:	f7ff fe7b 	bl	8000ce8 <LoRA_Read_Register>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000ff6:	2010      	movs	r0, #16
 8000ff8:	f7ff fe76 	bl	8000ce8 <LoRA_Read_Register>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4619      	mov	r1, r3
 8001000:	200d      	movs	r0, #13
 8001002:	f7ff fe99 	bl	8000d38 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001006:	2185      	movs	r1, #133	; 0x85
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fe95 	bl	8000d38 <LoRA_Write_Register>
 800100e:	e00d      	b.n	800102c <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fe69 	bl	8000ce8 <LoRA_Read_Register>
 8001016:	4603      	mov	r3, r0
 8001018:	2b85      	cmp	r3, #133	; 0x85
 800101a:	d007      	beq.n	800102c <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800101c:	2100      	movs	r1, #0
 800101e:	200d      	movs	r0, #13
 8001020:	f7ff fe8a 	bl	8000d38 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001024:	2185      	movs	r1, #133	; 0x85
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fe86 	bl	8000d38 <LoRA_Write_Register>
	}
	return packetLenght;
 800102c:	687b      	ldr	r3, [r7, #4]

}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <disarm+0xac>)
 8001046:	f006 fcf7 	bl	8007a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2104      	movs	r1, #4
 800104e:	4825      	ldr	r0, [pc, #148]	; (80010e4 <disarm+0xac>)
 8001050:	f006 fcf2 	bl	8007a38 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <disarm+0xb0>)
 800105a:	f006 fced 	bl	8007a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <disarm+0xb4>)
 8001066:	f006 fce7 	bl	8007a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <disarm+0xb4>)
 8001072:	f006 fce1 	bl	8007a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800107c:	481b      	ldr	r0, [pc, #108]	; (80010ec <disarm+0xb4>)
 800107e:	f006 fcdb 	bl	8007a38 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	481a      	ldr	r0, [pc, #104]	; (80010f0 <disarm+0xb8>)
 8001088:	f006 fcd6 	bl	8007a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001092:	4818      	ldr	r0, [pc, #96]	; (80010f4 <disarm+0xbc>)
 8001094:	f006 fcd0 	bl	8007a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <disarm+0xbc>)
 80010a0:	f006 fcca 	bl	8007a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010aa:	4812      	ldr	r0, [pc, #72]	; (80010f4 <disarm+0xbc>)
 80010ac:	f006 fcc4 	bl	8007a38 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <disarm+0xc0>)
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <disarm+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <disarm+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80010c2:	f7ff fc59 	bl	8000978 <setLEDs>

  strcpy(state,"DISARMED");
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <disarm+0xc4>)
 80010ca:	461a      	mov	r2, r3
 80010cc:	460b      	mov	r3, r1
 80010ce:	cb03      	ldmia	r3!, {r0, r1}
 80010d0:	6010      	str	r0, [r2, #0]
 80010d2:	6051      	str	r1, [r2, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	7213      	strb	r3, [r2, #8]
  return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	58020000 	.word	0x58020000
 80010e8:	58020400 	.word	0x58020400
 80010ec:	58021400 	.word	0x58021400
 80010f0:	58021800 	.word	0x58021800
 80010f4:	58021000 	.word	0x58021000
 80010f8:	24000b50 	.word	0x24000b50
 80010fc:	0801742c 	.word	0x0801742c

08001100 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800110a:	f7ff ff53 	bl	8000fb4 <LoRA_parsePacket>
 800110e:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	429a      	cmp	r2, r3
 8001116:	dc01      	bgt.n	800111c <recv_packet+0x1c>
  {
    return 0;
 8001118:	2300      	movs	r3, #0
 800111a:	e01c      	b.n	8001156 <recv_packet+0x56>
  }
  if(packet_length){
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d018      	beq.n	8001154 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e00a      	b.n	800113e <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	18d4      	adds	r4, r2, r3
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fdda 	bl	8000ce8 <LoRA_Read_Register>
 8001134:	4603      	mov	r3, r0
 8001136:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbf0      	blt.n	8001128 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
    return packet_length;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	e000      	b.n	8001156 <recv_packet+0x56>
  }
  else{
    return 0;
 8001154:	2300      	movs	r3, #0
  }
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}
	...

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001168:	4bc9      	ldr	r3, [pc, #804]	; (8001490 <main+0x330>)
 800116a:	f607 248c 	addw	r4, r7, #2700	; 0xa8c
 800116e:	461d      	mov	r5, r3
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001178:	c403      	stmia	r4!, {r0, r1}
 800117a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f002 f918 	bl	80033b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f99e 	bl	80014c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001184:	f000 fa14 	bl	80015b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f000 ff9c 	bl	80020c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800118c:	f000 ff3a 	bl	8002004 <MX_DMA_Init>
  MX_SPI3_Init();
 8001190:	f000 fc94 	bl	8001abc <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001194:	f000 fb24 	bl	80017e0 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001198:	f000 fee8 	bl	8001f6c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800119c:	f000 fa3a 	bl	8001614 <MX_ADC1_Init>
  MX_TIM4_Init();
 80011a0:	f000 fd9e 	bl	8001ce0 <MX_TIM4_Init>
  MX_ADC3_Init();
 80011a4:	f000 faae 	bl	8001704 <MX_ADC3_Init>
  MX_SPI2_Init();
 80011a8:	f000 fc32 	bl	8001a10 <MX_SPI2_Init>
  MX_I2C2_Init();
 80011ac:	f000 fb7c 	bl	80018a8 <MX_I2C2_Init>
  MX_TIM2_Init();
 80011b0:	f000 fcda 	bl	8001b68 <MX_TIM2_Init>
  MX_TIM5_Init();
 80011b4:	f000 fe10 	bl	8001dd8 <MX_TIM5_Init>
  MX_TIM3_Init();
 80011b8:	f000 fd2e 	bl	8001c18 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80011bc:	f014 ff5a 	bl	8016074 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80011c0:	f000 fbd0 	bl	8001964 <MX_SPI1_Init>
  MX_UART4_Init();
 80011c4:	f000 fe86 	bl	8001ed4 <MX_UART4_Init>
  MX_FATFS_Init();
 80011c8:	f012 fce8 	bl	8013b9c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80011cc:	f000 fbac 	bl	8001928 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80011d0:	f000 fe5c 	bl	8001e8c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80011d4:	2332      	movs	r3, #50	; 0x32
 80011d6:	f8c7 3af4 	str.w	r3, [r7, #2804]	; 0xaf4
	const double SPEED = 2.0/2000;
 80011da:	a3ab      	add	r3, pc, #684	; (adr r3, 8001488 <main+0x328>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80011e4:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4ba5      	ldr	r3, [pc, #660]	; (8001494 <main+0x334>)
 80011fe:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8001202:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120e:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8001212:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001216:	213c      	movs	r1, #60	; 0x3c
 8001218:	2010      	movs	r0, #16
 800121a:	f7ff faa3 	bl	8000764 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 800121e:	2130      	movs	r1, #48	; 0x30
 8001220:	2011      	movs	r0, #17
 8001222:	f7ff fa9f 	bl	8000764 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001226:	2104      	movs	r1, #4
 8001228:	2013      	movs	r0, #19
 800122a:	f7ff fa9b 	bl	8000764 <LG2_Write_Register>

	HAL_Delay(3000);
 800122e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001232:	f002 f94f 	bl	80034d4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001236:	21bf      	movs	r1, #191	; 0xbf
 8001238:	201c      	movs	r0, #28
 800123a:	f7ff fa3f 	bl	80006bc <HG2_Write_Register>
	HAL_Delay(2);
 800123e:	2002      	movs	r0, #2
 8001240:	f002 f948 	bl	80034d4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001244:	2158      	movs	r1, #88	; 0x58
 8001246:	201b      	movs	r0, #27
 8001248:	f7ff fa38 	bl	80006bc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 800124c:	21d8      	movs	r1, #216	; 0xd8
 800124e:	201b      	movs	r0, #27
 8001250:	f7ff fa34 	bl	80006bc <HG2_Write_Register>

	float rotZ = 0;
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	f607 22cc 	addw	r2, r7, #2764	; 0xacc
 800125c:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8

	float calOmegaX = 0;
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800126c:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f607 22fc 	addw	r2, r7, #2812	; 0xafc
 8001276:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	f607 22f8 	addw	r2, r7, #2808	; 0xaf8
 8001280:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 8001288:	e02e      	b.n	80012e8 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 800128a:	f7ff fa93 	bl	80007b4 <LG2_Get_Gyro_X>
 800128e:	eeb0 7a40 	vmov.f32	s14, s0
 8001292:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800129e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80012a2:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80012a6:	f7ff fab5 	bl	8000814 <LG2_Get_Gyro_Y>
 80012aa:	eeb0 7a40 	vmov.f32	s14, s0
 80012ae:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ba:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80012be:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80012c2:	f7ff fad9 	bl	8000878 <LG2_Get_Gyro_Z>
 80012c6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ca:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d6:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80012da:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80012de:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 80012e8:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80012ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012f0:	dbcb      	blt.n	800128a <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80012f2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80012f6:	ed93 7a00 	vldr	s14, [r3]
 80012fa:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001498 <main+0x338>
 80012fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001302:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001306:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 800130a:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001498 <main+0x338>
 8001316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131a:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800131e:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001322:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001498 <main+0x338>
 800132e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001332:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8001336:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800133a:	2201      	movs	r2, #1
 800133c:	2101      	movs	r1, #1
 800133e:	4857      	ldr	r0, [pc, #348]	; (800149c <main+0x33c>)
 8001340:	f006 fb7a 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001344:	20c8      	movs	r0, #200	; 0xc8
 8001346:	f002 f8c5 	bl	80034d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	4853      	ldr	r0, [pc, #332]	; (800149c <main+0x33c>)
 8001350:	f006 fb72 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001354:	20c8      	movs	r0, #200	; 0xc8
 8001356:	f002 f8bd 	bl	80034d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800135a:	2201      	movs	r2, #1
 800135c:	2101      	movs	r1, #1
 800135e:	484f      	ldr	r0, [pc, #316]	; (800149c <main+0x33c>)
 8001360:	f006 fb6a 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001364:	20c8      	movs	r0, #200	; 0xc8
 8001366:	f002 f8b5 	bl	80034d4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800136a:	2201      	movs	r2, #1
 800136c:	2104      	movs	r1, #4
 800136e:	484c      	ldr	r0, [pc, #304]	; (80014a0 <main+0x340>)
 8001370:	f006 fb62 	bl	8007a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	2108      	movs	r1, #8
 8001378:	4849      	ldr	r0, [pc, #292]	; (80014a0 <main+0x340>)
 800137a:	f006 fb5d 	bl	8007a38 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800137e:	2100      	movs	r1, #0
 8001380:	4848      	ldr	r0, [pc, #288]	; (80014a4 <main+0x344>)
 8001382:	f00d fe19 	bl	800efb8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001386:	2104      	movs	r1, #4
 8001388:	4846      	ldr	r0, [pc, #280]	; (80014a4 <main+0x344>)
 800138a:	f00d fe15 	bl	800efb8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800138e:	2108      	movs	r1, #8
 8001390:	4844      	ldr	r0, [pc, #272]	; (80014a4 <main+0x344>)
 8001392:	f00d fe11 	bl	800efb8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001396:	210c      	movs	r1, #12
 8001398:	4842      	ldr	r0, [pc, #264]	; (80014a4 <main+0x344>)
 800139a:	f00d fe0d 	bl	800efb8 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 800139e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80014a8 <main+0x348>
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff faa0 	bl	80008e8 <setServo>
    setServo(2, 180);
 80013a8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80014ac <main+0x34c>
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff fa9b 	bl	80008e8 <setServo>
    setServo(3, 0);
 80013b2:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80014b0 <main+0x350>
 80013b6:	2003      	movs	r0, #3
 80013b8:	f7ff fa96 	bl	80008e8 <setServo>
    setServo(4, 45);
 80013bc:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80014b4 <main+0x354>
 80013c0:	2004      	movs	r0, #4
 80013c2:	f7ff fa91 	bl	80008e8 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 80013c6:	483c      	ldr	r0, [pc, #240]	; (80014b8 <main+0x358>)
 80013c8:	f7ff fda0 	bl	8000f0c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
	long last_packet = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
	int ARMED = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80013de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80013e2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
  char state[MAX_PAYLOAD_LENGHT] = "";
 80013f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80013f4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	3304      	adds	r3, #4
 80013fe:	22f6      	movs	r2, #246	; 0xf6
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f015 fb80 	bl	8016b08 <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
  int packets_streamed = 50;
 800140e:	2332      	movs	r3, #50	; 0x32
 8001410:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
  int packetId;
  int have_recieved_anything = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
  char communication_state[50] = "SENDING RELIABLE";
 800141a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800141e:	f6a3 16fc 	subw	r6, r3, #2556	; 0x9fc
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <main+0x35c>)
 8001424:	4634      	mov	r4, r6
 8001426:	461d      	mov	r5, r3
 8001428:	6828      	ldr	r0, [r5, #0]
 800142a:	6869      	ldr	r1, [r5, #4]
 800142c:	68aa      	ldr	r2, [r5, #8]
 800142e:	68eb      	ldr	r3, [r5, #12]
 8001430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001432:	7c2b      	ldrb	r3, [r5, #16]
 8001434:	7023      	strb	r3, [r4, #0]
 8001436:	f106 0311 	add.w	r3, r6, #17
 800143a:	2221      	movs	r2, #33	; 0x21
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f015 fb62 	bl	8016b08 <memset>
  uint32_t previousTime = HAL_GetTick();
 8001444:	f002 f83a 	bl	80034bc <HAL_GetTick>
 8001448:	f8c7 0aa8 	str.w	r0, [r7, #2728]	; 0xaa8
  disarm(state);
 800144c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fdf1 	bl	8001038 <disarm>
  LoRA_begin(868000000);
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <main+0x358>)
 8001458:	f7ff fd58 	bl	8000f0c <LoRA_begin>

  while (1) {
	  if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800145c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001460:	21fa      	movs	r1, #250	; 0xfa
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fe4c 	bl	8001100 <recv_packet>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f6      	beq.n	800145c <main+0x2fc>
	  {
		  CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 800146e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe ff4c 	bl	8000310 <strlen>
 8001478:	4602      	mov	r2, r0
 800147a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f014 fecd 	bl	8016220 <CDC_Transmit_HS>
	  if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001486:	e7e9      	b.n	800145c <main+0x2fc>
 8001488:	d2f1a9fc 	.word	0xd2f1a9fc
 800148c:	3f50624d 	.word	0x3f50624d
 8001490:	08017478 	.word	0x08017478
 8001494:	3ff00000 	.word	0x3ff00000
 8001498:	43fa0000 	.word	0x43fa0000
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	58021800 	.word	0x58021800
 80014a4:	24001168 	.word	0x24001168
 80014a8:	42b40000 	.word	0x42b40000
 80014ac:	43340000 	.word	0x43340000
 80014b0:	00000000 	.word	0x00000000
 80014b4:	42340000 	.word	0x42340000
 80014b8:	33bca100 	.word	0x33bca100
 80014bc:	08017494 	.word	0x08017494

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09c      	sub	sp, #112	; 0x70
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	224c      	movs	r2, #76	; 0x4c
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f015 fb1a 	bl	8016b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2220      	movs	r2, #32
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f015 fb14 	bl	8016b08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f007 febd 	bl	8009260 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b30      	ldr	r3, [pc, #192]	; (80015ac <SystemClock_Config+0xec>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014f2:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <SystemClock_Config+0xec>)
 80014f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <SystemClock_Config+0xec>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001506:	bf00      	nop
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <SystemClock_Config+0xec>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001514:	d1f8      	bne.n	8001508 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001516:	2322      	movs	r3, #34	; 0x22
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800151a:	2301      	movs	r3, #1
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152a:	2300      	movs	r3, #0
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152e:	2304      	movs	r3, #4
 8001530:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001532:	230c      	movs	r3, #12
 8001534:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 800153a:	230c      	movs	r3, #12
 800153c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800153e:	2302      	movs	r3, #2
 8001540:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001542:	230c      	movs	r3, #12
 8001544:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001546:	2300      	movs	r3, #0
 8001548:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f007 fece 	bl	80092f4 <HAL_RCC_OscConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800155e:	f000 ff1b 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	233f      	movs	r3, #63	; 0x3f
 8001564:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001566:	2303      	movs	r3, #3
 8001568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800156e:	2308      	movs	r3, #8
 8001570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001572:	2340      	movs	r3, #64	; 0x40
 8001574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f008 fa8d 	bl	8009aa8 <HAL_RCC_ClockConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001594:	f000 ff00 	bl	8002398 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001598:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800159c:	2100      	movs	r1, #0
 800159e:	2000      	movs	r0, #0
 80015a0:	f008 fc38 	bl	8009e14 <HAL_RCC_MCOConfig>
}
 80015a4:	bf00      	nop
 80015a6:	3770      	adds	r7, #112	; 0x70
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58024800 	.word	0x58024800

080015b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0ae      	sub	sp, #184	; 0xb8
 80015b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	22b8      	movs	r2, #184	; 0xb8
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f015 faa3 	bl	8016b08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 80015c2:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80015ce:	2304      	movs	r3, #4
 80015d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80015d2:	230c      	movs	r3, #12
 80015d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80015d6:	2304      	movs	r3, #4
 80015d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015da:	2302      	movs	r3, #2
 80015dc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	4618      	mov	r0, r3
 80015fe:	f008 fe49 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001608:	f000 fec6 	bl	8002398 <Error_Handler>
  }
}
 800160c:	bf00      	nop
 800160e:	37b8      	adds	r7, #184	; 0xb8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2224      	movs	r2, #36	; 0x24
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f015 fa6b 	bl	8016b08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001634:	4a31      	ldr	r2, [pc, #196]	; (80016fc <MX_ADC1_Init+0xe8>)
 8001636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <MX_ADC1_Init+0xe4>)
 800163a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800163e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <MX_ADC1_Init+0xe4>)
 800164e:	2204      	movs	r2, #4
 8001650:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001654:	2200      	movs	r2, #0
 8001656:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_ADC1_Init+0xe4>)
 800165a:	2200      	movs	r2, #0
 800165c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001660:	2201      	movs	r2, #1
 8001662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_ADC1_Init+0xe4>)
 800166e:	2200      	movs	r2, #0
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001674:	2200      	movs	r2, #0
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_ADC1_Init+0xe4>)
 800167a:	2200      	movs	r2, #0
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001680:	2200      	movs	r2, #0
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_ADC1_Init+0xe4>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001692:	4819      	ldr	r0, [pc, #100]	; (80016f8 <MX_ADC1_Init+0xe4>)
 8001694:	f002 f99e 	bl	80039d4 <HAL_ADC_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800169e:	f000 fe7b 	bl	8002398 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4812      	ldr	r0, [pc, #72]	; (80016f8 <MX_ADC1_Init+0xe4>)
 80016ae:	f003 f9d9 	bl	8004a64 <HAL_ADCEx_MultiModeConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80016b8:	f000 fe6e 	bl	8002398 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_ADC1_Init+0xec>)
 80016be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c0:	2306      	movs	r3, #6
 80016c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80016c4:	2303      	movs	r3, #3
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016ce:	2304      	movs	r3, #4
 80016d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_ADC1_Init+0xe4>)
 80016e2:	f002 fb7f 	bl	8003de4 <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80016ec:	f000 fe54 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3730      	adds	r7, #48	; 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	24000bf8 	.word	0x24000bf8
 80016fc:	40022000 	.word	0x40022000
 8001700:	2a000400 	.word	0x2a000400

08001704 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2224      	movs	r2, #36	; 0x24
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f015 f9f9 	bl	8016b08 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001718:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <MX_ADC3_Init+0xd4>)
 800171a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800171e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001722:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001726:	2208      	movs	r2, #8
 8001728:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001738:	2204      	movs	r2, #4
 800173a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800173e:	2200      	movs	r2, #0
 8001740:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001744:	2200      	movs	r2, #0
 8001746:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800174a:	2201      	movs	r2, #1
 800174c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800176c:	2200      	movs	r2, #0
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001772:	2200      	movs	r2, #0
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_ADC3_Init+0xd0>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800178a:	4812      	ldr	r0, [pc, #72]	; (80017d4 <MX_ADC3_Init+0xd0>)
 800178c:	f002 f922 	bl	80039d4 <HAL_ADC_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001796:	f000 fdff 	bl	8002398 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_ADC3_Init+0xd8>)
 800179c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800179e:	2306      	movs	r3, #6
 80017a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80017aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ac:	2304      	movs	r3, #4
 80017ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_ADC3_Init+0xd0>)
 80017be:	f002 fb11 	bl	8003de4 <HAL_ADC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80017c8:	f000 fde6 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	24000c68 	.word	0x24000c68
 80017d8:	58026000 	.word	0x58026000
 80017dc:	04300002 	.word	0x04300002

080017e0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 80017e6:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <MX_FDCAN3_Init+0xc4>)
 80017e8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001804:	2200      	movs	r2, #0
 8001806:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800180a:	2210      	movs	r2, #16
 800180c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001810:	2201      	movs	r2, #1
 8001812:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001816:	2202      	movs	r2, #2
 8001818:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800181c:	2202      	movs	r2, #2
 800181e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001822:	2201      	movs	r2, #1
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001828:	2201      	movs	r2, #1
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800182e:	2201      	movs	r2, #1
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001834:	2201      	movs	r2, #1
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800183a:	2200      	movs	r2, #0
 800183c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001840:	2200      	movs	r2, #0
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001846:	2200      	movs	r2, #0
 8001848:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800184c:	2200      	movs	r2, #0
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001852:	2204      	movs	r2, #4
 8001854:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001858:	2200      	movs	r2, #0
 800185a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800185e:	2204      	movs	r2, #4
 8001860:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001864:	2200      	movs	r2, #0
 8001866:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800186a:	2204      	movs	r2, #4
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001870:	2200      	movs	r2, #0
 8001872:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001876:	2200      	movs	r2, #0
 8001878:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800187c:	2200      	movs	r2, #0
 800187e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001882:	2200      	movs	r2, #0
 8001884:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 8001888:	2204      	movs	r2, #4
 800188a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_FDCAN3_Init+0xc0>)
 800188e:	f005 fbaf 	bl	8006ff0 <HAL_FDCAN_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001898:	f000 fd7e 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	24000dc8 	.word	0x24000dc8
 80018a4:	4000d400 	.word	0x4000d400

080018a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_I2C2_Init+0x74>)
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <MX_I2C2_Init+0x78>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_I2C2_Init+0x74>)
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <MX_I2C2_Init+0x7c>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_I2C2_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_I2C2_Init+0x74>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_I2C2_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_I2C2_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_I2C2_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_I2C2_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_I2C2_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e2:	480e      	ldr	r0, [pc, #56]	; (800191c <MX_I2C2_Init+0x74>)
 80018e4:	f006 f8c2 	bl	8007a6c <HAL_I2C_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018ee:	f000 fd53 	bl	8002398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <MX_I2C2_Init+0x74>)
 80018f6:	f006 f963 	bl	8007bc0 <HAL_I2CEx_ConfigAnalogFilter>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001900:	f000 fd4a 	bl	8002398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001904:	2100      	movs	r1, #0
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_I2C2_Init+0x74>)
 8001908:	f006 f9a5 	bl	8007c56 <HAL_I2CEx_ConfigDigitalFilter>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001912:	f000 fd41 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24000e68 	.word	0x24000e68
 8001920:	40005800 	.word	0x40005800
 8001924:	20303e5d 	.word	0x20303e5d

08001928 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_SDMMC2_SD_Init+0x34>)
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <MX_SDMMC2_SD_Init+0x38>)
 8001930:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <MX_SDMMC2_SD_Init+0x34>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_SDMMC2_SD_Init+0x34>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <MX_SDMMC2_SD_Init+0x34>)
 8001940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001944:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <MX_SDMMC2_SD_Init+0x34>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <MX_SDMMC2_SD_Init+0x34>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	24000ebc 	.word	0x24000ebc
 8001960:	48022400 	.word	0x48022400

08001964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <MX_SPI1_Init+0xa4>)
 800196a:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <MX_SPI1_Init+0xa8>)
 800196c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MX_SPI1_Init+0xa4>)
 8001970:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_SPI1_Init+0xa4>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <MX_SPI1_Init+0xa4>)
 800197e:	2207      	movs	r2, #7
 8001980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_SPI1_Init+0xa4>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_SPI1_Init+0xa4>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_SPI1_Init+0xa4>)
 8001990:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_SPI1_Init+0xa4>)
 8001998:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800199c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_SPI1_Init+0xa4>)
 80019f6:	f00c fc97 	bl	800e328 <HAL_SPI_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001a00:	f000 fcca 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	24000f38 	.word	0x24000f38
 8001a0c:	40013000 	.word	0x40013000

08001a10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a16:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <MX_SPI2_Init+0xa8>)
 8001a18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a44:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001a48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI2_Init+0xa4>)
 8001aa2:	f00c fc41 	bl	800e328 <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001aac:	f000 fc74 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	24000fc0 	.word	0x24000fc0
 8001ab8:	40003800 	.word	0x40003800

08001abc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001ac2:	4a28      	ldr	r2, [pc, #160]	; (8001b64 <MX_SPI3_Init+0xa8>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001ac8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001acc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001ae8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001af0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001af4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_SPI3_Init+0xa4>)
 8001b4e:	f00c fbeb 	bl	800e328 <HAL_SPI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001b58:	f000 fc1e 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	24001048 	.word	0x24001048
 8001b64:	40003c00 	.word	0x40003c00

08001b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001ba2:	225a      	movs	r2, #90	; 0x5a
 8001ba4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb2:	4818      	ldr	r0, [pc, #96]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001bb4:	f00d f9a8 	bl	800ef08 <HAL_TIM_PWM_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001bbe:	f000 fbeb 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4810      	ldr	r0, [pc, #64]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001bd2:	f00e fc2f 	bl	8010434 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001bdc:	f000 fbdc 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be0:	2360      	movs	r3, #96	; 0x60
 8001be2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001bf8:	f00d fe4e 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c02:	f000 fbc9 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM2_Init+0xac>)
 8001c08:	f001 f8e4 	bl	8002dd4 <HAL_TIM_MspPostInit>

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	240010d0 	.word	0x240010d0

08001c18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c3e:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <MX_TIM3_Init+0xc4>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c50:	225a      	movs	r2, #90	; 0x5a
 8001c52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c60:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c62:	f00d f951 	bl	800ef08 <HAL_TIM_PWM_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c6c:	f000 fb94 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001c80:	f00e fbd8 	bl	8010434 <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c8a:	f000 fb85 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8e:	2360      	movs	r3, #96	; 0x60
 8001c90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001ca6:	f00d fdf7 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001cb0:	f000 fb72 	bl	8002398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001cbc:	f00d fdec 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cc6:	f000 fb67 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cca:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MX_TIM3_Init+0xc0>)
 8001ccc:	f001 f882 	bl	8002dd4 <HAL_TIM_MspPostInit>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2400111c 	.word	0x2400111c
 8001cdc:	40000400 	.word	0x40000400

08001ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d06:	4a33      	ldr	r2, [pc, #204]	; (8001dd4 <MX_TIM4_Init+0xf4>)
 8001d08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d0c:	221c      	movs	r2, #28
 8001d0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d18:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d2a:	4829      	ldr	r0, [pc, #164]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d2c:	f00d f8ec 	bl	800ef08 <HAL_TIM_PWM_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d36:	f000 fb2f 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	4821      	ldr	r0, [pc, #132]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d4a:	f00e fb73 	bl	8010434 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d54:	f000 fb20 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d58:	2360      	movs	r3, #96	; 0x60
 8001d5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d70:	f00d fd92 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d7a:	f000 fb0d 	bl	8002398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	2204      	movs	r2, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d86:	f00d fd87 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001d90:	f000 fb02 	bl	8002398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	2208      	movs	r2, #8
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d9c:	f00d fd7c 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001da6:	f000 faf7 	bl	8002398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	220c      	movs	r2, #12
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001db2:	f00d fd71 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001dbc:	f000 faec 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001dc2:	f001 f807 	bl	8002dd4 <HAL_TIM_MspPostInit>

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	24001168 	.word	0x24001168
 8001dd4:	40000800 	.word	0x40000800

08001dd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	463b      	mov	r3, r7
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001dfe:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <MX_TIM5_Init+0xb0>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e10:	225a      	movs	r2, #90	; 0x5a
 8001e12:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e20:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e22:	f00d f871 	bl	800ef08 <HAL_TIM_PWM_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 fab4 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4811      	ldr	r0, [pc, #68]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e40:	f00e faf8 	bl	8010434 <HAL_TIMEx_MasterConfigSynchronization>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001e4a:	f000 faa5 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4e:	2360      	movs	r3, #96	; 0x60
 8001e50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e5e:	463b      	mov	r3, r7
 8001e60:	220c      	movs	r2, #12
 8001e62:	4619      	mov	r1, r3
 8001e64:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e66:	f00d fd17 	bl	800f898 <HAL_TIM_PWM_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001e70:	f000 fa92 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM5_Init+0xac>)
 8001e76:	f000 ffad 	bl	8002dd4 <HAL_TIM_MspPostInit>

}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	240011b4 	.word	0x240011b4
 8001e88:	40000c00 	.word	0x40000c00

08001e8c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_TIM13_Init+0x40>)
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <MX_TIM13_Init+0x44>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <MX_TIM13_Init+0x40>)
 8001e98:	225f      	movs	r2, #95	; 0x5f
 8001e9a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_TIM13_Init+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <MX_TIM13_Init+0x40>)
 8001ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_TIM13_Init+0x40>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_TIM13_Init+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_TIM13_Init+0x40>)
 8001eb8:	f00c ffcf 	bl	800ee5a <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001ec2:	f000 fa69 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	24001200 	.word	0x24001200
 8001ed0:	40001c00 	.word	0x40001c00

08001ed4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <MX_UART4_Init+0x90>)
 8001eda:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <MX_UART4_Init+0x94>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_UART4_Init+0x90>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <MX_UART4_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_UART4_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_UART4_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_UART4_Init+0x90>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f1c:	4811      	ldr	r0, [pc, #68]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f1e:	f00e fb43 	bl	80105a8 <HAL_UART_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f28:	f000 fa36 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	480d      	ldr	r0, [pc, #52]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f30:	f00f fc49 	bl	80117c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f3a:	f000 fa2d 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f42:	f00f fc7e 	bl	8011842 <HAL_UARTEx_SetRxFifoThreshold>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f4c:	f000 fa24 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <MX_UART4_Init+0x90>)
 8001f52:	f00f fbff 	bl	8011754 <HAL_UARTEx_DisableFifoMode>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f5c:	f000 fa1c 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	240014a4 	.word	0x240014a4
 8001f68:	40004c00 	.word	0x40004c00

08001f6c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f72:	4a23      	ldr	r2, [pc, #140]	; (8002000 <MX_USART6_UART_Init+0x94>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fb4:	4811      	ldr	r0, [pc, #68]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001fb6:	f00e faf7 	bl	80105a8 <HAL_UART_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001fc0:	f000 f9ea 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	480d      	ldr	r0, [pc, #52]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001fc8:	f00f fbfd 	bl	80117c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001fd2:	f000 f9e1 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4808      	ldr	r0, [pc, #32]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001fda:	f00f fc32 	bl	8011842 <HAL_UARTEx_SetRxFifoThreshold>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001fe4:	f000 f9d8 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_USART6_UART_Init+0x90>)
 8001fea:	f00f fbb3 	bl	8011754 <HAL_UARTEx_DisableFifoMode>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001ff4:	f000 f9d0 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	24001538 	.word	0x24001538
 8002000:	40011400 	.word	0x40011400

08002004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <MX_DMA_Init+0xbc>)
 800200c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002010:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <MX_DMA_Init+0xbc>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <MX_DMA_Init+0xbc>)
 800201c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <MX_DMA_Init+0xbc>)
 800202a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800202e:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <MX_DMA_Init+0xbc>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <MX_DMA_Init+0xbc>)
 800203a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	200b      	movs	r0, #11
 800204c:	f002 fec7 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002050:	200b      	movs	r0, #11
 8002052:	f002 fede 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	200c      	movs	r0, #12
 800205c:	f002 febf 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002060:	200c      	movs	r0, #12
 8002062:	f002 fed6 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	200d      	movs	r0, #13
 800206c:	f002 feb7 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002070:	200d      	movs	r0, #13
 8002072:	f002 fece 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	200e      	movs	r0, #14
 800207c:	f002 feaf 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002080:	200e      	movs	r0, #14
 8002082:	f002 fec6 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	200f      	movs	r0, #15
 800208c:	f002 fea7 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002090:	200f      	movs	r0, #15
 8002092:	f002 febe 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	2010      	movs	r0, #16
 800209c:	f002 fe9f 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80020a0:	2010      	movs	r0, #16
 80020a2:	f002 feb6 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2046      	movs	r0, #70	; 0x46
 80020ac:	f002 fe97 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80020b0:	2046      	movs	r0, #70	; 0x46
 80020b2:	f002 feae 	bl	8004e12 <HAL_NVIC_EnableIRQ>

}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58024400 	.word	0x58024400

080020c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
 80020d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020da:	4ba7      	ldr	r3, [pc, #668]	; (8002378 <MX_GPIO_Init+0x2b4>)
 80020dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e0:	4aa5      	ldr	r2, [pc, #660]	; (8002378 <MX_GPIO_Init+0x2b4>)
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ea:	4ba3      	ldr	r3, [pc, #652]	; (8002378 <MX_GPIO_Init+0x2b4>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f8:	4b9f      	ldr	r3, [pc, #636]	; (8002378 <MX_GPIO_Init+0x2b4>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	4a9e      	ldr	r2, [pc, #632]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002100:	f043 0320 	orr.w	r3, r3, #32
 8002104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002108:	4b9b      	ldr	r3, [pc, #620]	; (8002378 <MX_GPIO_Init+0x2b4>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	4b98      	ldr	r3, [pc, #608]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	4a96      	ldr	r2, [pc, #600]	; (8002378 <MX_GPIO_Init+0x2b4>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002126:	4b94      	ldr	r3, [pc, #592]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b90      	ldr	r3, [pc, #576]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	4a8f      	ldr	r2, [pc, #572]	; (8002378 <MX_GPIO_Init+0x2b4>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002144:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	4a87      	ldr	r2, [pc, #540]	; (8002378 <MX_GPIO_Init+0x2b4>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002162:	4b85      	ldr	r3, [pc, #532]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002170:	4b81      	ldr	r3, [pc, #516]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002176:	4a80      	ldr	r2, [pc, #512]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002180:	4b7d      	ldr	r3, [pc, #500]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002194:	4a78      	ldr	r2, [pc, #480]	; (8002378 <MX_GPIO_Init+0x2b4>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219e:	4b76      	ldr	r3, [pc, #472]	; (8002378 <MX_GPIO_Init+0x2b4>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	f241 5104 	movw	r1, #5380	; 0x1504
 80021b2:	4872      	ldr	r0, [pc, #456]	; (800237c <MX_GPIO_Init+0x2b8>)
 80021b4:	f005 fc40 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f248 0106 	movw	r1, #32774	; 0x8006
 80021be:	4870      	ldr	r0, [pc, #448]	; (8002380 <MX_GPIO_Init+0x2bc>)
 80021c0:	f005 fc3a 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2130      	movs	r1, #48	; 0x30
 80021c8:	486e      	ldr	r0, [pc, #440]	; (8002384 <MX_GPIO_Init+0x2c0>)
 80021ca:	f005 fc35 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2103      	movs	r1, #3
 80021d2:	486d      	ldr	r0, [pc, #436]	; (8002388 <MX_GPIO_Init+0x2c4>)
 80021d4:	f005 fc30 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80021de:	486b      	ldr	r0, [pc, #428]	; (800238c <MX_GPIO_Init+0x2c8>)
 80021e0:	f005 fc2a 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	210e      	movs	r1, #14
 80021e8:	4869      	ldr	r0, [pc, #420]	; (8002390 <MX_GPIO_Init+0x2cc>)
 80021ea:	f005 fc25 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80021f4:	4867      	ldr	r0, [pc, #412]	; (8002394 <MX_GPIO_Init+0x2d0>)
 80021f6:	f005 fc1f 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2101      	movs	r1, #1
 80021fe:	4865      	ldr	r0, [pc, #404]	; (8002394 <MX_GPIO_Init+0x2d0>)
 8002200:	f005 fc1a 	bl	8007a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002204:	f241 5304 	movw	r3, #5380	; 0x1504
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220a:	2301      	movs	r3, #1
 800220c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4857      	ldr	r0, [pc, #348]	; (800237c <MX_GPIO_Init+0x2b8>)
 800221e:	f005 fa4b 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002222:	f248 0306 	movw	r3, #32774	; 0x8006
 8002226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4851      	ldr	r0, [pc, #324]	; (8002380 <MX_GPIO_Init+0x2bc>)
 800223c:	f005 fa3c 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002240:	2330      	movs	r3, #48	; 0x30
 8002242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4619      	mov	r1, r3
 8002256:	484b      	ldr	r0, [pc, #300]	; (8002384 <MX_GPIO_Init+0x2c0>)
 8002258:	f005 fa2e 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 800225c:	2303      	movs	r3, #3
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4845      	ldr	r0, [pc, #276]	; (8002388 <MX_GPIO_Init+0x2c4>)
 8002274:	f005 fa20 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002278:	2304      	movs	r3, #4
 800227a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002280:	2301      	movs	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	483f      	ldr	r0, [pc, #252]	; (8002388 <MX_GPIO_Init+0x2c4>)
 800228c:	f005 fa14 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002290:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	4838      	ldr	r0, [pc, #224]	; (800238c <MX_GPIO_Init+0x2c8>)
 80022aa:	f005 fa05 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80022ae:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80022b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4832      	ldr	r0, [pc, #200]	; (800238c <MX_GPIO_Init+0x2c8>)
 80022c4:	f005 f9f8 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80022c8:	2301      	movs	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	482d      	ldr	r0, [pc, #180]	; (8002390 <MX_GPIO_Init+0x2cc>)
 80022dc:	f005 f9ec 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80022e0:	230e      	movs	r3, #14
 80022e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4826      	ldr	r0, [pc, #152]	; (8002390 <MX_GPIO_Init+0x2cc>)
 80022f8:	f005 f9de 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80022fc:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002306:	2301      	movs	r3, #1
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	481a      	ldr	r0, [pc, #104]	; (800237c <MX_GPIO_Init+0x2b8>)
 8002312:	f005 f9d1 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002316:	f240 7301 	movw	r3, #1793	; 0x701
 800231a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	2301      	movs	r3, #1
 800231e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4819      	ldr	r0, [pc, #100]	; (8002394 <MX_GPIO_Init+0x2d0>)
 8002330:	f005 f9c2 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002334:	2310      	movs	r3, #16
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4812      	ldr	r0, [pc, #72]	; (8002390 <MX_GPIO_Init+0x2cc>)
 8002348:	f005 f9b6 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800234c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800235e:	2300      	movs	r3, #0
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_GPIO_Init+0x2bc>)
 800236a:	f005 f9a5 	bl	80076b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800236e:	bf00      	nop
 8002370:	3730      	adds	r7, #48	; 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	58024400 	.word	0x58024400
 800237c:	58021000 	.word	0x58021000
 8002380:	58020000 	.word	0x58020000
 8002384:	58020800 	.word	0x58020800
 8002388:	58020400 	.word	0x58020400
 800238c:	58021400 	.word	0x58021400
 8002390:	58021800 	.word	0x58021800
 8002394:	58020c00 	.word	0x58020c00

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023a0:	e7fe      	b.n	80023a0 <Error_Handler+0x8>
	...

080023a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_MspInit+0x30>)
 80023ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_MspInit+0x30>)
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_MspInit+0x30>)
 80023bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	58024400 	.word	0x58024400

080023d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a5d      	ldr	r2, [pc, #372]	; (800256c <HAL_ADC_MspInit+0x194>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d159      	bne.n	80024ae <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_ADC_MspInit+0x198>)
 80023fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002400:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <HAL_ADC_MspInit+0x198>)
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800240a:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_ADC_MspInit+0x198>)
 800240c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <HAL_ADC_MspInit+0x198>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241e:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_ADC_MspInit+0x198>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002428:	4b51      	ldr	r3, [pc, #324]	; (8002570 <HAL_ADC_MspInit+0x198>)
 800242a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002436:	2301      	movs	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243a:	2303      	movs	r3, #3
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	484a      	ldr	r0, [pc, #296]	; (8002574 <HAL_ADC_MspInit+0x19c>)
 800244a:	f005 f935 	bl	80076b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800244e:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002450:	4a4a      	ldr	r2, [pc, #296]	; (800257c <HAL_ADC_MspInit+0x1a4>)
 8002452:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002454:	4b48      	ldr	r3, [pc, #288]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002456:	2209      	movs	r2, #9
 8002458:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002460:	4b45      	ldr	r3, [pc, #276]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002466:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800246e:	4b42      	ldr	r3, [pc, #264]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002474:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800247c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800248a:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002490:	4839      	ldr	r0, [pc, #228]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 8002492:	f002 fcd9 	bl	8004e48 <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800249c:	f7ff ff7c 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a35      	ldr	r2, [pc, #212]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 80024a4:	659a      	str	r2, [r3, #88]	; 0x58
 80024a6:	4a34      	ldr	r2, [pc, #208]	; (8002578 <HAL_ADC_MspInit+0x1a0>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024ac:	e059      	b.n	8002562 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a33      	ldr	r2, [pc, #204]	; (8002580 <HAL_ADC_MspInit+0x1a8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d154      	bne.n	8002562 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_ADC_MspInit+0x198>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024be:	4a2c      	ldr	r2, [pc, #176]	; (8002570 <HAL_ADC_MspInit+0x198>)
 80024c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <HAL_ADC_MspInit+0x198>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_ADC_MspInit+0x198>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_ADC_MspInit+0x198>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_ADC_MspInit+0x198>)
 80024e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80024f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80024f8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80024fc:	f001 f80e 	bl	800351c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 8002502:	4a21      	ldr	r2, [pc, #132]	; (8002588 <HAL_ADC_MspInit+0x1b0>)
 8002504:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 8002508:	2273      	movs	r2, #115	; 0x73
 800250a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 800251a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 8002522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002526:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 800252a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 8002532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002536:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 800253a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800253e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002546:	480f      	ldr	r0, [pc, #60]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 8002548:	f002 fc7e 	bl	8004e48 <HAL_DMA_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002552:	f7ff ff21 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 800255a:	659a      	str	r2, [r3, #88]	; 0x58
 800255c:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_ADC_MspInit+0x1ac>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002562:	bf00      	nop
 8002564:	3730      	adds	r7, #48	; 0x30
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40022000 	.word	0x40022000
 8002570:	58024400 	.word	0x58024400
 8002574:	58020800 	.word	0x58020800
 8002578:	24000cd8 	.word	0x24000cd8
 800257c:	40020088 	.word	0x40020088
 8002580:	58026000 	.word	0x58026000
 8002584:	24000d50 	.word	0x24000d50
 8002588:	400204b8 	.word	0x400204b8

0800258c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b0b8      	sub	sp, #224	; 0xe0
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	22b8      	movs	r2, #184	; 0xb8
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f014 faab 	bl	8016b08 <memset>
  if(hfdcan->Instance==FDCAN3)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <HAL_FDCAN_MspInit+0xc4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d145      	bne.n	8002648 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80025c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	4618      	mov	r0, r3
 80025d4:	f007 fe5e 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80025de:	f7ff fedb 	bl	8002398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_FDCAN_MspInit+0xc8>)
 80025e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_FDCAN_MspInit+0xc8>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_FDCAN_MspInit+0xc8>)
 80025f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <HAL_FDCAN_MspInit+0xc8>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002606:	4a13      	ldr	r2, [pc, #76]	; (8002654 <HAL_FDCAN_MspInit+0xc8>)
 8002608:	f043 0320 	orr.w	r3, r3, #32
 800260c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_FDCAN_MspInit+0xc8>)
 8002612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800261e:	23c0      	movs	r3, #192	; 0xc0
 8002620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002636:	2302      	movs	r3, #2
 8002638:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800263c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002640:	4619      	mov	r1, r3
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <HAL_FDCAN_MspInit+0xcc>)
 8002644:	f005 f838 	bl	80076b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002648:	bf00      	nop
 800264a:	37e0      	adds	r7, #224	; 0xe0
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	4000d400 	.word	0x4000d400
 8002654:	58024400 	.word	0x58024400
 8002658:	58021400 	.word	0x58021400

0800265c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0b8      	sub	sp, #224	; 0xe0
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	22b8      	movs	r2, #184	; 0xb8
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f014 fa43 	bl	8016b08 <memset>
  if(hi2c->Instance==I2C2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <HAL_I2C_MspInit+0xd4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d14d      	bne.n	8002728 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800268c:	f04f 0208 	mov.w	r2, #8
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	4618      	mov	r0, r3
 80026a4:	f007 fdf6 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80026ae:	f7ff fe73 	bl	8002398 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_I2C_MspInit+0xd8>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <HAL_I2C_MspInit+0xd8>)
 80026ba:	f043 0320 	orr.w	r3, r3, #32
 80026be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_I2C_MspInit+0xd8>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026d0:	2303      	movs	r3, #3
 80026d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d6:	2312      	movs	r3, #18
 80026d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026e8:	2304      	movs	r3, #4
 80026ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026f2:	4619      	mov	r1, r3
 80026f4:	4810      	ldr	r0, [pc, #64]	; (8002738 <HAL_I2C_MspInit+0xdc>)
 80026f6:	f004 ffdf 	bl	80076b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_I2C_MspInit+0xd8>)
 80026fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <HAL_I2C_MspInit+0xd8>)
 8002702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002706:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_I2C_MspInit+0xd8>)
 800270c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2101      	movs	r1, #1
 800271c:	2021      	movs	r0, #33	; 0x21
 800271e:	f002 fb5e 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002722:	2021      	movs	r0, #33	; 0x21
 8002724:	f002 fb75 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	37e0      	adds	r7, #224	; 0xe0
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40005800 	.word	0x40005800
 8002734:	58024400 	.word	0x58024400
 8002738:	58021400 	.word	0x58021400

0800273c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0ba      	sub	sp, #232	; 0xe8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	22b8      	movs	r2, #184	; 0xb8
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f014 f9d3 	bl	8016b08 <memset>
  if(hsd->Instance==SDMMC2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_SD_MspInit+0x1a0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	f040 80b3 	bne.w	80028d4 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800276e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800277a:	2300      	movs	r3, #0
 800277c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800277e:	f107 0318 	add.w	r3, r7, #24
 8002782:	4618      	mov	r0, r3
 8002784:	f007 fd86 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800278e:	f7ff fe03 	bl	8002398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002792:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 8002794:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002798:	4a51      	ldr	r2, [pc, #324]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 800279a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80027a2:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 80027a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b0:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b6:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027c0:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 80027c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ce:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 80027d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d4:	4a42      	ldr	r2, [pc, #264]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 80027d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027de:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <HAL_SD_MspInit+0x1a4>)
 80027e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027ec:	2340      	movs	r3, #64	; 0x40
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002804:	230b      	movs	r3, #11
 8002806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800280e:	4619      	mov	r1, r3
 8002810:	4834      	ldr	r0, [pc, #208]	; (80028e4 <HAL_SD_MspInit+0x1a8>)
 8002812:	f004 ff51 	bl	80076b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002822:	2301      	movs	r3, #1
 8002824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800282e:	230b      	movs	r3, #11
 8002830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002834:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002838:	4619      	mov	r1, r3
 800283a:	482a      	ldr	r0, [pc, #168]	; (80028e4 <HAL_SD_MspInit+0x1a8>)
 800283c:	f004 ff3c 	bl	80076b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284e:	2301      	movs	r3, #1
 8002850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800285a:	230b      	movs	r3, #11
 800285c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002860:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002864:	4619      	mov	r1, r3
 8002866:	4820      	ldr	r0, [pc, #128]	; (80028e8 <HAL_SD_MspInit+0x1ac>)
 8002868:	f004 ff26 	bl	80076b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800286c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002886:	230b      	movs	r3, #11
 8002888:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800288c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002890:	4619      	mov	r1, r3
 8002892:	4815      	ldr	r0, [pc, #84]	; (80028e8 <HAL_SD_MspInit+0x1ac>)
 8002894:	f004 ff10 	bl	80076b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002898:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800289c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80028b2:	230a      	movs	r3, #10
 80028b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028bc:	4619      	mov	r1, r3
 80028be:	480a      	ldr	r0, [pc, #40]	; (80028e8 <HAL_SD_MspInit+0x1ac>)
 80028c0:	f004 fefa 	bl	80076b8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	207c      	movs	r0, #124	; 0x7c
 80028ca:	f002 fa88 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80028ce:	207c      	movs	r0, #124	; 0x7c
 80028d0:	f002 fa9f 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	37e8      	adds	r7, #232	; 0xe8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	48022400 	.word	0x48022400
 80028e0:	58024400 	.word	0x58024400
 80028e4:	58020c00 	.word	0x58020c00
 80028e8:	58021800 	.word	0x58021800

080028ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	; 0x38
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <HAL_SPI_MspInit+0x15c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d12e      	bne.n	800296c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800290e:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002914:	4a4d      	ldr	r2, [pc, #308]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800291a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800291e:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292c:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 800292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002932:	4a46      	ldr	r2, [pc, #280]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293c:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 800293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800294a:	23e0      	movs	r3, #224	; 0xe0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800295a:	2305      	movs	r3, #5
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	483a      	ldr	r0, [pc, #232]	; (8002a50 <HAL_SPI_MspInit+0x164>)
 8002966:	f004 fea7 	bl	80076b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800296a:	e068      	b.n	8002a3e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_SPI_MspInit+0x168>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12f      	bne.n	80029d6 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800297c:	4a33      	ldr	r2, [pc, #204]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800298c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 80029a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c4:	2305      	movs	r3, #5
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4822      	ldr	r0, [pc, #136]	; (8002a58 <HAL_SPI_MspInit+0x16c>)
 80029d0:	f004 fe72 	bl	80076b8 <HAL_GPIO_Init>
}
 80029d4:	e033      	b.n	8002a3e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_SPI_MspInit+0x170>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d12e      	bne.n	8002a3e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 80029e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e6:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 80029f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_SPI_MspInit+0x160>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a2e:	2306      	movs	r3, #6
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	4619      	mov	r1, r3
 8002a38:	4809      	ldr	r0, [pc, #36]	; (8002a60 <HAL_SPI_MspInit+0x174>)
 8002a3a:	f004 fe3d 	bl	80076b8 <HAL_GPIO_Init>
}
 8002a3e:	bf00      	nop
 8002a40:	3738      	adds	r7, #56	; 0x38
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40013000 	.word	0x40013000
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	58020000 	.word	0x58020000
 8002a54:	40003800 	.word	0x40003800
 8002a58:	58020400 	.word	0x58020400
 8002a5c:	40003c00 	.word	0x40003c00
 8002a60:	58020800 	.word	0x58020800

08002a64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	; 0x30
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d15d      	bne.n	8002b42 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a86:	4b8e      	ldr	r3, [pc, #568]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a8c:	4a8c      	ldr	r2, [pc, #560]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a96:	4b8a      	ldr	r3, [pc, #552]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa4:	4b86      	ldr	r3, [pc, #536]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aaa:	4a85      	ldr	r2, [pc, #532]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ab4:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad6:	f107 031c 	add.w	r3, r7, #28
 8002ada:	4619      	mov	r1, r3
 8002adc:	4879      	ldr	r0, [pc, #484]	; (8002cc4 <HAL_TIM_PWM_MspInit+0x260>)
 8002ade:	f004 fdeb 	bl	80076b8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002ae2:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002ae4:	4a79      	ldr	r2, [pc, #484]	; (8002ccc <HAL_TIM_PWM_MspInit+0x268>)
 8002ae6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002ae8:	4b77      	ldr	r3, [pc, #476]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002aea:	2214      	movs	r2, #20
 8002aec:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002af0:	2240      	movs	r2, #64	; 0x40
 8002af2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af4:	4b74      	ldr	r3, [pc, #464]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002afa:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b00:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b02:	4b71      	ldr	r3, [pc, #452]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b08:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b10:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002b12:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002b18:	4b6b      	ldr	r3, [pc, #428]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002b24:	4868      	ldr	r0, [pc, #416]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b26:	f002 f98f 	bl	8004e48 <HAL_DMA_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002b30:	f7ff fc32 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a64      	ldr	r2, [pc, #400]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b3a:	4a63      	ldr	r2, [pc, #396]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x264>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b40:	e119      	b.n	8002d76 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a62      	ldr	r2, [pc, #392]	; (8002cd0 <HAL_TIM_PWM_MspInit+0x26c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d16d      	bne.n	8002c28 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b4c:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b52:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b5c:	4b58      	ldr	r3, [pc, #352]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002b6a:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b6c:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <HAL_TIM_PWM_MspInit+0x274>)
 8002b6e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002b70:	4b58      	ldr	r3, [pc, #352]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b72:	2218      	movs	r2, #24
 8002b74:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b76:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b78:	2240      	movs	r2, #64	; 0x40
 8002b7a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7c:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002b82:	4b54      	ldr	r3, [pc, #336]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b88:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b8a:	4b52      	ldr	r3, [pc, #328]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b90:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b92:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b98:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002b9a:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002bac:	4849      	ldr	r0, [pc, #292]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002bae:	f002 f94b 	bl	8004e48 <HAL_DMA_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002bb8:	f7ff fbee 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a45      	ldr	r2, [pc, #276]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc2:	4a44      	ldr	r2, [pc, #272]	; (8002cd4 <HAL_TIM_PWM_MspInit+0x270>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002bc8:	4b44      	ldr	r3, [pc, #272]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002bca:	4a45      	ldr	r2, [pc, #276]	; (8002ce0 <HAL_TIM_PWM_MspInit+0x27c>)
 8002bcc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002bd0:	2217      	movs	r2, #23
 8002bd2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002be0:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be8:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bee:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002bf8:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002bfe:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002c0a:	4834      	ldr	r0, [pc, #208]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002c0c:	f002 f91c 	bl	8004e48 <HAL_DMA_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002c16:	f7ff fbbf 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c20:	4a2e      	ldr	r2, [pc, #184]	; (8002cdc <HAL_TIM_PWM_MspInit+0x278>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c26:	e0a6      	b.n	8002d76 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_TIM_PWM_MspInit+0x280>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d15e      	bne.n	8002cf0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c38:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c52:	4a26      	ldr	r2, [pc, #152]	; (8002cec <HAL_TIM_PWM_MspInit+0x288>)
 8002c54:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c58:	221f      	movs	r2, #31
 8002c5a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c76:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c7e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002c92:	4815      	ldr	r0, [pc, #84]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002c94:	f002 f8d8 	bl	8004e48 <HAL_DMA_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002c9e:	f7ff fb7b 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x284>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	201e      	movs	r0, #30
 8002cb4:	f002 f893 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cb8:	201e      	movs	r0, #30
 8002cba:	f002 f8aa 	bl	8004e12 <HAL_NVIC_EnableIRQ>
}
 8002cbe:	e05a      	b.n	8002d76 <HAL_TIM_PWM_MspInit+0x312>
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	58020000 	.word	0x58020000
 8002cc8:	2400124c 	.word	0x2400124c
 8002ccc:	40020028 	.word	0x40020028
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	240012c4 	.word	0x240012c4
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	2400133c 	.word	0x2400133c
 8002ce0:	40020070 	.word	0x40020070
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	240013b4 	.word	0x240013b4
 8002cec:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_TIM_PWM_MspInit+0x31c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d13d      	bne.n	8002d76 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_TIM_PWM_MspInit+0x320>)
 8002cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d00:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <HAL_TIM_PWM_MspInit+0x320>)
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_TIM_PWM_MspInit+0x320>)
 8002d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d1a:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <HAL_TIM_PWM_MspInit+0x328>)
 8002d1c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d20:	223a      	movs	r2, #58	; 0x3a
 8002d22:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d26:	2240      	movs	r2, #64	; 0x40
 8002d28:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d36:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d3e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d46:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002d5a:	480b      	ldr	r0, [pc, #44]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d5c:	f002 f874 	bl	8004e48 <HAL_DMA_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002d66:	f7ff fb17 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d70:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <HAL_TIM_PWM_MspInit+0x324>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d76:	bf00      	nop
 8002d78:	3730      	adds	r7, #48	; 0x30
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	58024400 	.word	0x58024400
 8002d88:	2400142c 	.word	0x2400142c
 8002d8c:	40020040 	.word	0x40020040

08002d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_TIM_Base_MspInit+0x3c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_TIM_Base_MspInit+0x40>)
 8002da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da8:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_TIM_Base_MspInit+0x40>)
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_TIM_Base_MspInit+0x40>)
 8002db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40001c00 	.word	0x40001c00
 8002dd0:	58024400 	.word	0x58024400

08002dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	; 0x30
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d120      	bne.n	8002e38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	4b52      	ldr	r3, [pc, #328]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfc:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e06:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e26:	2301      	movs	r3, #1
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4844      	ldr	r0, [pc, #272]	; (8002f44 <HAL_TIM_MspPostInit+0x170>)
 8002e32:	f004 fc41 	bl	80076b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002e36:	e07f      	b.n	8002f38 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <HAL_TIM_MspPostInit+0x174>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d11f      	bne.n	8002e82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e48:	4a3d      	ldr	r2, [pc, #244]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e60:	2330      	movs	r3, #48	; 0x30
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e70:	2302      	movs	r3, #2
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4832      	ldr	r0, [pc, #200]	; (8002f44 <HAL_TIM_MspPostInit+0x170>)
 8002e7c:	f004 fc1c 	bl	80076b8 <HAL_GPIO_Init>
}
 8002e80:	e05a      	b.n	8002f38 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a31      	ldr	r2, [pc, #196]	; (8002f4c <HAL_TIM_MspPostInit+0x178>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d131      	bne.n	8002ef0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8c:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e92:	4a2b      	ldr	r2, [pc, #172]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e9c:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002eaa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4822      	ldr	r0, [pc, #136]	; (8002f50 <HAL_TIM_MspPostInit+0x17c>)
 8002ec8:	f004 fbf6 	bl	80076b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ecc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee2:	f107 031c 	add.w	r3, r7, #28
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4819      	ldr	r0, [pc, #100]	; (8002f50 <HAL_TIM_MspPostInit+0x17c>)
 8002eea:	f004 fbe5 	bl	80076b8 <HAL_GPIO_Init>
}
 8002eee:	e023      	b.n	8002f38 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_TIM_MspPostInit+0x180>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d11e      	bne.n	8002f38 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_TIM_MspPostInit+0x16c>)
 8002f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f18:	2308      	movs	r3, #8
 8002f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f20:	2302      	movs	r3, #2
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	4619      	mov	r1, r3
 8002f32:	4809      	ldr	r0, [pc, #36]	; (8002f58 <HAL_TIM_MspPostInit+0x184>)
 8002f34:	f004 fbc0 	bl	80076b8 <HAL_GPIO_Init>
}
 8002f38:	bf00      	nop
 8002f3a:	3730      	adds	r7, #48	; 0x30
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58020400 	.word	0x58020400
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	58020c00 	.word	0x58020c00
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	58020000 	.word	0x58020000

08002f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0ba      	sub	sp, #232	; 0xe8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f74:	f107 0318 	add.w	r3, r7, #24
 8002f78:	22b8      	movs	r2, #184	; 0xb8
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f013 fdc3 	bl	8016b08 <memset>
  if(huart->Instance==UART4)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_UART_MspInit+0x160>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d147      	bne.n	800301c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f8c:	f04f 0202 	mov.w	r2, #2
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f9e:	f107 0318 	add.w	r3, r7, #24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f007 f976 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fae:	f7ff f9f3 	bl	8002398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002fb2:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb8:	4a41      	ldr	r2, [pc, #260]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd6:	4a3a      	ldr	r2, [pc, #232]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003008:	2308      	movs	r3, #8
 800300a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003012:	4619      	mov	r1, r3
 8003014:	482b      	ldr	r0, [pc, #172]	; (80030c4 <HAL_UART_MspInit+0x168>)
 8003016:	f004 fb4f 	bl	80076b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800301a:	e04a      	b.n	80030b2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <HAL_UART_MspInit+0x16c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d145      	bne.n	80030b2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003026:	f04f 0201 	mov.w	r2, #1
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003038:	f107 0318 	add.w	r3, r7, #24
 800303c:	4618      	mov	r0, r3
 800303e:	f007 f929 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003048:	f7ff f9a6 	bl	8002398 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800304c:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_UART_MspInit+0x164>)
 800304e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8003054:	f043 0320 	orr.w	r3, r3, #32
 8003058:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <HAL_UART_MspInit+0x164>)
 800305e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_UART_MspInit+0x164>)
 800306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_UART_MspInit+0x164>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003088:	23c0      	movs	r3, #192	; 0xc0
 800308a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80030a0:	2307      	movs	r3, #7
 80030a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4807      	ldr	r0, [pc, #28]	; (80030cc <HAL_UART_MspInit+0x170>)
 80030ae:	f004 fb03 	bl	80076b8 <HAL_GPIO_Init>
}
 80030b2:	bf00      	nop
 80030b4:	37e8      	adds	r7, #232	; 0xe8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40004c00 	.word	0x40004c00
 80030c0:	58024400 	.word	0x58024400
 80030c4:	58020400 	.word	0x58020400
 80030c8:	40011400 	.word	0x40011400
 80030cc:	58020800 	.word	0x58020800

080030d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <NMI_Handler+0x4>

080030d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030da:	e7fe      	b.n	80030da <HardFault_Handler+0x4>

080030dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e0:	e7fe      	b.n	80030e0 <MemManage_Handler+0x4>

080030e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e6:	e7fe      	b.n	80030e6 <BusFault_Handler+0x4>

080030e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030ec:	e7fe      	b.n	80030ec <UsageFault_Handler+0x4>

080030ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800311c:	f000 f9ba 	bl	8003494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}

08003124 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <DMA1_Stream0_IRQHandler+0x10>)
 800312a:	f002 fc4f 	bl	80059cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	240013b4 	.word	0x240013b4

08003138 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA1_Stream1_IRQHandler+0x10>)
 800313e:	f002 fc45 	bl	80059cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2400124c 	.word	0x2400124c

0800314c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA1_Stream2_IRQHandler+0x10>)
 8003152:	f002 fc3b 	bl	80059cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	2400142c 	.word	0x2400142c

08003160 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA1_Stream3_IRQHandler+0x10>)
 8003166:	f002 fc31 	bl	80059cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	240012c4 	.word	0x240012c4

08003174 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <DMA1_Stream4_IRQHandler+0x10>)
 800317a:	f002 fc27 	bl	80059cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2400133c 	.word	0x2400133c

08003188 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <DMA1_Stream5_IRQHandler+0x10>)
 800318e:	f002 fc1d 	bl	80059cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	24000cd8 	.word	0x24000cd8

0800319c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <TIM4_IRQHandler+0x10>)
 80031a2:	f00c fa59 	bl	800f658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	24001168 	.word	0x24001168

080031b0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <I2C2_EV_IRQHandler+0x10>)
 80031b6:	f004 fce9 	bl	8007b8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	24000e68 	.word	0x24000e68

080031c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <DMA2_Stream7_IRQHandler+0x10>)
 80031ca:	f002 fbff 	bl	80059cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	24000d50 	.word	0x24000d50

080031d8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <OTG_HS_IRQHandler+0x10>)
 80031de:	f004 fedf 	bl	8007fa0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	24002ad0 	.word	0x24002ad0

080031ec <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <SDMMC2_IRQHandler+0x10>)
 80031f2:	f009 fea5 	bl	800cf40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	24000ebc 	.word	0x24000ebc

08003200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <_sbrk+0x5c>)
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <_sbrk+0x60>)
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <_sbrk+0x64>)
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <_sbrk+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003230:	f013 fc72 	bl	8016b18 <__errno>
 8003234:	4603      	mov	r3, r0
 8003236:	220c      	movs	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e009      	b.n	8003254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <_sbrk+0x64>)
 8003250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	24050000 	.word	0x24050000
 8003260:	00000800 	.word	0x00000800
 8003264:	240015cc 	.word	0x240015cc
 8003268:	24003348 	.word	0x24003348

0800326c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <SystemInit+0xd0>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	4a31      	ldr	r2, [pc, #196]	; (800333c <SystemInit+0xd0>)
 8003278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800327c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <SystemInit+0xd4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	2b06      	cmp	r3, #6
 800328a:	d807      	bhi.n	800329c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <SystemInit+0xd4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 030f 	bic.w	r3, r3, #15
 8003294:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <SystemInit+0xd4>)
 8003296:	f043 0307 	orr.w	r3, r3, #7
 800329a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800329c:	4b29      	ldr	r3, [pc, #164]	; (8003344 <SystemInit+0xd8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <SystemInit+0xd8>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032a8:	4b26      	ldr	r3, [pc, #152]	; (8003344 <SystemInit+0xd8>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <SystemInit+0xd8>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4924      	ldr	r1, [pc, #144]	; (8003344 <SystemInit+0xd8>)
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <SystemInit+0xdc>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <SystemInit+0xd4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032c6:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <SystemInit+0xd4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 030f 	bic.w	r3, r3, #15
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <SystemInit+0xd4>)
 80032d0:	f043 0307 	orr.w	r3, r3, #7
 80032d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <SystemInit+0xd8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <SystemInit+0xd8>)
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <SystemInit+0xd8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <SystemInit+0xd8>)
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <SystemInit+0xe0>)
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <SystemInit+0xd8>)
 80032f0:	4a17      	ldr	r2, [pc, #92]	; (8003350 <SystemInit+0xe4>)
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <SystemInit+0xd8>)
 80032f6:	4a17      	ldr	r2, [pc, #92]	; (8003354 <SystemInit+0xe8>)
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <SystemInit+0xd8>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <SystemInit+0xd8>)
 8003302:	4a14      	ldr	r2, [pc, #80]	; (8003354 <SystemInit+0xe8>)
 8003304:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <SystemInit+0xd8>)
 8003308:	2200      	movs	r2, #0
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <SystemInit+0xd8>)
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <SystemInit+0xe8>)
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <SystemInit+0xd8>)
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003318:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <SystemInit+0xd8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <SystemInit+0xd8>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <SystemInit+0xd8>)
 8003326:	2200      	movs	r2, #0
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <SystemInit+0xec>)
 800332c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003330:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	52002000 	.word	0x52002000
 8003344:	58024400 	.word	0x58024400
 8003348:	eaf6ed7f 	.word	0xeaf6ed7f
 800334c:	02020200 	.word	0x02020200
 8003350:	01ff0000 	.word	0x01ff0000
 8003354:	01010280 	.word	0x01010280
 8003358:	52004000 	.word	0x52004000

0800335c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800335c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003360:	f7ff ff84 	bl	800326c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003364:	480c      	ldr	r0, [pc, #48]	; (8003398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003366:	490d      	ldr	r1, [pc, #52]	; (800339c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800336c:	e002      	b.n	8003374 <LoopCopyDataInit>

0800336e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003372:	3304      	adds	r3, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003378:	d3f9      	bcc.n	800336e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800337c:	4c0a      	ldr	r4, [pc, #40]	; (80033a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003380:	e001      	b.n	8003386 <LoopFillZerobss>

08003382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003384:	3204      	adds	r2, #4

08003386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003388:	d3fb      	bcc.n	8003382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800338a:	f013 fbcb 	bl	8016b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800338e:	f7fd fee7 	bl	8001160 <main>
  bx  lr
 8003392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003394:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003398:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800339c:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 80033a0:	0801763c 	.word	0x0801763c
  ldr r2, =_sbss
 80033a4:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 80033a8:	24003344 	.word	0x24003344

080033ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033ac:	e7fe      	b.n	80033ac <ADC3_IRQHandler>
	...

080033b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b6:	2003      	movs	r0, #3
 80033b8:	f001 fd06 	bl	8004dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033bc:	f006 fd94 	bl	8009ee8 <HAL_RCC_GetSysClockFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_Init+0x68>)
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	4913      	ldr	r1, [pc, #76]	; (800341c <HAL_Init+0x6c>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_Init+0x68>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_Init+0x6c>)
 80033e4:	5cd3      	ldrb	r3, [r2, r3]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_Init+0x70>)
 80033f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <HAL_Init+0x74>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033fa:	200f      	movs	r0, #15
 80033fc:	f000 f814 	bl	8003428 <HAL_InitTick>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e002      	b.n	8003410 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800340a:	f7fe ffcb 	bl	80023a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58024400 	.word	0x58024400
 800341c:	080175a4 	.word	0x080175a4
 8003420:	24000004 	.word	0x24000004
 8003424:	24000000 	.word	0x24000000

08003428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_InitTick+0x60>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e021      	b.n	8003480 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_InitTick+0x64>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_InitTick+0x60>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800344a:	fbb3 f3f1 	udiv	r3, r3, r1
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fceb 	bl	8004e2e <HAL_SYSTICK_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e00e      	b.n	8003480 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b0f      	cmp	r3, #15
 8003466:	d80a      	bhi.n	800347e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003468:	2200      	movs	r2, #0
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f001 fcb5 	bl	8004dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003474:	4a06      	ldr	r2, [pc, #24]	; (8003490 <HAL_InitTick+0x68>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e000      	b.n	8003480 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2400000c 	.word	0x2400000c
 800348c:	24000000 	.word	0x24000000
 8003490:	24000008 	.word	0x24000008

08003494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_IncTick+0x20>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_IncTick+0x24>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_IncTick+0x24>)
 80034a6:	6013      	str	r3, [r2, #0]
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2400000c 	.word	0x2400000c
 80034b8:	240015d0 	.word	0x240015d0

080034bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return uwTick;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_GetTick+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	240015d0 	.word	0x240015d0

080034d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034dc:	f7ff ffee 	bl	80034bc <HAL_GetTick>
 80034e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d005      	beq.n	80034fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_Delay+0x44>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034fa:	bf00      	nop
 80034fc:	f7ff ffde 	bl	80034bc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	429a      	cmp	r2, r3
 800350a:	d8f7      	bhi.n	80034fc <HAL_Delay+0x28>
  {
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	2400000c 	.word	0x2400000c

0800351c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	58000400 	.word	0x58000400

08003548 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	609a      	str	r2, [r3, #8]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3360      	adds	r3, #96	; 0x60
 80035c2:	461a      	mov	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <LL_ADC_SetOffset+0x60>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10b      	bne.n	80035ec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80035ea:	e00b      	b.n	8003604 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	431a      	orrs	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	58026000 	.word	0x58026000

08003614 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	461a      	mov	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	611a      	str	r2, [r3, #16]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3360      	adds	r3, #96	; 0x60
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	601a      	str	r2, [r3, #0]
  }
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	58026000 	.word	0x58026000

080036b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <LL_ADC_SetOffsetSaturation+0x40>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10e      	bne.n	80036ea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3360      	adds	r3, #96	; 0x60
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	58026000 	.word	0x58026000

080036fc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <LL_ADC_SetOffsetSign+0x40>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10e      	bne.n	800372e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3360      	adds	r3, #96	; 0x60
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	58026000 	.word	0x58026000

08003740 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3360      	adds	r3, #96	; 0x60
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <LL_ADC_SetOffsetState+0x50>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d108      	bne.n	8003774 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	431a      	orrs	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003772:	e007      	b.n	8003784 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	601a      	str	r2, [r3, #0]
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	58026000 	.word	0x58026000

08003794 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3330      	adds	r3, #48	; 0x30
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	4413      	add	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	211f      	movs	r1, #31
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0e9b      	lsrs	r3, r3, #26
 80037cc:	f003 011f 	and.w	r1, r3, #31
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	431a      	orrs	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3314      	adds	r3, #20
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0e5b      	lsrs	r3, r3, #25
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0d1b      	lsrs	r3, r3, #20
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2107      	movs	r1, #7
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	401a      	ands	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0d1b      	lsrs	r3, r3, #20
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d115      	bne.n	8003884 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f003 0318 	and.w	r3, r3, #24
 800386e:	4914      	ldr	r1, [pc, #80]	; (80038c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003870:	40d9      	lsrs	r1, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	400b      	ands	r3, r1
 8003876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003882:	e014      	b.n	80038ae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003890:	43db      	mvns	r3, r3
 8003892:	401a      	ands	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0318 	and.w	r3, r3, #24
 800389a:	4909      	ldr	r1, [pc, #36]	; (80038c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800389c:	40d9      	lsrs	r1, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	400b      	ands	r3, r1
 80038a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	58026000 	.word	0x58026000
 80038c0:	000fffff 	.word	0x000fffff

080038c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6093      	str	r3, [r2, #8]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	5fffffc0 	.word	0x5fffffc0

080038e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fc:	d101      	bne.n	8003902 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <LL_ADC_EnableInternalRegulator+0x24>)
 800391e:	4013      	ands	r3, r2
 8003920:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	6fffffc0 	.word	0x6fffffc0

08003938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394c:	d101      	bne.n	8003952 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <LL_ADC_IsEnabled+0x18>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <LL_ADC_IsEnabled+0x1a>
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d101      	bne.n	800399e <LL_ADC_REG_IsConversionOngoing+0x18>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d101      	bne.n	80039c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e1ee      	b.n	8003dcc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fe fceb 	bl	80023d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff67 	bl	80038e8 <LL_ADC_IsDeepPowerDownEnabled>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff4d 	bl	80038c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff82 	bl	8003938 <LL_ADC_IsInternalRegulatorEnabled>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d114      	bne.n	8003a64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff66 	bl	8003910 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a44:	4b8e      	ldr	r3, [pc, #568]	; (8003c80 <HAL_ADC_Init+0x2ac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	4a8e      	ldr	r2, [pc, #568]	; (8003c84 <HAL_ADC_Init+0x2b0>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a56:	e002      	b.n	8003a5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f9      	bne.n	8003a58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff65 	bl	8003938 <LL_ADC_IsInternalRegulatorEnabled>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	f043 0210 	orr.w	r2, r3, #16
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff76 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003a9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 8188 	bne.w	8003dba <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8184 	bne.w	8003dba <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff4a 	bl	8003960 <LL_ADC_IsEnabled>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d136      	bne.n	8003b40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6c      	ldr	r2, [pc, #432]	; (8003c88 <HAL_ADC_Init+0x2b4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_ADC_Init+0x112>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <HAL_ADC_Init+0x2b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10e      	bne.n	8003b04 <HAL_ADC_Init+0x130>
 8003ae6:	4868      	ldr	r0, [pc, #416]	; (8003c88 <HAL_ADC_Init+0x2b4>)
 8003ae8:	f7ff ff3a 	bl	8003960 <LL_ADC_IsEnabled>
 8003aec:	4604      	mov	r4, r0
 8003aee:	4867      	ldr	r0, [pc, #412]	; (8003c8c <HAL_ADC_Init+0x2b8>)
 8003af0:	f7ff ff36 	bl	8003960 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4323      	orrs	r3, r4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e008      	b.n	8003b16 <HAL_ADC_Init+0x142>
 8003b04:	4862      	ldr	r0, [pc, #392]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003b06:	f7ff ff2b 	bl	8003960 <LL_ADC_IsEnabled>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_ADC_Init+0x2b4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_Init+0x15a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <HAL_ADC_Init+0x2b8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_Init+0x15e>
 8003b2e:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <HAL_ADC_Init+0x2c0>)
 8003b30:	e000      	b.n	8003b34 <HAL_ADC_Init+0x160>
 8003b32:	4a59      	ldr	r2, [pc, #356]	; (8003c98 <HAL_ADC_Init+0x2c4>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7ff fd04 	bl	8003548 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d129      	bne.n	8003b9e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7e5b      	ldrb	r3, [r3, #25]
 8003b4e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b54:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003b5a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d013      	beq.n	8003b8c <HAL_ADC_Init+0x1b8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d00d      	beq.n	8003b88 <HAL_ADC_Init+0x1b4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b1c      	cmp	r3, #28
 8003b72:	d007      	beq.n	8003b84 <HAL_ADC_Init+0x1b0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b18      	cmp	r3, #24
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_Init+0x1ac>
 8003b7c:	2318      	movs	r3, #24
 8003b7e:	e006      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b80:	2300      	movs	r3, #0
 8003b82:	e004      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b84:	2310      	movs	r3, #16
 8003b86:	e002      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	e000      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b8c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003b8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e00e      	b.n	8003bbc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7e5b      	ldrb	r3, [r3, #25]
 8003ba2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ba8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d106      	bne.n	8003bd4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	045b      	lsls	r3, r3, #17
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d115      	bne.n	8003c26 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_ADC_Init+0x2c8>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	611a      	str	r2, [r3, #16]
 8003c24:	e009      	b.n	8003c3a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <HAL_ADC_Init+0x2cc>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	69b9      	ldr	r1, [r7, #24]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fea1 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003c44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff feae 	bl	80039ac <LL_ADC_INJ_IsConversionOngoing>
 8003c50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 808e 	bne.w	8003d76 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 808a 	bne.w	8003d76 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7e1b      	ldrb	r3, [r3, #24]
 8003c70:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c78:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e018      	b.n	8003cb2 <HAL_ADC_Init+0x2de>
 8003c80:	24000000 	.word	0x24000000
 8003c84:	053e2d63 	.word	0x053e2d63
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40022100 	.word	0x40022100
 8003c90:	58026000 	.word	0x58026000
 8003c94:	40022300 	.word	0x40022300
 8003c98:	58026300 	.word	0x58026300
 8003c9c:	fff04007 	.word	0xfff04007
 8003ca0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e1b      	ldrb	r3, [r3, #24]
 8003ca8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_ADC_Init+0x400>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d137      	bne.n	8003d40 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a3f      	ldr	r2, [pc, #252]	; (8003dd8 <HAL_ADC_Init+0x404>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d116      	bne.n	8003d0e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_ADC_Init+0x408>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	611a      	str	r2, [r3, #16]
 8003d0c:	e020      	b.n	8003d50 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <HAL_ADC_Init+0x40c>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0411      	lsls	r1, r2, #16
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d24:	4311      	orrs	r1, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003d30:	430a      	orrs	r2, r1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e007      	b.n	8003d50 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <HAL_ADC_Init+0x404>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d002      	beq.n	8003d76 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fd63 	bl	800483c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d10c      	bne.n	8003d98 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f023 010f 	bic.w	r1, r3, #15
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
 8003d96:	e007      	b.n	8003da8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 020f 	bic.w	r2, r2, #15
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	f023 0303 	bic.w	r3, r3, #3
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60
 8003db8:	e007      	b.n	8003dca <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3724      	adds	r7, #36	; 0x24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd90      	pop	{r4, r7, pc}
 8003dd4:	ffffbffc 	.word	0xffffbffc
 8003dd8:	58026000 	.word	0x58026000
 8003ddc:	fc00f81f 	.word	0xfc00f81f
 8003de0:	fc00f81e 	.word	0xfc00f81e

08003de4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b0b9      	sub	sp, #228	; 0xe4
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dfe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4aa9      	ldr	r2, [pc, #676]	; (80040ac <HAL_ADC_ConfigChannel+0x2c8>)
 8003e06:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d102      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x34>
 8003e12:	2302      	movs	r3, #2
 8003e14:	f000 bcfa 	b.w	800480c <HAL_ADC_ConfigChannel+0xa28>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fdae 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f040 84de 	bne.w	80047ee <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a9e      	ldr	r2, [pc, #632]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d033      	beq.n	8003ea4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x76>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	0e9b      	lsrs	r3, r3, #26
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2201      	movs	r2, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	e01d      	b.n	8003e96 <HAL_ADC_ConfigChannel+0xb2>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e004      	b.n	8003e8c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	69d1      	ldr	r1, [r2, #28]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f7ff fc6f 	bl	8003794 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fd63 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fd6f 	bl	80039ac <LL_ADC_INJ_IsConversionOngoing>
 8003ece:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 8270 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003edc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 826b 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7ff fc7a 	bl	80037ec <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10d      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	08db      	lsrs	r3, r3, #3
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f1c:	e032      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f1e:	4b65      	ldr	r3, [pc, #404]	; (80040b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f2a:	d10b      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x160>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	e01d      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x19c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x186>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	e00a      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x19c>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d048      	beq.n	800401e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6919      	ldr	r1, [r3, #16]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f9c:	f7ff fb08 	bl	80035b0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a42      	ldr	r2, [pc, #264]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d119      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7ff fba0 	bl	80036fc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6919      	ldr	r1, [r3, #16]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x1f0>
 8003fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fd2:	e000      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x1f2>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7ff fb6e 	bl	80036b8 <LL_ADC_SetOffsetSaturation>
 8003fdc:	e1ee      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d102      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x212>
 8003ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ff4:	e000      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x214>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f7ff fb3b 	bl	8003674 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6919      	ldr	r1, [r3, #16]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	7e1b      	ldrb	r3, [r3, #24]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d102      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x230>
 800400e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004012:	e000      	b.n	8004016 <HAL_ADC_ConfigChannel+0x232>
 8004014:	2300      	movs	r3, #0
 8004016:	461a      	mov	r2, r3
 8004018:	f7ff fb12 	bl	8003640 <LL_ADC_SetDataRightShift>
 800401c:	e1ce      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	f040 8181 	bne.w	800432c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff faef 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004036:	4603      	mov	r3, r0
 8004038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x272>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fae4 	bl	8003614 <LL_ADC_GetOffsetChannel>
 800404c:	4603      	mov	r3, r0
 800404e:	0e9b      	lsrs	r3, r3, #26
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	e01e      	b.n	8004094 <HAL_ADC_ConfigChannel+0x2b0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fad9 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800407c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e004      	b.n	8004092 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x2d4>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	e01e      	b.n	80040ea <HAL_ADC_ConfigChannel+0x306>
 80040ac:	47ff0000 	.word	0x47ff0000
 80040b0:	58026000 	.word	0x58026000
 80040b4:	5c001000 	.word	0x5c001000
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80040cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80040d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80040dc:	2320      	movs	r3, #32
 80040de:	e004      	b.n	80040ea <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80040e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d106      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fb22 	bl	8003740 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fa86 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004108:	4603      	mov	r3, r0
 800410a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x344>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fa7b 	bl	8003614 <LL_ADC_GetOffsetChannel>
 800411e:	4603      	mov	r3, r0
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	f003 021f 	and.w	r2, r3, #31
 8004126:	e01e      	b.n	8004166 <HAL_ADC_ConfigChannel+0x382>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fa70 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800414a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800414e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004156:	2320      	movs	r3, #32
 8004158:	e004      	b.n	8004164 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800415a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_ADC_ConfigChannel+0x39a>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	e018      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x3cc>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004196:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800419a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80041a2:	2320      	movs	r3, #32
 80041a4:	e004      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80041a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d106      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fabf 	bl	8003740 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2102      	movs	r1, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fa23 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x40a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fa18 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	e01e      	b.n	800422c <HAL_ADC_ConfigChannel+0x448>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fa0d 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800420c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800421c:	2320      	movs	r3, #32
 800421e:	e004      	b.n	800422a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x460>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	e014      	b.n	800426e <HAL_ADC_ConfigChannel+0x48a>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e004      	b.n	800426e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004268:	fab3 f383 	clz	r3, r3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	429a      	cmp	r2, r3
 8004270:	d106      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	2102      	movs	r1, #2
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fa60 	bl	8003740 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2103      	movs	r1, #3
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f9c4 	bl	8003614 <LL_ADC_GetOffsetChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x4c8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2103      	movs	r1, #3
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff f9b9 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	f003 021f 	and.w	r2, r3, #31
 80042aa:	e017      	b.n	80042dc <HAL_ADC_ConfigChannel+0x4f8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2103      	movs	r1, #3
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f9ae 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80042b8:	4603      	mov	r3, r0
 80042ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80042c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80042ce:	2320      	movs	r3, #32
 80042d0:	e003      	b.n	80042da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x510>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	e011      	b.n	8004318 <HAL_ADC_ConfigChannel+0x534>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004304:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	429a      	cmp	r2, r3
 800431a:	d14f      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	2103      	movs	r1, #3
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fa0b 	bl	8003740 <LL_ADC_SetOffsetState>
 800432a:	e047      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	069b      	lsls	r3, r3, #26
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	069b      	lsls	r3, r3, #26
 8004360:	429a      	cmp	r2, r3
 8004362:	d107      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004372:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	069b      	lsls	r3, r3, #26
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004396:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	069b      	lsls	r3, r3, #26
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff facd 	bl	8003960 <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 8219 	bne.w	8004800 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	461a      	mov	r2, r3
 80043dc:	f7ff fa32 	bl	8003844 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4aa1      	ldr	r2, [pc, #644]	; (800466c <HAL_ADC_ConfigChannel+0x888>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f040 812e 	bne.w	8004648 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x630>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2b09      	cmp	r3, #9
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e019      	b.n	8004448 <HAL_ADC_ConfigChannel+0x664>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800442c:	2320      	movs	r3, #32
 800442e:	e003      	b.n	8004438 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3301      	adds	r3, #1
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2b09      	cmp	r3, #9
 8004440:	bf94      	ite	ls
 8004442:	2301      	movls	r3, #1
 8004444:	2300      	movhi	r3, #0
 8004446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004448:	2b00      	cmp	r3, #0
 800444a:	d079      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x684>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0e9b      	lsrs	r3, r3, #26
 800445e:	3301      	adds	r3, #1
 8004460:	069b      	lsls	r3, r3, #26
 8004462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004466:	e015      	b.n	8004494 <HAL_ADC_ConfigChannel+0x6b0>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004478:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004480:	2320      	movs	r3, #32
 8004482:	e003      	b.n	800448c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3301      	adds	r3, #1
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x6d0>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	3301      	adds	r3, #1
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	e017      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x700>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80044cc:	2320      	movs	r3, #32
 80044ce:	e003      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	ea42 0103 	orr.w	r1, r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_ADC_ConfigChannel+0x726>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	3301      	adds	r3, #1
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	051b      	lsls	r3, r3, #20
 8004508:	e018      	b.n	800453c <HAL_ADC_ConfigChannel+0x758>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e003      	b.n	800452e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	3301      	adds	r3, #1
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800453c:	430b      	orrs	r3, r1
 800453e:	e07e      	b.n	800463e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_ADC_ConfigChannel+0x778>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0e9b      	lsrs	r3, r3, #26
 8004552:	3301      	adds	r3, #1
 8004554:	069b      	lsls	r3, r3, #26
 8004556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800455a:	e015      	b.n	8004588 <HAL_ADC_ConfigChannel+0x7a4>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e003      	b.n	8004580 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	069b      	lsls	r3, r3, #26
 8004584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x7c4>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	3301      	adds	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2101      	movs	r1, #1
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	e017      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x7f4>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	61bb      	str	r3, [r7, #24]
  return result;
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80045c0:	2320      	movs	r3, #32
 80045c2:	e003      	b.n	80045cc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3301      	adds	r3, #1
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2101      	movs	r1, #1
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	ea42 0103 	orr.w	r1, r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x820>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	3301      	adds	r3, #1
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	3b1e      	subs	r3, #30
 80045fc:	051b      	lsls	r3, r3, #20
 80045fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004602:	e01b      	b.n	800463c <HAL_ADC_ConfigChannel+0x858>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	60fb      	str	r3, [r7, #12]
  return result;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e003      	b.n	8004628 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f003 021f 	and.w	r2, r3, #31
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	3b1e      	subs	r3, #30
 8004636:	051b      	lsls	r3, r3, #20
 8004638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800463c:	430b      	orrs	r3, r1
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	6892      	ldr	r2, [r2, #8]
 8004642:	4619      	mov	r1, r3
 8004644:	f7ff f8d2 	bl	80037ec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f280 80d7 	bge.w	8004800 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <HAL_ADC_ConfigChannel+0x88c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_ADC_ConfigChannel+0x882>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a04      	ldr	r2, [pc, #16]	; (8004674 <HAL_ADC_ConfigChannel+0x890>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10a      	bne.n	800467c <HAL_ADC_ConfigChannel+0x898>
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <HAL_ADC_ConfigChannel+0x894>)
 8004668:	e009      	b.n	800467e <HAL_ADC_ConfigChannel+0x89a>
 800466a:	bf00      	nop
 800466c:	47ff0000 	.word	0x47ff0000
 8004670:	40022000 	.word	0x40022000
 8004674:	40022100 	.word	0x40022100
 8004678:	40022300 	.word	0x40022300
 800467c:	4b65      	ldr	r3, [pc, #404]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe ff88 	bl	8003594 <LL_ADC_GetCommonPathInternalCh>
 8004684:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a62      	ldr	r2, [pc, #392]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_ADC_ConfigChannel+0x8b8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a61      	ldr	r2, [pc, #388]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10e      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x8d6>
 800469c:	485e      	ldr	r0, [pc, #376]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 800469e:	f7ff f95f 	bl	8003960 <LL_ADC_IsEnabled>
 80046a2:	4604      	mov	r4, r0
 80046a4:	485d      	ldr	r0, [pc, #372]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 80046a6:	f7ff f95b 	bl	8003960 <LL_ADC_IsEnabled>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4323      	orrs	r3, r4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	e008      	b.n	80046cc <HAL_ADC_ConfigChannel+0x8e8>
 80046ba:	4859      	ldr	r0, [pc, #356]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 80046bc:	f7ff f950 	bl	8003960 <LL_ADC_IsEnabled>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8084 	beq.w	80047da <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a53      	ldr	r2, [pc, #332]	; (8004824 <HAL_ADC_ConfigChannel+0xa40>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d132      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x95e>
 80046dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d12c      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a4c      	ldr	r2, [pc, #304]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	f040 8086 	bne.w	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a47      	ldr	r2, [pc, #284]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_ADC_ConfigChannel+0x924>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a46      	ldr	r2, [pc, #280]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x928>
 8004708:	4a47      	ldr	r2, [pc, #284]	; (8004828 <HAL_ADC_ConfigChannel+0xa44>)
 800470a:	e000      	b.n	800470e <HAL_ADC_ConfigChannel+0x92a>
 800470c:	4a41      	ldr	r2, [pc, #260]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 800470e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004712:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fe ff28 	bl	800356e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800471e:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_ADC_ConfigChannel+0xa48>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	4a42      	ldr	r2, [pc, #264]	; (8004830 <HAL_ADC_ConfigChannel+0xa4c>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	3301      	adds	r3, #1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004732:	e002      	b.n	800473a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	3b01      	subs	r3, #1
 8004738:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f9      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004740:	e05e      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <HAL_ADC_ConfigChannel+0xa50>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d120      	bne.n	800478e <HAL_ADC_ConfigChannel+0x9aa>
 800474c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11a      	bne.n	800478e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a30      	ldr	r2, [pc, #192]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d14e      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_ADC_ConfigChannel+0x992>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x996>
 8004776:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <HAL_ADC_ConfigChannel+0xa44>)
 8004778:	e000      	b.n	800477c <HAL_ADC_ConfigChannel+0x998>
 800477a:	4a26      	ldr	r2, [pc, #152]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 800477c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fe fef1 	bl	800356e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800478c:	e038      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <HAL_ADC_ConfigChannel+0xa54>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d133      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
 8004798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800479c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d12d      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d128      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a19      	ldr	r2, [pc, #100]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0x9de>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a17      	ldr	r2, [pc, #92]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x9e2>
 80047c2:	4a19      	ldr	r2, [pc, #100]	; (8004828 <HAL_ADC_ConfigChannel+0xa44>)
 80047c4:	e000      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x9e4>
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 80047c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fe fecb 	bl	800356e <LL_ADC_SetCommonPathInternalCh>
 80047d8:	e012      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80047ec:	e008      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004808:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800480c:	4618      	mov	r0, r3
 800480e:	37e4      	adds	r7, #228	; 0xe4
 8004810:	46bd      	mov	sp, r7
 8004812:	bd90      	pop	{r4, r7, pc}
 8004814:	58026300 	.word	0x58026300
 8004818:	40022000 	.word	0x40022000
 800481c:	40022100 	.word	0x40022100
 8004820:	58026000 	.word	0x58026000
 8004824:	c7520000 	.word	0xc7520000
 8004828:	40022300 	.word	0x40022300
 800482c:	24000000 	.word	0x24000000
 8004830:	053e2d63 	.word	0x053e2d63
 8004834:	c3210000 	.word	0xc3210000
 8004838:	cb840000 	.word	0xcb840000

0800483c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6c      	ldr	r2, [pc, #432]	; (80049fc <ADC_ConfigureBoostMode+0x1c0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <ADC_ConfigureBoostMode+0x1c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a6b      	ldr	r2, [pc, #428]	; (8004a00 <ADC_ConfigureBoostMode+0x1c4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d109      	bne.n	800486c <ADC_ConfigureBoostMode+0x30>
 8004858:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <ADC_ConfigureBoostMode+0x1c8>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e008      	b.n	800487e <ADC_ConfigureBoostMode+0x42>
 800486c:	4b66      	ldr	r3, [pc, #408]	; (8004a08 <ADC_ConfigureBoostMode+0x1cc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01c      	beq.n	80048bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004882:	f005 fcab 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 8004886:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004890:	d010      	beq.n	80048b4 <ADC_ConfigureBoostMode+0x78>
 8004892:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004896:	d873      	bhi.n	8004980 <ADC_ConfigureBoostMode+0x144>
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d002      	beq.n	80048a4 <ADC_ConfigureBoostMode+0x68>
 800489e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a2:	d16d      	bne.n	8004980 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	60fb      	str	r3, [r7, #12]
        break;
 80048b2:	e068      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	60fb      	str	r3, [r7, #12]
        break;
 80048ba:	e064      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80048bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80048c0:	f04f 0100 	mov.w	r1, #0
 80048c4:	f006 fe86 	bl	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80048c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80048d2:	d051      	beq.n	8004978 <ADC_ConfigureBoostMode+0x13c>
 80048d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80048d8:	d854      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80048de:	d047      	beq.n	8004970 <ADC_ConfigureBoostMode+0x134>
 80048e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80048e4:	d84e      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80048ea:	d03d      	beq.n	8004968 <ADC_ConfigureBoostMode+0x12c>
 80048ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80048f0:	d848      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f6:	d033      	beq.n	8004960 <ADC_ConfigureBoostMode+0x124>
 80048f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fc:	d842      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004902:	d029      	beq.n	8004958 <ADC_ConfigureBoostMode+0x11c>
 8004904:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004908:	d83c      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 800490a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800490e:	d01a      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004910:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004914:	d836      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 8004916:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800491a:	d014      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 800491c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004920:	d830      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d00e      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	d82a      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 800492e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004932:	d008      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004934:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004938:	d824      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 800493a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800493e:	d002      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004940:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004944:	d11e      	bne.n	8004984 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0c9b      	lsrs	r3, r3, #18
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	60fb      	str	r3, [r7, #12]
        break;
 8004956:	e016      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	60fb      	str	r3, [r7, #12]
        break;
 800495e:	e012      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	60fb      	str	r3, [r7, #12]
        break;
 8004966:	e00e      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	60fb      	str	r3, [r7, #12]
        break;
 800496e:	e00a      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	09db      	lsrs	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
        break;
 8004976:	e006      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	60fb      	str	r3, [r7, #12]
        break;
 800497e:	e002      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004984:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <ADC_ConfigureBoostMode+0x1d0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d808      	bhi.n	80049a6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80049a4:	e025      	b.n	80049f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <ADC_ConfigureBoostMode+0x1d4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d80a      	bhi.n	80049c4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c0:	609a      	str	r2, [r3, #8]
}
 80049c2:	e016      	b.n	80049f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <ADC_ConfigureBoostMode+0x1d8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d80a      	bhi.n	80049e2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049de:	609a      	str	r2, [r3, #8]
}
 80049e0:	e007      	b.n	80049f2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80049f0:	609a      	str	r2, [r3, #8]
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40022000 	.word	0x40022000
 8004a00:	40022100 	.word	0x40022100
 8004a04:	40022300 	.word	0x40022300
 8004a08:	58026300 	.word	0x58026300
 8004a0c:	005f5e10 	.word	0x005f5e10
 8004a10:	00bebc20 	.word	0x00bebc20
 8004a14:	017d7840 	.word	0x017d7840

08004a18 <LL_ADC_IsEnabled>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <LL_ADC_IsEnabled+0x18>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <LL_ADC_IsEnabled+0x1a>
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_ADC_REG_IsConversionOngoing>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d101      	bne.n	8004a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b0a3      	sub	sp, #140	; 0x8c
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0c1      	b.n	8004c06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a5e      	ldr	r2, [pc, #376]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d102      	bne.n	8004aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a9c:	4b5d      	ldr	r3, [pc, #372]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e001      	b.n	8004aa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a0      	b.n	8004c06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ffb9 	bl	8004a3e <LL_ADC_REG_IsConversionOngoing>
 8004acc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ffb2 	bl	8004a3e <LL_ADC_REG_IsConversionOngoing>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 8081 	bne.w	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d17c      	bne.n	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a48      	ldr	r2, [pc, #288]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a46      	ldr	r2, [pc, #280]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004afe:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004b00:	e000      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004b02:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b04:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d039      	beq.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a39      	ldr	r2, [pc, #228]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10e      	bne.n	8004b52 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004b34:	4836      	ldr	r0, [pc, #216]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b36:	f7ff ff6f 	bl	8004a18 <LL_ADC_IsEnabled>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4835      	ldr	r0, [pc, #212]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b3e:	f7ff ff6b 	bl	8004a18 <LL_ADC_IsEnabled>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4323      	orrs	r3, r4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e008      	b.n	8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004b52:	4833      	ldr	r0, [pc, #204]	; (8004c20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b54:	f7ff ff60 	bl	8004a18 <LL_ADC_IsEnabled>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d047      	beq.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	6811      	ldr	r1, [r2, #0]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	6892      	ldr	r2, [r2, #8]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b80:	e03a      	b.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004b82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004ba2:	481b      	ldr	r0, [pc, #108]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ba4:	f7ff ff38 	bl	8004a18 <LL_ADC_IsEnabled>
 8004ba8:	4604      	mov	r4, r0
 8004baa:	481a      	ldr	r0, [pc, #104]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bac:	f7ff ff34 	bl	8004a18 <LL_ADC_IsEnabled>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4323      	orrs	r3, r4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e008      	b.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004bc0:	4817      	ldr	r0, [pc, #92]	; (8004c20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004bc2:	f7ff ff29 	bl	8004a18 <LL_ADC_IsEnabled>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004be0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004be2:	e009      	b.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004bf6:	e000      	b.n	8004bfa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c02:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	378c      	adds	r7, #140	; 0x8c
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40022000 	.word	0x40022000
 8004c14:	40022100 	.word	0x40022100
 8004c18:	40022300 	.word	0x40022300
 8004c1c:	58026300 	.word	0x58026300
 8004c20:	58026000 	.word	0x58026000
 8004c24:	fffff0e0 	.word	0xfffff0e0

08004c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <__NVIC_SetPriorityGrouping+0x40>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <__NVIC_SetPriorityGrouping+0x44>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c56:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <__NVIC_SetPriorityGrouping+0x40>)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	60d3      	str	r3, [r2, #12]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000ed00 	.word	0xe000ed00
 8004c6c:	05fa0000 	.word	0x05fa0000

08004c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <__NVIC_GetPriorityGrouping+0x18>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	f003 0307 	and.w	r3, r3, #7
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	db0b      	blt.n	8004cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	f003 021f 	and.w	r2, r3, #31
 8004ca4:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <__NVIC_EnableIRQ+0x38>)
 8004ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2001      	movs	r0, #1
 8004cae:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	e000e100 	.word	0xe000e100

08004cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	6039      	str	r1, [r7, #0]
 8004cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db0a      	blt.n	8004cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	490c      	ldr	r1, [pc, #48]	; (8004d14 <__NVIC_SetPriority+0x4c>)
 8004ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ce6:	0112      	lsls	r2, r2, #4
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	440b      	add	r3, r1
 8004cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cf0:	e00a      	b.n	8004d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4908      	ldr	r1, [pc, #32]	; (8004d18 <__NVIC_SetPriority+0x50>)
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	0112      	lsls	r2, r2, #4
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	440b      	add	r3, r1
 8004d06:	761a      	strb	r2, [r3, #24]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	e000e100 	.word	0xe000e100
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	; 0x24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f1c3 0307 	rsb	r3, r3, #7
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	bf28      	it	cs
 8004d3a:	2304      	movcs	r3, #4
 8004d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d902      	bls.n	8004d4c <NVIC_EncodePriority+0x30>
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3b03      	subs	r3, #3
 8004d4a:	e000      	b.n	8004d4e <NVIC_EncodePriority+0x32>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d50:	f04f 32ff 	mov.w	r2, #4294967295
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	401a      	ands	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d64:	f04f 31ff 	mov.w	r1, #4294967295
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	43d9      	mvns	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d74:	4313      	orrs	r3, r2
         );
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3724      	adds	r7, #36	; 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d94:	d301      	bcc.n	8004d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00f      	b.n	8004dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <SysTick_Config+0x40>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004da2:	210f      	movs	r1, #15
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	f7ff ff8e 	bl	8004cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <SysTick_Config+0x40>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004db2:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <SysTick_Config+0x40>)
 8004db4:	2207      	movs	r2, #7
 8004db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	e000e010 	.word	0xe000e010

08004dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff29 	bl	8004c28 <__NVIC_SetPriorityGrouping>
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	4603      	mov	r3, r0
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dec:	f7ff ff40 	bl	8004c70 <__NVIC_GetPriorityGrouping>
 8004df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	6978      	ldr	r0, [r7, #20]
 8004df8:	f7ff ff90 	bl	8004d1c <NVIC_EncodePriority>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff5f 	bl	8004cc8 <__NVIC_SetPriority>
}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ff33 	bl	8004c8c <__NVIC_EnableIRQ>
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ffa4 	bl	8004d84 <SysTick_Config>
 8004e3c:	4603      	mov	r3, r0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e50:	f7fe fb34 	bl	80034bc <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e312      	b.n	8005486 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a66      	ldr	r2, [pc, #408]	; (8005000 <HAL_DMA_Init+0x1b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d04a      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a65      	ldr	r2, [pc, #404]	; (8005004 <HAL_DMA_Init+0x1bc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d045      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a63      	ldr	r2, [pc, #396]	; (8005008 <HAL_DMA_Init+0x1c0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d040      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a62      	ldr	r2, [pc, #392]	; (800500c <HAL_DMA_Init+0x1c4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d03b      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a60      	ldr	r2, [pc, #384]	; (8005010 <HAL_DMA_Init+0x1c8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d036      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a5f      	ldr	r2, [pc, #380]	; (8005014 <HAL_DMA_Init+0x1cc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d031      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5d      	ldr	r2, [pc, #372]	; (8005018 <HAL_DMA_Init+0x1d0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02c      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a5c      	ldr	r2, [pc, #368]	; (800501c <HAL_DMA_Init+0x1d4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d027      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a5a      	ldr	r2, [pc, #360]	; (8005020 <HAL_DMA_Init+0x1d8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d022      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a59      	ldr	r2, [pc, #356]	; (8005024 <HAL_DMA_Init+0x1dc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d01d      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a57      	ldr	r2, [pc, #348]	; (8005028 <HAL_DMA_Init+0x1e0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d018      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a56      	ldr	r2, [pc, #344]	; (800502c <HAL_DMA_Init+0x1e4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a54      	ldr	r2, [pc, #336]	; (8005030 <HAL_DMA_Init+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a53      	ldr	r2, [pc, #332]	; (8005034 <HAL_DMA_Init+0x1ec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a51      	ldr	r2, [pc, #324]	; (8005038 <HAL_DMA_Init+0x1f0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a50      	ldr	r2, [pc, #320]	; (800503c <HAL_DMA_Init+0x1f4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d101      	bne.n	8004f04 <HAL_DMA_Init+0xbc>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_DMA_Init+0xbe>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 813c 	beq.w	8005184 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a37      	ldr	r2, [pc, #220]	; (8005000 <HAL_DMA_Init+0x1b8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d04a      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a36      	ldr	r2, [pc, #216]	; (8005004 <HAL_DMA_Init+0x1bc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d045      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a34      	ldr	r2, [pc, #208]	; (8005008 <HAL_DMA_Init+0x1c0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d040      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a33      	ldr	r2, [pc, #204]	; (800500c <HAL_DMA_Init+0x1c4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d03b      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a31      	ldr	r2, [pc, #196]	; (8005010 <HAL_DMA_Init+0x1c8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d036      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a30      	ldr	r2, [pc, #192]	; (8005014 <HAL_DMA_Init+0x1cc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d031      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2e      	ldr	r2, [pc, #184]	; (8005018 <HAL_DMA_Init+0x1d0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02c      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2d      	ldr	r2, [pc, #180]	; (800501c <HAL_DMA_Init+0x1d4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d027      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2b      	ldr	r2, [pc, #172]	; (8005020 <HAL_DMA_Init+0x1d8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <HAL_DMA_Init+0x1dc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01d      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <HAL_DMA_Init+0x1e0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a27      	ldr	r2, [pc, #156]	; (800502c <HAL_DMA_Init+0x1e4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <HAL_DMA_Init+0x1e8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_DMA_Init+0x1ec>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_DMA_Init+0x1f0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <HAL_DMA_Init+0x1f4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d108      	bne.n	8004fce <HAL_DMA_Init+0x186>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e007      	b.n	8004fde <HAL_DMA_Init+0x196>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fde:	e02f      	b.n	8005040 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fe0:	f7fe fa6c 	bl	80034bc <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d928      	bls.n	8005040 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e242      	b.n	8005486 <HAL_DMA_Init+0x63e>
 8005000:	40020010 	.word	0x40020010
 8005004:	40020028 	.word	0x40020028
 8005008:	40020040 	.word	0x40020040
 800500c:	40020058 	.word	0x40020058
 8005010:	40020070 	.word	0x40020070
 8005014:	40020088 	.word	0x40020088
 8005018:	400200a0 	.word	0x400200a0
 800501c:	400200b8 	.word	0x400200b8
 8005020:	40020410 	.word	0x40020410
 8005024:	40020428 	.word	0x40020428
 8005028:	40020440 	.word	0x40020440
 800502c:	40020458 	.word	0x40020458
 8005030:	40020470 	.word	0x40020470
 8005034:	40020488 	.word	0x40020488
 8005038:	400204a0 	.word	0x400204a0
 800503c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1c8      	bne.n	8004fe0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4b83      	ldr	r3, [pc, #524]	; (8005268 <HAL_DMA_Init+0x420>)
 800505a:	4013      	ands	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005066:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005072:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b04      	cmp	r3, #4
 8005092:	d107      	bne.n	80050a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	4313      	orrs	r3, r2
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b28      	cmp	r3, #40	; 0x28
 80050aa:	d903      	bls.n	80050b4 <HAL_DMA_Init+0x26c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b2e      	cmp	r3, #46	; 0x2e
 80050b2:	d91f      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b3e      	cmp	r3, #62	; 0x3e
 80050ba:	d903      	bls.n	80050c4 <HAL_DMA_Init+0x27c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b42      	cmp	r3, #66	; 0x42
 80050c2:	d917      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b46      	cmp	r3, #70	; 0x46
 80050ca:	d903      	bls.n	80050d4 <HAL_DMA_Init+0x28c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b48      	cmp	r3, #72	; 0x48
 80050d2:	d90f      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b4e      	cmp	r3, #78	; 0x4e
 80050da:	d903      	bls.n	80050e4 <HAL_DMA_Init+0x29c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b52      	cmp	r3, #82	; 0x52
 80050e2:	d907      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b73      	cmp	r3, #115	; 0x73
 80050ea:	d905      	bls.n	80050f8 <HAL_DMA_Init+0x2b0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b77      	cmp	r3, #119	; 0x77
 80050f2:	d801      	bhi.n	80050f8 <HAL_DMA_Init+0x2b0>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_DMA_Init+0x2b2>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005104:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b04      	cmp	r3, #4
 800512e:	d117      	bne.n	8005160 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 fdca 	bl	8006cdc <DMA_CheckFifoParam>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2240      	movs	r2, #64	; 0x40
 8005152:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e192      	b.n	8005486 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f001 fd05 	bl	8006b78 <DMA_CalcBaseAndBitshift>
 800516e:	4603      	mov	r3, r0
 8005170:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	223f      	movs	r2, #63	; 0x3f
 800517c:	409a      	lsls	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	609a      	str	r2, [r3, #8]
 8005182:	e0c8      	b.n	8005316 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a38      	ldr	r2, [pc, #224]	; (800526c <HAL_DMA_Init+0x424>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a37      	ldr	r2, [pc, #220]	; (8005270 <HAL_DMA_Init+0x428>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a35      	ldr	r2, [pc, #212]	; (8005274 <HAL_DMA_Init+0x42c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a34      	ldr	r2, [pc, #208]	; (8005278 <HAL_DMA_Init+0x430>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a32      	ldr	r2, [pc, #200]	; (800527c <HAL_DMA_Init+0x434>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a31      	ldr	r2, [pc, #196]	; (8005280 <HAL_DMA_Init+0x438>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <HAL_DMA_Init+0x43c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <HAL_DMA_Init+0x440>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_DMA_Init+0x390>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_DMA_Init+0x392>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8092 	beq.w	8005304 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a21      	ldr	r2, [pc, #132]	; (800526c <HAL_DMA_Init+0x424>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d021      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a20      	ldr	r2, [pc, #128]	; (8005270 <HAL_DMA_Init+0x428>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01c      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <HAL_DMA_Init+0x42c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d017      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <HAL_DMA_Init+0x430>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d012      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1b      	ldr	r2, [pc, #108]	; (800527c <HAL_DMA_Init+0x434>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00d      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_DMA_Init+0x438>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d008      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <HAL_DMA_Init+0x43c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a17      	ldr	r2, [pc, #92]	; (8005288 <HAL_DMA_Init+0x440>)
 800522c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_DMA_Init+0x444>)
 800524a:	4013      	ands	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d01c      	beq.n	8005290 <HAL_DMA_Init+0x448>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d102      	bne.n	8005264 <HAL_DMA_Init+0x41c>
 800525e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005262:	e016      	b.n	8005292 <HAL_DMA_Init+0x44a>
 8005264:	2300      	movs	r3, #0
 8005266:	e014      	b.n	8005292 <HAL_DMA_Init+0x44a>
 8005268:	fe10803f 	.word	0xfe10803f
 800526c:	58025408 	.word	0x58025408
 8005270:	5802541c 	.word	0x5802541c
 8005274:	58025430 	.word	0x58025430
 8005278:	58025444 	.word	0x58025444
 800527c:	58025458 	.word	0x58025458
 8005280:	5802546c 	.word	0x5802546c
 8005284:	58025480 	.word	0x58025480
 8005288:	58025494 	.word	0x58025494
 800528c:	fffe000f 	.word	0xfffe000f
 8005290:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68d2      	ldr	r2, [r2, #12]
 8005296:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005298:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b6e      	ldr	r3, [pc, #440]	; (8005490 <HAL_DMA_Init+0x648>)
 80052d8:	4413      	add	r3, r2
 80052da:	4a6e      	ldr	r2, [pc, #440]	; (8005494 <HAL_DMA_Init+0x64c>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	009a      	lsls	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 fc45 	bl	8006b78 <DMA_CalcBaseAndBitshift>
 80052ee:	4603      	mov	r3, r0
 80052f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2201      	movs	r2, #1
 80052fc:	409a      	lsls	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e008      	b.n	8005316 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2240      	movs	r2, #64	; 0x40
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2203      	movs	r2, #3
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e0b7      	b.n	8005486 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5f      	ldr	r2, [pc, #380]	; (8005498 <HAL_DMA_Init+0x650>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d072      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5d      	ldr	r2, [pc, #372]	; (800549c <HAL_DMA_Init+0x654>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d06d      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a5c      	ldr	r2, [pc, #368]	; (80054a0 <HAL_DMA_Init+0x658>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d068      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5a      	ldr	r2, [pc, #360]	; (80054a4 <HAL_DMA_Init+0x65c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d063      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a59      	ldr	r2, [pc, #356]	; (80054a8 <HAL_DMA_Init+0x660>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d05e      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a57      	ldr	r2, [pc, #348]	; (80054ac <HAL_DMA_Init+0x664>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d059      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <HAL_DMA_Init+0x668>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d054      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a54      	ldr	r2, [pc, #336]	; (80054b4 <HAL_DMA_Init+0x66c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d04f      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a53      	ldr	r2, [pc, #332]	; (80054b8 <HAL_DMA_Init+0x670>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04a      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a51      	ldr	r2, [pc, #324]	; (80054bc <HAL_DMA_Init+0x674>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d045      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a50      	ldr	r2, [pc, #320]	; (80054c0 <HAL_DMA_Init+0x678>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d040      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a4e      	ldr	r2, [pc, #312]	; (80054c4 <HAL_DMA_Init+0x67c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d03b      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a4d      	ldr	r2, [pc, #308]	; (80054c8 <HAL_DMA_Init+0x680>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d036      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4b      	ldr	r2, [pc, #300]	; (80054cc <HAL_DMA_Init+0x684>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d031      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4a      	ldr	r2, [pc, #296]	; (80054d0 <HAL_DMA_Init+0x688>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d02c      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a48      	ldr	r2, [pc, #288]	; (80054d4 <HAL_DMA_Init+0x68c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d027      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a47      	ldr	r2, [pc, #284]	; (80054d8 <HAL_DMA_Init+0x690>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a45      	ldr	r2, [pc, #276]	; (80054dc <HAL_DMA_Init+0x694>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01d      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a44      	ldr	r2, [pc, #272]	; (80054e0 <HAL_DMA_Init+0x698>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a42      	ldr	r2, [pc, #264]	; (80054e4 <HAL_DMA_Init+0x69c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a41      	ldr	r2, [pc, #260]	; (80054e8 <HAL_DMA_Init+0x6a0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3f      	ldr	r2, [pc, #252]	; (80054ec <HAL_DMA_Init+0x6a4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a3e      	ldr	r2, [pc, #248]	; (80054f0 <HAL_DMA_Init+0x6a8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_DMA_Init+0x5be>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a3c      	ldr	r2, [pc, #240]	; (80054f4 <HAL_DMA_Init+0x6ac>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <HAL_DMA_Init+0x5c2>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <HAL_DMA_Init+0x5c4>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d032      	beq.n	8005476 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 fcdf 	bl	8006dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d102      	bne.n	8005424 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005438:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <HAL_DMA_Init+0x61c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b08      	cmp	r3, #8
 8005448:	d80c      	bhi.n	8005464 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fd5c 	bl	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	e008      	b.n	8005476 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	a7fdabf8 	.word	0xa7fdabf8
 8005494:	cccccccd 	.word	0xcccccccd
 8005498:	40020010 	.word	0x40020010
 800549c:	40020028 	.word	0x40020028
 80054a0:	40020040 	.word	0x40020040
 80054a4:	40020058 	.word	0x40020058
 80054a8:	40020070 	.word	0x40020070
 80054ac:	40020088 	.word	0x40020088
 80054b0:	400200a0 	.word	0x400200a0
 80054b4:	400200b8 	.word	0x400200b8
 80054b8:	40020410 	.word	0x40020410
 80054bc:	40020428 	.word	0x40020428
 80054c0:	40020440 	.word	0x40020440
 80054c4:	40020458 	.word	0x40020458
 80054c8:	40020470 	.word	0x40020470
 80054cc:	40020488 	.word	0x40020488
 80054d0:	400204a0 	.word	0x400204a0
 80054d4:	400204b8 	.word	0x400204b8
 80054d8:	58025408 	.word	0x58025408
 80054dc:	5802541c 	.word	0x5802541c
 80054e0:	58025430 	.word	0x58025430
 80054e4:	58025444 	.word	0x58025444
 80054e8:	58025458 	.word	0x58025458
 80054ec:	5802546c 	.word	0x5802546c
 80054f0:	58025480 	.word	0x58025480
 80054f4:	58025494 	.word	0x58025494

080054f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e226      	b.n	8005962 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_DMA_Start_IT+0x2a>
 800551e:	2302      	movs	r3, #2
 8005520:	e21f      	b.n	8005962 <HAL_DMA_Start_IT+0x46a>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	f040 820a 	bne.w	800594c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a68      	ldr	r2, [pc, #416]	; (80056ec <HAL_DMA_Start_IT+0x1f4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a66      	ldr	r2, [pc, #408]	; (80056f0 <HAL_DMA_Start_IT+0x1f8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a65      	ldr	r2, [pc, #404]	; (80056f4 <HAL_DMA_Start_IT+0x1fc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a63      	ldr	r2, [pc, #396]	; (80056f8 <HAL_DMA_Start_IT+0x200>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a62      	ldr	r2, [pc, #392]	; (80056fc <HAL_DMA_Start_IT+0x204>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a60      	ldr	r2, [pc, #384]	; (8005700 <HAL_DMA_Start_IT+0x208>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a5f      	ldr	r2, [pc, #380]	; (8005704 <HAL_DMA_Start_IT+0x20c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a5d      	ldr	r2, [pc, #372]	; (8005708 <HAL_DMA_Start_IT+0x210>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5c      	ldr	r2, [pc, #368]	; (800570c <HAL_DMA_Start_IT+0x214>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5a      	ldr	r2, [pc, #360]	; (8005710 <HAL_DMA_Start_IT+0x218>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a59      	ldr	r2, [pc, #356]	; (8005714 <HAL_DMA_Start_IT+0x21c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a57      	ldr	r2, [pc, #348]	; (8005718 <HAL_DMA_Start_IT+0x220>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a56      	ldr	r2, [pc, #344]	; (800571c <HAL_DMA_Start_IT+0x224>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a54      	ldr	r2, [pc, #336]	; (8005720 <HAL_DMA_Start_IT+0x228>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a53      	ldr	r2, [pc, #332]	; (8005724 <HAL_DMA_Start_IT+0x22c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a51      	ldr	r2, [pc, #324]	; (8005728 <HAL_DMA_Start_IT+0x230>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <HAL_DMA_Start_IT+0x100>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e007      	b.n	8005608 <HAL_DMA_Start_IT+0x110>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f001 f906 	bl	8006820 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a34      	ldr	r2, [pc, #208]	; (80056ec <HAL_DMA_Start_IT+0x1f4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04a      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a33      	ldr	r2, [pc, #204]	; (80056f0 <HAL_DMA_Start_IT+0x1f8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d045      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_DMA_Start_IT+0x1fc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d040      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a30      	ldr	r2, [pc, #192]	; (80056f8 <HAL_DMA_Start_IT+0x200>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d03b      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <HAL_DMA_Start_IT+0x204>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d036      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2d      	ldr	r2, [pc, #180]	; (8005700 <HAL_DMA_Start_IT+0x208>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d031      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_Start_IT+0x20c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d02c      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <HAL_DMA_Start_IT+0x210>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d027      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_Start_IT+0x214>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a27      	ldr	r2, [pc, #156]	; (8005710 <HAL_DMA_Start_IT+0x218>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01d      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_Start_IT+0x21c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a24      	ldr	r2, [pc, #144]	; (8005718 <HAL_DMA_Start_IT+0x220>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_Start_IT+0x224>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <HAL_DMA_Start_IT+0x228>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <HAL_DMA_Start_IT+0x22c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <HAL_DMA_Start_IT+0x230>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <HAL_DMA_Start_IT+0x1c0>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_DMA_Start_IT+0x1c2>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d036      	beq.n	800572c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f023 021e 	bic.w	r2, r3, #30
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0216 	orr.w	r2, r2, #22
 80056d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d03e      	beq.n	8005758 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0208 	orr.w	r2, r2, #8
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e035      	b.n	8005758 <HAL_DMA_Start_IT+0x260>
 80056ec:	40020010 	.word	0x40020010
 80056f0:	40020028 	.word	0x40020028
 80056f4:	40020040 	.word	0x40020040
 80056f8:	40020058 	.word	0x40020058
 80056fc:	40020070 	.word	0x40020070
 8005700:	40020088 	.word	0x40020088
 8005704:	400200a0 	.word	0x400200a0
 8005708:	400200b8 	.word	0x400200b8
 800570c:	40020410 	.word	0x40020410
 8005710:	40020428 	.word	0x40020428
 8005714:	40020440 	.word	0x40020440
 8005718:	40020458 	.word	0x40020458
 800571c:	40020470 	.word	0x40020470
 8005720:	40020488 	.word	0x40020488
 8005724:	400204a0 	.word	0x400204a0
 8005728:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 020e 	bic.w	r2, r3, #14
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 020a 	orr.w	r2, r2, #10
 800573e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0204 	orr.w	r2, r2, #4
 8005756:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a83      	ldr	r2, [pc, #524]	; (800596c <HAL_DMA_Start_IT+0x474>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d072      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a82      	ldr	r2, [pc, #520]	; (8005970 <HAL_DMA_Start_IT+0x478>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d06d      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a80      	ldr	r2, [pc, #512]	; (8005974 <HAL_DMA_Start_IT+0x47c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d068      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a7f      	ldr	r2, [pc, #508]	; (8005978 <HAL_DMA_Start_IT+0x480>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d063      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7d      	ldr	r2, [pc, #500]	; (800597c <HAL_DMA_Start_IT+0x484>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d05e      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a7c      	ldr	r2, [pc, #496]	; (8005980 <HAL_DMA_Start_IT+0x488>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d059      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a7a      	ldr	r2, [pc, #488]	; (8005984 <HAL_DMA_Start_IT+0x48c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d054      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a79      	ldr	r2, [pc, #484]	; (8005988 <HAL_DMA_Start_IT+0x490>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d04f      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a77      	ldr	r2, [pc, #476]	; (800598c <HAL_DMA_Start_IT+0x494>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d04a      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a76      	ldr	r2, [pc, #472]	; (8005990 <HAL_DMA_Start_IT+0x498>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d045      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a74      	ldr	r2, [pc, #464]	; (8005994 <HAL_DMA_Start_IT+0x49c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d040      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a73      	ldr	r2, [pc, #460]	; (8005998 <HAL_DMA_Start_IT+0x4a0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d03b      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a71      	ldr	r2, [pc, #452]	; (800599c <HAL_DMA_Start_IT+0x4a4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d036      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a70      	ldr	r2, [pc, #448]	; (80059a0 <HAL_DMA_Start_IT+0x4a8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d031      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a6e      	ldr	r2, [pc, #440]	; (80059a4 <HAL_DMA_Start_IT+0x4ac>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d02c      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a6d      	ldr	r2, [pc, #436]	; (80059a8 <HAL_DMA_Start_IT+0x4b0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d027      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a6b      	ldr	r2, [pc, #428]	; (80059ac <HAL_DMA_Start_IT+0x4b4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d022      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6a      	ldr	r2, [pc, #424]	; (80059b0 <HAL_DMA_Start_IT+0x4b8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d01d      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a68      	ldr	r2, [pc, #416]	; (80059b4 <HAL_DMA_Start_IT+0x4bc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a67      	ldr	r2, [pc, #412]	; (80059b8 <HAL_DMA_Start_IT+0x4c0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a65      	ldr	r2, [pc, #404]	; (80059bc <HAL_DMA_Start_IT+0x4c4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00e      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a64      	ldr	r2, [pc, #400]	; (80059c0 <HAL_DMA_Start_IT+0x4c8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a62      	ldr	r2, [pc, #392]	; (80059c4 <HAL_DMA_Start_IT+0x4cc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a61      	ldr	r2, [pc, #388]	; (80059c8 <HAL_DMA_Start_IT+0x4d0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_DMA_Start_IT+0x354>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HAL_DMA_Start_IT+0x356>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01a      	beq.n	8005888 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005886:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a37      	ldr	r2, [pc, #220]	; (800596c <HAL_DMA_Start_IT+0x474>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d04a      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a36      	ldr	r2, [pc, #216]	; (8005970 <HAL_DMA_Start_IT+0x478>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d045      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a34      	ldr	r2, [pc, #208]	; (8005974 <HAL_DMA_Start_IT+0x47c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d040      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a33      	ldr	r2, [pc, #204]	; (8005978 <HAL_DMA_Start_IT+0x480>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d03b      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a31      	ldr	r2, [pc, #196]	; (800597c <HAL_DMA_Start_IT+0x484>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d036      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a30      	ldr	r2, [pc, #192]	; (8005980 <HAL_DMA_Start_IT+0x488>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d031      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <HAL_DMA_Start_IT+0x48c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02c      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2d      	ldr	r2, [pc, #180]	; (8005988 <HAL_DMA_Start_IT+0x490>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d027      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2b      	ldr	r2, [pc, #172]	; (800598c <HAL_DMA_Start_IT+0x494>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d022      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <HAL_DMA_Start_IT+0x498>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d01d      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a28      	ldr	r2, [pc, #160]	; (8005994 <HAL_DMA_Start_IT+0x49c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d018      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a27      	ldr	r2, [pc, #156]	; (8005998 <HAL_DMA_Start_IT+0x4a0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a25      	ldr	r2, [pc, #148]	; (800599c <HAL_DMA_Start_IT+0x4a4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00e      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a24      	ldr	r2, [pc, #144]	; (80059a0 <HAL_DMA_Start_IT+0x4a8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <HAL_DMA_Start_IT+0x4ac>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <HAL_DMA_Start_IT+0x4b0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d108      	bne.n	800593a <HAL_DMA_Start_IT+0x442>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e012      	b.n	8005960 <HAL_DMA_Start_IT+0x468>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e009      	b.n	8005960 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005952:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40020010 	.word	0x40020010
 8005970:	40020028 	.word	0x40020028
 8005974:	40020040 	.word	0x40020040
 8005978:	40020058 	.word	0x40020058
 800597c:	40020070 	.word	0x40020070
 8005980:	40020088 	.word	0x40020088
 8005984:	400200a0 	.word	0x400200a0
 8005988:	400200b8 	.word	0x400200b8
 800598c:	40020410 	.word	0x40020410
 8005990:	40020428 	.word	0x40020428
 8005994:	40020440 	.word	0x40020440
 8005998:	40020458 	.word	0x40020458
 800599c:	40020470 	.word	0x40020470
 80059a0:	40020488 	.word	0x40020488
 80059a4:	400204a0 	.word	0x400204a0
 80059a8:	400204b8 	.word	0x400204b8
 80059ac:	58025408 	.word	0x58025408
 80059b0:	5802541c 	.word	0x5802541c
 80059b4:	58025430 	.word	0x58025430
 80059b8:	58025444 	.word	0x58025444
 80059bc:	58025458 	.word	0x58025458
 80059c0:	5802546c 	.word	0x5802546c
 80059c4:	58025480 	.word	0x58025480
 80059c8:	58025494 	.word	0x58025494

080059cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059d8:	4b67      	ldr	r3, [pc, #412]	; (8005b78 <HAL_DMA_IRQHandler+0x1ac>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a67      	ldr	r2, [pc, #412]	; (8005b7c <HAL_DMA_IRQHandler+0x1b0>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	0a9b      	lsrs	r3, r3, #10
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a5f      	ldr	r2, [pc, #380]	; (8005b80 <HAL_DMA_IRQHandler+0x1b4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04a      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a5d      	ldr	r2, [pc, #372]	; (8005b84 <HAL_DMA_IRQHandler+0x1b8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d045      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a5c      	ldr	r2, [pc, #368]	; (8005b88 <HAL_DMA_IRQHandler+0x1bc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d040      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5a      	ldr	r2, [pc, #360]	; (8005b8c <HAL_DMA_IRQHandler+0x1c0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d03b      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a59      	ldr	r2, [pc, #356]	; (8005b90 <HAL_DMA_IRQHandler+0x1c4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d036      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a57      	ldr	r2, [pc, #348]	; (8005b94 <HAL_DMA_IRQHandler+0x1c8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d031      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a56      	ldr	r2, [pc, #344]	; (8005b98 <HAL_DMA_IRQHandler+0x1cc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d02c      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a54      	ldr	r2, [pc, #336]	; (8005b9c <HAL_DMA_IRQHandler+0x1d0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d027      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a53      	ldr	r2, [pc, #332]	; (8005ba0 <HAL_DMA_IRQHandler+0x1d4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a51      	ldr	r2, [pc, #324]	; (8005ba4 <HAL_DMA_IRQHandler+0x1d8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01d      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a50      	ldr	r2, [pc, #320]	; (8005ba8 <HAL_DMA_IRQHandler+0x1dc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a4e      	ldr	r2, [pc, #312]	; (8005bac <HAL_DMA_IRQHandler+0x1e0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a4d      	ldr	r2, [pc, #308]	; (8005bb0 <HAL_DMA_IRQHandler+0x1e4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a4b      	ldr	r2, [pc, #300]	; (8005bb4 <HAL_DMA_IRQHandler+0x1e8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a4a      	ldr	r2, [pc, #296]	; (8005bb8 <HAL_DMA_IRQHandler+0x1ec>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xd2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a48      	ldr	r2, [pc, #288]	; (8005bbc <HAL_DMA_IRQHandler+0x1f0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d101      	bne.n	8005aa2 <HAL_DMA_IRQHandler+0xd6>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <HAL_DMA_IRQHandler+0xd8>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 842b 	beq.w	8006300 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80a2 	beq.w	8005c04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2e      	ldr	r2, [pc, #184]	; (8005b80 <HAL_DMA_IRQHandler+0x1b4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d04a      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2d      	ldr	r2, [pc, #180]	; (8005b84 <HAL_DMA_IRQHandler+0x1b8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d045      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2b      	ldr	r2, [pc, #172]	; (8005b88 <HAL_DMA_IRQHandler+0x1bc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d040      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <HAL_DMA_IRQHandler+0x1c0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d03b      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <HAL_DMA_IRQHandler+0x1c4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d036      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <HAL_DMA_IRQHandler+0x1c8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d031      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a25      	ldr	r2, [pc, #148]	; (8005b98 <HAL_DMA_IRQHandler+0x1cc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d02c      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <HAL_DMA_IRQHandler+0x1d0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d027      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <HAL_DMA_IRQHandler+0x1d4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d022      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <HAL_DMA_IRQHandler+0x1d8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d01d      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <HAL_DMA_IRQHandler+0x1dc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d018      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <HAL_DMA_IRQHandler+0x1e0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d013      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	; (8005bb0 <HAL_DMA_IRQHandler+0x1e4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00e      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_DMA_IRQHandler+0x1e8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <HAL_DMA_IRQHandler+0x1ec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x194>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_DMA_IRQHandler+0x1f0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d12f      	bne.n	8005bc0 <HAL_DMA_IRQHandler+0x1f4>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e02e      	b.n	8005bd4 <HAL_DMA_IRQHandler+0x208>
 8005b76:	bf00      	nop
 8005b78:	24000000 	.word	0x24000000
 8005b7c:	1b4e81b5 	.word	0x1b4e81b5
 8005b80:	40020010 	.word	0x40020010
 8005b84:	40020028 	.word	0x40020028
 8005b88:	40020040 	.word	0x40020040
 8005b8c:	40020058 	.word	0x40020058
 8005b90:	40020070 	.word	0x40020070
 8005b94:	40020088 	.word	0x40020088
 8005b98:	400200a0 	.word	0x400200a0
 8005b9c:	400200b8 	.word	0x400200b8
 8005ba0:	40020410 	.word	0x40020410
 8005ba4:	40020428 	.word	0x40020428
 8005ba8:	40020440 	.word	0x40020440
 8005bac:	40020458 	.word	0x40020458
 8005bb0:	40020470 	.word	0x40020470
 8005bb4:	40020488 	.word	0x40020488
 8005bb8:	400204a0 	.word	0x400204a0
 8005bbc:	400204b8 	.word	0x400204b8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d015      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0204 	bic.w	r2, r2, #4
 8005be6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	f043 0201 	orr.w	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d06e      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a69      	ldr	r2, [pc, #420]	; (8005dc4 <HAL_DMA_IRQHandler+0x3f8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d04a      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a67      	ldr	r2, [pc, #412]	; (8005dc8 <HAL_DMA_IRQHandler+0x3fc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d045      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a66      	ldr	r2, [pc, #408]	; (8005dcc <HAL_DMA_IRQHandler+0x400>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d040      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a64      	ldr	r2, [pc, #400]	; (8005dd0 <HAL_DMA_IRQHandler+0x404>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d03b      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a63      	ldr	r2, [pc, #396]	; (8005dd4 <HAL_DMA_IRQHandler+0x408>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d036      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a61      	ldr	r2, [pc, #388]	; (8005dd8 <HAL_DMA_IRQHandler+0x40c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d031      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a60      	ldr	r2, [pc, #384]	; (8005ddc <HAL_DMA_IRQHandler+0x410>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d02c      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a5e      	ldr	r2, [pc, #376]	; (8005de0 <HAL_DMA_IRQHandler+0x414>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d027      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a5d      	ldr	r2, [pc, #372]	; (8005de4 <HAL_DMA_IRQHandler+0x418>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d022      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a5b      	ldr	r2, [pc, #364]	; (8005de8 <HAL_DMA_IRQHandler+0x41c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01d      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <HAL_DMA_IRQHandler+0x420>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d018      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a58      	ldr	r2, [pc, #352]	; (8005df0 <HAL_DMA_IRQHandler+0x424>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a57      	ldr	r2, [pc, #348]	; (8005df4 <HAL_DMA_IRQHandler+0x428>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00e      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a55      	ldr	r2, [pc, #340]	; (8005df8 <HAL_DMA_IRQHandler+0x42c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a54      	ldr	r2, [pc, #336]	; (8005dfc <HAL_DMA_IRQHandler+0x430>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2ee>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a52      	ldr	r2, [pc, #328]	; (8005e00 <HAL_DMA_IRQHandler+0x434>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d10a      	bne.n	8005cd0 <HAL_DMA_IRQHandler+0x304>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	e003      	b.n	8005cd8 <HAL_DMA_IRQHandler+0x30c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00d      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf0:	f043 0202 	orr.w	r2, r3, #2
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2204      	movs	r2, #4
 8005d02:	409a      	lsls	r2, r3
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 808f 	beq.w	8005e2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <HAL_DMA_IRQHandler+0x3f8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d04a      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <HAL_DMA_IRQHandler+0x3fc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d045      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <HAL_DMA_IRQHandler+0x400>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d040      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a27      	ldr	r2, [pc, #156]	; (8005dd0 <HAL_DMA_IRQHandler+0x404>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d03b      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a26      	ldr	r2, [pc, #152]	; (8005dd4 <HAL_DMA_IRQHandler+0x408>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d036      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a24      	ldr	r2, [pc, #144]	; (8005dd8 <HAL_DMA_IRQHandler+0x40c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d031      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <HAL_DMA_IRQHandler+0x410>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d02c      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a21      	ldr	r2, [pc, #132]	; (8005de0 <HAL_DMA_IRQHandler+0x414>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d027      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a20      	ldr	r2, [pc, #128]	; (8005de4 <HAL_DMA_IRQHandler+0x418>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d022      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <HAL_DMA_IRQHandler+0x41c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01d      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <HAL_DMA_IRQHandler+0x420>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d018      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <HAL_DMA_IRQHandler+0x424>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <HAL_DMA_IRQHandler+0x428>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <HAL_DMA_IRQHandler+0x42c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <HAL_DMA_IRQHandler+0x430>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_DMA_IRQHandler+0x3e2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <HAL_DMA_IRQHandler+0x434>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d12a      	bne.n	8005e04 <HAL_DMA_IRQHandler+0x438>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e023      	b.n	8005e0c <HAL_DMA_IRQHandler+0x440>
 8005dc4:	40020010 	.word	0x40020010
 8005dc8:	40020028 	.word	0x40020028
 8005dcc:	40020040 	.word	0x40020040
 8005dd0:	40020058 	.word	0x40020058
 8005dd4:	40020070 	.word	0x40020070
 8005dd8:	40020088 	.word	0x40020088
 8005ddc:	400200a0 	.word	0x400200a0
 8005de0:	400200b8 	.word	0x400200b8
 8005de4:	40020410 	.word	0x40020410
 8005de8:	40020428 	.word	0x40020428
 8005dec:	40020440 	.word	0x40020440
 8005df0:	40020458 	.word	0x40020458
 8005df4:	40020470 	.word	0x40020470
 8005df8:	40020488 	.word	0x40020488
 8005dfc:	400204a0 	.word	0x400204a0
 8005e00:	400204b8 	.word	0x400204b8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00d      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2204      	movs	r2, #4
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	f043 0204 	orr.w	r2, r3, #4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	2210      	movs	r2, #16
 8005e36:	409a      	lsls	r2, r3
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80a6 	beq.w	8005f8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a85      	ldr	r2, [pc, #532]	; (800605c <HAL_DMA_IRQHandler+0x690>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d04a      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a83      	ldr	r2, [pc, #524]	; (8006060 <HAL_DMA_IRQHandler+0x694>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d045      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a82      	ldr	r2, [pc, #520]	; (8006064 <HAL_DMA_IRQHandler+0x698>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d040      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a80      	ldr	r2, [pc, #512]	; (8006068 <HAL_DMA_IRQHandler+0x69c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d03b      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a7f      	ldr	r2, [pc, #508]	; (800606c <HAL_DMA_IRQHandler+0x6a0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d036      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a7d      	ldr	r2, [pc, #500]	; (8006070 <HAL_DMA_IRQHandler+0x6a4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d031      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a7c      	ldr	r2, [pc, #496]	; (8006074 <HAL_DMA_IRQHandler+0x6a8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d02c      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a7a      	ldr	r2, [pc, #488]	; (8006078 <HAL_DMA_IRQHandler+0x6ac>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d027      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a79      	ldr	r2, [pc, #484]	; (800607c <HAL_DMA_IRQHandler+0x6b0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d022      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a77      	ldr	r2, [pc, #476]	; (8006080 <HAL_DMA_IRQHandler+0x6b4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01d      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a76      	ldr	r2, [pc, #472]	; (8006084 <HAL_DMA_IRQHandler+0x6b8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d018      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a74      	ldr	r2, [pc, #464]	; (8006088 <HAL_DMA_IRQHandler+0x6bc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d013      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a73      	ldr	r2, [pc, #460]	; (800608c <HAL_DMA_IRQHandler+0x6c0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a71      	ldr	r2, [pc, #452]	; (8006090 <HAL_DMA_IRQHandler+0x6c4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a70      	ldr	r2, [pc, #448]	; (8006094 <HAL_DMA_IRQHandler+0x6c8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x516>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6e      	ldr	r2, [pc, #440]	; (8006098 <HAL_DMA_IRQHandler+0x6cc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_DMA_IRQHandler+0x52c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e009      	b.n	8005f0c <HAL_DMA_IRQHandler+0x540>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf14      	ite	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	2300      	moveq	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d03e      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2210      	movs	r2, #16
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d018      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d108      	bne.n	8005f4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d024      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	4798      	blx	r3
 8005f4c:	e01f      	b.n	8005f8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01b      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	e016      	b.n	8005f8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d107      	bne.n	8005f7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0208 	bic.w	r2, r2, #8
 8005f7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2220      	movs	r2, #32
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8110 	beq.w	80061c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2c      	ldr	r2, [pc, #176]	; (800605c <HAL_DMA_IRQHandler+0x690>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d04a      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2b      	ldr	r2, [pc, #172]	; (8006060 <HAL_DMA_IRQHandler+0x694>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d045      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a29      	ldr	r2, [pc, #164]	; (8006064 <HAL_DMA_IRQHandler+0x698>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d040      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a28      	ldr	r2, [pc, #160]	; (8006068 <HAL_DMA_IRQHandler+0x69c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d03b      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	; (800606c <HAL_DMA_IRQHandler+0x6a0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d036      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a25      	ldr	r2, [pc, #148]	; (8006070 <HAL_DMA_IRQHandler+0x6a4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d031      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	; (8006074 <HAL_DMA_IRQHandler+0x6a8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d02c      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a22      	ldr	r2, [pc, #136]	; (8006078 <HAL_DMA_IRQHandler+0x6ac>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d027      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a20      	ldr	r2, [pc, #128]	; (800607c <HAL_DMA_IRQHandler+0x6b0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d022      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <HAL_DMA_IRQHandler+0x6b4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d01d      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <HAL_DMA_IRQHandler+0x6b8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d018      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <HAL_DMA_IRQHandler+0x6bc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d013      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1a      	ldr	r2, [pc, #104]	; (800608c <HAL_DMA_IRQHandler+0x6c0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00e      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a19      	ldr	r2, [pc, #100]	; (8006090 <HAL_DMA_IRQHandler+0x6c4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d009      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a17      	ldr	r2, [pc, #92]	; (8006094 <HAL_DMA_IRQHandler+0x6c8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_DMA_IRQHandler+0x678>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a16      	ldr	r2, [pc, #88]	; (8006098 <HAL_DMA_IRQHandler+0x6cc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d12b      	bne.n	800609c <HAL_DMA_IRQHandler+0x6d0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2301      	movne	r3, #1
 8006054:	2300      	moveq	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	e02a      	b.n	80060b0 <HAL_DMA_IRQHandler+0x6e4>
 800605a:	bf00      	nop
 800605c:	40020010 	.word	0x40020010
 8006060:	40020028 	.word	0x40020028
 8006064:	40020040 	.word	0x40020040
 8006068:	40020058 	.word	0x40020058
 800606c:	40020070 	.word	0x40020070
 8006070:	40020088 	.word	0x40020088
 8006074:	400200a0 	.word	0x400200a0
 8006078:	400200b8 	.word	0x400200b8
 800607c:	40020410 	.word	0x40020410
 8006080:	40020428 	.word	0x40020428
 8006084:	40020440 	.word	0x40020440
 8006088:	40020458 	.word	0x40020458
 800608c:	40020470 	.word	0x40020470
 8006090:	40020488 	.word	0x40020488
 8006094:	400204a0 	.word	0x400204a0
 8006098:	400204b8 	.word	0x400204b8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bf14      	ite	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	2300      	moveq	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8087 	beq.w	80061c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2220      	movs	r2, #32
 80060c0:	409a      	lsls	r2, r3
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d139      	bne.n	8006146 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0216 	bic.w	r2, r2, #22
 80060e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <HAL_DMA_IRQHandler+0x736>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0208 	bic.w	r2, r2, #8
 8006110:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	223f      	movs	r2, #63	; 0x3f
 800611c:	409a      	lsls	r2, r3
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 834a 	beq.w	80067d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
          }
          return;
 8006144:	e344      	b.n	80067d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d018      	beq.n	8006186 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d108      	bne.n	8006174 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	2b00      	cmp	r3, #0
 8006168:	d02c      	beq.n	80061c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
 8006172:	e027      	b.n	80061c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d023      	beq.n	80061c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
 8006184:	e01e      	b.n	80061c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10f      	bne.n	80061b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0210 	bic.w	r2, r2, #16
 80061a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8306 	beq.w	80067da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8088 	beq.w	80062ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2204      	movs	r2, #4
 80061e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a7a      	ldr	r2, [pc, #488]	; (80063d4 <HAL_DMA_IRQHandler+0xa08>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d04a      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a79      	ldr	r2, [pc, #484]	; (80063d8 <HAL_DMA_IRQHandler+0xa0c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d045      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a77      	ldr	r2, [pc, #476]	; (80063dc <HAL_DMA_IRQHandler+0xa10>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d040      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a76      	ldr	r2, [pc, #472]	; (80063e0 <HAL_DMA_IRQHandler+0xa14>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d03b      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a74      	ldr	r2, [pc, #464]	; (80063e4 <HAL_DMA_IRQHandler+0xa18>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d036      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a73      	ldr	r2, [pc, #460]	; (80063e8 <HAL_DMA_IRQHandler+0xa1c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d031      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a71      	ldr	r2, [pc, #452]	; (80063ec <HAL_DMA_IRQHandler+0xa20>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02c      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a70      	ldr	r2, [pc, #448]	; (80063f0 <HAL_DMA_IRQHandler+0xa24>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d027      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a6e      	ldr	r2, [pc, #440]	; (80063f4 <HAL_DMA_IRQHandler+0xa28>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d022      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a6d      	ldr	r2, [pc, #436]	; (80063f8 <HAL_DMA_IRQHandler+0xa2c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d01d      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a6b      	ldr	r2, [pc, #428]	; (80063fc <HAL_DMA_IRQHandler+0xa30>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d018      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a6a      	ldr	r2, [pc, #424]	; (8006400 <HAL_DMA_IRQHandler+0xa34>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a68      	ldr	r2, [pc, #416]	; (8006404 <HAL_DMA_IRQHandler+0xa38>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00e      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a67      	ldr	r2, [pc, #412]	; (8006408 <HAL_DMA_IRQHandler+0xa3c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d009      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a65      	ldr	r2, [pc, #404]	; (800640c <HAL_DMA_IRQHandler+0xa40>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <HAL_DMA_IRQHandler+0x8b8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a64      	ldr	r2, [pc, #400]	; (8006410 <HAL_DMA_IRQHandler+0xa44>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <HAL_DMA_IRQHandler+0x8ca>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0201 	bic.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e007      	b.n	80062a6 <HAL_DMA_IRQHandler+0x8da>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d307      	bcc.n	80062c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f2      	bne.n	80062a6 <HAL_DMA_IRQHandler+0x8da>
 80062c0:	e000      	b.n	80062c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80062c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2203      	movs	r2, #3
 80062d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80062da:	e003      	b.n	80062e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8272 	beq.w	80067da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
 80062fe:	e26c      	b.n	80067da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a43      	ldr	r2, [pc, #268]	; (8006414 <HAL_DMA_IRQHandler+0xa48>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d022      	beq.n	8006350 <HAL_DMA_IRQHandler+0x984>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a42      	ldr	r2, [pc, #264]	; (8006418 <HAL_DMA_IRQHandler+0xa4c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d01d      	beq.n	8006350 <HAL_DMA_IRQHandler+0x984>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a40      	ldr	r2, [pc, #256]	; (800641c <HAL_DMA_IRQHandler+0xa50>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d018      	beq.n	8006350 <HAL_DMA_IRQHandler+0x984>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a3f      	ldr	r2, [pc, #252]	; (8006420 <HAL_DMA_IRQHandler+0xa54>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_DMA_IRQHandler+0x984>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a3d      	ldr	r2, [pc, #244]	; (8006424 <HAL_DMA_IRQHandler+0xa58>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_DMA_IRQHandler+0x984>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3c      	ldr	r2, [pc, #240]	; (8006428 <HAL_DMA_IRQHandler+0xa5c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_DMA_IRQHandler+0x984>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a3a      	ldr	r2, [pc, #232]	; (800642c <HAL_DMA_IRQHandler+0xa60>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_DMA_IRQHandler+0x984>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a39      	ldr	r2, [pc, #228]	; (8006430 <HAL_DMA_IRQHandler+0xa64>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d101      	bne.n	8006354 <HAL_DMA_IRQHandler+0x988>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <HAL_DMA_IRQHandler+0x98a>
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 823f 	beq.w	80067da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	2204      	movs	r2, #4
 800636e:	409a      	lsls	r2, r3
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4013      	ands	r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80cd 	beq.w	8006514 <HAL_DMA_IRQHandler+0xb48>
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80c7 	beq.w	8006514 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	2204      	movs	r2, #4
 8006390:	409a      	lsls	r2, r3
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d049      	beq.n	8006434 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8210 	beq.w	80067d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063bc:	e20a      	b.n	80067d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8206 	beq.w	80067d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063d0:	e200      	b.n	80067d4 <HAL_DMA_IRQHandler+0xe08>
 80063d2:	bf00      	nop
 80063d4:	40020010 	.word	0x40020010
 80063d8:	40020028 	.word	0x40020028
 80063dc:	40020040 	.word	0x40020040
 80063e0:	40020058 	.word	0x40020058
 80063e4:	40020070 	.word	0x40020070
 80063e8:	40020088 	.word	0x40020088
 80063ec:	400200a0 	.word	0x400200a0
 80063f0:	400200b8 	.word	0x400200b8
 80063f4:	40020410 	.word	0x40020410
 80063f8:	40020428 	.word	0x40020428
 80063fc:	40020440 	.word	0x40020440
 8006400:	40020458 	.word	0x40020458
 8006404:	40020470 	.word	0x40020470
 8006408:	40020488 	.word	0x40020488
 800640c:	400204a0 	.word	0x400204a0
 8006410:	400204b8 	.word	0x400204b8
 8006414:	58025408 	.word	0x58025408
 8006418:	5802541c 	.word	0x5802541c
 800641c:	58025430 	.word	0x58025430
 8006420:	58025444 	.word	0x58025444
 8006424:	58025458 	.word	0x58025458
 8006428:	5802546c 	.word	0x5802546c
 800642c:	58025480 	.word	0x58025480
 8006430:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d160      	bne.n	8006500 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a7f      	ldr	r2, [pc, #508]	; (8006640 <HAL_DMA_IRQHandler+0xc74>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d04a      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a7d      	ldr	r2, [pc, #500]	; (8006644 <HAL_DMA_IRQHandler+0xc78>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d045      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a7c      	ldr	r2, [pc, #496]	; (8006648 <HAL_DMA_IRQHandler+0xc7c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d040      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a7a      	ldr	r2, [pc, #488]	; (800664c <HAL_DMA_IRQHandler+0xc80>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d03b      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a79      	ldr	r2, [pc, #484]	; (8006650 <HAL_DMA_IRQHandler+0xc84>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d036      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a77      	ldr	r2, [pc, #476]	; (8006654 <HAL_DMA_IRQHandler+0xc88>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d031      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a76      	ldr	r2, [pc, #472]	; (8006658 <HAL_DMA_IRQHandler+0xc8c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d02c      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a74      	ldr	r2, [pc, #464]	; (800665c <HAL_DMA_IRQHandler+0xc90>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d027      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a73      	ldr	r2, [pc, #460]	; (8006660 <HAL_DMA_IRQHandler+0xc94>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d022      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a71      	ldr	r2, [pc, #452]	; (8006664 <HAL_DMA_IRQHandler+0xc98>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d01d      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a70      	ldr	r2, [pc, #448]	; (8006668 <HAL_DMA_IRQHandler+0xc9c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a6e      	ldr	r2, [pc, #440]	; (800666c <HAL_DMA_IRQHandler+0xca0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a6d      	ldr	r2, [pc, #436]	; (8006670 <HAL_DMA_IRQHandler+0xca4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a6b      	ldr	r2, [pc, #428]	; (8006674 <HAL_DMA_IRQHandler+0xca8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a6a      	ldr	r2, [pc, #424]	; (8006678 <HAL_DMA_IRQHandler+0xcac>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_DMA_IRQHandler+0xb12>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a68      	ldr	r2, [pc, #416]	; (800667c <HAL_DMA_IRQHandler+0xcb0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d108      	bne.n	80064f0 <HAL_DMA_IRQHandler+0xb24>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0208 	bic.w	r2, r2, #8
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e007      	b.n	8006500 <HAL_DMA_IRQHandler+0xb34>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0204 	bic.w	r2, r2, #4
 80064fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 8165 	beq.w	80067d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006512:	e15f      	b.n	80067d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	2202      	movs	r2, #2
 800651e:	409a      	lsls	r2, r3
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80c5 	beq.w	80066b4 <HAL_DMA_IRQHandler+0xce8>
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80bf 	beq.w	80066b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2202      	movs	r2, #2
 8006540:	409a      	lsls	r2, r3
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d018      	beq.n	8006582 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 813a 	beq.w	80067d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800656c:	e134      	b.n	80067d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8130 	beq.w	80067d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006580:	e12a      	b.n	80067d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 8089 	bne.w	80066a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <HAL_DMA_IRQHandler+0xc74>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d04a      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a29      	ldr	r2, [pc, #164]	; (8006644 <HAL_DMA_IRQHandler+0xc78>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d045      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a28      	ldr	r2, [pc, #160]	; (8006648 <HAL_DMA_IRQHandler+0xc7c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d040      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a26      	ldr	r2, [pc, #152]	; (800664c <HAL_DMA_IRQHandler+0xc80>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d03b      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <HAL_DMA_IRQHandler+0xc84>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d036      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a23      	ldr	r2, [pc, #140]	; (8006654 <HAL_DMA_IRQHandler+0xc88>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d031      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a22      	ldr	r2, [pc, #136]	; (8006658 <HAL_DMA_IRQHandler+0xc8c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02c      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a20      	ldr	r2, [pc, #128]	; (800665c <HAL_DMA_IRQHandler+0xc90>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d027      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <HAL_DMA_IRQHandler+0xc94>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_DMA_IRQHandler+0xc98>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01d      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <HAL_DMA_IRQHandler+0xc9c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <HAL_DMA_IRQHandler+0xca0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a19      	ldr	r2, [pc, #100]	; (8006670 <HAL_DMA_IRQHandler+0xca4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	; (8006674 <HAL_DMA_IRQHandler+0xca8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <HAL_DMA_IRQHandler+0xcac>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_DMA_IRQHandler+0xc62>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a14      	ldr	r2, [pc, #80]	; (800667c <HAL_DMA_IRQHandler+0xcb0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d128      	bne.n	8006680 <HAL_DMA_IRQHandler+0xcb4>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0214 	bic.w	r2, r2, #20
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e027      	b.n	8006690 <HAL_DMA_IRQHandler+0xcc4>
 8006640:	40020010 	.word	0x40020010
 8006644:	40020028 	.word	0x40020028
 8006648:	40020040 	.word	0x40020040
 800664c:	40020058 	.word	0x40020058
 8006650:	40020070 	.word	0x40020070
 8006654:	40020088 	.word	0x40020088
 8006658:	400200a0 	.word	0x400200a0
 800665c:	400200b8 	.word	0x400200b8
 8006660:	40020410 	.word	0x40020410
 8006664:	40020428 	.word	0x40020428
 8006668:	40020440 	.word	0x40020440
 800666c:	40020458 	.word	0x40020458
 8006670:	40020470 	.word	0x40020470
 8006674:	40020488 	.word	0x40020488
 8006678:	400204a0 	.word	0x400204a0
 800667c:	400204b8 	.word	0x400204b8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 020a 	bic.w	r2, r2, #10
 800668e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8097 	beq.w	80067d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b2:	e091      	b.n	80067d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2208      	movs	r2, #8
 80066be:	409a      	lsls	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8088 	beq.w	80067da <HAL_DMA_IRQHandler+0xe0e>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8082 	beq.w	80067da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a41      	ldr	r2, [pc, #260]	; (80067e0 <HAL_DMA_IRQHandler+0xe14>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d04a      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a3f      	ldr	r2, [pc, #252]	; (80067e4 <HAL_DMA_IRQHandler+0xe18>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d045      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a3e      	ldr	r2, [pc, #248]	; (80067e8 <HAL_DMA_IRQHandler+0xe1c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d040      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <HAL_DMA_IRQHandler+0xe20>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d03b      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a3b      	ldr	r2, [pc, #236]	; (80067f0 <HAL_DMA_IRQHandler+0xe24>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d036      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a39      	ldr	r2, [pc, #228]	; (80067f4 <HAL_DMA_IRQHandler+0xe28>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d031      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a38      	ldr	r2, [pc, #224]	; (80067f8 <HAL_DMA_IRQHandler+0xe2c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d02c      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a36      	ldr	r2, [pc, #216]	; (80067fc <HAL_DMA_IRQHandler+0xe30>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d027      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a35      	ldr	r2, [pc, #212]	; (8006800 <HAL_DMA_IRQHandler+0xe34>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d022      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a33      	ldr	r2, [pc, #204]	; (8006804 <HAL_DMA_IRQHandler+0xe38>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d01d      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a32      	ldr	r2, [pc, #200]	; (8006808 <HAL_DMA_IRQHandler+0xe3c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d018      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a30      	ldr	r2, [pc, #192]	; (800680c <HAL_DMA_IRQHandler+0xe40>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d013      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2f      	ldr	r2, [pc, #188]	; (8006810 <HAL_DMA_IRQHandler+0xe44>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00e      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a2d      	ldr	r2, [pc, #180]	; (8006814 <HAL_DMA_IRQHandler+0xe48>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a2c      	ldr	r2, [pc, #176]	; (8006818 <HAL_DMA_IRQHandler+0xe4c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_DMA_IRQHandler+0xdaa>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2a      	ldr	r2, [pc, #168]	; (800681c <HAL_DMA_IRQHandler+0xe50>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d108      	bne.n	8006788 <HAL_DMA_IRQHandler+0xdbc>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 021c 	bic.w	r2, r2, #28
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e007      	b.n	8006798 <HAL_DMA_IRQHandler+0xdcc>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 020e 	bic.w	r2, r2, #14
 8006796:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679c:	f003 031f 	and.w	r3, r3, #31
 80067a0:	2201      	movs	r2, #1
 80067a2:	409a      	lsls	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	e004      	b.n	80067da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80067d0:	bf00      	nop
 80067d2:	e002      	b.n	80067da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80067da:	3728      	adds	r7, #40	; 0x28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40020010 	.word	0x40020010
 80067e4:	40020028 	.word	0x40020028
 80067e8:	40020040 	.word	0x40020040
 80067ec:	40020058 	.word	0x40020058
 80067f0:	40020070 	.word	0x40020070
 80067f4:	40020088 	.word	0x40020088
 80067f8:	400200a0 	.word	0x400200a0
 80067fc:	400200b8 	.word	0x400200b8
 8006800:	40020410 	.word	0x40020410
 8006804:	40020428 	.word	0x40020428
 8006808:	40020440 	.word	0x40020440
 800680c:	40020458 	.word	0x40020458
 8006810:	40020470 	.word	0x40020470
 8006814:	40020488 	.word	0x40020488
 8006818:	400204a0 	.word	0x400204a0
 800681c:	400204b8 	.word	0x400204b8

08006820 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006838:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7f      	ldr	r2, [pc, #508]	; (8006a3c <DMA_SetConfig+0x21c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d072      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a7d      	ldr	r2, [pc, #500]	; (8006a40 <DMA_SetConfig+0x220>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d06d      	beq.n	800692a <DMA_SetConfig+0x10a>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a7c      	ldr	r2, [pc, #496]	; (8006a44 <DMA_SetConfig+0x224>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d068      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a7a      	ldr	r2, [pc, #488]	; (8006a48 <DMA_SetConfig+0x228>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d063      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a79      	ldr	r2, [pc, #484]	; (8006a4c <DMA_SetConfig+0x22c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d05e      	beq.n	800692a <DMA_SetConfig+0x10a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a77      	ldr	r2, [pc, #476]	; (8006a50 <DMA_SetConfig+0x230>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d059      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a76      	ldr	r2, [pc, #472]	; (8006a54 <DMA_SetConfig+0x234>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d054      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a74      	ldr	r2, [pc, #464]	; (8006a58 <DMA_SetConfig+0x238>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d04f      	beq.n	800692a <DMA_SetConfig+0x10a>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a73      	ldr	r2, [pc, #460]	; (8006a5c <DMA_SetConfig+0x23c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d04a      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a71      	ldr	r2, [pc, #452]	; (8006a60 <DMA_SetConfig+0x240>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d045      	beq.n	800692a <DMA_SetConfig+0x10a>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a70      	ldr	r2, [pc, #448]	; (8006a64 <DMA_SetConfig+0x244>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d040      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a6e      	ldr	r2, [pc, #440]	; (8006a68 <DMA_SetConfig+0x248>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d03b      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a6d      	ldr	r2, [pc, #436]	; (8006a6c <DMA_SetConfig+0x24c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d036      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a6b      	ldr	r2, [pc, #428]	; (8006a70 <DMA_SetConfig+0x250>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d031      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a6a      	ldr	r2, [pc, #424]	; (8006a74 <DMA_SetConfig+0x254>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d02c      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a68      	ldr	r2, [pc, #416]	; (8006a78 <DMA_SetConfig+0x258>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d027      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a67      	ldr	r2, [pc, #412]	; (8006a7c <DMA_SetConfig+0x25c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d022      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a65      	ldr	r2, [pc, #404]	; (8006a80 <DMA_SetConfig+0x260>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01d      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a64      	ldr	r2, [pc, #400]	; (8006a84 <DMA_SetConfig+0x264>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d018      	beq.n	800692a <DMA_SetConfig+0x10a>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a62      	ldr	r2, [pc, #392]	; (8006a88 <DMA_SetConfig+0x268>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a61      	ldr	r2, [pc, #388]	; (8006a8c <DMA_SetConfig+0x26c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00e      	beq.n	800692a <DMA_SetConfig+0x10a>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a5f      	ldr	r2, [pc, #380]	; (8006a90 <DMA_SetConfig+0x270>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d009      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a5e      	ldr	r2, [pc, #376]	; (8006a94 <DMA_SetConfig+0x274>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <DMA_SetConfig+0x10a>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a5c      	ldr	r2, [pc, #368]	; (8006a98 <DMA_SetConfig+0x278>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <DMA_SetConfig+0x10e>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <DMA_SetConfig+0x110>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800693c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006942:	2b00      	cmp	r3, #0
 8006944:	d004      	beq.n	8006950 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800694e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a39      	ldr	r2, [pc, #228]	; (8006a3c <DMA_SetConfig+0x21c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d04a      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a38      	ldr	r2, [pc, #224]	; (8006a40 <DMA_SetConfig+0x220>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d045      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a36      	ldr	r2, [pc, #216]	; (8006a44 <DMA_SetConfig+0x224>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d040      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a35      	ldr	r2, [pc, #212]	; (8006a48 <DMA_SetConfig+0x228>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d03b      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a33      	ldr	r2, [pc, #204]	; (8006a4c <DMA_SetConfig+0x22c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d036      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a32      	ldr	r2, [pc, #200]	; (8006a50 <DMA_SetConfig+0x230>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d031      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a30      	ldr	r2, [pc, #192]	; (8006a54 <DMA_SetConfig+0x234>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d02c      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <DMA_SetConfig+0x238>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d027      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a2d      	ldr	r2, [pc, #180]	; (8006a5c <DMA_SetConfig+0x23c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d022      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <DMA_SetConfig+0x240>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d01d      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <DMA_SetConfig+0x244>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d018      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a29      	ldr	r2, [pc, #164]	; (8006a68 <DMA_SetConfig+0x248>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <DMA_SetConfig+0x24c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00e      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <DMA_SetConfig+0x250>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d009      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a24      	ldr	r2, [pc, #144]	; (8006a74 <DMA_SetConfig+0x254>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <DMA_SetConfig+0x1d0>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a23      	ldr	r2, [pc, #140]	; (8006a78 <DMA_SetConfig+0x258>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d101      	bne.n	80069f4 <DMA_SetConfig+0x1d4>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <DMA_SetConfig+0x1d6>
 80069f4:	2300      	movs	r3, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d059      	beq.n	8006aae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	223f      	movs	r2, #63	; 0x3f
 8006a04:	409a      	lsls	r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a18:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d138      	bne.n	8006a9c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a3a:	e086      	b.n	8006b4a <DMA_SetConfig+0x32a>
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	58025408 	.word	0x58025408
 8006a80:	5802541c 	.word	0x5802541c
 8006a84:	58025430 	.word	0x58025430
 8006a88:	58025444 	.word	0x58025444
 8006a8c:	58025458 	.word	0x58025458
 8006a90:	5802546c 	.word	0x5802546c
 8006a94:	58025480 	.word	0x58025480
 8006a98:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	60da      	str	r2, [r3, #12]
}
 8006aac:	e04d      	b.n	8006b4a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a29      	ldr	r2, [pc, #164]	; (8006b58 <DMA_SetConfig+0x338>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d022      	beq.n	8006afe <DMA_SetConfig+0x2de>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a27      	ldr	r2, [pc, #156]	; (8006b5c <DMA_SetConfig+0x33c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01d      	beq.n	8006afe <DMA_SetConfig+0x2de>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <DMA_SetConfig+0x340>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <DMA_SetConfig+0x2de>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a24      	ldr	r2, [pc, #144]	; (8006b64 <DMA_SetConfig+0x344>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <DMA_SetConfig+0x2de>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a23      	ldr	r2, [pc, #140]	; (8006b68 <DMA_SetConfig+0x348>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <DMA_SetConfig+0x2de>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a21      	ldr	r2, [pc, #132]	; (8006b6c <DMA_SetConfig+0x34c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <DMA_SetConfig+0x2de>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a20      	ldr	r2, [pc, #128]	; (8006b70 <DMA_SetConfig+0x350>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <DMA_SetConfig+0x2de>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <DMA_SetConfig+0x354>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d101      	bne.n	8006b02 <DMA_SetConfig+0x2e2>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <DMA_SetConfig+0x2e4>
 8006b02:	2300      	movs	r3, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d020      	beq.n	8006b4a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2201      	movs	r2, #1
 8006b12:	409a      	lsls	r2, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	d108      	bne.n	8006b3a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	60da      	str	r2, [r3, #12]
}
 8006b38:	e007      	b.n	8006b4a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	60da      	str	r2, [r3, #12]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	58025408 	.word	0x58025408
 8006b5c:	5802541c 	.word	0x5802541c
 8006b60:	58025430 	.word	0x58025430
 8006b64:	58025444 	.word	0x58025444
 8006b68:	58025458 	.word	0x58025458
 8006b6c:	5802546c 	.word	0x5802546c
 8006b70:	58025480 	.word	0x58025480
 8006b74:	58025494 	.word	0x58025494

08006b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a42      	ldr	r2, [pc, #264]	; (8006c90 <DMA_CalcBaseAndBitshift+0x118>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d04a      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a41      	ldr	r2, [pc, #260]	; (8006c94 <DMA_CalcBaseAndBitshift+0x11c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d045      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a3f      	ldr	r2, [pc, #252]	; (8006c98 <DMA_CalcBaseAndBitshift+0x120>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d040      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a3e      	ldr	r2, [pc, #248]	; (8006c9c <DMA_CalcBaseAndBitshift+0x124>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d03b      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a3c      	ldr	r2, [pc, #240]	; (8006ca0 <DMA_CalcBaseAndBitshift+0x128>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d036      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a3b      	ldr	r2, [pc, #236]	; (8006ca4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d031      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a39      	ldr	r2, [pc, #228]	; (8006ca8 <DMA_CalcBaseAndBitshift+0x130>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02c      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a38      	ldr	r2, [pc, #224]	; (8006cac <DMA_CalcBaseAndBitshift+0x134>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d027      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a36      	ldr	r2, [pc, #216]	; (8006cb0 <DMA_CalcBaseAndBitshift+0x138>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d022      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a35      	ldr	r2, [pc, #212]	; (8006cb4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d01d      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a33      	ldr	r2, [pc, #204]	; (8006cb8 <DMA_CalcBaseAndBitshift+0x140>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d018      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a32      	ldr	r2, [pc, #200]	; (8006cbc <DMA_CalcBaseAndBitshift+0x144>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a30      	ldr	r2, [pc, #192]	; (8006cc0 <DMA_CalcBaseAndBitshift+0x148>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00e      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a2f      	ldr	r2, [pc, #188]	; (8006cc4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a2d      	ldr	r2, [pc, #180]	; (8006cc8 <DMA_CalcBaseAndBitshift+0x150>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <DMA_CalcBaseAndBitshift+0xa8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ccc <DMA_CalcBaseAndBitshift+0x154>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d101      	bne.n	8006c24 <DMA_CalcBaseAndBitshift+0xac>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <DMA_CalcBaseAndBitshift+0xae>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d024      	beq.n	8006c74 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	3b10      	subs	r3, #16
 8006c32:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <DMA_CalcBaseAndBitshift+0x158>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006c44:	5cd3      	ldrb	r3, [r2, r3]
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d908      	bls.n	8006c64 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	4b1f      	ldr	r3, [pc, #124]	; (8006cd8 <DMA_CalcBaseAndBitshift+0x160>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	1d1a      	adds	r2, r3, #4
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	659a      	str	r2, [r3, #88]	; 0x58
 8006c62:	e00d      	b.n	8006c80 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <DMA_CalcBaseAndBitshift+0x160>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6593      	str	r3, [r2, #88]	; 0x58
 8006c72:	e005      	b.n	8006c80 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40020010 	.word	0x40020010
 8006c94:	40020028 	.word	0x40020028
 8006c98:	40020040 	.word	0x40020040
 8006c9c:	40020058 	.word	0x40020058
 8006ca0:	40020070 	.word	0x40020070
 8006ca4:	40020088 	.word	0x40020088
 8006ca8:	400200a0 	.word	0x400200a0
 8006cac:	400200b8 	.word	0x400200b8
 8006cb0:	40020410 	.word	0x40020410
 8006cb4:	40020428 	.word	0x40020428
 8006cb8:	40020440 	.word	0x40020440
 8006cbc:	40020458 	.word	0x40020458
 8006cc0:	40020470 	.word	0x40020470
 8006cc4:	40020488 	.word	0x40020488
 8006cc8:	400204a0 	.word	0x400204a0
 8006ccc:	400204b8 	.word	0x400204b8
 8006cd0:	aaaaaaab 	.word	0xaaaaaaab
 8006cd4:	080175b4 	.word	0x080175b4
 8006cd8:	fffffc00 	.word	0xfffffc00

08006cdc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d120      	bne.n	8006d32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d858      	bhi.n	8006daa <DMA_CheckFifoParam+0xce>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <DMA_CheckFifoParam+0x24>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d23 	.word	0x08006d23
 8006d08:	08006d11 	.word	0x08006d11
 8006d0c:	08006dab 	.word	0x08006dab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d048      	beq.n	8006dae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d20:	e045      	b.n	8006dae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d2a:	d142      	bne.n	8006db2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d30:	e03f      	b.n	8006db2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3a:	d123      	bne.n	8006d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d838      	bhi.n	8006db6 <DMA_CheckFifoParam+0xda>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <DMA_CheckFifoParam+0x70>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d63 	.word	0x08006d63
 8006d54:	08006d5d 	.word	0x08006d5d
 8006d58:	08006d75 	.word	0x08006d75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
        break;
 8006d60:	e030      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d025      	beq.n	8006dba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d72:	e022      	b.n	8006dba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d7c:	d11f      	bne.n	8006dbe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d82:	e01c      	b.n	8006dbe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d902      	bls.n	8006d92 <DMA_CheckFifoParam+0xb6>
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d003      	beq.n	8006d98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d90:	e018      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
        break;
 8006d96:	e015      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00e      	beq.n	8006dc2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
    break;
 8006da8:	e00b      	b.n	8006dc2 <DMA_CheckFifoParam+0xe6>
        break;
 8006daa:	bf00      	nop
 8006dac:	e00a      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006dae:	bf00      	nop
 8006db0:	e008      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006db2:	bf00      	nop
 8006db4:	e006      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006db6:	bf00      	nop
 8006db8:	e004      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006dba:	bf00      	nop
 8006dbc:	e002      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006dbe:	bf00      	nop
 8006dc0:	e000      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
    break;
 8006dc2:	bf00      	nop
    }
  }

  return status;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop

08006dd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a38      	ldr	r2, [pc, #224]	; (8006ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d022      	beq.n	8006e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a36      	ldr	r2, [pc, #216]	; (8006ecc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01d      	beq.n	8006e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a35      	ldr	r2, [pc, #212]	; (8006ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a33      	ldr	r2, [pc, #204]	; (8006ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a32      	ldr	r2, [pc, #200]	; (8006ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a30      	ldr	r2, [pc, #192]	; (8006edc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2f      	ldr	r2, [pc, #188]	; (8006ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d101      	bne.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006e36:	2300      	movs	r3, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	3b08      	subs	r3, #8
 8006e44:	4a28      	ldr	r2, [pc, #160]	; (8006ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4b26      	ldr	r3, [pc, #152]	; (8006eec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	461a      	mov	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006e60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	2201      	movs	r2, #1
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e70:	e024      	b.n	8006ebc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	3b10      	subs	r3, #16
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d806      	bhi.n	8006e9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d902      	bls.n	8006e9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3308      	adds	r3, #8
 8006e98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006eac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ebc:	bf00      	nop
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	58025408 	.word	0x58025408
 8006ecc:	5802541c 	.word	0x5802541c
 8006ed0:	58025430 	.word	0x58025430
 8006ed4:	58025444 	.word	0x58025444
 8006ed8:	58025458 	.word	0x58025458
 8006edc:	5802546c 	.word	0x5802546c
 8006ee0:	58025480 	.word	0x58025480
 8006ee4:	58025494 	.word	0x58025494
 8006ee8:	cccccccd 	.word	0xcccccccd
 8006eec:	16009600 	.word	0x16009600
 8006ef0:	58025880 	.word	0x58025880
 8006ef4:	aaaaaaab 	.word	0xaaaaaaab
 8006ef8:	400204b8 	.word	0x400204b8
 8006efc:	4002040f 	.word	0x4002040f
 8006f00:	10008200 	.word	0x10008200
 8006f04:	40020880 	.word	0x40020880

08006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d04a      	beq.n	8006fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d847      	bhi.n	8006fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d022      	beq.n	8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a24      	ldr	r2, [pc, #144]	; (8006fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d01d      	beq.n	8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d018      	beq.n	8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00e      	beq.n	8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d009      	beq.n	8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d101      	bne.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4b17      	ldr	r3, [pc, #92]	; (8006fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f90:	671a      	str	r2, [r3, #112]	; 0x70
 8006f92:	e009      	b.n	8006fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a11      	ldr	r2, [pc, #68]	; (8006fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006fa6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	2201      	movs	r2, #1
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	58025408 	.word	0x58025408
 8006fc4:	5802541c 	.word	0x5802541c
 8006fc8:	58025430 	.word	0x58025430
 8006fcc:	58025444 	.word	0x58025444
 8006fd0:	58025458 	.word	0x58025458
 8006fd4:	5802546c 	.word	0x5802546c
 8006fd8:	58025480 	.word	0x58025480
 8006fdc:	58025494 	.word	0x58025494
 8006fe0:	1600963f 	.word	0x1600963f
 8006fe4:	58025940 	.word	0x58025940
 8006fe8:	1000823f 	.word	0x1000823f
 8006fec:	40020940 	.word	0x40020940

08006ff0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b098      	sub	sp, #96	; 0x60
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006ff8:	4a84      	ldr	r2, [pc, #528]	; (800720c <HAL_FDCAN_Init+0x21c>)
 8006ffa:	f107 030c 	add.w	r3, r7, #12
 8006ffe:	4611      	mov	r1, r2
 8007000:	224c      	movs	r2, #76	; 0x4c
 8007002:	4618      	mov	r0, r3
 8007004:	f00f fdb4 	bl	8016b70 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e1c6      	b.n	80073a0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a7e      	ldr	r2, [pc, #504]	; (8007210 <HAL_FDCAN_Init+0x220>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d106      	bne.n	800702a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007024:	461a      	mov	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fb faa4 	bl	800258c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0210 	bic.w	r2, r2, #16
 8007052:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007054:	f7fc fa32 	bl	80034bc <HAL_GetTick>
 8007058:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800705a:	e014      	b.n	8007086 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800705c:	f7fc fa2e 	bl	80034bc <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b0a      	cmp	r3, #10
 8007068:	d90d      	bls.n	8007086 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007070:	f043 0201 	orr.w	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2203      	movs	r2, #3
 800707e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e18c      	b.n	80073a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b08      	cmp	r3, #8
 8007092:	d0e3      	beq.n	800705c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070a4:	f7fc fa0a 	bl	80034bc <HAL_GetTick>
 80070a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80070aa:	e014      	b.n	80070d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80070ac:	f7fc fa06 	bl	80034bc <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b0a      	cmp	r3, #10
 80070b8:	d90d      	bls.n	80070d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c0:	f043 0201 	orr.w	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2203      	movs	r2, #3
 80070ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e164      	b.n	80073a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0e3      	beq.n	80070ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0202 	orr.w	r2, r2, #2
 80070f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7c1b      	ldrb	r3, [r3, #16]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d108      	bne.n	800710e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800710a:	619a      	str	r2, [r3, #24]
 800710c:	e007      	b.n	800711e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7c5b      	ldrb	r3, [r3, #17]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d108      	bne.n	8007138 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007134:	619a      	str	r2, [r3, #24]
 8007136:	e007      	b.n	8007148 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007146:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	7c9b      	ldrb	r3, [r3, #18]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d108      	bne.n	8007162 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800715e:	619a      	str	r2, [r3, #24]
 8007160:	e007      	b.n	8007172 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	699a      	ldr	r2, [r3, #24]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007170:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007196:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0210 	bic.w	r2, r2, #16
 80071a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d108      	bne.n	80071c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0204 	orr.w	r2, r2, #4
 80071be:	619a      	str	r2, [r3, #24]
 80071c0:	e030      	b.n	8007224 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d02c      	beq.n	8007224 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d020      	beq.n	8007214 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0210 	orr.w	r2, r2, #16
 80071f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d114      	bne.n	8007224 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0220 	orr.w	r2, r2, #32
 8007208:	619a      	str	r2, [r3, #24]
 800720a:	e00b      	b.n	8007224 <HAL_FDCAN_Init+0x234>
 800720c:	080174ac 	.word	0x080174ac
 8007210:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0220 	orr.w	r2, r2, #32
 8007222:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	3b01      	subs	r3, #1
 800722a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	3b01      	subs	r3, #1
 8007232:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007234:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800723c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	3b01      	subs	r3, #1
 8007246:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800724c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800724e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007258:	d115      	bne.n	8007286 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	3b01      	subs	r3, #1
 8007266:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007268:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	3b01      	subs	r3, #1
 8007270:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007272:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	3b01      	subs	r3, #1
 800727c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007282:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007284:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ac:	4413      	add	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d011      	beq.n	80072d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80072ba:	f023 0107 	bic.w	r1, r3, #7
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	3360      	adds	r3, #96	; 0x60
 80072c6:	443b      	add	r3, r7
 80072c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d011      	beq.n	8007302 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80072e6:	f023 0107 	bic.w	r1, r3, #7
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	3360      	adds	r3, #96	; 0x60
 80072f2:	443b      	add	r3, r7
 80072f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007306:	2b00      	cmp	r3, #0
 8007308:	d012      	beq.n	8007330 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007312:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	3360      	adds	r3, #96	; 0x60
 800731e:	443b      	add	r3, r7
 8007320:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007324:	011a      	lsls	r2, r3, #4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007340:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	3360      	adds	r3, #96	; 0x60
 800734c:	443b      	add	r3, r7
 800734e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007352:	021a      	lsls	r2, r3, #8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a11      	ldr	r2, [pc, #68]	; (80073a8 <HAL_FDCAN_Init+0x3b8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d107      	bne.n	8007378 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f022 0203 	bic.w	r2, r2, #3
 8007376:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f80b 	bl	80073ac <FDCAN_CalcultateRamBlockAddresses>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800739c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3760      	adds	r7, #96	; 0x60
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	4000a000 	.word	0x4000a000

080073ac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80073c2:	4ba7      	ldr	r3, [pc, #668]	; (8007660 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	0091      	lsls	r1, r2, #2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	430b      	orrs	r3, r1
 80073d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073dc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	041a      	lsls	r2, r3, #16
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	4413      	add	r3, r2
 80073f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007402:	4b97      	ldr	r3, [pc, #604]	; (8007660 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007404:	4013      	ands	r3, r2
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	0091      	lsls	r1, r2, #2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	430b      	orrs	r3, r1
 8007410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	041a      	lsls	r2, r3, #16
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	4413      	add	r3, r2
 800743a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007444:	4b86      	ldr	r3, [pc, #536]	; (8007660 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007446:	4013      	ands	r3, r2
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	0091      	lsls	r1, r2, #2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	430b      	orrs	r3, r1
 8007452:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800745e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	041a      	lsls	r2, r3, #16
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	4413      	add	r3, r2
 8007482:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800748c:	4b74      	ldr	r3, [pc, #464]	; (8007660 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800748e:	4013      	ands	r3, r2
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	0091      	lsls	r1, r2, #2
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	430b      	orrs	r3, r1
 800749a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074a6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ae:	041a      	lsls	r2, r3, #16
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4413      	add	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80074d4:	4b62      	ldr	r3, [pc, #392]	; (8007660 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	0091      	lsls	r1, r2, #2
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	430b      	orrs	r3, r1
 80074e2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	4413      	add	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007500:	4b57      	ldr	r3, [pc, #348]	; (8007660 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007502:	4013      	ands	r3, r2
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	0091      	lsls	r1, r2, #2
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6812      	ldr	r2, [r2, #0]
 800750c:	430b      	orrs	r3, r1
 800750e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800751a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007522:	041a      	lsls	r2, r3, #16
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	4413      	add	r3, r2
 8007538:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007542:	4b47      	ldr	r3, [pc, #284]	; (8007660 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007544:	4013      	ands	r3, r2
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	0091      	lsls	r1, r2, #2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	430b      	orrs	r3, r1
 8007550:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800755c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007564:	041a      	lsls	r2, r3, #16
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007578:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007580:	061a      	lsls	r2, r3, #24
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007590:	4b34      	ldr	r3, [pc, #208]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007592:	4413      	add	r3, r2
 8007594:	009a      	lsls	r2, r3, #2
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	441a      	add	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	441a      	add	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	441a      	add	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80075f6:	fb01 f303 	mul.w	r3, r1, r3
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	441a      	add	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007626:	fb01 f303 	mul.w	r3, r1, r3
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	441a      	add	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007642:	fb01 f303 	mul.w	r3, r1, r3
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007656:	4a04      	ldr	r2, [pc, #16]	; (8007668 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d915      	bls.n	8007688 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800765c:	e006      	b.n	800766c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800765e:	bf00      	nop
 8007660:	ffff0003 	.word	0xffff0003
 8007664:	10002b00 	.word	0x10002b00
 8007668:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007672:	f043 0220 	orr.w	r2, r3, #32
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2203      	movs	r2, #3
 8007680:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e010      	b.n	80076aa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e005      	b.n	800769c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3304      	adds	r3, #4
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d3f3      	bcc.n	8007690 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop

080076b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b089      	sub	sp, #36	; 0x24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076c6:	4b86      	ldr	r3, [pc, #536]	; (80078e0 <HAL_GPIO_Init+0x228>)
 80076c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076ca:	e18c      	b.n	80079e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	2101      	movs	r1, #1
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	fa01 f303 	lsl.w	r3, r1, r3
 80076d8:	4013      	ands	r3, r2
 80076da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 817e 	beq.w	80079e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d005      	beq.n	80076fc <HAL_GPIO_Init+0x44>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d130      	bne.n	800775e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	2203      	movs	r2, #3
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	43db      	mvns	r3, r3
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	4013      	ands	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007732:	2201      	movs	r2, #1
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	43db      	mvns	r3, r3
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	4013      	ands	r3, r2
 8007740:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	091b      	lsrs	r3, r3, #4
 8007748:	f003 0201 	and.w	r2, r3, #1
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	4313      	orrs	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	2b03      	cmp	r3, #3
 8007768:	d017      	beq.n	800779a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	2203      	movs	r2, #3
 8007776:	fa02 f303 	lsl.w	r3, r2, r3
 800777a:	43db      	mvns	r3, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	4013      	ands	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	4313      	orrs	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d123      	bne.n	80077ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	08da      	lsrs	r2, r3, #3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3208      	adds	r2, #8
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	220f      	movs	r2, #15
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	4013      	ands	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	691a      	ldr	r2, [r3, #16]
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	fa02 f303 	lsl.w	r3, r2, r3
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	4313      	orrs	r3, r2
 80077de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	08da      	lsrs	r2, r3, #3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3208      	adds	r2, #8
 80077e8:	69b9      	ldr	r1, [r7, #24]
 80077ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	2203      	movs	r2, #3
 80077fa:	fa02 f303 	lsl.w	r3, r2, r3
 80077fe:	43db      	mvns	r3, r3
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	4013      	ands	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f003 0203 	and.w	r2, r3, #3
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	4313      	orrs	r3, r2
 800781a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 80d8 	beq.w	80079e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007830:	4b2c      	ldr	r3, [pc, #176]	; (80078e4 <HAL_GPIO_Init+0x22c>)
 8007832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007836:	4a2b      	ldr	r2, [pc, #172]	; (80078e4 <HAL_GPIO_Init+0x22c>)
 8007838:	f043 0302 	orr.w	r3, r3, #2
 800783c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007840:	4b28      	ldr	r3, [pc, #160]	; (80078e4 <HAL_GPIO_Init+0x22c>)
 8007842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800784e:	4a26      	ldr	r2, [pc, #152]	; (80078e8 <HAL_GPIO_Init+0x230>)
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	089b      	lsrs	r3, r3, #2
 8007854:	3302      	adds	r3, #2
 8007856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800785a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	220f      	movs	r2, #15
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	43db      	mvns	r3, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4013      	ands	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <HAL_GPIO_Init+0x234>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d04a      	beq.n	8007910 <HAL_GPIO_Init+0x258>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <HAL_GPIO_Init+0x238>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02b      	beq.n	80078da <HAL_GPIO_Init+0x222>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <HAL_GPIO_Init+0x23c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d025      	beq.n	80078d6 <HAL_GPIO_Init+0x21e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <HAL_GPIO_Init+0x240>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d01f      	beq.n	80078d2 <HAL_GPIO_Init+0x21a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a19      	ldr	r2, [pc, #100]	; (80078fc <HAL_GPIO_Init+0x244>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d019      	beq.n	80078ce <HAL_GPIO_Init+0x216>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a18      	ldr	r2, [pc, #96]	; (8007900 <HAL_GPIO_Init+0x248>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d013      	beq.n	80078ca <HAL_GPIO_Init+0x212>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a17      	ldr	r2, [pc, #92]	; (8007904 <HAL_GPIO_Init+0x24c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00d      	beq.n	80078c6 <HAL_GPIO_Init+0x20e>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a16      	ldr	r2, [pc, #88]	; (8007908 <HAL_GPIO_Init+0x250>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d007      	beq.n	80078c2 <HAL_GPIO_Init+0x20a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a15      	ldr	r2, [pc, #84]	; (800790c <HAL_GPIO_Init+0x254>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d101      	bne.n	80078be <HAL_GPIO_Init+0x206>
 80078ba:	2309      	movs	r3, #9
 80078bc:	e029      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078be:	230a      	movs	r3, #10
 80078c0:	e027      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078c2:	2307      	movs	r3, #7
 80078c4:	e025      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078c6:	2306      	movs	r3, #6
 80078c8:	e023      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078ca:	2305      	movs	r3, #5
 80078cc:	e021      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078ce:	2304      	movs	r3, #4
 80078d0:	e01f      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078d2:	2303      	movs	r3, #3
 80078d4:	e01d      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e01b      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078da:	2301      	movs	r3, #1
 80078dc:	e019      	b.n	8007912 <HAL_GPIO_Init+0x25a>
 80078de:	bf00      	nop
 80078e0:	58000080 	.word	0x58000080
 80078e4:	58024400 	.word	0x58024400
 80078e8:	58000400 	.word	0x58000400
 80078ec:	58020000 	.word	0x58020000
 80078f0:	58020400 	.word	0x58020400
 80078f4:	58020800 	.word	0x58020800
 80078f8:	58020c00 	.word	0x58020c00
 80078fc:	58021000 	.word	0x58021000
 8007900:	58021400 	.word	0x58021400
 8007904:	58021800 	.word	0x58021800
 8007908:	58021c00 	.word	0x58021c00
 800790c:	58022400 	.word	0x58022400
 8007910:	2300      	movs	r3, #0
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	f002 0203 	and.w	r2, r2, #3
 8007918:	0092      	lsls	r2, r2, #2
 800791a:	4093      	lsls	r3, r2
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4313      	orrs	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007922:	4938      	ldr	r1, [pc, #224]	; (8007a04 <HAL_GPIO_Init+0x34c>)
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	089b      	lsrs	r3, r3, #2
 8007928:	3302      	adds	r3, #2
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	43db      	mvns	r3, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4013      	ands	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800795e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	43db      	mvns	r3, r3
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4013      	ands	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	43db      	mvns	r3, r3
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	4013      	ands	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f47f ae6b 	bne.w	80076cc <HAL_GPIO_Init+0x14>
  }
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3724      	adds	r7, #36	; 0x24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	58000400 	.word	0x58000400

08007a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	887b      	ldrh	r3, [r7, #2]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a20:	2301      	movs	r3, #1
 8007a22:	73fb      	strb	r3, [r7, #15]
 8007a24:	e001      	b.n	8007a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	807b      	strh	r3, [r7, #2]
 8007a44:	4613      	mov	r3, r2
 8007a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a48:	787b      	ldrb	r3, [r7, #1]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a4e:	887a      	ldrh	r2, [r7, #2]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a54:	e003      	b.n	8007a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a56:	887b      	ldrh	r3, [r7, #2]
 8007a58:	041a      	lsls	r2, r3, #16
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	619a      	str	r2, [r3, #24]
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e07f      	b.n	8007b7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7fa fde2 	bl	800265c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2224      	movs	r2, #36	; 0x24
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0201 	bic.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d107      	bne.n	8007ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ae2:	609a      	str	r2, [r3, #8]
 8007ae4:	e006      	b.n	8007af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689a      	ldr	r2, [r3, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d104      	bne.n	8007b06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <HAL_I2C_Init+0x11c>)
 8007b12:	430b      	orrs	r3, r1
 8007b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	69d9      	ldr	r1, [r3, #28]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1a      	ldr	r2, [r3, #32]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	02008000 	.word	0x02008000

08007b8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
  }
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d138      	bne.n	8007c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d101      	bne.n	8007be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007be0:	2302      	movs	r3, #2
 8007be2:	e032      	b.n	8007c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2224      	movs	r2, #36	; 0x24
 8007bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0201 	bic.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e000      	b.n	8007c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
  }
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d139      	bne.n	8007ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e033      	b.n	8007ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2224      	movs	r2, #36	; 0x24
 8007c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ca8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e000      	b.n	8007ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ce0:	2302      	movs	r3, #2
  }
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf0:	b08f      	sub	sp, #60	; 0x3c
 8007cf2:	af0a      	add	r7, sp, #40	; 0x28
 8007cf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e116      	b.n	8007f2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f00e fbc8 	bl	80164b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2203      	movs	r2, #3
 8007d24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f00a fcf7 	bl	8012732 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	603b      	str	r3, [r7, #0]
 8007d4a:	687e      	ldr	r6, [r7, #4]
 8007d4c:	466d      	mov	r5, sp
 8007d4e:	f106 0410 	add.w	r4, r6, #16
 8007d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d62:	1d33      	adds	r3, r6, #4
 8007d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d66:	6838      	ldr	r0, [r7, #0]
 8007d68:	f00a fbc2 	bl	80124f0 <USB_CoreInit>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d005      	beq.n	8007d7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2202      	movs	r2, #2
 8007d76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e0d7      	b.n	8007f2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f00a fce5 	bl	8012754 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e04a      	b.n	8007e26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d90:	7bfa      	ldrb	r2, [r7, #15]
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	4613      	mov	r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	333d      	adds	r3, #61	; 0x3d
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007da4:	7bfa      	ldrb	r2, [r7, #15]
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4613      	mov	r3, r2
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	333c      	adds	r3, #60	; 0x3c
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007db8:	7bfa      	ldrb	r2, [r7, #15]
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	b298      	uxth	r0, r3
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	3356      	adds	r3, #86	; 0x56
 8007dcc:	4602      	mov	r2, r0
 8007dce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007dd0:	7bfa      	ldrb	r2, [r7, #15]
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3340      	adds	r3, #64	; 0x40
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007de4:	7bfa      	ldrb	r2, [r7, #15]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	3344      	adds	r3, #68	; 0x44
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007df8:	7bfa      	ldrb	r2, [r7, #15]
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	3348      	adds	r3, #72	; 0x48
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	334c      	adds	r3, #76	; 0x4c
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	3301      	adds	r3, #1
 8007e24:	73fb      	strb	r3, [r7, #15]
 8007e26:	7bfa      	ldrb	r2, [r7, #15]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d3af      	bcc.n	8007d90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
 8007e34:	e044      	b.n	8007ec0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e36:	7bfa      	ldrb	r2, [r7, #15]
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e4c:	7bfa      	ldrb	r2, [r7, #15]
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4613      	mov	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007e5e:	7bfa      	ldrb	r2, [r7, #15]
 8007e60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e62:	7bfa      	ldrb	r2, [r7, #15]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4613      	mov	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e78:	7bfa      	ldrb	r2, [r7, #15]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e8e:	7bfa      	ldrb	r2, [r7, #15]
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ea4:	7bfa      	ldrb	r2, [r7, #15]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]
 8007ec0:	7bfa      	ldrb	r2, [r7, #15]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d3b5      	bcc.n	8007e36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	687e      	ldr	r6, [r7, #4]
 8007ed2:	466d      	mov	r5, sp
 8007ed4:	f106 0410 	add.w	r4, r6, #16
 8007ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ee8:	1d33      	adds	r3, r6, #4
 8007eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007eec:	6838      	ldr	r0, [r7, #0]
 8007eee:	f00a fc7d 	bl	80127ec <USB_DevInit>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e014      	b.n	8007f2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d102      	bne.n	8007f22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f96f 	bl	8009200 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f00b fcbf 	bl	80138aa <USB_DevDisconnect>

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <HAL_PCD_Start+0x1c>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e022      	b.n	8007f98 <HAL_PCD_Start+0x62>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d105      	bne.n	8007f7a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f00a fbc6 	bl	8012710 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f00b fc6d 	bl	8013868 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007fa0:	b590      	push	{r4, r7, lr}
 8007fa2:	b08d      	sub	sp, #52	; 0x34
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f00b fd2b 	bl	8013a12 <USB_GetMode>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f040 84b7 	bne.w	8008932 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f00b fc8f 	bl	80138ec <USB_ReadInterrupts>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 84ad 	beq.w	8008930 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f00b fc7c 	bl	80138ec <USB_ReadInterrupts>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d107      	bne.n	800800e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f002 0202 	and.w	r2, r2, #2
 800800c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f00b fc6a 	bl	80138ec <USB_ReadInterrupts>
 8008018:	4603      	mov	r3, r0
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b10      	cmp	r3, #16
 8008020:	d161      	bne.n	80080e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0210 	bic.w	r2, r2, #16
 8008030:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f003 020f 	and.w	r2, r3, #15
 800803e:	4613      	mov	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	4413      	add	r3, r2
 800804e:	3304      	adds	r3, #4
 8008050:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	0c5b      	lsrs	r3, r3, #17
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	2b02      	cmp	r3, #2
 800805c:	d124      	bne.n	80080a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008064:	4013      	ands	r3, r2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d035      	beq.n	80080d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	091b      	lsrs	r3, r3, #4
 8008072:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008078:	b29b      	uxth	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	6a38      	ldr	r0, [r7, #32]
 800807e:	f00b faa1 	bl	80135c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	091b      	lsrs	r3, r3, #4
 800808a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800808e:	441a      	add	r2, r3
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	091b      	lsrs	r3, r3, #4
 800809c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080a0:	441a      	add	r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	615a      	str	r2, [r3, #20]
 80080a6:	e016      	b.n	80080d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	0c5b      	lsrs	r3, r3, #17
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	2b06      	cmp	r3, #6
 80080b2:	d110      	bne.n	80080d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080ba:	2208      	movs	r2, #8
 80080bc:	4619      	mov	r1, r3
 80080be:	6a38      	ldr	r0, [r7, #32]
 80080c0:	f00b fa80 	bl	80135c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	695a      	ldr	r2, [r3, #20]
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	091b      	lsrs	r3, r3, #4
 80080cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080d0:	441a      	add	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0210 	orr.w	r2, r2, #16
 80080e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f00b fbfe 	bl	80138ec <USB_ReadInterrupts>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080fa:	f040 80a7 	bne.w	800824c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f00b fc03 	bl	8013912 <USB_ReadDevAllOutEpInterrupt>
 800810c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800810e:	e099      	b.n	8008244 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 808e 	beq.w	8008238 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f00b fc27 	bl	801397a <USB_ReadDevOutEPInterrupt>
 800812c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00c      	beq.n	8008152 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008144:	461a      	mov	r2, r3
 8008146:	2301      	movs	r3, #1
 8008148:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800814a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fed1 	bl	8008ef4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	461a      	mov	r2, r3
 800816a:	2308      	movs	r3, #8
 800816c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800816e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 ffa7 	bl	80090c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	d008      	beq.n	8008192 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818c:	461a      	mov	r2, r3
 800818e:	2310      	movs	r3, #16
 8008190:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d030      	beq.n	80081fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a4:	2b80      	cmp	r3, #128	; 0x80
 80081a6:	d109      	bne.n	80081bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80081bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	3304      	adds	r3, #4
 80081d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	78db      	ldrb	r3, [r3, #3]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d108      	bne.n	80081ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2200      	movs	r2, #0
 80081de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f00e fa5a 	bl	80166a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	461a      	mov	r2, r3
 80081fa:	2302      	movs	r3, #2
 80081fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	461a      	mov	r2, r3
 8008216:	2320      	movs	r3, #32
 8008218:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d009      	beq.n	8008238 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008230:	461a      	mov	r2, r3
 8008232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008236:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	3301      	adds	r3, #1
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	085b      	lsrs	r3, r3, #1
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	f47f af62 	bne.w	8008110 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f00b fb4b 	bl	80138ec <USB_ReadInterrupts>
 8008256:	4603      	mov	r3, r0
 8008258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800825c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008260:	f040 80db 	bne.w	800841a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f00b fb6c 	bl	8013946 <USB_ReadDevAllInEpInterrupt>
 800826e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008274:	e0cd      	b.n	8008412 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80c2 	beq.w	8008406 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f00b fb92 	bl	80139b6 <USB_ReadDevInEPInterrupt>
 8008292:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d057      	beq.n	800834e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2201      	movs	r2, #1
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	43db      	mvns	r3, r3
 80082b8:	69f9      	ldr	r1, [r7, #28]
 80082ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082be:	4013      	ands	r3, r2
 80082c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ce:	461a      	mov	r2, r3
 80082d0:	2301      	movs	r3, #1
 80082d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d132      	bne.n	8008342 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e0:	4613      	mov	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	3348      	adds	r3, #72	; 0x48
 80082ec:	6819      	ldr	r1, [r3, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f2:	4613      	mov	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4403      	add	r3, r0
 80082fc:	3344      	adds	r3, #68	; 0x44
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4419      	add	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4403      	add	r3, r0
 8008310:	3348      	adds	r3, #72	; 0x48
 8008312:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d113      	bne.n	8008342 <HAL_PCD_IRQHandler+0x3a2>
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831e:	4613      	mov	r3, r2
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	334c      	adds	r3, #76	; 0x4c
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d108      	bne.n	8008342 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800833a:	461a      	mov	r2, r3
 800833c:	2101      	movs	r1, #1
 800833e:	f00b fb9b 	bl	8013a78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	b2db      	uxtb	r3, r3
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f00e f924 	bl	8016596 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d008      	beq.n	800836a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008364:	461a      	mov	r2, r3
 8008366:	2308      	movs	r3, #8
 8008368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	d008      	beq.n	8008386 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008380:	461a      	mov	r2, r3
 8008382:	2310      	movs	r3, #16
 8008384:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d008      	beq.n	80083a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839c:	461a      	mov	r2, r3
 800839e:	2340      	movs	r3, #64	; 0x40
 80083a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d023      	beq.n	80083f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80083ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083ae:	6a38      	ldr	r0, [r7, #32]
 80083b0:	f00a fb7a 	bl	8012aa8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80083b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b6:	4613      	mov	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	3338      	adds	r3, #56	; 0x38
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	4413      	add	r3, r2
 80083c4:	3304      	adds	r3, #4
 80083c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	78db      	ldrb	r3, [r3, #3]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d108      	bne.n	80083e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2200      	movs	r2, #0
 80083d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f00e f971 	bl	80166c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ee:	461a      	mov	r2, r3
 80083f0:	2302      	movs	r3, #2
 80083f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80083fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fcea 	bl	8008dda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	3301      	adds	r3, #1
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	2b00      	cmp	r3, #0
 8008416:	f47f af2e 	bne.w	8008276 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f00b fa64 	bl	80138ec <USB_ReadInterrupts>
 8008424:	4603      	mov	r3, r0
 8008426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800842a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800842e:	d122      	bne.n	8008476 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800843e:	f023 0301 	bic.w	r3, r3, #1
 8008442:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800844a:	2b01      	cmp	r3, #1
 800844c:	d108      	bne.n	8008460 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008456:	2100      	movs	r1, #0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fef5 	bl	8009248 <HAL_PCDEx_LPM_Callback>
 800845e:	e002      	b.n	8008466 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f00e f90f 	bl	8016684 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695a      	ldr	r2, [r3, #20]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f00b fa36 	bl	80138ec <USB_ReadInterrupts>
 8008480:	4603      	mov	r3, r0
 8008482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800848a:	d112      	bne.n	80084b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b01      	cmp	r3, #1
 800849a:	d102      	bne.n	80084a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f00e f8cb 	bl	8016638 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695a      	ldr	r2, [r3, #20]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80084b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f00b fa18 	bl	80138ec <USB_ReadInterrupts>
 80084bc:	4603      	mov	r3, r0
 80084be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084c6:	d121      	bne.n	800850c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695a      	ldr	r2, [r3, #20]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80084d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d111      	bne.n	8008506 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f0:	089b      	lsrs	r3, r3, #2
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80084fc:	2101      	movs	r1, #1
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fea2 	bl	8009248 <HAL_PCDEx_LPM_Callback>
 8008504:	e002      	b.n	800850c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f00e f896 	bl	8016638 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f00b f9eb 	bl	80138ec <USB_ReadInterrupts>
 8008516:	4603      	mov	r3, r0
 8008518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800851c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008520:	f040 80b7 	bne.w	8008692 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2110      	movs	r1, #16
 800853e:	4618      	mov	r0, r3
 8008540:	f00a fab2 	bl	8012aa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008544:	2300      	movs	r3, #0
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008548:	e046      	b.n	80085d8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008556:	461a      	mov	r2, r3
 8008558:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800855c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856e:	0151      	lsls	r1, r2, #5
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	440a      	add	r2, r1
 8008574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008578:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800857c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858a:	461a      	mov	r2, r3
 800858c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008590:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085a2:	0151      	lsls	r1, r2, #5
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	440a      	add	r2, r1
 80085a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	3301      	adds	r3, #1
 80085d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085de:	429a      	cmp	r2, r3
 80085e0:	d3b3      	bcc.n	800854a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80085f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d016      	beq.n	800862c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800860e:	f043 030b 	orr.w	r3, r3, #11
 8008612:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008624:	f043 030b 	orr.w	r3, r3, #11
 8008628:	6453      	str	r3, [r2, #68]	; 0x44
 800862a:	e015      	b.n	8008658 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008632:	695a      	ldr	r2, [r3, #20]
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863a:	4619      	mov	r1, r3
 800863c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008640:	4313      	orrs	r3, r2
 8008642:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008652:	f043 030b 	orr.w	r3, r3, #11
 8008656:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	69fa      	ldr	r2, [r7, #28]
 8008662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008666:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800866a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800867c:	461a      	mov	r2, r3
 800867e:	f00b f9fb 	bl	8013a78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695a      	ldr	r2, [r3, #20]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f00b f928 	bl	80138ec <USB_ReadInterrupts>
 800869c:	4603      	mov	r3, r0
 800869e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a6:	d124      	bne.n	80086f2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f00b f9bf 	bl	8013a30 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f00a fa73 	bl	8012ba2 <USB_GetDevSpeed>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681c      	ldr	r4, [r3, #0]
 80086c8:	f001 fd88 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 80086cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	4620      	mov	r0, r4
 80086d8:	f009 ff78 	bl	80125cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f00d ff82 	bl	80165e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80086f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f00b f8f8 	bl	80138ec <USB_ReadInterrupts>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b08      	cmp	r3, #8
 8008704:	d10a      	bne.n	800871c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f00d ff5f 	bl	80165ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695a      	ldr	r2, [r3, #20]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f002 0208 	and.w	r2, r2, #8
 800871a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f00b f8e3 	bl	80138ec <USB_ReadInterrupts>
 8008726:	4603      	mov	r3, r0
 8008728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872c:	2b80      	cmp	r3, #128	; 0x80
 800872e:	d122      	bne.n	8008776 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800873c:	2301      	movs	r3, #1
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
 8008740:	e014      	b.n	800876c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d105      	bne.n	8008766 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	b2db      	uxtb	r3, r3
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fb09 	bl	8008d78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	3301      	adds	r3, #1
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008772:	429a      	cmp	r2, r3
 8008774:	d3e5      	bcc.n	8008742 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f00b f8b6 	bl	80138ec <USB_ReadInterrupts>
 8008780:	4603      	mov	r3, r0
 8008782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800878a:	d13b      	bne.n	8008804 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800878c:	2301      	movs	r3, #1
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
 8008790:	e02b      	b.n	80087ea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a6:	4613      	mov	r3, r2
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	3340      	adds	r3, #64	; 0x40
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d115      	bne.n	80087e4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80087b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da12      	bge.n	80087e4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	4613      	mov	r3, r2
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	333f      	adds	r3, #63	; 0x3f
 80087ce:	2201      	movs	r2, #1
 80087d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 faca 	bl	8008d78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	3301      	adds	r3, #1
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d3ce      	bcc.n	8008792 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	695a      	ldr	r2, [r3, #20]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4618      	mov	r0, r3
 800880a:	f00b f86f 	bl	80138ec <USB_ReadInterrupts>
 800880e:	4603      	mov	r3, r0
 8008810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008818:	d155      	bne.n	80088c6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800881a:	2301      	movs	r3, #1
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
 800881e:	e045      	b.n	80088ac <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	4413      	add	r3, r2
 8008828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	4613      	mov	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d12e      	bne.n	80088a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008848:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800884a:	2b00      	cmp	r3, #0
 800884c:	da2b      	bge.n	80088a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800885a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800885e:	429a      	cmp	r2, r3
 8008860:	d121      	bne.n	80088a6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	4613      	mov	r3, r2
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	440b      	add	r3, r1
 8008870:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008874:	2201      	movs	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800889e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088a2:	6053      	str	r3, [r2, #4]
            break;
 80088a4:	e007      	b.n	80088b6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	3301      	adds	r3, #1
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d3b4      	bcc.n	8008820 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695a      	ldr	r2, [r3, #20]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80088c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f00b f80e 	bl	80138ec <USB_ReadInterrupts>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088da:	d10a      	bne.n	80088f2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f00d ff03 	bl	80166e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695a      	ldr	r2, [r3, #20]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80088f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f00a fff8 	bl	80138ec <USB_ReadInterrupts>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	2b04      	cmp	r3, #4
 8008904:	d115      	bne.n	8008932 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f00d fef3 	bl	8016704 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6859      	ldr	r1, [r3, #4]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
 800892e:	e000      	b.n	8008932 <HAL_PCD_IRQHandler+0x992>
      return;
 8008930:	bf00      	nop
    }
  }
}
 8008932:	3734      	adds	r7, #52	; 0x34
 8008934:	46bd      	mov	sp, r7
 8008936:	bd90      	pop	{r4, r7, pc}

08008938 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800894a:	2b01      	cmp	r3, #1
 800894c:	d101      	bne.n	8008952 <HAL_PCD_SetAddress+0x1a>
 800894e:	2302      	movs	r3, #2
 8008950:	e013      	b.n	800897a <HAL_PCD_SetAddress+0x42>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f00a ff56 	bl	801381c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	4608      	mov	r0, r1
 800898c:	4611      	mov	r1, r2
 800898e:	461a      	mov	r2, r3
 8008990:	4603      	mov	r3, r0
 8008992:	70fb      	strb	r3, [r7, #3]
 8008994:	460b      	mov	r3, r1
 8008996:	803b      	strh	r3, [r7, #0]
 8008998:	4613      	mov	r3, r2
 800899a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80089a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da0f      	bge.n	80089c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	f003 020f 	and.w	r2, r3, #15
 80089ae:	4613      	mov	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	3338      	adds	r3, #56	; 0x38
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	4413      	add	r3, r2
 80089bc:	3304      	adds	r3, #4
 80089be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	705a      	strb	r2, [r3, #1]
 80089c6:	e00f      	b.n	80089e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	f003 020f 	and.w	r2, r3, #15
 80089ce:	4613      	mov	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	3304      	adds	r3, #4
 80089e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80089f4:	883a      	ldrh	r2, [r7, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	78ba      	ldrb	r2, [r7, #2]
 80089fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d004      	beq.n	8008a12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008a12:	78bb      	ldrb	r3, [r7, #2]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d102      	bne.n	8008a1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_PCD_EP_Open+0xaa>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e00e      	b.n	8008a4a <HAL_PCD_EP_Open+0xc8>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68f9      	ldr	r1, [r7, #12]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f00a f8d6 	bl	8012bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	da0f      	bge.n	8008a86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	f003 020f 	and.w	r2, r3, #15
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	3338      	adds	r3, #56	; 0x38
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	4413      	add	r3, r2
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	705a      	strb	r2, [r3, #1]
 8008a84:	e00f      	b.n	8008aa6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	f003 020f 	and.w	r2, r3, #15
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	f003 030f 	and.w	r3, r3, #15
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_PCD_EP_Close+0x6e>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e00e      	b.n	8008ade <HAL_PCD_EP_Close+0x8c>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68f9      	ldr	r1, [r7, #12]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f00a f914 	bl	8012cfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	460b      	mov	r3, r1
 8008af4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	f003 020f 	and.w	r2, r3, #15
 8008afc:	4613      	mov	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2200      	movs	r2, #0
 8008b26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d102      	bne.n	8008b42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6979      	ldr	r1, [r7, #20]
 8008b50:	f00a f9b0 	bl	8012eb4 <USB_EPStartXfer>

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	460b      	mov	r3, r1
 8008b68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	f003 020f 	and.w	r2, r3, #15
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008b80:	681b      	ldr	r3, [r3, #0]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b086      	sub	sp, #24
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	f003 020f 	and.w	r2, r3, #15
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	3338      	adds	r3, #56	; 0x38
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	f003 030f 	and.w	r3, r3, #15
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d102      	bne.n	8008be8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	6979      	ldr	r1, [r7, #20]
 8008bf6:	f00a f95d 	bl	8012eb4 <USB_EPStartXfer>

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	f003 020f 	and.w	r2, r3, #15
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d901      	bls.n	8008c22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e050      	b.n	8008cc4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da0f      	bge.n	8008c4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	f003 020f 	and.w	r2, r3, #15
 8008c30:	4613      	mov	r3, r2
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	3338      	adds	r3, #56	; 0x38
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3304      	adds	r3, #4
 8008c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	705a      	strb	r2, [r3, #1]
 8008c48:	e00d      	b.n	8008c66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d101      	bne.n	8008c86 <HAL_PCD_EP_SetStall+0x82>
 8008c82:	2302      	movs	r3, #2
 8008c84:	e01e      	b.n	8008cc4 <HAL_PCD_EP_SetStall+0xc0>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68f9      	ldr	r1, [r7, #12]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f00a fced 	bl	8013674 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c9a:	78fb      	ldrb	r3, [r7, #3]
 8008c9c:	f003 030f 	and.w	r3, r3, #15
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	b2d9      	uxtb	r1, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f00a fedf 	bl	8013a78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	f003 020f 	and.w	r2, r3, #15
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d901      	bls.n	8008cea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e042      	b.n	8008d70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da0f      	bge.n	8008d12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cf2:	78fb      	ldrb	r3, [r7, #3]
 8008cf4:	f003 020f 	and.w	r2, r3, #15
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	3338      	adds	r3, #56	; 0x38
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	3304      	adds	r3, #4
 8008d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	705a      	strb	r2, [r3, #1]
 8008d10:	e00f      	b.n	8008d32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	4413      	add	r3, r2
 8008d28:	3304      	adds	r3, #4
 8008d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	f003 030f 	and.w	r3, r3, #15
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_PCD_EP_ClrStall+0x86>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e00e      	b.n	8008d70 <HAL_PCD_EP_ClrStall+0xa4>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68f9      	ldr	r1, [r7, #12]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f00a fcf5 	bl	8013750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da0c      	bge.n	8008da6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f003 020f 	and.w	r2, r3, #15
 8008d92:	4613      	mov	r3, r2
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	3338      	adds	r3, #56	; 0x38
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4413      	add	r3, r2
 8008da0:	3304      	adds	r3, #4
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e00c      	b.n	8008dc0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	4613      	mov	r3, r2
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	4413      	add	r3, r2
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68f9      	ldr	r1, [r7, #12]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f00a fb14 	bl	80133f4 <USB_EPStopXfer>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b08a      	sub	sp, #40	; 0x28
 8008dde:	af02      	add	r7, sp, #8
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	3338      	adds	r3, #56	; 0x38
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3304      	adds	r3, #4
 8008e00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d901      	bls.n	8008e12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e06c      	b.n	8008eec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	691a      	ldr	r2, [r3, #16]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d902      	bls.n	8008e2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	3303      	adds	r3, #3
 8008e32:	089b      	lsrs	r3, r3, #2
 8008e34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e36:	e02b      	b.n	8008e90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d902      	bls.n	8008e54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	3303      	adds	r3, #3
 8008e58:	089b      	lsrs	r3, r3, #2
 8008e5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	68d9      	ldr	r1, [r3, #12]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4603      	mov	r3, r0
 8008e72:	6978      	ldr	r0, [r7, #20]
 8008e74:	f00a fb68 	bl	8013548 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	441a      	add	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	695a      	ldr	r2, [r3, #20]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	441a      	add	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d809      	bhi.n	8008eba <PCD_WriteEmptyTxFifo+0xe0>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d203      	bcs.n	8008eba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1be      	bne.n	8008e38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d811      	bhi.n	8008eea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	2201      	movs	r2, #1
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	43db      	mvns	r3, r3
 8008ee0:	6939      	ldr	r1, [r7, #16]
 8008ee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3720      	adds	r7, #32
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	333c      	adds	r3, #60	; 0x3c
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d17b      	bne.n	8009022 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d015      	beq.n	8008f60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	4a61      	ldr	r2, [pc, #388]	; (80090bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	f240 80b9 	bls.w	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80b3 	beq.w	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	461a      	mov	r2, r3
 8008f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f5c:	6093      	str	r3, [r2, #8]
 8008f5e:	e0a7      	b.n	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d009      	beq.n	8008f7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	461a      	mov	r2, r3
 8008f78:	2320      	movs	r3, #32
 8008f7a:	6093      	str	r3, [r2, #8]
 8008f7c:	e098      	b.n	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 8093 	bne.w	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	4a4b      	ldr	r2, [pc, #300]	; (80090bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d90f      	bls.n	8008fb2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fae:	6093      	str	r3, [r2, #8]
 8008fb0:	e07e      	b.n	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	0159      	lsls	r1, r3, #5
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d114      	bne.n	8009014 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2101      	movs	r1, #1
 8009000:	f00a fd3a 	bl	8013a78 <USB_EP0_OutStart>
 8009004:	e006      	b.n	8009014 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	441a      	add	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f00d faa0 	bl	8016560 <HAL_PCD_DataOutStageCallback>
 8009020:	e046      	b.n	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	4a26      	ldr	r2, [pc, #152]	; (80090c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d124      	bne.n	8009074 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	461a      	mov	r2, r3
 8009042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009046:	6093      	str	r3, [r2, #8]
 8009048:	e032      	b.n	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b00      	cmp	r3, #0
 8009052:	d008      	beq.n	8009066 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009060:	461a      	mov	r2, r3
 8009062:	2320      	movs	r3, #32
 8009064:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f00d fa77 	bl	8016560 <HAL_PCD_DataOutStageCallback>
 8009072:	e01d      	b.n	80090b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d114      	bne.n	80090a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	4613      	mov	r3, r2
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	440b      	add	r3, r1
 8009088:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d108      	bne.n	80090a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800909c:	461a      	mov	r2, r3
 800909e:	2100      	movs	r1, #0
 80090a0:	f00a fcea 	bl	8013a78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f00d fa58 	bl	8016560 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3720      	adds	r7, #32
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	4f54300a 	.word	0x4f54300a
 80090c0:	4f54310a 	.word	0x4f54310a

080090c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	333c      	adds	r3, #60	; 0x3c
 80090dc:	3304      	adds	r3, #4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4a15      	ldr	r2, [pc, #84]	; (800914c <PCD_EP_OutSetupPacket_int+0x88>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d90e      	bls.n	8009118 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009100:	2b00      	cmp	r3, #0
 8009102:	d009      	beq.n	8009118 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	461a      	mov	r2, r3
 8009112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009116:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f00d fa0f 	bl	801653c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	4a0a      	ldr	r2, [pc, #40]	; (800914c <PCD_EP_OutSetupPacket_int+0x88>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d90c      	bls.n	8009140 <PCD_EP_OutSetupPacket_int+0x7c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d108      	bne.n	8009140 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009138:	461a      	mov	r2, r3
 800913a:	2101      	movs	r1, #1
 800913c:	f00a fc9c 	bl	8013a78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	4f54300a 	.word	0x4f54300a

08009150 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
 800915c:	4613      	mov	r3, r2
 800915e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d107      	bne.n	800917e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800916e:	883b      	ldrh	r3, [r7, #0]
 8009170:	0419      	lsls	r1, r3, #16
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	430a      	orrs	r2, r1
 800917a:	629a      	str	r2, [r3, #40]	; 0x28
 800917c:	e028      	b.n	80091d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4413      	add	r3, r2
 800918a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
 8009190:	e00d      	b.n	80091ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	3340      	adds	r3, #64	; 0x40
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	0c1b      	lsrs	r3, r3, #16
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	4413      	add	r3, r2
 80091a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	3301      	adds	r3, #1
 80091ac:	73fb      	strb	r3, [r7, #15]
 80091ae:	7bfa      	ldrb	r2, [r7, #15]
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d3ec      	bcc.n	8009192 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80091b8:	883b      	ldrh	r3, [r7, #0]
 80091ba:	0418      	lsls	r0, r3, #16
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6819      	ldr	r1, [r3, #0]
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	4302      	orrs	r2, r0
 80091c8:	3340      	adds	r3, #64	; 0x40
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	887a      	ldrh	r2, [r7, #2]
 80091f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <HAL_PCDEx_ActivateLPM+0x44>)
 8009230:	4313      	orrs	r3, r2
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	10000003 	.word	0x10000003

08009248 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009268:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <HAL_PWREx_ConfigSupply+0x70>)
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b04      	cmp	r3, #4
 8009272:	d00a      	beq.n	800928a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009274:	4b16      	ldr	r3, [pc, #88]	; (80092d0 <HAL_PWREx_ConfigSupply+0x70>)
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f003 0307 	and.w	r3, r3, #7
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d001      	beq.n	8009286 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e01f      	b.n	80092c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	e01d      	b.n	80092c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800928a:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <HAL_PWREx_ConfigSupply+0x70>)
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f023 0207 	bic.w	r2, r3, #7
 8009292:	490f      	ldr	r1, [pc, #60]	; (80092d0 <HAL_PWREx_ConfigSupply+0x70>)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4313      	orrs	r3, r2
 8009298:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800929a:	f7fa f90f 	bl	80034bc <HAL_GetTick>
 800929e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092a0:	e009      	b.n	80092b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80092a2:	f7fa f90b 	bl	80034bc <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092b0:	d901      	bls.n	80092b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e007      	b.n	80092c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092b6:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <HAL_PWREx_ConfigSupply+0x70>)
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c2:	d1ee      	bne.n	80092a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	58024800 	.word	0x58024800

080092d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	4a04      	ldr	r2, [pc, #16]	; (80092f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80092de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092e2:	60d3      	str	r3, [r2, #12]
}
 80092e4:	bf00      	nop
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	58024800 	.word	0x58024800

080092f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08c      	sub	sp, #48	; 0x30
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e3c8      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 8087 	beq.w	8009422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009314:	4b88      	ldr	r3, [pc, #544]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800931c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800931e:	4b86      	ldr	r3, [pc, #536]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	2b10      	cmp	r3, #16
 8009328:	d007      	beq.n	800933a <HAL_RCC_OscConfig+0x46>
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	2b18      	cmp	r3, #24
 800932e:	d110      	bne.n	8009352 <HAL_RCC_OscConfig+0x5e>
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	2b02      	cmp	r3, #2
 8009338:	d10b      	bne.n	8009352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800933a:	4b7f      	ldr	r3, [pc, #508]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d06c      	beq.n	8009420 <HAL_RCC_OscConfig+0x12c>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d168      	bne.n	8009420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e3a2      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800935a:	d106      	bne.n	800936a <HAL_RCC_OscConfig+0x76>
 800935c:	4b76      	ldr	r3, [pc, #472]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a75      	ldr	r2, [pc, #468]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	e02e      	b.n	80093c8 <HAL_RCC_OscConfig+0xd4>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10c      	bne.n	800938c <HAL_RCC_OscConfig+0x98>
 8009372:	4b71      	ldr	r3, [pc, #452]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a70      	ldr	r2, [pc, #448]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	4b6e      	ldr	r3, [pc, #440]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a6d      	ldr	r2, [pc, #436]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	e01d      	b.n	80093c8 <HAL_RCC_OscConfig+0xd4>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009394:	d10c      	bne.n	80093b0 <HAL_RCC_OscConfig+0xbc>
 8009396:	4b68      	ldr	r3, [pc, #416]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a67      	ldr	r2, [pc, #412]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 800939c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	4b65      	ldr	r3, [pc, #404]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a64      	ldr	r2, [pc, #400]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80093a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	e00b      	b.n	80093c8 <HAL_RCC_OscConfig+0xd4>
 80093b0:	4b61      	ldr	r3, [pc, #388]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a60      	ldr	r2, [pc, #384]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80093b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	4b5e      	ldr	r3, [pc, #376]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a5d      	ldr	r2, [pc, #372]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80093c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d013      	beq.n	80093f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d0:	f7fa f874 	bl	80034bc <HAL_GetTick>
 80093d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093d6:	e008      	b.n	80093ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093d8:	f7fa f870 	bl	80034bc <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b64      	cmp	r3, #100	; 0x64
 80093e4:	d901      	bls.n	80093ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e356      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093ea:	4b53      	ldr	r3, [pc, #332]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0f0      	beq.n	80093d8 <HAL_RCC_OscConfig+0xe4>
 80093f6:	e014      	b.n	8009422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f8:	f7fa f860 	bl	80034bc <HAL_GetTick>
 80093fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80093fe:	e008      	b.n	8009412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009400:	f7fa f85c 	bl	80034bc <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b64      	cmp	r3, #100	; 0x64
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e342      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009412:	4b49      	ldr	r3, [pc, #292]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f0      	bne.n	8009400 <HAL_RCC_OscConfig+0x10c>
 800941e:	e000      	b.n	8009422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 808c 	beq.w	8009548 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009430:	4b41      	ldr	r3, [pc, #260]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009438:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800943a:	4b3f      	ldr	r3, [pc, #252]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 800943c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <HAL_RCC_OscConfig+0x162>
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	2b18      	cmp	r3, #24
 800944a:	d137      	bne.n	80094bc <HAL_RCC_OscConfig+0x1c8>
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d132      	bne.n	80094bc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009456:	4b38      	ldr	r3, [pc, #224]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0304 	and.w	r3, r3, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <HAL_RCC_OscConfig+0x17a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e314      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800946e:	4b32      	ldr	r3, [pc, #200]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f023 0219 	bic.w	r2, r3, #25
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	492f      	ldr	r1, [pc, #188]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 800947c:	4313      	orrs	r3, r2
 800947e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009480:	f7fa f81c 	bl	80034bc <HAL_GetTick>
 8009484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009486:	e008      	b.n	800949a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009488:	f7fa f818 	bl	80034bc <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d901      	bls.n	800949a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e2fe      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800949a:	4b27      	ldr	r3, [pc, #156]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f0      	beq.n	8009488 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094a6:	4b24      	ldr	r3, [pc, #144]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	061b      	lsls	r3, r3, #24
 80094b4:	4920      	ldr	r1, [pc, #128]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094ba:	e045      	b.n	8009548 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d026      	beq.n	8009512 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094c4:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f023 0219 	bic.w	r2, r3, #25
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	4919      	ldr	r1, [pc, #100]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d6:	f7f9 fff1 	bl	80034bc <HAL_GetTick>
 80094da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094dc:	e008      	b.n	80094f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094de:	f7f9 ffed 	bl	80034bc <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d901      	bls.n	80094f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e2d3      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094f0:	4b11      	ldr	r3, [pc, #68]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0304 	and.w	r3, r3, #4
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0f0      	beq.n	80094de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094fc:	4b0e      	ldr	r3, [pc, #56]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	061b      	lsls	r3, r3, #24
 800950a:	490b      	ldr	r1, [pc, #44]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 800950c:	4313      	orrs	r3, r2
 800950e:	604b      	str	r3, [r1, #4]
 8009510:	e01a      	b.n	8009548 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a08      	ldr	r2, [pc, #32]	; (8009538 <HAL_RCC_OscConfig+0x244>)
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951e:	f7f9 ffcd 	bl	80034bc <HAL_GetTick>
 8009522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009524:	e00a      	b.n	800953c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009526:	f7f9 ffc9 	bl	80034bc <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	2b02      	cmp	r3, #2
 8009532:	d903      	bls.n	800953c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e2af      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
 8009538:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800953c:	4b96      	ldr	r3, [pc, #600]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1ee      	bne.n	8009526 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b00      	cmp	r3, #0
 8009552:	d06a      	beq.n	800962a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009554:	4b90      	ldr	r3, [pc, #576]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800955c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800955e:	4b8e      	ldr	r3, [pc, #568]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009562:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b08      	cmp	r3, #8
 8009568:	d007      	beq.n	800957a <HAL_RCC_OscConfig+0x286>
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b18      	cmp	r3, #24
 800956e:	d11b      	bne.n	80095a8 <HAL_RCC_OscConfig+0x2b4>
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f003 0303 	and.w	r3, r3, #3
 8009576:	2b01      	cmp	r3, #1
 8009578:	d116      	bne.n	80095a8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800957a:	4b87      	ldr	r3, [pc, #540]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009582:	2b00      	cmp	r3, #0
 8009584:	d005      	beq.n	8009592 <HAL_RCC_OscConfig+0x29e>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	2b80      	cmp	r3, #128	; 0x80
 800958c:	d001      	beq.n	8009592 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e282      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009592:	4b81      	ldr	r3, [pc, #516]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	061b      	lsls	r3, r3, #24
 80095a0:	497d      	ldr	r1, [pc, #500]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095a6:	e040      	b.n	800962a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d023      	beq.n	80095f8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80095b0:	4b79      	ldr	r3, [pc, #484]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a78      	ldr	r2, [pc, #480]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095bc:	f7f9 ff7e 	bl	80034bc <HAL_GetTick>
 80095c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095c2:	e008      	b.n	80095d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095c4:	f7f9 ff7a 	bl	80034bc <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d901      	bls.n	80095d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e260      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095d6:	4b70      	ldr	r3, [pc, #448]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0f0      	beq.n	80095c4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095e2:	4b6d      	ldr	r3, [pc, #436]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	4969      	ldr	r1, [pc, #420]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60cb      	str	r3, [r1, #12]
 80095f6:	e018      	b.n	800962a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80095f8:	4b67      	ldr	r3, [pc, #412]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a66      	ldr	r2, [pc, #408]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80095fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009604:	f7f9 ff5a 	bl	80034bc <HAL_GetTick>
 8009608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800960a:	e008      	b.n	800961e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800960c:	f7f9 ff56 	bl	80034bc <HAL_GetTick>
 8009610:	4602      	mov	r2, r0
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	2b02      	cmp	r3, #2
 8009618:	d901      	bls.n	800961e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e23c      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800961e:	4b5e      	ldr	r3, [pc, #376]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1f0      	bne.n	800960c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0308 	and.w	r3, r3, #8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d036      	beq.n	80096a4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d019      	beq.n	8009672 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800963e:	4b56      	ldr	r3, [pc, #344]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009642:	4a55      	ldr	r2, [pc, #340]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800964a:	f7f9 ff37 	bl	80034bc <HAL_GetTick>
 800964e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009650:	e008      	b.n	8009664 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009652:	f7f9 ff33 	bl	80034bc <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b02      	cmp	r3, #2
 800965e:	d901      	bls.n	8009664 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e219      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009664:	4b4c      	ldr	r3, [pc, #304]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009668:	f003 0302 	and.w	r3, r3, #2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0f0      	beq.n	8009652 <HAL_RCC_OscConfig+0x35e>
 8009670:	e018      	b.n	80096a4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009672:	4b49      	ldr	r3, [pc, #292]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009676:	4a48      	ldr	r2, [pc, #288]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009678:	f023 0301 	bic.w	r3, r3, #1
 800967c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800967e:	f7f9 ff1d 	bl	80034bc <HAL_GetTick>
 8009682:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009684:	e008      	b.n	8009698 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009686:	f7f9 ff19 	bl	80034bc <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d901      	bls.n	8009698 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e1ff      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009698:	4b3f      	ldr	r3, [pc, #252]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 800969a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800969c:	f003 0302 	and.w	r3, r3, #2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f0      	bne.n	8009686 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d036      	beq.n	800971e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d019      	beq.n	80096ec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80096b8:	4b37      	ldr	r3, [pc, #220]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a36      	ldr	r2, [pc, #216]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80096be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096c4:	f7f9 fefa 	bl	80034bc <HAL_GetTick>
 80096c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096ca:	e008      	b.n	80096de <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096cc:	f7f9 fef6 	bl	80034bc <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d901      	bls.n	80096de <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e1dc      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096de:	4b2e      	ldr	r3, [pc, #184]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0f0      	beq.n	80096cc <HAL_RCC_OscConfig+0x3d8>
 80096ea:	e018      	b.n	800971e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096ec:	4b2a      	ldr	r3, [pc, #168]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a29      	ldr	r2, [pc, #164]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 80096f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096f8:	f7f9 fee0 	bl	80034bc <HAL_GetTick>
 80096fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80096fe:	e008      	b.n	8009712 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009700:	f7f9 fedc 	bl	80034bc <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	2b02      	cmp	r3, #2
 800970c:	d901      	bls.n	8009712 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e1c2      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009712:	4b21      	ldr	r3, [pc, #132]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1f0      	bne.n	8009700 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0304 	and.w	r3, r3, #4
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 8086 	beq.w	8009838 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800972c:	4b1b      	ldr	r3, [pc, #108]	; (800979c <HAL_RCC_OscConfig+0x4a8>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a1a      	ldr	r2, [pc, #104]	; (800979c <HAL_RCC_OscConfig+0x4a8>)
 8009732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009738:	f7f9 fec0 	bl	80034bc <HAL_GetTick>
 800973c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800973e:	e008      	b.n	8009752 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009740:	f7f9 febc 	bl	80034bc <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	2b64      	cmp	r3, #100	; 0x64
 800974c:	d901      	bls.n	8009752 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e1a2      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009752:	4b12      	ldr	r3, [pc, #72]	; (800979c <HAL_RCC_OscConfig+0x4a8>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0f0      	beq.n	8009740 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d106      	bne.n	8009774 <HAL_RCC_OscConfig+0x480>
 8009766:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976a:	4a0b      	ldr	r2, [pc, #44]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 800976c:	f043 0301 	orr.w	r3, r3, #1
 8009770:	6713      	str	r3, [r2, #112]	; 0x70
 8009772:	e032      	b.n	80097da <HAL_RCC_OscConfig+0x4e6>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d111      	bne.n	80097a0 <HAL_RCC_OscConfig+0x4ac>
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 800977e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009780:	4a05      	ldr	r2, [pc, #20]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	6713      	str	r3, [r2, #112]	; 0x70
 8009788:	4b03      	ldr	r3, [pc, #12]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 800978a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978c:	4a02      	ldr	r2, [pc, #8]	; (8009798 <HAL_RCC_OscConfig+0x4a4>)
 800978e:	f023 0304 	bic.w	r3, r3, #4
 8009792:	6713      	str	r3, [r2, #112]	; 0x70
 8009794:	e021      	b.n	80097da <HAL_RCC_OscConfig+0x4e6>
 8009796:	bf00      	nop
 8009798:	58024400 	.word	0x58024400
 800979c:	58024800 	.word	0x58024800
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	2b05      	cmp	r3, #5
 80097a6:	d10c      	bne.n	80097c2 <HAL_RCC_OscConfig+0x4ce>
 80097a8:	4b83      	ldr	r3, [pc, #524]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ac:	4a82      	ldr	r2, [pc, #520]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097ae:	f043 0304 	orr.w	r3, r3, #4
 80097b2:	6713      	str	r3, [r2, #112]	; 0x70
 80097b4:	4b80      	ldr	r3, [pc, #512]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b8:	4a7f      	ldr	r2, [pc, #508]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	6713      	str	r3, [r2, #112]	; 0x70
 80097c0:	e00b      	b.n	80097da <HAL_RCC_OscConfig+0x4e6>
 80097c2:	4b7d      	ldr	r3, [pc, #500]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c6:	4a7c      	ldr	r2, [pc, #496]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	6713      	str	r3, [r2, #112]	; 0x70
 80097ce:	4b7a      	ldr	r3, [pc, #488]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d2:	4a79      	ldr	r2, [pc, #484]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80097d4:	f023 0304 	bic.w	r3, r3, #4
 80097d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d015      	beq.n	800980e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097e2:	f7f9 fe6b 	bl	80034bc <HAL_GetTick>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097e8:	e00a      	b.n	8009800 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ea:	f7f9 fe67 	bl	80034bc <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d901      	bls.n	8009800 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e14b      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009800:	4b6d      	ldr	r3, [pc, #436]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0ee      	beq.n	80097ea <HAL_RCC_OscConfig+0x4f6>
 800980c:	e014      	b.n	8009838 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980e:	f7f9 fe55 	bl	80034bc <HAL_GetTick>
 8009812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009814:	e00a      	b.n	800982c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009816:	f7f9 fe51 	bl	80034bc <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f241 3288 	movw	r2, #5000	; 0x1388
 8009824:	4293      	cmp	r3, r2
 8009826:	d901      	bls.n	800982c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e135      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800982c:	4b62      	ldr	r3, [pc, #392]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800982e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009830:	f003 0302 	and.w	r3, r3, #2
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1ee      	bne.n	8009816 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 812a 	beq.w	8009a96 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009842:	4b5d      	ldr	r3, [pc, #372]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800984a:	2b18      	cmp	r3, #24
 800984c:	f000 80ba 	beq.w	80099c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	2b02      	cmp	r3, #2
 8009856:	f040 8095 	bne.w	8009984 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800985a:	4b57      	ldr	r3, [pc, #348]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a56      	ldr	r2, [pc, #344]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009866:	f7f9 fe29 	bl	80034bc <HAL_GetTick>
 800986a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800986c:	e008      	b.n	8009880 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800986e:	f7f9 fe25 	bl	80034bc <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d901      	bls.n	8009880 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e10b      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009880:	4b4d      	ldr	r3, [pc, #308]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1f0      	bne.n	800986e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800988c:	4b4a      	ldr	r3, [pc, #296]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800988e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009890:	4b4a      	ldr	r3, [pc, #296]	; (80099bc <HAL_RCC_OscConfig+0x6c8>)
 8009892:	4013      	ands	r3, r2
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800989c:	0112      	lsls	r2, r2, #4
 800989e:	430a      	orrs	r2, r1
 80098a0:	4945      	ldr	r1, [pc, #276]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	628b      	str	r3, [r1, #40]	; 0x28
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	3b01      	subs	r3, #1
 80098ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b4:	3b01      	subs	r3, #1
 80098b6:	025b      	lsls	r3, r3, #9
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	431a      	orrs	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	3b01      	subs	r3, #1
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ce:	3b01      	subs	r3, #1
 80098d0:	061b      	lsls	r3, r3, #24
 80098d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098d6:	4938      	ldr	r1, [pc, #224]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80098dc:	4b36      	ldr	r3, [pc, #216]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4a35      	ldr	r2, [pc, #212]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80098e8:	4b33      	ldr	r3, [pc, #204]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80098ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ec:	4b34      	ldr	r3, [pc, #208]	; (80099c0 <HAL_RCC_OscConfig+0x6cc>)
 80098ee:	4013      	ands	r3, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80098f4:	00d2      	lsls	r2, r2, #3
 80098f6:	4930      	ldr	r1, [pc, #192]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80098fc:	4b2e      	ldr	r3, [pc, #184]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	f023 020c 	bic.w	r2, r3, #12
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	492b      	ldr	r1, [pc, #172]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800990a:	4313      	orrs	r3, r2
 800990c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800990e:	4b2a      	ldr	r3, [pc, #168]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	f023 0202 	bic.w	r2, r3, #2
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991a:	4927      	ldr	r1, [pc, #156]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800991c:	4313      	orrs	r3, r2
 800991e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009920:	4b25      	ldr	r3, [pc, #148]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	4a24      	ldr	r2, [pc, #144]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800992a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992c:	4b22      	ldr	r3, [pc, #136]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	4a21      	ldr	r2, [pc, #132]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009938:	4b1f      	ldr	r3, [pc, #124]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	4a1e      	ldr	r2, [pc, #120]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800993e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009944:	4b1c      	ldr	r3, [pc, #112]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	4a1b      	ldr	r2, [pc, #108]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009950:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a18      	ldr	r2, [pc, #96]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800995a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7f9 fdae 	bl	80034bc <HAL_GetTick>
 8009960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009964:	f7f9 fdaa 	bl	80034bc <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e090      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009976:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0x670>
 8009982:	e088      	b.n	8009a96 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009984:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a0b      	ldr	r2, [pc, #44]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 800998a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800998e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009990:	f7f9 fd94 	bl	80034bc <HAL_GetTick>
 8009994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009996:	e008      	b.n	80099aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009998:	f7f9 fd90 	bl	80034bc <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e076      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <HAL_RCC_OscConfig+0x6c4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1f0      	bne.n	8009998 <HAL_RCC_OscConfig+0x6a4>
 80099b6:	e06e      	b.n	8009a96 <HAL_RCC_OscConfig+0x7a2>
 80099b8:	58024400 	.word	0x58024400
 80099bc:	fffffc0c 	.word	0xfffffc0c
 80099c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80099c4:	4b36      	ldr	r3, [pc, #216]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80099ca:	4b35      	ldr	r3, [pc, #212]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 80099cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d031      	beq.n	8009a3c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f003 0203 	and.w	r2, r3, #3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d12a      	bne.n	8009a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	091b      	lsrs	r3, r3, #4
 80099ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d122      	bne.n	8009a3c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d11a      	bne.n	8009a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	0a5b      	lsrs	r3, r3, #9
 8009a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d111      	bne.n	8009a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	0c1b      	lsrs	r3, r3, #16
 8009a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d108      	bne.n	8009a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	0e1b      	lsrs	r3, r3, #24
 8009a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d001      	beq.n	8009a40 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e02b      	b.n	8009a98 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a40:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 8009a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a44:	08db      	lsrs	r3, r3, #3
 8009a46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d01f      	beq.n	8009a96 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009a56:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 8009a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5a:	4a11      	ldr	r2, [pc, #68]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 8009a5c:	f023 0301 	bic.w	r3, r3, #1
 8009a60:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a62:	f7f9 fd2b 	bl	80034bc <HAL_GetTick>
 8009a66:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009a68:	bf00      	nop
 8009a6a:	f7f9 fd27 	bl	80034bc <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d0f9      	beq.n	8009a6a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a76:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 8009a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <HAL_RCC_OscConfig+0x7b0>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a82:	00d2      	lsls	r2, r2, #3
 8009a84:	4906      	ldr	r1, [pc, #24]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009a8a:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	4a04      	ldr	r2, [pc, #16]	; (8009aa0 <HAL_RCC_OscConfig+0x7ac>)
 8009a90:	f043 0301 	orr.w	r3, r3, #1
 8009a94:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3730      	adds	r7, #48	; 0x30
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	ffff0007 	.word	0xffff0007

08009aa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e19c      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009abc:	4b8a      	ldr	r3, [pc, #552]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 030f 	and.w	r3, r3, #15
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d910      	bls.n	8009aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aca:	4b87      	ldr	r3, [pc, #540]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f023 020f 	bic.w	r2, r3, #15
 8009ad2:	4985      	ldr	r1, [pc, #532]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ada:	4b83      	ldr	r3, [pc, #524]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d001      	beq.n	8009aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e184      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d010      	beq.n	8009b1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	4b7b      	ldr	r3, [pc, #492]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d908      	bls.n	8009b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b08:	4b78      	ldr	r3, [pc, #480]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	4975      	ldr	r1, [pc, #468]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d010      	beq.n	8009b48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695a      	ldr	r2, [r3, #20]
 8009b2a:	4b70      	ldr	r3, [pc, #448]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d908      	bls.n	8009b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b36:	4b6d      	ldr	r3, [pc, #436]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	496a      	ldr	r1, [pc, #424]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0310 	and.w	r3, r3, #16
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d010      	beq.n	8009b76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	4b64      	ldr	r3, [pc, #400]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d908      	bls.n	8009b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b64:	4b61      	ldr	r3, [pc, #388]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	495e      	ldr	r1, [pc, #376]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d010      	beq.n	8009ba4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69da      	ldr	r2, [r3, #28]
 8009b86:	4b59      	ldr	r3, [pc, #356]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d908      	bls.n	8009ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009b92:	4b56      	ldr	r3, [pc, #344]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	4953      	ldr	r1, [pc, #332]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d010      	beq.n	8009bd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	4b4d      	ldr	r3, [pc, #308]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	f003 030f 	and.w	r3, r3, #15
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d908      	bls.n	8009bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bc0:	4b4a      	ldr	r3, [pc, #296]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f023 020f 	bic.w	r2, r3, #15
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4947      	ldr	r1, [pc, #284]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d055      	beq.n	8009c8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009bde:	4b43      	ldr	r3, [pc, #268]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	4940      	ldr	r1, [pc, #256]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d107      	bne.n	8009c08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bf8:	4b3c      	ldr	r3, [pc, #240]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d121      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e0f6      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d107      	bne.n	8009c20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c10:	4b36      	ldr	r3, [pc, #216]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d115      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e0ea      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d107      	bne.n	8009c38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c28:	4b30      	ldr	r3, [pc, #192]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d109      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e0de      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c38:	4b2c      	ldr	r3, [pc, #176]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e0d6      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c48:	4b28      	ldr	r3, [pc, #160]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f023 0207 	bic.w	r2, r3, #7
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	4925      	ldr	r1, [pc, #148]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c5a:	f7f9 fc2f 	bl	80034bc <HAL_GetTick>
 8009c5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c60:	e00a      	b.n	8009c78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c62:	f7f9 fc2b 	bl	80034bc <HAL_GetTick>
 8009c66:	4602      	mov	r2, r0
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d901      	bls.n	8009c78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e0be      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c78:	4b1c      	ldr	r3, [pc, #112]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d1eb      	bne.n	8009c62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d010      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	4b14      	ldr	r3, [pc, #80]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f003 030f 	and.w	r3, r3, #15
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d208      	bcs.n	8009cb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ca6:	4b11      	ldr	r3, [pc, #68]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	f023 020f 	bic.w	r2, r3, #15
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	490e      	ldr	r1, [pc, #56]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d214      	bcs.n	8009cf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc6:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f023 020f 	bic.w	r2, r3, #15
 8009cce:	4906      	ldr	r1, [pc, #24]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd6:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 030f 	and.w	r3, r3, #15
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d005      	beq.n	8009cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e086      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
 8009ce8:	52002000 	.word	0x52002000
 8009cec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d010      	beq.n	8009d1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	4b3f      	ldr	r3, [pc, #252]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d208      	bcs.n	8009d1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d0c:	4b3c      	ldr	r3, [pc, #240]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	4939      	ldr	r1, [pc, #228]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d010      	beq.n	8009d4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	4b34      	ldr	r3, [pc, #208]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d208      	bcs.n	8009d4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d3a:	4b31      	ldr	r3, [pc, #196]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	492e      	ldr	r1, [pc, #184]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0310 	and.w	r3, r3, #16
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d010      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	699a      	ldr	r2, [r3, #24]
 8009d5c:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d208      	bcs.n	8009d7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d68:	4b25      	ldr	r3, [pc, #148]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	4922      	ldr	r1, [pc, #136]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d010      	beq.n	8009da8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69da      	ldr	r2, [r3, #28]
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d208      	bcs.n	8009da8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d96:	4b1a      	ldr	r3, [pc, #104]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	4917      	ldr	r1, [pc, #92]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009da8:	f000 f89e 	bl	8009ee8 <HAL_RCC_GetSysClockFreq>
 8009dac:	4602      	mov	r2, r0
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	4912      	ldr	r1, [pc, #72]	; (8009e04 <HAL_RCC_ClockConfig+0x35c>)
 8009dba:	5ccb      	ldrb	r3, [r1, r3]
 8009dbc:	f003 031f 	and.w	r3, r3, #31
 8009dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dc6:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	4a0d      	ldr	r2, [pc, #52]	; (8009e04 <HAL_RCC_ClockConfig+0x35c>)
 8009dd0:	5cd3      	ldrb	r3, [r2, r3]
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ddc:	4a0a      	ldr	r2, [pc, #40]	; (8009e08 <HAL_RCC_ClockConfig+0x360>)
 8009dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009de0:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <HAL_RCC_ClockConfig+0x364>)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009de6:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <HAL_RCC_ClockConfig+0x368>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f9 fb1c 	bl	8003428 <HAL_InitTick>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	58024400 	.word	0x58024400
 8009e04:	080175a4 	.word	0x080175a4
 8009e08:	24000004 	.word	0x24000004
 8009e0c:	24000000 	.word	0x24000000
 8009e10:	24000008 	.word	0x24000008

08009e14 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08c      	sub	sp, #48	; 0x30
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d12a      	bne.n	8009e7c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009e26:	4b2d      	ldr	r3, [pc, #180]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e2c:	4a2b      	ldr	r2, [pc, #172]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e2e:	f043 0301 	orr.w	r3, r3, #1
 8009e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e36:	4b29      	ldr	r3, [pc, #164]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009e56:	2300      	movs	r3, #0
 8009e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009e5a:	f107 031c 	add.w	r3, r7, #28
 8009e5e:	4619      	mov	r1, r3
 8009e60:	481f      	ldr	r0, [pc, #124]	; (8009ee0 <HAL_RCC_MCOConfig+0xcc>)
 8009e62:	f7fd fc29 	bl	80076b8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009e66:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	430b      	orrs	r3, r1
 8009e74:	4919      	ldr	r1, [pc, #100]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009e7a:	e02a      	b.n	8009ed2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009e7c:	4b17      	ldr	r3, [pc, #92]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e82:	4a16      	ldr	r2, [pc, #88]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e84:	f043 0304 	orr.w	r3, r3, #4
 8009e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e8c:	4b13      	ldr	r3, [pc, #76]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e92:	f003 0304 	and.w	r3, r3, #4
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009eac:	2300      	movs	r3, #0
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009eb0:	f107 031c 	add.w	r3, r7, #28
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	480b      	ldr	r0, [pc, #44]	; (8009ee4 <HAL_RCC_MCOConfig+0xd0>)
 8009eb8:	f7fd fbfe 	bl	80076b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009ebc:	4b07      	ldr	r3, [pc, #28]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	01d9      	lsls	r1, r3, #7
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	4903      	ldr	r1, [pc, #12]	; (8009edc <HAL_RCC_MCOConfig+0xc8>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	610b      	str	r3, [r1, #16]
}
 8009ed2:	bf00      	nop
 8009ed4:	3730      	adds	r7, #48	; 0x30
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	58024400 	.word	0x58024400
 8009ee0:	58020000 	.word	0x58020000
 8009ee4:	58020800 	.word	0x58020800

08009ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b089      	sub	sp, #36	; 0x24
 8009eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009eee:	4bb3      	ldr	r3, [pc, #716]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ef6:	2b18      	cmp	r3, #24
 8009ef8:	f200 8155 	bhi.w	800a1a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009efc:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f69 	.word	0x08009f69
 8009f08:	0800a1a7 	.word	0x0800a1a7
 8009f0c:	0800a1a7 	.word	0x0800a1a7
 8009f10:	0800a1a7 	.word	0x0800a1a7
 8009f14:	0800a1a7 	.word	0x0800a1a7
 8009f18:	0800a1a7 	.word	0x0800a1a7
 8009f1c:	0800a1a7 	.word	0x0800a1a7
 8009f20:	0800a1a7 	.word	0x0800a1a7
 8009f24:	08009f8f 	.word	0x08009f8f
 8009f28:	0800a1a7 	.word	0x0800a1a7
 8009f2c:	0800a1a7 	.word	0x0800a1a7
 8009f30:	0800a1a7 	.word	0x0800a1a7
 8009f34:	0800a1a7 	.word	0x0800a1a7
 8009f38:	0800a1a7 	.word	0x0800a1a7
 8009f3c:	0800a1a7 	.word	0x0800a1a7
 8009f40:	0800a1a7 	.word	0x0800a1a7
 8009f44:	08009f95 	.word	0x08009f95
 8009f48:	0800a1a7 	.word	0x0800a1a7
 8009f4c:	0800a1a7 	.word	0x0800a1a7
 8009f50:	0800a1a7 	.word	0x0800a1a7
 8009f54:	0800a1a7 	.word	0x0800a1a7
 8009f58:	0800a1a7 	.word	0x0800a1a7
 8009f5c:	0800a1a7 	.word	0x0800a1a7
 8009f60:	0800a1a7 	.word	0x0800a1a7
 8009f64:	08009f9b 	.word	0x08009f9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f68:	4b94      	ldr	r3, [pc, #592]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0320 	and.w	r3, r3, #32
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d009      	beq.n	8009f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f74:	4b91      	ldr	r3, [pc, #580]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	08db      	lsrs	r3, r3, #3
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	4a90      	ldr	r2, [pc, #576]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f80:	fa22 f303 	lsr.w	r3, r2, r3
 8009f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009f86:	e111      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f88:	4b8d      	ldr	r3, [pc, #564]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f8a:	61bb      	str	r3, [r7, #24]
      break;
 8009f8c:	e10e      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009f8e:	4b8d      	ldr	r3, [pc, #564]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f90:	61bb      	str	r3, [r7, #24]
      break;
 8009f92:	e10b      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009f94:	4b8c      	ldr	r3, [pc, #560]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009f96:	61bb      	str	r3, [r7, #24]
      break;
 8009f98:	e108      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f9a:	4b88      	ldr	r3, [pc, #544]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009fa4:	4b85      	ldr	r3, [pc, #532]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	091b      	lsrs	r3, r3, #4
 8009faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009fb0:	4b82      	ldr	r3, [pc, #520]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009fba:	4b80      	ldr	r3, [pc, #512]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbe:	08db      	lsrs	r3, r3, #3
 8009fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80e1 	beq.w	800a1a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	f000 8083 	beq.w	800a0ec <HAL_RCC_GetSysClockFreq+0x204>
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	f200 80a1 	bhi.w	800a130 <HAL_RCC_GetSysClockFreq+0x248>
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_RCC_GetSysClockFreq+0x114>
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d056      	beq.n	800a0a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ffa:	e099      	b.n	800a130 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ffc:	4b6f      	ldr	r3, [pc, #444]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d02d      	beq.n	800a064 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a008:	4b6c      	ldr	r3, [pc, #432]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	08db      	lsrs	r3, r3, #3
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	4a6b      	ldr	r2, [pc, #428]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
 800a018:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a032:	4b62      	ldr	r3, [pc, #392]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a042:	ed97 6a02 	vldr	s12, [r7, #8]
 800a046:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a05e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a062:	e087      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a1d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a076:	4b51      	ldr	r3, [pc, #324]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a086:	ed97 6a02 	vldr	s12, [r7, #8]
 800a08a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0a6:	e065      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a1d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ba:	4b40      	ldr	r3, [pc, #256]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0ea:	e043      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a1d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fe:	4b2f      	ldr	r3, [pc, #188]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a112:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a12e:	e021      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a1d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	4b1e      	ldr	r3, [pc, #120]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	ed97 6a02 	vldr	s12, [r7, #8]
 800a156:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a172:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a174:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	0a5b      	lsrs	r3, r3, #9
 800a17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a17e:	3301      	adds	r3, #1
 800a180:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a198:	ee17 3a90 	vmov	r3, s15
 800a19c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a19e:	e005      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61bb      	str	r3, [r7, #24]
      break;
 800a1a4:	e002      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a1a6:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a1a8:	61bb      	str	r3, [r7, #24]
      break;
 800a1aa:	bf00      	nop
  }

  return sysclockfreq;
 800a1ac:	69bb      	ldr	r3, [r7, #24]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3724      	adds	r7, #36	; 0x24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	58024400 	.word	0x58024400
 800a1c0:	03d09000 	.word	0x03d09000
 800a1c4:	003d0900 	.word	0x003d0900
 800a1c8:	02faf080 	.word	0x02faf080
 800a1cc:	46000000 	.word	0x46000000
 800a1d0:	4c742400 	.word	0x4c742400
 800a1d4:	4a742400 	.word	0x4a742400
 800a1d8:	4c3ebc20 	.word	0x4c3ebc20

0800a1dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a1e2:	f7ff fe81 	bl	8009ee8 <HAL_RCC_GetSysClockFreq>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4b10      	ldr	r3, [pc, #64]	; (800a22c <HAL_RCC_GetHCLKFreq+0x50>)
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	0a1b      	lsrs	r3, r3, #8
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	490f      	ldr	r1, [pc, #60]	; (800a230 <HAL_RCC_GetHCLKFreq+0x54>)
 800a1f4:	5ccb      	ldrb	r3, [r1, r3]
 800a1f6:	f003 031f 	and.w	r3, r3, #31
 800a1fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a1fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <HAL_RCC_GetHCLKFreq+0x50>)
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	4a09      	ldr	r2, [pc, #36]	; (800a230 <HAL_RCC_GetHCLKFreq+0x54>)
 800a20a:	5cd3      	ldrb	r3, [r2, r3]
 800a20c:	f003 031f 	and.w	r3, r3, #31
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	fa22 f303 	lsr.w	r3, r2, r3
 800a216:	4a07      	ldr	r2, [pc, #28]	; (800a234 <HAL_RCC_GetHCLKFreq+0x58>)
 800a218:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a21a:	4a07      	ldr	r2, [pc, #28]	; (800a238 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a220:	4b04      	ldr	r3, [pc, #16]	; (800a234 <HAL_RCC_GetHCLKFreq+0x58>)
 800a222:	681b      	ldr	r3, [r3, #0]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	58024400 	.word	0x58024400
 800a230:	080175a4 	.word	0x080175a4
 800a234:	24000004 	.word	0x24000004
 800a238:	24000000 	.word	0x24000000

0800a23c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a240:	f7ff ffcc 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800a244:	4602      	mov	r2, r0
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	091b      	lsrs	r3, r3, #4
 800a24c:	f003 0307 	and.w	r3, r3, #7
 800a250:	4904      	ldr	r1, [pc, #16]	; (800a264 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a252:	5ccb      	ldrb	r3, [r1, r3]
 800a254:	f003 031f 	and.w	r3, r3, #31
 800a258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	58024400 	.word	0x58024400
 800a264:	080175a4 	.word	0x080175a4

0800a268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a26c:	f7ff ffb6 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800a270:	4602      	mov	r2, r0
 800a272:	4b06      	ldr	r3, [pc, #24]	; (800a28c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	4904      	ldr	r1, [pc, #16]	; (800a290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a27e:	5ccb      	ldrb	r3, [r1, r3]
 800a280:	f003 031f 	and.w	r3, r3, #31
 800a284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a288:	4618      	mov	r0, r3
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	58024400 	.word	0x58024400
 800a290:	080175a4 	.word	0x080175a4

0800a294 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a298:	b0c6      	sub	sp, #280	; 0x118
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a2b8:	2500      	movs	r5, #0
 800a2ba:	ea54 0305 	orrs.w	r3, r4, r5
 800a2be:	d049      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2ca:	d02f      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a2cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2d0:	d828      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2d6:	d01a      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a2d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2dc:	d822      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a2e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2e6:	d007      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a2e8:	e01c      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ea:	4bab      	ldr	r3, [pc, #684]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	4aaa      	ldr	r2, [pc, #680]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2f6:	e01a      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	2102      	movs	r1, #2
 800a300:	4618      	mov	r0, r3
 800a302:	f002 fa49 	bl	800c798 <RCCEx_PLL2_Config>
 800a306:	4603      	mov	r3, r0
 800a308:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a30c:	e00f      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a312:	3328      	adds	r3, #40	; 0x28
 800a314:	2102      	movs	r1, #2
 800a316:	4618      	mov	r0, r3
 800a318:	f002 faf0 	bl	800c8fc <RCCEx_PLL3_Config>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a322:	e004      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a32a:	e000      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a336:	4b98      	ldr	r3, [pc, #608]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a344:	4a94      	ldr	r2, [pc, #592]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a346:	430b      	orrs	r3, r1
 800a348:	6513      	str	r3, [r2, #80]	; 0x50
 800a34a:	e003      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a350:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a360:	f04f 0900 	mov.w	r9, #0
 800a364:	ea58 0309 	orrs.w	r3, r8, r9
 800a368:	d047      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a370:	2b04      	cmp	r3, #4
 800a372:	d82a      	bhi.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a374:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a391 	.word	0x0800a391
 800a380:	0800a39f 	.word	0x0800a39f
 800a384:	0800a3b5 	.word	0x0800a3b5
 800a388:	0800a3d3 	.word	0x0800a3d3
 800a38c:	0800a3d3 	.word	0x0800a3d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a390:	4b81      	ldr	r3, [pc, #516]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	4a80      	ldr	r2, [pc, #512]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a39a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a39c:	e01a      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f002 f9f6 	bl	800c798 <RCCEx_PLL2_Config>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3b2:	e00f      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b8:	3328      	adds	r3, #40	; 0x28
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f002 fa9d 	bl	800c8fc <RCCEx_PLL3_Config>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3c8:	e004      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3d0:	e000      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a3d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3dc:	4b6e      	ldr	r3, [pc, #440]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e0:	f023 0107 	bic.w	r1, r3, #7
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ea:	4a6b      	ldr	r2, [pc, #428]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	6513      	str	r3, [r2, #80]	; 0x50
 800a3f0:	e003      	b.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a406:	f04f 0b00 	mov.w	fp, #0
 800a40a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a40e:	d05b      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a414:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a418:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a41c:	d03b      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a41e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a422:	d834      	bhi.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a424:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a428:	d037      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a42a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a42e:	d82e      	bhi.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a430:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a434:	d033      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a436:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a43a:	d828      	bhi.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a43c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a440:	d01a      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a446:	d822      	bhi.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a44c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a450:	d007      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a452:	e01c      	b.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a454:	4b50      	ldr	r3, [pc, #320]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	4a4f      	ldr	r2, [pc, #316]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a45a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a45e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a460:	e01e      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a466:	3308      	adds	r3, #8
 800a468:	2100      	movs	r1, #0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f002 f994 	bl	800c798 <RCCEx_PLL2_Config>
 800a470:	4603      	mov	r3, r0
 800a472:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a476:	e013      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47c:	3328      	adds	r3, #40	; 0x28
 800a47e:	2100      	movs	r1, #0
 800a480:	4618      	mov	r0, r3
 800a482:	f002 fa3b 	bl	800c8fc <RCCEx_PLL3_Config>
 800a486:	4603      	mov	r3, r0
 800a488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a48c:	e008      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a494:	e004      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a496:	bf00      	nop
 800a498:	e002      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a49a:	bf00      	nop
 800a49c:	e000      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a49e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10b      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a4a8:	4b3b      	ldr	r3, [pc, #236]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ac:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4b8:	4a37      	ldr	r2, [pc, #220]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	6593      	str	r3, [r2, #88]	; 0x58
 800a4be:	e003      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a4d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	d05d      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a4f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a4f4:	d03b      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a4f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a4fa:	d834      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a4fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a500:	d037      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a502:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a506:	d82e      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a508:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a50c:	d033      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a50e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a512:	d828      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a518:	d01a      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a51a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a51e:	d822      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a528:	d007      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a52a:	e01c      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a52c:	4b1a      	ldr	r3, [pc, #104]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	4a19      	ldr	r2, [pc, #100]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a538:	e01e      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a53e:	3308      	adds	r3, #8
 800a540:	2100      	movs	r1, #0
 800a542:	4618      	mov	r0, r3
 800a544:	f002 f928 	bl	800c798 <RCCEx_PLL2_Config>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a54e:	e013      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a554:	3328      	adds	r3, #40	; 0x28
 800a556:	2100      	movs	r1, #0
 800a558:	4618      	mov	r0, r3
 800a55a:	f002 f9cf 	bl	800c8fc <RCCEx_PLL3_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a564:	e008      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a56c:	e004      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a56e:	bf00      	nop
 800a570:	e002      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a572:	bf00      	nop
 800a574:	e000      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a578:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a580:	4b05      	ldr	r3, [pc, #20]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a584:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a590:	4a01      	ldr	r2, [pc, #4]	; (800a598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a592:	430b      	orrs	r3, r1
 800a594:	6593      	str	r3, [r2, #88]	; 0x58
 800a596:	e005      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a5b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a5ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	d03a      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ca:	2b30      	cmp	r3, #48	; 0x30
 800a5cc:	d01f      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a5ce:	2b30      	cmp	r3, #48	; 0x30
 800a5d0:	d819      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d00c      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a5d6:	2b20      	cmp	r3, #32
 800a5d8:	d815      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d019      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a5de:	2b10      	cmp	r3, #16
 800a5e0:	d111      	bne.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5e2:	4baa      	ldr	r3, [pc, #680]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	4aa9      	ldr	r2, [pc, #676]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a5ee:	e011      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	2102      	movs	r1, #2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f002 f8cd 	bl	800c798 <RCCEx_PLL2_Config>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a604:	e006      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a612:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a614:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a61c:	4b9b      	ldr	r3, [pc, #620]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a620:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62a:	4a98      	ldr	r2, [pc, #608]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a62c:	430b      	orrs	r3, r1
 800a62e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a630:	e003      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a636:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a646:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a64a:	2300      	movs	r3, #0
 800a64c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a650:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a654:	460b      	mov	r3, r1
 800a656:	4313      	orrs	r3, r2
 800a658:	d051      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a664:	d035      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a66a:	d82e      	bhi.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a66c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a670:	d031      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a676:	d828      	bhi.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a67c:	d01a      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a67e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a682:	d822      	bhi.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a68c:	d007      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a68e:	e01c      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a690:	4b7e      	ldr	r3, [pc, #504]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	4a7d      	ldr	r2, [pc, #500]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a69a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a69c:	e01c      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f002 f876 	bl	800c798 <RCCEx_PLL2_Config>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6b2:	e011      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b8:	3328      	adds	r3, #40	; 0x28
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f002 f91d 	bl	800c8fc <RCCEx_PLL3_Config>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6c8:	e006      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6d0:	e002      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a6d2:	bf00      	nop
 800a6d4:	e000      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a6d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a6e0:	4b6a      	ldr	r3, [pc, #424]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ee:	4a67      	ldr	r2, [pc, #412]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	6513      	str	r3, [r2, #80]	; 0x50
 800a6f4:	e003      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a70a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a70e:	2300      	movs	r3, #0
 800a710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a714:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a718:	460b      	mov	r3, r1
 800a71a:	4313      	orrs	r3, r2
 800a71c:	d053      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a728:	d033      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a72a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a72e:	d82c      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a730:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a734:	d02f      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a736:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a73a:	d826      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a73c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a740:	d02b      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a742:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a746:	d820      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a74c:	d012      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a752:	d81a      	bhi.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a754:	2b00      	cmp	r3, #0
 800a756:	d022      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75c:	d115      	bne.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a762:	3308      	adds	r3, #8
 800a764:	2101      	movs	r1, #1
 800a766:	4618      	mov	r0, r3
 800a768:	f002 f816 	bl	800c798 <RCCEx_PLL2_Config>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a772:	e015      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a778:	3328      	adds	r3, #40	; 0x28
 800a77a:	2101      	movs	r1, #1
 800a77c:	4618      	mov	r0, r3
 800a77e:	f002 f8bd 	bl	800c8fc <RCCEx_PLL3_Config>
 800a782:	4603      	mov	r3, r0
 800a784:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a788:	e00a      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a790:	e006      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a792:	bf00      	nop
 800a794:	e004      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a796:	bf00      	nop
 800a798:	e002      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a79a:	bf00      	nop
 800a79c:	e000      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7a8:	4b38      	ldr	r3, [pc, #224]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b6:	4a35      	ldr	r2, [pc, #212]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	6513      	str	r3, [r2, #80]	; 0x50
 800a7bc:	e003      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a7d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	d058      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7f2:	d033      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a7f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7f8:	d82c      	bhi.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a7fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7fe:	d02f      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a804:	d826      	bhi.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a80a:	d02b      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a80c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a810:	d820      	bhi.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a816:	d012      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a81c:	d81a      	bhi.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d022      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a826:	d115      	bne.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82c:	3308      	adds	r3, #8
 800a82e:	2101      	movs	r1, #1
 800a830:	4618      	mov	r0, r3
 800a832:	f001 ffb1 	bl	800c798 <RCCEx_PLL2_Config>
 800a836:	4603      	mov	r3, r0
 800a838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a83c:	e015      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a842:	3328      	adds	r3, #40	; 0x28
 800a844:	2101      	movs	r1, #1
 800a846:	4618      	mov	r0, r3
 800a848:	f002 f858 	bl	800c8fc <RCCEx_PLL3_Config>
 800a84c:	4603      	mov	r3, r0
 800a84e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a852:	e00a      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a85a:	e006      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a85c:	bf00      	nop
 800a85e:	e004      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a860:	bf00      	nop
 800a862:	e002      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a864:	bf00      	nop
 800a866:	e000      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a86a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10e      	bne.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a872:	4b06      	ldr	r3, [pc, #24]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a876:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a882:	4a02      	ldr	r2, [pc, #8]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a884:	430b      	orrs	r3, r1
 800a886:	6593      	str	r3, [r2, #88]	; 0x58
 800a888:	e006      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a88a:	bf00      	nop
 800a88c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a890:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a894:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a8a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a8ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	d037      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8c2:	d00e      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a8c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8c8:	d816      	bhi.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d018      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a8ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8d2:	d111      	bne.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8d4:	4bc4      	ldr	r3, [pc, #784]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	4ac3      	ldr	r2, [pc, #780]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8e0:	e00f      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e6:	3308      	adds	r3, #8
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 ff54 	bl	800c798 <RCCEx_PLL2_Config>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8f6:	e004      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8fe:	e000      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a900:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a902:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a90a:	4bb7      	ldr	r3, [pc, #732]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a918:	4ab3      	ldr	r2, [pc, #716]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a91a:	430b      	orrs	r3, r1
 800a91c:	6513      	str	r3, [r2, #80]	; 0x50
 800a91e:	e003      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a920:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a924:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a938:	2300      	movs	r3, #0
 800a93a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a93e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a942:	460b      	mov	r3, r1
 800a944:	4313      	orrs	r3, r2
 800a946:	d039      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d81c      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a952:	a201      	add	r2, pc, #4	; (adr r2, 800a958 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a958:	0800a995 	.word	0x0800a995
 800a95c:	0800a969 	.word	0x0800a969
 800a960:	0800a977 	.word	0x0800a977
 800a964:	0800a995 	.word	0x0800a995
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a968:	4b9f      	ldr	r3, [pc, #636]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	4a9e      	ldr	r2, [pc, #632]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a96e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a974:	e00f      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	3308      	adds	r3, #8
 800a97c:	2102      	movs	r1, #2
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 ff0a 	bl	800c798 <RCCEx_PLL2_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a98a:	e004      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a992:	e000      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a994:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a996:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a99e:	4b92      	ldr	r3, [pc, #584]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a2:	f023 0103 	bic.w	r1, r3, #3
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ac:	4a8e      	ldr	r2, [pc, #568]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9ae:	430b      	orrs	r3, r1
 800a9b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9b2:	e003      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a9c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	f000 8099 	beq.w	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9de:	4b83      	ldr	r3, [pc, #524]	; (800abec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a82      	ldr	r2, [pc, #520]	; (800abec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9ea:	f7f8 fd67 	bl	80034bc <HAL_GetTick>
 800a9ee:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9f2:	e00b      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9f4:	f7f8 fd62 	bl	80034bc <HAL_GetTick>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b64      	cmp	r3, #100	; 0x64
 800aa02:	d903      	bls.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa0a:	e005      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa0c:	4b77      	ldr	r3, [pc, #476]	; (800abec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0ed      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aa18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d173      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aa20:	4b71      	ldr	r3, [pc, #452]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa2c:	4053      	eors	r3, r2
 800aa2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d015      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa36:	4b6c      	ldr	r3, [pc, #432]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa42:	4b69      	ldr	r3, [pc, #420]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa46:	4a68      	ldr	r2, [pc, #416]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa4e:	4b66      	ldr	r3, [pc, #408]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa52:	4a65      	ldr	r2, [pc, #404]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa5a:	4a63      	ldr	r2, [pc, #396]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aa60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6e:	d118      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa70:	f7f8 fd24 	bl	80034bc <HAL_GetTick>
 800aa74:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa78:	e00d      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa7a:	f7f8 fd1f 	bl	80034bc <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aa84:	1ad2      	subs	r2, r2, r3
 800aa86:	f241 3388 	movw	r3, #5000	; 0x1388
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d903      	bls.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800aa94:	e005      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa96:	4b54      	ldr	r3, [pc, #336]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0eb      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800aaa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d129      	bne.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aaaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaba:	d10e      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aabc:	4b4a      	ldr	r3, [pc, #296]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800aac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aacc:	091a      	lsrs	r2, r3, #4
 800aace:	4b48      	ldr	r3, [pc, #288]	; (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	4a45      	ldr	r2, [pc, #276]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6113      	str	r3, [r2, #16]
 800aad8:	e005      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aada:	4b43      	ldr	r3, [pc, #268]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	4a42      	ldr	r2, [pc, #264]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aae4:	6113      	str	r3, [r2, #16]
 800aae6:	4b40      	ldr	r3, [pc, #256]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aae8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aaf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaf6:	4a3c      	ldr	r2, [pc, #240]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	6713      	str	r3, [r2, #112]	; 0x70
 800aafc:	e008      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aafe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800ab06:	e003      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f002 0301 	and.w	r3, r2, #1
 800ab1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab20:	2300      	movs	r3, #0
 800ab22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ab26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	f000 808f 	beq.w	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab38:	2b28      	cmp	r3, #40	; 0x28
 800ab3a:	d871      	bhi.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ab3c:	a201      	add	r2, pc, #4	; (adr r2, 800ab44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ab3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab42:	bf00      	nop
 800ab44:	0800ac29 	.word	0x0800ac29
 800ab48:	0800ac21 	.word	0x0800ac21
 800ab4c:	0800ac21 	.word	0x0800ac21
 800ab50:	0800ac21 	.word	0x0800ac21
 800ab54:	0800ac21 	.word	0x0800ac21
 800ab58:	0800ac21 	.word	0x0800ac21
 800ab5c:	0800ac21 	.word	0x0800ac21
 800ab60:	0800ac21 	.word	0x0800ac21
 800ab64:	0800abf5 	.word	0x0800abf5
 800ab68:	0800ac21 	.word	0x0800ac21
 800ab6c:	0800ac21 	.word	0x0800ac21
 800ab70:	0800ac21 	.word	0x0800ac21
 800ab74:	0800ac21 	.word	0x0800ac21
 800ab78:	0800ac21 	.word	0x0800ac21
 800ab7c:	0800ac21 	.word	0x0800ac21
 800ab80:	0800ac21 	.word	0x0800ac21
 800ab84:	0800ac0b 	.word	0x0800ac0b
 800ab88:	0800ac21 	.word	0x0800ac21
 800ab8c:	0800ac21 	.word	0x0800ac21
 800ab90:	0800ac21 	.word	0x0800ac21
 800ab94:	0800ac21 	.word	0x0800ac21
 800ab98:	0800ac21 	.word	0x0800ac21
 800ab9c:	0800ac21 	.word	0x0800ac21
 800aba0:	0800ac21 	.word	0x0800ac21
 800aba4:	0800ac29 	.word	0x0800ac29
 800aba8:	0800ac21 	.word	0x0800ac21
 800abac:	0800ac21 	.word	0x0800ac21
 800abb0:	0800ac21 	.word	0x0800ac21
 800abb4:	0800ac21 	.word	0x0800ac21
 800abb8:	0800ac21 	.word	0x0800ac21
 800abbc:	0800ac21 	.word	0x0800ac21
 800abc0:	0800ac21 	.word	0x0800ac21
 800abc4:	0800ac29 	.word	0x0800ac29
 800abc8:	0800ac21 	.word	0x0800ac21
 800abcc:	0800ac21 	.word	0x0800ac21
 800abd0:	0800ac21 	.word	0x0800ac21
 800abd4:	0800ac21 	.word	0x0800ac21
 800abd8:	0800ac21 	.word	0x0800ac21
 800abdc:	0800ac21 	.word	0x0800ac21
 800abe0:	0800ac21 	.word	0x0800ac21
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	58024400 	.word	0x58024400
 800abec:	58024800 	.word	0x58024800
 800abf0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf8:	3308      	adds	r3, #8
 800abfa:	2101      	movs	r1, #1
 800abfc:	4618      	mov	r0, r3
 800abfe:	f001 fdcb 	bl	800c798 <RCCEx_PLL2_Config>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac08:	e00f      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0e:	3328      	adds	r3, #40	; 0x28
 800ac10:	2101      	movs	r1, #1
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 fe72 	bl	800c8fc <RCCEx_PLL3_Config>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac1e:	e004      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac20:	2301      	movs	r3, #1
 800ac22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac26:	e000      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ac28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac32:	4bbf      	ldr	r3, [pc, #764]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac40:	4abb      	ldr	r2, [pc, #748]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac42:	430b      	orrs	r3, r1
 800ac44:	6553      	str	r3, [r2, #84]	; 0x54
 800ac46:	e003      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	f002 0302 	and.w	r3, r2, #2
 800ac5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac60:	2300      	movs	r3, #0
 800ac62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	d041      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac76:	2b05      	cmp	r3, #5
 800ac78:	d824      	bhi.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ac7a:	a201      	add	r2, pc, #4	; (adr r2, 800ac80 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ac7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac80:	0800accd 	.word	0x0800accd
 800ac84:	0800ac99 	.word	0x0800ac99
 800ac88:	0800acaf 	.word	0x0800acaf
 800ac8c:	0800accd 	.word	0x0800accd
 800ac90:	0800accd 	.word	0x0800accd
 800ac94:	0800accd 	.word	0x0800accd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	2101      	movs	r1, #1
 800aca0:	4618      	mov	r0, r3
 800aca2:	f001 fd79 	bl	800c798 <RCCEx_PLL2_Config>
 800aca6:	4603      	mov	r3, r0
 800aca8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acac:	e00f      	b.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb2:	3328      	adds	r3, #40	; 0x28
 800acb4:	2101      	movs	r1, #1
 800acb6:	4618      	mov	r0, r3
 800acb8:	f001 fe20 	bl	800c8fc <RCCEx_PLL3_Config>
 800acbc:	4603      	mov	r3, r0
 800acbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acc2:	e004      	b.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acca:	e000      	b.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800accc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10a      	bne.n	800acec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800acd6:	4b96      	ldr	r3, [pc, #600]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800acd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acda:	f023 0107 	bic.w	r1, r3, #7
 800acde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace4:	4a92      	ldr	r2, [pc, #584]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ace6:	430b      	orrs	r3, r1
 800ace8:	6553      	str	r3, [r2, #84]	; 0x54
 800acea:	e003      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f002 0304 	and.w	r3, r2, #4
 800ad00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad04:	2300      	movs	r3, #0
 800ad06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4313      	orrs	r3, r2
 800ad12:	d044      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ad14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1c:	2b05      	cmp	r3, #5
 800ad1e:	d825      	bhi.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ad20:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ad22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad26:	bf00      	nop
 800ad28:	0800ad75 	.word	0x0800ad75
 800ad2c:	0800ad41 	.word	0x0800ad41
 800ad30:	0800ad57 	.word	0x0800ad57
 800ad34:	0800ad75 	.word	0x0800ad75
 800ad38:	0800ad75 	.word	0x0800ad75
 800ad3c:	0800ad75 	.word	0x0800ad75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad44:	3308      	adds	r3, #8
 800ad46:	2101      	movs	r1, #1
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 fd25 	bl	800c798 <RCCEx_PLL2_Config>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad54:	e00f      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5a:	3328      	adds	r3, #40	; 0x28
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f001 fdcc 	bl	800c8fc <RCCEx_PLL3_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad6a:	e004      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad72:	e000      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ad74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10b      	bne.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad7e:	4b6c      	ldr	r3, [pc, #432]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad82:	f023 0107 	bic.w	r1, r3, #7
 800ad86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8e:	4a68      	ldr	r2, [pc, #416]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad90:	430b      	orrs	r3, r1
 800ad92:	6593      	str	r3, [r2, #88]	; 0x58
 800ad94:	e003      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f002 0320 	and.w	r3, r2, #32
 800adaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800adae:	2300      	movs	r3, #0
 800adb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800adb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800adb8:	460b      	mov	r3, r1
 800adba:	4313      	orrs	r3, r2
 800adbc:	d055      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800adbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adca:	d033      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800adcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800add0:	d82c      	bhi.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800add2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add6:	d02f      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800add8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800addc:	d826      	bhi.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800adde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ade2:	d02b      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ade4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ade8:	d820      	bhi.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800adea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adee:	d012      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800adf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf4:	d81a      	bhi.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d022      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800adfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adfe:	d115      	bne.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae04:	3308      	adds	r3, #8
 800ae06:	2100      	movs	r1, #0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f001 fcc5 	bl	800c798 <RCCEx_PLL2_Config>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae14:	e015      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1a:	3328      	adds	r3, #40	; 0x28
 800ae1c:	2102      	movs	r1, #2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f001 fd6c 	bl	800c8fc <RCCEx_PLL3_Config>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae2a:	e00a      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae32:	e006      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae34:	bf00      	nop
 800ae36:	e004      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae38:	bf00      	nop
 800ae3a:	e002      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae3c:	bf00      	nop
 800ae3e:	e000      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10b      	bne.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae4a:	4b39      	ldr	r3, [pc, #228]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae5a:	4a35      	ldr	r2, [pc, #212]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae5c:	430b      	orrs	r3, r1
 800ae5e:	6553      	str	r3, [r2, #84]	; 0x54
 800ae60:	e003      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ae76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae80:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ae84:	460b      	mov	r3, r1
 800ae86:	4313      	orrs	r3, r2
 800ae88:	d058      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ae8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae96:	d033      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ae98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae9c:	d82c      	bhi.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea2:	d02f      	beq.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea8:	d826      	bhi.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aeaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aeae:	d02b      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aeb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aeb4:	d820      	bhi.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aeb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeba:	d012      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800aebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aec0:	d81a      	bhi.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d022      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeca:	d115      	bne.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed0:	3308      	adds	r3, #8
 800aed2:	2100      	movs	r1, #0
 800aed4:	4618      	mov	r0, r3
 800aed6:	f001 fc5f 	bl	800c798 <RCCEx_PLL2_Config>
 800aeda:	4603      	mov	r3, r0
 800aedc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aee0:	e015      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee6:	3328      	adds	r3, #40	; 0x28
 800aee8:	2102      	movs	r1, #2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 fd06 	bl	800c8fc <RCCEx_PLL3_Config>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aef6:	e00a      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aefe:	e006      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800af00:	bf00      	nop
 800af02:	e004      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800af04:	bf00      	nop
 800af06:	e002      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800af08:	bf00      	nop
 800af0a:	e000      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800af0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10e      	bne.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af16:	4b06      	ldr	r3, [pc, #24]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800af1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af26:	4a02      	ldr	r2, [pc, #8]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af28:	430b      	orrs	r3, r1
 800af2a:	6593      	str	r3, [r2, #88]	; 0x58
 800af2c:	e006      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800af2e:	bf00      	nop
 800af30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800af48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af4c:	2300      	movs	r3, #0
 800af4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800af52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800af56:	460b      	mov	r3, r1
 800af58:	4313      	orrs	r3, r2
 800af5a:	d055      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800af68:	d033      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800af6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800af6e:	d82c      	bhi.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af74:	d02f      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800af76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af7a:	d826      	bhi.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800af80:	d02b      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800af82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800af86:	d820      	bhi.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af8c:	d012      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800af8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af92:	d81a      	bhi.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af94:	2b00      	cmp	r3, #0
 800af96:	d022      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800af98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af9c:	d115      	bne.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa2:	3308      	adds	r3, #8
 800afa4:	2100      	movs	r1, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 fbf6 	bl	800c798 <RCCEx_PLL2_Config>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afb2:	e015      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb8:	3328      	adds	r3, #40	; 0x28
 800afba:	2102      	movs	r1, #2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f001 fc9d 	bl	800c8fc <RCCEx_PLL3_Config>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afc8:	e00a      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afd0:	e006      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afd2:	bf00      	nop
 800afd4:	e004      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afd6:	bf00      	nop
 800afd8:	e002      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afda:	bf00      	nop
 800afdc:	e000      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10b      	bne.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800afe8:	4ba0      	ldr	r3, [pc, #640]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800aff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aff8:	4a9c      	ldr	r2, [pc, #624]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800affa:	430b      	orrs	r3, r1
 800affc:	6593      	str	r3, [r2, #88]	; 0x58
 800affe:	e003      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b000:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b004:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f002 0308 	and.w	r3, r2, #8
 800b014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b018:	2300      	movs	r3, #0
 800b01a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b01e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b022:	460b      	mov	r3, r1
 800b024:	4313      	orrs	r3, r2
 800b026:	d01e      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b034:	d10c      	bne.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03a:	3328      	adds	r3, #40	; 0x28
 800b03c:	2102      	movs	r1, #2
 800b03e:	4618      	mov	r0, r3
 800b040:	f001 fc5c 	bl	800c8fc <RCCEx_PLL3_Config>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d002      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b050:	4b86      	ldr	r3, [pc, #536]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b054:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b060:	4a82      	ldr	r2, [pc, #520]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b062:	430b      	orrs	r3, r1
 800b064:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f002 0310 	and.w	r3, r2, #16
 800b072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b076:	2300      	movs	r3, #0
 800b078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b07c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b080:	460b      	mov	r3, r1
 800b082:	4313      	orrs	r3, r2
 800b084:	d01e      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b092:	d10c      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b098:	3328      	adds	r3, #40	; 0x28
 800b09a:	2102      	movs	r1, #2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 fc2d 	bl	800c8fc <RCCEx_PLL3_Config>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b0ae:	4b6f      	ldr	r3, [pc, #444]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0be:	4a6b      	ldr	r2, [pc, #428]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b0d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	d03e      	beq.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b0e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0ec:	d022      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b0ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0f2:	d81b      	bhi.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b0f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0fc:	d00b      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b0fe:	e015      	b.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b104:	3308      	adds	r3, #8
 800b106:	2100      	movs	r1, #0
 800b108:	4618      	mov	r0, r3
 800b10a:	f001 fb45 	bl	800c798 <RCCEx_PLL2_Config>
 800b10e:	4603      	mov	r3, r0
 800b110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b114:	e00f      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b11a:	3328      	adds	r3, #40	; 0x28
 800b11c:	2102      	movs	r1, #2
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 fbec 	bl	800c8fc <RCCEx_PLL3_Config>
 800b124:	4603      	mov	r3, r0
 800b126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b12a:	e004      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b132:	e000      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b134:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b136:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10b      	bne.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b13e:	4b4b      	ldr	r3, [pc, #300]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b142:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b14e:	4a47      	ldr	r2, [pc, #284]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b150:	430b      	orrs	r3, r1
 800b152:	6593      	str	r3, [r2, #88]	; 0x58
 800b154:	e003      	b.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b156:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b15a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b16a:	673b      	str	r3, [r7, #112]	; 0x70
 800b16c:	2300      	movs	r3, #0
 800b16e:	677b      	str	r3, [r7, #116]	; 0x74
 800b170:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b174:	460b      	mov	r3, r1
 800b176:	4313      	orrs	r3, r2
 800b178:	d03b      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b182:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b186:	d01f      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b18c:	d818      	bhi.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b18e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b192:	d003      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b198:	d007      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b19a:	e011      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b19c:	4b33      	ldr	r3, [pc, #204]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a0:	4a32      	ldr	r2, [pc, #200]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1a8:	e00f      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ae:	3328      	adds	r3, #40	; 0x28
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f001 fba2 	bl	800c8fc <RCCEx_PLL3_Config>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1be:	e004      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1c6:	e000      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b1c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10b      	bne.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1d2:	4b26      	ldr	r3, [pc, #152]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1e2:	4a22      	ldr	r2, [pc, #136]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	6553      	str	r3, [r2, #84]	; 0x54
 800b1e8:	e003      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b1fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800b200:	2300      	movs	r3, #0
 800b202:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b204:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b208:	460b      	mov	r3, r1
 800b20a:	4313      	orrs	r3, r2
 800b20c:	d034      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b21c:	d007      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b21e:	e011      	b.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b220:	4b12      	ldr	r3, [pc, #72]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	4a11      	ldr	r2, [pc, #68]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b22a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b22c:	e00e      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b232:	3308      	adds	r3, #8
 800b234:	2102      	movs	r1, #2
 800b236:	4618      	mov	r0, r3
 800b238:	f001 faae 	bl	800c798 <RCCEx_PLL2_Config>
 800b23c:	4603      	mov	r3, r0
 800b23e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b242:	e003      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b24c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10d      	bne.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b262:	4a02      	ldr	r2, [pc, #8]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b264:	430b      	orrs	r3, r1
 800b266:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b268:	e006      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b26a:	bf00      	nop
 800b26c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b284:	663b      	str	r3, [r7, #96]	; 0x60
 800b286:	2300      	movs	r3, #0
 800b288:	667b      	str	r3, [r7, #100]	; 0x64
 800b28a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b28e:	460b      	mov	r3, r1
 800b290:	4313      	orrs	r3, r2
 800b292:	d00c      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b298:	3328      	adds	r3, #40	; 0x28
 800b29a:	2102      	movs	r1, #2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f001 fb2d 	bl	800c8fc <RCCEx_PLL3_Config>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b2ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2bc:	2300      	movs	r3, #0
 800b2be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	d036      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2d4:	d018      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b2d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2da:	d811      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2e0:	d014      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b2e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2e6:	d80b      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d011      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f0:	d106      	bne.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2f2:	4bb7      	ldr	r3, [pc, #732]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f6:	4ab6      	ldr	r2, [pc, #728]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b2fe:	e008      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b306:	e004      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b308:	bf00      	nop
 800b30a:	e002      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b30c:	bf00      	nop
 800b30e:	e000      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b310:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10a      	bne.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b31a:	4bad      	ldr	r3, [pc, #692]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b328:	4aa9      	ldr	r2, [pc, #676]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b32a:	430b      	orrs	r3, r1
 800b32c:	6553      	str	r3, [r2, #84]	; 0x54
 800b32e:	e003      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b330:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b334:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b344:	653b      	str	r3, [r7, #80]	; 0x50
 800b346:	2300      	movs	r3, #0
 800b348:	657b      	str	r3, [r7, #84]	; 0x54
 800b34a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b34e:	460b      	mov	r3, r1
 800b350:	4313      	orrs	r3, r2
 800b352:	d009      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b354:	4b9e      	ldr	r3, [pc, #632]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b358:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b362:	4a9b      	ldr	r2, [pc, #620]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b364:	430b      	orrs	r3, r1
 800b366:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b374:	64bb      	str	r3, [r7, #72]	; 0x48
 800b376:	2300      	movs	r3, #0
 800b378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b37a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b37e:	460b      	mov	r3, r1
 800b380:	4313      	orrs	r3, r2
 800b382:	d009      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b384:	4b92      	ldr	r3, [pc, #584]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b388:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b392:	4a8f      	ldr	r2, [pc, #572]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b394:	430b      	orrs	r3, r1
 800b396:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b3a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b3aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	d00e      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3b4:	4b86      	ldr	r3, [pc, #536]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	4a85      	ldr	r2, [pc, #532]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3be:	6113      	str	r3, [r2, #16]
 800b3c0:	4b83      	ldr	r3, [pc, #524]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3c2:	6919      	ldr	r1, [r3, #16]
 800b3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3cc:	4a80      	ldr	r2, [pc, #512]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b3de:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	d009      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b3ee:	4b78      	ldr	r3, [pc, #480]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fc:	4a74      	ldr	r2, [pc, #464]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3fe:	430b      	orrs	r3, r1
 800b400:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b40e:	633b      	str	r3, [r7, #48]	; 0x30
 800b410:	2300      	movs	r3, #0
 800b412:	637b      	str	r3, [r7, #52]	; 0x34
 800b414:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b418:	460b      	mov	r3, r1
 800b41a:	4313      	orrs	r3, r2
 800b41c:	d00a      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b41e:	4b6c      	ldr	r3, [pc, #432]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b42e:	4a68      	ldr	r2, [pc, #416]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b430:	430b      	orrs	r3, r1
 800b432:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	2100      	movs	r1, #0
 800b43e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b440:	f003 0301 	and.w	r3, r3, #1
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b446:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b44a:	460b      	mov	r3, r1
 800b44c:	4313      	orrs	r3, r2
 800b44e:	d011      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b454:	3308      	adds	r3, #8
 800b456:	2100      	movs	r1, #0
 800b458:	4618      	mov	r0, r3
 800b45a:	f001 f99d 	bl	800c798 <RCCEx_PLL2_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b464:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b46c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b470:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	2100      	movs	r1, #0
 800b47e:	6239      	str	r1, [r7, #32]
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	627b      	str	r3, [r7, #36]	; 0x24
 800b486:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b48a:	460b      	mov	r3, r1
 800b48c:	4313      	orrs	r3, r2
 800b48e:	d011      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b494:	3308      	adds	r3, #8
 800b496:	2101      	movs	r1, #1
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 f97d 	bl	800c798 <RCCEx_PLL2_Config>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b4a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	2100      	movs	r1, #0
 800b4be:	61b9      	str	r1, [r7, #24]
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	61fb      	str	r3, [r7, #28]
 800b4c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d011      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	2102      	movs	r1, #2
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f001 f95d 	bl	800c798 <RCCEx_PLL2_Config>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b4e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6139      	str	r1, [r7, #16]
 800b500:	f003 0308 	and.w	r3, r3, #8
 800b504:	617b      	str	r3, [r7, #20]
 800b506:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b50a:	460b      	mov	r3, r1
 800b50c:	4313      	orrs	r3, r2
 800b50e:	d011      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b514:	3328      	adds	r3, #40	; 0x28
 800b516:	2100      	movs	r1, #0
 800b518:	4618      	mov	r0, r3
 800b51a:	f001 f9ef 	bl	800c8fc <RCCEx_PLL3_Config>
 800b51e:	4603      	mov	r3, r0
 800b520:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b524:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b52c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b530:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	2100      	movs	r1, #0
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	f003 0310 	and.w	r3, r3, #16
 800b544:	60fb      	str	r3, [r7, #12]
 800b546:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b54a:	460b      	mov	r3, r1
 800b54c:	4313      	orrs	r3, r2
 800b54e:	d011      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b554:	3328      	adds	r3, #40	; 0x28
 800b556:	2101      	movs	r1, #1
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 f9cf 	bl	800c8fc <RCCEx_PLL3_Config>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b564:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b570:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	2100      	movs	r1, #0
 800b57e:	6039      	str	r1, [r7, #0]
 800b580:	f003 0320 	and.w	r3, r3, #32
 800b584:	607b      	str	r3, [r7, #4]
 800b586:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b58a:	460b      	mov	r3, r1
 800b58c:	4313      	orrs	r3, r2
 800b58e:	d011      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b594:	3328      	adds	r3, #40	; 0x28
 800b596:	2102      	movs	r1, #2
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 f9af 	bl	800c8fc <RCCEx_PLL3_Config>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b5b4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	e000      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5ce:	bf00      	nop
 800b5d0:	58024400 	.word	0x58024400

0800b5d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b090      	sub	sp, #64	; 0x40
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b5de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	f040 8094 	bne.w	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b5ec:	4b9b      	ldr	r3, [pc, #620]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	f200 8087 	bhi.w	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b5fe:	a201      	add	r2, pc, #4	; (adr r2, 800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b604:	0800b619 	.word	0x0800b619
 800b608:	0800b641 	.word	0x0800b641
 800b60c:	0800b669 	.word	0x0800b669
 800b610:	0800b705 	.word	0x0800b705
 800b614:	0800b691 	.word	0x0800b691
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b618:	4b90      	ldr	r3, [pc, #576]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b624:	d108      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 ff62 	bl	800c4f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b634:	f000 bc93 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b63c:	f000 bc8f 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b640:	4b86      	ldr	r3, [pc, #536]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b64c:	d108      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b64e:	f107 0318 	add.w	r3, r7, #24
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fca6 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65c:	f000 bc7f 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b664:	f000 bc7b 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b668:	4b7c      	ldr	r3, [pc, #496]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b674:	d108      	bne.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b676:	f107 030c 	add.w	r3, r7, #12
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fde6 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b684:	f000 bc6b 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b68c:	f000 bc67 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b690:	4b72      	ldr	r3, [pc, #456]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b698:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b69a:	4b70      	ldr	r3, [pc, #448]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0304 	and.w	r3, r3, #4
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d10c      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d109      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6ac:	4b6b      	ldr	r3, [pc, #428]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	08db      	lsrs	r3, r3, #3
 800b6b2:	f003 0303 	and.w	r3, r3, #3
 800b6b6:	4a6a      	ldr	r2, [pc, #424]	; (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b6b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6be:	e01f      	b.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6c0:	4b66      	ldr	r3, [pc, #408]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6cc:	d106      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6d4:	d102      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6d6:	4b63      	ldr	r3, [pc, #396]	; (800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6da:	e011      	b.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6dc:	4b5f      	ldr	r3, [pc, #380]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6e8:	d106      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f0:	d102      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6f2:	4b5d      	ldr	r3, [pc, #372]	; (800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6f6:	e003      	b.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b6fc:	f000 bc2f 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b700:	f000 bc2d 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b704:	4b59      	ldr	r3, [pc, #356]	; (800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b708:	f000 bc29 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b710:	f000 bc25 	b.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b714:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b718:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b71c:	430b      	orrs	r3, r1
 800b71e:	f040 80a7 	bne.w	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b722:	4b4e      	ldr	r3, [pc, #312]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b726:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b72a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b732:	d054      	beq.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b73a:	f200 808b 	bhi.w	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b744:	f000 8083 	beq.w	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b74e:	f200 8081 	bhi.w	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b758:	d02f      	beq.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b760:	d878      	bhi.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	2b00      	cmp	r3, #0
 800b766:	d004      	beq.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b76e:	d012      	beq.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b770:	e070      	b.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b772:	4b3a      	ldr	r3, [pc, #232]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b77a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b77e:	d107      	bne.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b784:	4618      	mov	r0, r3
 800b786:	f000 feb5 	bl	800c4f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b78e:	e3e6      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b794:	e3e3      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b796:	4b31      	ldr	r3, [pc, #196]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b79e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7a2:	d107      	bne.n	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7a4:	f107 0318 	add.w	r3, r7, #24
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 fbfb 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7b2:	e3d4      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b8:	e3d1      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7ba:	4b28      	ldr	r3, [pc, #160]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7c6:	d107      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7c8:	f107 030c 	add.w	r3, r7, #12
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 fd3d 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7d6:	e3c2      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7dc:	e3bf      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7de:	4b1f      	ldr	r3, [pc, #124]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7e8:	4b1c      	ldr	r3, [pc, #112]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0304 	and.w	r3, r3, #4
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	d10c      	bne.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7fa:	4b18      	ldr	r3, [pc, #96]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	08db      	lsrs	r3, r3, #3
 800b800:	f003 0303 	and.w	r3, r3, #3
 800b804:	4a16      	ldr	r2, [pc, #88]	; (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b806:	fa22 f303 	lsr.w	r3, r2, r3
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b80c:	e01e      	b.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b80e:	4b13      	ldr	r3, [pc, #76]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b81a:	d106      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b822:	d102      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b824:	4b0f      	ldr	r3, [pc, #60]	; (800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b826:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b828:	e010      	b.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b82a:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b836:	d106      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83e:	d102      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b840:	4b09      	ldr	r3, [pc, #36]	; (800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b844:	e002      	b.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b84a:	e388      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b84c:	e387      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b84e:	4b07      	ldr	r3, [pc, #28]	; (800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b852:	e384      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b858:	e381      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b85a:	bf00      	nop
 800b85c:	58024400 	.word	0x58024400
 800b860:	03d09000 	.word	0x03d09000
 800b864:	003d0900 	.word	0x003d0900
 800b868:	02faf080 	.word	0x02faf080
 800b86c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b874:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b878:	430b      	orrs	r3, r1
 800b87a:	f040 809c 	bne.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b87e:	4b9e      	ldr	r3, [pc, #632]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b882:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b886:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b88e:	d054      	beq.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b896:	f200 808b 	bhi.w	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8a0:	f000 8083 	beq.w	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8aa:	f200 8081 	bhi.w	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8b4:	d02f      	beq.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8bc:	d878      	bhi.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d004      	beq.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8ca:	d012      	beq.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b8cc:	e070      	b.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8ce:	4b8a      	ldr	r3, [pc, #552]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8da:	d107      	bne.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 fe07 	bl	800c4f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ea:	e338      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f0:	e335      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8f2:	4b81      	ldr	r3, [pc, #516]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8fe:	d107      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b900:	f107 0318 	add.w	r3, r7, #24
 800b904:	4618      	mov	r0, r3
 800b906:	f000 fb4d 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b90e:	e326      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b914:	e323      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b916:	4b78      	ldr	r3, [pc, #480]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b91e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b922:	d107      	bne.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b924:	f107 030c 	add.w	r3, r7, #12
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 fc8f 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b932:	e314      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b938:	e311      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b93a:	4b6f      	ldr	r3, [pc, #444]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b93c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b93e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b942:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b944:	4b6c      	ldr	r3, [pc, #432]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0304 	and.w	r3, r3, #4
 800b94c:	2b04      	cmp	r3, #4
 800b94e:	d10c      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b956:	4b68      	ldr	r3, [pc, #416]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	08db      	lsrs	r3, r3, #3
 800b95c:	f003 0303 	and.w	r3, r3, #3
 800b960:	4a66      	ldr	r2, [pc, #408]	; (800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b962:	fa22 f303 	lsr.w	r3, r2, r3
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b968:	e01e      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b96a:	4b63      	ldr	r3, [pc, #396]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b976:	d106      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b97e:	d102      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b980:	4b5f      	ldr	r3, [pc, #380]	; (800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b984:	e010      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b986:	4b5c      	ldr	r3, [pc, #368]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b98e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b992:	d106      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b99a:	d102      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b99c:	4b59      	ldr	r3, [pc, #356]	; (800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a0:	e002      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b9a6:	e2da      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9a8:	e2d9      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9aa:	4b57      	ldr	r3, [pc, #348]	; (800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ae:	e2d6      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b4:	e2d3      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b9b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b9be:	430b      	orrs	r3, r1
 800b9c0:	f040 80a7 	bne.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b9c4:	4b4c      	ldr	r3, [pc, #304]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b9cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9d4:	d055      	beq.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9dc:	f200 8096 	bhi.w	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9e6:	f000 8084 	beq.w	800baf2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9f0:	f200 808c 	bhi.w	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9fa:	d030      	beq.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba02:	f200 8083 	bhi.w	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba12:	d012      	beq.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ba14:	e07a      	b.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba16:	4b38      	ldr	r3, [pc, #224]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba22:	d107      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fd63 	bl	800c4f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba32:	e294      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba38:	e291      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba3a:	4b2f      	ldr	r3, [pc, #188]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba46:	d107      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba48:	f107 0318 	add.w	r3, r7, #24
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 faa9 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba56:	e282      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba5c:	e27f      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba5e:	4b26      	ldr	r3, [pc, #152]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba6a:	d107      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba6c:	f107 030c 	add.w	r3, r7, #12
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 fbeb 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7a:	e270      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba80:	e26d      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba82:	4b1d      	ldr	r3, [pc, #116]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba8c:	4b1a      	ldr	r3, [pc, #104]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d10c      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ba98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d109      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba9e:	4b16      	ldr	r3, [pc, #88]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	08db      	lsrs	r3, r3, #3
 800baa4:	f003 0303 	and.w	r3, r3, #3
 800baa8:	4a14      	ldr	r2, [pc, #80]	; (800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800baaa:	fa22 f303 	lsr.w	r3, r2, r3
 800baae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bab0:	e01e      	b.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bab2:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800babe:	d106      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bac6:	d102      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bac8:	4b0d      	ldr	r3, [pc, #52]	; (800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bacc:	e010      	b.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bace:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bada:	d106      	bne.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800badc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae2:	d102      	bne.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae8:	e002      	b.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800baee:	e236      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800baf0:	e235      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800baf2:	4b05      	ldr	r3, [pc, #20]	; (800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800baf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baf6:	e232      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800baf8:	58024400 	.word	0x58024400
 800bafc:	03d09000 	.word	0x03d09000
 800bb00:	003d0900 	.word	0x003d0900
 800bb04:	02faf080 	.word	0x02faf080
 800bb08:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb10:	e225      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bb12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb16:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bb1a:	430b      	orrs	r3, r1
 800bb1c:	f040 8085 	bne.w	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bb20:	4b9c      	ldr	r3, [pc, #624]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb24:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bb28:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb30:	d06b      	beq.n	800bc0a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb38:	d874      	bhi.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb40:	d056      	beq.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb48:	d86c      	bhi.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb50:	d03b      	beq.n	800bbca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb58:	d864      	bhi.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb60:	d021      	beq.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb68:	d85c      	bhi.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb76:	d004      	beq.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bb78:	e054      	b.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bb7a:	f7fe fb5f 	bl	800a23c <HAL_RCC_GetPCLK1Freq>
 800bb7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb80:	e1ed      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb82:	4b84      	ldr	r3, [pc, #528]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb8e:	d107      	bne.n	800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb90:	f107 0318 	add.w	r3, r7, #24
 800bb94:	4618      	mov	r0, r3
 800bb96:	f000 fa05 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb9e:	e1de      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba4:	e1db      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bba6:	4b7b      	ldr	r3, [pc, #492]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbb2:	d107      	bne.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbb4:	f107 030c 	add.w	r3, r7, #12
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 fb47 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbc2:	e1cc      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbc8:	e1c9      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bbca:	4b72      	ldr	r3, [pc, #456]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b04      	cmp	r3, #4
 800bbd4:	d109      	bne.n	800bbea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbd6:	4b6f      	ldr	r3, [pc, #444]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	08db      	lsrs	r3, r3, #3
 800bbdc:	f003 0303 	and.w	r3, r3, #3
 800bbe0:	4a6d      	ldr	r2, [pc, #436]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bbe2:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbe8:	e1b9      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbee:	e1b6      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bbf0:	4b68      	ldr	r3, [pc, #416]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbfc:	d102      	bne.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bbfe:	4b67      	ldr	r3, [pc, #412]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc02:	e1ac      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc08:	e1a9      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc0a:	4b62      	ldr	r3, [pc, #392]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc16:	d102      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bc18:	4b61      	ldr	r3, [pc, #388]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc1c:	e19f      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc22:	e19c      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc28:	e199      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bc2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc2e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bc32:	430b      	orrs	r3, r1
 800bc34:	d173      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bc36:	4b57      	ldr	r3, [pc, #348]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bc3e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc46:	d02f      	beq.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc4e:	d863      	bhi.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc5c:	d012      	beq.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bc5e:	e05b      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc60:	4b4c      	ldr	r3, [pc, #304]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc6c:	d107      	bne.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc6e:	f107 0318 	add.w	r3, r7, #24
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 f996 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc7c:	e16f      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc82:	e16c      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc84:	4b43      	ldr	r3, [pc, #268]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc90:	d107      	bne.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc92:	f107 030c 	add.w	r3, r7, #12
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fad8 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca0:	e15d      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca6:	e15a      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bca8:	4b3a      	ldr	r3, [pc, #232]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcb0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcb2:	4b38      	ldr	r3, [pc, #224]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 0304 	and.w	r3, r3, #4
 800bcba:	2b04      	cmp	r3, #4
 800bcbc:	d10c      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d109      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcc4:	4b33      	ldr	r3, [pc, #204]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	08db      	lsrs	r3, r3, #3
 800bcca:	f003 0303 	and.w	r3, r3, #3
 800bcce:	4a32      	ldr	r2, [pc, #200]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bcd0:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd6:	e01e      	b.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce4:	d106      	bne.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcec:	d102      	bne.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcee:	4b2b      	ldr	r3, [pc, #172]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcf2:	e010      	b.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcf4:	4b27      	ldr	r3, [pc, #156]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd00:	d106      	bne.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd08:	d102      	bne.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd0a:	4b25      	ldr	r3, [pc, #148]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd0e:	e002      	b.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd14:	e123      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd16:	e122      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd1c:	e11f      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bd1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd22:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bd26:	430b      	orrs	r3, r1
 800bd28:	d13c      	bne.n	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bd2a:	4b1a      	ldr	r3, [pc, #104]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd32:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d004      	beq.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd40:	d012      	beq.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bd42:	e023      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd44:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd50:	d107      	bne.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 fbcc 	bl	800c4f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd60:	e0fd      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd66:	e0fa      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd74:	d107      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd76:	f107 0318 	add.w	r3, r7, #24
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 f912 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd84:	e0eb      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8a:	e0e8      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd90:	e0e5      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd92:	bf00      	nop
 800bd94:	58024400 	.word	0x58024400
 800bd98:	03d09000 	.word	0x03d09000
 800bd9c:	003d0900 	.word	0x003d0900
 800bda0:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bda4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bda8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bdac:	430b      	orrs	r3, r1
 800bdae:	f040 8085 	bne.w	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bdb2:	4b6d      	ldr	r3, [pc, #436]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bdba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdc2:	d06b      	beq.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdca:	d874      	bhi.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdd2:	d056      	beq.n	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdda:	d86c      	bhi.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bde2:	d03b      	beq.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bdea:	d864      	bhi.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdf2:	d021      	beq.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdfa:	d85c      	bhi.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d004      	beq.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be08:	d004      	beq.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800be0a:	e054      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800be0c:	f000 f8b4 	bl	800bf78 <HAL_RCCEx_GetD3PCLK1Freq>
 800be10:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be12:	e0a4      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be14:	4b54      	ldr	r3, [pc, #336]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be20:	d107      	bne.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be22:	f107 0318 	add.w	r3, r7, #24
 800be26:	4618      	mov	r0, r3
 800be28:	f000 f8bc 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be30:	e095      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be36:	e092      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be38:	4b4b      	ldr	r3, [pc, #300]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be44:	d107      	bne.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be46:	f107 030c 	add.w	r3, r7, #12
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 f9fe 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be54:	e083      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be5a:	e080      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be5c:	4b42      	ldr	r3, [pc, #264]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f003 0304 	and.w	r3, r3, #4
 800be64:	2b04      	cmp	r3, #4
 800be66:	d109      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be68:	4b3f      	ldr	r3, [pc, #252]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	08db      	lsrs	r3, r3, #3
 800be6e:	f003 0303 	and.w	r3, r3, #3
 800be72:	4a3e      	ldr	r2, [pc, #248]	; (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800be74:	fa22 f303 	lsr.w	r3, r2, r3
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be7a:	e070      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be80:	e06d      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800be82:	4b39      	ldr	r3, [pc, #228]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be8e:	d102      	bne.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800be90:	4b37      	ldr	r3, [pc, #220]	; (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800be92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be94:	e063      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be9a:	e060      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800be9c:	4b32      	ldr	r3, [pc, #200]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bea8:	d102      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800beaa:	4b32      	ldr	r3, [pc, #200]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800beac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beae:	e056      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beb4:	e053      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beba:	e050      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bec0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bec4:	430b      	orrs	r3, r1
 800bec6:	d148      	bne.n	800bf5a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bec8:	4b27      	ldr	r3, [pc, #156]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800beca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800becc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bed0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed8:	d02a      	beq.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bee0:	d838      	bhi.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beee:	d00d      	beq.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bef0:	e030      	b.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bef2:	4b1d      	ldr	r3, [pc, #116]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800befa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800befe:	d102      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bf00:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf04:	e02b      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf0a:	e028      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf0c:	4b16      	ldr	r3, [pc, #88]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf18:	d107      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fae8 	bl	800c4f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf28:	e019      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf2e:	e016      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf30:	4b0d      	ldr	r3, [pc, #52]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf3c:	d107      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3e:	f107 0318 	add.w	r3, r7, #24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 f82e 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf4c:	e007      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf52:	e004      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf58:	e001      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3740      	adds	r7, #64	; 0x40
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	58024400 	.word	0x58024400
 800bf6c:	03d09000 	.word	0x03d09000
 800bf70:	003d0900 	.word	0x003d0900
 800bf74:	02faf080 	.word	0x02faf080

0800bf78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bf7c:	f7fe f92e 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800bf80:	4602      	mov	r2, r0
 800bf82:	4b06      	ldr	r3, [pc, #24]	; (800bf9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	091b      	lsrs	r3, r3, #4
 800bf88:	f003 0307 	and.w	r3, r3, #7
 800bf8c:	4904      	ldr	r1, [pc, #16]	; (800bfa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bf8e:	5ccb      	ldrb	r3, [r1, r3]
 800bf90:	f003 031f 	and.w	r3, r3, #31
 800bf94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	58024400 	.word	0x58024400
 800bfa0:	080175a4 	.word	0x080175a4

0800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b089      	sub	sp, #36	; 0x24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfac:	4ba1      	ldr	r3, [pc, #644]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	f003 0303 	and.w	r3, r3, #3
 800bfb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bfb6:	4b9f      	ldr	r3, [pc, #636]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfba:	0b1b      	lsrs	r3, r3, #12
 800bfbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bfc2:	4b9c      	ldr	r3, [pc, #624]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc6:	091b      	lsrs	r3, r3, #4
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bfce:	4b99      	ldr	r3, [pc, #612]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd2:	08db      	lsrs	r3, r3, #3
 800bfd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	fb02 f303 	mul.w	r3, r2, r3
 800bfde:	ee07 3a90 	vmov	s15, r3
 800bfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 8111 	beq.w	800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	f000 8083 	beq.w	800c100 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	f200 80a1 	bhi.w	800c144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d003      	beq.n	800c010 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d056      	beq.n	800c0bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c00e:	e099      	b.n	800c144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c010:	4b88      	ldr	r3, [pc, #544]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f003 0320 	and.w	r3, r3, #32
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d02d      	beq.n	800c078 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c01c:	4b85      	ldr	r3, [pc, #532]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	08db      	lsrs	r3, r3, #3
 800c022:	f003 0303 	and.w	r3, r3, #3
 800c026:	4a84      	ldr	r2, [pc, #528]	; (800c238 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c028:	fa22 f303 	lsr.w	r3, r2, r3
 800c02c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	ee07 3a90 	vmov	s15, r3
 800c034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c046:	4b7b      	ldr	r3, [pc, #492]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c056:	ed97 6a03 	vldr	s12, [r7, #12]
 800c05a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c072:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c076:	e087      	b.n	800c188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c082:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c240 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c08a:	4b6a      	ldr	r3, [pc, #424]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c092:	ee07 3a90 	vmov	s15, r3
 800c096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c09e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ba:	e065      	b.n	800c188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ce:	4b59      	ldr	r3, [pc, #356]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0fe:	e043      	b.n	800c188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c112:	4b48      	ldr	r3, [pc, #288]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c122:	ed97 6a03 	vldr	s12, [r7, #12]
 800c126:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c142:	e021      	b.n	800c188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c156:	4b37      	ldr	r3, [pc, #220]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15e:	ee07 3a90 	vmov	s15, r3
 800c162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c166:	ed97 6a03 	vldr	s12, [r7, #12]
 800c16a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c186:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c188:	4b2a      	ldr	r3, [pc, #168]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18c:	0a5b      	lsrs	r3, r3, #9
 800c18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c192:	ee07 3a90 	vmov	s15, r3
 800c196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c19e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ae:	ee17 2a90 	vmov	r2, s15
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c1b6:	4b1f      	ldr	r3, [pc, #124]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	0c1b      	lsrs	r3, r3, #16
 800c1bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1dc:	ee17 2a90 	vmov	r2, s15
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c1e4:	4b13      	ldr	r3, [pc, #76]	; (800c234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e8:	0e1b      	lsrs	r3, r3, #24
 800c1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c20a:	ee17 2a90 	vmov	r2, s15
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c212:	e008      	b.n	800c226 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	609a      	str	r2, [r3, #8]
}
 800c226:	bf00      	nop
 800c228:	3724      	adds	r7, #36	; 0x24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	58024400 	.word	0x58024400
 800c238:	03d09000 	.word	0x03d09000
 800c23c:	46000000 	.word	0x46000000
 800c240:	4c742400 	.word	0x4c742400
 800c244:	4a742400 	.word	0x4a742400
 800c248:	4c3ebc20 	.word	0x4c3ebc20

0800c24c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b089      	sub	sp, #36	; 0x24
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c254:	4ba1      	ldr	r3, [pc, #644]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c258:	f003 0303 	and.w	r3, r3, #3
 800c25c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c25e:	4b9f      	ldr	r3, [pc, #636]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c262:	0d1b      	lsrs	r3, r3, #20
 800c264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c268:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c26a:	4b9c      	ldr	r3, [pc, #624]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c276:	4b99      	ldr	r3, [pc, #612]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27a:	08db      	lsrs	r3, r3, #3
 800c27c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	fb02 f303 	mul.w	r3, r2, r3
 800c286:	ee07 3a90 	vmov	s15, r3
 800c28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 8111 	beq.w	800c4bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	f000 8083 	beq.w	800c3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	f200 80a1 	bhi.w	800c3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d003      	beq.n	800c2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d056      	beq.n	800c364 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c2b6:	e099      	b.n	800c3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2b8:	4b88      	ldr	r3, [pc, #544]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0320 	and.w	r3, r3, #32
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d02d      	beq.n	800c320 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2c4:	4b85      	ldr	r3, [pc, #532]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	08db      	lsrs	r3, r3, #3
 800c2ca:	f003 0303 	and.w	r3, r3, #3
 800c2ce:	4a84      	ldr	r2, [pc, #528]	; (800c4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	ee07 3a90 	vmov	s15, r3
 800c2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	ee07 3a90 	vmov	s15, r3
 800c2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ee:	4b7b      	ldr	r3, [pc, #492]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f6:	ee07 3a90 	vmov	s15, r3
 800c2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c302:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c31a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c31e:	e087      	b.n	800c430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	ee07 3a90 	vmov	s15, r3
 800c326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c332:	4b6a      	ldr	r3, [pc, #424]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c33a:	ee07 3a90 	vmov	s15, r3
 800c33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c342:	ed97 6a03 	vldr	s12, [r7, #12]
 800c346:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c362:	e065      	b.n	800c430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c36e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c4ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c376:	4b59      	ldr	r3, [pc, #356]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c386:	ed97 6a03 	vldr	s12, [r7, #12]
 800c38a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3a6:	e043      	b.n	800c430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ba:	4b48      	ldr	r3, [pc, #288]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3ea:	e021      	b.n	800c430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c4ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3fe:	4b37      	ldr	r3, [pc, #220]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c406:	ee07 3a90 	vmov	s15, r3
 800c40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c40e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c412:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c42a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c42e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c430:	4b2a      	ldr	r3, [pc, #168]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c434:	0a5b      	lsrs	r3, r3, #9
 800c436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c43a:	ee07 3a90 	vmov	s15, r3
 800c43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c44a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c44e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c456:	ee17 2a90 	vmov	r2, s15
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c45e:	4b1f      	ldr	r3, [pc, #124]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c462:	0c1b      	lsrs	r3, r3, #16
 800c464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c474:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c478:	edd7 6a07 	vldr	s13, [r7, #28]
 800c47c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c484:	ee17 2a90 	vmov	r2, s15
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c48c:	4b13      	ldr	r3, [pc, #76]	; (800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c490:	0e1b      	lsrs	r3, r3, #24
 800c492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c496:	ee07 3a90 	vmov	s15, r3
 800c49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4b2:	ee17 2a90 	vmov	r2, s15
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c4ba:	e008      	b.n	800c4ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	609a      	str	r2, [r3, #8]
}
 800c4ce:	bf00      	nop
 800c4d0:	3724      	adds	r7, #36	; 0x24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	58024400 	.word	0x58024400
 800c4e0:	03d09000 	.word	0x03d09000
 800c4e4:	46000000 	.word	0x46000000
 800c4e8:	4c742400 	.word	0x4c742400
 800c4ec:	4a742400 	.word	0x4a742400
 800c4f0:	4c3ebc20 	.word	0x4c3ebc20

0800c4f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b089      	sub	sp, #36	; 0x24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4fc:	4ba0      	ldr	r3, [pc, #640]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c500:	f003 0303 	and.w	r3, r3, #3
 800c504:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c506:	4b9e      	ldr	r3, [pc, #632]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50a:	091b      	lsrs	r3, r3, #4
 800c50c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c510:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c512:	4b9b      	ldr	r3, [pc, #620]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c51c:	4b98      	ldr	r3, [pc, #608]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c520:	08db      	lsrs	r3, r3, #3
 800c522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	fb02 f303 	mul.w	r3, r2, r3
 800c52c:	ee07 3a90 	vmov	s15, r3
 800c530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c534:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8111 	beq.w	800c762 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	2b02      	cmp	r3, #2
 800c544:	f000 8083 	beq.w	800c64e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	f200 80a1 	bhi.w	800c692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d056      	beq.n	800c60a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c55c:	e099      	b.n	800c692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c55e:	4b88      	ldr	r3, [pc, #544]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 0320 	and.w	r3, r3, #32
 800c566:	2b00      	cmp	r3, #0
 800c568:	d02d      	beq.n	800c5c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c56a:	4b85      	ldr	r3, [pc, #532]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	08db      	lsrs	r3, r3, #3
 800c570:	f003 0303 	and.w	r3, r3, #3
 800c574:	4a83      	ldr	r2, [pc, #524]	; (800c784 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c576:	fa22 f303 	lsr.w	r3, r2, r3
 800c57a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	ee07 3a90 	vmov	s15, r3
 800c58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c594:	4b7a      	ldr	r3, [pc, #488]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59c:	ee07 3a90 	vmov	s15, r3
 800c5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c5ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5c4:	e087      	b.n	800c6d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	ee07 3a90 	vmov	s15, r3
 800c5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c78c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c5d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5d8:	4b69      	ldr	r3, [pc, #420]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e0:	ee07 3a90 	vmov	s15, r3
 800c5e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c5f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c600:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c608:	e065      	b.n	800c6d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	ee07 3a90 	vmov	s15, r3
 800c610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c614:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c790 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c61c:	4b58      	ldr	r3, [pc, #352]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c630:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c63c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c644:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c64c:	e043      	b.n	800c6d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	ee07 3a90 	vmov	s15, r3
 800c654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c658:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c794 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c65c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c660:	4b47      	ldr	r3, [pc, #284]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c668:	ee07 3a90 	vmov	s15, r3
 800c66c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c670:	ed97 6a03 	vldr	s12, [r7, #12]
 800c674:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c67c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c68c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c690:	e021      	b.n	800c6d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	ee07 3a90 	vmov	s15, r3
 800c698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c69c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c78c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c6a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6a4:	4b36      	ldr	r3, [pc, #216]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ac:	ee07 3a90 	vmov	s15, r3
 800c6b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c6d6:	4b2a      	ldr	r3, [pc, #168]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6da:	0a5b      	lsrs	r3, r3, #9
 800c6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6e0:	ee07 3a90 	vmov	s15, r3
 800c6e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6fc:	ee17 2a90 	vmov	r2, s15
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c704:	4b1e      	ldr	r3, [pc, #120]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c708:	0c1b      	lsrs	r3, r3, #16
 800c70a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c71a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c71e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c72a:	ee17 2a90 	vmov	r2, s15
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c732:	4b13      	ldr	r3, [pc, #76]	; (800c780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c736:	0e1b      	lsrs	r3, r3, #24
 800c738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c73c:	ee07 3a90 	vmov	s15, r3
 800c740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c74c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c758:	ee17 2a90 	vmov	r2, s15
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c760:	e008      	b.n	800c774 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	609a      	str	r2, [r3, #8]
}
 800c774:	bf00      	nop
 800c776:	3724      	adds	r7, #36	; 0x24
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	58024400 	.word	0x58024400
 800c784:	03d09000 	.word	0x03d09000
 800c788:	46000000 	.word	0x46000000
 800c78c:	4c742400 	.word	0x4c742400
 800c790:	4a742400 	.word	0x4a742400
 800c794:	4c3ebc20 	.word	0x4c3ebc20

0800c798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c7a6:	4b53      	ldr	r3, [pc, #332]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7aa:	f003 0303 	and.w	r3, r3, #3
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d101      	bne.n	800c7b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e099      	b.n	800c8ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c7b6:	4b4f      	ldr	r3, [pc, #316]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a4e      	ldr	r2, [pc, #312]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c7bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c7c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7c2:	f7f6 fe7b 	bl	80034bc <HAL_GetTick>
 800c7c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c7c8:	e008      	b.n	800c7dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c7ca:	f7f6 fe77 	bl	80034bc <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d901      	bls.n	800c7dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e086      	b.n	800c8ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c7dc:	4b45      	ldr	r3, [pc, #276]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1f0      	bne.n	800c7ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c7e8:	4b42      	ldr	r3, [pc, #264]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	031b      	lsls	r3, r3, #12
 800c7f6:	493f      	ldr	r1, [pc, #252]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	628b      	str	r3, [r1, #40]	; 0x28
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	3b01      	subs	r3, #1
 800c802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	3b01      	subs	r3, #1
 800c80c:	025b      	lsls	r3, r3, #9
 800c80e:	b29b      	uxth	r3, r3
 800c810:	431a      	orrs	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	3b01      	subs	r3, #1
 800c818:	041b      	lsls	r3, r3, #16
 800c81a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c81e:	431a      	orrs	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	3b01      	subs	r3, #1
 800c826:	061b      	lsls	r3, r3, #24
 800c828:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c82c:	4931      	ldr	r1, [pc, #196]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c832:	4b30      	ldr	r3, [pc, #192]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	492d      	ldr	r1, [pc, #180]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c840:	4313      	orrs	r3, r2
 800c842:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c844:	4b2b      	ldr	r3, [pc, #172]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	f023 0220 	bic.w	r2, r3, #32
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	4928      	ldr	r1, [pc, #160]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c852:	4313      	orrs	r3, r2
 800c854:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c856:	4b27      	ldr	r3, [pc, #156]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85a:	4a26      	ldr	r2, [pc, #152]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c85c:	f023 0310 	bic.w	r3, r3, #16
 800c860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c862:	4b24      	ldr	r3, [pc, #144]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c866:	4b24      	ldr	r3, [pc, #144]	; (800c8f8 <RCCEx_PLL2_Config+0x160>)
 800c868:	4013      	ands	r3, r2
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	69d2      	ldr	r2, [r2, #28]
 800c86e:	00d2      	lsls	r2, r2, #3
 800c870:	4920      	ldr	r1, [pc, #128]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c872:	4313      	orrs	r3, r2
 800c874:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c876:	4b1f      	ldr	r3, [pc, #124]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87a:	4a1e      	ldr	r2, [pc, #120]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c87c:	f043 0310 	orr.w	r3, r3, #16
 800c880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d106      	bne.n	800c896 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c888:	4b1a      	ldr	r3, [pc, #104]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	4a19      	ldr	r2, [pc, #100]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c88e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c892:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c894:	e00f      	b.n	800c8b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d106      	bne.n	800c8aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c89c:	4b15      	ldr	r3, [pc, #84]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	4a14      	ldr	r2, [pc, #80]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c8a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c8a8:	e005      	b.n	800c8b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c8aa:	4b12      	ldr	r3, [pc, #72]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ae:	4a11      	ldr	r2, [pc, #68]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c8b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c8b6:	4b0f      	ldr	r3, [pc, #60]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a0e      	ldr	r2, [pc, #56]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c8bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8c2:	f7f6 fdfb 	bl	80034bc <HAL_GetTick>
 800c8c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c8c8:	e008      	b.n	800c8dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c8ca:	f7f6 fdf7 	bl	80034bc <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d901      	bls.n	800c8dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e006      	b.n	800c8ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c8dc:	4b05      	ldr	r3, [pc, #20]	; (800c8f4 <RCCEx_PLL2_Config+0x15c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d0f0      	beq.n	800c8ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	ffff0007 	.word	0xffff0007

0800c8fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c90a:	4b53      	ldr	r3, [pc, #332]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90e:	f003 0303 	and.w	r3, r3, #3
 800c912:	2b03      	cmp	r3, #3
 800c914:	d101      	bne.n	800c91a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e099      	b.n	800ca4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c91a:	4b4f      	ldr	r3, [pc, #316]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a4e      	ldr	r2, [pc, #312]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c926:	f7f6 fdc9 	bl	80034bc <HAL_GetTick>
 800c92a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c92c:	e008      	b.n	800c940 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c92e:	f7f6 fdc5 	bl	80034bc <HAL_GetTick>
 800c932:	4602      	mov	r2, r0
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d901      	bls.n	800c940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e086      	b.n	800ca4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c940:	4b45      	ldr	r3, [pc, #276]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1f0      	bne.n	800c92e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c94c:	4b42      	ldr	r3, [pc, #264]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c950:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	051b      	lsls	r3, r3, #20
 800c95a:	493f      	ldr	r1, [pc, #252]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c95c:	4313      	orrs	r3, r2
 800c95e:	628b      	str	r3, [r1, #40]	; 0x28
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	3b01      	subs	r3, #1
 800c966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	3b01      	subs	r3, #1
 800c970:	025b      	lsls	r3, r3, #9
 800c972:	b29b      	uxth	r3, r3
 800c974:	431a      	orrs	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	041b      	lsls	r3, r3, #16
 800c97e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c982:	431a      	orrs	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	3b01      	subs	r3, #1
 800c98a:	061b      	lsls	r3, r3, #24
 800c98c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c990:	4931      	ldr	r1, [pc, #196]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c992:	4313      	orrs	r3, r2
 800c994:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c996:	4b30      	ldr	r3, [pc, #192]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	492d      	ldr	r1, [pc, #180]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c9a8:	4b2b      	ldr	r3, [pc, #172]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	4928      	ldr	r1, [pc, #160]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c9ba:	4b27      	ldr	r3, [pc, #156]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9be:	4a26      	ldr	r2, [pc, #152]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c9c6:	4b24      	ldr	r3, [pc, #144]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9ca:	4b24      	ldr	r3, [pc, #144]	; (800ca5c <RCCEx_PLL3_Config+0x160>)
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	69d2      	ldr	r2, [r2, #28]
 800c9d2:	00d2      	lsls	r2, r2, #3
 800c9d4:	4920      	ldr	r1, [pc, #128]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c9da:	4b1f      	ldr	r3, [pc, #124]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9de:	4a1e      	ldr	r2, [pc, #120]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d106      	bne.n	800c9fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c9ec:	4b1a      	ldr	r3, [pc, #104]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f0:	4a19      	ldr	r2, [pc, #100]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800c9f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c9f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9f8:	e00f      	b.n	800ca1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d106      	bne.n	800ca0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ca00:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800ca02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca04:	4a14      	ldr	r2, [pc, #80]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800ca06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ca0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca0c:	e005      	b.n	800ca1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ca0e:	4b12      	ldr	r3, [pc, #72]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800ca10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca12:	4a11      	ldr	r2, [pc, #68]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800ca14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ca1a:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a0e      	ldr	r2, [pc, #56]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800ca20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca26:	f7f6 fd49 	bl	80034bc <HAL_GetTick>
 800ca2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca2c:	e008      	b.n	800ca40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ca2e:	f7f6 fd45 	bl	80034bc <HAL_GetTick>
 800ca32:	4602      	mov	r2, r0
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	d901      	bls.n	800ca40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e006      	b.n	800ca4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca40:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <RCCEx_PLL3_Config+0x15c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0f0      	beq.n	800ca2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	58024400 	.word	0x58024400
 800ca5c:	ffff0007 	.word	0xffff0007

0800ca60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b08a      	sub	sp, #40	; 0x28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e075      	b.n	800cb5e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d105      	bne.n	800ca8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7f5 fe59 	bl	800273c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2204      	movs	r2, #4
 800ca8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f868 	bl	800cb68 <HAL_SD_InitCard>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e05d      	b.n	800cb5e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800caa2:	f107 0308 	add.w	r3, r7, #8
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fdaf 	bl	800d60c <HAL_SD_GetCardStatus>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d001      	beq.n	800cab8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	e052      	b.n	800cb5e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cab8:	7e3b      	ldrb	r3, [r7, #24]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cabe:	7e7b      	ldrb	r3, [r7, #25]
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d10a      	bne.n	800cae2 <HAL_SD_Init+0x82>
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <HAL_SD_Init+0x78>
 800cad2:	6a3b      	ldr	r3, [r7, #32]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cade:	659a      	str	r2, [r3, #88]	; 0x58
 800cae0:	e00b      	b.n	800cafa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d104      	bne.n	800caf4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800caf0:	659a      	str	r2, [r3, #88]	; 0x58
 800caf2:	e002      	b.n	800cafa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fe6d 	bl	800d7e0 <HAL_SD_ConfigWideBusOperation>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d001      	beq.n	800cb10 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e026      	b.n	800cb5e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cb10:	f7f6 fcd4 	bl	80034bc <HAL_GetTick>
 800cb14:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb16:	e011      	b.n	800cb3c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cb18:	f7f6 fcd0 	bl	80034bc <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb26:	d109      	bne.n	800cb3c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e010      	b.n	800cb5e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 ff61 	bl	800da04 <HAL_SD_GetCardState>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d1e7      	bne.n	800cb18 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
	...

0800cb68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb68:	b590      	push	{r4, r7, lr}
 800cb6a:	b08d      	sub	sp, #52	; 0x34
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb74:	2300      	movs	r3, #0
 800cb76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cb80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cb84:	f04f 0100 	mov.w	r1, #0
 800cb88:	f7fe fd24 	bl	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb8c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d109      	bne.n	800cba8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2201      	movs	r2, #1
 800cb98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cba2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	e070      	b.n	800cc8a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	0a1b      	lsrs	r3, r3, #8
 800cbac:	4a39      	ldr	r2, [pc, #228]	; (800cc94 <HAL_SD_InitCard+0x12c>)
 800cbae:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb2:	091b      	lsrs	r3, r3, #4
 800cbb4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681c      	ldr	r4, [r3, #0]
 800cbba:	466a      	mov	r2, sp
 800cbbc:	f107 0318 	add.w	r3, r7, #24
 800cbc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbc4:	e882 0003 	stmia.w	r2, {r0, r1}
 800cbc8:	f107 030c 	add.w	r3, r7, #12
 800cbcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f004 fec4 	bl	801195c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f004 ff07 	bl	80119ec <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d005      	beq.n	800cbf0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d007      	beq.n	800cc06 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cbf6:	4a28      	ldr	r2, [pc, #160]	; (800cc98 <HAL_SD_InitCard+0x130>)
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbfe:	3301      	adds	r3, #1
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7f6 fc67 	bl	80034d4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 ffea 	bl	800dbe0 <SD_PowerON>
 800cc0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00b      	beq.n	800cc2c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	431a      	orrs	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e02e      	b.n	800cc8a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 ff09 	bl	800da44 <SD_InitCard>
 800cc32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc34:	6a3b      	ldr	r3, [r7, #32]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00b      	beq.n	800cc52 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	431a      	orrs	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e01b      	b.n	800cc8a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f004 ff5c 	bl	8011b18 <SDMMC_CmdBlockLength>
 800cc60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00f      	beq.n	800cc88 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a0b      	ldr	r2, [pc, #44]	; (800cc9c <HAL_SD_InitCard+0x134>)
 800cc6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	431a      	orrs	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e000      	b.n	800cc8a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	372c      	adds	r7, #44	; 0x2c
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd90      	pop	{r4, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	014f8b59 	.word	0x014f8b59
 800cc98:	00012110 	.word	0x00012110
 800cc9c:	1fe00fff 	.word	0x1fe00fff

0800cca0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08c      	sub	sp, #48	; 0x30
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
 800ccac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d107      	bne.n	800ccc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e08d      	b.n	800cde4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	f040 8086 	bne.w	800cde2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	441a      	add	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d907      	bls.n	800ccfa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e074      	b.n	800cde4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2203      	movs	r2, #3
 800ccfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2200      	movs	r2, #0
 800cd08:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	025a      	lsls	r2, r3, #9
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d002      	beq.n	800cd26 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	025b      	lsls	r3, r3, #9
 800cd24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd26:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	025b      	lsls	r3, r3, #9
 800cd30:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd32:	2390      	movs	r3, #144	; 0x90
 800cd34:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd36:	2302      	movs	r3, #2
 800cd38:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f107 0210 	add.w	r2, r7, #16
 800cd4a:	4611      	mov	r1, r2
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f004 feb7 	bl	8011ac0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	68da      	ldr	r2, [r3, #12]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd60:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d90a      	bls.n	800cd8e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2282      	movs	r2, #130	; 0x82
 800cd7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd84:	4618      	mov	r0, r3
 800cd86:	f004 ff0d 	bl	8011ba4 <SDMMC_CmdReadMultiBlock>
 800cd8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cd8c:	e009      	b.n	800cda2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2281      	movs	r2, #129	; 0x81
 800cd92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f004 fedf 	bl	8011b5e <SDMMC_CmdReadSingleBlock>
 800cda0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d012      	beq.n	800cdce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a0f      	ldr	r2, [pc, #60]	; (800cdec <HAL_SD_ReadBlocks_DMA+0x14c>)
 800cdae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	431a      	orrs	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e00a      	b.n	800cde4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cddc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	e000      	b.n	800cde4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cde2:	2302      	movs	r3, #2
  }
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3730      	adds	r7, #48	; 0x30
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	1fe00fff 	.word	0x1fe00fff

0800cdf0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b08c      	sub	sp, #48	; 0x30
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d107      	bne.n	800ce18 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e08d      	b.n	800cf34 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	f040 8086 	bne.w	800cf32 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	441a      	add	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d907      	bls.n	800ce4a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e074      	b.n	800cf34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2203      	movs	r2, #3
 800ce4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2200      	movs	r2, #0
 800ce58:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	025a      	lsls	r2, r3, #9
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d002      	beq.n	800ce76 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	025b      	lsls	r3, r3, #9
 800ce74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	025b      	lsls	r3, r3, #9
 800ce80:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ce82:	2390      	movs	r3, #144	; 0x90
 800ce84:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ce86:	2300      	movs	r3, #0
 800ce88:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f107 0210 	add.w	r2, r7, #16
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f004 fe0f 	bl	8011ac0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68da      	ldr	r2, [r3, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ceb0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2201      	movs	r2, #1
 800cec0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d90a      	bls.n	800cede <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	22a0      	movs	r2, #160	; 0xa0
 800cecc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ced4:	4618      	mov	r0, r3
 800ced6:	f004 feab 	bl	8011c30 <SDMMC_CmdWriteMultiBlock>
 800ceda:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cedc:	e009      	b.n	800cef2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2290      	movs	r2, #144	; 0x90
 800cee2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceea:	4618      	mov	r0, r3
 800ceec:	f004 fe7d 	bl	8011bea <SDMMC_CmdWriteSingleBlock>
 800cef0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d012      	beq.n	800cf1e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a0f      	ldr	r2, [pc, #60]	; (800cf3c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cefe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	431a      	orrs	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e00a      	b.n	800cf34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800cf2c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e000      	b.n	800cf34 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cf32:	2302      	movs	r3, #2
  }
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3730      	adds	r7, #48	; 0x30
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	1fe00fff 	.word	0x1fe00fff

0800cf40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d008      	beq.n	800cf6e <HAL_SD_IRQHandler+0x2e>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f003 0308 	and.w	r3, r3, #8
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d003      	beq.n	800cf6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f001 f926 	bl	800e1b8 <SD_Read_IT>
 800cf6c:	e19a      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 80ac 	beq.w	800d0d6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	4b59      	ldr	r3, [pc, #356]	; (800d0f8 <HAL_SD_IRQHandler+0x1b8>)
 800cf94:	400b      	ands	r3, r1
 800cf96:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cfa6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68da      	ldr	r2, [r3, #12]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfb6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f003 0308 	and.w	r3, r3, #8
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d038      	beq.n	800d034 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f003 0302 	and.w	r3, r3, #2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d104      	bne.n	800cfd6 <HAL_SD_IRQHandler+0x96>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f003 0320 	and.w	r3, r3, #32
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d011      	beq.n	800cffa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f004 fe4c 	bl	8011c78 <SDMMC_CmdStopTransfer>
 800cfe0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d008      	beq.n	800cffa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	431a      	orrs	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f95b 	bl	800d2b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a3f      	ldr	r2, [pc, #252]	; (800d0fc <HAL_SD_IRQHandler+0x1bc>)
 800d000:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	2b00      	cmp	r3, #0
 800d018:	d104      	bne.n	800d024 <HAL_SD_IRQHandler+0xe4>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f003 0302 	and.w	r3, r3, #2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f006 fe4d 	bl	8013cc4 <HAL_SD_RxCpltCallback>
 800d02a:	e13b      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f006 fe3f 	bl	8013cb0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d032:	e137      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 8132 	beq.w	800d2a4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2200      	movs	r2, #0
 800d046:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2200      	movs	r2, #0
 800d04e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2200      	movs	r2, #0
 800d056:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f003 0302 	and.w	r3, r3, #2
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d104      	bne.n	800d06c <HAL_SD_IRQHandler+0x12c>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f003 0320 	and.w	r3, r3, #32
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d011      	beq.n	800d090 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4618      	mov	r0, r3
 800d072:	f004 fe01 	bl	8011c78 <SDMMC_CmdStopTransfer>
 800d076:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d008      	beq.n	800d090 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	431a      	orrs	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f910 	bl	800d2b0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f003 0310 	and.w	r3, r3, #16
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d104      	bne.n	800d0b2 <HAL_SD_IRQHandler+0x172>
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f003 0320 	and.w	r3, r3, #32
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f006 fdfc 	bl	8013cb0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d105      	bne.n	800d0ce <HAL_SD_IRQHandler+0x18e>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f003 0302 	and.w	r3, r3, #2
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f000 80eb 	beq.w	800d2a4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f006 fdf8 	bl	8013cc4 <HAL_SD_RxCpltCallback>
}
 800d0d4:	e0e6      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00d      	beq.n	800d100 <HAL_SD_IRQHandler+0x1c0>
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f003 0308 	and.w	r3, r3, #8
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d008      	beq.n	800d100 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f001 f8a8 	bl	800e244 <SD_Write_IT>
 800d0f4:	e0d6      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
 800d0f6:	bf00      	nop
 800d0f8:	ffff3ec5 	.word	0xffff3ec5
 800d0fc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d106:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 809d 	beq.w	800d24a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d116:	f003 0302 	and.w	r3, r3, #2
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d005      	beq.n	800d12a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d122:	f043 0202 	orr.w	r2, r3, #2
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d130:	f003 0308 	and.w	r3, r3, #8
 800d134:	2b00      	cmp	r3, #0
 800d136:	d005      	beq.n	800d144 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d13c:	f043 0208 	orr.w	r2, r3, #8
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14a:	f003 0320 	and.w	r3, r3, #32
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d005      	beq.n	800d15e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d156:	f043 0220 	orr.w	r2, r3, #32
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d164:	f003 0310 	and.w	r3, r3, #16
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d005      	beq.n	800d178 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d170:	f043 0210 	orr.w	r2, r3, #16
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a4b      	ldr	r2, [pc, #300]	; (800d2ac <HAL_SD_IRQHandler+0x36c>)
 800d17e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d18e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68da      	ldr	r2, [r3, #12]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d19e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68da      	ldr	r2, [r3, #12]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d1be:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f004 fd57 	bl	8011c78 <SDMMC_CmdStopTransfer>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d0:	431a      	orrs	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68da      	ldr	r2, [r3, #12]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1e4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f003 0308 	and.w	r3, r3, #8
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2200      	movs	r2, #0
 800d206:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 f851 	bl	800d2b0 <HAL_SD_ErrorCallback>
}
 800d20e:	e049      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d216:	2b00      	cmp	r3, #0
 800d218:	d044      	beq.n	800d2a4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d040      	beq.n	800d2a4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d230:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2200      	movs	r2, #0
 800d238:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f834 	bl	800d2b0 <HAL_SD_ErrorCallback>
}
 800d248:	e02c      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d025      	beq.n	800d2a4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d260:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d268:	f003 0304 	and.w	r3, r3, #4
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10c      	bne.n	800d28a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f001 f84a 	bl	800e314 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d280:	e010      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f001 f832 	bl	800e2ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d288:	e00c      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f003 0320 	and.w	r3, r3, #32
 800d290:	2b00      	cmp	r3, #0
 800d292:	d003      	beq.n	800d29c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f001 f833 	bl	800e300 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d29a:	e003      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 f81b 	bl	800e2d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d2a2:	e7ff      	b.n	800d2a4 <HAL_SD_IRQHandler+0x364>
 800d2a4:	bf00      	nop
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	18000f3a 	.word	0x18000f3a

0800d2b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2d2:	0f9b      	lsrs	r3, r3, #30
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2de:	0e9b      	lsrs	r3, r3, #26
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	f003 030f 	and.w	r3, r3, #15
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f0:	0e1b      	lsrs	r3, r3, #24
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 0303 	and.w	r3, r3, #3
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d302:	0c1b      	lsrs	r3, r3, #16
 800d304:	b2da      	uxtb	r2, r3
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d30e:	0a1b      	lsrs	r3, r3, #8
 800d310:	b2da      	uxtb	r2, r3
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d324:	0d1b      	lsrs	r3, r3, #20
 800d326:	b29a      	uxth	r2, r3
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d330:	0c1b      	lsrs	r3, r3, #16
 800d332:	b2db      	uxtb	r3, r3
 800d334:	f003 030f 	and.w	r3, r3, #15
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d342:	0bdb      	lsrs	r3, r3, #15
 800d344:	b2db      	uxtb	r3, r3
 800d346:	f003 0301 	and.w	r3, r3, #1
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d354:	0b9b      	lsrs	r3, r3, #14
 800d356:	b2db      	uxtb	r3, r3
 800d358:	f003 0301 	and.w	r3, r3, #1
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d366:	0b5b      	lsrs	r3, r3, #13
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d378:	0b1b      	lsrs	r3, r3, #12
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f003 0301 	and.w	r3, r3, #1
 800d380:	b2da      	uxtb	r2, r3
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2200      	movs	r2, #0
 800d38a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d390:	2b00      	cmp	r3, #0
 800d392:	d163      	bne.n	800d45c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d398:	009a      	lsls	r2, r3, #2
 800d39a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d39e:	4013      	ands	r3, r2
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d3a4:	0f92      	lsrs	r2, r2, #30
 800d3a6:	431a      	orrs	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b0:	0edb      	lsrs	r3, r3, #27
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	f003 0307 	and.w	r3, r3, #7
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3c2:	0e1b      	lsrs	r3, r3, #24
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3d4:	0d5b      	lsrs	r3, r3, #21
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f003 0307 	and.w	r3, r3, #7
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3e6:	0c9b      	lsrs	r3, r3, #18
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	f003 0307 	and.w	r3, r3, #7
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3f8:	0bdb      	lsrs	r3, r3, #15
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 0307 	and.w	r3, r3, #7
 800d400:	b2da      	uxtb	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	1c5a      	adds	r2, r3, #1
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	7e1b      	ldrb	r3, [r3, #24]
 800d414:	b2db      	uxtb	r3, r3
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	3302      	adds	r3, #2
 800d41c:	2201      	movs	r2, #1
 800d41e:	fa02 f303 	lsl.w	r3, r2, r3
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d426:	fb03 f202 	mul.w	r2, r3, r2
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	7a1b      	ldrb	r3, [r3, #8]
 800d432:	b2db      	uxtb	r3, r3
 800d434:	f003 030f 	and.w	r3, r3, #15
 800d438:	2201      	movs	r2, #1
 800d43a:	409a      	lsls	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d448:	0a52      	lsrs	r2, r2, #9
 800d44a:	fb03 f202 	mul.w	r2, r3, r2
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d458:	655a      	str	r2, [r3, #84]	; 0x54
 800d45a:	e031      	b.n	800d4c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d460:	2b01      	cmp	r3, #1
 800d462:	d11d      	bne.n	800d4a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d468:	041b      	lsls	r3, r3, #16
 800d46a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d472:	0c1b      	lsrs	r3, r3, #16
 800d474:	431a      	orrs	r2, r3
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	691b      	ldr	r3, [r3, #16]
 800d47e:	3301      	adds	r3, #1
 800d480:	029a      	lsls	r2, r3, #10
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d494:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	655a      	str	r2, [r3, #84]	; 0x54
 800d49e:	e00f      	b.n	800d4c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a58      	ldr	r2, [pc, #352]	; (800d608 <HAL_SD_GetCardCSD+0x344>)
 800d4a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e09d      	b.n	800d5fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4c4:	0b9b      	lsrs	r3, r3, #14
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4d6:	09db      	lsrs	r3, r3, #7
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4f8:	0fdb      	lsrs	r3, r3, #31
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d504:	0f5b      	lsrs	r3, r3, #29
 800d506:	b2db      	uxtb	r3, r3
 800d508:	f003 0303 	and.w	r3, r3, #3
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d516:	0e9b      	lsrs	r3, r3, #26
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f003 0307 	and.w	r3, r3, #7
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d528:	0d9b      	lsrs	r3, r3, #22
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	f003 030f 	and.w	r3, r3, #15
 800d530:	b2da      	uxtb	r2, r3
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d53a:	0d5b      	lsrs	r3, r3, #21
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	b2da      	uxtb	r2, r3
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d556:	0c1b      	lsrs	r3, r3, #16
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d56a:	0bdb      	lsrs	r3, r3, #15
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	b2da      	uxtb	r2, r3
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d57e:	0b9b      	lsrs	r3, r3, #14
 800d580:	b2db      	uxtb	r3, r3
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	b2da      	uxtb	r2, r3
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d592:	0b5b      	lsrs	r3, r3, #13
 800d594:	b2db      	uxtb	r3, r3
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5a6:	0b1b      	lsrs	r3, r3, #12
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5ba:	0a9b      	lsrs	r3, r3, #10
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0303 	and.w	r3, r3, #3
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5ce:	0a1b      	lsrs	r3, r3, #8
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	f003 0303 	and.w	r3, r3, #3
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5e2:	085b      	lsrs	r3, r3, #1
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	1fe00fff 	.word	0x1fe00fff

0800d60c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b094      	sub	sp, #80	; 0x50
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b03      	cmp	r3, #3
 800d626:	d101      	bne.n	800d62c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	e0a7      	b.n	800d77c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d62c:	f107 0308 	add.w	r3, r7, #8
 800d630:	4619      	mov	r1, r3
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fb62 	bl	800dcfc <SD_SendSDStatus>
 800d638:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d011      	beq.n	800d664 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a4f      	ldr	r2, [pc, #316]	; (800d784 <HAL_SD_GetCardStatus+0x178>)
 800d646:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d64e:	431a      	orrs	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2201      	movs	r2, #1
 800d658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d662:	e070      	b.n	800d746 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	099b      	lsrs	r3, r3, #6
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	f003 0303 	and.w	r3, r3, #3
 800d66e:	b2da      	uxtb	r2, r3
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	095b      	lsrs	r3, r3, #5
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	0a1b      	lsrs	r3, r3, #8
 800d688:	b29b      	uxth	r3, r3
 800d68a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d68e:	b29a      	uxth	r2, r3
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	0e1b      	lsrs	r3, r3, #24
 800d694:	b29b      	uxth	r3, r3
 800d696:	4313      	orrs	r3, r2
 800d698:	b29a      	uxth	r2, r3
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	061a      	lsls	r2, r3, #24
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	021b      	lsls	r3, r3, #8
 800d6a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	0a1b      	lsrs	r3, r3, #8
 800d6b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d6b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	0e1b      	lsrs	r3, r3, #24
 800d6ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	0a1b      	lsrs	r3, r3, #8
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	0d1b      	lsrs	r3, r3, #20
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	f003 030f 	and.w	r3, r3, #15
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	0c1b      	lsrs	r3, r3, #16
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	0a9b      	lsrs	r3, r3, #10
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d708:	b2da      	uxtb	r2, r3
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	0a1b      	lsrs	r3, r3, #8
 800d712:	b2db      	uxtb	r3, r3
 800d714:	f003 0303 	and.w	r3, r3, #3
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	091b      	lsrs	r3, r3, #4
 800d722:	b2db      	uxtb	r3, r3
 800d724:	f003 030f 	and.w	r3, r3, #15
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	b2db      	uxtb	r3, r3
 800d732:	f003 030f 	and.w	r3, r3, #15
 800d736:	b2da      	uxtb	r2, r3
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	0e1b      	lsrs	r3, r3, #24
 800d740:	b2da      	uxtb	r2, r3
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d74e:	4618      	mov	r0, r3
 800d750:	f004 f9e2 	bl	8011b18 <SDMMC_CmdBlockLength>
 800d754:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d00d      	beq.n	800d778 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a08      	ldr	r2, [pc, #32]	; (800d784 <HAL_SD_GetCardStatus+0x178>)
 800d762:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d768:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d778:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3750      	adds	r7, #80	; 0x50
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	1fe00fff 	.word	0x1fe00fff

0800d788 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d7e0:	b590      	push	{r4, r7, lr}
 800d7e2:	b08d      	sub	sp, #52	; 0x34
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	d02e      	beq.n	800d85e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d806:	d106      	bne.n	800d816 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	635a      	str	r2, [r3, #52]	; 0x34
 800d814:	e029      	b.n	800d86a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d81c:	d10a      	bne.n	800d834 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fb64 	bl	800deec <SD_WideBus_Enable>
 800d824:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	431a      	orrs	r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	635a      	str	r2, [r3, #52]	; 0x34
 800d832:	e01a      	b.n	800d86a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10a      	bne.n	800d850 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fba1 	bl	800df82 <SD_WideBus_Disable>
 800d840:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	431a      	orrs	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	635a      	str	r2, [r3, #52]	; 0x34
 800d84e:	e00c      	b.n	800d86a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d854:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	635a      	str	r2, [r3, #52]	; 0x34
 800d85c:	e005      	b.n	800d86a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d862:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d007      	beq.n	800d882 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a5f      	ldr	r2, [pc, #380]	; (800d9f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d878:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d87a:	2301      	movs	r3, #1
 800d87c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d880:	e096      	b.n	800d9b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d882:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d886:	f04f 0100 	mov.w	r1, #0
 800d88a:	f7fd fea3 	bl	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d88e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 8083 	beq.w	800d99e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	695a      	ldr	r2, [r3, #20]
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	4950      	ldr	r1, [pc, #320]	; (800d9f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d8b6:	fba1 1303 	umull	r1, r3, r1, r3
 800d8ba:	0e1b      	lsrs	r3, r3, #24
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d303      	bcc.n	800d8c8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	61bb      	str	r3, [r7, #24]
 800d8c6:	e05a      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8d0:	d103      	bne.n	800d8da <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	61bb      	str	r3, [r7, #24]
 800d8d8:	e051      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e2:	d126      	bne.n	800d932 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	695b      	ldr	r3, [r3, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d10e      	bne.n	800d90a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	4a43      	ldr	r2, [pc, #268]	; (800d9fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d906      	bls.n	800d902 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	4a40      	ldr	r2, [pc, #256]	; (800d9f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d8fc:	0e5b      	lsrs	r3, r3, #25
 800d8fe:	61bb      	str	r3, [r7, #24]
 800d900:	e03d      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	61bb      	str	r3, [r7, #24]
 800d908:	e039      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	69fa      	ldr	r2, [r7, #28]
 800d912:	fbb2 f3f3 	udiv	r3, r2, r3
 800d916:	4a39      	ldr	r2, [pc, #228]	; (800d9fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d906      	bls.n	800d92a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	4a36      	ldr	r2, [pc, #216]	; (800d9f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d920:	fba2 2303 	umull	r2, r3, r2, r3
 800d924:	0e5b      	lsrs	r3, r3, #25
 800d926:	61bb      	str	r3, [r7, #24]
 800d928:	e029      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	61bb      	str	r3, [r7, #24]
 800d930:	e025      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10e      	bne.n	800d958 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	4a30      	ldr	r2, [pc, #192]	; (800da00 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d906      	bls.n	800d950 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	4a2c      	ldr	r2, [pc, #176]	; (800d9f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d946:	fba2 2303 	umull	r2, r3, r2, r3
 800d94a:	0e1b      	lsrs	r3, r3, #24
 800d94c:	61bb      	str	r3, [r7, #24]
 800d94e:	e016      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	61bb      	str	r3, [r7, #24]
 800d956:	e012      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	695b      	ldr	r3, [r3, #20]
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	69fa      	ldr	r2, [r7, #28]
 800d960:	fbb2 f3f3 	udiv	r3, r2, r3
 800d964:	4a26      	ldr	r2, [pc, #152]	; (800da00 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d906      	bls.n	800d978 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	4a22      	ldr	r2, [pc, #136]	; (800d9f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d96e:	fba2 2303 	umull	r2, r3, r2, r3
 800d972:	0e1b      	lsrs	r3, r3, #24
 800d974:	61bb      	str	r3, [r7, #24]
 800d976:	e002      	b.n	800d97e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681c      	ldr	r4, [r3, #0]
 800d982:	466a      	mov	r2, sp
 800d984:	f107 0314 	add.w	r3, r7, #20
 800d988:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d98c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d990:	f107 0308 	add.w	r3, r7, #8
 800d994:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d996:	4620      	mov	r0, r4
 800d998:	f003 ffe0 	bl	801195c <SDMMC_Init>
 800d99c:	e008      	b.n	800d9b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f004 f8ad 	bl	8011b18 <SDMMC_CmdBlockLength>
 800d9be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00c      	beq.n	800d9e0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a0a      	ldr	r2, [pc, #40]	; (800d9f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d9cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800d9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	372c      	adds	r7, #44	; 0x2c
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd90      	pop	{r4, r7, pc}
 800d9f4:	1fe00fff 	.word	0x1fe00fff
 800d9f8:	55e63b89 	.word	0x55e63b89
 800d9fc:	02faf080 	.word	0x02faf080
 800da00:	017d7840 	.word	0x017d7840

0800da04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800da10:	f107 030c 	add.w	r3, r7, #12
 800da14:	4619      	mov	r1, r3
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fa40 	bl	800de9c <SD_SendStatus>
 800da1c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d005      	beq.n	800da30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	431a      	orrs	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	0a5b      	lsrs	r3, r3, #9
 800da34:	f003 030f 	and.w	r3, r3, #15
 800da38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800da3a:	693b      	ldr	r3, [r7, #16]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b090      	sub	sp, #64	; 0x40
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800da4c:	2300      	movs	r3, #0
 800da4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800da50:	f7f5 fd34 	bl	80034bc <HAL_GetTick>
 800da54:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f003 ffd7 	bl	8011a0e <SDMMC_GetPowerState>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da6a:	e0b5      	b.n	800dbd8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da70:	2b03      	cmp	r3, #3
 800da72:	d02e      	beq.n	800dad2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4618      	mov	r0, r3
 800da7a:	f004 fa22 	bl	8011ec2 <SDMMC_CmdSendCID>
 800da7e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <SD_InitCard+0x46>
    {
      return errorstate;
 800da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da88:	e0a6      	b.n	800dbd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2100      	movs	r1, #0
 800da90:	4618      	mov	r0, r3
 800da92:	f004 f802 	bl	8011a9a <SDMMC_GetResponse>
 800da96:	4602      	mov	r2, r0
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2104      	movs	r1, #4
 800daa2:	4618      	mov	r0, r3
 800daa4:	f003 fff9 	bl	8011a9a <SDMMC_GetResponse>
 800daa8:	4602      	mov	r2, r0
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2108      	movs	r1, #8
 800dab4:	4618      	mov	r0, r3
 800dab6:	f003 fff0 	bl	8011a9a <SDMMC_GetResponse>
 800daba:	4602      	mov	r2, r0
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	210c      	movs	r1, #12
 800dac6:	4618      	mov	r0, r3
 800dac8:	f003 ffe7 	bl	8011a9a <SDMMC_GetResponse>
 800dacc:	4602      	mov	r2, r0
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d01d      	beq.n	800db16 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dada:	e019      	b.n	800db10 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f107 020a 	add.w	r2, r7, #10
 800dae4:	4611      	mov	r1, r2
 800dae6:	4618      	mov	r0, r3
 800dae8:	f004 fa2a 	bl	8011f40 <SDMMC_CmdSetRelAdd>
 800daec:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	e06f      	b.n	800dbd8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800daf8:	f7f5 fce0 	bl	80034bc <HAL_GetTick>
 800dafc:	4602      	mov	r2, r0
 800dafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	f241 3287 	movw	r2, #4999	; 0x1387
 800db06:	4293      	cmp	r3, r2
 800db08:	d902      	bls.n	800db10 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800db0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db0e:	e063      	b.n	800dbd8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800db10:	897b      	ldrh	r3, [r7, #10]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d0e2      	beq.n	800dadc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	2b03      	cmp	r3, #3
 800db1c:	d036      	beq.n	800db8c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800db1e:	897b      	ldrh	r3, [r7, #10]
 800db20:	461a      	mov	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db2e:	041b      	lsls	r3, r3, #16
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f004 f9e4 	bl	8011f00 <SDMMC_CmdSendCSD>
 800db38:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800db3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <SD_InitCard+0x100>
    {
      return errorstate;
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	e049      	b.n	800dbd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2100      	movs	r1, #0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f003 ffa5 	bl	8011a9a <SDMMC_GetResponse>
 800db50:	4602      	mov	r2, r0
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2104      	movs	r1, #4
 800db5c:	4618      	mov	r0, r3
 800db5e:	f003 ff9c 	bl	8011a9a <SDMMC_GetResponse>
 800db62:	4602      	mov	r2, r0
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2108      	movs	r1, #8
 800db6e:	4618      	mov	r0, r3
 800db70:	f003 ff93 	bl	8011a9a <SDMMC_GetResponse>
 800db74:	4602      	mov	r2, r0
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	210c      	movs	r1, #12
 800db80:	4618      	mov	r0, r3
 800db82:	f003 ff8a 	bl	8011a9a <SDMMC_GetResponse>
 800db86:	4602      	mov	r2, r0
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2104      	movs	r1, #4
 800db92:	4618      	mov	r0, r3
 800db94:	f003 ff81 	bl	8011a9a <SDMMC_GetResponse>
 800db98:	4603      	mov	r3, r0
 800db9a:	0d1a      	lsrs	r2, r3, #20
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dba0:	f107 030c 	add.w	r3, r7, #12
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7ff fb8c 	bl	800d2c4 <HAL_SD_GetCardCSD>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d002      	beq.n	800dbb8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dbb6:	e00f      	b.n	800dbd8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc0:	041b      	lsls	r3, r3, #16
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	f004 f893 	bl	8011cf0 <SDMMC_CmdSelDesel>
 800dbca:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <SD_InitCard+0x192>
  {
    return errorstate;
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd4:	e000      	b.n	800dbd8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3740      	adds	r7, #64	; 0x40
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800dbec:	2300      	movs	r3, #0
 800dbee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f004 f89c 	bl	8011d36 <SDMMC_CmdGoIdleState>
 800dbfe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	e072      	b.n	800dcf0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f004 f8af 	bl	8011d72 <SDMMC_CmdOperCond>
 800dc14:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc1c:	d10d      	bne.n	800dc3a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f004 f884 	bl	8011d36 <SDMMC_CmdGoIdleState>
 800dc2e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <SD_PowerON+0x60>
    {
      return errorstate;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	e05a      	b.n	800dcf0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d137      	bne.n	800dcb8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f004 f8af 	bl	8011db2 <SDMMC_CmdAppCommand>
 800dc54:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d02d      	beq.n	800dcb8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc60:	e046      	b.n	800dcf0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f004 f8a2 	bl	8011db2 <SDMMC_CmdAppCommand>
 800dc6e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <SD_PowerON+0x9a>
    {
      return errorstate;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	e03a      	b.n	800dcf0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	491e      	ldr	r1, [pc, #120]	; (800dcf8 <SD_PowerON+0x118>)
 800dc80:	4618      	mov	r0, r3
 800dc82:	f004 f8b9 	bl	8011df8 <SDMMC_CmdAppOperCommand>
 800dc86:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d002      	beq.n	800dc94 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc92:	e02d      	b.n	800dcf0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2100      	movs	r1, #0
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f003 fefd 	bl	8011a9a <SDMMC_GetResponse>
 800dca0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	0fdb      	lsrs	r3, r3, #31
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d101      	bne.n	800dcae <SD_PowerON+0xce>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e000      	b.n	800dcb0 <SD_PowerON+0xd0>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	613b      	str	r3, [r7, #16]

    count++;
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d802      	bhi.n	800dcc8 <SD_PowerON+0xe8>
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d0cc      	beq.n	800dc62 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d902      	bls.n	800dcd8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dcd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dcd6:	e00b      	b.n	800dcf0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	c1100000 	.word	0xc1100000

0800dcfc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08c      	sub	sp, #48	; 0x30
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd06:	f7f5 fbd9 	bl	80034bc <HAL_GetTick>
 800dd0a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2100      	movs	r1, #0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f003 febf 	bl	8011a9a <SDMMC_GetResponse>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd26:	d102      	bne.n	800dd2e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd2c:	e0b0      	b.n	800de90 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2140      	movs	r1, #64	; 0x40
 800dd34:	4618      	mov	r0, r3
 800dd36:	f003 feef 	bl	8011b18 <SDMMC_CmdBlockLength>
 800dd3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d005      	beq.n	800dd4e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	e0a0      	b.n	800de90 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd56:	041b      	lsls	r3, r3, #16
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	f004 f829 	bl	8011db2 <SDMMC_CmdAppCommand>
 800dd60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d005      	beq.n	800dd74 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dd70:	6a3b      	ldr	r3, [r7, #32]
 800dd72:	e08d      	b.n	800de90 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd74:	f04f 33ff 	mov.w	r3, #4294967295
 800dd78:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800dd7a:	2340      	movs	r3, #64	; 0x40
 800dd7c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800dd7e:	2360      	movs	r3, #96	; 0x60
 800dd80:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dd82:	2302      	movs	r3, #2
 800dd84:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f107 0208 	add.w	r2, r7, #8
 800dd96:	4611      	mov	r1, r2
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f003 fe91 	bl	8011ac0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f004 f911 	bl	8011fca <SDMMC_CmdStatusRegister>
 800dda8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ddaa:	6a3b      	ldr	r3, [r7, #32]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d02b      	beq.n	800de08 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	e069      	b.n	800de90 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d013      	beq.n	800ddf2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ddca:	2300      	movs	r3, #0
 800ddcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddce:	e00d      	b.n	800ddec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f003 fdeb 	bl	80119b0 <SDMMC_ReadFIFO>
 800ddda:	4602      	mov	r2, r0
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	601a      	str	r2, [r3, #0]
        pData++;
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	3304      	adds	r3, #4
 800dde4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800dde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde8:	3301      	adds	r3, #1
 800ddea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddee:	2b07      	cmp	r3, #7
 800ddf0:	d9ee      	bls.n	800ddd0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ddf2:	f7f5 fb63 	bl	80034bc <HAL_GetTick>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de00:	d102      	bne.n	800de08 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800de02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de06:	e043      	b.n	800de90 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0d2      	beq.n	800ddbc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de1c:	f003 0308 	and.w	r3, r3, #8
 800de20:	2b00      	cmp	r3, #0
 800de22:	d001      	beq.n	800de28 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800de24:	2308      	movs	r3, #8
 800de26:	e033      	b.n	800de90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2e:	f003 0302 	and.w	r3, r3, #2
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800de36:	2302      	movs	r3, #2
 800de38:	e02a      	b.n	800de90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de40:	f003 0320 	and.w	r3, r3, #32
 800de44:	2b00      	cmp	r3, #0
 800de46:	d017      	beq.n	800de78 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800de48:	2320      	movs	r3, #32
 800de4a:	e021      	b.n	800de90 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f003 fdad 	bl	80119b0 <SDMMC_ReadFIFO>
 800de56:	4602      	mov	r2, r0
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	601a      	str	r2, [r3, #0]
    pData++;
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	3304      	adds	r3, #4
 800de60:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800de62:	f7f5 fb2b 	bl	80034bc <HAL_GetTick>
 800de66:	4602      	mov	r2, r0
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	1ad3      	subs	r3, r2, r3
 800de6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de70:	d102      	bne.n	800de78 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800de72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de76:	e00b      	b.n	800de90 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e2      	bne.n	800de4c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a03      	ldr	r2, [pc, #12]	; (800de98 <SD_SendSDStatus+0x19c>)
 800de8c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3730      	adds	r7, #48	; 0x30
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	18000f3a 	.word	0x18000f3a

0800de9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d102      	bne.n	800deb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800deac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800deb0:	e018      	b.n	800dee4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deba:	041b      	lsls	r3, r3, #16
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f004 f860 	bl	8011f84 <SDMMC_CmdSendStatus>
 800dec4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	e009      	b.n	800dee4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2100      	movs	r1, #0
 800ded6:	4618      	mov	r0, r3
 800ded8:	f003 fddf 	bl	8011a9a <SDMMC_GetResponse>
 800dedc:	4602      	mov	r2, r0
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800def4:	2300      	movs	r3, #0
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	2300      	movs	r3, #0
 800defa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2100      	movs	r1, #0
 800df02:	4618      	mov	r0, r3
 800df04:	f003 fdc9 	bl	8011a9a <SDMMC_GetResponse>
 800df08:	4603      	mov	r3, r0
 800df0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df12:	d102      	bne.n	800df1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df18:	e02f      	b.n	800df7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800df1a:	f107 030c 	add.w	r3, r7, #12
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 f879 	bl	800e018 <SD_FindSCR>
 800df26:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d001      	beq.n	800df32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	e023      	b.n	800df7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d01c      	beq.n	800df76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df44:	041b      	lsls	r3, r3, #16
 800df46:	4619      	mov	r1, r3
 800df48:	4610      	mov	r0, r2
 800df4a:	f003 ff32 	bl	8011db2 <SDMMC_CmdAppCommand>
 800df4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	e00f      	b.n	800df7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2102      	movs	r1, #2
 800df60:	4618      	mov	r0, r3
 800df62:	f003 ff69 	bl	8011e38 <SDMMC_CmdBusWidth>
 800df66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	e003      	b.n	800df7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800df72:	2300      	movs	r3, #0
 800df74:	e001      	b.n	800df7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b086      	sub	sp, #24
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800df8a:	2300      	movs	r3, #0
 800df8c:	60fb      	str	r3, [r7, #12]
 800df8e:	2300      	movs	r3, #0
 800df90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2100      	movs	r1, #0
 800df98:	4618      	mov	r0, r3
 800df9a:	f003 fd7e 	bl	8011a9a <SDMMC_GetResponse>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dfa8:	d102      	bne.n	800dfb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dfaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfae:	e02f      	b.n	800e010 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dfb0:	f107 030c 	add.w	r3, r7, #12
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 f82e 	bl	800e018 <SD_FindSCR>
 800dfbc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d001      	beq.n	800dfc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	e023      	b.n	800e010 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d01c      	beq.n	800e00c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfda:	041b      	lsls	r3, r3, #16
 800dfdc:	4619      	mov	r1, r3
 800dfde:	4610      	mov	r0, r2
 800dfe0:	f003 fee7 	bl	8011db2 <SDMMC_CmdAppCommand>
 800dfe4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	e00f      	b.n	800e010 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2100      	movs	r1, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f003 ff1e 	bl	8011e38 <SDMMC_CmdBusWidth>
 800dffc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	e003      	b.n	800e010 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e008:	2300      	movs	r3, #0
 800e00a:	e001      	b.n	800e010 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e00c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b08e      	sub	sp, #56	; 0x38
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e022:	f7f5 fa4b 	bl	80034bc <HAL_GetTick>
 800e026:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e028:	2300      	movs	r3, #0
 800e02a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e02c:	2300      	movs	r3, #0
 800e02e:	60bb      	str	r3, [r7, #8]
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2108      	movs	r1, #8
 800e03e:	4618      	mov	r0, r3
 800e040:	f003 fd6a 	bl	8011b18 <SDMMC_CmdBlockLength>
 800e044:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d001      	beq.n	800e050 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04e:	e0ad      	b.n	800e1ac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e058:	041b      	lsls	r3, r3, #16
 800e05a:	4619      	mov	r1, r3
 800e05c:	4610      	mov	r0, r2
 800e05e:	f003 fea8 	bl	8011db2 <SDMMC_CmdAppCommand>
 800e062:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	e09e      	b.n	800e1ac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e06e:	f04f 33ff 	mov.w	r3, #4294967295
 800e072:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e074:	2308      	movs	r3, #8
 800e076:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e078:	2330      	movs	r3, #48	; 0x30
 800e07a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e07c:	2302      	movs	r3, #2
 800e07e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e080:	2300      	movs	r3, #0
 800e082:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e084:	2301      	movs	r3, #1
 800e086:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f107 0210 	add.w	r2, r7, #16
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f003 fd14 	bl	8011ac0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f003 feee 	bl	8011e7e <SDMMC_CmdSendSCR>
 800e0a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d027      	beq.n	800e0fa <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	e07e      	b.n	800e1ac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d113      	bne.n	800e0e4 <SD_FindSCR+0xcc>
 800e0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d110      	bne.n	800e0e4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f003 fc72 	bl	80119b0 <SDMMC_ReadFIFO>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f003 fc6b 	bl	80119b0 <SDMMC_ReadFIFO>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	60fb      	str	r3, [r7, #12]
      index++;
 800e0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e0e4:	f7f5 f9ea 	bl	80034bc <HAL_GetTick>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f2:	d102      	bne.n	800e0fa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e0f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0f8:	e058      	b.n	800e1ac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e100:	f240 532a 	movw	r3, #1322	; 0x52a
 800e104:	4013      	ands	r3, r2
 800e106:	2b00      	cmp	r3, #0
 800e108:	d0d1      	beq.n	800e0ae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e110:	f003 0308 	and.w	r3, r3, #8
 800e114:	2b00      	cmp	r3, #0
 800e116:	d005      	beq.n	800e124 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2208      	movs	r2, #8
 800e11e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e120:	2308      	movs	r3, #8
 800e122:	e043      	b.n	800e1ac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e12a:	f003 0302 	and.w	r3, r3, #2
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d005      	beq.n	800e13e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2202      	movs	r2, #2
 800e138:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e13a:	2302      	movs	r3, #2
 800e13c:	e036      	b.n	800e1ac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e144:	f003 0320 	and.w	r3, r3, #32
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2220      	movs	r2, #32
 800e152:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e154:	2320      	movs	r3, #32
 800e156:	e029      	b.n	800e1ac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a15      	ldr	r2, [pc, #84]	; (800e1b4 <SD_FindSCR+0x19c>)
 800e15e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	061a      	lsls	r2, r3, #24
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	021b      	lsls	r3, r3, #8
 800e168:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e16c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	0a1b      	lsrs	r3, r3, #8
 800e172:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e176:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	0e1b      	lsrs	r3, r3, #24
 800e17c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	601a      	str	r2, [r3, #0]
    scr++;
 800e182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e184:	3304      	adds	r3, #4
 800e186:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	061a      	lsls	r2, r3, #24
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	021b      	lsls	r3, r3, #8
 800e190:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e194:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	0a1b      	lsrs	r3, r3, #8
 800e19a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e19e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	0e1b      	lsrs	r3, r3, #24
 800e1a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3738      	adds	r7, #56	; 0x38
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	18000f3a 	.word	0x18000f3a

0800e1b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ca:	2b1f      	cmp	r3, #31
 800e1cc:	d936      	bls.n	800e23c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	617b      	str	r3, [r7, #20]
 800e1d2:	e027      	b.n	800e224 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f003 fbe9 	bl	80119b0 <SDMMC_ReadFIFO>
 800e1de:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	0a1b      	lsrs	r3, r3, #8
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	0c1b      	lsrs	r3, r3, #16
 800e202:	b2da      	uxtb	r2, r3
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	3301      	adds	r3, #1
 800e20c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	0e1b      	lsrs	r3, r3, #24
 800e212:	b2da      	uxtb	r2, r3
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	3301      	adds	r3, #1
 800e21c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	3301      	adds	r3, #1
 800e222:	617b      	str	r3, [r7, #20]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2b07      	cmp	r3, #7
 800e228:	d9d4      	bls.n	800e1d4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	693a      	ldr	r2, [r7, #16]
 800e22e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e234:	f1a3 0220 	sub.w	r2, r3, #32
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e23c:	bf00      	nop
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b086      	sub	sp, #24
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	2b1f      	cmp	r3, #31
 800e258:	d93a      	bls.n	800e2d0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e25a:	2300      	movs	r3, #0
 800e25c:	617b      	str	r3, [r7, #20]
 800e25e:	e02b      	b.n	800e2b8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	3301      	adds	r3, #1
 800e26a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	021a      	lsls	r2, r3, #8
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	4313      	orrs	r3, r2
 800e276:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	3301      	adds	r3, #1
 800e27c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	041a      	lsls	r2, r3, #16
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	4313      	orrs	r3, r2
 800e288:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	3301      	adds	r3, #1
 800e28e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	061a      	lsls	r2, r3, #24
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	4313      	orrs	r3, r2
 800e29a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f107 020c 	add.w	r2, r7, #12
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f003 fb8c 	bl	80119ca <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	617b      	str	r3, [r7, #20]
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	2b07      	cmp	r3, #7
 800e2bc:	d9d0      	bls.n	800e260 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	f1a3 0220 	sub.w	r2, r3, #32
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	621a      	str	r2, [r3, #32]
  }
}
 800e2d0:	bf00      	nop
 800e2d2:	3718      	adds	r7, #24
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e31c:	bf00      	nop
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d101      	bne.n	800e33a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e10f      	b.n	800e55a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a87      	ldr	r2, [pc, #540]	; (800e564 <HAL_SPI_Init+0x23c>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00f      	beq.n	800e36a <HAL_SPI_Init+0x42>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a86      	ldr	r2, [pc, #536]	; (800e568 <HAL_SPI_Init+0x240>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d00a      	beq.n	800e36a <HAL_SPI_Init+0x42>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a84      	ldr	r2, [pc, #528]	; (800e56c <HAL_SPI_Init+0x244>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d005      	beq.n	800e36a <HAL_SPI_Init+0x42>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	2b0f      	cmp	r3, #15
 800e364:	d901      	bls.n	800e36a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	e0f7      	b.n	800e55a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fd5a 	bl	800ee24 <SPI_GetPacketSize>
 800e370:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a7b      	ldr	r2, [pc, #492]	; (800e564 <HAL_SPI_Init+0x23c>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d00c      	beq.n	800e396 <HAL_SPI_Init+0x6e>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a79      	ldr	r2, [pc, #484]	; (800e568 <HAL_SPI_Init+0x240>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d007      	beq.n	800e396 <HAL_SPI_Init+0x6e>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	4a78      	ldr	r2, [pc, #480]	; (800e56c <HAL_SPI_Init+0x244>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d002      	beq.n	800e396 <HAL_SPI_Init+0x6e>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b08      	cmp	r3, #8
 800e394:	d811      	bhi.n	800e3ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e39a:	4a72      	ldr	r2, [pc, #456]	; (800e564 <HAL_SPI_Init+0x23c>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d009      	beq.n	800e3b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a70      	ldr	r2, [pc, #448]	; (800e568 <HAL_SPI_Init+0x240>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d004      	beq.n	800e3b4 <HAL_SPI_Init+0x8c>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a6f      	ldr	r2, [pc, #444]	; (800e56c <HAL_SPI_Init+0x244>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d104      	bne.n	800e3be <HAL_SPI_Init+0x96>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b10      	cmp	r3, #16
 800e3b8:	d901      	bls.n	800e3be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e0cd      	b.n	800e55a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d106      	bne.n	800e3d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7f4 fa8a 	bl	80028ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2202      	movs	r2, #2
 800e3dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f022 0201 	bic.w	r2, r2, #1
 800e3ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e3fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e404:	d119      	bne.n	800e43a <HAL_SPI_Init+0x112>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e40e:	d103      	bne.n	800e418 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e414:	2b00      	cmp	r3, #0
 800e416:	d008      	beq.n	800e42a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10c      	bne.n	800e43a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e428:	d107      	bne.n	800e43a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e438:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00f      	beq.n	800e466 <HAL_SPI_Init+0x13e>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	2b06      	cmp	r3, #6
 800e44c:	d90b      	bls.n	800e466 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	430a      	orrs	r2, r1
 800e462:	601a      	str	r2, [r3, #0]
 800e464:	e007      	b.n	800e476 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e474:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	69da      	ldr	r2, [r3, #28]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e47e:	431a      	orrs	r2, r3
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	431a      	orrs	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e488:	ea42 0103 	orr.w	r1, r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	430a      	orrs	r2, r1
 800e496:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a0:	431a      	orrs	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	431a      	orrs	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	691b      	ldr	r3, [r3, #16]
 800e4b2:	431a      	orrs	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	431a      	orrs	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	431a      	orrs	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	431a      	orrs	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4d6:	ea42 0103 	orr.w	r1, r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	430a      	orrs	r2, r1
 800e4e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d113      	bne.n	800e516 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e500:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e514:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f022 0201 	bic.w	r2, r2, #1
 800e524:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00a      	beq.n	800e548 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	430a      	orrs	r2, r1
 800e546:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	40013000 	.word	0x40013000
 800e568:	40003800 	.word	0x40003800
 800e56c:	40003c00 	.word	0x40003c00

0800e570 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08a      	sub	sp, #40	; 0x28
 800e574:	af02      	add	r7, sp, #8
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	603b      	str	r3, [r7, #0]
 800e57c:	4613      	mov	r3, r2
 800e57e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3320      	adds	r3, #32
 800e586:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e592:	2b01      	cmp	r3, #1
 800e594:	d101      	bne.n	800e59a <HAL_SPI_Transmit+0x2a>
 800e596:	2302      	movs	r3, #2
 800e598:	e1e1      	b.n	800e95e <HAL_SPI_Transmit+0x3ee>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5a2:	f7f4 ff8b 	bl	80034bc <HAL_GetTick>
 800e5a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d007      	beq.n	800e5c4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e5c0:	7efb      	ldrb	r3, [r7, #27]
 800e5c2:	e1cc      	b.n	800e95e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d002      	beq.n	800e5d0 <HAL_SPI_Transmit+0x60>
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d107      	bne.n	800e5e0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e5dc:	7efb      	ldrb	r3, [r7, #27]
 800e5de:	e1be      	b.n	800e95e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2203      	movs	r2, #3
 800e5e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	88fa      	ldrh	r2, [r7, #6]
 800e5fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	88fa      	ldrh	r2, [r7, #6]
 800e602:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2200      	movs	r2, #0
 800e60a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e630:	d108      	bne.n	800e644 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	e009      	b.n	800e658 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e656:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	4b96      	ldr	r3, [pc, #600]	; (800e8b8 <HAL_SPI_Transmit+0x348>)
 800e660:	4013      	ands	r3, r2
 800e662:	88f9      	ldrh	r1, [r7, #6]
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	6812      	ldr	r2, [r2, #0]
 800e668:	430b      	orrs	r3, r1
 800e66a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f042 0201 	orr.w	r2, r2, #1
 800e67a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e684:	d107      	bne.n	800e696 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	2b0f      	cmp	r3, #15
 800e69c:	d947      	bls.n	800e72e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e69e:	e03f      	b.n	800e720 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d114      	bne.n	800e6d8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6812      	ldr	r2, [r2, #0]
 800e6b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6be:	1d1a      	adds	r2, r3, #4
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e6d6:	e023      	b.n	800e720 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6d8:	f7f4 fef0 	bl	80034bc <HAL_GetTick>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	683a      	ldr	r2, [r7, #0]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d803      	bhi.n	800e6f0 <HAL_SPI_Transmit+0x180>
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ee:	d102      	bne.n	800e6f6 <HAL_SPI_Transmit+0x186>
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d114      	bne.n	800e720 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f000 fac6 	bl	800ec88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e70a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e71c:	2303      	movs	r3, #3
 800e71e:	e11e      	b.n	800e95e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e726:	b29b      	uxth	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1b9      	bne.n	800e6a0 <HAL_SPI_Transmit+0x130>
 800e72c:	e0f1      	b.n	800e912 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	2b07      	cmp	r3, #7
 800e734:	f240 80e6 	bls.w	800e904 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e738:	e05d      	b.n	800e7f6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	695b      	ldr	r3, [r3, #20]
 800e740:	f003 0302 	and.w	r3, r3, #2
 800e744:	2b02      	cmp	r3, #2
 800e746:	d132      	bne.n	800e7ae <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e74e:	b29b      	uxth	r3, r3
 800e750:	2b01      	cmp	r3, #1
 800e752:	d918      	bls.n	800e786 <HAL_SPI_Transmit+0x216>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d014      	beq.n	800e786 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6812      	ldr	r2, [r2, #0]
 800e766:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e76c:	1d1a      	adds	r2, r3, #4
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e778:	b29b      	uxth	r3, r3
 800e77a:	3b02      	subs	r3, #2
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e784:	e037      	b.n	800e7f6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e78a:	881a      	ldrh	r2, [r3, #0]
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e794:	1c9a      	adds	r2, r3, #2
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e7ac:	e023      	b.n	800e7f6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7ae:	f7f4 fe85 	bl	80034bc <HAL_GetTick>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	683a      	ldr	r2, [r7, #0]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d803      	bhi.n	800e7c6 <HAL_SPI_Transmit+0x256>
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c4:	d102      	bne.n	800e7cc <HAL_SPI_Transmit+0x25c>
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d114      	bne.n	800e7f6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f000 fa5b 	bl	800ec88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	e0b3      	b.n	800e95e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d19b      	bne.n	800e73a <HAL_SPI_Transmit+0x1ca>
 800e802:	e086      	b.n	800e912 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	f003 0302 	and.w	r3, r3, #2
 800e80e:	2b02      	cmp	r3, #2
 800e810:	d154      	bne.n	800e8bc <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e818:	b29b      	uxth	r3, r3
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d918      	bls.n	800e850 <HAL_SPI_Transmit+0x2e0>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e822:	2b40      	cmp	r3, #64	; 0x40
 800e824:	d914      	bls.n	800e850 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	6812      	ldr	r2, [r2, #0]
 800e830:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e836:	1d1a      	adds	r2, r3, #4
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e842:	b29b      	uxth	r3, r3
 800e844:	3b04      	subs	r3, #4
 800e846:	b29a      	uxth	r2, r3
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e84e:	e059      	b.n	800e904 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e856:	b29b      	uxth	r3, r3
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d917      	bls.n	800e88c <HAL_SPI_Transmit+0x31c>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e860:	2b00      	cmp	r3, #0
 800e862:	d013      	beq.n	800e88c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e868:	881a      	ldrh	r2, [r3, #0]
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e872:	1c9a      	adds	r2, r3, #2
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e87e:	b29b      	uxth	r3, r3
 800e880:	3b02      	subs	r3, #2
 800e882:	b29a      	uxth	r2, r3
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e88a:	e03b      	b.n	800e904 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	3320      	adds	r3, #32
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	b29a      	uxth	r2, r3
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e8b6:	e025      	b.n	800e904 <HAL_SPI_Transmit+0x394>
 800e8b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8bc:	f7f4 fdfe 	bl	80034bc <HAL_GetTick>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d803      	bhi.n	800e8d4 <HAL_SPI_Transmit+0x364>
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d2:	d102      	bne.n	800e8da <HAL_SPI_Transmit+0x36a>
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d114      	bne.n	800e904 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f000 f9d4 	bl	800ec88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e900:	2303      	movs	r3, #3
 800e902:	e02c      	b.n	800e95e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f47f af79 	bne.w	800e804 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2200      	movs	r2, #0
 800e91a:	2108      	movs	r1, #8
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f000 fa53 	bl	800edc8 <SPI_WaitOnFlagUntilTimeout>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d007      	beq.n	800e938 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e92e:	f043 0220 	orr.w	r2, r3, #32
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f000 f9a5 	bl	800ec88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2201      	movs	r2, #1
 800e94a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e954:	2b00      	cmp	r3, #0
 800e956:	d001      	beq.n	800e95c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800e958:	2301      	movs	r3, #1
 800e95a:	e000      	b.n	800e95e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800e95c:	7efb      	ldrb	r3, [r7, #27]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3720      	adds	r7, #32
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop

0800e968 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b088      	sub	sp, #32
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	603b      	str	r3, [r7, #0]
 800e974:	4613      	mov	r3, r2
 800e976:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e978:	2300      	movs	r3, #0
 800e97a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3330      	adds	r3, #48	; 0x30
 800e982:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d101      	bne.n	800e992 <HAL_SPI_Receive+0x2a>
 800e98e:	2302      	movs	r3, #2
 800e990:	e173      	b.n	800ec7a <HAL_SPI_Receive+0x312>
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2201      	movs	r2, #1
 800e996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e99a:	f7f4 fd8f 	bl	80034bc <HAL_GetTick>
 800e99e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d007      	beq.n	800e9bc <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e9b8:	7ffb      	ldrb	r3, [r7, #31]
 800e9ba:	e15e      	b.n	800ec7a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d002      	beq.n	800e9c8 <HAL_SPI_Receive+0x60>
 800e9c2:	88fb      	ldrh	r3, [r7, #6]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d107      	bne.n	800e9d8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e9d4:	7ffb      	ldrb	r3, [r7, #31]
 800e9d6:	e150      	b.n	800ec7a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2204      	movs	r2, #4
 800e9dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	88fa      	ldrh	r2, [r7, #6]
 800e9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	88fa      	ldrh	r2, [r7, #6]
 800e9fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2200      	movs	r2, #0
 800ea02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ea28:	d108      	bne.n	800ea3c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea38:	601a      	str	r2, [r3, #0]
 800ea3a:	e009      	b.n	800ea50 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ea4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	685a      	ldr	r2, [r3, #4]
 800ea56:	4b8b      	ldr	r3, [pc, #556]	; (800ec84 <HAL_SPI_Receive+0x31c>)
 800ea58:	4013      	ands	r3, r2
 800ea5a:	88f9      	ldrh	r1, [r7, #6]
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	6812      	ldr	r2, [r2, #0]
 800ea60:	430b      	orrs	r3, r1
 800ea62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f042 0201 	orr.w	r2, r2, #1
 800ea72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea7c:	d107      	bne.n	800ea8e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	2b0f      	cmp	r3, #15
 800ea94:	d948      	bls.n	800eb28 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ea96:	e040      	b.n	800eb1a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	695a      	ldr	r2, [r3, #20]
 800ea9e:	f248 0308 	movw	r3, #32776	; 0x8008
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d014      	beq.n	800ead2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800eab2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eab8:	1d1a      	adds	r2, r3, #4
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	3b01      	subs	r3, #1
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ead0:	e023      	b.n	800eb1a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ead2:	f7f4 fcf3 	bl	80034bc <HAL_GetTick>
 800ead6:	4602      	mov	r2, r0
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	683a      	ldr	r2, [r7, #0]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d803      	bhi.n	800eaea <HAL_SPI_Receive+0x182>
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae8:	d102      	bne.n	800eaf0 <HAL_SPI_Receive+0x188>
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d114      	bne.n	800eb1a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f000 f8c9 	bl	800ec88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eb16:	2303      	movs	r3, #3
 800eb18:	e0af      	b.n	800ec7a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1b8      	bne.n	800ea98 <HAL_SPI_Receive+0x130>
 800eb26:	e095      	b.n	800ec54 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	2b07      	cmp	r3, #7
 800eb2e:	f240 808b 	bls.w	800ec48 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800eb32:	e03f      	b.n	800ebb4 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	f003 0301 	and.w	r3, r3, #1
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d114      	bne.n	800eb6c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb46:	69ba      	ldr	r2, [r7, #24]
 800eb48:	8812      	ldrh	r2, [r2, #0]
 800eb4a:	b292      	uxth	r2, r2
 800eb4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb52:	1c9a      	adds	r2, r3, #2
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	3b01      	subs	r3, #1
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eb6a:	e023      	b.n	800ebb4 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb6c:	f7f4 fca6 	bl	80034bc <HAL_GetTick>
 800eb70:	4602      	mov	r2, r0
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d803      	bhi.n	800eb84 <HAL_SPI_Receive+0x21c>
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d102      	bne.n	800eb8a <HAL_SPI_Receive+0x222>
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d114      	bne.n	800ebb4 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f000 f87c 	bl	800ec88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	e062      	b.n	800ec7a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1b9      	bne.n	800eb34 <HAL_SPI_Receive+0x1cc>
 800ebc0:	e048      	b.n	800ec54 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	695b      	ldr	r3, [r3, #20]
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d117      	bne.n	800ec00 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebdc:	7812      	ldrb	r2, [r2, #0]
 800ebde:	b2d2      	uxtb	r2, r2
 800ebe0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebe6:	1c5a      	adds	r2, r3, #1
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ebfe:	e023      	b.n	800ec48 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec00:	f7f4 fc5c 	bl	80034bc <HAL_GetTick>
 800ec04:	4602      	mov	r2, r0
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d803      	bhi.n	800ec18 <HAL_SPI_Receive+0x2b0>
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec16:	d102      	bne.n	800ec1e <HAL_SPI_Receive+0x2b6>
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d114      	bne.n	800ec48 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f000 f832 	bl	800ec88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec44:	2303      	movs	r3, #3
 800ec46:	e018      	b.n	800ec7a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1b6      	bne.n	800ebc2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f817 	bl	800ec88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d001      	beq.n	800ec78 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800ec74:	2301      	movs	r3, #1
 800ec76:	e000      	b.n	800ec7a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800ec78:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3720      	adds	r7, #32
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	ffff0000 	.word	0xffff0000

0800ec88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	695b      	ldr	r3, [r3, #20]
 800ec96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	699a      	ldr	r2, [r3, #24]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f042 0208 	orr.w	r2, r2, #8
 800eca6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	699a      	ldr	r2, [r3, #24]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f042 0210 	orr.w	r2, r2, #16
 800ecb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f022 0201 	bic.w	r2, r2, #1
 800ecc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6919      	ldr	r1, [r3, #16]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	4b3c      	ldr	r3, [pc, #240]	; (800edc4 <SPI_CloseTransfer+0x13c>)
 800ecd4:	400b      	ands	r3, r1
 800ecd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	689a      	ldr	r2, [r3, #8]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ece6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	2b04      	cmp	r3, #4
 800ecf2:	d014      	beq.n	800ed1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f003 0320 	and.w	r3, r3, #32
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00f      	beq.n	800ed1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	699a      	ldr	r2, [r3, #24]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f042 0220 	orr.w	r2, r2, #32
 800ed1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b03      	cmp	r3, #3
 800ed28:	d014      	beq.n	800ed54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00f      	beq.n	800ed54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed3a:	f043 0204 	orr.w	r2, r3, #4
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	699a      	ldr	r2, [r3, #24]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00f      	beq.n	800ed7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed64:	f043 0201 	orr.w	r2, r3, #1
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	699a      	ldr	r2, [r3, #24]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00f      	beq.n	800eda8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed8e:	f043 0208 	orr.w	r2, r3, #8
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	699a      	ldr	r2, [r3, #24]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eda6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800edb8:	bf00      	nop
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr
 800edc4:	fffffc90 	.word	0xfffffc90

0800edc8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	603b      	str	r3, [r7, #0]
 800edd4:	4613      	mov	r3, r2
 800edd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800edd8:	e010      	b.n	800edfc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edda:	f7f4 fb6f 	bl	80034bc <HAL_GetTick>
 800edde:	4602      	mov	r2, r0
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	1ad3      	subs	r3, r2, r3
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d803      	bhi.n	800edf2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf0:	d102      	bne.n	800edf8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d101      	bne.n	800edfc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800edf8:	2303      	movs	r3, #3
 800edfa:	e00f      	b.n	800ee1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	695a      	ldr	r2, [r3, #20]
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	4013      	ands	r3, r2
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	bf0c      	ite	eq
 800ee0c:	2301      	moveq	r3, #1
 800ee0e:	2300      	movne	r3, #0
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	461a      	mov	r2, r3
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d0df      	beq.n	800edda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee30:	095b      	lsrs	r3, r3, #5
 800ee32:	3301      	adds	r3, #1
 800ee34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	3307      	adds	r3, #7
 800ee42:	08db      	lsrs	r3, r3, #3
 800ee44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3714      	adds	r7, #20
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr

0800ee5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee5a:	b580      	push	{r7, lr}
 800ee5c:	b082      	sub	sp, #8
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d101      	bne.n	800ee6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	e049      	b.n	800ef00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d106      	bne.n	800ee86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7f3 ff85 	bl	8002d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2202      	movs	r2, #2
 800ee8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	3304      	adds	r3, #4
 800ee96:	4619      	mov	r1, r3
 800ee98:	4610      	mov	r0, r2
 800ee9a:	f000 ff29 	bl	800fcf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2201      	movs	r2, #1
 800eed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2201      	movs	r2, #1
 800eeda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2201      	movs	r2, #1
 800eef2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
 800ef18:	e049      	b.n	800efae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d106      	bne.n	800ef34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f7f3 fd98 	bl	8002a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2202      	movs	r2, #2
 800ef38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3304      	adds	r3, #4
 800ef44:	4619      	mov	r1, r3
 800ef46:	4610      	mov	r0, r2
 800ef48:	f000 fed2 	bl	800fcf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d109      	bne.n	800efdc <HAL_TIM_PWM_Start+0x24>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	bf14      	ite	ne
 800efd4:	2301      	movne	r3, #1
 800efd6:	2300      	moveq	r3, #0
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	e03c      	b.n	800f056 <HAL_TIM_PWM_Start+0x9e>
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	2b04      	cmp	r3, #4
 800efe0:	d109      	bne.n	800eff6 <HAL_TIM_PWM_Start+0x3e>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	2b01      	cmp	r3, #1
 800efec:	bf14      	ite	ne
 800efee:	2301      	movne	r3, #1
 800eff0:	2300      	moveq	r3, #0
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	e02f      	b.n	800f056 <HAL_TIM_PWM_Start+0x9e>
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b08      	cmp	r3, #8
 800effa:	d109      	bne.n	800f010 <HAL_TIM_PWM_Start+0x58>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b01      	cmp	r3, #1
 800f006:	bf14      	ite	ne
 800f008:	2301      	movne	r3, #1
 800f00a:	2300      	moveq	r3, #0
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	e022      	b.n	800f056 <HAL_TIM_PWM_Start+0x9e>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2b0c      	cmp	r3, #12
 800f014:	d109      	bne.n	800f02a <HAL_TIM_PWM_Start+0x72>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	2b01      	cmp	r3, #1
 800f020:	bf14      	ite	ne
 800f022:	2301      	movne	r3, #1
 800f024:	2300      	moveq	r3, #0
 800f026:	b2db      	uxtb	r3, r3
 800f028:	e015      	b.n	800f056 <HAL_TIM_PWM_Start+0x9e>
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	2b10      	cmp	r3, #16
 800f02e:	d109      	bne.n	800f044 <HAL_TIM_PWM_Start+0x8c>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f036:	b2db      	uxtb	r3, r3
 800f038:	2b01      	cmp	r3, #1
 800f03a:	bf14      	ite	ne
 800f03c:	2301      	movne	r3, #1
 800f03e:	2300      	moveq	r3, #0
 800f040:	b2db      	uxtb	r3, r3
 800f042:	e008      	b.n	800f056 <HAL_TIM_PWM_Start+0x9e>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	bf14      	ite	ne
 800f050:	2301      	movne	r3, #1
 800f052:	2300      	moveq	r3, #0
 800f054:	b2db      	uxtb	r3, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e0ab      	b.n	800f1b6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d104      	bne.n	800f06e <HAL_TIM_PWM_Start+0xb6>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2202      	movs	r2, #2
 800f068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f06c:	e023      	b.n	800f0b6 <HAL_TIM_PWM_Start+0xfe>
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	2b04      	cmp	r3, #4
 800f072:	d104      	bne.n	800f07e <HAL_TIM_PWM_Start+0xc6>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2202      	movs	r2, #2
 800f078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f07c:	e01b      	b.n	800f0b6 <HAL_TIM_PWM_Start+0xfe>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	2b08      	cmp	r3, #8
 800f082:	d104      	bne.n	800f08e <HAL_TIM_PWM_Start+0xd6>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2202      	movs	r2, #2
 800f088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f08c:	e013      	b.n	800f0b6 <HAL_TIM_PWM_Start+0xfe>
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	2b0c      	cmp	r3, #12
 800f092:	d104      	bne.n	800f09e <HAL_TIM_PWM_Start+0xe6>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2202      	movs	r2, #2
 800f098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f09c:	e00b      	b.n	800f0b6 <HAL_TIM_PWM_Start+0xfe>
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b10      	cmp	r3, #16
 800f0a2:	d104      	bne.n	800f0ae <HAL_TIM_PWM_Start+0xf6>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2202      	movs	r2, #2
 800f0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0ac:	e003      	b.n	800f0b6 <HAL_TIM_PWM_Start+0xfe>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f001 f992 	bl	80103e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a3d      	ldr	r2, [pc, #244]	; (800f1c0 <HAL_TIM_PWM_Start+0x208>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d013      	beq.n	800f0f6 <HAL_TIM_PWM_Start+0x13e>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4a3c      	ldr	r2, [pc, #240]	; (800f1c4 <HAL_TIM_PWM_Start+0x20c>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d00e      	beq.n	800f0f6 <HAL_TIM_PWM_Start+0x13e>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a3a      	ldr	r2, [pc, #232]	; (800f1c8 <HAL_TIM_PWM_Start+0x210>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d009      	beq.n	800f0f6 <HAL_TIM_PWM_Start+0x13e>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4a39      	ldr	r2, [pc, #228]	; (800f1cc <HAL_TIM_PWM_Start+0x214>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d004      	beq.n	800f0f6 <HAL_TIM_PWM_Start+0x13e>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a37      	ldr	r2, [pc, #220]	; (800f1d0 <HAL_TIM_PWM_Start+0x218>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d101      	bne.n	800f0fa <HAL_TIM_PWM_Start+0x142>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e000      	b.n	800f0fc <HAL_TIM_PWM_Start+0x144>
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d007      	beq.n	800f110 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f10e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a2a      	ldr	r2, [pc, #168]	; (800f1c0 <HAL_TIM_PWM_Start+0x208>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d02c      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f122:	d027      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a2a      	ldr	r2, [pc, #168]	; (800f1d4 <HAL_TIM_PWM_Start+0x21c>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d022      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	4a29      	ldr	r2, [pc, #164]	; (800f1d8 <HAL_TIM_PWM_Start+0x220>)
 800f134:	4293      	cmp	r3, r2
 800f136:	d01d      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4a27      	ldr	r2, [pc, #156]	; (800f1dc <HAL_TIM_PWM_Start+0x224>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d018      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4a1f      	ldr	r2, [pc, #124]	; (800f1c4 <HAL_TIM_PWM_Start+0x20c>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d013      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a23      	ldr	r2, [pc, #140]	; (800f1e0 <HAL_TIM_PWM_Start+0x228>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d00e      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4a1b      	ldr	r2, [pc, #108]	; (800f1c8 <HAL_TIM_PWM_Start+0x210>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d009      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a1f      	ldr	r2, [pc, #124]	; (800f1e4 <HAL_TIM_PWM_Start+0x22c>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d004      	beq.n	800f174 <HAL_TIM_PWM_Start+0x1bc>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a1e      	ldr	r2, [pc, #120]	; (800f1e8 <HAL_TIM_PWM_Start+0x230>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d115      	bne.n	800f1a0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	689a      	ldr	r2, [r3, #8]
 800f17a:	4b1c      	ldr	r3, [pc, #112]	; (800f1ec <HAL_TIM_PWM_Start+0x234>)
 800f17c:	4013      	ands	r3, r2
 800f17e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b06      	cmp	r3, #6
 800f184:	d015      	beq.n	800f1b2 <HAL_TIM_PWM_Start+0x1fa>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f18c:	d011      	beq.n	800f1b2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f042 0201 	orr.w	r2, r2, #1
 800f19c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f19e:	e008      	b.n	800f1b2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f042 0201 	orr.w	r2, r2, #1
 800f1ae:	601a      	str	r2, [r3, #0]
 800f1b0:	e000      	b.n	800f1b4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	40010000 	.word	0x40010000
 800f1c4:	40010400 	.word	0x40010400
 800f1c8:	40014000 	.word	0x40014000
 800f1cc:	40014400 	.word	0x40014400
 800f1d0:	40014800 	.word	0x40014800
 800f1d4:	40000400 	.word	0x40000400
 800f1d8:	40000800 	.word	0x40000800
 800f1dc:	40000c00 	.word	0x40000c00
 800f1e0:	40001800 	.word	0x40001800
 800f1e4:	4000e000 	.word	0x4000e000
 800f1e8:	4000e400 	.word	0x4000e400
 800f1ec:	00010007 	.word	0x00010007

0800f1f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
 800f1fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f1fe:	2300      	movs	r3, #0
 800f200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d109      	bne.n	800f21c <HAL_TIM_PWM_Start_DMA+0x2c>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	2b02      	cmp	r3, #2
 800f212:	bf0c      	ite	eq
 800f214:	2301      	moveq	r3, #1
 800f216:	2300      	movne	r3, #0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	e03c      	b.n	800f296 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	2b04      	cmp	r3, #4
 800f220:	d109      	bne.n	800f236 <HAL_TIM_PWM_Start_DMA+0x46>
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	bf0c      	ite	eq
 800f22e:	2301      	moveq	r3, #1
 800f230:	2300      	movne	r3, #0
 800f232:	b2db      	uxtb	r3, r3
 800f234:	e02f      	b.n	800f296 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b08      	cmp	r3, #8
 800f23a:	d109      	bne.n	800f250 <HAL_TIM_PWM_Start_DMA+0x60>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f242:	b2db      	uxtb	r3, r3
 800f244:	2b02      	cmp	r3, #2
 800f246:	bf0c      	ite	eq
 800f248:	2301      	moveq	r3, #1
 800f24a:	2300      	movne	r3, #0
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	e022      	b.n	800f296 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	2b0c      	cmp	r3, #12
 800f254:	d109      	bne.n	800f26a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b02      	cmp	r3, #2
 800f260:	bf0c      	ite	eq
 800f262:	2301      	moveq	r3, #1
 800f264:	2300      	movne	r3, #0
 800f266:	b2db      	uxtb	r3, r3
 800f268:	e015      	b.n	800f296 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	2b10      	cmp	r3, #16
 800f26e:	d109      	bne.n	800f284 <HAL_TIM_PWM_Start_DMA+0x94>
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b02      	cmp	r3, #2
 800f27a:	bf0c      	ite	eq
 800f27c:	2301      	moveq	r3, #1
 800f27e:	2300      	movne	r3, #0
 800f280:	b2db      	uxtb	r3, r3
 800f282:	e008      	b.n	800f296 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	bf0c      	ite	eq
 800f290:	2301      	moveq	r3, #1
 800f292:	2300      	movne	r3, #0
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d001      	beq.n	800f29e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f29a:	2302      	movs	r3, #2
 800f29c:	e1ba      	b.n	800f614 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d109      	bne.n	800f2b8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	bf0c      	ite	eq
 800f2b0:	2301      	moveq	r3, #1
 800f2b2:	2300      	movne	r3, #0
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	e03c      	b.n	800f332 <HAL_TIM_PWM_Start_DMA+0x142>
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2b04      	cmp	r3, #4
 800f2bc:	d109      	bne.n	800f2d2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	bf0c      	ite	eq
 800f2ca:	2301      	moveq	r3, #1
 800f2cc:	2300      	movne	r3, #0
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	e02f      	b.n	800f332 <HAL_TIM_PWM_Start_DMA+0x142>
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	2b08      	cmp	r3, #8
 800f2d6:	d109      	bne.n	800f2ec <HAL_TIM_PWM_Start_DMA+0xfc>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	bf0c      	ite	eq
 800f2e4:	2301      	moveq	r3, #1
 800f2e6:	2300      	movne	r3, #0
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	e022      	b.n	800f332 <HAL_TIM_PWM_Start_DMA+0x142>
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	2b0c      	cmp	r3, #12
 800f2f0:	d109      	bne.n	800f306 <HAL_TIM_PWM_Start_DMA+0x116>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	bf0c      	ite	eq
 800f2fe:	2301      	moveq	r3, #1
 800f300:	2300      	movne	r3, #0
 800f302:	b2db      	uxtb	r3, r3
 800f304:	e015      	b.n	800f332 <HAL_TIM_PWM_Start_DMA+0x142>
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2b10      	cmp	r3, #16
 800f30a:	d109      	bne.n	800f320 <HAL_TIM_PWM_Start_DMA+0x130>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b01      	cmp	r3, #1
 800f316:	bf0c      	ite	eq
 800f318:	2301      	moveq	r3, #1
 800f31a:	2300      	movne	r3, #0
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	e008      	b.n	800f332 <HAL_TIM_PWM_Start_DMA+0x142>
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b01      	cmp	r3, #1
 800f32a:	bf0c      	ite	eq
 800f32c:	2301      	moveq	r3, #1
 800f32e:	2300      	movne	r3, #0
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	d034      	beq.n	800f3a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <HAL_TIM_PWM_Start_DMA+0x152>
 800f33c:	887b      	ldrh	r3, [r7, #2]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f342:	2301      	movs	r3, #1
 800f344:	e166      	b.n	800f614 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d104      	bne.n	800f356 <HAL_TIM_PWM_Start_DMA+0x166>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2202      	movs	r2, #2
 800f350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f354:	e026      	b.n	800f3a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2b04      	cmp	r3, #4
 800f35a:	d104      	bne.n	800f366 <HAL_TIM_PWM_Start_DMA+0x176>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2202      	movs	r2, #2
 800f360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f364:	e01e      	b.n	800f3a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	2b08      	cmp	r3, #8
 800f36a:	d104      	bne.n	800f376 <HAL_TIM_PWM_Start_DMA+0x186>
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2202      	movs	r2, #2
 800f370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f374:	e016      	b.n	800f3a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	2b0c      	cmp	r3, #12
 800f37a:	d104      	bne.n	800f386 <HAL_TIM_PWM_Start_DMA+0x196>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2202      	movs	r2, #2
 800f380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f384:	e00e      	b.n	800f3a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	2b10      	cmp	r3, #16
 800f38a:	d104      	bne.n	800f396 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2202      	movs	r2, #2
 800f390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f394:	e006      	b.n	800f3a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2202      	movs	r2, #2
 800f39a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f39e:	e001      	b.n	800f3a4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e137      	b.n	800f614 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	2b0c      	cmp	r3, #12
 800f3a8:	f200 80ae 	bhi.w	800f508 <HAL_TIM_PWM_Start_DMA+0x318>
 800f3ac:	a201      	add	r2, pc, #4	; (adr r2, 800f3b4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b2:	bf00      	nop
 800f3b4:	0800f3e9 	.word	0x0800f3e9
 800f3b8:	0800f509 	.word	0x0800f509
 800f3bc:	0800f509 	.word	0x0800f509
 800f3c0:	0800f509 	.word	0x0800f509
 800f3c4:	0800f431 	.word	0x0800f431
 800f3c8:	0800f509 	.word	0x0800f509
 800f3cc:	0800f509 	.word	0x0800f509
 800f3d0:	0800f509 	.word	0x0800f509
 800f3d4:	0800f479 	.word	0x0800f479
 800f3d8:	0800f509 	.word	0x0800f509
 800f3dc:	0800f509 	.word	0x0800f509
 800f3e0:	0800f509 	.word	0x0800f509
 800f3e4:	0800f4c1 	.word	0x0800f4c1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ec:	4a8b      	ldr	r2, [pc, #556]	; (800f61c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f3ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f4:	4a8a      	ldr	r2, [pc, #552]	; (800f620 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f3f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3fc:	4a89      	ldr	r2, [pc, #548]	; (800f624 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f3fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f404:	6879      	ldr	r1, [r7, #4]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	3334      	adds	r3, #52	; 0x34
 800f40c:	461a      	mov	r2, r3
 800f40e:	887b      	ldrh	r3, [r7, #2]
 800f410:	f7f6 f872 	bl	80054f8 <HAL_DMA_Start_IT>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e0fa      	b.n	800f614 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	68da      	ldr	r2, [r3, #12]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f42c:	60da      	str	r2, [r3, #12]
      break;
 800f42e:	e06e      	b.n	800f50e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f434:	4a79      	ldr	r2, [pc, #484]	; (800f61c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f436:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f43c:	4a78      	ldr	r2, [pc, #480]	; (800f620 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f43e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f444:	4a77      	ldr	r2, [pc, #476]	; (800f624 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f446:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	3338      	adds	r3, #56	; 0x38
 800f454:	461a      	mov	r2, r3
 800f456:	887b      	ldrh	r3, [r7, #2]
 800f458:	f7f6 f84e 	bl	80054f8 <HAL_DMA_Start_IT>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f462:	2301      	movs	r3, #1
 800f464:	e0d6      	b.n	800f614 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	68da      	ldr	r2, [r3, #12]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f474:	60da      	str	r2, [r3, #12]
      break;
 800f476:	e04a      	b.n	800f50e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f47c:	4a67      	ldr	r2, [pc, #412]	; (800f61c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f47e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f484:	4a66      	ldr	r2, [pc, #408]	; (800f620 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48c:	4a65      	ldr	r2, [pc, #404]	; (800f624 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f48e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f494:	6879      	ldr	r1, [r7, #4]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	333c      	adds	r3, #60	; 0x3c
 800f49c:	461a      	mov	r2, r3
 800f49e:	887b      	ldrh	r3, [r7, #2]
 800f4a0:	f7f6 f82a 	bl	80054f8 <HAL_DMA_Start_IT>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e0b2      	b.n	800f614 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68da      	ldr	r2, [r3, #12]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4bc:	60da      	str	r2, [r3, #12]
      break;
 800f4be:	e026      	b.n	800f50e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4c4:	4a55      	ldr	r2, [pc, #340]	; (800f61c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f4c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4cc:	4a54      	ldr	r2, [pc, #336]	; (800f620 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f4ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d4:	4a53      	ldr	r2, [pc, #332]	; (800f624 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f4d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f4dc:	6879      	ldr	r1, [r7, #4]
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	3340      	adds	r3, #64	; 0x40
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	887b      	ldrh	r3, [r7, #2]
 800f4e8:	f7f6 f806 	bl	80054f8 <HAL_DMA_Start_IT>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e08e      	b.n	800f614 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	68da      	ldr	r2, [r3, #12]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f504:	60da      	str	r2, [r3, #12]
      break;
 800f506:	e002      	b.n	800f50e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f508:	2301      	movs	r3, #1
 800f50a:	75fb      	strb	r3, [r7, #23]
      break;
 800f50c:	bf00      	nop
  }

  if (status == HAL_OK)
 800f50e:	7dfb      	ldrb	r3, [r7, #23]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d17e      	bne.n	800f612 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2201      	movs	r2, #1
 800f51a:	68b9      	ldr	r1, [r7, #8]
 800f51c:	4618      	mov	r0, r3
 800f51e:	f000 ff63 	bl	80103e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4a40      	ldr	r2, [pc, #256]	; (800f628 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d013      	beq.n	800f554 <HAL_TIM_PWM_Start_DMA+0x364>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a3e      	ldr	r2, [pc, #248]	; (800f62c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d00e      	beq.n	800f554 <HAL_TIM_PWM_Start_DMA+0x364>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4a3d      	ldr	r2, [pc, #244]	; (800f630 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d009      	beq.n	800f554 <HAL_TIM_PWM_Start_DMA+0x364>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a3b      	ldr	r2, [pc, #236]	; (800f634 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d004      	beq.n	800f554 <HAL_TIM_PWM_Start_DMA+0x364>
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4a3a      	ldr	r2, [pc, #232]	; (800f638 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d101      	bne.n	800f558 <HAL_TIM_PWM_Start_DMA+0x368>
 800f554:	2301      	movs	r3, #1
 800f556:	e000      	b.n	800f55a <HAL_TIM_PWM_Start_DMA+0x36a>
 800f558:	2300      	movs	r3, #0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d007      	beq.n	800f56e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f56c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4a2d      	ldr	r2, [pc, #180]	; (800f628 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d02c      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f580:	d027      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a2d      	ldr	r2, [pc, #180]	; (800f63c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d022      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4a2b      	ldr	r2, [pc, #172]	; (800f640 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d01d      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a2a      	ldr	r2, [pc, #168]	; (800f644 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d018      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4a21      	ldr	r2, [pc, #132]	; (800f62c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d013      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a26      	ldr	r2, [pc, #152]	; (800f648 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d00e      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4a1d      	ldr	r2, [pc, #116]	; (800f630 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d009      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a22      	ldr	r2, [pc, #136]	; (800f64c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d004      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a20      	ldr	r2, [pc, #128]	; (800f650 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d115      	bne.n	800f5fe <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	689a      	ldr	r2, [r3, #8]
 800f5d8:	4b1e      	ldr	r3, [pc, #120]	; (800f654 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f5da:	4013      	ands	r3, r2
 800f5dc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2b06      	cmp	r3, #6
 800f5e2:	d015      	beq.n	800f610 <HAL_TIM_PWM_Start_DMA+0x420>
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5ea:	d011      	beq.n	800f610 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f042 0201 	orr.w	r2, r2, #1
 800f5fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5fc:	e008      	b.n	800f610 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f042 0201 	orr.w	r2, r2, #1
 800f60c:	601a      	str	r2, [r3, #0]
 800f60e:	e000      	b.n	800f612 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f610:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f612:	7dfb      	ldrb	r3, [r7, #23]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	0800fbdf 	.word	0x0800fbdf
 800f620:	0800fc87 	.word	0x0800fc87
 800f624:	0800fb4d 	.word	0x0800fb4d
 800f628:	40010000 	.word	0x40010000
 800f62c:	40010400 	.word	0x40010400
 800f630:	40014000 	.word	0x40014000
 800f634:	40014400 	.word	0x40014400
 800f638:	40014800 	.word	0x40014800
 800f63c:	40000400 	.word	0x40000400
 800f640:	40000800 	.word	0x40000800
 800f644:	40000c00 	.word	0x40000c00
 800f648:	40001800 	.word	0x40001800
 800f64c:	4000e000 	.word	0x4000e000
 800f650:	4000e400 	.word	0x4000e400
 800f654:	00010007 	.word	0x00010007

0800f658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	691b      	ldr	r3, [r3, #16]
 800f666:	f003 0302 	and.w	r3, r3, #2
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	d122      	bne.n	800f6b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	f003 0302 	and.w	r3, r3, #2
 800f678:	2b02      	cmp	r3, #2
 800f67a:	d11b      	bne.n	800f6b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f06f 0202 	mvn.w	r2, #2
 800f684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	f003 0303 	and.w	r3, r3, #3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d003      	beq.n	800f6a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 fa24 	bl	800fae8 <HAL_TIM_IC_CaptureCallback>
 800f6a0:	e005      	b.n	800f6ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 fa16 	bl	800fad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fa27 	bl	800fafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	691b      	ldr	r3, [r3, #16]
 800f6ba:	f003 0304 	and.w	r3, r3, #4
 800f6be:	2b04      	cmp	r3, #4
 800f6c0:	d122      	bne.n	800f708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	f003 0304 	and.w	r3, r3, #4
 800f6cc:	2b04      	cmp	r3, #4
 800f6ce:	d11b      	bne.n	800f708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f06f 0204 	mvn.w	r2, #4
 800f6d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2202      	movs	r2, #2
 800f6de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d003      	beq.n	800f6f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f9fa 	bl	800fae8 <HAL_TIM_IC_CaptureCallback>
 800f6f4:	e005      	b.n	800f702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f9ec 	bl	800fad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f000 f9fd 	bl	800fafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	691b      	ldr	r3, [r3, #16]
 800f70e:	f003 0308 	and.w	r3, r3, #8
 800f712:	2b08      	cmp	r3, #8
 800f714:	d122      	bne.n	800f75c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	f003 0308 	and.w	r3, r3, #8
 800f720:	2b08      	cmp	r3, #8
 800f722:	d11b      	bne.n	800f75c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f06f 0208 	mvn.w	r2, #8
 800f72c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2204      	movs	r2, #4
 800f732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	69db      	ldr	r3, [r3, #28]
 800f73a:	f003 0303 	and.w	r3, r3, #3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d003      	beq.n	800f74a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 f9d0 	bl	800fae8 <HAL_TIM_IC_CaptureCallback>
 800f748:	e005      	b.n	800f756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f9c2 	bl	800fad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 f9d3 	bl	800fafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	691b      	ldr	r3, [r3, #16]
 800f762:	f003 0310 	and.w	r3, r3, #16
 800f766:	2b10      	cmp	r3, #16
 800f768:	d122      	bne.n	800f7b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	f003 0310 	and.w	r3, r3, #16
 800f774:	2b10      	cmp	r3, #16
 800f776:	d11b      	bne.n	800f7b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f06f 0210 	mvn.w	r2, #16
 800f780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2208      	movs	r2, #8
 800f786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	69db      	ldr	r3, [r3, #28]
 800f78e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f792:	2b00      	cmp	r3, #0
 800f794:	d003      	beq.n	800f79e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f9a6 	bl	800fae8 <HAL_TIM_IC_CaptureCallback>
 800f79c:	e005      	b.n	800f7aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 f998 	bl	800fad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 f9a9 	bl	800fafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	f003 0301 	and.w	r3, r3, #1
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d10e      	bne.n	800f7dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	f003 0301 	and.w	r3, r3, #1
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d107      	bne.n	800f7dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f06f 0201 	mvn.w	r2, #1
 800f7d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 f972 	bl	800fac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7e6:	2b80      	cmp	r3, #128	; 0x80
 800f7e8:	d10e      	bne.n	800f808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7f4:	2b80      	cmp	r3, #128	; 0x80
 800f7f6:	d107      	bne.n	800f808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 febc 	bl	8010580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f816:	d10e      	bne.n	800f836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f822:	2b80      	cmp	r3, #128	; 0x80
 800f824:	d107      	bne.n	800f836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 feaf 	bl	8010594 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	691b      	ldr	r3, [r3, #16]
 800f83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f840:	2b40      	cmp	r3, #64	; 0x40
 800f842:	d10e      	bne.n	800f862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f84e:	2b40      	cmp	r3, #64	; 0x40
 800f850:	d107      	bne.n	800f862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 f961 	bl	800fb24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	691b      	ldr	r3, [r3, #16]
 800f868:	f003 0320 	and.w	r3, r3, #32
 800f86c:	2b20      	cmp	r3, #32
 800f86e:	d10e      	bne.n	800f88e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	f003 0320 	and.w	r3, r3, #32
 800f87a:	2b20      	cmp	r3, #32
 800f87c:	d107      	bne.n	800f88e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f06f 0220 	mvn.w	r2, #32
 800f886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fe6f 	bl	801056c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f88e:	bf00      	nop
 800f890:	3708      	adds	r7, #8
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
	...

0800f898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b086      	sub	sp, #24
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d101      	bne.n	800f8b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f8b2:	2302      	movs	r3, #2
 800f8b4:	e0ff      	b.n	800fab6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b14      	cmp	r3, #20
 800f8c2:	f200 80f0 	bhi.w	800faa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f8c6:	a201      	add	r2, pc, #4	; (adr r2, 800f8cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	0800f921 	.word	0x0800f921
 800f8d0:	0800faa7 	.word	0x0800faa7
 800f8d4:	0800faa7 	.word	0x0800faa7
 800f8d8:	0800faa7 	.word	0x0800faa7
 800f8dc:	0800f961 	.word	0x0800f961
 800f8e0:	0800faa7 	.word	0x0800faa7
 800f8e4:	0800faa7 	.word	0x0800faa7
 800f8e8:	0800faa7 	.word	0x0800faa7
 800f8ec:	0800f9a3 	.word	0x0800f9a3
 800f8f0:	0800faa7 	.word	0x0800faa7
 800f8f4:	0800faa7 	.word	0x0800faa7
 800f8f8:	0800faa7 	.word	0x0800faa7
 800f8fc:	0800f9e3 	.word	0x0800f9e3
 800f900:	0800faa7 	.word	0x0800faa7
 800f904:	0800faa7 	.word	0x0800faa7
 800f908:	0800faa7 	.word	0x0800faa7
 800f90c:	0800fa25 	.word	0x0800fa25
 800f910:	0800faa7 	.word	0x0800faa7
 800f914:	0800faa7 	.word	0x0800faa7
 800f918:	0800faa7 	.word	0x0800faa7
 800f91c:	0800fa65 	.word	0x0800fa65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	68b9      	ldr	r1, [r7, #8]
 800f926:	4618      	mov	r0, r3
 800f928:	f000 fa88 	bl	800fe3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	699a      	ldr	r2, [r3, #24]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f042 0208 	orr.w	r2, r2, #8
 800f93a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	699a      	ldr	r2, [r3, #24]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f022 0204 	bic.w	r2, r2, #4
 800f94a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6999      	ldr	r1, [r3, #24]
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	691a      	ldr	r2, [r3, #16]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	430a      	orrs	r2, r1
 800f95c:	619a      	str	r2, [r3, #24]
      break;
 800f95e:	e0a5      	b.n	800faac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	68b9      	ldr	r1, [r7, #8]
 800f966:	4618      	mov	r0, r3
 800f968:	f000 faf8 	bl	800ff5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	699a      	ldr	r2, [r3, #24]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f97a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	699a      	ldr	r2, [r3, #24]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f98a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6999      	ldr	r1, [r3, #24]
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	021a      	lsls	r2, r3, #8
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	430a      	orrs	r2, r1
 800f99e:	619a      	str	r2, [r3, #24]
      break;
 800f9a0:	e084      	b.n	800faac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	68b9      	ldr	r1, [r7, #8]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f000 fb61 	bl	8010070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	69da      	ldr	r2, [r3, #28]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f042 0208 	orr.w	r2, r2, #8
 800f9bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	69da      	ldr	r2, [r3, #28]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f022 0204 	bic.w	r2, r2, #4
 800f9cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	69d9      	ldr	r1, [r3, #28]
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	691a      	ldr	r2, [r3, #16]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	430a      	orrs	r2, r1
 800f9de:	61da      	str	r2, [r3, #28]
      break;
 800f9e0:	e064      	b.n	800faac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	68b9      	ldr	r1, [r7, #8]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 fbc9 	bl	8010180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	69da      	ldr	r2, [r3, #28]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	69da      	ldr	r2, [r3, #28]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	69d9      	ldr	r1, [r3, #28]
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	691b      	ldr	r3, [r3, #16]
 800fa18:	021a      	lsls	r2, r3, #8
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	430a      	orrs	r2, r1
 800fa20:	61da      	str	r2, [r3, #28]
      break;
 800fa22:	e043      	b.n	800faac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	68b9      	ldr	r1, [r7, #8]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f000 fc12 	bl	8010254 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f042 0208 	orr.w	r2, r2, #8
 800fa3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f022 0204 	bic.w	r2, r2, #4
 800fa4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	691a      	ldr	r2, [r3, #16]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	430a      	orrs	r2, r1
 800fa60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fa62:	e023      	b.n	800faac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	68b9      	ldr	r1, [r7, #8]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f000 fc56 	bl	801031c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	021a      	lsls	r2, r3, #8
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	430a      	orrs	r2, r1
 800faa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800faa4:	e002      	b.n	800faac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	75fb      	strb	r3, [r7, #23]
      break;
 800faaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2200      	movs	r2, #0
 800fab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3718      	adds	r7, #24
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop

0800fac0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fac8:	bf00      	nop
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fadc:	bf00      	nop
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800faf0:	bf00      	nop
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fb04:	bf00      	nop
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fb18:	bf00      	nop
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fb2c:	bf00      	nop
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fb40:	bf00      	nop
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb58:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d107      	bne.n	800fb74 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2201      	movs	r2, #1
 800fb68:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb72:	e02a      	b.n	800fbca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d107      	bne.n	800fb8e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2202      	movs	r2, #2
 800fb82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2201      	movs	r2, #1
 800fb88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb8c:	e01d      	b.n	800fbca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d107      	bne.n	800fba8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2204      	movs	r2, #4
 800fb9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2201      	movs	r2, #1
 800fba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fba6:	e010      	b.n	800fbca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d107      	bne.n	800fbc2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2208      	movs	r2, #8
 800fbb6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2201      	movs	r2, #1
 800fbbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbc0:	e003      	b.n	800fbca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f7ff ffb4 	bl	800fb38 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	771a      	strb	r2, [r3, #28]
}
 800fbd6:	bf00      	nop
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d10b      	bne.n	800fc0e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	69db      	ldr	r3, [r3, #28]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d136      	bne.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2201      	movs	r2, #1
 800fc08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc0c:	e031      	b.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d10b      	bne.n	800fc30 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2202      	movs	r2, #2
 800fc1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	69db      	ldr	r3, [r3, #28]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d125      	bne.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc2e:	e020      	b.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d10b      	bne.n	800fc52 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2204      	movs	r2, #4
 800fc3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	69db      	ldr	r3, [r3, #28]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d114      	bne.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc50:	e00f      	b.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d10a      	bne.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2208      	movs	r2, #8
 800fc60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	69db      	ldr	r3, [r3, #28]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d103      	bne.n	800fc72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f7ff ff42 	bl	800fafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	771a      	strb	r2, [r3, #28]
}
 800fc7e:	bf00      	nop
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b084      	sub	sp, #16
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc92:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d103      	bne.n	800fca6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2201      	movs	r2, #1
 800fca2:	771a      	strb	r2, [r3, #28]
 800fca4:	e019      	b.n	800fcda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d103      	bne.n	800fcb8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	771a      	strb	r2, [r3, #28]
 800fcb6:	e010      	b.n	800fcda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d103      	bne.n	800fcca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2204      	movs	r2, #4
 800fcc6:	771a      	strb	r2, [r3, #28]
 800fcc8:	e007      	b.n	800fcda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d102      	bne.n	800fcda <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2208      	movs	r2, #8
 800fcd8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f7ff ff18 	bl	800fb10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2200      	movs	r2, #0
 800fce4:	771a      	strb	r2, [r3, #28]
}
 800fce6:	bf00      	nop
 800fce8:	3710      	adds	r7, #16
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
	...

0800fcf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4a44      	ldr	r2, [pc, #272]	; (800fe14 <TIM_Base_SetConfig+0x124>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d013      	beq.n	800fd30 <TIM_Base_SetConfig+0x40>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd0e:	d00f      	beq.n	800fd30 <TIM_Base_SetConfig+0x40>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a41      	ldr	r2, [pc, #260]	; (800fe18 <TIM_Base_SetConfig+0x128>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d00b      	beq.n	800fd30 <TIM_Base_SetConfig+0x40>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4a40      	ldr	r2, [pc, #256]	; (800fe1c <TIM_Base_SetConfig+0x12c>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d007      	beq.n	800fd30 <TIM_Base_SetConfig+0x40>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a3f      	ldr	r2, [pc, #252]	; (800fe20 <TIM_Base_SetConfig+0x130>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d003      	beq.n	800fd30 <TIM_Base_SetConfig+0x40>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4a3e      	ldr	r2, [pc, #248]	; (800fe24 <TIM_Base_SetConfig+0x134>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d108      	bne.n	800fd42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4a33      	ldr	r2, [pc, #204]	; (800fe14 <TIM_Base_SetConfig+0x124>)
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d027      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd50:	d023      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4a30      	ldr	r2, [pc, #192]	; (800fe18 <TIM_Base_SetConfig+0x128>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d01f      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4a2f      	ldr	r2, [pc, #188]	; (800fe1c <TIM_Base_SetConfig+0x12c>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d01b      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4a2e      	ldr	r2, [pc, #184]	; (800fe20 <TIM_Base_SetConfig+0x130>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d017      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4a2d      	ldr	r2, [pc, #180]	; (800fe24 <TIM_Base_SetConfig+0x134>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d013      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4a2c      	ldr	r2, [pc, #176]	; (800fe28 <TIM_Base_SetConfig+0x138>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d00f      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4a2b      	ldr	r2, [pc, #172]	; (800fe2c <TIM_Base_SetConfig+0x13c>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d00b      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4a2a      	ldr	r2, [pc, #168]	; (800fe30 <TIM_Base_SetConfig+0x140>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d007      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4a29      	ldr	r2, [pc, #164]	; (800fe34 <TIM_Base_SetConfig+0x144>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d003      	beq.n	800fd9a <TIM_Base_SetConfig+0xaa>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4a28      	ldr	r2, [pc, #160]	; (800fe38 <TIM_Base_SetConfig+0x148>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d108      	bne.n	800fdac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fda0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	689a      	ldr	r2, [r3, #8]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a10      	ldr	r2, [pc, #64]	; (800fe14 <TIM_Base_SetConfig+0x124>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d00f      	beq.n	800fdf8 <TIM_Base_SetConfig+0x108>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4a12      	ldr	r2, [pc, #72]	; (800fe24 <TIM_Base_SetConfig+0x134>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d00b      	beq.n	800fdf8 <TIM_Base_SetConfig+0x108>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4a11      	ldr	r2, [pc, #68]	; (800fe28 <TIM_Base_SetConfig+0x138>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d007      	beq.n	800fdf8 <TIM_Base_SetConfig+0x108>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	4a10      	ldr	r2, [pc, #64]	; (800fe2c <TIM_Base_SetConfig+0x13c>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d003      	beq.n	800fdf8 <TIM_Base_SetConfig+0x108>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	4a0f      	ldr	r2, [pc, #60]	; (800fe30 <TIM_Base_SetConfig+0x140>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d103      	bne.n	800fe00 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	691a      	ldr	r2, [r3, #16]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2201      	movs	r2, #1
 800fe04:	615a      	str	r2, [r3, #20]
}
 800fe06:	bf00      	nop
 800fe08:	3714      	adds	r7, #20
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	40010000 	.word	0x40010000
 800fe18:	40000400 	.word	0x40000400
 800fe1c:	40000800 	.word	0x40000800
 800fe20:	40000c00 	.word	0x40000c00
 800fe24:	40010400 	.word	0x40010400
 800fe28:	40014000 	.word	0x40014000
 800fe2c:	40014400 	.word	0x40014400
 800fe30:	40014800 	.word	0x40014800
 800fe34:	4000e000 	.word	0x4000e000
 800fe38:	4000e400 	.word	0x4000e400

0800fe3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b087      	sub	sp, #28
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a1b      	ldr	r3, [r3, #32]
 800fe4a:	f023 0201 	bic.w	r2, r3, #1
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a1b      	ldr	r3, [r3, #32]
 800fe56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	699b      	ldr	r3, [r3, #24]
 800fe62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fe64:	68fa      	ldr	r2, [r7, #12]
 800fe66:	4b37      	ldr	r3, [pc, #220]	; (800ff44 <TIM_OC1_SetConfig+0x108>)
 800fe68:	4013      	ands	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f023 0303 	bic.w	r3, r3, #3
 800fe72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	f023 0302 	bic.w	r3, r3, #2
 800fe84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	697a      	ldr	r2, [r7, #20]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a2d      	ldr	r2, [pc, #180]	; (800ff48 <TIM_OC1_SetConfig+0x10c>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d00f      	beq.n	800feb8 <TIM_OC1_SetConfig+0x7c>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4a2c      	ldr	r2, [pc, #176]	; (800ff4c <TIM_OC1_SetConfig+0x110>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d00b      	beq.n	800feb8 <TIM_OC1_SetConfig+0x7c>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4a2b      	ldr	r2, [pc, #172]	; (800ff50 <TIM_OC1_SetConfig+0x114>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d007      	beq.n	800feb8 <TIM_OC1_SetConfig+0x7c>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4a2a      	ldr	r2, [pc, #168]	; (800ff54 <TIM_OC1_SetConfig+0x118>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d003      	beq.n	800feb8 <TIM_OC1_SetConfig+0x7c>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4a29      	ldr	r2, [pc, #164]	; (800ff58 <TIM_OC1_SetConfig+0x11c>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d10c      	bne.n	800fed2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	f023 0308 	bic.w	r3, r3, #8
 800febe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	697a      	ldr	r2, [r7, #20]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	f023 0304 	bic.w	r3, r3, #4
 800fed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a1c      	ldr	r2, [pc, #112]	; (800ff48 <TIM_OC1_SetConfig+0x10c>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d00f      	beq.n	800fefa <TIM_OC1_SetConfig+0xbe>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4a1b      	ldr	r2, [pc, #108]	; (800ff4c <TIM_OC1_SetConfig+0x110>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d00b      	beq.n	800fefa <TIM_OC1_SetConfig+0xbe>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4a1a      	ldr	r2, [pc, #104]	; (800ff50 <TIM_OC1_SetConfig+0x114>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d007      	beq.n	800fefa <TIM_OC1_SetConfig+0xbe>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4a19      	ldr	r2, [pc, #100]	; (800ff54 <TIM_OC1_SetConfig+0x118>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d003      	beq.n	800fefa <TIM_OC1_SetConfig+0xbe>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4a18      	ldr	r2, [pc, #96]	; (800ff58 <TIM_OC1_SetConfig+0x11c>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d111      	bne.n	800ff1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	695b      	ldr	r3, [r3, #20]
 800ff0e:	693a      	ldr	r2, [r7, #16]
 800ff10:	4313      	orrs	r3, r2
 800ff12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	699b      	ldr	r3, [r3, #24]
 800ff18:	693a      	ldr	r2, [r7, #16]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	693a      	ldr	r2, [r7, #16]
 800ff22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	685a      	ldr	r2, [r3, #4]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	697a      	ldr	r2, [r7, #20]
 800ff36:	621a      	str	r2, [r3, #32]
}
 800ff38:	bf00      	nop
 800ff3a:	371c      	adds	r7, #28
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	fffeff8f 	.word	0xfffeff8f
 800ff48:	40010000 	.word	0x40010000
 800ff4c:	40010400 	.word	0x40010400
 800ff50:	40014000 	.word	0x40014000
 800ff54:	40014400 	.word	0x40014400
 800ff58:	40014800 	.word	0x40014800

0800ff5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b087      	sub	sp, #28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	f023 0210 	bic.w	r2, r3, #16
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6a1b      	ldr	r3, [r3, #32]
 800ff76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	699b      	ldr	r3, [r3, #24]
 800ff82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	4b34      	ldr	r3, [pc, #208]	; (8010058 <TIM_OC2_SetConfig+0xfc>)
 800ff88:	4013      	ands	r3, r2
 800ff8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	021b      	lsls	r3, r3, #8
 800ff9a:	68fa      	ldr	r2, [r7, #12]
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	f023 0320 	bic.w	r3, r3, #32
 800ffa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	011b      	lsls	r3, r3, #4
 800ffae:	697a      	ldr	r2, [r7, #20]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	4a29      	ldr	r2, [pc, #164]	; (801005c <TIM_OC2_SetConfig+0x100>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d003      	beq.n	800ffc4 <TIM_OC2_SetConfig+0x68>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4a28      	ldr	r2, [pc, #160]	; (8010060 <TIM_OC2_SetConfig+0x104>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d10d      	bne.n	800ffe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	011b      	lsls	r3, r3, #4
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a1e      	ldr	r2, [pc, #120]	; (801005c <TIM_OC2_SetConfig+0x100>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d00f      	beq.n	8010008 <TIM_OC2_SetConfig+0xac>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a1d      	ldr	r2, [pc, #116]	; (8010060 <TIM_OC2_SetConfig+0x104>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d00b      	beq.n	8010008 <TIM_OC2_SetConfig+0xac>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a1c      	ldr	r2, [pc, #112]	; (8010064 <TIM_OC2_SetConfig+0x108>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d007      	beq.n	8010008 <TIM_OC2_SetConfig+0xac>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4a1b      	ldr	r2, [pc, #108]	; (8010068 <TIM_OC2_SetConfig+0x10c>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d003      	beq.n	8010008 <TIM_OC2_SetConfig+0xac>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4a1a      	ldr	r2, [pc, #104]	; (801006c <TIM_OC2_SetConfig+0x110>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d113      	bne.n	8010030 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801000e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	695b      	ldr	r3, [r3, #20]
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	693a      	ldr	r2, [r7, #16]
 8010020:	4313      	orrs	r3, r2
 8010022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	699b      	ldr	r3, [r3, #24]
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	693a      	ldr	r2, [r7, #16]
 801002c:	4313      	orrs	r3, r2
 801002e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	693a      	ldr	r2, [r7, #16]
 8010034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	685a      	ldr	r2, [r3, #4]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	621a      	str	r2, [r3, #32]
}
 801004a:	bf00      	nop
 801004c:	371c      	adds	r7, #28
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	feff8fff 	.word	0xfeff8fff
 801005c:	40010000 	.word	0x40010000
 8010060:	40010400 	.word	0x40010400
 8010064:	40014000 	.word	0x40014000
 8010068:	40014400 	.word	0x40014400
 801006c:	40014800 	.word	0x40014800

08010070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010070:	b480      	push	{r7}
 8010072:	b087      	sub	sp, #28
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6a1b      	ldr	r3, [r3, #32]
 801007e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	69db      	ldr	r3, [r3, #28]
 8010096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	4b33      	ldr	r3, [pc, #204]	; (8010168 <TIM_OC3_SetConfig+0xf8>)
 801009c:	4013      	ands	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f023 0303 	bic.w	r3, r3, #3
 80100a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	4313      	orrs	r3, r2
 80100b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80100b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	021b      	lsls	r3, r3, #8
 80100c0:	697a      	ldr	r2, [r7, #20]
 80100c2:	4313      	orrs	r3, r2
 80100c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a28      	ldr	r2, [pc, #160]	; (801016c <TIM_OC3_SetConfig+0xfc>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d003      	beq.n	80100d6 <TIM_OC3_SetConfig+0x66>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4a27      	ldr	r2, [pc, #156]	; (8010170 <TIM_OC3_SetConfig+0x100>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d10d      	bne.n	80100f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	021b      	lsls	r3, r3, #8
 80100e4:	697a      	ldr	r2, [r7, #20]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80100f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4a1d      	ldr	r2, [pc, #116]	; (801016c <TIM_OC3_SetConfig+0xfc>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d00f      	beq.n	801011a <TIM_OC3_SetConfig+0xaa>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4a1c      	ldr	r2, [pc, #112]	; (8010170 <TIM_OC3_SetConfig+0x100>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d00b      	beq.n	801011a <TIM_OC3_SetConfig+0xaa>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4a1b      	ldr	r2, [pc, #108]	; (8010174 <TIM_OC3_SetConfig+0x104>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d007      	beq.n	801011a <TIM_OC3_SetConfig+0xaa>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4a1a      	ldr	r2, [pc, #104]	; (8010178 <TIM_OC3_SetConfig+0x108>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d003      	beq.n	801011a <TIM_OC3_SetConfig+0xaa>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4a19      	ldr	r2, [pc, #100]	; (801017c <TIM_OC3_SetConfig+0x10c>)
 8010116:	4293      	cmp	r3, r2
 8010118:	d113      	bne.n	8010142 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	695b      	ldr	r3, [r3, #20]
 801012e:	011b      	lsls	r3, r3, #4
 8010130:	693a      	ldr	r2, [r7, #16]
 8010132:	4313      	orrs	r3, r2
 8010134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	699b      	ldr	r3, [r3, #24]
 801013a:	011b      	lsls	r3, r3, #4
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	4313      	orrs	r3, r2
 8010140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	693a      	ldr	r2, [r7, #16]
 8010146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	697a      	ldr	r2, [r7, #20]
 801015a:	621a      	str	r2, [r3, #32]
}
 801015c:	bf00      	nop
 801015e:	371c      	adds	r7, #28
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr
 8010168:	fffeff8f 	.word	0xfffeff8f
 801016c:	40010000 	.word	0x40010000
 8010170:	40010400 	.word	0x40010400
 8010174:	40014000 	.word	0x40014000
 8010178:	40014400 	.word	0x40014400
 801017c:	40014800 	.word	0x40014800

08010180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010180:	b480      	push	{r7}
 8010182:	b087      	sub	sp, #28
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a1b      	ldr	r3, [r3, #32]
 801018e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	69db      	ldr	r3, [r3, #28]
 80101a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	4b24      	ldr	r3, [pc, #144]	; (801023c <TIM_OC4_SetConfig+0xbc>)
 80101ac:	4013      	ands	r3, r2
 80101ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	021b      	lsls	r3, r3, #8
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80101ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	031b      	lsls	r3, r3, #12
 80101d2:	693a      	ldr	r2, [r7, #16]
 80101d4:	4313      	orrs	r3, r2
 80101d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4a19      	ldr	r2, [pc, #100]	; (8010240 <TIM_OC4_SetConfig+0xc0>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d00f      	beq.n	8010200 <TIM_OC4_SetConfig+0x80>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	4a18      	ldr	r2, [pc, #96]	; (8010244 <TIM_OC4_SetConfig+0xc4>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d00b      	beq.n	8010200 <TIM_OC4_SetConfig+0x80>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	4a17      	ldr	r2, [pc, #92]	; (8010248 <TIM_OC4_SetConfig+0xc8>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d007      	beq.n	8010200 <TIM_OC4_SetConfig+0x80>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4a16      	ldr	r2, [pc, #88]	; (801024c <TIM_OC4_SetConfig+0xcc>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d003      	beq.n	8010200 <TIM_OC4_SetConfig+0x80>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4a15      	ldr	r2, [pc, #84]	; (8010250 <TIM_OC4_SetConfig+0xd0>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d109      	bne.n	8010214 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	695b      	ldr	r3, [r3, #20]
 801020c:	019b      	lsls	r3, r3, #6
 801020e:	697a      	ldr	r2, [r7, #20]
 8010210:	4313      	orrs	r3, r2
 8010212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	697a      	ldr	r2, [r7, #20]
 8010218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	68fa      	ldr	r2, [r7, #12]
 801021e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	693a      	ldr	r2, [r7, #16]
 801022c:	621a      	str	r2, [r3, #32]
}
 801022e:	bf00      	nop
 8010230:	371c      	adds	r7, #28
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	feff8fff 	.word	0xfeff8fff
 8010240:	40010000 	.word	0x40010000
 8010244:	40010400 	.word	0x40010400
 8010248:	40014000 	.word	0x40014000
 801024c:	40014400 	.word	0x40014400
 8010250:	40014800 	.word	0x40014800

08010254 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010254:	b480      	push	{r7}
 8010256:	b087      	sub	sp, #28
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a1b      	ldr	r3, [r3, #32]
 801026e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801027a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	4b21      	ldr	r3, [pc, #132]	; (8010304 <TIM_OC5_SetConfig+0xb0>)
 8010280:	4013      	ands	r3, r2
 8010282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	68fa      	ldr	r2, [r7, #12]
 801028a:	4313      	orrs	r3, r2
 801028c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	041b      	lsls	r3, r3, #16
 801029c:	693a      	ldr	r2, [r7, #16]
 801029e:	4313      	orrs	r3, r2
 80102a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4a18      	ldr	r2, [pc, #96]	; (8010308 <TIM_OC5_SetConfig+0xb4>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d00f      	beq.n	80102ca <TIM_OC5_SetConfig+0x76>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4a17      	ldr	r2, [pc, #92]	; (801030c <TIM_OC5_SetConfig+0xb8>)
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d00b      	beq.n	80102ca <TIM_OC5_SetConfig+0x76>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4a16      	ldr	r2, [pc, #88]	; (8010310 <TIM_OC5_SetConfig+0xbc>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d007      	beq.n	80102ca <TIM_OC5_SetConfig+0x76>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4a15      	ldr	r2, [pc, #84]	; (8010314 <TIM_OC5_SetConfig+0xc0>)
 80102be:	4293      	cmp	r3, r2
 80102c0:	d003      	beq.n	80102ca <TIM_OC5_SetConfig+0x76>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4a14      	ldr	r2, [pc, #80]	; (8010318 <TIM_OC5_SetConfig+0xc4>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d109      	bne.n	80102de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80102d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	695b      	ldr	r3, [r3, #20]
 80102d6:	021b      	lsls	r3, r3, #8
 80102d8:	697a      	ldr	r2, [r7, #20]
 80102da:	4313      	orrs	r3, r2
 80102dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	685a      	ldr	r2, [r3, #4]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	621a      	str	r2, [r3, #32]
}
 80102f8:	bf00      	nop
 80102fa:	371c      	adds	r7, #28
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr
 8010304:	fffeff8f 	.word	0xfffeff8f
 8010308:	40010000 	.word	0x40010000
 801030c:	40010400 	.word	0x40010400
 8010310:	40014000 	.word	0x40014000
 8010314:	40014400 	.word	0x40014400
 8010318:	40014800 	.word	0x40014800

0801031c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801031c:	b480      	push	{r7}
 801031e:	b087      	sub	sp, #28
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a1b      	ldr	r3, [r3, #32]
 8010336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	4b22      	ldr	r3, [pc, #136]	; (80103d0 <TIM_OC6_SetConfig+0xb4>)
 8010348:	4013      	ands	r3, r2
 801034a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	021b      	lsls	r3, r3, #8
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	4313      	orrs	r3, r2
 8010356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801035e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	051b      	lsls	r3, r3, #20
 8010366:	693a      	ldr	r2, [r7, #16]
 8010368:	4313      	orrs	r3, r2
 801036a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a19      	ldr	r2, [pc, #100]	; (80103d4 <TIM_OC6_SetConfig+0xb8>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d00f      	beq.n	8010394 <TIM_OC6_SetConfig+0x78>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	4a18      	ldr	r2, [pc, #96]	; (80103d8 <TIM_OC6_SetConfig+0xbc>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d00b      	beq.n	8010394 <TIM_OC6_SetConfig+0x78>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4a17      	ldr	r2, [pc, #92]	; (80103dc <TIM_OC6_SetConfig+0xc0>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d007      	beq.n	8010394 <TIM_OC6_SetConfig+0x78>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4a16      	ldr	r2, [pc, #88]	; (80103e0 <TIM_OC6_SetConfig+0xc4>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d003      	beq.n	8010394 <TIM_OC6_SetConfig+0x78>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a15      	ldr	r2, [pc, #84]	; (80103e4 <TIM_OC6_SetConfig+0xc8>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d109      	bne.n	80103a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801039a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	695b      	ldr	r3, [r3, #20]
 80103a0:	029b      	lsls	r3, r3, #10
 80103a2:	697a      	ldr	r2, [r7, #20]
 80103a4:	4313      	orrs	r3, r2
 80103a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	68fa      	ldr	r2, [r7, #12]
 80103b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	685a      	ldr	r2, [r3, #4]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	693a      	ldr	r2, [r7, #16]
 80103c0:	621a      	str	r2, [r3, #32]
}
 80103c2:	bf00      	nop
 80103c4:	371c      	adds	r7, #28
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	feff8fff 	.word	0xfeff8fff
 80103d4:	40010000 	.word	0x40010000
 80103d8:	40010400 	.word	0x40010400
 80103dc:	40014000 	.word	0x40014000
 80103e0:	40014400 	.word	0x40014400
 80103e4:	40014800 	.word	0x40014800

080103e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b087      	sub	sp, #28
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	f003 031f 	and.w	r3, r3, #31
 80103fa:	2201      	movs	r2, #1
 80103fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6a1a      	ldr	r2, [r3, #32]
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	43db      	mvns	r3, r3
 801040a:	401a      	ands	r2, r3
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6a1a      	ldr	r2, [r3, #32]
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	f003 031f 	and.w	r3, r3, #31
 801041a:	6879      	ldr	r1, [r7, #4]
 801041c:	fa01 f303 	lsl.w	r3, r1, r3
 8010420:	431a      	orrs	r2, r3
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	621a      	str	r2, [r3, #32]
}
 8010426:	bf00      	nop
 8010428:	371c      	adds	r7, #28
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
	...

08010434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010444:	2b01      	cmp	r3, #1
 8010446:	d101      	bne.n	801044c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010448:	2302      	movs	r3, #2
 801044a:	e077      	b.n	801053c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2201      	movs	r2, #1
 8010450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2202      	movs	r2, #2
 8010458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a35      	ldr	r2, [pc, #212]	; (8010548 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d004      	beq.n	8010480 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a34      	ldr	r2, [pc, #208]	; (801054c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d108      	bne.n	8010492 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010486:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	4313      	orrs	r3, r2
 8010490:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010498:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	4313      	orrs	r3, r2
 80104a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4a25      	ldr	r2, [pc, #148]	; (8010548 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d02c      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104be:	d027      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a22      	ldr	r2, [pc, #136]	; (8010550 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d022      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a21      	ldr	r2, [pc, #132]	; (8010554 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d01d      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a1f      	ldr	r2, [pc, #124]	; (8010558 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d018      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a1a      	ldr	r2, [pc, #104]	; (801054c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d013      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a1b      	ldr	r2, [pc, #108]	; (801055c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d00e      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a1a      	ldr	r2, [pc, #104]	; (8010560 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d009      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a18      	ldr	r2, [pc, #96]	; (8010564 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d004      	beq.n	8010510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a17      	ldr	r2, [pc, #92]	; (8010568 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d10c      	bne.n	801052a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	68ba      	ldr	r2, [r7, #8]
 801051e:	4313      	orrs	r3, r2
 8010520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	68ba      	ldr	r2, [r7, #8]
 8010528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2201      	movs	r2, #1
 801052e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2200      	movs	r2, #0
 8010536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801053a:	2300      	movs	r3, #0
}
 801053c:	4618      	mov	r0, r3
 801053e:	3714      	adds	r7, #20
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	40010000 	.word	0x40010000
 801054c:	40010400 	.word	0x40010400
 8010550:	40000400 	.word	0x40000400
 8010554:	40000800 	.word	0x40000800
 8010558:	40000c00 	.word	0x40000c00
 801055c:	40001800 	.word	0x40001800
 8010560:	40014000 	.word	0x40014000
 8010564:	4000e000 	.word	0x4000e000
 8010568:	4000e400 	.word	0x4000e400

0801056c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010574:	bf00      	nop
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr

08010594 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801059c:	bf00      	nop
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d101      	bne.n	80105ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80105b6:	2301      	movs	r3, #1
 80105b8:	e042      	b.n	8010640 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d106      	bne.n	80105d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7f2 fcc5 	bl	8002f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2224      	movs	r2, #36	; 0x24
 80105d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f022 0201 	bic.w	r2, r2, #1
 80105e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 f82c 	bl	8010648 <UART_SetConfig>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b01      	cmp	r3, #1
 80105f4:	d101      	bne.n	80105fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80105f6:	2301      	movs	r3, #1
 80105f8:	e022      	b.n	8010640 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d002      	beq.n	8010608 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 fe8c 	bl	8011320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010616:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	689a      	ldr	r2, [r3, #8]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010626:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f042 0201 	orr.w	r2, r2, #1
 8010636:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f000 ff13 	bl	8011464 <UART_CheckIdleState>
 801063e:	4603      	mov	r3, r0
}
 8010640:	4618      	mov	r0, r3
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801064c:	b092      	sub	sp, #72	; 0x48
 801064e:	af00      	add	r7, sp, #0
 8010650:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010652:	2300      	movs	r3, #0
 8010654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	689a      	ldr	r2, [r3, #8]
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	431a      	orrs	r2, r3
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	695b      	ldr	r3, [r3, #20]
 8010666:	431a      	orrs	r2, r3
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	69db      	ldr	r3, [r3, #28]
 801066c:	4313      	orrs	r3, r2
 801066e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	4bbe      	ldr	r3, [pc, #760]	; (8010970 <UART_SetConfig+0x328>)
 8010678:	4013      	ands	r3, r2
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	6812      	ldr	r2, [r2, #0]
 801067e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010680:	430b      	orrs	r3, r1
 8010682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	68da      	ldr	r2, [r3, #12]
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	430a      	orrs	r2, r1
 8010698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4ab3      	ldr	r2, [pc, #716]	; (8010974 <UART_SetConfig+0x32c>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d004      	beq.n	80106b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106b0:	4313      	orrs	r3, r2
 80106b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	689a      	ldr	r2, [r3, #8]
 80106ba:	4baf      	ldr	r3, [pc, #700]	; (8010978 <UART_SetConfig+0x330>)
 80106bc:	4013      	ands	r3, r2
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	6812      	ldr	r2, [r2, #0]
 80106c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106c4:	430b      	orrs	r3, r1
 80106c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ce:	f023 010f 	bic.w	r1, r3, #15
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	430a      	orrs	r2, r1
 80106dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	4aa6      	ldr	r2, [pc, #664]	; (801097c <UART_SetConfig+0x334>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d177      	bne.n	80107d8 <UART_SetConfig+0x190>
 80106e8:	4ba5      	ldr	r3, [pc, #660]	; (8010980 <UART_SetConfig+0x338>)
 80106ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80106f0:	2b28      	cmp	r3, #40	; 0x28
 80106f2:	d86d      	bhi.n	80107d0 <UART_SetConfig+0x188>
 80106f4:	a201      	add	r2, pc, #4	; (adr r2, 80106fc <UART_SetConfig+0xb4>)
 80106f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106fa:	bf00      	nop
 80106fc:	080107a1 	.word	0x080107a1
 8010700:	080107d1 	.word	0x080107d1
 8010704:	080107d1 	.word	0x080107d1
 8010708:	080107d1 	.word	0x080107d1
 801070c:	080107d1 	.word	0x080107d1
 8010710:	080107d1 	.word	0x080107d1
 8010714:	080107d1 	.word	0x080107d1
 8010718:	080107d1 	.word	0x080107d1
 801071c:	080107a9 	.word	0x080107a9
 8010720:	080107d1 	.word	0x080107d1
 8010724:	080107d1 	.word	0x080107d1
 8010728:	080107d1 	.word	0x080107d1
 801072c:	080107d1 	.word	0x080107d1
 8010730:	080107d1 	.word	0x080107d1
 8010734:	080107d1 	.word	0x080107d1
 8010738:	080107d1 	.word	0x080107d1
 801073c:	080107b1 	.word	0x080107b1
 8010740:	080107d1 	.word	0x080107d1
 8010744:	080107d1 	.word	0x080107d1
 8010748:	080107d1 	.word	0x080107d1
 801074c:	080107d1 	.word	0x080107d1
 8010750:	080107d1 	.word	0x080107d1
 8010754:	080107d1 	.word	0x080107d1
 8010758:	080107d1 	.word	0x080107d1
 801075c:	080107b9 	.word	0x080107b9
 8010760:	080107d1 	.word	0x080107d1
 8010764:	080107d1 	.word	0x080107d1
 8010768:	080107d1 	.word	0x080107d1
 801076c:	080107d1 	.word	0x080107d1
 8010770:	080107d1 	.word	0x080107d1
 8010774:	080107d1 	.word	0x080107d1
 8010778:	080107d1 	.word	0x080107d1
 801077c:	080107c1 	.word	0x080107c1
 8010780:	080107d1 	.word	0x080107d1
 8010784:	080107d1 	.word	0x080107d1
 8010788:	080107d1 	.word	0x080107d1
 801078c:	080107d1 	.word	0x080107d1
 8010790:	080107d1 	.word	0x080107d1
 8010794:	080107d1 	.word	0x080107d1
 8010798:	080107d1 	.word	0x080107d1
 801079c:	080107c9 	.word	0x080107c9
 80107a0:	2301      	movs	r3, #1
 80107a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107a6:	e326      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80107a8:	2304      	movs	r3, #4
 80107aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ae:	e322      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80107b0:	2308      	movs	r3, #8
 80107b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107b6:	e31e      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80107b8:	2310      	movs	r3, #16
 80107ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107be:	e31a      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80107c0:	2320      	movs	r3, #32
 80107c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107c6:	e316      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80107c8:	2340      	movs	r3, #64	; 0x40
 80107ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ce:	e312      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80107d0:	2380      	movs	r3, #128	; 0x80
 80107d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107d6:	e30e      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4a69      	ldr	r2, [pc, #420]	; (8010984 <UART_SetConfig+0x33c>)
 80107de:	4293      	cmp	r3, r2
 80107e0:	d130      	bne.n	8010844 <UART_SetConfig+0x1fc>
 80107e2:	4b67      	ldr	r3, [pc, #412]	; (8010980 <UART_SetConfig+0x338>)
 80107e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107e6:	f003 0307 	and.w	r3, r3, #7
 80107ea:	2b05      	cmp	r3, #5
 80107ec:	d826      	bhi.n	801083c <UART_SetConfig+0x1f4>
 80107ee:	a201      	add	r2, pc, #4	; (adr r2, 80107f4 <UART_SetConfig+0x1ac>)
 80107f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f4:	0801080d 	.word	0x0801080d
 80107f8:	08010815 	.word	0x08010815
 80107fc:	0801081d 	.word	0x0801081d
 8010800:	08010825 	.word	0x08010825
 8010804:	0801082d 	.word	0x0801082d
 8010808:	08010835 	.word	0x08010835
 801080c:	2300      	movs	r3, #0
 801080e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010812:	e2f0      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010814:	2304      	movs	r3, #4
 8010816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801081a:	e2ec      	b.n	8010df6 <UART_SetConfig+0x7ae>
 801081c:	2308      	movs	r3, #8
 801081e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010822:	e2e8      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010824:	2310      	movs	r3, #16
 8010826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801082a:	e2e4      	b.n	8010df6 <UART_SetConfig+0x7ae>
 801082c:	2320      	movs	r3, #32
 801082e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010832:	e2e0      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010834:	2340      	movs	r3, #64	; 0x40
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801083a:	e2dc      	b.n	8010df6 <UART_SetConfig+0x7ae>
 801083c:	2380      	movs	r3, #128	; 0x80
 801083e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010842:	e2d8      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	4a4f      	ldr	r2, [pc, #316]	; (8010988 <UART_SetConfig+0x340>)
 801084a:	4293      	cmp	r3, r2
 801084c:	d130      	bne.n	80108b0 <UART_SetConfig+0x268>
 801084e:	4b4c      	ldr	r3, [pc, #304]	; (8010980 <UART_SetConfig+0x338>)
 8010850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010852:	f003 0307 	and.w	r3, r3, #7
 8010856:	2b05      	cmp	r3, #5
 8010858:	d826      	bhi.n	80108a8 <UART_SetConfig+0x260>
 801085a:	a201      	add	r2, pc, #4	; (adr r2, 8010860 <UART_SetConfig+0x218>)
 801085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010860:	08010879 	.word	0x08010879
 8010864:	08010881 	.word	0x08010881
 8010868:	08010889 	.word	0x08010889
 801086c:	08010891 	.word	0x08010891
 8010870:	08010899 	.word	0x08010899
 8010874:	080108a1 	.word	0x080108a1
 8010878:	2300      	movs	r3, #0
 801087a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087e:	e2ba      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010880:	2304      	movs	r3, #4
 8010882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010886:	e2b6      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010888:	2308      	movs	r3, #8
 801088a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088e:	e2b2      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010890:	2310      	movs	r3, #16
 8010892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010896:	e2ae      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010898:	2320      	movs	r3, #32
 801089a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801089e:	e2aa      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80108a0:	2340      	movs	r3, #64	; 0x40
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108a6:	e2a6      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80108a8:	2380      	movs	r3, #128	; 0x80
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ae:	e2a2      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4a35      	ldr	r2, [pc, #212]	; (801098c <UART_SetConfig+0x344>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d130      	bne.n	801091c <UART_SetConfig+0x2d4>
 80108ba:	4b31      	ldr	r3, [pc, #196]	; (8010980 <UART_SetConfig+0x338>)
 80108bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108be:	f003 0307 	and.w	r3, r3, #7
 80108c2:	2b05      	cmp	r3, #5
 80108c4:	d826      	bhi.n	8010914 <UART_SetConfig+0x2cc>
 80108c6:	a201      	add	r2, pc, #4	; (adr r2, 80108cc <UART_SetConfig+0x284>)
 80108c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108cc:	080108e5 	.word	0x080108e5
 80108d0:	080108ed 	.word	0x080108ed
 80108d4:	080108f5 	.word	0x080108f5
 80108d8:	080108fd 	.word	0x080108fd
 80108dc:	08010905 	.word	0x08010905
 80108e0:	0801090d 	.word	0x0801090d
 80108e4:	2300      	movs	r3, #0
 80108e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ea:	e284      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80108ec:	2304      	movs	r3, #4
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f2:	e280      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80108f4:	2308      	movs	r3, #8
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fa:	e27c      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80108fc:	2310      	movs	r3, #16
 80108fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010902:	e278      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010904:	2320      	movs	r3, #32
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801090a:	e274      	b.n	8010df6 <UART_SetConfig+0x7ae>
 801090c:	2340      	movs	r3, #64	; 0x40
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010912:	e270      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010914:	2380      	movs	r3, #128	; 0x80
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091a:	e26c      	b.n	8010df6 <UART_SetConfig+0x7ae>
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a1b      	ldr	r2, [pc, #108]	; (8010990 <UART_SetConfig+0x348>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d142      	bne.n	80109ac <UART_SetConfig+0x364>
 8010926:	4b16      	ldr	r3, [pc, #88]	; (8010980 <UART_SetConfig+0x338>)
 8010928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801092a:	f003 0307 	and.w	r3, r3, #7
 801092e:	2b05      	cmp	r3, #5
 8010930:	d838      	bhi.n	80109a4 <UART_SetConfig+0x35c>
 8010932:	a201      	add	r2, pc, #4	; (adr r2, 8010938 <UART_SetConfig+0x2f0>)
 8010934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010938:	08010951 	.word	0x08010951
 801093c:	08010959 	.word	0x08010959
 8010940:	08010961 	.word	0x08010961
 8010944:	08010969 	.word	0x08010969
 8010948:	08010995 	.word	0x08010995
 801094c:	0801099d 	.word	0x0801099d
 8010950:	2300      	movs	r3, #0
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010956:	e24e      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010958:	2304      	movs	r3, #4
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095e:	e24a      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010960:	2308      	movs	r3, #8
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010966:	e246      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010968:	2310      	movs	r3, #16
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096e:	e242      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010970:	cfff69f3 	.word	0xcfff69f3
 8010974:	58000c00 	.word	0x58000c00
 8010978:	11fff4ff 	.word	0x11fff4ff
 801097c:	40011000 	.word	0x40011000
 8010980:	58024400 	.word	0x58024400
 8010984:	40004400 	.word	0x40004400
 8010988:	40004800 	.word	0x40004800
 801098c:	40004c00 	.word	0x40004c00
 8010990:	40005000 	.word	0x40005000
 8010994:	2320      	movs	r3, #32
 8010996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099a:	e22c      	b.n	8010df6 <UART_SetConfig+0x7ae>
 801099c:	2340      	movs	r3, #64	; 0x40
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a2:	e228      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80109a4:	2380      	movs	r3, #128	; 0x80
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109aa:	e224      	b.n	8010df6 <UART_SetConfig+0x7ae>
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	4ab1      	ldr	r2, [pc, #708]	; (8010c78 <UART_SetConfig+0x630>)
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d176      	bne.n	8010aa4 <UART_SetConfig+0x45c>
 80109b6:	4bb1      	ldr	r3, [pc, #708]	; (8010c7c <UART_SetConfig+0x634>)
 80109b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109be:	2b28      	cmp	r3, #40	; 0x28
 80109c0:	d86c      	bhi.n	8010a9c <UART_SetConfig+0x454>
 80109c2:	a201      	add	r2, pc, #4	; (adr r2, 80109c8 <UART_SetConfig+0x380>)
 80109c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c8:	08010a6d 	.word	0x08010a6d
 80109cc:	08010a9d 	.word	0x08010a9d
 80109d0:	08010a9d 	.word	0x08010a9d
 80109d4:	08010a9d 	.word	0x08010a9d
 80109d8:	08010a9d 	.word	0x08010a9d
 80109dc:	08010a9d 	.word	0x08010a9d
 80109e0:	08010a9d 	.word	0x08010a9d
 80109e4:	08010a9d 	.word	0x08010a9d
 80109e8:	08010a75 	.word	0x08010a75
 80109ec:	08010a9d 	.word	0x08010a9d
 80109f0:	08010a9d 	.word	0x08010a9d
 80109f4:	08010a9d 	.word	0x08010a9d
 80109f8:	08010a9d 	.word	0x08010a9d
 80109fc:	08010a9d 	.word	0x08010a9d
 8010a00:	08010a9d 	.word	0x08010a9d
 8010a04:	08010a9d 	.word	0x08010a9d
 8010a08:	08010a7d 	.word	0x08010a7d
 8010a0c:	08010a9d 	.word	0x08010a9d
 8010a10:	08010a9d 	.word	0x08010a9d
 8010a14:	08010a9d 	.word	0x08010a9d
 8010a18:	08010a9d 	.word	0x08010a9d
 8010a1c:	08010a9d 	.word	0x08010a9d
 8010a20:	08010a9d 	.word	0x08010a9d
 8010a24:	08010a9d 	.word	0x08010a9d
 8010a28:	08010a85 	.word	0x08010a85
 8010a2c:	08010a9d 	.word	0x08010a9d
 8010a30:	08010a9d 	.word	0x08010a9d
 8010a34:	08010a9d 	.word	0x08010a9d
 8010a38:	08010a9d 	.word	0x08010a9d
 8010a3c:	08010a9d 	.word	0x08010a9d
 8010a40:	08010a9d 	.word	0x08010a9d
 8010a44:	08010a9d 	.word	0x08010a9d
 8010a48:	08010a8d 	.word	0x08010a8d
 8010a4c:	08010a9d 	.word	0x08010a9d
 8010a50:	08010a9d 	.word	0x08010a9d
 8010a54:	08010a9d 	.word	0x08010a9d
 8010a58:	08010a9d 	.word	0x08010a9d
 8010a5c:	08010a9d 	.word	0x08010a9d
 8010a60:	08010a9d 	.word	0x08010a9d
 8010a64:	08010a9d 	.word	0x08010a9d
 8010a68:	08010a95 	.word	0x08010a95
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a72:	e1c0      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010a74:	2304      	movs	r3, #4
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7a:	e1bc      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010a7c:	2308      	movs	r3, #8
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e1b8      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010a84:	2310      	movs	r3, #16
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8a:	e1b4      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010a8c:	2320      	movs	r3, #32
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a92:	e1b0      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010a94:	2340      	movs	r3, #64	; 0x40
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9a:	e1ac      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010a9c:	2380      	movs	r3, #128	; 0x80
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa2:	e1a8      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a75      	ldr	r2, [pc, #468]	; (8010c80 <UART_SetConfig+0x638>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d130      	bne.n	8010b10 <UART_SetConfig+0x4c8>
 8010aae:	4b73      	ldr	r3, [pc, #460]	; (8010c7c <UART_SetConfig+0x634>)
 8010ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ab2:	f003 0307 	and.w	r3, r3, #7
 8010ab6:	2b05      	cmp	r3, #5
 8010ab8:	d826      	bhi.n	8010b08 <UART_SetConfig+0x4c0>
 8010aba:	a201      	add	r2, pc, #4	; (adr r2, 8010ac0 <UART_SetConfig+0x478>)
 8010abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac0:	08010ad9 	.word	0x08010ad9
 8010ac4:	08010ae1 	.word	0x08010ae1
 8010ac8:	08010ae9 	.word	0x08010ae9
 8010acc:	08010af1 	.word	0x08010af1
 8010ad0:	08010af9 	.word	0x08010af9
 8010ad4:	08010b01 	.word	0x08010b01
 8010ad8:	2300      	movs	r3, #0
 8010ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ade:	e18a      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010ae0:	2304      	movs	r3, #4
 8010ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae6:	e186      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010ae8:	2308      	movs	r3, #8
 8010aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aee:	e182      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010af0:	2310      	movs	r3, #16
 8010af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010af6:	e17e      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010af8:	2320      	movs	r3, #32
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010afe:	e17a      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b00:	2340      	movs	r3, #64	; 0x40
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b06:	e176      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b08:	2380      	movs	r3, #128	; 0x80
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e172      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a5b      	ldr	r2, [pc, #364]	; (8010c84 <UART_SetConfig+0x63c>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d130      	bne.n	8010b7c <UART_SetConfig+0x534>
 8010b1a:	4b58      	ldr	r3, [pc, #352]	; (8010c7c <UART_SetConfig+0x634>)
 8010b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b1e:	f003 0307 	and.w	r3, r3, #7
 8010b22:	2b05      	cmp	r3, #5
 8010b24:	d826      	bhi.n	8010b74 <UART_SetConfig+0x52c>
 8010b26:	a201      	add	r2, pc, #4	; (adr r2, 8010b2c <UART_SetConfig+0x4e4>)
 8010b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b2c:	08010b45 	.word	0x08010b45
 8010b30:	08010b4d 	.word	0x08010b4d
 8010b34:	08010b55 	.word	0x08010b55
 8010b38:	08010b5d 	.word	0x08010b5d
 8010b3c:	08010b65 	.word	0x08010b65
 8010b40:	08010b6d 	.word	0x08010b6d
 8010b44:	2300      	movs	r3, #0
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4a:	e154      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b4c:	2304      	movs	r3, #4
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e150      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b54:	2308      	movs	r3, #8
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e14c      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b5c:	2310      	movs	r3, #16
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b62:	e148      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b64:	2320      	movs	r3, #32
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6a:	e144      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b6c:	2340      	movs	r3, #64	; 0x40
 8010b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b72:	e140      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b74:	2380      	movs	r3, #128	; 0x80
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7a:	e13c      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a41      	ldr	r2, [pc, #260]	; (8010c88 <UART_SetConfig+0x640>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	f040 8082 	bne.w	8010c8c <UART_SetConfig+0x644>
 8010b88:	4b3c      	ldr	r3, [pc, #240]	; (8010c7c <UART_SetConfig+0x634>)
 8010b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b90:	2b28      	cmp	r3, #40	; 0x28
 8010b92:	d86d      	bhi.n	8010c70 <UART_SetConfig+0x628>
 8010b94:	a201      	add	r2, pc, #4	; (adr r2, 8010b9c <UART_SetConfig+0x554>)
 8010b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b9a:	bf00      	nop
 8010b9c:	08010c41 	.word	0x08010c41
 8010ba0:	08010c71 	.word	0x08010c71
 8010ba4:	08010c71 	.word	0x08010c71
 8010ba8:	08010c71 	.word	0x08010c71
 8010bac:	08010c71 	.word	0x08010c71
 8010bb0:	08010c71 	.word	0x08010c71
 8010bb4:	08010c71 	.word	0x08010c71
 8010bb8:	08010c71 	.word	0x08010c71
 8010bbc:	08010c49 	.word	0x08010c49
 8010bc0:	08010c71 	.word	0x08010c71
 8010bc4:	08010c71 	.word	0x08010c71
 8010bc8:	08010c71 	.word	0x08010c71
 8010bcc:	08010c71 	.word	0x08010c71
 8010bd0:	08010c71 	.word	0x08010c71
 8010bd4:	08010c71 	.word	0x08010c71
 8010bd8:	08010c71 	.word	0x08010c71
 8010bdc:	08010c51 	.word	0x08010c51
 8010be0:	08010c71 	.word	0x08010c71
 8010be4:	08010c71 	.word	0x08010c71
 8010be8:	08010c71 	.word	0x08010c71
 8010bec:	08010c71 	.word	0x08010c71
 8010bf0:	08010c71 	.word	0x08010c71
 8010bf4:	08010c71 	.word	0x08010c71
 8010bf8:	08010c71 	.word	0x08010c71
 8010bfc:	08010c59 	.word	0x08010c59
 8010c00:	08010c71 	.word	0x08010c71
 8010c04:	08010c71 	.word	0x08010c71
 8010c08:	08010c71 	.word	0x08010c71
 8010c0c:	08010c71 	.word	0x08010c71
 8010c10:	08010c71 	.word	0x08010c71
 8010c14:	08010c71 	.word	0x08010c71
 8010c18:	08010c71 	.word	0x08010c71
 8010c1c:	08010c61 	.word	0x08010c61
 8010c20:	08010c71 	.word	0x08010c71
 8010c24:	08010c71 	.word	0x08010c71
 8010c28:	08010c71 	.word	0x08010c71
 8010c2c:	08010c71 	.word	0x08010c71
 8010c30:	08010c71 	.word	0x08010c71
 8010c34:	08010c71 	.word	0x08010c71
 8010c38:	08010c71 	.word	0x08010c71
 8010c3c:	08010c69 	.word	0x08010c69
 8010c40:	2301      	movs	r3, #1
 8010c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c46:	e0d6      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010c48:	2304      	movs	r3, #4
 8010c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4e:	e0d2      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010c50:	2308      	movs	r3, #8
 8010c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c56:	e0ce      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010c58:	2310      	movs	r3, #16
 8010c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5e:	e0ca      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010c60:	2320      	movs	r3, #32
 8010c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c66:	e0c6      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010c68:	2340      	movs	r3, #64	; 0x40
 8010c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6e:	e0c2      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010c70:	2380      	movs	r3, #128	; 0x80
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c76:	e0be      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010c78:	40011400 	.word	0x40011400
 8010c7c:	58024400 	.word	0x58024400
 8010c80:	40007800 	.word	0x40007800
 8010c84:	40007c00 	.word	0x40007c00
 8010c88:	40011800 	.word	0x40011800
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4aad      	ldr	r2, [pc, #692]	; (8010f48 <UART_SetConfig+0x900>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d176      	bne.n	8010d84 <UART_SetConfig+0x73c>
 8010c96:	4bad      	ldr	r3, [pc, #692]	; (8010f4c <UART_SetConfig+0x904>)
 8010c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c9e:	2b28      	cmp	r3, #40	; 0x28
 8010ca0:	d86c      	bhi.n	8010d7c <UART_SetConfig+0x734>
 8010ca2:	a201      	add	r2, pc, #4	; (adr r2, 8010ca8 <UART_SetConfig+0x660>)
 8010ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca8:	08010d4d 	.word	0x08010d4d
 8010cac:	08010d7d 	.word	0x08010d7d
 8010cb0:	08010d7d 	.word	0x08010d7d
 8010cb4:	08010d7d 	.word	0x08010d7d
 8010cb8:	08010d7d 	.word	0x08010d7d
 8010cbc:	08010d7d 	.word	0x08010d7d
 8010cc0:	08010d7d 	.word	0x08010d7d
 8010cc4:	08010d7d 	.word	0x08010d7d
 8010cc8:	08010d55 	.word	0x08010d55
 8010ccc:	08010d7d 	.word	0x08010d7d
 8010cd0:	08010d7d 	.word	0x08010d7d
 8010cd4:	08010d7d 	.word	0x08010d7d
 8010cd8:	08010d7d 	.word	0x08010d7d
 8010cdc:	08010d7d 	.word	0x08010d7d
 8010ce0:	08010d7d 	.word	0x08010d7d
 8010ce4:	08010d7d 	.word	0x08010d7d
 8010ce8:	08010d5d 	.word	0x08010d5d
 8010cec:	08010d7d 	.word	0x08010d7d
 8010cf0:	08010d7d 	.word	0x08010d7d
 8010cf4:	08010d7d 	.word	0x08010d7d
 8010cf8:	08010d7d 	.word	0x08010d7d
 8010cfc:	08010d7d 	.word	0x08010d7d
 8010d00:	08010d7d 	.word	0x08010d7d
 8010d04:	08010d7d 	.word	0x08010d7d
 8010d08:	08010d65 	.word	0x08010d65
 8010d0c:	08010d7d 	.word	0x08010d7d
 8010d10:	08010d7d 	.word	0x08010d7d
 8010d14:	08010d7d 	.word	0x08010d7d
 8010d18:	08010d7d 	.word	0x08010d7d
 8010d1c:	08010d7d 	.word	0x08010d7d
 8010d20:	08010d7d 	.word	0x08010d7d
 8010d24:	08010d7d 	.word	0x08010d7d
 8010d28:	08010d6d 	.word	0x08010d6d
 8010d2c:	08010d7d 	.word	0x08010d7d
 8010d30:	08010d7d 	.word	0x08010d7d
 8010d34:	08010d7d 	.word	0x08010d7d
 8010d38:	08010d7d 	.word	0x08010d7d
 8010d3c:	08010d7d 	.word	0x08010d7d
 8010d40:	08010d7d 	.word	0x08010d7d
 8010d44:	08010d7d 	.word	0x08010d7d
 8010d48:	08010d75 	.word	0x08010d75
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e050      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010d54:	2304      	movs	r3, #4
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5a:	e04c      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010d5c:	2308      	movs	r3, #8
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d62:	e048      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010d64:	2310      	movs	r3, #16
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e044      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010d6c:	2320      	movs	r3, #32
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d72:	e040      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010d74:	2340      	movs	r3, #64	; 0x40
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e03c      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010d7c:	2380      	movs	r3, #128	; 0x80
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e038      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4a71      	ldr	r2, [pc, #452]	; (8010f50 <UART_SetConfig+0x908>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d130      	bne.n	8010df0 <UART_SetConfig+0x7a8>
 8010d8e:	4b6f      	ldr	r3, [pc, #444]	; (8010f4c <UART_SetConfig+0x904>)
 8010d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d92:	f003 0307 	and.w	r3, r3, #7
 8010d96:	2b05      	cmp	r3, #5
 8010d98:	d826      	bhi.n	8010de8 <UART_SetConfig+0x7a0>
 8010d9a:	a201      	add	r2, pc, #4	; (adr r2, 8010da0 <UART_SetConfig+0x758>)
 8010d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da0:	08010db9 	.word	0x08010db9
 8010da4:	08010dc1 	.word	0x08010dc1
 8010da8:	08010dc9 	.word	0x08010dc9
 8010dac:	08010dd1 	.word	0x08010dd1
 8010db0:	08010dd9 	.word	0x08010dd9
 8010db4:	08010de1 	.word	0x08010de1
 8010db8:	2302      	movs	r3, #2
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e01a      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010dc0:	2304      	movs	r3, #4
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc6:	e016      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010dc8:	2308      	movs	r3, #8
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dce:	e012      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010dd0:	2310      	movs	r3, #16
 8010dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd6:	e00e      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010dd8:	2320      	movs	r3, #32
 8010dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dde:	e00a      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010de0:	2340      	movs	r3, #64	; 0x40
 8010de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de6:	e006      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010de8:	2380      	movs	r3, #128	; 0x80
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dee:	e002      	b.n	8010df6 <UART_SetConfig+0x7ae>
 8010df0:	2380      	movs	r3, #128	; 0x80
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a55      	ldr	r2, [pc, #340]	; (8010f50 <UART_SetConfig+0x908>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	f040 80f8 	bne.w	8010ff2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e06:	2b20      	cmp	r3, #32
 8010e08:	dc46      	bgt.n	8010e98 <UART_SetConfig+0x850>
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	db75      	blt.n	8010efa <UART_SetConfig+0x8b2>
 8010e0e:	3b02      	subs	r3, #2
 8010e10:	2b1e      	cmp	r3, #30
 8010e12:	d872      	bhi.n	8010efa <UART_SetConfig+0x8b2>
 8010e14:	a201      	add	r2, pc, #4	; (adr r2, 8010e1c <UART_SetConfig+0x7d4>)
 8010e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1a:	bf00      	nop
 8010e1c:	08010e9f 	.word	0x08010e9f
 8010e20:	08010efb 	.word	0x08010efb
 8010e24:	08010ea7 	.word	0x08010ea7
 8010e28:	08010efb 	.word	0x08010efb
 8010e2c:	08010efb 	.word	0x08010efb
 8010e30:	08010efb 	.word	0x08010efb
 8010e34:	08010eb7 	.word	0x08010eb7
 8010e38:	08010efb 	.word	0x08010efb
 8010e3c:	08010efb 	.word	0x08010efb
 8010e40:	08010efb 	.word	0x08010efb
 8010e44:	08010efb 	.word	0x08010efb
 8010e48:	08010efb 	.word	0x08010efb
 8010e4c:	08010efb 	.word	0x08010efb
 8010e50:	08010efb 	.word	0x08010efb
 8010e54:	08010ec7 	.word	0x08010ec7
 8010e58:	08010efb 	.word	0x08010efb
 8010e5c:	08010efb 	.word	0x08010efb
 8010e60:	08010efb 	.word	0x08010efb
 8010e64:	08010efb 	.word	0x08010efb
 8010e68:	08010efb 	.word	0x08010efb
 8010e6c:	08010efb 	.word	0x08010efb
 8010e70:	08010efb 	.word	0x08010efb
 8010e74:	08010efb 	.word	0x08010efb
 8010e78:	08010efb 	.word	0x08010efb
 8010e7c:	08010efb 	.word	0x08010efb
 8010e80:	08010efb 	.word	0x08010efb
 8010e84:	08010efb 	.word	0x08010efb
 8010e88:	08010efb 	.word	0x08010efb
 8010e8c:	08010efb 	.word	0x08010efb
 8010e90:	08010efb 	.word	0x08010efb
 8010e94:	08010eed 	.word	0x08010eed
 8010e98:	2b40      	cmp	r3, #64	; 0x40
 8010e9a:	d02a      	beq.n	8010ef2 <UART_SetConfig+0x8aa>
 8010e9c:	e02d      	b.n	8010efa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010e9e:	f7fb f86b 	bl	800bf78 <HAL_RCCEx_GetD3PCLK1Freq>
 8010ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ea4:	e02f      	b.n	8010f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fb f87a 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eb4:	e027      	b.n	8010f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010eb6:	f107 0318 	add.w	r3, r7, #24
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fb f9c6 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ec4:	e01f      	b.n	8010f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ec6:	4b21      	ldr	r3, [pc, #132]	; (8010f4c <UART_SetConfig+0x904>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f003 0320 	and.w	r3, r3, #32
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d009      	beq.n	8010ee6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ed2:	4b1e      	ldr	r3, [pc, #120]	; (8010f4c <UART_SetConfig+0x904>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	08db      	lsrs	r3, r3, #3
 8010ed8:	f003 0303 	and.w	r3, r3, #3
 8010edc:	4a1d      	ldr	r2, [pc, #116]	; (8010f54 <UART_SetConfig+0x90c>)
 8010ede:	fa22 f303 	lsr.w	r3, r2, r3
 8010ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ee4:	e00f      	b.n	8010f06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010ee6:	4b1b      	ldr	r3, [pc, #108]	; (8010f54 <UART_SetConfig+0x90c>)
 8010ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eea:	e00c      	b.n	8010f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010eec:	4b1a      	ldr	r3, [pc, #104]	; (8010f58 <UART_SetConfig+0x910>)
 8010eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef0:	e009      	b.n	8010f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef8:	e005      	b.n	8010f06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010efa:	2300      	movs	r3, #0
 8010efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010efe:	2301      	movs	r3, #1
 8010f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 81ee 	beq.w	80112ea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f12:	4a12      	ldr	r2, [pc, #72]	; (8010f5c <UART_SetConfig+0x914>)
 8010f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f18:	461a      	mov	r2, r3
 8010f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f20:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	4613      	mov	r3, r2
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	4413      	add	r3, r2
 8010f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d305      	bcc.n	8010f3e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d910      	bls.n	8010f60 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f44:	e1d1      	b.n	80112ea <UART_SetConfig+0xca2>
 8010f46:	bf00      	nop
 8010f48:	40011c00 	.word	0x40011c00
 8010f4c:	58024400 	.word	0x58024400
 8010f50:	58000c00 	.word	0x58000c00
 8010f54:	03d09000 	.word	0x03d09000
 8010f58:	003d0900 	.word	0x003d0900
 8010f5c:	080175bc 	.word	0x080175bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f62:	2200      	movs	r2, #0
 8010f64:	60bb      	str	r3, [r7, #8]
 8010f66:	60fa      	str	r2, [r7, #12]
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f6c:	4ac0      	ldr	r2, [pc, #768]	; (8011270 <UART_SetConfig+0xc28>)
 8010f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	2200      	movs	r2, #0
 8010f76:	603b      	str	r3, [r7, #0]
 8010f78:	607a      	str	r2, [r7, #4]
 8010f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010f82:	f7ef fa1d 	bl	80003c0 <__aeabi_uldivmod>
 8010f86:	4602      	mov	r2, r0
 8010f88:	460b      	mov	r3, r1
 8010f8a:	4610      	mov	r0, r2
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	f04f 0200 	mov.w	r2, #0
 8010f92:	f04f 0300 	mov.w	r3, #0
 8010f96:	020b      	lsls	r3, r1, #8
 8010f98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010f9c:	0202      	lsls	r2, r0, #8
 8010f9e:	6979      	ldr	r1, [r7, #20]
 8010fa0:	6849      	ldr	r1, [r1, #4]
 8010fa2:	0849      	lsrs	r1, r1, #1
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	4605      	mov	r5, r0
 8010faa:	eb12 0804 	adds.w	r8, r2, r4
 8010fae:	eb43 0905 	adc.w	r9, r3, r5
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	469a      	mov	sl, r3
 8010fba:	4693      	mov	fp, r2
 8010fbc:	4652      	mov	r2, sl
 8010fbe:	465b      	mov	r3, fp
 8010fc0:	4640      	mov	r0, r8
 8010fc2:	4649      	mov	r1, r9
 8010fc4:	f7ef f9fc 	bl	80003c0 <__aeabi_uldivmod>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	4613      	mov	r3, r2
 8010fce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010fd6:	d308      	bcc.n	8010fea <UART_SetConfig+0x9a2>
 8010fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010fde:	d204      	bcs.n	8010fea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fe6:	60da      	str	r2, [r3, #12]
 8010fe8:	e17f      	b.n	80112ea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010fea:	2301      	movs	r3, #1
 8010fec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ff0:	e17b      	b.n	80112ea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	69db      	ldr	r3, [r3, #28]
 8010ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ffa:	f040 80bd 	bne.w	8011178 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010ffe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011002:	2b20      	cmp	r3, #32
 8011004:	dc48      	bgt.n	8011098 <UART_SetConfig+0xa50>
 8011006:	2b00      	cmp	r3, #0
 8011008:	db7b      	blt.n	8011102 <UART_SetConfig+0xaba>
 801100a:	2b20      	cmp	r3, #32
 801100c:	d879      	bhi.n	8011102 <UART_SetConfig+0xaba>
 801100e:	a201      	add	r2, pc, #4	; (adr r2, 8011014 <UART_SetConfig+0x9cc>)
 8011010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011014:	0801109f 	.word	0x0801109f
 8011018:	080110a7 	.word	0x080110a7
 801101c:	08011103 	.word	0x08011103
 8011020:	08011103 	.word	0x08011103
 8011024:	080110af 	.word	0x080110af
 8011028:	08011103 	.word	0x08011103
 801102c:	08011103 	.word	0x08011103
 8011030:	08011103 	.word	0x08011103
 8011034:	080110bf 	.word	0x080110bf
 8011038:	08011103 	.word	0x08011103
 801103c:	08011103 	.word	0x08011103
 8011040:	08011103 	.word	0x08011103
 8011044:	08011103 	.word	0x08011103
 8011048:	08011103 	.word	0x08011103
 801104c:	08011103 	.word	0x08011103
 8011050:	08011103 	.word	0x08011103
 8011054:	080110cf 	.word	0x080110cf
 8011058:	08011103 	.word	0x08011103
 801105c:	08011103 	.word	0x08011103
 8011060:	08011103 	.word	0x08011103
 8011064:	08011103 	.word	0x08011103
 8011068:	08011103 	.word	0x08011103
 801106c:	08011103 	.word	0x08011103
 8011070:	08011103 	.word	0x08011103
 8011074:	08011103 	.word	0x08011103
 8011078:	08011103 	.word	0x08011103
 801107c:	08011103 	.word	0x08011103
 8011080:	08011103 	.word	0x08011103
 8011084:	08011103 	.word	0x08011103
 8011088:	08011103 	.word	0x08011103
 801108c:	08011103 	.word	0x08011103
 8011090:	08011103 	.word	0x08011103
 8011094:	080110f5 	.word	0x080110f5
 8011098:	2b40      	cmp	r3, #64	; 0x40
 801109a:	d02e      	beq.n	80110fa <UART_SetConfig+0xab2>
 801109c:	e031      	b.n	8011102 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801109e:	f7f9 f8cd 	bl	800a23c <HAL_RCC_GetPCLK1Freq>
 80110a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110a4:	e033      	b.n	801110e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110a6:	f7f9 f8df 	bl	800a268 <HAL_RCC_GetPCLK2Freq>
 80110aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110ac:	e02f      	b.n	801110e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fa ff76 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110bc:	e027      	b.n	801110e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110be:	f107 0318 	add.w	r3, r7, #24
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fb f8c2 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110cc:	e01f      	b.n	801110e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110ce:	4b69      	ldr	r3, [pc, #420]	; (8011274 <UART_SetConfig+0xc2c>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f003 0320 	and.w	r3, r3, #32
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d009      	beq.n	80110ee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110da:	4b66      	ldr	r3, [pc, #408]	; (8011274 <UART_SetConfig+0xc2c>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	08db      	lsrs	r3, r3, #3
 80110e0:	f003 0303 	and.w	r3, r3, #3
 80110e4:	4a64      	ldr	r2, [pc, #400]	; (8011278 <UART_SetConfig+0xc30>)
 80110e6:	fa22 f303 	lsr.w	r3, r2, r3
 80110ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110ec:	e00f      	b.n	801110e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80110ee:	4b62      	ldr	r3, [pc, #392]	; (8011278 <UART_SetConfig+0xc30>)
 80110f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110f2:	e00c      	b.n	801110e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110f4:	4b61      	ldr	r3, [pc, #388]	; (801127c <UART_SetConfig+0xc34>)
 80110f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110f8:	e009      	b.n	801110e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011100:	e005      	b.n	801110e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011102:	2300      	movs	r3, #0
 8011104:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011106:	2301      	movs	r3, #1
 8011108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801110c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801110e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 80ea 	beq.w	80112ea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111a:	4a55      	ldr	r2, [pc, #340]	; (8011270 <UART_SetConfig+0xc28>)
 801111c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011120:	461a      	mov	r2, r3
 8011122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011124:	fbb3 f3f2 	udiv	r3, r3, r2
 8011128:	005a      	lsls	r2, r3, #1
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	085b      	lsrs	r3, r3, #1
 8011130:	441a      	add	r2, r3
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	fbb2 f3f3 	udiv	r3, r2, r3
 801113a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113e:	2b0f      	cmp	r3, #15
 8011140:	d916      	bls.n	8011170 <UART_SetConfig+0xb28>
 8011142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011148:	d212      	bcs.n	8011170 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114c:	b29b      	uxth	r3, r3
 801114e:	f023 030f 	bic.w	r3, r3, #15
 8011152:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011156:	085b      	lsrs	r3, r3, #1
 8011158:	b29b      	uxth	r3, r3
 801115a:	f003 0307 	and.w	r3, r3, #7
 801115e:	b29a      	uxth	r2, r3
 8011160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011162:	4313      	orrs	r3, r2
 8011164:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801116c:	60da      	str	r2, [r3, #12]
 801116e:	e0bc      	b.n	80112ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011170:	2301      	movs	r3, #1
 8011172:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011176:	e0b8      	b.n	80112ea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011178:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801117c:	2b20      	cmp	r3, #32
 801117e:	dc4b      	bgt.n	8011218 <UART_SetConfig+0xbd0>
 8011180:	2b00      	cmp	r3, #0
 8011182:	f2c0 8087 	blt.w	8011294 <UART_SetConfig+0xc4c>
 8011186:	2b20      	cmp	r3, #32
 8011188:	f200 8084 	bhi.w	8011294 <UART_SetConfig+0xc4c>
 801118c:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <UART_SetConfig+0xb4c>)
 801118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011192:	bf00      	nop
 8011194:	0801121f 	.word	0x0801121f
 8011198:	08011227 	.word	0x08011227
 801119c:	08011295 	.word	0x08011295
 80111a0:	08011295 	.word	0x08011295
 80111a4:	0801122f 	.word	0x0801122f
 80111a8:	08011295 	.word	0x08011295
 80111ac:	08011295 	.word	0x08011295
 80111b0:	08011295 	.word	0x08011295
 80111b4:	0801123f 	.word	0x0801123f
 80111b8:	08011295 	.word	0x08011295
 80111bc:	08011295 	.word	0x08011295
 80111c0:	08011295 	.word	0x08011295
 80111c4:	08011295 	.word	0x08011295
 80111c8:	08011295 	.word	0x08011295
 80111cc:	08011295 	.word	0x08011295
 80111d0:	08011295 	.word	0x08011295
 80111d4:	0801124f 	.word	0x0801124f
 80111d8:	08011295 	.word	0x08011295
 80111dc:	08011295 	.word	0x08011295
 80111e0:	08011295 	.word	0x08011295
 80111e4:	08011295 	.word	0x08011295
 80111e8:	08011295 	.word	0x08011295
 80111ec:	08011295 	.word	0x08011295
 80111f0:	08011295 	.word	0x08011295
 80111f4:	08011295 	.word	0x08011295
 80111f8:	08011295 	.word	0x08011295
 80111fc:	08011295 	.word	0x08011295
 8011200:	08011295 	.word	0x08011295
 8011204:	08011295 	.word	0x08011295
 8011208:	08011295 	.word	0x08011295
 801120c:	08011295 	.word	0x08011295
 8011210:	08011295 	.word	0x08011295
 8011214:	08011287 	.word	0x08011287
 8011218:	2b40      	cmp	r3, #64	; 0x40
 801121a:	d037      	beq.n	801128c <UART_SetConfig+0xc44>
 801121c:	e03a      	b.n	8011294 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801121e:	f7f9 f80d 	bl	800a23c <HAL_RCC_GetPCLK1Freq>
 8011222:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011224:	e03c      	b.n	80112a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011226:	f7f9 f81f 	bl	800a268 <HAL_RCC_GetPCLK2Freq>
 801122a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801122c:	e038      	b.n	80112a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011232:	4618      	mov	r0, r3
 8011234:	f7fa feb6 	bl	800bfa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801123c:	e030      	b.n	80112a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801123e:	f107 0318 	add.w	r3, r7, #24
 8011242:	4618      	mov	r0, r3
 8011244:	f7fb f802 	bl	800c24c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801124c:	e028      	b.n	80112a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801124e:	4b09      	ldr	r3, [pc, #36]	; (8011274 <UART_SetConfig+0xc2c>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f003 0320 	and.w	r3, r3, #32
 8011256:	2b00      	cmp	r3, #0
 8011258:	d012      	beq.n	8011280 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801125a:	4b06      	ldr	r3, [pc, #24]	; (8011274 <UART_SetConfig+0xc2c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	08db      	lsrs	r3, r3, #3
 8011260:	f003 0303 	and.w	r3, r3, #3
 8011264:	4a04      	ldr	r2, [pc, #16]	; (8011278 <UART_SetConfig+0xc30>)
 8011266:	fa22 f303 	lsr.w	r3, r2, r3
 801126a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801126c:	e018      	b.n	80112a0 <UART_SetConfig+0xc58>
 801126e:	bf00      	nop
 8011270:	080175bc 	.word	0x080175bc
 8011274:	58024400 	.word	0x58024400
 8011278:	03d09000 	.word	0x03d09000
 801127c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011280:	4b24      	ldr	r3, [pc, #144]	; (8011314 <UART_SetConfig+0xccc>)
 8011282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011284:	e00c      	b.n	80112a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011286:	4b24      	ldr	r3, [pc, #144]	; (8011318 <UART_SetConfig+0xcd0>)
 8011288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801128a:	e009      	b.n	80112a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801128c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011292:	e005      	b.n	80112a0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011294:	2300      	movs	r3, #0
 8011296:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011298:	2301      	movs	r3, #1
 801129a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801129e:	bf00      	nop
    }

    if (pclk != 0U)
 80112a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d021      	beq.n	80112ea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112aa:	4a1c      	ldr	r2, [pc, #112]	; (801131c <UART_SetConfig+0xcd4>)
 80112ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112b0:	461a      	mov	r2, r3
 80112b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	085b      	lsrs	r3, r3, #1
 80112be:	441a      	add	r2, r3
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80112c8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112cc:	2b0f      	cmp	r3, #15
 80112ce:	d909      	bls.n	80112e4 <UART_SetConfig+0xc9c>
 80112d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112d6:	d205      	bcs.n	80112e4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80112d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112da:	b29a      	uxth	r2, r3
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	60da      	str	r2, [r3, #12]
 80112e2:	e002      	b.n	80112ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80112e4:	2301      	movs	r3, #1
 80112e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2201      	movs	r2, #1
 80112ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	2201      	movs	r2, #1
 80112f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	2200      	movs	r2, #0
 80112fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2200      	movs	r2, #0
 8011304:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011306:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801130a:	4618      	mov	r0, r3
 801130c:	3748      	adds	r7, #72	; 0x48
 801130e:	46bd      	mov	sp, r7
 8011310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011314:	03d09000 	.word	0x03d09000
 8011318:	003d0900 	.word	0x003d0900
 801131c:	080175bc 	.word	0x080175bc

08011320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801132c:	f003 0301 	and.w	r3, r3, #1
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00a      	beq.n	801134a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	430a      	orrs	r2, r1
 8011348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801134e:	f003 0302 	and.w	r3, r3, #2
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	430a      	orrs	r2, r1
 801136a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011370:	f003 0304 	and.w	r3, r3, #4
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00a      	beq.n	801138e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	430a      	orrs	r2, r1
 801138c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011392:	f003 0308 	and.w	r3, r3, #8
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00a      	beq.n	80113b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	430a      	orrs	r2, r1
 80113ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113b4:	f003 0310 	and.w	r3, r3, #16
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00a      	beq.n	80113d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	430a      	orrs	r2, r1
 80113d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113d6:	f003 0320 	and.w	r3, r3, #32
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00a      	beq.n	80113f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	430a      	orrs	r2, r1
 80113f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d01a      	beq.n	8011436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	430a      	orrs	r2, r1
 8011414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801141a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801141e:	d10a      	bne.n	8011436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	430a      	orrs	r2, r1
 8011434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00a      	beq.n	8011458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	430a      	orrs	r2, r1
 8011456:	605a      	str	r2, [r3, #4]
  }
}
 8011458:	bf00      	nop
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr

08011464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b098      	sub	sp, #96	; 0x60
 8011468:	af02      	add	r7, sp, #8
 801146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011474:	f7f2 f822 	bl	80034bc <HAL_GetTick>
 8011478:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f003 0308 	and.w	r3, r3, #8
 8011484:	2b08      	cmp	r3, #8
 8011486:	d12f      	bne.n	80114e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011490:	2200      	movs	r2, #0
 8011492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 f88e 	bl	80115b8 <UART_WaitOnFlagUntilTimeout>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d022      	beq.n	80114e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114aa:	e853 3f00 	ldrex	r3, [r3]
 80114ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80114b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114b6:	653b      	str	r3, [r7, #80]	; 0x50
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	461a      	mov	r2, r3
 80114be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114c0:	647b      	str	r3, [r7, #68]	; 0x44
 80114c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80114c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114c8:	e841 2300 	strex	r3, r2, [r1]
 80114cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80114ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d1e6      	bne.n	80114a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2220      	movs	r2, #32
 80114d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2200      	movs	r2, #0
 80114e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114e4:	2303      	movs	r3, #3
 80114e6:	e063      	b.n	80115b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f003 0304 	and.w	r3, r3, #4
 80114f2:	2b04      	cmp	r3, #4
 80114f4:	d149      	bne.n	801158a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114fe:	2200      	movs	r2, #0
 8011500:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f000 f857 	bl	80115b8 <UART_WaitOnFlagUntilTimeout>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d03c      	beq.n	801158a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011518:	e853 3f00 	ldrex	r3, [r3]
 801151c:	623b      	str	r3, [r7, #32]
   return(result);
 801151e:	6a3b      	ldr	r3, [r7, #32]
 8011520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	461a      	mov	r2, r3
 801152c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801152e:	633b      	str	r3, [r7, #48]	; 0x30
 8011530:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011536:	e841 2300 	strex	r3, r2, [r1]
 801153a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1e6      	bne.n	8011510 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	3308      	adds	r3, #8
 8011548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	e853 3f00 	ldrex	r3, [r3]
 8011550:	60fb      	str	r3, [r7, #12]
   return(result);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f023 0301 	bic.w	r3, r3, #1
 8011558:	64bb      	str	r3, [r7, #72]	; 0x48
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	3308      	adds	r3, #8
 8011560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011562:	61fa      	str	r2, [r7, #28]
 8011564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011566:	69b9      	ldr	r1, [r7, #24]
 8011568:	69fa      	ldr	r2, [r7, #28]
 801156a:	e841 2300 	strex	r3, r2, [r1]
 801156e:	617b      	str	r3, [r7, #20]
   return(result);
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d1e5      	bne.n	8011542 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2220      	movs	r2, #32
 801157a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011586:	2303      	movs	r3, #3
 8011588:	e012      	b.n	80115b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2220      	movs	r2, #32
 801158e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2220      	movs	r2, #32
 8011596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3758      	adds	r7, #88	; 0x58
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	603b      	str	r3, [r7, #0]
 80115c4:	4613      	mov	r3, r2
 80115c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115c8:	e049      	b.n	801165e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d0:	d045      	beq.n	801165e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115d2:	f7f1 ff73 	bl	80034bc <HAL_GetTick>
 80115d6:	4602      	mov	r2, r0
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	1ad3      	subs	r3, r2, r3
 80115dc:	69ba      	ldr	r2, [r7, #24]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d302      	bcc.n	80115e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80115e2:	69bb      	ldr	r3, [r7, #24]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d101      	bne.n	80115ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80115e8:	2303      	movs	r3, #3
 80115ea:	e048      	b.n	801167e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f003 0304 	and.w	r3, r3, #4
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d031      	beq.n	801165e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	69db      	ldr	r3, [r3, #28]
 8011600:	f003 0308 	and.w	r3, r3, #8
 8011604:	2b08      	cmp	r3, #8
 8011606:	d110      	bne.n	801162a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2208      	movs	r2, #8
 801160e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f000 f839 	bl	8011688 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2208      	movs	r2, #8
 801161a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011626:	2301      	movs	r3, #1
 8011628:	e029      	b.n	801167e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	69db      	ldr	r3, [r3, #28]
 8011630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011638:	d111      	bne.n	801165e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f000 f81f 	bl	8011688 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2220      	movs	r2, #32
 801164e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2200      	movs	r2, #0
 8011656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801165a:	2303      	movs	r3, #3
 801165c:	e00f      	b.n	801167e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	69da      	ldr	r2, [r3, #28]
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	4013      	ands	r3, r2
 8011668:	68ba      	ldr	r2, [r7, #8]
 801166a:	429a      	cmp	r2, r3
 801166c:	bf0c      	ite	eq
 801166e:	2301      	moveq	r3, #1
 8011670:	2300      	movne	r3, #0
 8011672:	b2db      	uxtb	r3, r3
 8011674:	461a      	mov	r2, r3
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	429a      	cmp	r2, r3
 801167a:	d0a6      	beq.n	80115ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801167c:	2300      	movs	r3, #0
}
 801167e:	4618      	mov	r0, r3
 8011680:	3710      	adds	r7, #16
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
	...

08011688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011688:	b480      	push	{r7}
 801168a:	b095      	sub	sp, #84	; 0x54
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011698:	e853 3f00 	ldrex	r3, [r3]
 801169c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	461a      	mov	r2, r3
 80116ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ae:	643b      	str	r3, [r7, #64]	; 0x40
 80116b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80116b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80116b6:	e841 2300 	strex	r3, r2, [r1]
 80116ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1e6      	bne.n	8011690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	3308      	adds	r3, #8
 80116c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ca:	6a3b      	ldr	r3, [r7, #32]
 80116cc:	e853 3f00 	ldrex	r3, [r3]
 80116d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80116d2:	69fa      	ldr	r2, [r7, #28]
 80116d4:	4b1e      	ldr	r3, [pc, #120]	; (8011750 <UART_EndRxTransfer+0xc8>)
 80116d6:	4013      	ands	r3, r2
 80116d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	3308      	adds	r3, #8
 80116e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80116e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116ea:	e841 2300 	strex	r3, r2, [r1]
 80116ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1e5      	bne.n	80116c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d118      	bne.n	8011730 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	e853 3f00 	ldrex	r3, [r3]
 801170a:	60bb      	str	r3, [r7, #8]
   return(result);
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	f023 0310 	bic.w	r3, r3, #16
 8011712:	647b      	str	r3, [r7, #68]	; 0x44
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	461a      	mov	r2, r3
 801171a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801171c:	61bb      	str	r3, [r7, #24]
 801171e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011720:	6979      	ldr	r1, [r7, #20]
 8011722:	69ba      	ldr	r2, [r7, #24]
 8011724:	e841 2300 	strex	r3, r2, [r1]
 8011728:	613b      	str	r3, [r7, #16]
   return(result);
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1e6      	bne.n	80116fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2220      	movs	r2, #32
 8011734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011744:	bf00      	nop
 8011746:	3754      	adds	r7, #84	; 0x54
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	effffffe 	.word	0xeffffffe

08011754 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011754:	b480      	push	{r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011762:	2b01      	cmp	r3, #1
 8011764:	d101      	bne.n	801176a <HAL_UARTEx_DisableFifoMode+0x16>
 8011766:	2302      	movs	r3, #2
 8011768:	e027      	b.n	80117ba <HAL_UARTEx_DisableFifoMode+0x66>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2201      	movs	r2, #1
 801176e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2224      	movs	r2, #36	; 0x24
 8011776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f022 0201 	bic.w	r2, r2, #1
 8011790:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011798:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2200      	movs	r2, #0
 801179e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68fa      	ldr	r2, [r7, #12]
 80117a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2220      	movs	r2, #32
 80117ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3714      	adds	r7, #20
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr

080117c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b084      	sub	sp, #16
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d101      	bne.n	80117de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80117da:	2302      	movs	r3, #2
 80117dc:	e02d      	b.n	801183a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2201      	movs	r2, #1
 80117e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2224      	movs	r2, #36	; 0x24
 80117ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f022 0201 	bic.w	r2, r2, #1
 8011804:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	689b      	ldr	r3, [r3, #8]
 801180c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	430a      	orrs	r2, r1
 8011818:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 f850 	bl	80118c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2220      	movs	r2, #32
 801182c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011838:	2300      	movs	r3, #0
}
 801183a:	4618      	mov	r0, r3
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b084      	sub	sp, #16
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
 801184a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011852:	2b01      	cmp	r3, #1
 8011854:	d101      	bne.n	801185a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011856:	2302      	movs	r3, #2
 8011858:	e02d      	b.n	80118b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2201      	movs	r2, #1
 801185e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2224      	movs	r2, #36	; 0x24
 8011866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f022 0201 	bic.w	r2, r2, #1
 8011880:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	689b      	ldr	r3, [r3, #8]
 8011888:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	683a      	ldr	r2, [r7, #0]
 8011892:	430a      	orrs	r2, r1
 8011894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 f812 	bl	80118c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2220      	movs	r2, #32
 80118a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80118b4:	2300      	movs	r3, #0
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
	...

080118c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d108      	bne.n	80118e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2201      	movs	r2, #1
 80118d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2201      	movs	r2, #1
 80118dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80118e0:	e031      	b.n	8011946 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80118e2:	2310      	movs	r3, #16
 80118e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80118e6:	2310      	movs	r3, #16
 80118e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	0e5b      	lsrs	r3, r3, #25
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	f003 0307 	and.w	r3, r3, #7
 80118f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	689b      	ldr	r3, [r3, #8]
 8011900:	0f5b      	lsrs	r3, r3, #29
 8011902:	b2db      	uxtb	r3, r3
 8011904:	f003 0307 	and.w	r3, r3, #7
 8011908:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801190a:	7bbb      	ldrb	r3, [r7, #14]
 801190c:	7b3a      	ldrb	r2, [r7, #12]
 801190e:	4911      	ldr	r1, [pc, #68]	; (8011954 <UARTEx_SetNbDataToProcess+0x94>)
 8011910:	5c8a      	ldrb	r2, [r1, r2]
 8011912:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011916:	7b3a      	ldrb	r2, [r7, #12]
 8011918:	490f      	ldr	r1, [pc, #60]	; (8011958 <UARTEx_SetNbDataToProcess+0x98>)
 801191a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801191c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011920:	b29a      	uxth	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011928:	7bfb      	ldrb	r3, [r7, #15]
 801192a:	7b7a      	ldrb	r2, [r7, #13]
 801192c:	4909      	ldr	r1, [pc, #36]	; (8011954 <UARTEx_SetNbDataToProcess+0x94>)
 801192e:	5c8a      	ldrb	r2, [r1, r2]
 8011930:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011934:	7b7a      	ldrb	r2, [r7, #13]
 8011936:	4908      	ldr	r1, [pc, #32]	; (8011958 <UARTEx_SetNbDataToProcess+0x98>)
 8011938:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801193a:	fb93 f3f2 	sdiv	r3, r3, r2
 801193e:	b29a      	uxth	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011946:	bf00      	nop
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	080175d4 	.word	0x080175d4
 8011958:	080175dc 	.word	0x080175dc

0801195c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801195c:	b084      	sub	sp, #16
 801195e:	b480      	push	{r7}
 8011960:	b085      	sub	sp, #20
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
 8011966:	f107 001c 	add.w	r0, r7, #28
 801196a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801196e:	2300      	movs	r3, #0
 8011970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011972:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011974:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011976:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801197a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801197e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011982:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	4313      	orrs	r3, r2
 8011988:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	685a      	ldr	r2, [r3, #4]
 801198e:	4b07      	ldr	r3, [pc, #28]	; (80119ac <SDMMC_Init+0x50>)
 8011990:	4013      	ands	r3, r2
 8011992:	68fa      	ldr	r2, [r7, #12]
 8011994:	431a      	orrs	r2, r3
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801199a:	2300      	movs	r3, #0
}
 801199c:	4618      	mov	r0, r3
 801199e:	3714      	adds	r7, #20
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	b004      	add	sp, #16
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	ffc02c00 	.word	0xffc02c00

080119b0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b083      	sub	sp, #12
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80119be:	4618      	mov	r0, r3
 80119c0:	370c      	adds	r7, #12
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80119ca:	b480      	push	{r7}
 80119cc:	b083      	sub	sp, #12
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
 80119d2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	370c      	adds	r7, #12
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f043 0203 	orr.w	r2, r3, #3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	370c      	adds	r7, #12
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr

08011a0e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011a0e:	b480      	push	{r7}
 8011a10:	b083      	sub	sp, #12
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f003 0303 	and.w	r3, r3, #3
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	370c      	adds	r7, #12
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
	...

08011a2c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b085      	sub	sp, #20
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011a36:	2300      	movs	r3, #0
 8011a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011a4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011a50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011a56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	68da      	ldr	r2, [r3, #12]
 8011a62:	4b06      	ldr	r3, [pc, #24]	; (8011a7c <SDMMC_SendCommand+0x50>)
 8011a64:	4013      	ands	r3, r2
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	431a      	orrs	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011a6e:	2300      	movs	r3, #0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3714      	adds	r7, #20
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr
 8011a7c:	fffee0c0 	.word	0xfffee0c0

08011a80 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	b2db      	uxtb	r3, r3
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011a9a:	b480      	push	{r7}
 8011a9c:	b085      	sub	sp, #20
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
 8011aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	3314      	adds	r3, #20
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	4413      	add	r3, r2
 8011aae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3714      	adds	r7, #20
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	685a      	ldr	r2, [r3, #4]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ae6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011aec:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011af2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011af4:	68fa      	ldr	r2, [r7, #12]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	431a      	orrs	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011b0a:	2300      	movs	r3, #0

}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3714      	adds	r7, #20
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr

08011b18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b088      	sub	sp, #32
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011b26:	2310      	movs	r3, #16
 8011b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b30:	2300      	movs	r3, #0
 8011b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b3a:	f107 0308 	add.w	r3, r7, #8
 8011b3e:	4619      	mov	r1, r3
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff ff73 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b4a:	2110      	movs	r1, #16
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f000 fa5f 	bl	8012010 <SDMMC_GetCmdResp1>
 8011b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b54:	69fb      	ldr	r3, [r7, #28]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3720      	adds	r7, #32
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}

08011b5e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b088      	sub	sp, #32
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
 8011b66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011b6c:	2311      	movs	r3, #17
 8011b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b76:	2300      	movs	r3, #0
 8011b78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b80:	f107 0308 	add.w	r3, r7, #8
 8011b84:	4619      	mov	r1, r3
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f7ff ff50 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b90:	2111      	movs	r1, #17
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f000 fa3c 	bl	8012010 <SDMMC_GetCmdResp1>
 8011b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b9a:	69fb      	ldr	r3, [r7, #28]
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3720      	adds	r7, #32
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b088      	sub	sp, #32
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011bb2:	2312      	movs	r3, #18
 8011bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bc6:	f107 0308 	add.w	r3, r7, #8
 8011bca:	4619      	mov	r1, r3
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f7ff ff2d 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bd6:	2112      	movs	r1, #18
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f000 fa19 	bl	8012010 <SDMMC_GetCmdResp1>
 8011bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011be0:	69fb      	ldr	r3, [r7, #28]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3720      	adds	r7, #32
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b088      	sub	sp, #32
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011bf8:	2318      	movs	r3, #24
 8011bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c02:	2300      	movs	r3, #0
 8011c04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c0c:	f107 0308 	add.w	r3, r7, #8
 8011c10:	4619      	mov	r1, r3
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f7ff ff0a 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c1c:	2118      	movs	r1, #24
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f000 f9f6 	bl	8012010 <SDMMC_GetCmdResp1>
 8011c24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c26:	69fb      	ldr	r3, [r7, #28]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3720      	adds	r7, #32
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b088      	sub	sp, #32
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011c3e:	2319      	movs	r3, #25
 8011c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c52:	f107 0308 	add.w	r3, r7, #8
 8011c56:	4619      	mov	r1, r3
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7ff fee7 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c62:	2119      	movs	r1, #25
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f000 f9d3 	bl	8012010 <SDMMC_GetCmdResp1>
 8011c6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c6c:	69fb      	ldr	r3, [r7, #28]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3720      	adds	r7, #32
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
	...

08011c78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b088      	sub	sp, #32
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011c80:	2300      	movs	r3, #0
 8011c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011c84:	230c      	movs	r3, #12
 8011c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c96:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cb0:	f107 0308 	add.w	r3, r7, #8
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7ff feb8 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011cbc:	4a0b      	ldr	r2, [pc, #44]	; (8011cec <SDMMC_CmdStopTransfer+0x74>)
 8011cbe:	210c      	movs	r1, #12
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 f9a5 	bl	8012010 <SDMMC_GetCmdResp1>
 8011cc6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011cda:	d101      	bne.n	8011ce0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011ce0:	69fb      	ldr	r3, [r7, #28]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3720      	adds	r7, #32
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	05f5e100 	.word	0x05f5e100

08011cf0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b088      	sub	sp, #32
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011cfe:	2307      	movs	r3, #7
 8011d00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d12:	f107 0308 	add.w	r3, r7, #8
 8011d16:	4619      	mov	r1, r3
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7ff fe87 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d22:	2107      	movs	r1, #7
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f000 f973 	bl	8012010 <SDMMC_GetCmdResp1>
 8011d2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d2c:	69fb      	ldr	r3, [r7, #28]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3720      	adds	r7, #32
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011d36:	b580      	push	{r7, lr}
 8011d38:	b088      	sub	sp, #32
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011d42:	2300      	movs	r3, #0
 8011d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011d46:	2300      	movs	r3, #0
 8011d48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d54:	f107 0308 	add.w	r3, r7, #8
 8011d58:	4619      	mov	r1, r3
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7ff fe66 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 fb97 	bl	8012494 <SDMMC_GetCmdError>
 8011d66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d68:	69fb      	ldr	r3, [r7, #28]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3720      	adds	r7, #32
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b088      	sub	sp, #32
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011d7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011d80:	2308      	movs	r3, #8
 8011d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d94:	f107 0308 	add.w	r3, r7, #8
 8011d98:	4619      	mov	r1, r3
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7ff fe46 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 fb29 	bl	80123f8 <SDMMC_GetCmdResp7>
 8011da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011da8:	69fb      	ldr	r3, [r7, #28]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3720      	adds	r7, #32
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}

08011db2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b088      	sub	sp, #32
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
 8011dba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011dc0:	2337      	movs	r3, #55	; 0x37
 8011dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dd4:	f107 0308 	add.w	r3, r7, #8
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7ff fe26 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011de4:	2137      	movs	r1, #55	; 0x37
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 f912 	bl	8012010 <SDMMC_GetCmdResp1>
 8011dec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dee:	69fb      	ldr	r3, [r7, #28]
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3720      	adds	r7, #32
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b088      	sub	sp, #32
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011e06:	2329      	movs	r3, #41	; 0x29
 8011e08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e10:	2300      	movs	r3, #0
 8011e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e1a:	f107 0308 	add.w	r3, r7, #8
 8011e1e:	4619      	mov	r1, r3
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f7ff fe03 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f000 fa2e 	bl	8012288 <SDMMC_GetCmdResp3>
 8011e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e2e:	69fb      	ldr	r3, [r7, #28]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3720      	adds	r7, #32
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b088      	sub	sp, #32
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011e46:	2306      	movs	r3, #6
 8011e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e50:	2300      	movs	r3, #0
 8011e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e5a:	f107 0308 	add.w	r3, r7, #8
 8011e5e:	4619      	mov	r1, r3
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff fde3 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e6a:	2106      	movs	r1, #6
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f000 f8cf 	bl	8012010 <SDMMC_GetCmdResp1>
 8011e72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e74:	69fb      	ldr	r3, [r7, #28]
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3720      	adds	r7, #32
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b088      	sub	sp, #32
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011e86:	2300      	movs	r3, #0
 8011e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011e8a:	2333      	movs	r3, #51	; 0x33
 8011e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e94:	2300      	movs	r3, #0
 8011e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e9e:	f107 0308 	add.w	r3, r7, #8
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7ff fdc1 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eae:	2133      	movs	r1, #51	; 0x33
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 f8ad 	bl	8012010 <SDMMC_GetCmdResp1>
 8011eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eb8:	69fb      	ldr	r3, [r7, #28]
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3720      	adds	r7, #32
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}

08011ec2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011ec2:	b580      	push	{r7, lr}
 8011ec4:	b088      	sub	sp, #32
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011ece:	2302      	movs	r3, #2
 8011ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011ed2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ee0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ee2:	f107 0308 	add.w	r3, r7, #8
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7ff fd9f 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 f980 	bl	80121f4 <SDMMC_GetCmdResp2>
 8011ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ef6:	69fb      	ldr	r3, [r7, #28]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3720      	adds	r7, #32
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b088      	sub	sp, #32
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011f0e:	2309      	movs	r3, #9
 8011f10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f22:	f107 0308 	add.w	r3, r7, #8
 8011f26:	4619      	mov	r1, r3
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7ff fd7f 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 f960 	bl	80121f4 <SDMMC_GetCmdResp2>
 8011f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f36:	69fb      	ldr	r3, [r7, #28]
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3720      	adds	r7, #32
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b088      	sub	sp, #32
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011f4e:	2303      	movs	r3, #3
 8011f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f62:	f107 0308 	add.w	r3, r7, #8
 8011f66:	4619      	mov	r1, r3
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff fd5f 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011f6e:	683a      	ldr	r2, [r7, #0]
 8011f70:	2103      	movs	r1, #3
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f000 f9c8 	bl	8012308 <SDMMC_GetCmdResp6>
 8011f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f7a:	69fb      	ldr	r3, [r7, #28]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3720      	adds	r7, #32
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b088      	sub	sp, #32
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011f92:	230d      	movs	r3, #13
 8011f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fa6:	f107 0308 	add.w	r3, r7, #8
 8011faa:	4619      	mov	r1, r3
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f7ff fd3d 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fb6:	210d      	movs	r1, #13
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f000 f829 	bl	8012010 <SDMMC_GetCmdResp1>
 8011fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fc0:	69fb      	ldr	r3, [r7, #28]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3720      	adds	r7, #32
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b088      	sub	sp, #32
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011fd6:	230d      	movs	r3, #13
 8011fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fea:	f107 0308 	add.w	r3, r7, #8
 8011fee:	4619      	mov	r1, r3
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff fd1b 	bl	8011a2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ffa:	210d      	movs	r1, #13
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 f807 	bl	8012010 <SDMMC_GetCmdResp1>
 8012002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012004:	69fb      	ldr	r3, [r7, #28]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3720      	adds	r7, #32
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
	...

08012010 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b088      	sub	sp, #32
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	460b      	mov	r3, r1
 801201a:	607a      	str	r2, [r7, #4]
 801201c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801201e:	4b70      	ldr	r3, [pc, #448]	; (80121e0 <SDMMC_GetCmdResp1+0x1d0>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	4a70      	ldr	r2, [pc, #448]	; (80121e4 <SDMMC_GetCmdResp1+0x1d4>)
 8012024:	fba2 2303 	umull	r2, r3, r2, r3
 8012028:	0a5a      	lsrs	r2, r3, #9
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	fb02 f303 	mul.w	r3, r2, r3
 8012030:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	1e5a      	subs	r2, r3, #1
 8012036:	61fa      	str	r2, [r7, #28]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d102      	bne.n	8012042 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801203c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012040:	e0c9      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012046:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012048:	69ba      	ldr	r2, [r7, #24]
 801204a:	4b67      	ldr	r3, [pc, #412]	; (80121e8 <SDMMC_GetCmdResp1+0x1d8>)
 801204c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801204e:	2b00      	cmp	r3, #0
 8012050:	d0ef      	beq.n	8012032 <SDMMC_GetCmdResp1+0x22>
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d1ea      	bne.n	8012032 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012060:	f003 0304 	and.w	r3, r3, #4
 8012064:	2b00      	cmp	r3, #0
 8012066:	d004      	beq.n	8012072 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2204      	movs	r2, #4
 801206c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801206e:	2304      	movs	r3, #4
 8012070:	e0b1      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012076:	f003 0301 	and.w	r3, r3, #1
 801207a:	2b00      	cmp	r3, #0
 801207c:	d004      	beq.n	8012088 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2201      	movs	r2, #1
 8012082:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012084:	2301      	movs	r3, #1
 8012086:	e0a6      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	4a58      	ldr	r2, [pc, #352]	; (80121ec <SDMMC_GetCmdResp1+0x1dc>)
 801208c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f7ff fcf6 	bl	8011a80 <SDMMC_GetCommandResponse>
 8012094:	4603      	mov	r3, r0
 8012096:	461a      	mov	r2, r3
 8012098:	7afb      	ldrb	r3, [r7, #11]
 801209a:	4293      	cmp	r3, r2
 801209c:	d001      	beq.n	80120a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801209e:	2301      	movs	r3, #1
 80120a0:	e099      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80120a2:	2100      	movs	r1, #0
 80120a4:	68f8      	ldr	r0, [r7, #12]
 80120a6:	f7ff fcf8 	bl	8011a9a <SDMMC_GetResponse>
 80120aa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80120ac:	697a      	ldr	r2, [r7, #20]
 80120ae:	4b50      	ldr	r3, [pc, #320]	; (80121f0 <SDMMC_GetCmdResp1+0x1e0>)
 80120b0:	4013      	ands	r3, r2
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d101      	bne.n	80120ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80120b6:	2300      	movs	r3, #0
 80120b8:	e08d      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	da02      	bge.n	80120c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80120c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80120c4:	e087      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d001      	beq.n	80120d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80120d0:	2340      	movs	r3, #64	; 0x40
 80120d2:	e080      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d001      	beq.n	80120e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80120de:	2380      	movs	r3, #128	; 0x80
 80120e0:	e079      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80120ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120f0:	e071      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80120fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012100:	e069      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012108:	2b00      	cmp	r3, #0
 801210a:	d002      	beq.n	8012112 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012110:	e061      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012118:	2b00      	cmp	r3, #0
 801211a:	d002      	beq.n	8012122 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801211c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012120:	e059      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012128:	2b00      	cmp	r3, #0
 801212a:	d002      	beq.n	8012132 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801212c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012130:	e051      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012138:	2b00      	cmp	r3, #0
 801213a:	d002      	beq.n	8012142 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801213c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012140:	e049      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012148:	2b00      	cmp	r3, #0
 801214a:	d002      	beq.n	8012152 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801214c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012150:	e041      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012158:	2b00      	cmp	r3, #0
 801215a:	d002      	beq.n	8012162 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801215c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012160:	e039      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012168:	2b00      	cmp	r3, #0
 801216a:	d002      	beq.n	8012172 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801216c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012170:	e031      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012178:	2b00      	cmp	r3, #0
 801217a:	d002      	beq.n	8012182 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801217c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012180:	e029      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012188:	2b00      	cmp	r3, #0
 801218a:	d002      	beq.n	8012192 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801218c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012190:	e021      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012198:	2b00      	cmp	r3, #0
 801219a:	d002      	beq.n	80121a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801219c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80121a0:	e019      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d002      	beq.n	80121b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80121ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80121b0:	e011      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d002      	beq.n	80121c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80121bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80121c0:	e009      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	f003 0308 	and.w	r3, r3, #8
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d002      	beq.n	80121d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80121cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80121d0:	e001      	b.n	80121d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80121d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3720      	adds	r7, #32
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	24000000 	.word	0x24000000
 80121e4:	10624dd3 	.word	0x10624dd3
 80121e8:	00200045 	.word	0x00200045
 80121ec:	002000c5 	.word	0x002000c5
 80121f0:	fdffe008 	.word	0xfdffe008

080121f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80121fc:	4b1f      	ldr	r3, [pc, #124]	; (801227c <SDMMC_GetCmdResp2+0x88>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4a1f      	ldr	r2, [pc, #124]	; (8012280 <SDMMC_GetCmdResp2+0x8c>)
 8012202:	fba2 2303 	umull	r2, r3, r2, r3
 8012206:	0a5b      	lsrs	r3, r3, #9
 8012208:	f241 3288 	movw	r2, #5000	; 0x1388
 801220c:	fb02 f303 	mul.w	r3, r2, r3
 8012210:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	1e5a      	subs	r2, r3, #1
 8012216:	60fa      	str	r2, [r7, #12]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d102      	bne.n	8012222 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801221c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012220:	e026      	b.n	8012270 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012226:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801222e:	2b00      	cmp	r3, #0
 8012230:	d0ef      	beq.n	8012212 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012238:	2b00      	cmp	r3, #0
 801223a:	d1ea      	bne.n	8012212 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012240:	f003 0304 	and.w	r3, r3, #4
 8012244:	2b00      	cmp	r3, #0
 8012246:	d004      	beq.n	8012252 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2204      	movs	r2, #4
 801224c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801224e:	2304      	movs	r3, #4
 8012250:	e00e      	b.n	8012270 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012256:	f003 0301 	and.w	r3, r3, #1
 801225a:	2b00      	cmp	r3, #0
 801225c:	d004      	beq.n	8012268 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2201      	movs	r2, #1
 8012262:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012264:	2301      	movs	r3, #1
 8012266:	e003      	b.n	8012270 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	4a06      	ldr	r2, [pc, #24]	; (8012284 <SDMMC_GetCmdResp2+0x90>)
 801226c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3714      	adds	r7, #20
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	24000000 	.word	0x24000000
 8012280:	10624dd3 	.word	0x10624dd3
 8012284:	002000c5 	.word	0x002000c5

08012288 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012288:	b480      	push	{r7}
 801228a:	b085      	sub	sp, #20
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012290:	4b1a      	ldr	r3, [pc, #104]	; (80122fc <SDMMC_GetCmdResp3+0x74>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	4a1a      	ldr	r2, [pc, #104]	; (8012300 <SDMMC_GetCmdResp3+0x78>)
 8012296:	fba2 2303 	umull	r2, r3, r2, r3
 801229a:	0a5b      	lsrs	r3, r3, #9
 801229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80122a0:	fb02 f303 	mul.w	r3, r2, r3
 80122a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	1e5a      	subs	r2, r3, #1
 80122aa:	60fa      	str	r2, [r7, #12]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d102      	bne.n	80122b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80122b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80122b4:	e01b      	b.n	80122ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d0ef      	beq.n	80122a6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1ea      	bne.n	80122a6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122d4:	f003 0304 	and.w	r3, r3, #4
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d004      	beq.n	80122e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2204      	movs	r2, #4
 80122e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80122e2:	2304      	movs	r3, #4
 80122e4:	e003      	b.n	80122ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4a06      	ldr	r2, [pc, #24]	; (8012304 <SDMMC_GetCmdResp3+0x7c>)
 80122ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80122ec:	2300      	movs	r3, #0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3714      	adds	r7, #20
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	24000000 	.word	0x24000000
 8012300:	10624dd3 	.word	0x10624dd3
 8012304:	002000c5 	.word	0x002000c5

08012308 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b088      	sub	sp, #32
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	460b      	mov	r3, r1
 8012312:	607a      	str	r2, [r7, #4]
 8012314:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012316:	4b35      	ldr	r3, [pc, #212]	; (80123ec <SDMMC_GetCmdResp6+0xe4>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4a35      	ldr	r2, [pc, #212]	; (80123f0 <SDMMC_GetCmdResp6+0xe8>)
 801231c:	fba2 2303 	umull	r2, r3, r2, r3
 8012320:	0a5b      	lsrs	r3, r3, #9
 8012322:	f241 3288 	movw	r2, #5000	; 0x1388
 8012326:	fb02 f303 	mul.w	r3, r2, r3
 801232a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	1e5a      	subs	r2, r3, #1
 8012330:	61fa      	str	r2, [r7, #28]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d102      	bne.n	801233c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012336:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801233a:	e052      	b.n	80123e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012340:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012348:	2b00      	cmp	r3, #0
 801234a:	d0ef      	beq.n	801232c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012352:	2b00      	cmp	r3, #0
 8012354:	d1ea      	bne.n	801232c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801235a:	f003 0304 	and.w	r3, r3, #4
 801235e:	2b00      	cmp	r3, #0
 8012360:	d004      	beq.n	801236c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2204      	movs	r2, #4
 8012366:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012368:	2304      	movs	r3, #4
 801236a:	e03a      	b.n	80123e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012370:	f003 0301 	and.w	r3, r3, #1
 8012374:	2b00      	cmp	r3, #0
 8012376:	d004      	beq.n	8012382 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2201      	movs	r2, #1
 801237c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801237e:	2301      	movs	r3, #1
 8012380:	e02f      	b.n	80123e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012382:	68f8      	ldr	r0, [r7, #12]
 8012384:	f7ff fb7c 	bl	8011a80 <SDMMC_GetCommandResponse>
 8012388:	4603      	mov	r3, r0
 801238a:	461a      	mov	r2, r3
 801238c:	7afb      	ldrb	r3, [r7, #11]
 801238e:	4293      	cmp	r3, r2
 8012390:	d001      	beq.n	8012396 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012392:	2301      	movs	r3, #1
 8012394:	e025      	b.n	80123e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	4a16      	ldr	r2, [pc, #88]	; (80123f4 <SDMMC_GetCmdResp6+0xec>)
 801239a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801239c:	2100      	movs	r1, #0
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f7ff fb7b 	bl	8011a9a <SDMMC_GetResponse>
 80123a4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d106      	bne.n	80123be <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	0c1b      	lsrs	r3, r3, #16
 80123b4:	b29a      	uxth	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80123ba:	2300      	movs	r3, #0
 80123bc:	e011      	b.n	80123e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d002      	beq.n	80123ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80123c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80123cc:	e009      	b.n	80123e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80123d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123dc:	e001      	b.n	80123e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80123de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3720      	adds	r7, #32
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	24000000 	.word	0x24000000
 80123f0:	10624dd3 	.word	0x10624dd3
 80123f4:	002000c5 	.word	0x002000c5

080123f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012400:	4b22      	ldr	r3, [pc, #136]	; (801248c <SDMMC_GetCmdResp7+0x94>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4a22      	ldr	r2, [pc, #136]	; (8012490 <SDMMC_GetCmdResp7+0x98>)
 8012406:	fba2 2303 	umull	r2, r3, r2, r3
 801240a:	0a5b      	lsrs	r3, r3, #9
 801240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012410:	fb02 f303 	mul.w	r3, r2, r3
 8012414:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	1e5a      	subs	r2, r3, #1
 801241a:	60fa      	str	r2, [r7, #12]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012424:	e02c      	b.n	8012480 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801242a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012432:	2b00      	cmp	r3, #0
 8012434:	d0ef      	beq.n	8012416 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1ea      	bne.n	8012416 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012444:	f003 0304 	and.w	r3, r3, #4
 8012448:	2b00      	cmp	r3, #0
 801244a:	d004      	beq.n	8012456 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2204      	movs	r2, #4
 8012450:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012452:	2304      	movs	r3, #4
 8012454:	e014      	b.n	8012480 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801245a:	f003 0301 	and.w	r3, r3, #1
 801245e:	2b00      	cmp	r3, #0
 8012460:	d004      	beq.n	801246c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2201      	movs	r2, #1
 8012466:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012468:	2301      	movs	r3, #1
 801246a:	e009      	b.n	8012480 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012474:	2b00      	cmp	r3, #0
 8012476:	d002      	beq.n	801247e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2240      	movs	r2, #64	; 0x40
 801247c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801247e:	2300      	movs	r3, #0

}
 8012480:	4618      	mov	r0, r3
 8012482:	3714      	adds	r7, #20
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr
 801248c:	24000000 	.word	0x24000000
 8012490:	10624dd3 	.word	0x10624dd3

08012494 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012494:	b480      	push	{r7}
 8012496:	b085      	sub	sp, #20
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801249c:	4b11      	ldr	r3, [pc, #68]	; (80124e4 <SDMMC_GetCmdError+0x50>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4a11      	ldr	r2, [pc, #68]	; (80124e8 <SDMMC_GetCmdError+0x54>)
 80124a2:	fba2 2303 	umull	r2, r3, r2, r3
 80124a6:	0a5b      	lsrs	r3, r3, #9
 80124a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ac:	fb02 f303 	mul.w	r3, r2, r3
 80124b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	1e5a      	subs	r2, r3, #1
 80124b6:	60fa      	str	r2, [r7, #12]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d102      	bne.n	80124c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124c0:	e009      	b.n	80124d6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d0f1      	beq.n	80124b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	4a06      	ldr	r2, [pc, #24]	; (80124ec <SDMMC_GetCmdError+0x58>)
 80124d2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80124d4:	2300      	movs	r3, #0
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3714      	adds	r7, #20
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr
 80124e2:	bf00      	nop
 80124e4:	24000000 	.word	0x24000000
 80124e8:	10624dd3 	.word	0x10624dd3
 80124ec:	002000c5 	.word	0x002000c5

080124f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80124f0:	b084      	sub	sp, #16
 80124f2:	b580      	push	{r7, lr}
 80124f4:	b084      	sub	sp, #16
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	6078      	str	r0, [r7, #4]
 80124fa:	f107 001c 	add.w	r0, r7, #28
 80124fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012504:	2b01      	cmp	r3, #1
 8012506:	d120      	bne.n	801254a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801250c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	68da      	ldr	r2, [r3, #12]
 8012518:	4b2a      	ldr	r3, [pc, #168]	; (80125c4 <USB_CoreInit+0xd4>)
 801251a:	4013      	ands	r3, r2
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801252c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801252e:	2b01      	cmp	r3, #1
 8012530:	d105      	bne.n	801253e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	68db      	ldr	r3, [r3, #12]
 8012536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f001 faf8 	bl	8013b34 <USB_CoreReset>
 8012544:	4603      	mov	r3, r0
 8012546:	73fb      	strb	r3, [r7, #15]
 8012548:	e01a      	b.n	8012580 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f001 faec 	bl	8013b34 <USB_CoreReset>
 801255c:	4603      	mov	r3, r0
 801255e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012562:	2b00      	cmp	r3, #0
 8012564:	d106      	bne.n	8012574 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801256a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	639a      	str	r2, [r3, #56]	; 0x38
 8012572:	e005      	b.n	8012580 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	2b01      	cmp	r3, #1
 8012584:	d116      	bne.n	80125b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801258a:	b29a      	uxth	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012594:	4b0c      	ldr	r3, [pc, #48]	; (80125c8 <USB_CoreInit+0xd8>)
 8012596:	4313      	orrs	r3, r2
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	689b      	ldr	r3, [r3, #8]
 80125a0:	f043 0206 	orr.w	r2, r3, #6
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	689b      	ldr	r3, [r3, #8]
 80125ac:	f043 0220 	orr.w	r2, r3, #32
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80125b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3710      	adds	r7, #16
 80125ba:	46bd      	mov	sp, r7
 80125bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80125c0:	b004      	add	sp, #16
 80125c2:	4770      	bx	lr
 80125c4:	ffbdffbf 	.word	0xffbdffbf
 80125c8:	03ee0000 	.word	0x03ee0000

080125cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80125cc:	b480      	push	{r7}
 80125ce:	b087      	sub	sp, #28
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	4613      	mov	r3, r2
 80125d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80125da:	79fb      	ldrb	r3, [r7, #7]
 80125dc:	2b02      	cmp	r3, #2
 80125de:	d165      	bne.n	80126ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	4a41      	ldr	r2, [pc, #260]	; (80126e8 <USB_SetTurnaroundTime+0x11c>)
 80125e4:	4293      	cmp	r3, r2
 80125e6:	d906      	bls.n	80125f6 <USB_SetTurnaroundTime+0x2a>
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	4a40      	ldr	r2, [pc, #256]	; (80126ec <USB_SetTurnaroundTime+0x120>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d202      	bcs.n	80125f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80125f0:	230f      	movs	r3, #15
 80125f2:	617b      	str	r3, [r7, #20]
 80125f4:	e062      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	4a3c      	ldr	r2, [pc, #240]	; (80126ec <USB_SetTurnaroundTime+0x120>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d306      	bcc.n	801260c <USB_SetTurnaroundTime+0x40>
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	4a3b      	ldr	r2, [pc, #236]	; (80126f0 <USB_SetTurnaroundTime+0x124>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d202      	bcs.n	801260c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012606:	230e      	movs	r3, #14
 8012608:	617b      	str	r3, [r7, #20]
 801260a:	e057      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	4a38      	ldr	r2, [pc, #224]	; (80126f0 <USB_SetTurnaroundTime+0x124>)
 8012610:	4293      	cmp	r3, r2
 8012612:	d306      	bcc.n	8012622 <USB_SetTurnaroundTime+0x56>
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	4a37      	ldr	r2, [pc, #220]	; (80126f4 <USB_SetTurnaroundTime+0x128>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d202      	bcs.n	8012622 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801261c:	230d      	movs	r3, #13
 801261e:	617b      	str	r3, [r7, #20]
 8012620:	e04c      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	4a33      	ldr	r2, [pc, #204]	; (80126f4 <USB_SetTurnaroundTime+0x128>)
 8012626:	4293      	cmp	r3, r2
 8012628:	d306      	bcc.n	8012638 <USB_SetTurnaroundTime+0x6c>
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	4a32      	ldr	r2, [pc, #200]	; (80126f8 <USB_SetTurnaroundTime+0x12c>)
 801262e:	4293      	cmp	r3, r2
 8012630:	d802      	bhi.n	8012638 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012632:	230c      	movs	r3, #12
 8012634:	617b      	str	r3, [r7, #20]
 8012636:	e041      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	4a2f      	ldr	r2, [pc, #188]	; (80126f8 <USB_SetTurnaroundTime+0x12c>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d906      	bls.n	801264e <USB_SetTurnaroundTime+0x82>
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	4a2e      	ldr	r2, [pc, #184]	; (80126fc <USB_SetTurnaroundTime+0x130>)
 8012644:	4293      	cmp	r3, r2
 8012646:	d802      	bhi.n	801264e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012648:	230b      	movs	r3, #11
 801264a:	617b      	str	r3, [r7, #20]
 801264c:	e036      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	4a2a      	ldr	r2, [pc, #168]	; (80126fc <USB_SetTurnaroundTime+0x130>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d906      	bls.n	8012664 <USB_SetTurnaroundTime+0x98>
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	4a29      	ldr	r2, [pc, #164]	; (8012700 <USB_SetTurnaroundTime+0x134>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d802      	bhi.n	8012664 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801265e:	230a      	movs	r3, #10
 8012660:	617b      	str	r3, [r7, #20]
 8012662:	e02b      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	4a26      	ldr	r2, [pc, #152]	; (8012700 <USB_SetTurnaroundTime+0x134>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d906      	bls.n	801267a <USB_SetTurnaroundTime+0xae>
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	4a25      	ldr	r2, [pc, #148]	; (8012704 <USB_SetTurnaroundTime+0x138>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d202      	bcs.n	801267a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012674:	2309      	movs	r3, #9
 8012676:	617b      	str	r3, [r7, #20]
 8012678:	e020      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	4a21      	ldr	r2, [pc, #132]	; (8012704 <USB_SetTurnaroundTime+0x138>)
 801267e:	4293      	cmp	r3, r2
 8012680:	d306      	bcc.n	8012690 <USB_SetTurnaroundTime+0xc4>
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	4a20      	ldr	r2, [pc, #128]	; (8012708 <USB_SetTurnaroundTime+0x13c>)
 8012686:	4293      	cmp	r3, r2
 8012688:	d802      	bhi.n	8012690 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801268a:	2308      	movs	r3, #8
 801268c:	617b      	str	r3, [r7, #20]
 801268e:	e015      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	4a1d      	ldr	r2, [pc, #116]	; (8012708 <USB_SetTurnaroundTime+0x13c>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d906      	bls.n	80126a6 <USB_SetTurnaroundTime+0xda>
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	4a1c      	ldr	r2, [pc, #112]	; (801270c <USB_SetTurnaroundTime+0x140>)
 801269c:	4293      	cmp	r3, r2
 801269e:	d202      	bcs.n	80126a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80126a0:	2307      	movs	r3, #7
 80126a2:	617b      	str	r3, [r7, #20]
 80126a4:	e00a      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80126a6:	2306      	movs	r3, #6
 80126a8:	617b      	str	r3, [r7, #20]
 80126aa:	e007      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80126ac:	79fb      	ldrb	r3, [r7, #7]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d102      	bne.n	80126b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80126b2:	2309      	movs	r3, #9
 80126b4:	617b      	str	r3, [r7, #20]
 80126b6:	e001      	b.n	80126bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80126b8:	2309      	movs	r3, #9
 80126ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	68da      	ldr	r2, [r3, #12]
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	029b      	lsls	r3, r3, #10
 80126d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80126d4:	431a      	orrs	r2, r3
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80126da:	2300      	movs	r3, #0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	371c      	adds	r7, #28
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr
 80126e8:	00d8acbf 	.word	0x00d8acbf
 80126ec:	00e4e1c0 	.word	0x00e4e1c0
 80126f0:	00f42400 	.word	0x00f42400
 80126f4:	01067380 	.word	0x01067380
 80126f8:	011a499f 	.word	0x011a499f
 80126fc:	01312cff 	.word	0x01312cff
 8012700:	014ca43f 	.word	0x014ca43f
 8012704:	016e3600 	.word	0x016e3600
 8012708:	01a6ab1f 	.word	0x01a6ab1f
 801270c:	01e84800 	.word	0x01e84800

08012710 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	689b      	ldr	r3, [r3, #8]
 801271c:	f043 0201 	orr.w	r2, r3, #1
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012724:	2300      	movs	r3, #0
}
 8012726:	4618      	mov	r0, r3
 8012728:	370c      	adds	r7, #12
 801272a:	46bd      	mov	sp, r7
 801272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012730:	4770      	bx	lr

08012732 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012732:	b480      	push	{r7}
 8012734:	b083      	sub	sp, #12
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	689b      	ldr	r3, [r3, #8]
 801273e:	f023 0201 	bic.w	r2, r3, #1
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	370c      	adds	r7, #12
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr

08012754 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	460b      	mov	r3, r1
 801275e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012760:	2300      	movs	r3, #0
 8012762:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	68db      	ldr	r3, [r3, #12]
 8012768:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	2b01      	cmp	r3, #1
 8012774:	d115      	bne.n	80127a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	68db      	ldr	r3, [r3, #12]
 801277a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012782:	2001      	movs	r0, #1
 8012784:	f7f0 fea6 	bl	80034d4 <HAL_Delay>
      ms++;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	3301      	adds	r3, #1
 801278c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f001 f93f 	bl	8013a12 <USB_GetMode>
 8012794:	4603      	mov	r3, r0
 8012796:	2b01      	cmp	r3, #1
 8012798:	d01e      	beq.n	80127d8 <USB_SetCurrentMode+0x84>
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	2b31      	cmp	r3, #49	; 0x31
 801279e:	d9f0      	bls.n	8012782 <USB_SetCurrentMode+0x2e>
 80127a0:	e01a      	b.n	80127d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80127a2:	78fb      	ldrb	r3, [r7, #3]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d115      	bne.n	80127d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80127b4:	2001      	movs	r0, #1
 80127b6:	f7f0 fe8d 	bl	80034d4 <HAL_Delay>
      ms++;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	3301      	adds	r3, #1
 80127be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f001 f926 	bl	8013a12 <USB_GetMode>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d005      	beq.n	80127d8 <USB_SetCurrentMode+0x84>
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2b31      	cmp	r3, #49	; 0x31
 80127d0:	d9f0      	bls.n	80127b4 <USB_SetCurrentMode+0x60>
 80127d2:	e001      	b.n	80127d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80127d4:	2301      	movs	r3, #1
 80127d6:	e005      	b.n	80127e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	2b32      	cmp	r3, #50	; 0x32
 80127dc:	d101      	bne.n	80127e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80127de:	2301      	movs	r3, #1
 80127e0:	e000      	b.n	80127e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80127e2:	2300      	movs	r3, #0
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3710      	adds	r7, #16
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80127ec:	b084      	sub	sp, #16
 80127ee:	b580      	push	{r7, lr}
 80127f0:	b086      	sub	sp, #24
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	6078      	str	r0, [r7, #4]
 80127f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80127fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80127fe:	2300      	movs	r3, #0
 8012800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012806:	2300      	movs	r3, #0
 8012808:	613b      	str	r3, [r7, #16]
 801280a:	e009      	b.n	8012820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	3340      	adds	r3, #64	; 0x40
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	4413      	add	r3, r2
 8012816:	2200      	movs	r2, #0
 8012818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	3301      	adds	r3, #1
 801281e:	613b      	str	r3, [r7, #16]
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	2b0e      	cmp	r3, #14
 8012824:	d9f2      	bls.n	801280c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012828:	2b00      	cmp	r3, #0
 801282a:	d11c      	bne.n	8012866 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801283a:	f043 0302 	orr.w	r3, r3, #2
 801283e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012844:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	601a      	str	r2, [r3, #0]
 8012864:	e005      	b.n	8012872 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801286a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012878:	461a      	mov	r2, r3
 801287a:	2300      	movs	r3, #0
 801287c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012884:	4619      	mov	r1, r3
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801288c:	461a      	mov	r2, r3
 801288e:	680b      	ldr	r3, [r1, #0]
 8012890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012894:	2b01      	cmp	r3, #1
 8012896:	d10c      	bne.n	80128b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289a:	2b00      	cmp	r3, #0
 801289c:	d104      	bne.n	80128a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801289e:	2100      	movs	r1, #0
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f000 f965 	bl	8012b70 <USB_SetDevSpeed>
 80128a6:	e008      	b.n	80128ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80128a8:	2101      	movs	r1, #1
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 f960 	bl	8012b70 <USB_SetDevSpeed>
 80128b0:	e003      	b.n	80128ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80128b2:	2103      	movs	r1, #3
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f000 f95b 	bl	8012b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80128ba:	2110      	movs	r1, #16
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f000 f8f3 	bl	8012aa8 <USB_FlushTxFifo>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80128c8:	2301      	movs	r3, #1
 80128ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 f91f 	bl	8012b10 <USB_FlushRxFifo>
 80128d2:	4603      	mov	r3, r0
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d001      	beq.n	80128dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80128d8:	2301      	movs	r3, #1
 80128da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128e2:	461a      	mov	r2, r3
 80128e4:	2300      	movs	r3, #0
 80128e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128ee:	461a      	mov	r2, r3
 80128f0:	2300      	movs	r3, #0
 80128f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128fa:	461a      	mov	r2, r3
 80128fc:	2300      	movs	r3, #0
 80128fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012900:	2300      	movs	r3, #0
 8012902:	613b      	str	r3, [r7, #16]
 8012904:	e043      	b.n	801298e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	015a      	lsls	r2, r3, #5
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	4413      	add	r3, r2
 801290e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801291c:	d118      	bne.n	8012950 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d10a      	bne.n	801293a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	015a      	lsls	r2, r3, #5
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	4413      	add	r3, r2
 801292c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012930:	461a      	mov	r2, r3
 8012932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012936:	6013      	str	r3, [r2, #0]
 8012938:	e013      	b.n	8012962 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	015a      	lsls	r2, r3, #5
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	4413      	add	r3, r2
 8012942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012946:	461a      	mov	r2, r3
 8012948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	e008      	b.n	8012962 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	015a      	lsls	r2, r3, #5
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4413      	add	r3, r2
 8012958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801295c:	461a      	mov	r2, r3
 801295e:	2300      	movs	r3, #0
 8012960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	015a      	lsls	r2, r3, #5
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	4413      	add	r3, r2
 801296a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801296e:	461a      	mov	r2, r3
 8012970:	2300      	movs	r3, #0
 8012972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	015a      	lsls	r2, r3, #5
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	4413      	add	r3, r2
 801297c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012980:	461a      	mov	r2, r3
 8012982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	3301      	adds	r3, #1
 801298c:	613b      	str	r3, [r7, #16]
 801298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012990:	693a      	ldr	r2, [r7, #16]
 8012992:	429a      	cmp	r2, r3
 8012994:	d3b7      	bcc.n	8012906 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012996:	2300      	movs	r3, #0
 8012998:	613b      	str	r3, [r7, #16]
 801299a:	e043      	b.n	8012a24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	015a      	lsls	r2, r3, #5
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	4413      	add	r3, r2
 80129a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80129ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80129b2:	d118      	bne.n	80129e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d10a      	bne.n	80129d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	015a      	lsls	r2, r3, #5
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	4413      	add	r3, r2
 80129c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129c6:	461a      	mov	r2, r3
 80129c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80129cc:	6013      	str	r3, [r2, #0]
 80129ce:	e013      	b.n	80129f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	015a      	lsls	r2, r3, #5
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	4413      	add	r3, r2
 80129d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129dc:	461a      	mov	r2, r3
 80129de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80129e2:	6013      	str	r3, [r2, #0]
 80129e4:	e008      	b.n	80129f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	015a      	lsls	r2, r3, #5
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	4413      	add	r3, r2
 80129ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129f2:	461a      	mov	r2, r3
 80129f4:	2300      	movs	r3, #0
 80129f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	015a      	lsls	r2, r3, #5
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	4413      	add	r3, r2
 8012a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a04:	461a      	mov	r2, r3
 8012a06:	2300      	movs	r3, #0
 8012a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	015a      	lsls	r2, r3, #5
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	4413      	add	r3, r2
 8012a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a16:	461a      	mov	r2, r3
 8012a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	3301      	adds	r3, #1
 8012a22:	613b      	str	r3, [r7, #16]
 8012a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a26:	693a      	ldr	r2, [r7, #16]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d3b7      	bcc.n	801299c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a32:	691b      	ldr	r3, [r3, #16]
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012a4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d105      	bne.n	8012a60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	699b      	ldr	r3, [r3, #24]
 8012a58:	f043 0210 	orr.w	r2, r3, #16
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	699a      	ldr	r2, [r3, #24]
 8012a64:	4b0e      	ldr	r3, [pc, #56]	; (8012aa0 <USB_DevInit+0x2b4>)
 8012a66:	4313      	orrs	r3, r2
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d005      	beq.n	8012a7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	699b      	ldr	r3, [r3, #24]
 8012a76:	f043 0208 	orr.w	r2, r3, #8
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d105      	bne.n	8012a90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	699a      	ldr	r2, [r3, #24]
 8012a88:	4b06      	ldr	r3, [pc, #24]	; (8012aa4 <USB_DevInit+0x2b8>)
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3718      	adds	r7, #24
 8012a96:	46bd      	mov	sp, r7
 8012a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012a9c:	b004      	add	sp, #16
 8012a9e:	4770      	bx	lr
 8012aa0:	803c3800 	.word	0x803c3800
 8012aa4:	40000004 	.word	0x40000004

08012aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b085      	sub	sp, #20
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	3301      	adds	r3, #1
 8012aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	4a13      	ldr	r2, [pc, #76]	; (8012b0c <USB_FlushTxFifo+0x64>)
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	d901      	bls.n	8012ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012ac4:	2303      	movs	r3, #3
 8012ac6:	e01b      	b.n	8012b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	691b      	ldr	r3, [r3, #16]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	daf2      	bge.n	8012ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	019b      	lsls	r3, r3, #6
 8012ad8:	f043 0220 	orr.w	r2, r3, #32
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	4a08      	ldr	r2, [pc, #32]	; (8012b0c <USB_FlushTxFifo+0x64>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d901      	bls.n	8012af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012aee:	2303      	movs	r3, #3
 8012af0:	e006      	b.n	8012b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	691b      	ldr	r3, [r3, #16]
 8012af6:	f003 0320 	and.w	r3, r3, #32
 8012afa:	2b20      	cmp	r3, #32
 8012afc:	d0f0      	beq.n	8012ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3714      	adds	r7, #20
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr
 8012b0c:	00030d40 	.word	0x00030d40

08012b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012b10:	b480      	push	{r7}
 8012b12:	b085      	sub	sp, #20
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	4a11      	ldr	r2, [pc, #68]	; (8012b6c <USB_FlushRxFifo+0x5c>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d901      	bls.n	8012b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012b2a:	2303      	movs	r3, #3
 8012b2c:	e018      	b.n	8012b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	691b      	ldr	r3, [r3, #16]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	daf2      	bge.n	8012b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012b36:	2300      	movs	r3, #0
 8012b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2210      	movs	r2, #16
 8012b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	3301      	adds	r3, #1
 8012b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	4a08      	ldr	r2, [pc, #32]	; (8012b6c <USB_FlushRxFifo+0x5c>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d901      	bls.n	8012b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012b4e:	2303      	movs	r3, #3
 8012b50:	e006      	b.n	8012b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	691b      	ldr	r3, [r3, #16]
 8012b56:	f003 0310 	and.w	r3, r3, #16
 8012b5a:	2b10      	cmp	r3, #16
 8012b5c:	d0f0      	beq.n	8012b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012b5e:	2300      	movs	r3, #0
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3714      	adds	r7, #20
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr
 8012b6c:	00030d40 	.word	0x00030d40

08012b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b085      	sub	sp, #20
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	460b      	mov	r3, r1
 8012b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	78fb      	ldrb	r3, [r7, #3]
 8012b8a:	68f9      	ldr	r1, [r7, #12]
 8012b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b90:	4313      	orrs	r3, r2
 8012b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012b94:	2300      	movs	r3, #0
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3714      	adds	r7, #20
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr

08012ba2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012ba2:	b480      	push	{r7}
 8012ba4:	b087      	sub	sp, #28
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bb4:	689b      	ldr	r3, [r3, #8]
 8012bb6:	f003 0306 	and.w	r3, r3, #6
 8012bba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d102      	bne.n	8012bc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	75fb      	strb	r3, [r7, #23]
 8012bc6:	e00a      	b.n	8012bde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	2b02      	cmp	r3, #2
 8012bcc:	d002      	beq.n	8012bd4 <USB_GetDevSpeed+0x32>
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b06      	cmp	r3, #6
 8012bd2:	d102      	bne.n	8012bda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012bd4:	2302      	movs	r3, #2
 8012bd6:	75fb      	strb	r3, [r7, #23]
 8012bd8:	e001      	b.n	8012bde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012bda:	230f      	movs	r3, #15
 8012bdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	371c      	adds	r7, #28
 8012be4:	46bd      	mov	sp, r7
 8012be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bea:	4770      	bx	lr

08012bec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012bec:	b480      	push	{r7}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	785b      	ldrb	r3, [r3, #1]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d139      	bne.n	8012c7c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c0e:	69da      	ldr	r2, [r3, #28]
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	f003 030f 	and.w	r3, r3, #15
 8012c18:	2101      	movs	r1, #1
 8012c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	68f9      	ldr	r1, [r7, #12]
 8012c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c26:	4313      	orrs	r3, r2
 8012c28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	015a      	lsls	r2, r3, #5
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	4413      	add	r3, r2
 8012c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d153      	bne.n	8012ce8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	015a      	lsls	r2, r3, #5
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	4413      	add	r3, r2
 8012c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	791b      	ldrb	r3, [r3, #4]
 8012c5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	059b      	lsls	r3, r3, #22
 8012c62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c64:	431a      	orrs	r2, r3
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	0159      	lsls	r1, r3, #5
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	440b      	add	r3, r1
 8012c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c72:	4619      	mov	r1, r3
 8012c74:	4b20      	ldr	r3, [pc, #128]	; (8012cf8 <USB_ActivateEndpoint+0x10c>)
 8012c76:	4313      	orrs	r3, r2
 8012c78:	600b      	str	r3, [r1, #0]
 8012c7a:	e035      	b.n	8012ce8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c82:	69da      	ldr	r2, [r3, #28]
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	f003 030f 	and.w	r3, r3, #15
 8012c8c:	2101      	movs	r1, #1
 8012c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8012c92:	041b      	lsls	r3, r3, #16
 8012c94:	68f9      	ldr	r1, [r7, #12]
 8012c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	015a      	lsls	r2, r3, #5
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d119      	bne.n	8012ce8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	015a      	lsls	r2, r3, #5
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	4413      	add	r3, r2
 8012cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	689b      	ldr	r3, [r3, #8]
 8012cc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	791b      	ldrb	r3, [r3, #4]
 8012cce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012cd0:	430b      	orrs	r3, r1
 8012cd2:	431a      	orrs	r2, r3
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	0159      	lsls	r1, r3, #5
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	440b      	add	r3, r1
 8012cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	4b05      	ldr	r3, [pc, #20]	; (8012cf8 <USB_ActivateEndpoint+0x10c>)
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012ce8:	2300      	movs	r3, #0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3714      	adds	r7, #20
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	10008000 	.word	0x10008000

08012cfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	785b      	ldrb	r3, [r3, #1]
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	d161      	bne.n	8012ddc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	015a      	lsls	r2, r3, #5
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	4413      	add	r3, r2
 8012d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d2e:	d11f      	bne.n	8012d70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	015a      	lsls	r2, r3, #5
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	4413      	add	r3, r2
 8012d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	68ba      	ldr	r2, [r7, #8]
 8012d40:	0151      	lsls	r1, r2, #5
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	440a      	add	r2, r1
 8012d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012d4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	015a      	lsls	r2, r3, #5
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	4413      	add	r3, r2
 8012d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	68ba      	ldr	r2, [r7, #8]
 8012d60:	0151      	lsls	r1, r2, #5
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	440a      	add	r2, r1
 8012d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	f003 030f 	and.w	r3, r3, #15
 8012d80:	2101      	movs	r1, #1
 8012d82:	fa01 f303 	lsl.w	r3, r1, r3
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	43db      	mvns	r3, r3
 8012d8a:	68f9      	ldr	r1, [r7, #12]
 8012d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d90:	4013      	ands	r3, r2
 8012d92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d9a:	69da      	ldr	r2, [r3, #28]
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	f003 030f 	and.w	r3, r3, #15
 8012da4:	2101      	movs	r1, #1
 8012da6:	fa01 f303 	lsl.w	r3, r1, r3
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	43db      	mvns	r3, r3
 8012dae:	68f9      	ldr	r1, [r7, #12]
 8012db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012db4:	4013      	ands	r3, r2
 8012db6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	015a      	lsls	r2, r3, #5
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	4413      	add	r3, r2
 8012dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	0159      	lsls	r1, r3, #5
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	440b      	add	r3, r1
 8012dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	4b35      	ldr	r3, [pc, #212]	; (8012eac <USB_DeactivateEndpoint+0x1b0>)
 8012dd6:	4013      	ands	r3, r2
 8012dd8:	600b      	str	r3, [r1, #0]
 8012dda:	e060      	b.n	8012e9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	015a      	lsls	r2, r3, #5
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	4413      	add	r3, r2
 8012de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012df2:	d11f      	bne.n	8012e34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	015a      	lsls	r2, r3, #5
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	68ba      	ldr	r2, [r7, #8]
 8012e04:	0151      	lsls	r1, r2, #5
 8012e06:	68fa      	ldr	r2, [r7, #12]
 8012e08:	440a      	add	r2, r1
 8012e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012e12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	015a      	lsls	r2, r3, #5
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	0151      	lsls	r1, r2, #5
 8012e26:	68fa      	ldr	r2, [r7, #12]
 8012e28:	440a      	add	r2, r1
 8012e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f003 030f 	and.w	r3, r3, #15
 8012e44:	2101      	movs	r1, #1
 8012e46:	fa01 f303 	lsl.w	r3, r1, r3
 8012e4a:	041b      	lsls	r3, r3, #16
 8012e4c:	43db      	mvns	r3, r3
 8012e4e:	68f9      	ldr	r1, [r7, #12]
 8012e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e54:	4013      	ands	r3, r2
 8012e56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e5e:	69da      	ldr	r2, [r3, #28]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	f003 030f 	and.w	r3, r3, #15
 8012e68:	2101      	movs	r1, #1
 8012e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8012e6e:	041b      	lsls	r3, r3, #16
 8012e70:	43db      	mvns	r3, r3
 8012e72:	68f9      	ldr	r1, [r7, #12]
 8012e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e78:	4013      	ands	r3, r2
 8012e7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	015a      	lsls	r2, r3, #5
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	4413      	add	r3, r2
 8012e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	0159      	lsls	r1, r3, #5
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	440b      	add	r3, r1
 8012e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e96:	4619      	mov	r1, r3
 8012e98:	4b05      	ldr	r3, [pc, #20]	; (8012eb0 <USB_DeactivateEndpoint+0x1b4>)
 8012e9a:	4013      	ands	r3, r2
 8012e9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr
 8012eac:	ec337800 	.word	0xec337800
 8012eb0:	eff37800 	.word	0xeff37800

08012eb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08a      	sub	sp, #40	; 0x28
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	785b      	ldrb	r3, [r3, #1]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	f040 8181 	bne.w	80131d8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	691b      	ldr	r3, [r3, #16]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d132      	bne.n	8012f44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	015a      	lsls	r2, r3, #5
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eea:	691a      	ldr	r2, [r3, #16]
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	0159      	lsls	r1, r3, #5
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	440b      	add	r3, r1
 8012ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef8:	4619      	mov	r1, r3
 8012efa:	4ba5      	ldr	r3, [pc, #660]	; (8013190 <USB_EPStartXfer+0x2dc>)
 8012efc:	4013      	ands	r3, r2
 8012efe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012f00:	69bb      	ldr	r3, [r7, #24]
 8012f02:	015a      	lsls	r2, r3, #5
 8012f04:	69fb      	ldr	r3, [r7, #28]
 8012f06:	4413      	add	r3, r2
 8012f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f0c:	691b      	ldr	r3, [r3, #16]
 8012f0e:	69ba      	ldr	r2, [r7, #24]
 8012f10:	0151      	lsls	r1, r2, #5
 8012f12:	69fa      	ldr	r2, [r7, #28]
 8012f14:	440a      	add	r2, r1
 8012f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	015a      	lsls	r2, r3, #5
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	4413      	add	r3, r2
 8012f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f2c:	691a      	ldr	r2, [r3, #16]
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	0159      	lsls	r1, r3, #5
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	440b      	add	r3, r1
 8012f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	4b95      	ldr	r3, [pc, #596]	; (8013194 <USB_EPStartXfer+0x2e0>)
 8012f3e:	4013      	ands	r3, r2
 8012f40:	610b      	str	r3, [r1, #16]
 8012f42:	e092      	b.n	801306a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f44:	69bb      	ldr	r3, [r7, #24]
 8012f46:	015a      	lsls	r2, r3, #5
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	4413      	add	r3, r2
 8012f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f50:	691a      	ldr	r2, [r3, #16]
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	0159      	lsls	r1, r3, #5
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	440b      	add	r3, r1
 8012f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f5e:	4619      	mov	r1, r3
 8012f60:	4b8c      	ldr	r3, [pc, #560]	; (8013194 <USB_EPStartXfer+0x2e0>)
 8012f62:	4013      	ands	r3, r2
 8012f64:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	015a      	lsls	r2, r3, #5
 8012f6a:	69fb      	ldr	r3, [r7, #28]
 8012f6c:	4413      	add	r3, r2
 8012f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f72:	691a      	ldr	r2, [r3, #16]
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	0159      	lsls	r1, r3, #5
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	440b      	add	r3, r1
 8012f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f80:	4619      	mov	r1, r3
 8012f82:	4b83      	ldr	r3, [pc, #524]	; (8013190 <USB_EPStartXfer+0x2dc>)
 8012f84:	4013      	ands	r3, r2
 8012f86:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d11a      	bne.n	8012fc4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	691a      	ldr	r2, [r3, #16]
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	689b      	ldr	r3, [r3, #8]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d903      	bls.n	8012fa2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	689a      	ldr	r2, [r3, #8]
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	015a      	lsls	r2, r3, #5
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	4413      	add	r3, r2
 8012faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fae:	691b      	ldr	r3, [r3, #16]
 8012fb0:	69ba      	ldr	r2, [r7, #24]
 8012fb2:	0151      	lsls	r1, r2, #5
 8012fb4:	69fa      	ldr	r2, [r7, #28]
 8012fb6:	440a      	add	r2, r1
 8012fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012fc0:	6113      	str	r3, [r2, #16]
 8012fc2:	e01b      	b.n	8012ffc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012fc4:	69bb      	ldr	r3, [r7, #24]
 8012fc6:	015a      	lsls	r2, r3, #5
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	4413      	add	r3, r2
 8012fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fd0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	6919      	ldr	r1, [r3, #16]
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	440b      	add	r3, r1
 8012fdc:	1e59      	subs	r1, r3, #1
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8012fe6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012fe8:	4b6b      	ldr	r3, [pc, #428]	; (8013198 <USB_EPStartXfer+0x2e4>)
 8012fea:	400b      	ands	r3, r1
 8012fec:	69b9      	ldr	r1, [r7, #24]
 8012fee:	0148      	lsls	r0, r1, #5
 8012ff0:	69f9      	ldr	r1, [r7, #28]
 8012ff2:	4401      	add	r1, r0
 8012ff4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012ff8:	4313      	orrs	r3, r2
 8012ffa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	015a      	lsls	r2, r3, #5
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	4413      	add	r3, r2
 8013004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013008:	691a      	ldr	r2, [r3, #16]
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	691b      	ldr	r3, [r3, #16]
 801300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013012:	69b9      	ldr	r1, [r7, #24]
 8013014:	0148      	lsls	r0, r1, #5
 8013016:	69f9      	ldr	r1, [r7, #28]
 8013018:	4401      	add	r1, r0
 801301a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801301e:	4313      	orrs	r3, r2
 8013020:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	791b      	ldrb	r3, [r3, #4]
 8013026:	2b01      	cmp	r3, #1
 8013028:	d11f      	bne.n	801306a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801302a:	69bb      	ldr	r3, [r7, #24]
 801302c:	015a      	lsls	r2, r3, #5
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	4413      	add	r3, r2
 8013032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	69ba      	ldr	r2, [r7, #24]
 801303a:	0151      	lsls	r1, r2, #5
 801303c:	69fa      	ldr	r2, [r7, #28]
 801303e:	440a      	add	r2, r1
 8013040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013044:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013048:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	015a      	lsls	r2, r3, #5
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	4413      	add	r3, r2
 8013052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013056:	691b      	ldr	r3, [r3, #16]
 8013058:	69ba      	ldr	r2, [r7, #24]
 801305a:	0151      	lsls	r1, r2, #5
 801305c:	69fa      	ldr	r2, [r7, #28]
 801305e:	440a      	add	r2, r1
 8013060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013068:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801306a:	79fb      	ldrb	r3, [r7, #7]
 801306c:	2b01      	cmp	r3, #1
 801306e:	d14b      	bne.n	8013108 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	69db      	ldr	r3, [r3, #28]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d009      	beq.n	801308c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	015a      	lsls	r2, r3, #5
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	4413      	add	r3, r2
 8013080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013084:	461a      	mov	r2, r3
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	69db      	ldr	r3, [r3, #28]
 801308a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	791b      	ldrb	r3, [r3, #4]
 8013090:	2b01      	cmp	r3, #1
 8013092:	d128      	bne.n	80130e6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801309a:	689b      	ldr	r3, [r3, #8]
 801309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d110      	bne.n	80130c6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80130a4:	69bb      	ldr	r3, [r7, #24]
 80130a6:	015a      	lsls	r2, r3, #5
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	4413      	add	r3, r2
 80130ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	69ba      	ldr	r2, [r7, #24]
 80130b4:	0151      	lsls	r1, r2, #5
 80130b6:	69fa      	ldr	r2, [r7, #28]
 80130b8:	440a      	add	r2, r1
 80130ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80130c2:	6013      	str	r3, [r2, #0]
 80130c4:	e00f      	b.n	80130e6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	015a      	lsls	r2, r3, #5
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	4413      	add	r3, r2
 80130ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	69ba      	ldr	r2, [r7, #24]
 80130d6:	0151      	lsls	r1, r2, #5
 80130d8:	69fa      	ldr	r2, [r7, #28]
 80130da:	440a      	add	r2, r1
 80130dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80130e6:	69bb      	ldr	r3, [r7, #24]
 80130e8:	015a      	lsls	r2, r3, #5
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	4413      	add	r3, r2
 80130ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	69ba      	ldr	r2, [r7, #24]
 80130f6:	0151      	lsls	r1, r2, #5
 80130f8:	69fa      	ldr	r2, [r7, #28]
 80130fa:	440a      	add	r2, r1
 80130fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	e16a      	b.n	80133de <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	015a      	lsls	r2, r3, #5
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	4413      	add	r3, r2
 8013110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	69ba      	ldr	r2, [r7, #24]
 8013118:	0151      	lsls	r1, r2, #5
 801311a:	69fa      	ldr	r2, [r7, #28]
 801311c:	440a      	add	r2, r1
 801311e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013126:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	791b      	ldrb	r3, [r3, #4]
 801312c:	2b01      	cmp	r3, #1
 801312e:	d015      	beq.n	801315c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	2b00      	cmp	r3, #0
 8013136:	f000 8152 	beq.w	80133de <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	f003 030f 	and.w	r3, r3, #15
 801314a:	2101      	movs	r1, #1
 801314c:	fa01 f303 	lsl.w	r3, r1, r3
 8013150:	69f9      	ldr	r1, [r7, #28]
 8013152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013156:	4313      	orrs	r3, r2
 8013158:	634b      	str	r3, [r1, #52]	; 0x34
 801315a:	e140      	b.n	80133de <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013162:	689b      	ldr	r3, [r3, #8]
 8013164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013168:	2b00      	cmp	r3, #0
 801316a:	d117      	bne.n	801319c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	015a      	lsls	r2, r3, #5
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	4413      	add	r3, r2
 8013174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	69ba      	ldr	r2, [r7, #24]
 801317c:	0151      	lsls	r1, r2, #5
 801317e:	69fa      	ldr	r2, [r7, #28]
 8013180:	440a      	add	r2, r1
 8013182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801318a:	6013      	str	r3, [r2, #0]
 801318c:	e016      	b.n	80131bc <USB_EPStartXfer+0x308>
 801318e:	bf00      	nop
 8013190:	e007ffff 	.word	0xe007ffff
 8013194:	fff80000 	.word	0xfff80000
 8013198:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	015a      	lsls	r2, r3, #5
 80131a0:	69fb      	ldr	r3, [r7, #28]
 80131a2:	4413      	add	r3, r2
 80131a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	69ba      	ldr	r2, [r7, #24]
 80131ac:	0151      	lsls	r1, r2, #5
 80131ae:	69fa      	ldr	r2, [r7, #28]
 80131b0:	440a      	add	r2, r1
 80131b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	68d9      	ldr	r1, [r3, #12]
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	781a      	ldrb	r2, [r3, #0]
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	691b      	ldr	r3, [r3, #16]
 80131c8:	b298      	uxth	r0, r3
 80131ca:	79fb      	ldrb	r3, [r7, #7]
 80131cc:	9300      	str	r3, [sp, #0]
 80131ce:	4603      	mov	r3, r0
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f000 f9b9 	bl	8013548 <USB_WritePacket>
 80131d6:	e102      	b.n	80133de <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80131d8:	69bb      	ldr	r3, [r7, #24]
 80131da:	015a      	lsls	r2, r3, #5
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	4413      	add	r3, r2
 80131e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131e4:	691a      	ldr	r2, [r3, #16]
 80131e6:	69bb      	ldr	r3, [r7, #24]
 80131e8:	0159      	lsls	r1, r3, #5
 80131ea:	69fb      	ldr	r3, [r7, #28]
 80131ec:	440b      	add	r3, r1
 80131ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131f2:	4619      	mov	r1, r3
 80131f4:	4b7c      	ldr	r3, [pc, #496]	; (80133e8 <USB_EPStartXfer+0x534>)
 80131f6:	4013      	ands	r3, r2
 80131f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	015a      	lsls	r2, r3, #5
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	4413      	add	r3, r2
 8013202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013206:	691a      	ldr	r2, [r3, #16]
 8013208:	69bb      	ldr	r3, [r7, #24]
 801320a:	0159      	lsls	r1, r3, #5
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	440b      	add	r3, r1
 8013210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013214:	4619      	mov	r1, r3
 8013216:	4b75      	ldr	r3, [pc, #468]	; (80133ec <USB_EPStartXfer+0x538>)
 8013218:	4013      	ands	r3, r2
 801321a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d12f      	bne.n	8013282 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d003      	beq.n	8013232 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	689a      	ldr	r2, [r3, #8]
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	689a      	ldr	r2, [r3, #8]
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	015a      	lsls	r2, r3, #5
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	4413      	add	r3, r2
 8013242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013246:	691a      	ldr	r2, [r3, #16]
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	6a1b      	ldr	r3, [r3, #32]
 801324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013250:	69b9      	ldr	r1, [r7, #24]
 8013252:	0148      	lsls	r0, r1, #5
 8013254:	69f9      	ldr	r1, [r7, #28]
 8013256:	4401      	add	r1, r0
 8013258:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801325c:	4313      	orrs	r3, r2
 801325e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013260:	69bb      	ldr	r3, [r7, #24]
 8013262:	015a      	lsls	r2, r3, #5
 8013264:	69fb      	ldr	r3, [r7, #28]
 8013266:	4413      	add	r3, r2
 8013268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801326c:	691b      	ldr	r3, [r3, #16]
 801326e:	69ba      	ldr	r2, [r7, #24]
 8013270:	0151      	lsls	r1, r2, #5
 8013272:	69fa      	ldr	r2, [r7, #28]
 8013274:	440a      	add	r2, r1
 8013276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801327a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801327e:	6113      	str	r3, [r2, #16]
 8013280:	e05f      	b.n	8013342 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	691b      	ldr	r3, [r3, #16]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d123      	bne.n	80132d2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	015a      	lsls	r2, r3, #5
 801328e:	69fb      	ldr	r3, [r7, #28]
 8013290:	4413      	add	r3, r2
 8013292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013296:	691a      	ldr	r2, [r3, #16]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132a0:	69b9      	ldr	r1, [r7, #24]
 80132a2:	0148      	lsls	r0, r1, #5
 80132a4:	69f9      	ldr	r1, [r7, #28]
 80132a6:	4401      	add	r1, r0
 80132a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80132ac:	4313      	orrs	r3, r2
 80132ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80132b0:	69bb      	ldr	r3, [r7, #24]
 80132b2:	015a      	lsls	r2, r3, #5
 80132b4:	69fb      	ldr	r3, [r7, #28]
 80132b6:	4413      	add	r3, r2
 80132b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132bc:	691b      	ldr	r3, [r3, #16]
 80132be:	69ba      	ldr	r2, [r7, #24]
 80132c0:	0151      	lsls	r1, r2, #5
 80132c2:	69fa      	ldr	r2, [r7, #28]
 80132c4:	440a      	add	r2, r1
 80132c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132ce:	6113      	str	r3, [r2, #16]
 80132d0:	e037      	b.n	8013342 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	691a      	ldr	r2, [r3, #16]
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	689b      	ldr	r3, [r3, #8]
 80132da:	4413      	add	r3, r2
 80132dc:	1e5a      	subs	r2, r3, #1
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	689b      	ldr	r3, [r3, #8]
 80132e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80132e6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	689b      	ldr	r3, [r3, #8]
 80132ec:	8afa      	ldrh	r2, [r7, #22]
 80132ee:	fb03 f202 	mul.w	r2, r3, r2
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	015a      	lsls	r2, r3, #5
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	4413      	add	r3, r2
 80132fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013302:	691a      	ldr	r2, [r3, #16]
 8013304:	8afb      	ldrh	r3, [r7, #22]
 8013306:	04d9      	lsls	r1, r3, #19
 8013308:	4b39      	ldr	r3, [pc, #228]	; (80133f0 <USB_EPStartXfer+0x53c>)
 801330a:	400b      	ands	r3, r1
 801330c:	69b9      	ldr	r1, [r7, #24]
 801330e:	0148      	lsls	r0, r1, #5
 8013310:	69f9      	ldr	r1, [r7, #28]
 8013312:	4401      	add	r1, r0
 8013314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013318:	4313      	orrs	r3, r2
 801331a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	015a      	lsls	r2, r3, #5
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	4413      	add	r3, r2
 8013324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013328:	691a      	ldr	r2, [r3, #16]
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	6a1b      	ldr	r3, [r3, #32]
 801332e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013332:	69b9      	ldr	r1, [r7, #24]
 8013334:	0148      	lsls	r0, r1, #5
 8013336:	69f9      	ldr	r1, [r7, #28]
 8013338:	4401      	add	r1, r0
 801333a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801333e:	4313      	orrs	r3, r2
 8013340:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013342:	79fb      	ldrb	r3, [r7, #7]
 8013344:	2b01      	cmp	r3, #1
 8013346:	d10d      	bne.n	8013364 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	68db      	ldr	r3, [r3, #12]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d009      	beq.n	8013364 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	68d9      	ldr	r1, [r3, #12]
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	015a      	lsls	r2, r3, #5
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	4413      	add	r3, r2
 801335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013360:	460a      	mov	r2, r1
 8013362:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	791b      	ldrb	r3, [r3, #4]
 8013368:	2b01      	cmp	r3, #1
 801336a:	d128      	bne.n	80133be <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013372:	689b      	ldr	r3, [r3, #8]
 8013374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013378:	2b00      	cmp	r3, #0
 801337a:	d110      	bne.n	801339e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	015a      	lsls	r2, r3, #5
 8013380:	69fb      	ldr	r3, [r7, #28]
 8013382:	4413      	add	r3, r2
 8013384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	69ba      	ldr	r2, [r7, #24]
 801338c:	0151      	lsls	r1, r2, #5
 801338e:	69fa      	ldr	r2, [r7, #28]
 8013390:	440a      	add	r2, r1
 8013392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801339a:	6013      	str	r3, [r2, #0]
 801339c:	e00f      	b.n	80133be <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801339e:	69bb      	ldr	r3, [r7, #24]
 80133a0:	015a      	lsls	r2, r3, #5
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	4413      	add	r3, r2
 80133a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	69ba      	ldr	r2, [r7, #24]
 80133ae:	0151      	lsls	r1, r2, #5
 80133b0:	69fa      	ldr	r2, [r7, #28]
 80133b2:	440a      	add	r2, r1
 80133b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133bc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	015a      	lsls	r2, r3, #5
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	4413      	add	r3, r2
 80133c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	69ba      	ldr	r2, [r7, #24]
 80133ce:	0151      	lsls	r1, r2, #5
 80133d0:	69fa      	ldr	r2, [r7, #28]
 80133d2:	440a      	add	r2, r1
 80133d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80133dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80133de:	2300      	movs	r3, #0
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3720      	adds	r7, #32
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	fff80000 	.word	0xfff80000
 80133ec:	e007ffff 	.word	0xe007ffff
 80133f0:	1ff80000 	.word	0x1ff80000

080133f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b087      	sub	sp, #28
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80133fe:	2300      	movs	r3, #0
 8013400:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013402:	2300      	movs	r3, #0
 8013404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	785b      	ldrb	r3, [r3, #1]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d14a      	bne.n	80134a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	015a      	lsls	r2, r3, #5
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	4413      	add	r3, r2
 801341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801342a:	f040 8086 	bne.w	801353a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	015a      	lsls	r2, r3, #5
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	4413      	add	r3, r2
 8013438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	683a      	ldr	r2, [r7, #0]
 8013440:	7812      	ldrb	r2, [r2, #0]
 8013442:	0151      	lsls	r1, r2, #5
 8013444:	693a      	ldr	r2, [r7, #16]
 8013446:	440a      	add	r2, r1
 8013448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801344c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013450:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	015a      	lsls	r2, r3, #5
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	4413      	add	r3, r2
 801345c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	683a      	ldr	r2, [r7, #0]
 8013464:	7812      	ldrb	r2, [r2, #0]
 8013466:	0151      	lsls	r1, r2, #5
 8013468:	693a      	ldr	r2, [r7, #16]
 801346a:	440a      	add	r2, r1
 801346c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013474:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	3301      	adds	r3, #1
 801347a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013482:	4293      	cmp	r3, r2
 8013484:	d902      	bls.n	801348c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013486:	2301      	movs	r3, #1
 8013488:	75fb      	strb	r3, [r7, #23]
          break;
 801348a:	e056      	b.n	801353a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	015a      	lsls	r2, r3, #5
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	4413      	add	r3, r2
 8013496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134a4:	d0e7      	beq.n	8013476 <USB_EPStopXfer+0x82>
 80134a6:	e048      	b.n	801353a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	015a      	lsls	r2, r3, #5
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	4413      	add	r3, r2
 80134b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134c0:	d13b      	bne.n	801353a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	015a      	lsls	r2, r3, #5
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	4413      	add	r3, r2
 80134cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	683a      	ldr	r2, [r7, #0]
 80134d4:	7812      	ldrb	r2, [r2, #0]
 80134d6:	0151      	lsls	r1, r2, #5
 80134d8:	693a      	ldr	r2, [r7, #16]
 80134da:	440a      	add	r2, r1
 80134dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80134e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	015a      	lsls	r2, r3, #5
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	4413      	add	r3, r2
 80134f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	683a      	ldr	r2, [r7, #0]
 80134f8:	7812      	ldrb	r2, [r2, #0]
 80134fa:	0151      	lsls	r1, r2, #5
 80134fc:	693a      	ldr	r2, [r7, #16]
 80134fe:	440a      	add	r2, r1
 8013500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013508:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	3301      	adds	r3, #1
 801350e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	f242 7210 	movw	r2, #10000	; 0x2710
 8013516:	4293      	cmp	r3, r2
 8013518:	d902      	bls.n	8013520 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801351a:	2301      	movs	r3, #1
 801351c:	75fb      	strb	r3, [r7, #23]
          break;
 801351e:	e00c      	b.n	801353a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	015a      	lsls	r2, r3, #5
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	4413      	add	r3, r2
 801352a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013538:	d0e7      	beq.n	801350a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801353a:	7dfb      	ldrb	r3, [r7, #23]
}
 801353c:	4618      	mov	r0, r3
 801353e:	371c      	adds	r7, #28
 8013540:	46bd      	mov	sp, r7
 8013542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013546:	4770      	bx	lr

08013548 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013548:	b480      	push	{r7}
 801354a:	b089      	sub	sp, #36	; 0x24
 801354c:	af00      	add	r7, sp, #0
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	4611      	mov	r1, r2
 8013554:	461a      	mov	r2, r3
 8013556:	460b      	mov	r3, r1
 8013558:	71fb      	strb	r3, [r7, #7]
 801355a:	4613      	mov	r3, r2
 801355c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801356a:	2b00      	cmp	r3, #0
 801356c:	d123      	bne.n	80135b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801356e:	88bb      	ldrh	r3, [r7, #4]
 8013570:	3303      	adds	r3, #3
 8013572:	089b      	lsrs	r3, r3, #2
 8013574:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013576:	2300      	movs	r3, #0
 8013578:	61bb      	str	r3, [r7, #24]
 801357a:	e018      	b.n	80135ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801357c:	79fb      	ldrb	r3, [r7, #7]
 801357e:	031a      	lsls	r2, r3, #12
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	4413      	add	r3, r2
 8013584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013588:	461a      	mov	r2, r3
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	3301      	adds	r3, #1
 8013594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013596:	69fb      	ldr	r3, [r7, #28]
 8013598:	3301      	adds	r3, #1
 801359a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	3301      	adds	r3, #1
 80135a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135a2:	69fb      	ldr	r3, [r7, #28]
 80135a4:	3301      	adds	r3, #1
 80135a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80135a8:	69bb      	ldr	r3, [r7, #24]
 80135aa:	3301      	adds	r3, #1
 80135ac:	61bb      	str	r3, [r7, #24]
 80135ae:	69ba      	ldr	r2, [r7, #24]
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d3e2      	bcc.n	801357c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80135b6:	2300      	movs	r3, #0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3724      	adds	r7, #36	; 0x24
 80135bc:	46bd      	mov	sp, r7
 80135be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c2:	4770      	bx	lr

080135c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80135c4:	b480      	push	{r7}
 80135c6:	b08b      	sub	sp, #44	; 0x2c
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	4613      	mov	r3, r2
 80135d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80135da:	88fb      	ldrh	r3, [r7, #6]
 80135dc:	089b      	lsrs	r3, r3, #2
 80135de:	b29b      	uxth	r3, r3
 80135e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80135e2:	88fb      	ldrh	r3, [r7, #6]
 80135e4:	f003 0303 	and.w	r3, r3, #3
 80135e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80135ea:	2300      	movs	r3, #0
 80135ec:	623b      	str	r3, [r7, #32]
 80135ee:	e014      	b.n	801361a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80135f0:	69bb      	ldr	r3, [r7, #24]
 80135f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135f6:	681a      	ldr	r2, [r3, #0]
 80135f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80135fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fe:	3301      	adds	r3, #1
 8013600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013604:	3301      	adds	r3, #1
 8013606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360a:	3301      	adds	r3, #1
 801360c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013610:	3301      	adds	r3, #1
 8013612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013614:	6a3b      	ldr	r3, [r7, #32]
 8013616:	3301      	adds	r3, #1
 8013618:	623b      	str	r3, [r7, #32]
 801361a:	6a3a      	ldr	r2, [r7, #32]
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	429a      	cmp	r2, r3
 8013620:	d3e6      	bcc.n	80135f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013622:	8bfb      	ldrh	r3, [r7, #30]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d01e      	beq.n	8013666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013628:	2300      	movs	r3, #0
 801362a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013632:	461a      	mov	r2, r3
 8013634:	f107 0310 	add.w	r3, r7, #16
 8013638:	6812      	ldr	r2, [r2, #0]
 801363a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801363c:	693a      	ldr	r2, [r7, #16]
 801363e:	6a3b      	ldr	r3, [r7, #32]
 8013640:	b2db      	uxtb	r3, r3
 8013642:	00db      	lsls	r3, r3, #3
 8013644:	fa22 f303 	lsr.w	r3, r2, r3
 8013648:	b2da      	uxtb	r2, r3
 801364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364c:	701a      	strb	r2, [r3, #0]
      i++;
 801364e:	6a3b      	ldr	r3, [r7, #32]
 8013650:	3301      	adds	r3, #1
 8013652:	623b      	str	r3, [r7, #32]
      pDest++;
 8013654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013656:	3301      	adds	r3, #1
 8013658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801365a:	8bfb      	ldrh	r3, [r7, #30]
 801365c:	3b01      	subs	r3, #1
 801365e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013660:	8bfb      	ldrh	r3, [r7, #30]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1ea      	bne.n	801363c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013668:	4618      	mov	r0, r3
 801366a:	372c      	adds	r7, #44	; 0x2c
 801366c:	46bd      	mov	sp, r7
 801366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013672:	4770      	bx	lr

08013674 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013674:	b480      	push	{r7}
 8013676:	b085      	sub	sp, #20
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	785b      	ldrb	r3, [r3, #1]
 801368c:	2b01      	cmp	r3, #1
 801368e:	d12c      	bne.n	80136ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	015a      	lsls	r2, r3, #5
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	4413      	add	r3, r2
 8013698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	db12      	blt.n	80136c8 <USB_EPSetStall+0x54>
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d00f      	beq.n	80136c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	015a      	lsls	r2, r3, #5
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	4413      	add	r3, r2
 80136b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	68ba      	ldr	r2, [r7, #8]
 80136b8:	0151      	lsls	r1, r2, #5
 80136ba:	68fa      	ldr	r2, [r7, #12]
 80136bc:	440a      	add	r2, r1
 80136be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80136c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	015a      	lsls	r2, r3, #5
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	4413      	add	r3, r2
 80136d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	68ba      	ldr	r2, [r7, #8]
 80136d8:	0151      	lsls	r1, r2, #5
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	440a      	add	r2, r1
 80136de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80136e6:	6013      	str	r3, [r2, #0]
 80136e8:	e02b      	b.n	8013742 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	015a      	lsls	r2, r3, #5
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	4413      	add	r3, r2
 80136f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	db12      	blt.n	8013722 <USB_EPSetStall+0xae>
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00f      	beq.n	8013722 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	015a      	lsls	r2, r3, #5
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	4413      	add	r3, r2
 801370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	68ba      	ldr	r2, [r7, #8]
 8013712:	0151      	lsls	r1, r2, #5
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	440a      	add	r2, r1
 8013718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801371c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013720:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	015a      	lsls	r2, r3, #5
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	4413      	add	r3, r2
 801372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	0151      	lsls	r1, r2, #5
 8013734:	68fa      	ldr	r2, [r7, #12]
 8013736:	440a      	add	r2, r1
 8013738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801373c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013742:	2300      	movs	r3, #0
}
 8013744:	4618      	mov	r0, r3
 8013746:	3714      	adds	r7, #20
 8013748:	46bd      	mov	sp, r7
 801374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374e:	4770      	bx	lr

08013750 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013750:	b480      	push	{r7}
 8013752:	b085      	sub	sp, #20
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	785b      	ldrb	r3, [r3, #1]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d128      	bne.n	80137be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	015a      	lsls	r2, r3, #5
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	4413      	add	r3, r2
 8013774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	68ba      	ldr	r2, [r7, #8]
 801377c:	0151      	lsls	r1, r2, #5
 801377e:	68fa      	ldr	r2, [r7, #12]
 8013780:	440a      	add	r2, r1
 8013782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801378a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	791b      	ldrb	r3, [r3, #4]
 8013790:	2b03      	cmp	r3, #3
 8013792:	d003      	beq.n	801379c <USB_EPClearStall+0x4c>
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	791b      	ldrb	r3, [r3, #4]
 8013798:	2b02      	cmp	r3, #2
 801379a:	d138      	bne.n	801380e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	015a      	lsls	r2, r3, #5
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	4413      	add	r3, r2
 80137a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	68ba      	ldr	r2, [r7, #8]
 80137ac:	0151      	lsls	r1, r2, #5
 80137ae:	68fa      	ldr	r2, [r7, #12]
 80137b0:	440a      	add	r2, r1
 80137b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137ba:	6013      	str	r3, [r2, #0]
 80137bc:	e027      	b.n	801380e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	015a      	lsls	r2, r3, #5
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	4413      	add	r3, r2
 80137c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	68ba      	ldr	r2, [r7, #8]
 80137ce:	0151      	lsls	r1, r2, #5
 80137d0:	68fa      	ldr	r2, [r7, #12]
 80137d2:	440a      	add	r2, r1
 80137d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80137dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	791b      	ldrb	r3, [r3, #4]
 80137e2:	2b03      	cmp	r3, #3
 80137e4:	d003      	beq.n	80137ee <USB_EPClearStall+0x9e>
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	791b      	ldrb	r3, [r3, #4]
 80137ea:	2b02      	cmp	r3, #2
 80137ec:	d10f      	bne.n	801380e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	015a      	lsls	r2, r3, #5
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	4413      	add	r3, r2
 80137f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	68ba      	ldr	r2, [r7, #8]
 80137fe:	0151      	lsls	r1, r2, #5
 8013800:	68fa      	ldr	r2, [r7, #12]
 8013802:	440a      	add	r2, r1
 8013804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801380c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801380e:	2300      	movs	r3, #0
}
 8013810:	4618      	mov	r0, r3
 8013812:	3714      	adds	r7, #20
 8013814:	46bd      	mov	sp, r7
 8013816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381a:	4770      	bx	lr

0801381c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801381c:	b480      	push	{r7}
 801381e:	b085      	sub	sp, #20
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	460b      	mov	r3, r1
 8013826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801383a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801383e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013846:	681a      	ldr	r2, [r3, #0]
 8013848:	78fb      	ldrb	r3, [r7, #3]
 801384a:	011b      	lsls	r3, r3, #4
 801384c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013850:	68f9      	ldr	r1, [r7, #12]
 8013852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013856:	4313      	orrs	r3, r2
 8013858:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801385a:	2300      	movs	r3, #0
}
 801385c:	4618      	mov	r0, r3
 801385e:	3714      	adds	r7, #20
 8013860:	46bd      	mov	sp, r7
 8013862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013866:	4770      	bx	lr

08013868 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013868:	b480      	push	{r7}
 801386a:	b085      	sub	sp, #20
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013882:	f023 0303 	bic.w	r3, r3, #3
 8013886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	68fa      	ldr	r2, [r7, #12]
 8013892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013896:	f023 0302 	bic.w	r3, r3, #2
 801389a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801389c:	2300      	movs	r3, #0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr

080138aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80138aa:	b480      	push	{r7}
 80138ac:	b085      	sub	sp, #20
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80138c4:	f023 0303 	bic.w	r3, r3, #3
 80138c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80138d8:	f043 0302 	orr.w	r3, r3, #2
 80138dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138de:	2300      	movs	r3, #0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3714      	adds	r7, #20
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80138ec:	b480      	push	{r7}
 80138ee:	b085      	sub	sp, #20
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	695b      	ldr	r3, [r3, #20]
 80138f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	699b      	ldr	r3, [r3, #24]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	4013      	ands	r3, r2
 8013902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013904:	68fb      	ldr	r3, [r7, #12]
}
 8013906:	4618      	mov	r0, r3
 8013908:	3714      	adds	r7, #20
 801390a:	46bd      	mov	sp, r7
 801390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013910:	4770      	bx	lr

08013912 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013912:	b480      	push	{r7}
 8013914:	b085      	sub	sp, #20
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013924:	699b      	ldr	r3, [r3, #24]
 8013926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801392e:	69db      	ldr	r3, [r3, #28]
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	4013      	ands	r3, r2
 8013934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	0c1b      	lsrs	r3, r3, #16
}
 801393a:	4618      	mov	r0, r3
 801393c:	3714      	adds	r7, #20
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013946:	b480      	push	{r7}
 8013948:	b085      	sub	sp, #20
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013958:	699b      	ldr	r3, [r3, #24]
 801395a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013962:	69db      	ldr	r3, [r3, #28]
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	4013      	ands	r3, r2
 8013968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	b29b      	uxth	r3, r3
}
 801396e:	4618      	mov	r0, r3
 8013970:	3714      	adds	r7, #20
 8013972:	46bd      	mov	sp, r7
 8013974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013978:	4770      	bx	lr

0801397a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801397a:	b480      	push	{r7}
 801397c:	b085      	sub	sp, #20
 801397e:	af00      	add	r7, sp, #0
 8013980:	6078      	str	r0, [r7, #4]
 8013982:	460b      	mov	r3, r1
 8013984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801398a:	78fb      	ldrb	r3, [r7, #3]
 801398c:	015a      	lsls	r2, r3, #5
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	4413      	add	r3, r2
 8013992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013996:	689b      	ldr	r3, [r3, #8]
 8013998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139a0:	695b      	ldr	r3, [r3, #20]
 80139a2:	68ba      	ldr	r2, [r7, #8]
 80139a4:	4013      	ands	r3, r2
 80139a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80139a8:	68bb      	ldr	r3, [r7, #8]
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3714      	adds	r7, #20
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr

080139b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80139b6:	b480      	push	{r7}
 80139b8:	b087      	sub	sp, #28
 80139ba:	af00      	add	r7, sp, #0
 80139bc:	6078      	str	r0, [r7, #4]
 80139be:	460b      	mov	r3, r1
 80139c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139cc:	691b      	ldr	r3, [r3, #16]
 80139ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80139da:	78fb      	ldrb	r3, [r7, #3]
 80139dc:	f003 030f 	and.w	r3, r3, #15
 80139e0:	68fa      	ldr	r2, [r7, #12]
 80139e2:	fa22 f303 	lsr.w	r3, r2, r3
 80139e6:	01db      	lsls	r3, r3, #7
 80139e8:	b2db      	uxtb	r3, r3
 80139ea:	693a      	ldr	r2, [r7, #16]
 80139ec:	4313      	orrs	r3, r2
 80139ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80139f0:	78fb      	ldrb	r3, [r7, #3]
 80139f2:	015a      	lsls	r2, r3, #5
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	4413      	add	r3, r2
 80139f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139fc:	689b      	ldr	r3, [r3, #8]
 80139fe:	693a      	ldr	r2, [r7, #16]
 8013a00:	4013      	ands	r3, r2
 8013a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013a04:	68bb      	ldr	r3, [r7, #8]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	371c      	adds	r7, #28
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr

08013a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013a12:	b480      	push	{r7}
 8013a14:	b083      	sub	sp, #12
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	695b      	ldr	r3, [r3, #20]
 8013a1e:	f003 0301 	and.w	r3, r3, #1
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	370c      	adds	r7, #12
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr
	...

08013a30 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013a30:	b480      	push	{r7}
 8013a32:	b085      	sub	sp, #20
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	4b09      	ldr	r3, [pc, #36]	; (8013a74 <USB_ActivateSetup+0x44>)
 8013a4e:	4013      	ands	r3, r2
 8013a50:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a66:	2300      	movs	r3, #0
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3714      	adds	r7, #20
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr
 8013a74:	fffff800 	.word	0xfffff800

08013a78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b087      	sub	sp, #28
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	60f8      	str	r0, [r7, #12]
 8013a80:	460b      	mov	r3, r1
 8013a82:	607a      	str	r2, [r7, #4]
 8013a84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	333c      	adds	r3, #60	; 0x3c
 8013a8e:	3304      	adds	r3, #4
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	4a26      	ldr	r2, [pc, #152]	; (8013b30 <USB_EP0_OutStart+0xb8>)
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d90a      	bls.n	8013ab2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013aac:	d101      	bne.n	8013ab2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	e037      	b.n	8013b22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ab8:	461a      	mov	r2, r3
 8013aba:	2300      	movs	r3, #0
 8013abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac4:	691b      	ldr	r3, [r3, #16]
 8013ac6:	697a      	ldr	r2, [r7, #20]
 8013ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ad8:	691b      	ldr	r3, [r3, #16]
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ae0:	f043 0318 	orr.w	r3, r3, #24
 8013ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aec:	691b      	ldr	r3, [r3, #16]
 8013aee:	697a      	ldr	r2, [r7, #20]
 8013af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013af4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013af8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013afa:	7afb      	ldrb	r3, [r7, #11]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	d10f      	bne.n	8013b20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b06:	461a      	mov	r2, r3
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	697a      	ldr	r2, [r7, #20]
 8013b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	371c      	adds	r7, #28
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	4f54300a 	.word	0x4f54300a

08013b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	3301      	adds	r3, #1
 8013b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	4a13      	ldr	r2, [pc, #76]	; (8013b98 <USB_CoreReset+0x64>)
 8013b4a:	4293      	cmp	r3, r2
 8013b4c:	d901      	bls.n	8013b52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013b4e:	2303      	movs	r3, #3
 8013b50:	e01b      	b.n	8013b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	691b      	ldr	r3, [r3, #16]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	daf2      	bge.n	8013b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	691b      	ldr	r3, [r3, #16]
 8013b62:	f043 0201 	orr.w	r2, r3, #1
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	4a09      	ldr	r2, [pc, #36]	; (8013b98 <USB_CoreReset+0x64>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d901      	bls.n	8013b7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013b78:	2303      	movs	r3, #3
 8013b7a:	e006      	b.n	8013b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	691b      	ldr	r3, [r3, #16]
 8013b80:	f003 0301 	and.w	r3, r3, #1
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d0f0      	beq.n	8013b6a <USB_CoreReset+0x36>

  return HAL_OK;
 8013b88:	2300      	movs	r3, #0
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3714      	adds	r7, #20
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b94:	4770      	bx	lr
 8013b96:	bf00      	nop
 8013b98:	00030d40 	.word	0x00030d40

08013b9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013ba0:	4904      	ldr	r1, [pc, #16]	; (8013bb4 <MX_FATFS_Init+0x18>)
 8013ba2:	4805      	ldr	r0, [pc, #20]	; (8013bb8 <MX_FATFS_Init+0x1c>)
 8013ba4:	f002 fa56 	bl	8016054 <FATFS_LinkDriver>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	461a      	mov	r2, r3
 8013bac:	4b03      	ldr	r3, [pc, #12]	; (8013bbc <MX_FATFS_Init+0x20>)
 8013bae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013bb0:	bf00      	nop
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	240015d8 	.word	0x240015d8
 8013bb8:	080175e4 	.word	0x080175e4
 8013bbc:	240015d4 	.word	0x240015d4

08013bc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013bca:	f000 f885 	bl	8013cd8 <BSP_SD_IsDetected>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d001      	beq.n	8013bd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013bd4:	2302      	movs	r3, #2
 8013bd6:	e012      	b.n	8013bfe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013bd8:	480b      	ldr	r0, [pc, #44]	; (8013c08 <BSP_SD_Init+0x48>)
 8013bda:	f7f8 ff41 	bl	800ca60 <HAL_SD_Init>
 8013bde:	4603      	mov	r3, r0
 8013be0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013be2:	79fb      	ldrb	r3, [r7, #7]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d109      	bne.n	8013bfc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013bec:	4806      	ldr	r0, [pc, #24]	; (8013c08 <BSP_SD_Init+0x48>)
 8013bee:	f7f9 fdf7 	bl	800d7e0 <HAL_SD_ConfigWideBusOperation>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d001      	beq.n	8013bfc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3708      	adds	r7, #8
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	24000ebc 	.word	0x24000ebc

08013c0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	68ba      	ldr	r2, [r7, #8]
 8013c20:	68f9      	ldr	r1, [r7, #12]
 8013c22:	4806      	ldr	r0, [pc, #24]	; (8013c3c <BSP_SD_ReadBlocks_DMA+0x30>)
 8013c24:	f7f9 f83c 	bl	800cca0 <HAL_SD_ReadBlocks_DMA>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d001      	beq.n	8013c32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c2e:	2301      	movs	r3, #1
 8013c30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3718      	adds	r7, #24
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	24000ebc 	.word	0x24000ebc

08013c40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b086      	sub	sp, #24
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68ba      	ldr	r2, [r7, #8]
 8013c54:	68f9      	ldr	r1, [r7, #12]
 8013c56:	4806      	ldr	r0, [pc, #24]	; (8013c70 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013c58:	f7f9 f8ca 	bl	800cdf0 <HAL_SD_WriteBlocks_DMA>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d001      	beq.n	8013c66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c62:	2301      	movs	r3, #1
 8013c64:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3718      	adds	r7, #24
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	24000ebc 	.word	0x24000ebc

08013c74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013c78:	4805      	ldr	r0, [pc, #20]	; (8013c90 <BSP_SD_GetCardState+0x1c>)
 8013c7a:	f7f9 fec3 	bl	800da04 <HAL_SD_GetCardState>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b04      	cmp	r3, #4
 8013c82:	bf14      	ite	ne
 8013c84:	2301      	movne	r3, #1
 8013c86:	2300      	moveq	r3, #0
 8013c88:	b2db      	uxtb	r3, r3
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	24000ebc 	.word	0x24000ebc

08013c94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013c9c:	6879      	ldr	r1, [r7, #4]
 8013c9e:	4803      	ldr	r0, [pc, #12]	; (8013cac <BSP_SD_GetCardInfo+0x18>)
 8013ca0:	f7f9 fd72 	bl	800d788 <HAL_SD_GetCardInfo>
}
 8013ca4:	bf00      	nop
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	24000ebc 	.word	0x24000ebc

08013cb0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013cb8:	f000 f9a0 	bl	8013ffc <BSP_SD_WriteCpltCallback>
}
 8013cbc:	bf00      	nop
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013ccc:	f000 f9a2 	bl	8014014 <BSP_SD_ReadCpltCallback>
}
 8013cd0:	bf00      	nop
 8013cd2:	3708      	adds	r7, #8
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013cde:	2301      	movs	r3, #1
 8013ce0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013ce2:	f000 f80b 	bl	8013cfc <BSP_PlatformIsDetected>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d101      	bne.n	8013cf0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013cec:	2300      	movs	r3, #0
 8013cee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013cf0:	79fb      	ldrb	r3, [r7, #7]
 8013cf2:	b2db      	uxtb	r3, r3
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013d02:	2301      	movs	r3, #1
 8013d04:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013d06:	2104      	movs	r1, #4
 8013d08:	4806      	ldr	r0, [pc, #24]	; (8013d24 <BSP_PlatformIsDetected+0x28>)
 8013d0a:	f7f3 fe7d 	bl	8007a08 <HAL_GPIO_ReadPin>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d001      	beq.n	8013d18 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013d14:	2300      	movs	r3, #0
 8013d16:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013d18:	79fb      	ldrb	r3, [r7, #7]
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3708      	adds	r7, #8
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
 8013d22:	bf00      	nop
 8013d24:	58020400 	.word	0x58020400

08013d28 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013d30:	f7ef fbc4 	bl	80034bc <HAL_GetTick>
 8013d34:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013d36:	e006      	b.n	8013d46 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013d38:	f7ff ff9c 	bl	8013c74 <BSP_SD_GetCardState>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d101      	bne.n	8013d46 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	e009      	b.n	8013d5a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013d46:	f7ef fbb9 	bl	80034bc <HAL_GetTick>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	1ad3      	subs	r3, r2, r3
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d8f0      	bhi.n	8013d38 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3710      	adds	r7, #16
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
	...

08013d64 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b082      	sub	sp, #8
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013d6e:	4b0b      	ldr	r3, [pc, #44]	; (8013d9c <SD_CheckStatus+0x38>)
 8013d70:	2201      	movs	r2, #1
 8013d72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013d74:	f7ff ff7e 	bl	8013c74 <BSP_SD_GetCardState>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d107      	bne.n	8013d8e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013d7e:	4b07      	ldr	r3, [pc, #28]	; (8013d9c <SD_CheckStatus+0x38>)
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	b2db      	uxtb	r3, r3
 8013d84:	f023 0301 	bic.w	r3, r3, #1
 8013d88:	b2da      	uxtb	r2, r3
 8013d8a:	4b04      	ldr	r3, [pc, #16]	; (8013d9c <SD_CheckStatus+0x38>)
 8013d8c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013d8e:	4b03      	ldr	r3, [pc, #12]	; (8013d9c <SD_CheckStatus+0x38>)
 8013d90:	781b      	ldrb	r3, [r3, #0]
 8013d92:	b2db      	uxtb	r3, r3
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	2400000d 	.word	0x2400000d

08013da0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	4603      	mov	r3, r0
 8013da8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013daa:	f7ff ff09 	bl	8013bc0 <BSP_SD_Init>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d107      	bne.n	8013dc4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013db4:	79fb      	ldrb	r3, [r7, #7]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7ff ffd4 	bl	8013d64 <SD_CheckStatus>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	4b04      	ldr	r3, [pc, #16]	; (8013dd4 <SD_initialize+0x34>)
 8013dc2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013dc4:	4b03      	ldr	r3, [pc, #12]	; (8013dd4 <SD_initialize+0x34>)
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	b2db      	uxtb	r3, r3
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3708      	adds	r7, #8
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	2400000d 	.word	0x2400000d

08013dd8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	4603      	mov	r3, r0
 8013de0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013de2:	79fb      	ldrb	r3, [r7, #7]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff ffbd 	bl	8013d64 <SD_CheckStatus>
 8013dea:	4603      	mov	r3, r0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3708      	adds	r7, #8
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	60b9      	str	r1, [r7, #8]
 8013dfc:	607a      	str	r2, [r7, #4]
 8013dfe:	603b      	str	r3, [r7, #0]
 8013e00:	4603      	mov	r3, r0
 8013e02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013e04:	2301      	movs	r3, #1
 8013e06:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013e08:	f247 5030 	movw	r0, #30000	; 0x7530
 8013e0c:	f7ff ff8c 	bl	8013d28 <SD_CheckStatusWithTimeout>
 8013e10:	4603      	mov	r3, r0
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	da01      	bge.n	8013e1a <SD_read+0x26>
  {
    return res;
 8013e16:	7dfb      	ldrb	r3, [r7, #23]
 8013e18:	e03b      	b.n	8013e92 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013e1a:	683a      	ldr	r2, [r7, #0]
 8013e1c:	6879      	ldr	r1, [r7, #4]
 8013e1e:	68b8      	ldr	r0, [r7, #8]
 8013e20:	f7ff fef4 	bl	8013c0c <BSP_SD_ReadBlocks_DMA>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d132      	bne.n	8013e90 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013e2a:	4b1c      	ldr	r3, [pc, #112]	; (8013e9c <SD_read+0xa8>)
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013e30:	f7ef fb44 	bl	80034bc <HAL_GetTick>
 8013e34:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013e36:	bf00      	nop
 8013e38:	4b18      	ldr	r3, [pc, #96]	; (8013e9c <SD_read+0xa8>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d108      	bne.n	8013e52 <SD_read+0x5e>
 8013e40:	f7ef fb3c 	bl	80034bc <HAL_GetTick>
 8013e44:	4602      	mov	r2, r0
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	1ad3      	subs	r3, r2, r3
 8013e4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8013e4e:	4293      	cmp	r3, r2
 8013e50:	d9f2      	bls.n	8013e38 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013e52:	4b12      	ldr	r3, [pc, #72]	; (8013e9c <SD_read+0xa8>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d102      	bne.n	8013e60 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	75fb      	strb	r3, [r7, #23]
 8013e5e:	e017      	b.n	8013e90 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013e60:	4b0e      	ldr	r3, [pc, #56]	; (8013e9c <SD_read+0xa8>)
 8013e62:	2200      	movs	r2, #0
 8013e64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013e66:	f7ef fb29 	bl	80034bc <HAL_GetTick>
 8013e6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013e6c:	e007      	b.n	8013e7e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013e6e:	f7ff ff01 	bl	8013c74 <BSP_SD_GetCardState>
 8013e72:	4603      	mov	r3, r0
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d102      	bne.n	8013e7e <SD_read+0x8a>
          {
            res = RES_OK;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013e7c:	e008      	b.n	8013e90 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013e7e:	f7ef fb1d 	bl	80034bc <HAL_GetTick>
 8013e82:	4602      	mov	r2, r0
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	f247 522f 	movw	r2, #29999	; 0x752f
 8013e8c:	4293      	cmp	r3, r2
 8013e8e:	d9ee      	bls.n	8013e6e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3718      	adds	r7, #24
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	240015e0 	.word	0x240015e0

08013ea0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60b9      	str	r1, [r7, #8]
 8013ea8:	607a      	str	r2, [r7, #4]
 8013eaa:	603b      	str	r3, [r7, #0]
 8013eac:	4603      	mov	r3, r0
 8013eae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013eb4:	4b24      	ldr	r3, [pc, #144]	; (8013f48 <SD_write+0xa8>)
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013eba:	f247 5030 	movw	r0, #30000	; 0x7530
 8013ebe:	f7ff ff33 	bl	8013d28 <SD_CheckStatusWithTimeout>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	da01      	bge.n	8013ecc <SD_write+0x2c>
  {
    return res;
 8013ec8:	7dfb      	ldrb	r3, [r7, #23]
 8013eca:	e038      	b.n	8013f3e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013ecc:	683a      	ldr	r2, [r7, #0]
 8013ece:	6879      	ldr	r1, [r7, #4]
 8013ed0:	68b8      	ldr	r0, [r7, #8]
 8013ed2:	f7ff feb5 	bl	8013c40 <BSP_SD_WriteBlocks_DMA>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d12f      	bne.n	8013f3c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013edc:	f7ef faee 	bl	80034bc <HAL_GetTick>
 8013ee0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013ee2:	bf00      	nop
 8013ee4:	4b18      	ldr	r3, [pc, #96]	; (8013f48 <SD_write+0xa8>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d108      	bne.n	8013efe <SD_write+0x5e>
 8013eec:	f7ef fae6 	bl	80034bc <HAL_GetTick>
 8013ef0:	4602      	mov	r2, r0
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	f247 522f 	movw	r2, #29999	; 0x752f
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d9f2      	bls.n	8013ee4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8013efe:	4b12      	ldr	r3, [pc, #72]	; (8013f48 <SD_write+0xa8>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d102      	bne.n	8013f0c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013f06:	2301      	movs	r3, #1
 8013f08:	75fb      	strb	r3, [r7, #23]
 8013f0a:	e017      	b.n	8013f3c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013f0c:	4b0e      	ldr	r3, [pc, #56]	; (8013f48 <SD_write+0xa8>)
 8013f0e:	2200      	movs	r2, #0
 8013f10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013f12:	f7ef fad3 	bl	80034bc <HAL_GetTick>
 8013f16:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013f18:	e007      	b.n	8013f2a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013f1a:	f7ff feab 	bl	8013c74 <BSP_SD_GetCardState>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d102      	bne.n	8013f2a <SD_write+0x8a>
          {
            res = RES_OK;
 8013f24:	2300      	movs	r3, #0
 8013f26:	75fb      	strb	r3, [r7, #23]
            break;
 8013f28:	e008      	b.n	8013f3c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013f2a:	f7ef fac7 	bl	80034bc <HAL_GetTick>
 8013f2e:	4602      	mov	r2, r0
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	f247 522f 	movw	r2, #29999	; 0x752f
 8013f38:	4293      	cmp	r3, r2
 8013f3a:	d9ee      	bls.n	8013f1a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3718      	adds	r7, #24
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	240015dc 	.word	0x240015dc

08013f4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b08c      	sub	sp, #48	; 0x30
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	4603      	mov	r3, r0
 8013f54:	603a      	str	r2, [r7, #0]
 8013f56:	71fb      	strb	r3, [r7, #7]
 8013f58:	460b      	mov	r3, r1
 8013f5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013f62:	4b25      	ldr	r3, [pc, #148]	; (8013ff8 <SD_ioctl+0xac>)
 8013f64:	781b      	ldrb	r3, [r3, #0]
 8013f66:	b2db      	uxtb	r3, r3
 8013f68:	f003 0301 	and.w	r3, r3, #1
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d001      	beq.n	8013f74 <SD_ioctl+0x28>
 8013f70:	2303      	movs	r3, #3
 8013f72:	e03c      	b.n	8013fee <SD_ioctl+0xa2>

  switch (cmd)
 8013f74:	79bb      	ldrb	r3, [r7, #6]
 8013f76:	2b03      	cmp	r3, #3
 8013f78:	d834      	bhi.n	8013fe4 <SD_ioctl+0x98>
 8013f7a:	a201      	add	r2, pc, #4	; (adr r2, 8013f80 <SD_ioctl+0x34>)
 8013f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f80:	08013f91 	.word	0x08013f91
 8013f84:	08013f99 	.word	0x08013f99
 8013f88:	08013fb1 	.word	0x08013fb1
 8013f8c:	08013fcb 	.word	0x08013fcb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013f90:	2300      	movs	r3, #0
 8013f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013f96:	e028      	b.n	8013fea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013f98:	f107 0308 	add.w	r3, r7, #8
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7ff fe79 	bl	8013c94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013fa2:	6a3a      	ldr	r2, [r7, #32]
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013fae:	e01c      	b.n	8013fea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013fb0:	f107 0308 	add.w	r3, r7, #8
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7ff fe6d 	bl	8013c94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013fc8:	e00f      	b.n	8013fea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013fca:	f107 0308 	add.w	r3, r7, #8
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7ff fe60 	bl	8013c94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	0a5a      	lsrs	r2, r3, #9
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013fe2:	e002      	b.n	8013fea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013fe4:	2304      	movs	r3, #4
 8013fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3730      	adds	r7, #48	; 0x30
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	2400000d 	.word	0x2400000d

08013ffc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014000:	4b03      	ldr	r3, [pc, #12]	; (8014010 <BSP_SD_WriteCpltCallback+0x14>)
 8014002:	2201      	movs	r2, #1
 8014004:	601a      	str	r2, [r3, #0]
}
 8014006:	bf00      	nop
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr
 8014010:	240015dc 	.word	0x240015dc

08014014 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014014:	b480      	push	{r7}
 8014016:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014018:	4b03      	ldr	r3, [pc, #12]	; (8014028 <BSP_SD_ReadCpltCallback+0x14>)
 801401a:	2201      	movs	r2, #1
 801401c:	601a      	str	r2, [r3, #0]
}
 801401e:	bf00      	nop
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr
 8014028:	240015e0 	.word	0x240015e0

0801402c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b084      	sub	sp, #16
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	460b      	mov	r3, r1
 8014036:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014038:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801403c:	f002 fd00 	bl	8016a40 <USBD_static_malloc>
 8014040:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d109      	bne.n	801405c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	32b0      	adds	r2, #176	; 0xb0
 8014052:	2100      	movs	r1, #0
 8014054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014058:	2302      	movs	r3, #2
 801405a:	e0d4      	b.n	8014206 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801405c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014060:	2100      	movs	r1, #0
 8014062:	68f8      	ldr	r0, [r7, #12]
 8014064:	f002 fd50 	bl	8016b08 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	32b0      	adds	r2, #176	; 0xb0
 8014072:	68f9      	ldr	r1, [r7, #12]
 8014074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	32b0      	adds	r2, #176	; 0xb0
 8014082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	7c1b      	ldrb	r3, [r3, #16]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d138      	bne.n	8014106 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014094:	4b5e      	ldr	r3, [pc, #376]	; (8014210 <USBD_CDC_Init+0x1e4>)
 8014096:	7819      	ldrb	r1, [r3, #0]
 8014098:	f44f 7300 	mov.w	r3, #512	; 0x200
 801409c:	2202      	movs	r2, #2
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f002 fbab 	bl	80167fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80140a4:	4b5a      	ldr	r3, [pc, #360]	; (8014210 <USBD_CDC_Init+0x1e4>)
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	f003 020f 	and.w	r2, r3, #15
 80140ac:	6879      	ldr	r1, [r7, #4]
 80140ae:	4613      	mov	r3, r2
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	4413      	add	r3, r2
 80140b4:	009b      	lsls	r3, r3, #2
 80140b6:	440b      	add	r3, r1
 80140b8:	3324      	adds	r3, #36	; 0x24
 80140ba:	2201      	movs	r2, #1
 80140bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80140be:	4b55      	ldr	r3, [pc, #340]	; (8014214 <USBD_CDC_Init+0x1e8>)
 80140c0:	7819      	ldrb	r1, [r3, #0]
 80140c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80140c6:	2202      	movs	r2, #2
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f002 fb96 	bl	80167fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80140ce:	4b51      	ldr	r3, [pc, #324]	; (8014214 <USBD_CDC_Init+0x1e8>)
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	f003 020f 	and.w	r2, r3, #15
 80140d6:	6879      	ldr	r1, [r7, #4]
 80140d8:	4613      	mov	r3, r2
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	4413      	add	r3, r2
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	440b      	add	r3, r1
 80140e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80140e6:	2201      	movs	r2, #1
 80140e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80140ea:	4b4b      	ldr	r3, [pc, #300]	; (8014218 <USBD_CDC_Init+0x1ec>)
 80140ec:	781b      	ldrb	r3, [r3, #0]
 80140ee:	f003 020f 	and.w	r2, r3, #15
 80140f2:	6879      	ldr	r1, [r7, #4]
 80140f4:	4613      	mov	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	009b      	lsls	r3, r3, #2
 80140fc:	440b      	add	r3, r1
 80140fe:	3326      	adds	r3, #38	; 0x26
 8014100:	2210      	movs	r2, #16
 8014102:	801a      	strh	r2, [r3, #0]
 8014104:	e035      	b.n	8014172 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014106:	4b42      	ldr	r3, [pc, #264]	; (8014210 <USBD_CDC_Init+0x1e4>)
 8014108:	7819      	ldrb	r1, [r3, #0]
 801410a:	2340      	movs	r3, #64	; 0x40
 801410c:	2202      	movs	r2, #2
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f002 fb73 	bl	80167fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014114:	4b3e      	ldr	r3, [pc, #248]	; (8014210 <USBD_CDC_Init+0x1e4>)
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f003 020f 	and.w	r2, r3, #15
 801411c:	6879      	ldr	r1, [r7, #4]
 801411e:	4613      	mov	r3, r2
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	4413      	add	r3, r2
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	440b      	add	r3, r1
 8014128:	3324      	adds	r3, #36	; 0x24
 801412a:	2201      	movs	r2, #1
 801412c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801412e:	4b39      	ldr	r3, [pc, #228]	; (8014214 <USBD_CDC_Init+0x1e8>)
 8014130:	7819      	ldrb	r1, [r3, #0]
 8014132:	2340      	movs	r3, #64	; 0x40
 8014134:	2202      	movs	r2, #2
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f002 fb5f 	bl	80167fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801413c:	4b35      	ldr	r3, [pc, #212]	; (8014214 <USBD_CDC_Init+0x1e8>)
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	f003 020f 	and.w	r2, r3, #15
 8014144:	6879      	ldr	r1, [r7, #4]
 8014146:	4613      	mov	r3, r2
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	4413      	add	r3, r2
 801414c:	009b      	lsls	r3, r3, #2
 801414e:	440b      	add	r3, r1
 8014150:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014154:	2201      	movs	r2, #1
 8014156:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014158:	4b2f      	ldr	r3, [pc, #188]	; (8014218 <USBD_CDC_Init+0x1ec>)
 801415a:	781b      	ldrb	r3, [r3, #0]
 801415c:	f003 020f 	and.w	r2, r3, #15
 8014160:	6879      	ldr	r1, [r7, #4]
 8014162:	4613      	mov	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	4413      	add	r3, r2
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	440b      	add	r3, r1
 801416c:	3326      	adds	r3, #38	; 0x26
 801416e:	2210      	movs	r2, #16
 8014170:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014172:	4b29      	ldr	r3, [pc, #164]	; (8014218 <USBD_CDC_Init+0x1ec>)
 8014174:	7819      	ldrb	r1, [r3, #0]
 8014176:	2308      	movs	r3, #8
 8014178:	2203      	movs	r2, #3
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f002 fb3d 	bl	80167fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014180:	4b25      	ldr	r3, [pc, #148]	; (8014218 <USBD_CDC_Init+0x1ec>)
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	f003 020f 	and.w	r2, r3, #15
 8014188:	6879      	ldr	r1, [r7, #4]
 801418a:	4613      	mov	r3, r2
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	4413      	add	r3, r2
 8014190:	009b      	lsls	r3, r3, #2
 8014192:	440b      	add	r3, r1
 8014194:	3324      	adds	r3, #36	; 0x24
 8014196:	2201      	movs	r2, #1
 8014198:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2200      	movs	r2, #0
 801419e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80141a8:	687a      	ldr	r2, [r7, #4]
 80141aa:	33b0      	adds	r3, #176	; 0xb0
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	4413      	add	r3, r2
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2200      	movs	r2, #0
 80141ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2200      	movs	r2, #0
 80141c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d101      	bne.n	80141d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80141d0:	2302      	movs	r3, #2
 80141d2:	e018      	b.n	8014206 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	7c1b      	ldrb	r3, [r3, #16]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d10a      	bne.n	80141f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80141dc:	4b0d      	ldr	r3, [pc, #52]	; (8014214 <USBD_CDC_Init+0x1e8>)
 80141de:	7819      	ldrb	r1, [r3, #0]
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80141e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f002 fbf4 	bl	80169d8 <USBD_LL_PrepareReceive>
 80141f0:	e008      	b.n	8014204 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80141f2:	4b08      	ldr	r3, [pc, #32]	; (8014214 <USBD_CDC_Init+0x1e8>)
 80141f4:	7819      	ldrb	r1, [r3, #0]
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80141fc:	2340      	movs	r3, #64	; 0x40
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f002 fbea 	bl	80169d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	24000097 	.word	0x24000097
 8014214:	24000098 	.word	0x24000098
 8014218:	24000099 	.word	0x24000099

0801421c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	460b      	mov	r3, r1
 8014226:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014228:	4b3a      	ldr	r3, [pc, #232]	; (8014314 <USBD_CDC_DeInit+0xf8>)
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	4619      	mov	r1, r3
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f002 fb09 	bl	8016846 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014234:	4b37      	ldr	r3, [pc, #220]	; (8014314 <USBD_CDC_DeInit+0xf8>)
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	f003 020f 	and.w	r2, r3, #15
 801423c:	6879      	ldr	r1, [r7, #4]
 801423e:	4613      	mov	r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	4413      	add	r3, r2
 8014244:	009b      	lsls	r3, r3, #2
 8014246:	440b      	add	r3, r1
 8014248:	3324      	adds	r3, #36	; 0x24
 801424a:	2200      	movs	r2, #0
 801424c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801424e:	4b32      	ldr	r3, [pc, #200]	; (8014318 <USBD_CDC_DeInit+0xfc>)
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	4619      	mov	r1, r3
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f002 faf6 	bl	8016846 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801425a:	4b2f      	ldr	r3, [pc, #188]	; (8014318 <USBD_CDC_DeInit+0xfc>)
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	f003 020f 	and.w	r2, r3, #15
 8014262:	6879      	ldr	r1, [r7, #4]
 8014264:	4613      	mov	r3, r2
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	4413      	add	r3, r2
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	440b      	add	r3, r1
 801426e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014272:	2200      	movs	r2, #0
 8014274:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014276:	4b29      	ldr	r3, [pc, #164]	; (801431c <USBD_CDC_DeInit+0x100>)
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f002 fae2 	bl	8016846 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014282:	4b26      	ldr	r3, [pc, #152]	; (801431c <USBD_CDC_DeInit+0x100>)
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	f003 020f 	and.w	r2, r3, #15
 801428a:	6879      	ldr	r1, [r7, #4]
 801428c:	4613      	mov	r3, r2
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	4413      	add	r3, r2
 8014292:	009b      	lsls	r3, r3, #2
 8014294:	440b      	add	r3, r1
 8014296:	3324      	adds	r3, #36	; 0x24
 8014298:	2200      	movs	r2, #0
 801429a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801429c:	4b1f      	ldr	r3, [pc, #124]	; (801431c <USBD_CDC_DeInit+0x100>)
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	f003 020f 	and.w	r2, r3, #15
 80142a4:	6879      	ldr	r1, [r7, #4]
 80142a6:	4613      	mov	r3, r2
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	4413      	add	r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	440b      	add	r3, r1
 80142b0:	3326      	adds	r3, #38	; 0x26
 80142b2:	2200      	movs	r2, #0
 80142b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	32b0      	adds	r2, #176	; 0xb0
 80142c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d01f      	beq.n	8014308 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	33b0      	adds	r3, #176	; 0xb0
 80142d2:	009b      	lsls	r3, r3, #2
 80142d4:	4413      	add	r3, r2
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	32b0      	adds	r2, #176	; 0xb0
 80142e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142ea:	4618      	mov	r0, r3
 80142ec:	f002 fbb6 	bl	8016a5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	32b0      	adds	r2, #176	; 0xb0
 80142fa:	2100      	movs	r1, #0
 80142fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014308:	2300      	movs	r3, #0
}
 801430a:	4618      	mov	r0, r3
 801430c:	3708      	adds	r7, #8
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	24000097 	.word	0x24000097
 8014318:	24000098 	.word	0x24000098
 801431c:	24000099 	.word	0x24000099

08014320 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b086      	sub	sp, #24
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	32b0      	adds	r2, #176	; 0xb0
 8014334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014338:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801433a:	2300      	movs	r3, #0
 801433c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801433e:	2300      	movs	r3, #0
 8014340:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014342:	2300      	movs	r3, #0
 8014344:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d101      	bne.n	8014350 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801434c:	2303      	movs	r3, #3
 801434e:	e0bf      	b.n	80144d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014358:	2b00      	cmp	r3, #0
 801435a:	d050      	beq.n	80143fe <USBD_CDC_Setup+0xde>
 801435c:	2b20      	cmp	r3, #32
 801435e:	f040 80af 	bne.w	80144c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	88db      	ldrh	r3, [r3, #6]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d03a      	beq.n	80143e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	b25b      	sxtb	r3, r3
 8014370:	2b00      	cmp	r3, #0
 8014372:	da1b      	bge.n	80143ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801437a:	687a      	ldr	r2, [r7, #4]
 801437c:	33b0      	adds	r3, #176	; 0xb0
 801437e:	009b      	lsls	r3, r3, #2
 8014380:	4413      	add	r3, r2
 8014382:	685b      	ldr	r3, [r3, #4]
 8014384:	689b      	ldr	r3, [r3, #8]
 8014386:	683a      	ldr	r2, [r7, #0]
 8014388:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801438a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801438c:	683a      	ldr	r2, [r7, #0]
 801438e:	88d2      	ldrh	r2, [r2, #6]
 8014390:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	88db      	ldrh	r3, [r3, #6]
 8014396:	2b07      	cmp	r3, #7
 8014398:	bf28      	it	cs
 801439a:	2307      	movcs	r3, #7
 801439c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801439e:	693b      	ldr	r3, [r7, #16]
 80143a0:	89fa      	ldrh	r2, [r7, #14]
 80143a2:	4619      	mov	r1, r3
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f001 fd89 	bl	8015ebc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80143aa:	e090      	b.n	80144ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	785a      	ldrb	r2, [r3, #1]
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	88db      	ldrh	r3, [r3, #6]
 80143ba:	2b3f      	cmp	r3, #63	; 0x3f
 80143bc:	d803      	bhi.n	80143c6 <USBD_CDC_Setup+0xa6>
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	88db      	ldrh	r3, [r3, #6]
 80143c2:	b2da      	uxtb	r2, r3
 80143c4:	e000      	b.n	80143c8 <USBD_CDC_Setup+0xa8>
 80143c6:	2240      	movs	r2, #64	; 0x40
 80143c8:	693b      	ldr	r3, [r7, #16]
 80143ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80143ce:	6939      	ldr	r1, [r7, #16]
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80143d6:	461a      	mov	r2, r3
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f001 fd9b 	bl	8015f14 <USBD_CtlPrepareRx>
      break;
 80143de:	e076      	b.n	80144ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	33b0      	adds	r3, #176	; 0xb0
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	4413      	add	r3, r2
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	689b      	ldr	r3, [r3, #8]
 80143f2:	683a      	ldr	r2, [r7, #0]
 80143f4:	7850      	ldrb	r0, [r2, #1]
 80143f6:	2200      	movs	r2, #0
 80143f8:	6839      	ldr	r1, [r7, #0]
 80143fa:	4798      	blx	r3
      break;
 80143fc:	e067      	b.n	80144ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	785b      	ldrb	r3, [r3, #1]
 8014402:	2b0b      	cmp	r3, #11
 8014404:	d851      	bhi.n	80144aa <USBD_CDC_Setup+0x18a>
 8014406:	a201      	add	r2, pc, #4	; (adr r2, 801440c <USBD_CDC_Setup+0xec>)
 8014408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801440c:	0801443d 	.word	0x0801443d
 8014410:	080144b9 	.word	0x080144b9
 8014414:	080144ab 	.word	0x080144ab
 8014418:	080144ab 	.word	0x080144ab
 801441c:	080144ab 	.word	0x080144ab
 8014420:	080144ab 	.word	0x080144ab
 8014424:	080144ab 	.word	0x080144ab
 8014428:	080144ab 	.word	0x080144ab
 801442c:	080144ab 	.word	0x080144ab
 8014430:	080144ab 	.word	0x080144ab
 8014434:	08014467 	.word	0x08014467
 8014438:	08014491 	.word	0x08014491
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014442:	b2db      	uxtb	r3, r3
 8014444:	2b03      	cmp	r3, #3
 8014446:	d107      	bne.n	8014458 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014448:	f107 030a 	add.w	r3, r7, #10
 801444c:	2202      	movs	r2, #2
 801444e:	4619      	mov	r1, r3
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f001 fd33 	bl	8015ebc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014456:	e032      	b.n	80144be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014458:	6839      	ldr	r1, [r7, #0]
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f001 fcbd 	bl	8015dda <USBD_CtlError>
            ret = USBD_FAIL;
 8014460:	2303      	movs	r3, #3
 8014462:	75fb      	strb	r3, [r7, #23]
          break;
 8014464:	e02b      	b.n	80144be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801446c:	b2db      	uxtb	r3, r3
 801446e:	2b03      	cmp	r3, #3
 8014470:	d107      	bne.n	8014482 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014472:	f107 030d 	add.w	r3, r7, #13
 8014476:	2201      	movs	r2, #1
 8014478:	4619      	mov	r1, r3
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f001 fd1e 	bl	8015ebc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014480:	e01d      	b.n	80144be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014482:	6839      	ldr	r1, [r7, #0]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f001 fca8 	bl	8015dda <USBD_CtlError>
            ret = USBD_FAIL;
 801448a:	2303      	movs	r3, #3
 801448c:	75fb      	strb	r3, [r7, #23]
          break;
 801448e:	e016      	b.n	80144be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014496:	b2db      	uxtb	r3, r3
 8014498:	2b03      	cmp	r3, #3
 801449a:	d00f      	beq.n	80144bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801449c:	6839      	ldr	r1, [r7, #0]
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f001 fc9b 	bl	8015dda <USBD_CtlError>
            ret = USBD_FAIL;
 80144a4:	2303      	movs	r3, #3
 80144a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80144a8:	e008      	b.n	80144bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80144aa:	6839      	ldr	r1, [r7, #0]
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f001 fc94 	bl	8015dda <USBD_CtlError>
          ret = USBD_FAIL;
 80144b2:	2303      	movs	r3, #3
 80144b4:	75fb      	strb	r3, [r7, #23]
          break;
 80144b6:	e002      	b.n	80144be <USBD_CDC_Setup+0x19e>
          break;
 80144b8:	bf00      	nop
 80144ba:	e008      	b.n	80144ce <USBD_CDC_Setup+0x1ae>
          break;
 80144bc:	bf00      	nop
      }
      break;
 80144be:	e006      	b.n	80144ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80144c0:	6839      	ldr	r1, [r7, #0]
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f001 fc89 	bl	8015dda <USBD_CtlError>
      ret = USBD_FAIL;
 80144c8:	2303      	movs	r3, #3
 80144ca:	75fb      	strb	r3, [r7, #23]
      break;
 80144cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80144ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3718      	adds	r7, #24
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	460b      	mov	r3, r1
 80144e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80144ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	32b0      	adds	r2, #176	; 0xb0
 80144f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d101      	bne.n	8014502 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80144fe:	2303      	movs	r3, #3
 8014500:	e065      	b.n	80145ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	32b0      	adds	r2, #176	; 0xb0
 801450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014510:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014512:	78fb      	ldrb	r3, [r7, #3]
 8014514:	f003 020f 	and.w	r2, r3, #15
 8014518:	6879      	ldr	r1, [r7, #4]
 801451a:	4613      	mov	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	4413      	add	r3, r2
 8014520:	009b      	lsls	r3, r3, #2
 8014522:	440b      	add	r3, r1
 8014524:	3318      	adds	r3, #24
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d02f      	beq.n	801458c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801452c:	78fb      	ldrb	r3, [r7, #3]
 801452e:	f003 020f 	and.w	r2, r3, #15
 8014532:	6879      	ldr	r1, [r7, #4]
 8014534:	4613      	mov	r3, r2
 8014536:	009b      	lsls	r3, r3, #2
 8014538:	4413      	add	r3, r2
 801453a:	009b      	lsls	r3, r3, #2
 801453c:	440b      	add	r3, r1
 801453e:	3318      	adds	r3, #24
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	78fb      	ldrb	r3, [r7, #3]
 8014544:	f003 010f 	and.w	r1, r3, #15
 8014548:	68f8      	ldr	r0, [r7, #12]
 801454a:	460b      	mov	r3, r1
 801454c:	00db      	lsls	r3, r3, #3
 801454e:	440b      	add	r3, r1
 8014550:	009b      	lsls	r3, r3, #2
 8014552:	4403      	add	r3, r0
 8014554:	3344      	adds	r3, #68	; 0x44
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	fbb2 f1f3 	udiv	r1, r2, r3
 801455c:	fb01 f303 	mul.w	r3, r1, r3
 8014560:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014562:	2b00      	cmp	r3, #0
 8014564:	d112      	bne.n	801458c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014566:	78fb      	ldrb	r3, [r7, #3]
 8014568:	f003 020f 	and.w	r2, r3, #15
 801456c:	6879      	ldr	r1, [r7, #4]
 801456e:	4613      	mov	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	4413      	add	r3, r2
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	440b      	add	r3, r1
 8014578:	3318      	adds	r3, #24
 801457a:	2200      	movs	r2, #0
 801457c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801457e:	78f9      	ldrb	r1, [r7, #3]
 8014580:	2300      	movs	r3, #0
 8014582:	2200      	movs	r2, #0
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f002 fa06 	bl	8016996 <USBD_LL_Transmit>
 801458a:	e01f      	b.n	80145cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	2200      	movs	r2, #0
 8014590:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	33b0      	adds	r3, #176	; 0xb0
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	4413      	add	r3, r2
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	691b      	ldr	r3, [r3, #16]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d010      	beq.n	80145cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145b0:	687a      	ldr	r2, [r7, #4]
 80145b2:	33b0      	adds	r3, #176	; 0xb0
 80145b4:	009b      	lsls	r3, r3, #2
 80145b6:	4413      	add	r3, r2
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	691b      	ldr	r3, [r3, #16]
 80145bc:	68ba      	ldr	r2, [r7, #8]
 80145be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80145c2:	68ba      	ldr	r2, [r7, #8]
 80145c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80145c8:	78fa      	ldrb	r2, [r7, #3]
 80145ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80145cc:	2300      	movs	r3, #0
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3710      	adds	r7, #16
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}

080145d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80145d6:	b580      	push	{r7, lr}
 80145d8:	b084      	sub	sp, #16
 80145da:	af00      	add	r7, sp, #0
 80145dc:	6078      	str	r0, [r7, #4]
 80145de:	460b      	mov	r3, r1
 80145e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	32b0      	adds	r2, #176	; 0xb0
 80145ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	32b0      	adds	r2, #176	; 0xb0
 80145fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d101      	bne.n	8014608 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014604:	2303      	movs	r3, #3
 8014606:	e01a      	b.n	801463e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014608:	78fb      	ldrb	r3, [r7, #3]
 801460a:	4619      	mov	r1, r3
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f002 fa04 	bl	8016a1a <USBD_LL_GetRxDataSize>
 8014612:	4602      	mov	r2, r0
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	33b0      	adds	r3, #176	; 0xb0
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	4413      	add	r3, r2
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	68fa      	ldr	r2, [r7, #12]
 801462e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014632:	68fa      	ldr	r2, [r7, #12]
 8014634:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014638:	4611      	mov	r1, r2
 801463a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801463c:	2300      	movs	r3, #0
}
 801463e:	4618      	mov	r0, r3
 8014640:	3710      	adds	r7, #16
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}

08014646 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014646:	b580      	push	{r7, lr}
 8014648:	b084      	sub	sp, #16
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	32b0      	adds	r2, #176	; 0xb0
 8014658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801465c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d101      	bne.n	8014668 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014664:	2303      	movs	r3, #3
 8014666:	e025      	b.n	80146b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	33b0      	adds	r3, #176	; 0xb0
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d01a      	beq.n	80146b2 <USBD_CDC_EP0_RxReady+0x6c>
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014682:	2bff      	cmp	r3, #255	; 0xff
 8014684:	d015      	beq.n	80146b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	33b0      	adds	r3, #176	; 0xb0
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	4413      	add	r3, r2
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	689b      	ldr	r3, [r3, #8]
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801469e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80146a0:	68fa      	ldr	r2, [r7, #12]
 80146a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80146a6:	b292      	uxth	r2, r2
 80146a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	22ff      	movs	r2, #255	; 0xff
 80146ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80146b2:	2300      	movs	r3, #0
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3710      	adds	r7, #16
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}

080146bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b086      	sub	sp, #24
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80146c4:	2182      	movs	r1, #130	; 0x82
 80146c6:	4818      	ldr	r0, [pc, #96]	; (8014728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80146c8:	f000 fd4f 	bl	801516a <USBD_GetEpDesc>
 80146cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80146ce:	2101      	movs	r1, #1
 80146d0:	4815      	ldr	r0, [pc, #84]	; (8014728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80146d2:	f000 fd4a 	bl	801516a <USBD_GetEpDesc>
 80146d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80146d8:	2181      	movs	r1, #129	; 0x81
 80146da:	4813      	ldr	r0, [pc, #76]	; (8014728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80146dc:	f000 fd45 	bl	801516a <USBD_GetEpDesc>
 80146e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d002      	beq.n	80146ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	2210      	movs	r2, #16
 80146ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d006      	beq.n	8014702 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	2200      	movs	r2, #0
 80146f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80146fc:	711a      	strb	r2, [r3, #4]
 80146fe:	2200      	movs	r2, #0
 8014700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d006      	beq.n	8014716 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2200      	movs	r2, #0
 801470c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014710:	711a      	strb	r2, [r3, #4]
 8014712:	2200      	movs	r2, #0
 8014714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2243      	movs	r2, #67	; 0x43
 801471a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801471c:	4b02      	ldr	r3, [pc, #8]	; (8014728 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801471e:	4618      	mov	r0, r3
 8014720:	3718      	adds	r7, #24
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	24000054 	.word	0x24000054

0801472c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014734:	2182      	movs	r1, #130	; 0x82
 8014736:	4818      	ldr	r0, [pc, #96]	; (8014798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014738:	f000 fd17 	bl	801516a <USBD_GetEpDesc>
 801473c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801473e:	2101      	movs	r1, #1
 8014740:	4815      	ldr	r0, [pc, #84]	; (8014798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014742:	f000 fd12 	bl	801516a <USBD_GetEpDesc>
 8014746:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014748:	2181      	movs	r1, #129	; 0x81
 801474a:	4813      	ldr	r0, [pc, #76]	; (8014798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801474c:	f000 fd0d 	bl	801516a <USBD_GetEpDesc>
 8014750:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d002      	beq.n	801475e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	2210      	movs	r2, #16
 801475c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d006      	beq.n	8014772 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	2200      	movs	r2, #0
 8014768:	711a      	strb	r2, [r3, #4]
 801476a:	2200      	movs	r2, #0
 801476c:	f042 0202 	orr.w	r2, r2, #2
 8014770:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d006      	beq.n	8014786 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2200      	movs	r2, #0
 801477c:	711a      	strb	r2, [r3, #4]
 801477e:	2200      	movs	r2, #0
 8014780:	f042 0202 	orr.w	r2, r2, #2
 8014784:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2243      	movs	r2, #67	; 0x43
 801478a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801478c:	4b02      	ldr	r3, [pc, #8]	; (8014798 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801478e:	4618      	mov	r0, r3
 8014790:	3718      	adds	r7, #24
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
 8014796:	bf00      	nop
 8014798:	24000054 	.word	0x24000054

0801479c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b086      	sub	sp, #24
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80147a4:	2182      	movs	r1, #130	; 0x82
 80147a6:	4818      	ldr	r0, [pc, #96]	; (8014808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147a8:	f000 fcdf 	bl	801516a <USBD_GetEpDesc>
 80147ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80147ae:	2101      	movs	r1, #1
 80147b0:	4815      	ldr	r0, [pc, #84]	; (8014808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147b2:	f000 fcda 	bl	801516a <USBD_GetEpDesc>
 80147b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80147b8:	2181      	movs	r1, #129	; 0x81
 80147ba:	4813      	ldr	r0, [pc, #76]	; (8014808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147bc:	f000 fcd5 	bl	801516a <USBD_GetEpDesc>
 80147c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d002      	beq.n	80147ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	2210      	movs	r2, #16
 80147cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d006      	beq.n	80147e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	2200      	movs	r2, #0
 80147d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80147dc:	711a      	strb	r2, [r3, #4]
 80147de:	2200      	movs	r2, #0
 80147e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d006      	beq.n	80147f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2200      	movs	r2, #0
 80147ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80147f0:	711a      	strb	r2, [r3, #4]
 80147f2:	2200      	movs	r2, #0
 80147f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2243      	movs	r2, #67	; 0x43
 80147fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80147fc:	4b02      	ldr	r3, [pc, #8]	; (8014808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3718      	adds	r7, #24
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	24000054 	.word	0x24000054

0801480c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801480c:	b480      	push	{r7}
 801480e:	b083      	sub	sp, #12
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	220a      	movs	r2, #10
 8014818:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801481a:	4b03      	ldr	r3, [pc, #12]	; (8014828 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801481c:	4618      	mov	r0, r3
 801481e:	370c      	adds	r7, #12
 8014820:	46bd      	mov	sp, r7
 8014822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014826:	4770      	bx	lr
 8014828:	24000010 	.word	0x24000010

0801482c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801482c:	b480      	push	{r7}
 801482e:	b083      	sub	sp, #12
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d101      	bne.n	8014840 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801483c:	2303      	movs	r3, #3
 801483e:	e009      	b.n	8014854 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	33b0      	adds	r3, #176	; 0xb0
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	4413      	add	r3, r2
 801484e:	683a      	ldr	r2, [r7, #0]
 8014850:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014852:	2300      	movs	r3, #0
}
 8014854:	4618      	mov	r0, r3
 8014856:	370c      	adds	r7, #12
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr

08014860 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014860:	b480      	push	{r7}
 8014862:	b087      	sub	sp, #28
 8014864:	af00      	add	r7, sp, #0
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	32b0      	adds	r2, #176	; 0xb0
 8014876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801487a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d101      	bne.n	8014886 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014882:	2303      	movs	r3, #3
 8014884:	e008      	b.n	8014898 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	68ba      	ldr	r2, [r7, #8]
 801488a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014896:	2300      	movs	r3, #0
}
 8014898:	4618      	mov	r0, r3
 801489a:	371c      	adds	r7, #28
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr

080148a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80148a4:	b480      	push	{r7}
 80148a6:	b085      	sub	sp, #20
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	32b0      	adds	r2, #176	; 0xb0
 80148b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d101      	bne.n	80148c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80148c4:	2303      	movs	r3, #3
 80148c6:	e004      	b.n	80148d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	683a      	ldr	r2, [r7, #0]
 80148cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80148d0:	2300      	movs	r3, #0
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3714      	adds	r7, #20
 80148d6:	46bd      	mov	sp, r7
 80148d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148dc:	4770      	bx	lr
	...

080148e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	32b0      	adds	r2, #176	; 0xb0
 80148f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80148f8:	2301      	movs	r3, #1
 80148fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d101      	bne.n	8014906 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014902:	2303      	movs	r3, #3
 8014904:	e025      	b.n	8014952 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801490c:	2b00      	cmp	r3, #0
 801490e:	d11f      	bne.n	8014950 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	2201      	movs	r2, #1
 8014914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014918:	4b10      	ldr	r3, [pc, #64]	; (801495c <USBD_CDC_TransmitPacket+0x7c>)
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	f003 020f 	and.w	r2, r3, #15
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	4613      	mov	r3, r2
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	4413      	add	r3, r2
 801492e:	009b      	lsls	r3, r3, #2
 8014930:	4403      	add	r3, r0
 8014932:	3318      	adds	r3, #24
 8014934:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014936:	4b09      	ldr	r3, [pc, #36]	; (801495c <USBD_CDC_TransmitPacket+0x7c>)
 8014938:	7819      	ldrb	r1, [r3, #0]
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f002 f825 	bl	8016996 <USBD_LL_Transmit>

    ret = USBD_OK;
 801494c:	2300      	movs	r3, #0
 801494e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014950:	7bfb      	ldrb	r3, [r7, #15]
}
 8014952:	4618      	mov	r0, r3
 8014954:	3710      	adds	r7, #16
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}
 801495a:	bf00      	nop
 801495c:	24000097 	.word	0x24000097

08014960 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	32b0      	adds	r2, #176	; 0xb0
 8014972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014976:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	32b0      	adds	r2, #176	; 0xb0
 8014982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d101      	bne.n	801498e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801498a:	2303      	movs	r3, #3
 801498c:	e018      	b.n	80149c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	7c1b      	ldrb	r3, [r3, #16]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d10a      	bne.n	80149ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014996:	4b0c      	ldr	r3, [pc, #48]	; (80149c8 <USBD_CDC_ReceivePacket+0x68>)
 8014998:	7819      	ldrb	r1, [r3, #0]
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80149a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f002 f817 	bl	80169d8 <USBD_LL_PrepareReceive>
 80149aa:	e008      	b.n	80149be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149ac:	4b06      	ldr	r3, [pc, #24]	; (80149c8 <USBD_CDC_ReceivePacket+0x68>)
 80149ae:	7819      	ldrb	r1, [r3, #0]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80149b6:	2340      	movs	r3, #64	; 0x40
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f002 f80d 	bl	80169d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80149be:	2300      	movs	r3, #0
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3710      	adds	r7, #16
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}
 80149c8:	24000098 	.word	0x24000098

080149cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b086      	sub	sp, #24
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	4613      	mov	r3, r2
 80149d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d101      	bne.n	80149e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80149e0:	2303      	movs	r3, #3
 80149e2:	e01f      	b.n	8014a24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	2200      	movs	r2, #0
 80149e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2200      	movs	r2, #0
 80149f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	2200      	movs	r2, #0
 80149f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d003      	beq.n	8014a0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	79fa      	ldrb	r2, [r7, #7]
 8014a16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f001 fe81 	bl	8016720 <USBD_LL_Init>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3718      	adds	r7, #24
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}

08014a2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a36:	2300      	movs	r3, #0
 8014a38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d101      	bne.n	8014a44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014a40:	2303      	movs	r3, #3
 8014a42:	e025      	b.n	8014a90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	683a      	ldr	r2, [r7, #0]
 8014a48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	32ae      	adds	r2, #174	; 0xae
 8014a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00f      	beq.n	8014a80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	32ae      	adds	r2, #174	; 0xae
 8014a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a70:	f107 020e 	add.w	r2, r7, #14
 8014a74:	4610      	mov	r0, r2
 8014a76:	4798      	blx	r3
 8014a78:	4602      	mov	r2, r0
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a86:	1c5a      	adds	r2, r3, #1
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014a8e:	2300      	movs	r3, #0
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3710      	adds	r7, #16
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f001 fe8f 	bl	80167c4 <USBD_LL_Start>
 8014aa6:	4603      	mov	r3, r0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b083      	sub	sp, #12
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ab8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	370c      	adds	r7, #12
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr

08014ac6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ac6:	b580      	push	{r7, lr}
 8014ac8:	b084      	sub	sp, #16
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
 8014ace:	460b      	mov	r3, r1
 8014ad0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d009      	beq.n	8014af4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	78fa      	ldrb	r2, [r7, #3]
 8014aea:	4611      	mov	r1, r2
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	4798      	blx	r3
 8014af0:	4603      	mov	r3, r0
 8014af2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}

08014afe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014afe:	b580      	push	{r7, lr}
 8014b00:	b084      	sub	sp, #16
 8014b02:	af00      	add	r7, sp, #0
 8014b04:	6078      	str	r0, [r7, #4]
 8014b06:	460b      	mov	r3, r1
 8014b08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	78fa      	ldrb	r2, [r7, #3]
 8014b18:	4611      	mov	r1, r2
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	4798      	blx	r3
 8014b1e:	4603      	mov	r3, r0
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d001      	beq.n	8014b28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014b24:	2303      	movs	r3, #3
 8014b26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b084      	sub	sp, #16
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
 8014b3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014b42:	6839      	ldr	r1, [r7, #0]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f001 f90e 	bl	8015d66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014b58:	461a      	mov	r2, r3
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014b66:	f003 031f 	and.w	r3, r3, #31
 8014b6a:	2b02      	cmp	r3, #2
 8014b6c:	d01a      	beq.n	8014ba4 <USBD_LL_SetupStage+0x72>
 8014b6e:	2b02      	cmp	r3, #2
 8014b70:	d822      	bhi.n	8014bb8 <USBD_LL_SetupStage+0x86>
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d002      	beq.n	8014b7c <USBD_LL_SetupStage+0x4a>
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	d00a      	beq.n	8014b90 <USBD_LL_SetupStage+0x5e>
 8014b7a:	e01d      	b.n	8014bb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014b82:	4619      	mov	r1, r3
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f000 fb65 	bl	8015254 <USBD_StdDevReq>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8014b8e:	e020      	b.n	8014bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014b96:	4619      	mov	r1, r3
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f000 fbcd 	bl	8015338 <USBD_StdItfReq>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8014ba2:	e016      	b.n	8014bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014baa:	4619      	mov	r1, r3
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f000 fc2f 	bl	8015410 <USBD_StdEPReq>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8014bb6:	e00c      	b.n	8014bd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014bbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f001 fe5c 	bl	8016884 <USBD_LL_StallEP>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	73fb      	strb	r3, [r7, #15]
      break;
 8014bd0:	bf00      	nop
  }

  return ret;
 8014bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3710      	adds	r7, #16
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b086      	sub	sp, #24
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	460b      	mov	r3, r1
 8014be6:	607a      	str	r2, [r7, #4]
 8014be8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014bea:	2300      	movs	r3, #0
 8014bec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014bee:	7afb      	ldrb	r3, [r7, #11]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d16e      	bne.n	8014cd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014bfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014c02:	2b03      	cmp	r3, #3
 8014c04:	f040 8098 	bne.w	8014d38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	689a      	ldr	r2, [r3, #8]
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	68db      	ldr	r3, [r3, #12]
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d913      	bls.n	8014c3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014c14:	693b      	ldr	r3, [r7, #16]
 8014c16:	689a      	ldr	r2, [r3, #8]
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	1ad2      	subs	r2, r2, r3
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	68da      	ldr	r2, [r3, #12]
 8014c26:	693b      	ldr	r3, [r7, #16]
 8014c28:	689b      	ldr	r3, [r3, #8]
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	bf28      	it	cs
 8014c2e:	4613      	movcs	r3, r2
 8014c30:	461a      	mov	r2, r3
 8014c32:	6879      	ldr	r1, [r7, #4]
 8014c34:	68f8      	ldr	r0, [r7, #12]
 8014c36:	f001 f98a 	bl	8015f4e <USBD_CtlContinueRx>
 8014c3a:	e07d      	b.n	8014d38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014c42:	f003 031f 	and.w	r3, r3, #31
 8014c46:	2b02      	cmp	r3, #2
 8014c48:	d014      	beq.n	8014c74 <USBD_LL_DataOutStage+0x98>
 8014c4a:	2b02      	cmp	r3, #2
 8014c4c:	d81d      	bhi.n	8014c8a <USBD_LL_DataOutStage+0xae>
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d002      	beq.n	8014c58 <USBD_LL_DataOutStage+0x7c>
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d003      	beq.n	8014c5e <USBD_LL_DataOutStage+0x82>
 8014c56:	e018      	b.n	8014c8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	75bb      	strb	r3, [r7, #22]
            break;
 8014c5c:	e018      	b.n	8014c90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014c64:	b2db      	uxtb	r3, r3
 8014c66:	4619      	mov	r1, r3
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f000 fa64 	bl	8015136 <USBD_CoreFindIF>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	75bb      	strb	r3, [r7, #22]
            break;
 8014c72:	e00d      	b.n	8014c90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014c7a:	b2db      	uxtb	r3, r3
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	68f8      	ldr	r0, [r7, #12]
 8014c80:	f000 fa66 	bl	8015150 <USBD_CoreFindEP>
 8014c84:	4603      	mov	r3, r0
 8014c86:	75bb      	strb	r3, [r7, #22]
            break;
 8014c88:	e002      	b.n	8014c90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	75bb      	strb	r3, [r7, #22]
            break;
 8014c8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014c90:	7dbb      	ldrb	r3, [r7, #22]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d119      	bne.n	8014cca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	2b03      	cmp	r3, #3
 8014ca0:	d113      	bne.n	8014cca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014ca2:	7dba      	ldrb	r2, [r7, #22]
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	32ae      	adds	r2, #174	; 0xae
 8014ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cac:	691b      	ldr	r3, [r3, #16]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d00b      	beq.n	8014cca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014cb2:	7dba      	ldrb	r2, [r7, #22]
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014cba:	7dba      	ldrb	r2, [r7, #22]
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	32ae      	adds	r2, #174	; 0xae
 8014cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cc4:	691b      	ldr	r3, [r3, #16]
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014cca:	68f8      	ldr	r0, [r7, #12]
 8014ccc:	f001 f950 	bl	8015f70 <USBD_CtlSendStatus>
 8014cd0:	e032      	b.n	8014d38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014cd2:	7afb      	ldrb	r3, [r7, #11]
 8014cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cd8:	b2db      	uxtb	r3, r3
 8014cda:	4619      	mov	r1, r3
 8014cdc:	68f8      	ldr	r0, [r7, #12]
 8014cde:	f000 fa37 	bl	8015150 <USBD_CoreFindEP>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014ce6:	7dbb      	ldrb	r3, [r7, #22]
 8014ce8:	2bff      	cmp	r3, #255	; 0xff
 8014cea:	d025      	beq.n	8014d38 <USBD_LL_DataOutStage+0x15c>
 8014cec:	7dbb      	ldrb	r3, [r7, #22]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d122      	bne.n	8014d38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	2b03      	cmp	r3, #3
 8014cfc:	d117      	bne.n	8014d2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014cfe:	7dba      	ldrb	r2, [r7, #22]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	32ae      	adds	r2, #174	; 0xae
 8014d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d08:	699b      	ldr	r3, [r3, #24]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d00f      	beq.n	8014d2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014d0e:	7dba      	ldrb	r2, [r7, #22]
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014d16:	7dba      	ldrb	r2, [r7, #22]
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	32ae      	adds	r2, #174	; 0xae
 8014d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d20:	699b      	ldr	r3, [r3, #24]
 8014d22:	7afa      	ldrb	r2, [r7, #11]
 8014d24:	4611      	mov	r1, r2
 8014d26:	68f8      	ldr	r0, [r7, #12]
 8014d28:	4798      	blx	r3
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014d2e:	7dfb      	ldrb	r3, [r7, #23]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d001      	beq.n	8014d38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014d34:	7dfb      	ldrb	r3, [r7, #23]
 8014d36:	e000      	b.n	8014d3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014d38:	2300      	movs	r3, #0
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3718      	adds	r7, #24
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b086      	sub	sp, #24
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	60f8      	str	r0, [r7, #12]
 8014d4a:	460b      	mov	r3, r1
 8014d4c:	607a      	str	r2, [r7, #4]
 8014d4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014d50:	7afb      	ldrb	r3, [r7, #11]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d16f      	bne.n	8014e36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	3314      	adds	r3, #20
 8014d5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014d62:	2b02      	cmp	r3, #2
 8014d64:	d15a      	bne.n	8014e1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	689a      	ldr	r2, [r3, #8]
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	68db      	ldr	r3, [r3, #12]
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d914      	bls.n	8014d9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	689a      	ldr	r2, [r3, #8]
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	68db      	ldr	r3, [r3, #12]
 8014d7a:	1ad2      	subs	r2, r2, r3
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	461a      	mov	r2, r3
 8014d86:	6879      	ldr	r1, [r7, #4]
 8014d88:	68f8      	ldr	r0, [r7, #12]
 8014d8a:	f001 f8b2 	bl	8015ef2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d8e:	2300      	movs	r3, #0
 8014d90:	2200      	movs	r2, #0
 8014d92:	2100      	movs	r1, #0
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f001 fe1f 	bl	80169d8 <USBD_LL_PrepareReceive>
 8014d9a:	e03f      	b.n	8014e1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	68da      	ldr	r2, [r3, #12]
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	689b      	ldr	r3, [r3, #8]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d11c      	bne.n	8014de2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	685a      	ldr	r2, [r3, #4]
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d316      	bcc.n	8014de2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	685a      	ldr	r2, [r3, #4]
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d20f      	bcs.n	8014de2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	f001 f893 	bl	8015ef2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	2100      	movs	r1, #0
 8014dda:	68f8      	ldr	r0, [r7, #12]
 8014ddc:	f001 fdfc 	bl	80169d8 <USBD_LL_PrepareReceive>
 8014de0:	e01c      	b.n	8014e1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	2b03      	cmp	r3, #3
 8014dec:	d10f      	bne.n	8014e0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d009      	beq.n	8014e0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e08:	68db      	ldr	r3, [r3, #12]
 8014e0a:	68f8      	ldr	r0, [r7, #12]
 8014e0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e0e:	2180      	movs	r1, #128	; 0x80
 8014e10:	68f8      	ldr	r0, [r7, #12]
 8014e12:	f001 fd37 	bl	8016884 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014e16:	68f8      	ldr	r0, [r7, #12]
 8014e18:	f001 f8bd 	bl	8015f96 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d03a      	beq.n	8014e9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014e26:	68f8      	ldr	r0, [r7, #12]
 8014e28:	f7ff fe42 	bl	8014ab0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014e34:	e032      	b.n	8014e9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014e36:	7afb      	ldrb	r3, [r7, #11]
 8014e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014e3c:	b2db      	uxtb	r3, r3
 8014e3e:	4619      	mov	r1, r3
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f000 f985 	bl	8015150 <USBD_CoreFindEP>
 8014e46:	4603      	mov	r3, r0
 8014e48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014e4a:	7dfb      	ldrb	r3, [r7, #23]
 8014e4c:	2bff      	cmp	r3, #255	; 0xff
 8014e4e:	d025      	beq.n	8014e9c <USBD_LL_DataInStage+0x15a>
 8014e50:	7dfb      	ldrb	r3, [r7, #23]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d122      	bne.n	8014e9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e5c:	b2db      	uxtb	r3, r3
 8014e5e:	2b03      	cmp	r3, #3
 8014e60:	d11c      	bne.n	8014e9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014e62:	7dfa      	ldrb	r2, [r7, #23]
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	32ae      	adds	r2, #174	; 0xae
 8014e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e6c:	695b      	ldr	r3, [r3, #20]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d014      	beq.n	8014e9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014e72:	7dfa      	ldrb	r2, [r7, #23]
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014e7a:	7dfa      	ldrb	r2, [r7, #23]
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	32ae      	adds	r2, #174	; 0xae
 8014e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e84:	695b      	ldr	r3, [r3, #20]
 8014e86:	7afa      	ldrb	r2, [r7, #11]
 8014e88:	4611      	mov	r1, r2
 8014e8a:	68f8      	ldr	r0, [r7, #12]
 8014e8c:	4798      	blx	r3
 8014e8e:	4603      	mov	r3, r0
 8014e90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014e92:	7dbb      	ldrb	r3, [r7, #22]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d001      	beq.n	8014e9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014e98:	7dbb      	ldrb	r3, [r7, #22]
 8014e9a:	e000      	b.n	8014e9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014e9c:	2300      	movs	r3, #0
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3718      	adds	r7, #24
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b084      	sub	sp, #16
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d014      	beq.n	8014f0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d00e      	beq.n	8014f0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ef4:	685b      	ldr	r3, [r3, #4]
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	6852      	ldr	r2, [r2, #4]
 8014efa:	b2d2      	uxtb	r2, r2
 8014efc:	4611      	mov	r1, r2
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	4798      	blx	r3
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d001      	beq.n	8014f0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014f08:	2303      	movs	r3, #3
 8014f0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014f0c:	2340      	movs	r3, #64	; 0x40
 8014f0e:	2200      	movs	r2, #0
 8014f10:	2100      	movs	r1, #0
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f001 fc71 	bl	80167fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2240      	movs	r2, #64	; 0x40
 8014f24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014f28:	2340      	movs	r3, #64	; 0x40
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	2180      	movs	r1, #128	; 0x80
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f001 fc63 	bl	80167fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2201      	movs	r2, #1
 8014f38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2240      	movs	r2, #64	; 0x40
 8014f3e:	621a      	str	r2, [r3, #32]

  return ret;
 8014f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3710      	adds	r7, #16
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}

08014f4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014f4a:	b480      	push	{r7}
 8014f4c:	b083      	sub	sp, #12
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	6078      	str	r0, [r7, #4]
 8014f52:	460b      	mov	r3, r1
 8014f54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	78fa      	ldrb	r2, [r7, #3]
 8014f5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014f5c:	2300      	movs	r3, #0
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	370c      	adds	r7, #12
 8014f62:	46bd      	mov	sp, r7
 8014f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f68:	4770      	bx	lr

08014f6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014f6a:	b480      	push	{r7}
 8014f6c:	b083      	sub	sp, #12
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f78:	b2db      	uxtb	r3, r3
 8014f7a:	2b04      	cmp	r3, #4
 8014f7c:	d006      	beq.n	8014f8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f84:	b2da      	uxtb	r2, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2204      	movs	r2, #4
 8014f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014f94:	2300      	movs	r3, #0
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	370c      	adds	r7, #12
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa0:	4770      	bx	lr

08014fa2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014fa2:	b480      	push	{r7}
 8014fa4:	b083      	sub	sp, #12
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	2b04      	cmp	r3, #4
 8014fb4:	d106      	bne.n	8014fc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014fbc:	b2da      	uxtb	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014fc4:	2300      	movs	r3, #0
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	370c      	adds	r7, #12
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr

08014fd2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014fd2:	b580      	push	{r7, lr}
 8014fd4:	b082      	sub	sp, #8
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	2b03      	cmp	r3, #3
 8014fe4:	d110      	bne.n	8015008 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d00b      	beq.n	8015008 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ff6:	69db      	ldr	r3, [r3, #28]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d005      	beq.n	8015008 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015002:	69db      	ldr	r3, [r3, #28]
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015008:	2300      	movs	r3, #0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}

08015012 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015012:	b580      	push	{r7, lr}
 8015014:	b082      	sub	sp, #8
 8015016:	af00      	add	r7, sp, #0
 8015018:	6078      	str	r0, [r7, #4]
 801501a:	460b      	mov	r3, r1
 801501c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	32ae      	adds	r2, #174	; 0xae
 8015028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d101      	bne.n	8015034 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015030:	2303      	movs	r3, #3
 8015032:	e01c      	b.n	801506e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801503a:	b2db      	uxtb	r3, r3
 801503c:	2b03      	cmp	r3, #3
 801503e:	d115      	bne.n	801506c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	32ae      	adds	r2, #174	; 0xae
 801504a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801504e:	6a1b      	ldr	r3, [r3, #32]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d00b      	beq.n	801506c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	32ae      	adds	r2, #174	; 0xae
 801505e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015062:	6a1b      	ldr	r3, [r3, #32]
 8015064:	78fa      	ldrb	r2, [r7, #3]
 8015066:	4611      	mov	r1, r2
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801506c:	2300      	movs	r3, #0
}
 801506e:	4618      	mov	r0, r3
 8015070:	3708      	adds	r7, #8
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b082      	sub	sp, #8
 801507a:	af00      	add	r7, sp, #0
 801507c:	6078      	str	r0, [r7, #4]
 801507e:	460b      	mov	r3, r1
 8015080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	32ae      	adds	r2, #174	; 0xae
 801508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d101      	bne.n	8015098 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015094:	2303      	movs	r3, #3
 8015096:	e01c      	b.n	80150d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801509e:	b2db      	uxtb	r3, r3
 80150a0:	2b03      	cmp	r3, #3
 80150a2:	d115      	bne.n	80150d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	32ae      	adds	r2, #174	; 0xae
 80150ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d00b      	beq.n	80150d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	32ae      	adds	r2, #174	; 0xae
 80150c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c8:	78fa      	ldrb	r2, [r7, #3]
 80150ca:	4611      	mov	r1, r2
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80150d0:	2300      	movs	r3, #0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3708      	adds	r7, #8
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}

080150da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80150da:	b480      	push	{r7}
 80150dc:	b083      	sub	sp, #12
 80150de:	af00      	add	r7, sp, #0
 80150e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80150e2:	2300      	movs	r3, #0
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	370c      	adds	r7, #12
 80150e8:	46bd      	mov	sp, r7
 80150ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ee:	4770      	bx	lr

080150f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80150f8:	2300      	movs	r3, #0
 80150fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2201      	movs	r2, #1
 8015100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00e      	beq.n	801512c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	6852      	ldr	r2, [r2, #4]
 801511a:	b2d2      	uxtb	r2, r2
 801511c:	4611      	mov	r1, r2
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	4798      	blx	r3
 8015122:	4603      	mov	r3, r0
 8015124:	2b00      	cmp	r3, #0
 8015126:	d001      	beq.n	801512c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015128:	2303      	movs	r3, #3
 801512a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801512c:	7bfb      	ldrb	r3, [r7, #15]
}
 801512e:	4618      	mov	r0, r3
 8015130:	3710      	adds	r7, #16
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015136:	b480      	push	{r7}
 8015138:	b083      	sub	sp, #12
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
 801513e:	460b      	mov	r3, r1
 8015140:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015142:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015144:	4618      	mov	r0, r3
 8015146:	370c      	adds	r7, #12
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr

08015150 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015150:	b480      	push	{r7}
 8015152:	b083      	sub	sp, #12
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	460b      	mov	r3, r1
 801515a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801515c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801515e:	4618      	mov	r0, r3
 8015160:	370c      	adds	r7, #12
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr

0801516a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801516a:	b580      	push	{r7, lr}
 801516c:	b086      	sub	sp, #24
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
 8015172:	460b      	mov	r3, r1
 8015174:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801517e:	2300      	movs	r3, #0
 8015180:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	885b      	ldrh	r3, [r3, #2]
 8015186:	b29a      	uxth	r2, r3
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	781b      	ldrb	r3, [r3, #0]
 801518c:	b29b      	uxth	r3, r3
 801518e:	429a      	cmp	r2, r3
 8015190:	d920      	bls.n	80151d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	b29b      	uxth	r3, r3
 8015198:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801519a:	e013      	b.n	80151c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801519c:	f107 030a 	add.w	r3, r7, #10
 80151a0:	4619      	mov	r1, r3
 80151a2:	6978      	ldr	r0, [r7, #20]
 80151a4:	f000 f81b 	bl	80151de <USBD_GetNextDesc>
 80151a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	785b      	ldrb	r3, [r3, #1]
 80151ae:	2b05      	cmp	r3, #5
 80151b0:	d108      	bne.n	80151c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	789b      	ldrb	r3, [r3, #2]
 80151ba:	78fa      	ldrb	r2, [r7, #3]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d008      	beq.n	80151d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80151c0:	2300      	movs	r3, #0
 80151c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	885b      	ldrh	r3, [r3, #2]
 80151c8:	b29a      	uxth	r2, r3
 80151ca:	897b      	ldrh	r3, [r7, #10]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d8e5      	bhi.n	801519c <USBD_GetEpDesc+0x32>
 80151d0:	e000      	b.n	80151d4 <USBD_GetEpDesc+0x6a>
          break;
 80151d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80151d4:	693b      	ldr	r3, [r7, #16]
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3718      	adds	r7, #24
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80151de:	b480      	push	{r7}
 80151e0:	b085      	sub	sp, #20
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
 80151e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	881a      	ldrh	r2, [r3, #0]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	4413      	add	r3, r2
 80151f8:	b29a      	uxth	r2, r3
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	461a      	mov	r2, r3
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	4413      	add	r3, r2
 8015208:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801520a:	68fb      	ldr	r3, [r7, #12]
}
 801520c:	4618      	mov	r0, r3
 801520e:	3714      	adds	r7, #20
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr

08015218 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015218:	b480      	push	{r7}
 801521a:	b087      	sub	sp, #28
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	3301      	adds	r3, #1
 801522e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015236:	8a3b      	ldrh	r3, [r7, #16]
 8015238:	021b      	lsls	r3, r3, #8
 801523a:	b21a      	sxth	r2, r3
 801523c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015240:	4313      	orrs	r3, r2
 8015242:	b21b      	sxth	r3, r3
 8015244:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015246:	89fb      	ldrh	r3, [r7, #14]
}
 8015248:	4618      	mov	r0, r3
 801524a:	371c      	adds	r7, #28
 801524c:	46bd      	mov	sp, r7
 801524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015252:	4770      	bx	lr

08015254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b084      	sub	sp, #16
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801525e:	2300      	movs	r3, #0
 8015260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801526a:	2b40      	cmp	r3, #64	; 0x40
 801526c:	d005      	beq.n	801527a <USBD_StdDevReq+0x26>
 801526e:	2b40      	cmp	r3, #64	; 0x40
 8015270:	d857      	bhi.n	8015322 <USBD_StdDevReq+0xce>
 8015272:	2b00      	cmp	r3, #0
 8015274:	d00f      	beq.n	8015296 <USBD_StdDevReq+0x42>
 8015276:	2b20      	cmp	r3, #32
 8015278:	d153      	bne.n	8015322 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	32ae      	adds	r2, #174	; 0xae
 8015284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015288:	689b      	ldr	r3, [r3, #8]
 801528a:	6839      	ldr	r1, [r7, #0]
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	4798      	blx	r3
 8015290:	4603      	mov	r3, r0
 8015292:	73fb      	strb	r3, [r7, #15]
      break;
 8015294:	e04a      	b.n	801532c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	785b      	ldrb	r3, [r3, #1]
 801529a:	2b09      	cmp	r3, #9
 801529c:	d83b      	bhi.n	8015316 <USBD_StdDevReq+0xc2>
 801529e:	a201      	add	r2, pc, #4	; (adr r2, 80152a4 <USBD_StdDevReq+0x50>)
 80152a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152a4:	080152f9 	.word	0x080152f9
 80152a8:	0801530d 	.word	0x0801530d
 80152ac:	08015317 	.word	0x08015317
 80152b0:	08015303 	.word	0x08015303
 80152b4:	08015317 	.word	0x08015317
 80152b8:	080152d7 	.word	0x080152d7
 80152bc:	080152cd 	.word	0x080152cd
 80152c0:	08015317 	.word	0x08015317
 80152c4:	080152ef 	.word	0x080152ef
 80152c8:	080152e1 	.word	0x080152e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80152cc:	6839      	ldr	r1, [r7, #0]
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f000 fa3c 	bl	801574c <USBD_GetDescriptor>
          break;
 80152d4:	e024      	b.n	8015320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80152d6:	6839      	ldr	r1, [r7, #0]
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	f000 fba1 	bl	8015a20 <USBD_SetAddress>
          break;
 80152de:	e01f      	b.n	8015320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80152e0:	6839      	ldr	r1, [r7, #0]
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f000 fbe0 	bl	8015aa8 <USBD_SetConfig>
 80152e8:	4603      	mov	r3, r0
 80152ea:	73fb      	strb	r3, [r7, #15]
          break;
 80152ec:	e018      	b.n	8015320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80152ee:	6839      	ldr	r1, [r7, #0]
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f000 fc83 	bl	8015bfc <USBD_GetConfig>
          break;
 80152f6:	e013      	b.n	8015320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80152f8:	6839      	ldr	r1, [r7, #0]
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f000 fcb4 	bl	8015c68 <USBD_GetStatus>
          break;
 8015300:	e00e      	b.n	8015320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015302:	6839      	ldr	r1, [r7, #0]
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f000 fce3 	bl	8015cd0 <USBD_SetFeature>
          break;
 801530a:	e009      	b.n	8015320 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801530c:	6839      	ldr	r1, [r7, #0]
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f000 fd07 	bl	8015d22 <USBD_ClrFeature>
          break;
 8015314:	e004      	b.n	8015320 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015316:	6839      	ldr	r1, [r7, #0]
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f000 fd5e 	bl	8015dda <USBD_CtlError>
          break;
 801531e:	bf00      	nop
      }
      break;
 8015320:	e004      	b.n	801532c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015322:	6839      	ldr	r1, [r7, #0]
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f000 fd58 	bl	8015dda <USBD_CtlError>
      break;
 801532a:	bf00      	nop
  }

  return ret;
 801532c:	7bfb      	ldrb	r3, [r7, #15]
}
 801532e:	4618      	mov	r0, r3
 8015330:	3710      	adds	r7, #16
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop

08015338 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015342:	2300      	movs	r3, #0
 8015344:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801534e:	2b40      	cmp	r3, #64	; 0x40
 8015350:	d005      	beq.n	801535e <USBD_StdItfReq+0x26>
 8015352:	2b40      	cmp	r3, #64	; 0x40
 8015354:	d852      	bhi.n	80153fc <USBD_StdItfReq+0xc4>
 8015356:	2b00      	cmp	r3, #0
 8015358:	d001      	beq.n	801535e <USBD_StdItfReq+0x26>
 801535a:	2b20      	cmp	r3, #32
 801535c:	d14e      	bne.n	80153fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015364:	b2db      	uxtb	r3, r3
 8015366:	3b01      	subs	r3, #1
 8015368:	2b02      	cmp	r3, #2
 801536a:	d840      	bhi.n	80153ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	889b      	ldrh	r3, [r3, #4]
 8015370:	b2db      	uxtb	r3, r3
 8015372:	2b01      	cmp	r3, #1
 8015374:	d836      	bhi.n	80153e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	889b      	ldrh	r3, [r3, #4]
 801537a:	b2db      	uxtb	r3, r3
 801537c:	4619      	mov	r1, r3
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f7ff fed9 	bl	8015136 <USBD_CoreFindIF>
 8015384:	4603      	mov	r3, r0
 8015386:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015388:	7bbb      	ldrb	r3, [r7, #14]
 801538a:	2bff      	cmp	r3, #255	; 0xff
 801538c:	d01d      	beq.n	80153ca <USBD_StdItfReq+0x92>
 801538e:	7bbb      	ldrb	r3, [r7, #14]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d11a      	bne.n	80153ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015394:	7bba      	ldrb	r2, [r7, #14]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	32ae      	adds	r2, #174	; 0xae
 801539a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801539e:	689b      	ldr	r3, [r3, #8]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d00f      	beq.n	80153c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80153a4:	7bba      	ldrb	r2, [r7, #14]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80153ac:	7bba      	ldrb	r2, [r7, #14]
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	32ae      	adds	r2, #174	; 0xae
 80153b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153b6:	689b      	ldr	r3, [r3, #8]
 80153b8:	6839      	ldr	r1, [r7, #0]
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	4798      	blx	r3
 80153be:	4603      	mov	r3, r0
 80153c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80153c2:	e004      	b.n	80153ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80153c4:	2303      	movs	r3, #3
 80153c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80153c8:	e001      	b.n	80153ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80153ca:	2303      	movs	r3, #3
 80153cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	88db      	ldrh	r3, [r3, #6]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d110      	bne.n	80153f8 <USBD_StdItfReq+0xc0>
 80153d6:	7bfb      	ldrb	r3, [r7, #15]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d10d      	bne.n	80153f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f000 fdc7 	bl	8015f70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80153e2:	e009      	b.n	80153f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80153e4:	6839      	ldr	r1, [r7, #0]
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f000 fcf7 	bl	8015dda <USBD_CtlError>
          break;
 80153ec:	e004      	b.n	80153f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80153ee:	6839      	ldr	r1, [r7, #0]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f000 fcf2 	bl	8015dda <USBD_CtlError>
          break;
 80153f6:	e000      	b.n	80153fa <USBD_StdItfReq+0xc2>
          break;
 80153f8:	bf00      	nop
      }
      break;
 80153fa:	e004      	b.n	8015406 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80153fc:	6839      	ldr	r1, [r7, #0]
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f000 fceb 	bl	8015dda <USBD_CtlError>
      break;
 8015404:	bf00      	nop
  }

  return ret;
 8015406:	7bfb      	ldrb	r3, [r7, #15]
}
 8015408:	4618      	mov	r0, r3
 801540a:	3710      	adds	r7, #16
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}

08015410 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b084      	sub	sp, #16
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801541a:	2300      	movs	r3, #0
 801541c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	889b      	ldrh	r3, [r3, #4]
 8015422:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801542c:	2b40      	cmp	r3, #64	; 0x40
 801542e:	d007      	beq.n	8015440 <USBD_StdEPReq+0x30>
 8015430:	2b40      	cmp	r3, #64	; 0x40
 8015432:	f200 817f 	bhi.w	8015734 <USBD_StdEPReq+0x324>
 8015436:	2b00      	cmp	r3, #0
 8015438:	d02a      	beq.n	8015490 <USBD_StdEPReq+0x80>
 801543a:	2b20      	cmp	r3, #32
 801543c:	f040 817a 	bne.w	8015734 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015440:	7bbb      	ldrb	r3, [r7, #14]
 8015442:	4619      	mov	r1, r3
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7ff fe83 	bl	8015150 <USBD_CoreFindEP>
 801544a:	4603      	mov	r3, r0
 801544c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801544e:	7b7b      	ldrb	r3, [r7, #13]
 8015450:	2bff      	cmp	r3, #255	; 0xff
 8015452:	f000 8174 	beq.w	801573e <USBD_StdEPReq+0x32e>
 8015456:	7b7b      	ldrb	r3, [r7, #13]
 8015458:	2b00      	cmp	r3, #0
 801545a:	f040 8170 	bne.w	801573e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801545e:	7b7a      	ldrb	r2, [r7, #13]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015466:	7b7a      	ldrb	r2, [r7, #13]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	32ae      	adds	r2, #174	; 0xae
 801546c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015470:	689b      	ldr	r3, [r3, #8]
 8015472:	2b00      	cmp	r3, #0
 8015474:	f000 8163 	beq.w	801573e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015478:	7b7a      	ldrb	r2, [r7, #13]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	32ae      	adds	r2, #174	; 0xae
 801547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015482:	689b      	ldr	r3, [r3, #8]
 8015484:	6839      	ldr	r1, [r7, #0]
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	4798      	blx	r3
 801548a:	4603      	mov	r3, r0
 801548c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801548e:	e156      	b.n	801573e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	785b      	ldrb	r3, [r3, #1]
 8015494:	2b03      	cmp	r3, #3
 8015496:	d008      	beq.n	80154aa <USBD_StdEPReq+0x9a>
 8015498:	2b03      	cmp	r3, #3
 801549a:	f300 8145 	bgt.w	8015728 <USBD_StdEPReq+0x318>
 801549e:	2b00      	cmp	r3, #0
 80154a0:	f000 809b 	beq.w	80155da <USBD_StdEPReq+0x1ca>
 80154a4:	2b01      	cmp	r3, #1
 80154a6:	d03c      	beq.n	8015522 <USBD_StdEPReq+0x112>
 80154a8:	e13e      	b.n	8015728 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	d002      	beq.n	80154bc <USBD_StdEPReq+0xac>
 80154b6:	2b03      	cmp	r3, #3
 80154b8:	d016      	beq.n	80154e8 <USBD_StdEPReq+0xd8>
 80154ba:	e02c      	b.n	8015516 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80154bc:	7bbb      	ldrb	r3, [r7, #14]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d00d      	beq.n	80154de <USBD_StdEPReq+0xce>
 80154c2:	7bbb      	ldrb	r3, [r7, #14]
 80154c4:	2b80      	cmp	r3, #128	; 0x80
 80154c6:	d00a      	beq.n	80154de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80154c8:	7bbb      	ldrb	r3, [r7, #14]
 80154ca:	4619      	mov	r1, r3
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f001 f9d9 	bl	8016884 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80154d2:	2180      	movs	r1, #128	; 0x80
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f001 f9d5 	bl	8016884 <USBD_LL_StallEP>
 80154da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80154dc:	e020      	b.n	8015520 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80154de:	6839      	ldr	r1, [r7, #0]
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f000 fc7a 	bl	8015dda <USBD_CtlError>
              break;
 80154e6:	e01b      	b.n	8015520 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	885b      	ldrh	r3, [r3, #2]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d10e      	bne.n	801550e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80154f0:	7bbb      	ldrb	r3, [r7, #14]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d00b      	beq.n	801550e <USBD_StdEPReq+0xfe>
 80154f6:	7bbb      	ldrb	r3, [r7, #14]
 80154f8:	2b80      	cmp	r3, #128	; 0x80
 80154fa:	d008      	beq.n	801550e <USBD_StdEPReq+0xfe>
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	88db      	ldrh	r3, [r3, #6]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d104      	bne.n	801550e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015504:	7bbb      	ldrb	r3, [r7, #14]
 8015506:	4619      	mov	r1, r3
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f001 f9bb 	bl	8016884 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f000 fd2e 	bl	8015f70 <USBD_CtlSendStatus>

              break;
 8015514:	e004      	b.n	8015520 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015516:	6839      	ldr	r1, [r7, #0]
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f000 fc5e 	bl	8015dda <USBD_CtlError>
              break;
 801551e:	bf00      	nop
          }
          break;
 8015520:	e107      	b.n	8015732 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015528:	b2db      	uxtb	r3, r3
 801552a:	2b02      	cmp	r3, #2
 801552c:	d002      	beq.n	8015534 <USBD_StdEPReq+0x124>
 801552e:	2b03      	cmp	r3, #3
 8015530:	d016      	beq.n	8015560 <USBD_StdEPReq+0x150>
 8015532:	e04b      	b.n	80155cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015534:	7bbb      	ldrb	r3, [r7, #14]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d00d      	beq.n	8015556 <USBD_StdEPReq+0x146>
 801553a:	7bbb      	ldrb	r3, [r7, #14]
 801553c:	2b80      	cmp	r3, #128	; 0x80
 801553e:	d00a      	beq.n	8015556 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015540:	7bbb      	ldrb	r3, [r7, #14]
 8015542:	4619      	mov	r1, r3
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f001 f99d 	bl	8016884 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801554a:	2180      	movs	r1, #128	; 0x80
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f001 f999 	bl	8016884 <USBD_LL_StallEP>
 8015552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015554:	e040      	b.n	80155d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015556:	6839      	ldr	r1, [r7, #0]
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f000 fc3e 	bl	8015dda <USBD_CtlError>
              break;
 801555e:	e03b      	b.n	80155d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	885b      	ldrh	r3, [r3, #2]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d136      	bne.n	80155d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015568:	7bbb      	ldrb	r3, [r7, #14]
 801556a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801556e:	2b00      	cmp	r3, #0
 8015570:	d004      	beq.n	801557c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015572:	7bbb      	ldrb	r3, [r7, #14]
 8015574:	4619      	mov	r1, r3
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	f001 f9a3 	bl	80168c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f000 fcf7 	bl	8015f70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015582:	7bbb      	ldrb	r3, [r7, #14]
 8015584:	4619      	mov	r1, r3
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f7ff fde2 	bl	8015150 <USBD_CoreFindEP>
 801558c:	4603      	mov	r3, r0
 801558e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015590:	7b7b      	ldrb	r3, [r7, #13]
 8015592:	2bff      	cmp	r3, #255	; 0xff
 8015594:	d01f      	beq.n	80155d6 <USBD_StdEPReq+0x1c6>
 8015596:	7b7b      	ldrb	r3, [r7, #13]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d11c      	bne.n	80155d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801559c:	7b7a      	ldrb	r2, [r7, #13]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80155a4:	7b7a      	ldrb	r2, [r7, #13]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	32ae      	adds	r2, #174	; 0xae
 80155aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155ae:	689b      	ldr	r3, [r3, #8]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d010      	beq.n	80155d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80155b4:	7b7a      	ldrb	r2, [r7, #13]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	32ae      	adds	r2, #174	; 0xae
 80155ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155be:	689b      	ldr	r3, [r3, #8]
 80155c0:	6839      	ldr	r1, [r7, #0]
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	4798      	blx	r3
 80155c6:	4603      	mov	r3, r0
 80155c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80155ca:	e004      	b.n	80155d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80155cc:	6839      	ldr	r1, [r7, #0]
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f000 fc03 	bl	8015dda <USBD_CtlError>
              break;
 80155d4:	e000      	b.n	80155d8 <USBD_StdEPReq+0x1c8>
              break;
 80155d6:	bf00      	nop
          }
          break;
 80155d8:	e0ab      	b.n	8015732 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155e0:	b2db      	uxtb	r3, r3
 80155e2:	2b02      	cmp	r3, #2
 80155e4:	d002      	beq.n	80155ec <USBD_StdEPReq+0x1dc>
 80155e6:	2b03      	cmp	r3, #3
 80155e8:	d032      	beq.n	8015650 <USBD_StdEPReq+0x240>
 80155ea:	e097      	b.n	801571c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80155ec:	7bbb      	ldrb	r3, [r7, #14]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d007      	beq.n	8015602 <USBD_StdEPReq+0x1f2>
 80155f2:	7bbb      	ldrb	r3, [r7, #14]
 80155f4:	2b80      	cmp	r3, #128	; 0x80
 80155f6:	d004      	beq.n	8015602 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80155f8:	6839      	ldr	r1, [r7, #0]
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f000 fbed 	bl	8015dda <USBD_CtlError>
                break;
 8015600:	e091      	b.n	8015726 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015606:	2b00      	cmp	r3, #0
 8015608:	da0b      	bge.n	8015622 <USBD_StdEPReq+0x212>
 801560a:	7bbb      	ldrb	r3, [r7, #14]
 801560c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015610:	4613      	mov	r3, r2
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	4413      	add	r3, r2
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	3310      	adds	r3, #16
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	4413      	add	r3, r2
 801561e:	3304      	adds	r3, #4
 8015620:	e00b      	b.n	801563a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015622:	7bbb      	ldrb	r3, [r7, #14]
 8015624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015628:	4613      	mov	r3, r2
 801562a:	009b      	lsls	r3, r3, #2
 801562c:	4413      	add	r3, r2
 801562e:	009b      	lsls	r3, r3, #2
 8015630:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015634:	687a      	ldr	r2, [r7, #4]
 8015636:	4413      	add	r3, r2
 8015638:	3304      	adds	r3, #4
 801563a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	2200      	movs	r2, #0
 8015640:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	2202      	movs	r2, #2
 8015646:	4619      	mov	r1, r3
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f000 fc37 	bl	8015ebc <USBD_CtlSendData>
              break;
 801564e:	e06a      	b.n	8015726 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015654:	2b00      	cmp	r3, #0
 8015656:	da11      	bge.n	801567c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015658:	7bbb      	ldrb	r3, [r7, #14]
 801565a:	f003 020f 	and.w	r2, r3, #15
 801565e:	6879      	ldr	r1, [r7, #4]
 8015660:	4613      	mov	r3, r2
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	4413      	add	r3, r2
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	440b      	add	r3, r1
 801566a:	3324      	adds	r3, #36	; 0x24
 801566c:	881b      	ldrh	r3, [r3, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d117      	bne.n	80156a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015672:	6839      	ldr	r1, [r7, #0]
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f000 fbb0 	bl	8015dda <USBD_CtlError>
                  break;
 801567a:	e054      	b.n	8015726 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801567c:	7bbb      	ldrb	r3, [r7, #14]
 801567e:	f003 020f 	and.w	r2, r3, #15
 8015682:	6879      	ldr	r1, [r7, #4]
 8015684:	4613      	mov	r3, r2
 8015686:	009b      	lsls	r3, r3, #2
 8015688:	4413      	add	r3, r2
 801568a:	009b      	lsls	r3, r3, #2
 801568c:	440b      	add	r3, r1
 801568e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015692:	881b      	ldrh	r3, [r3, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d104      	bne.n	80156a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015698:	6839      	ldr	r1, [r7, #0]
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 fb9d 	bl	8015dda <USBD_CtlError>
                  break;
 80156a0:	e041      	b.n	8015726 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	da0b      	bge.n	80156c2 <USBD_StdEPReq+0x2b2>
 80156aa:	7bbb      	ldrb	r3, [r7, #14]
 80156ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80156b0:	4613      	mov	r3, r2
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	4413      	add	r3, r2
 80156b6:	009b      	lsls	r3, r3, #2
 80156b8:	3310      	adds	r3, #16
 80156ba:	687a      	ldr	r2, [r7, #4]
 80156bc:	4413      	add	r3, r2
 80156be:	3304      	adds	r3, #4
 80156c0:	e00b      	b.n	80156da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80156c2:	7bbb      	ldrb	r3, [r7, #14]
 80156c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156c8:	4613      	mov	r3, r2
 80156ca:	009b      	lsls	r3, r3, #2
 80156cc:	4413      	add	r3, r2
 80156ce:	009b      	lsls	r3, r3, #2
 80156d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	4413      	add	r3, r2
 80156d8:	3304      	adds	r3, #4
 80156da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80156dc:	7bbb      	ldrb	r3, [r7, #14]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d002      	beq.n	80156e8 <USBD_StdEPReq+0x2d8>
 80156e2:	7bbb      	ldrb	r3, [r7, #14]
 80156e4:	2b80      	cmp	r3, #128	; 0x80
 80156e6:	d103      	bne.n	80156f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	2200      	movs	r2, #0
 80156ec:	601a      	str	r2, [r3, #0]
 80156ee:	e00e      	b.n	801570e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80156f0:	7bbb      	ldrb	r3, [r7, #14]
 80156f2:	4619      	mov	r1, r3
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f001 f903 	bl	8016900 <USBD_LL_IsStallEP>
 80156fa:	4603      	mov	r3, r0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d003      	beq.n	8015708 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	2201      	movs	r2, #1
 8015704:	601a      	str	r2, [r3, #0]
 8015706:	e002      	b.n	801570e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	2200      	movs	r2, #0
 801570c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	2202      	movs	r2, #2
 8015712:	4619      	mov	r1, r3
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f000 fbd1 	bl	8015ebc <USBD_CtlSendData>
              break;
 801571a:	e004      	b.n	8015726 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801571c:	6839      	ldr	r1, [r7, #0]
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f000 fb5b 	bl	8015dda <USBD_CtlError>
              break;
 8015724:	bf00      	nop
          }
          break;
 8015726:	e004      	b.n	8015732 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015728:	6839      	ldr	r1, [r7, #0]
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f000 fb55 	bl	8015dda <USBD_CtlError>
          break;
 8015730:	bf00      	nop
      }
      break;
 8015732:	e005      	b.n	8015740 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015734:	6839      	ldr	r1, [r7, #0]
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	f000 fb4f 	bl	8015dda <USBD_CtlError>
      break;
 801573c:	e000      	b.n	8015740 <USBD_StdEPReq+0x330>
      break;
 801573e:	bf00      	nop
  }

  return ret;
 8015740:	7bfb      	ldrb	r3, [r7, #15]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3710      	adds	r7, #16
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
	...

0801574c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b084      	sub	sp, #16
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015756:	2300      	movs	r3, #0
 8015758:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801575a:	2300      	movs	r3, #0
 801575c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801575e:	2300      	movs	r3, #0
 8015760:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	885b      	ldrh	r3, [r3, #2]
 8015766:	0a1b      	lsrs	r3, r3, #8
 8015768:	b29b      	uxth	r3, r3
 801576a:	3b01      	subs	r3, #1
 801576c:	2b06      	cmp	r3, #6
 801576e:	f200 8128 	bhi.w	80159c2 <USBD_GetDescriptor+0x276>
 8015772:	a201      	add	r2, pc, #4	; (adr r2, 8015778 <USBD_GetDescriptor+0x2c>)
 8015774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015778:	08015795 	.word	0x08015795
 801577c:	080157ad 	.word	0x080157ad
 8015780:	080157ed 	.word	0x080157ed
 8015784:	080159c3 	.word	0x080159c3
 8015788:	080159c3 	.word	0x080159c3
 801578c:	08015963 	.word	0x08015963
 8015790:	0801598f 	.word	0x0801598f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	7c12      	ldrb	r2, [r2, #16]
 80157a0:	f107 0108 	add.w	r1, r7, #8
 80157a4:	4610      	mov	r0, r2
 80157a6:	4798      	blx	r3
 80157a8:	60f8      	str	r0, [r7, #12]
      break;
 80157aa:	e112      	b.n	80159d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	7c1b      	ldrb	r3, [r3, #16]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d10d      	bne.n	80157d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157bc:	f107 0208 	add.w	r2, r7, #8
 80157c0:	4610      	mov	r0, r2
 80157c2:	4798      	blx	r3
 80157c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	3301      	adds	r3, #1
 80157ca:	2202      	movs	r2, #2
 80157cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80157ce:	e100      	b.n	80159d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157d8:	f107 0208 	add.w	r2, r7, #8
 80157dc:	4610      	mov	r0, r2
 80157de:	4798      	blx	r3
 80157e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	3301      	adds	r3, #1
 80157e6:	2202      	movs	r2, #2
 80157e8:	701a      	strb	r2, [r3, #0]
      break;
 80157ea:	e0f2      	b.n	80159d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80157ec:	683b      	ldr	r3, [r7, #0]
 80157ee:	885b      	ldrh	r3, [r3, #2]
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	2b05      	cmp	r3, #5
 80157f4:	f200 80ac 	bhi.w	8015950 <USBD_GetDescriptor+0x204>
 80157f8:	a201      	add	r2, pc, #4	; (adr r2, 8015800 <USBD_GetDescriptor+0xb4>)
 80157fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157fe:	bf00      	nop
 8015800:	08015819 	.word	0x08015819
 8015804:	0801584d 	.word	0x0801584d
 8015808:	08015881 	.word	0x08015881
 801580c:	080158b5 	.word	0x080158b5
 8015810:	080158e9 	.word	0x080158e9
 8015814:	0801591d 	.word	0x0801591d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d00b      	beq.n	801583c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801582a:	685b      	ldr	r3, [r3, #4]
 801582c:	687a      	ldr	r2, [r7, #4]
 801582e:	7c12      	ldrb	r2, [r2, #16]
 8015830:	f107 0108 	add.w	r1, r7, #8
 8015834:	4610      	mov	r0, r2
 8015836:	4798      	blx	r3
 8015838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801583a:	e091      	b.n	8015960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801583c:	6839      	ldr	r1, [r7, #0]
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f000 facb 	bl	8015dda <USBD_CtlError>
            err++;
 8015844:	7afb      	ldrb	r3, [r7, #11]
 8015846:	3301      	adds	r3, #1
 8015848:	72fb      	strb	r3, [r7, #11]
          break;
 801584a:	e089      	b.n	8015960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015852:	689b      	ldr	r3, [r3, #8]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d00b      	beq.n	8015870 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	687a      	ldr	r2, [r7, #4]
 8015862:	7c12      	ldrb	r2, [r2, #16]
 8015864:	f107 0108 	add.w	r1, r7, #8
 8015868:	4610      	mov	r0, r2
 801586a:	4798      	blx	r3
 801586c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801586e:	e077      	b.n	8015960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015870:	6839      	ldr	r1, [r7, #0]
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f000 fab1 	bl	8015dda <USBD_CtlError>
            err++;
 8015878:	7afb      	ldrb	r3, [r7, #11]
 801587a:	3301      	adds	r3, #1
 801587c:	72fb      	strb	r3, [r7, #11]
          break;
 801587e:	e06f      	b.n	8015960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015886:	68db      	ldr	r3, [r3, #12]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d00b      	beq.n	80158a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015892:	68db      	ldr	r3, [r3, #12]
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	7c12      	ldrb	r2, [r2, #16]
 8015898:	f107 0108 	add.w	r1, r7, #8
 801589c:	4610      	mov	r0, r2
 801589e:	4798      	blx	r3
 80158a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80158a2:	e05d      	b.n	8015960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80158a4:	6839      	ldr	r1, [r7, #0]
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f000 fa97 	bl	8015dda <USBD_CtlError>
            err++;
 80158ac:	7afb      	ldrb	r3, [r7, #11]
 80158ae:	3301      	adds	r3, #1
 80158b0:	72fb      	strb	r3, [r7, #11]
          break;
 80158b2:	e055      	b.n	8015960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158ba:	691b      	ldr	r3, [r3, #16]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d00b      	beq.n	80158d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158c6:	691b      	ldr	r3, [r3, #16]
 80158c8:	687a      	ldr	r2, [r7, #4]
 80158ca:	7c12      	ldrb	r2, [r2, #16]
 80158cc:	f107 0108 	add.w	r1, r7, #8
 80158d0:	4610      	mov	r0, r2
 80158d2:	4798      	blx	r3
 80158d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80158d6:	e043      	b.n	8015960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80158d8:	6839      	ldr	r1, [r7, #0]
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f000 fa7d 	bl	8015dda <USBD_CtlError>
            err++;
 80158e0:	7afb      	ldrb	r3, [r7, #11]
 80158e2:	3301      	adds	r3, #1
 80158e4:	72fb      	strb	r3, [r7, #11]
          break;
 80158e6:	e03b      	b.n	8015960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158ee:	695b      	ldr	r3, [r3, #20]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d00b      	beq.n	801590c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158fa:	695b      	ldr	r3, [r3, #20]
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	7c12      	ldrb	r2, [r2, #16]
 8015900:	f107 0108 	add.w	r1, r7, #8
 8015904:	4610      	mov	r0, r2
 8015906:	4798      	blx	r3
 8015908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801590a:	e029      	b.n	8015960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801590c:	6839      	ldr	r1, [r7, #0]
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f000 fa63 	bl	8015dda <USBD_CtlError>
            err++;
 8015914:	7afb      	ldrb	r3, [r7, #11]
 8015916:	3301      	adds	r3, #1
 8015918:	72fb      	strb	r3, [r7, #11]
          break;
 801591a:	e021      	b.n	8015960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015922:	699b      	ldr	r3, [r3, #24]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d00b      	beq.n	8015940 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801592e:	699b      	ldr	r3, [r3, #24]
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	7c12      	ldrb	r2, [r2, #16]
 8015934:	f107 0108 	add.w	r1, r7, #8
 8015938:	4610      	mov	r0, r2
 801593a:	4798      	blx	r3
 801593c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801593e:	e00f      	b.n	8015960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015940:	6839      	ldr	r1, [r7, #0]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f000 fa49 	bl	8015dda <USBD_CtlError>
            err++;
 8015948:	7afb      	ldrb	r3, [r7, #11]
 801594a:	3301      	adds	r3, #1
 801594c:	72fb      	strb	r3, [r7, #11]
          break;
 801594e:	e007      	b.n	8015960 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015950:	6839      	ldr	r1, [r7, #0]
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f000 fa41 	bl	8015dda <USBD_CtlError>
          err++;
 8015958:	7afb      	ldrb	r3, [r7, #11]
 801595a:	3301      	adds	r3, #1
 801595c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801595e:	bf00      	nop
      }
      break;
 8015960:	e037      	b.n	80159d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	7c1b      	ldrb	r3, [r3, #16]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d109      	bne.n	801597e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015972:	f107 0208 	add.w	r2, r7, #8
 8015976:	4610      	mov	r0, r2
 8015978:	4798      	blx	r3
 801597a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801597c:	e029      	b.n	80159d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f000 fa2a 	bl	8015dda <USBD_CtlError>
        err++;
 8015986:	7afb      	ldrb	r3, [r7, #11]
 8015988:	3301      	adds	r3, #1
 801598a:	72fb      	strb	r3, [r7, #11]
      break;
 801598c:	e021      	b.n	80159d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	7c1b      	ldrb	r3, [r3, #16]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d10d      	bne.n	80159b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801599e:	f107 0208 	add.w	r2, r7, #8
 80159a2:	4610      	mov	r0, r2
 80159a4:	4798      	blx	r3
 80159a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	3301      	adds	r3, #1
 80159ac:	2207      	movs	r2, #7
 80159ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80159b0:	e00f      	b.n	80159d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80159b2:	6839      	ldr	r1, [r7, #0]
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f000 fa10 	bl	8015dda <USBD_CtlError>
        err++;
 80159ba:	7afb      	ldrb	r3, [r7, #11]
 80159bc:	3301      	adds	r3, #1
 80159be:	72fb      	strb	r3, [r7, #11]
      break;
 80159c0:	e007      	b.n	80159d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f000 fa08 	bl	8015dda <USBD_CtlError>
      err++;
 80159ca:	7afb      	ldrb	r3, [r7, #11]
 80159cc:	3301      	adds	r3, #1
 80159ce:	72fb      	strb	r3, [r7, #11]
      break;
 80159d0:	bf00      	nop
  }

  if (err != 0U)
 80159d2:	7afb      	ldrb	r3, [r7, #11]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d11e      	bne.n	8015a16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	88db      	ldrh	r3, [r3, #6]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d016      	beq.n	8015a0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80159e0:	893b      	ldrh	r3, [r7, #8]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00e      	beq.n	8015a04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	88da      	ldrh	r2, [r3, #6]
 80159ea:	893b      	ldrh	r3, [r7, #8]
 80159ec:	4293      	cmp	r3, r2
 80159ee:	bf28      	it	cs
 80159f0:	4613      	movcs	r3, r2
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80159f6:	893b      	ldrh	r3, [r7, #8]
 80159f8:	461a      	mov	r2, r3
 80159fa:	68f9      	ldr	r1, [r7, #12]
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f000 fa5d 	bl	8015ebc <USBD_CtlSendData>
 8015a02:	e009      	b.n	8015a18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015a04:	6839      	ldr	r1, [r7, #0]
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f000 f9e7 	bl	8015dda <USBD_CtlError>
 8015a0c:	e004      	b.n	8015a18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f000 faae 	bl	8015f70 <USBD_CtlSendStatus>
 8015a14:	e000      	b.n	8015a18 <USBD_GetDescriptor+0x2cc>
    return;
 8015a16:	bf00      	nop
  }
}
 8015a18:	3710      	adds	r7, #16
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop

08015a20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	889b      	ldrh	r3, [r3, #4]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d131      	bne.n	8015a96 <USBD_SetAddress+0x76>
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	88db      	ldrh	r3, [r3, #6]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d12d      	bne.n	8015a96 <USBD_SetAddress+0x76>
 8015a3a:	683b      	ldr	r3, [r7, #0]
 8015a3c:	885b      	ldrh	r3, [r3, #2]
 8015a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8015a40:	d829      	bhi.n	8015a96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	885b      	ldrh	r3, [r3, #2]
 8015a46:	b2db      	uxtb	r3, r3
 8015a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	2b03      	cmp	r3, #3
 8015a58:	d104      	bne.n	8015a64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015a5a:	6839      	ldr	r1, [r7, #0]
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f000 f9bc 	bl	8015dda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a62:	e01d      	b.n	8015aa0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	7bfa      	ldrb	r2, [r7, #15]
 8015a68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015a6c:	7bfb      	ldrb	r3, [r7, #15]
 8015a6e:	4619      	mov	r1, r3
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f000 ff71 	bl	8016958 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f000 fa7a 	bl	8015f70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015a7c:	7bfb      	ldrb	r3, [r7, #15]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d004      	beq.n	8015a8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2202      	movs	r2, #2
 8015a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a8a:	e009      	b.n	8015aa0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2201      	movs	r2, #1
 8015a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a94:	e004      	b.n	8015aa0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015a96:	6839      	ldr	r1, [r7, #0]
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 f99e 	bl	8015dda <USBD_CtlError>
  }
}
 8015a9e:	bf00      	nop
 8015aa0:	bf00      	nop
 8015aa2:	3710      	adds	r7, #16
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b084      	sub	sp, #16
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	885b      	ldrh	r3, [r3, #2]
 8015aba:	b2da      	uxtb	r2, r3
 8015abc:	4b4e      	ldr	r3, [pc, #312]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015abe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ac0:	4b4d      	ldr	r3, [pc, #308]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d905      	bls.n	8015ad4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f000 f985 	bl	8015dda <USBD_CtlError>
    return USBD_FAIL;
 8015ad0:	2303      	movs	r3, #3
 8015ad2:	e08c      	b.n	8015bee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ada:	b2db      	uxtb	r3, r3
 8015adc:	2b02      	cmp	r3, #2
 8015ade:	d002      	beq.n	8015ae6 <USBD_SetConfig+0x3e>
 8015ae0:	2b03      	cmp	r3, #3
 8015ae2:	d029      	beq.n	8015b38 <USBD_SetConfig+0x90>
 8015ae4:	e075      	b.n	8015bd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015ae6:	4b44      	ldr	r3, [pc, #272]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d020      	beq.n	8015b30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015aee:	4b42      	ldr	r3, [pc, #264]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	461a      	mov	r2, r3
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015af8:	4b3f      	ldr	r3, [pc, #252]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	4619      	mov	r1, r3
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7fe ffe1 	bl	8014ac6 <USBD_SetClassConfig>
 8015b04:	4603      	mov	r3, r0
 8015b06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015b08:	7bfb      	ldrb	r3, [r7, #15]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d008      	beq.n	8015b20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015b0e:	6839      	ldr	r1, [r7, #0]
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f000 f962 	bl	8015dda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2202      	movs	r2, #2
 8015b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015b1e:	e065      	b.n	8015bec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f000 fa25 	bl	8015f70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2203      	movs	r2, #3
 8015b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015b2e:	e05d      	b.n	8015bec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f000 fa1d 	bl	8015f70 <USBD_CtlSendStatus>
      break;
 8015b36:	e059      	b.n	8015bec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015b38:	4b2f      	ldr	r3, [pc, #188]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d112      	bne.n	8015b66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	2202      	movs	r2, #2
 8015b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015b48:	4b2b      	ldr	r3, [pc, #172]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	461a      	mov	r2, r3
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015b52:	4b29      	ldr	r3, [pc, #164]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015b54:	781b      	ldrb	r3, [r3, #0]
 8015b56:	4619      	mov	r1, r3
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f7fe ffd0 	bl	8014afe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f000 fa06 	bl	8015f70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015b64:	e042      	b.n	8015bec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015b66:	4b24      	ldr	r3, [pc, #144]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	461a      	mov	r2, r3
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d02a      	beq.n	8015bca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	685b      	ldr	r3, [r3, #4]
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f7fe ffbe 	bl	8014afe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015b82:	4b1d      	ldr	r3, [pc, #116]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	461a      	mov	r2, r3
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015b8c:	4b1a      	ldr	r3, [pc, #104]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	4619      	mov	r1, r3
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f7fe ff97 	bl	8014ac6 <USBD_SetClassConfig>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015b9c:	7bfb      	ldrb	r3, [r7, #15]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d00f      	beq.n	8015bc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015ba2:	6839      	ldr	r1, [r7, #0]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f000 f918 	bl	8015dda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	685b      	ldr	r3, [r3, #4]
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f7fe ffa3 	bl	8014afe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2202      	movs	r2, #2
 8015bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015bc0:	e014      	b.n	8015bec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f000 f9d4 	bl	8015f70 <USBD_CtlSendStatus>
      break;
 8015bc8:	e010      	b.n	8015bec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 f9d0 	bl	8015f70 <USBD_CtlSendStatus>
      break;
 8015bd0:	e00c      	b.n	8015bec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015bd2:	6839      	ldr	r1, [r7, #0]
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f000 f900 	bl	8015dda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015bda:	4b07      	ldr	r3, [pc, #28]	; (8015bf8 <USBD_SetConfig+0x150>)
 8015bdc:	781b      	ldrb	r3, [r3, #0]
 8015bde:	4619      	mov	r1, r3
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f7fe ff8c 	bl	8014afe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015be6:	2303      	movs	r3, #3
 8015be8:	73fb      	strb	r3, [r7, #15]
      break;
 8015bea:	bf00      	nop
  }

  return ret;
 8015bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3710      	adds	r7, #16
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}
 8015bf6:	bf00      	nop
 8015bf8:	240015e4 	.word	0x240015e4

08015bfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b082      	sub	sp, #8
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	88db      	ldrh	r3, [r3, #6]
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d004      	beq.n	8015c18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015c0e:	6839      	ldr	r1, [r7, #0]
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 f8e2 	bl	8015dda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015c16:	e023      	b.n	8015c60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c1e:	b2db      	uxtb	r3, r3
 8015c20:	2b02      	cmp	r3, #2
 8015c22:	dc02      	bgt.n	8015c2a <USBD_GetConfig+0x2e>
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	dc03      	bgt.n	8015c30 <USBD_GetConfig+0x34>
 8015c28:	e015      	b.n	8015c56 <USBD_GetConfig+0x5a>
 8015c2a:	2b03      	cmp	r3, #3
 8015c2c:	d00b      	beq.n	8015c46 <USBD_GetConfig+0x4a>
 8015c2e:	e012      	b.n	8015c56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	3308      	adds	r3, #8
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f000 f93c 	bl	8015ebc <USBD_CtlSendData>
        break;
 8015c44:	e00c      	b.n	8015c60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	3304      	adds	r3, #4
 8015c4a:	2201      	movs	r2, #1
 8015c4c:	4619      	mov	r1, r3
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f000 f934 	bl	8015ebc <USBD_CtlSendData>
        break;
 8015c54:	e004      	b.n	8015c60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015c56:	6839      	ldr	r1, [r7, #0]
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f000 f8be 	bl	8015dda <USBD_CtlError>
        break;
 8015c5e:	bf00      	nop
}
 8015c60:	bf00      	nop
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b082      	sub	sp, #8
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c78:	b2db      	uxtb	r3, r3
 8015c7a:	3b01      	subs	r3, #1
 8015c7c:	2b02      	cmp	r3, #2
 8015c7e:	d81e      	bhi.n	8015cbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	88db      	ldrh	r3, [r3, #6]
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d004      	beq.n	8015c92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015c88:	6839      	ldr	r1, [r7, #0]
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f000 f8a5 	bl	8015dda <USBD_CtlError>
        break;
 8015c90:	e01a      	b.n	8015cc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2201      	movs	r2, #1
 8015c96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d005      	beq.n	8015cae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	68db      	ldr	r3, [r3, #12]
 8015ca6:	f043 0202 	orr.w	r2, r3, #2
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	330c      	adds	r3, #12
 8015cb2:	2202      	movs	r2, #2
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f000 f900 	bl	8015ebc <USBD_CtlSendData>
      break;
 8015cbc:	e004      	b.n	8015cc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015cbe:	6839      	ldr	r1, [r7, #0]
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f000 f88a 	bl	8015dda <USBD_CtlError>
      break;
 8015cc6:	bf00      	nop
  }
}
 8015cc8:	bf00      	nop
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	885b      	ldrh	r3, [r3, #2]
 8015cde:	2b01      	cmp	r3, #1
 8015ce0:	d107      	bne.n	8015cf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2201      	movs	r2, #1
 8015ce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f000 f940 	bl	8015f70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015cf0:	e013      	b.n	8015d1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	885b      	ldrh	r3, [r3, #2]
 8015cf6:	2b02      	cmp	r3, #2
 8015cf8:	d10b      	bne.n	8015d12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	889b      	ldrh	r3, [r3, #4]
 8015cfe:	0a1b      	lsrs	r3, r3, #8
 8015d00:	b29b      	uxth	r3, r3
 8015d02:	b2da      	uxtb	r2, r3
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 f930 	bl	8015f70 <USBD_CtlSendStatus>
}
 8015d10:	e003      	b.n	8015d1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015d12:	6839      	ldr	r1, [r7, #0]
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f000 f860 	bl	8015dda <USBD_CtlError>
}
 8015d1a:	bf00      	nop
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d22:	b580      	push	{r7, lr}
 8015d24:	b082      	sub	sp, #8
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
 8015d2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	3b01      	subs	r3, #1
 8015d36:	2b02      	cmp	r3, #2
 8015d38:	d80b      	bhi.n	8015d52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	885b      	ldrh	r3, [r3, #2]
 8015d3e:	2b01      	cmp	r3, #1
 8015d40:	d10c      	bne.n	8015d5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2200      	movs	r2, #0
 8015d46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 f910 	bl	8015f70 <USBD_CtlSendStatus>
      }
      break;
 8015d50:	e004      	b.n	8015d5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015d52:	6839      	ldr	r1, [r7, #0]
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f000 f840 	bl	8015dda <USBD_CtlError>
      break;
 8015d5a:	e000      	b.n	8015d5e <USBD_ClrFeature+0x3c>
      break;
 8015d5c:	bf00      	nop
  }
}
 8015d5e:	bf00      	nop
 8015d60:	3708      	adds	r7, #8
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}

08015d66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b084      	sub	sp, #16
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
 8015d6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	781a      	ldrb	r2, [r3, #0]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	3301      	adds	r3, #1
 8015d80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	781a      	ldrb	r2, [r3, #0]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015d90:	68f8      	ldr	r0, [r7, #12]
 8015d92:	f7ff fa41 	bl	8015218 <SWAPBYTE>
 8015d96:	4603      	mov	r3, r0
 8015d98:	461a      	mov	r2, r3
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	3301      	adds	r3, #1
 8015da2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	3301      	adds	r3, #1
 8015da8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	f7ff fa34 	bl	8015218 <SWAPBYTE>
 8015db0:	4603      	mov	r3, r0
 8015db2:	461a      	mov	r2, r3
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	3301      	adds	r3, #1
 8015dbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	3301      	adds	r3, #1
 8015dc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015dc4:	68f8      	ldr	r0, [r7, #12]
 8015dc6:	f7ff fa27 	bl	8015218 <SWAPBYTE>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	461a      	mov	r2, r3
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	80da      	strh	r2, [r3, #6]
}
 8015dd2:	bf00      	nop
 8015dd4:	3710      	adds	r7, #16
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b082      	sub	sp, #8
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
 8015de2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015de4:	2180      	movs	r1, #128	; 0x80
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f000 fd4c 	bl	8016884 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015dec:	2100      	movs	r1, #0
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f000 fd48 	bl	8016884 <USBD_LL_StallEP>
}
 8015df4:	bf00      	nop
 8015df6:	3708      	adds	r7, #8
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}

08015dfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b086      	sub	sp, #24
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d036      	beq.n	8015e80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015e16:	6938      	ldr	r0, [r7, #16]
 8015e18:	f000 f836 	bl	8015e88 <USBD_GetLen>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	3301      	adds	r3, #1
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	005b      	lsls	r3, r3, #1
 8015e24:	b29a      	uxth	r2, r3
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015e2a:	7dfb      	ldrb	r3, [r7, #23]
 8015e2c:	68ba      	ldr	r2, [r7, #8]
 8015e2e:	4413      	add	r3, r2
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	7812      	ldrb	r2, [r2, #0]
 8015e34:	701a      	strb	r2, [r3, #0]
  idx++;
 8015e36:	7dfb      	ldrb	r3, [r7, #23]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015e3c:	7dfb      	ldrb	r3, [r7, #23]
 8015e3e:	68ba      	ldr	r2, [r7, #8]
 8015e40:	4413      	add	r3, r2
 8015e42:	2203      	movs	r2, #3
 8015e44:	701a      	strb	r2, [r3, #0]
  idx++;
 8015e46:	7dfb      	ldrb	r3, [r7, #23]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015e4c:	e013      	b.n	8015e76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015e4e:	7dfb      	ldrb	r3, [r7, #23]
 8015e50:	68ba      	ldr	r2, [r7, #8]
 8015e52:	4413      	add	r3, r2
 8015e54:	693a      	ldr	r2, [r7, #16]
 8015e56:	7812      	ldrb	r2, [r2, #0]
 8015e58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015e5a:	693b      	ldr	r3, [r7, #16]
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	613b      	str	r3, [r7, #16]
    idx++;
 8015e60:	7dfb      	ldrb	r3, [r7, #23]
 8015e62:	3301      	adds	r3, #1
 8015e64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015e66:	7dfb      	ldrb	r3, [r7, #23]
 8015e68:	68ba      	ldr	r2, [r7, #8]
 8015e6a:	4413      	add	r3, r2
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8015e70:	7dfb      	ldrb	r3, [r7, #23]
 8015e72:	3301      	adds	r3, #1
 8015e74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015e76:	693b      	ldr	r3, [r7, #16]
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d1e7      	bne.n	8015e4e <USBD_GetString+0x52>
 8015e7e:	e000      	b.n	8015e82 <USBD_GetString+0x86>
    return;
 8015e80:	bf00      	nop
  }
}
 8015e82:	3718      	adds	r7, #24
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015e88:	b480      	push	{r7}
 8015e8a:	b085      	sub	sp, #20
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015e90:	2300      	movs	r3, #0
 8015e92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015e98:	e005      	b.n	8015ea6 <USBD_GetLen+0x1e>
  {
    len++;
 8015e9a:	7bfb      	ldrb	r3, [r7, #15]
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	781b      	ldrb	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d1f5      	bne.n	8015e9a <USBD_GetLen+0x12>
  }

  return len;
 8015eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3714      	adds	r7, #20
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eba:	4770      	bx	lr

08015ebc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b084      	sub	sp, #16
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	60f8      	str	r0, [r7, #12]
 8015ec4:	60b9      	str	r1, [r7, #8]
 8015ec6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2202      	movs	r2, #2
 8015ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	687a      	ldr	r2, [r7, #4]
 8015eda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	68ba      	ldr	r2, [r7, #8]
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	68f8      	ldr	r0, [r7, #12]
 8015ee4:	f000 fd57 	bl	8016996 <USBD_LL_Transmit>

  return USBD_OK;
 8015ee8:	2300      	movs	r3, #0
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3710      	adds	r7, #16
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015ef2:	b580      	push	{r7, lr}
 8015ef4:	b084      	sub	sp, #16
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	60f8      	str	r0, [r7, #12]
 8015efa:	60b9      	str	r1, [r7, #8]
 8015efc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	68ba      	ldr	r2, [r7, #8]
 8015f02:	2100      	movs	r1, #0
 8015f04:	68f8      	ldr	r0, [r7, #12]
 8015f06:	f000 fd46 	bl	8016996 <USBD_LL_Transmit>

  return USBD_OK;
 8015f0a:	2300      	movs	r3, #0
}
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	3710      	adds	r7, #16
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}

08015f14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2203      	movs	r2, #3
 8015f24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	687a      	ldr	r2, [r7, #4]
 8015f2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	68f8      	ldr	r0, [r7, #12]
 8015f40:	f000 fd4a 	bl	80169d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015f44:	2300      	movs	r3, #0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3710      	adds	r7, #16
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015f4e:	b580      	push	{r7, lr}
 8015f50:	b084      	sub	sp, #16
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	60f8      	str	r0, [r7, #12]
 8015f56:	60b9      	str	r1, [r7, #8]
 8015f58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	68ba      	ldr	r2, [r7, #8]
 8015f5e:	2100      	movs	r1, #0
 8015f60:	68f8      	ldr	r0, [r7, #12]
 8015f62:	f000 fd39 	bl	80169d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015f66:	2300      	movs	r3, #0
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3710      	adds	r7, #16
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2204      	movs	r2, #4
 8015f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015f80:	2300      	movs	r3, #0
 8015f82:	2200      	movs	r2, #0
 8015f84:	2100      	movs	r1, #0
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 fd05 	bl	8016996 <USBD_LL_Transmit>

  return USBD_OK;
 8015f8c:	2300      	movs	r3, #0
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3708      	adds	r7, #8
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}

08015f96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015f96:	b580      	push	{r7, lr}
 8015f98:	b082      	sub	sp, #8
 8015f9a:	af00      	add	r7, sp, #0
 8015f9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2205      	movs	r2, #5
 8015fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	2200      	movs	r2, #0
 8015faa:	2100      	movs	r1, #0
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f000 fd13 	bl	80169d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015fb2:	2300      	movs	r3, #0
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3708      	adds	r7, #8
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}

08015fbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b087      	sub	sp, #28
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015fca:	2301      	movs	r3, #1
 8015fcc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015fd2:	4b1f      	ldr	r3, [pc, #124]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8015fd4:	7a5b      	ldrb	r3, [r3, #9]
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d131      	bne.n	8016040 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015fdc:	4b1c      	ldr	r3, [pc, #112]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8015fde:	7a5b      	ldrb	r3, [r3, #9]
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	4b1a      	ldr	r3, [pc, #104]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015fea:	4b19      	ldr	r3, [pc, #100]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8015fec:	7a5b      	ldrb	r3, [r3, #9]
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	4a17      	ldr	r2, [pc, #92]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	4413      	add	r3, r2
 8015ff6:	68fa      	ldr	r2, [r7, #12]
 8015ff8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015ffa:	4b15      	ldr	r3, [pc, #84]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8015ffc:	7a5b      	ldrb	r3, [r3, #9]
 8015ffe:	b2db      	uxtb	r3, r3
 8016000:	461a      	mov	r2, r3
 8016002:	4b13      	ldr	r3, [pc, #76]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8016004:	4413      	add	r3, r2
 8016006:	79fa      	ldrb	r2, [r7, #7]
 8016008:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801600a:	4b11      	ldr	r3, [pc, #68]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 801600c:	7a5b      	ldrb	r3, [r3, #9]
 801600e:	b2db      	uxtb	r3, r3
 8016010:	1c5a      	adds	r2, r3, #1
 8016012:	b2d1      	uxtb	r1, r2
 8016014:	4a0e      	ldr	r2, [pc, #56]	; (8016050 <FATFS_LinkDriverEx+0x94>)
 8016016:	7251      	strb	r1, [r2, #9]
 8016018:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801601a:	7dbb      	ldrb	r3, [r7, #22]
 801601c:	3330      	adds	r3, #48	; 0x30
 801601e:	b2da      	uxtb	r2, r3
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	3301      	adds	r3, #1
 8016028:	223a      	movs	r2, #58	; 0x3a
 801602a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	3302      	adds	r3, #2
 8016030:	222f      	movs	r2, #47	; 0x2f
 8016032:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	3303      	adds	r3, #3
 8016038:	2200      	movs	r2, #0
 801603a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801603c:	2300      	movs	r3, #0
 801603e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016040:	7dfb      	ldrb	r3, [r7, #23]
}
 8016042:	4618      	mov	r0, r3
 8016044:	371c      	adds	r7, #28
 8016046:	46bd      	mov	sp, r7
 8016048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604c:	4770      	bx	lr
 801604e:	bf00      	nop
 8016050:	240015e8 	.word	0x240015e8

08016054 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801605e:	2200      	movs	r2, #0
 8016060:	6839      	ldr	r1, [r7, #0]
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f7ff ffaa 	bl	8015fbc <FATFS_LinkDriverEx>
 8016068:	4603      	mov	r3, r0
}
 801606a:	4618      	mov	r0, r3
 801606c:	3708      	adds	r7, #8
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}
	...

08016074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016078:	2201      	movs	r2, #1
 801607a:	4913      	ldr	r1, [pc, #76]	; (80160c8 <MX_USB_DEVICE_Init+0x54>)
 801607c:	4813      	ldr	r0, [pc, #76]	; (80160cc <MX_USB_DEVICE_Init+0x58>)
 801607e:	f7fe fca5 	bl	80149cc <USBD_Init>
 8016082:	4603      	mov	r3, r0
 8016084:	2b00      	cmp	r3, #0
 8016086:	d001      	beq.n	801608c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016088:	f7ec f986 	bl	8002398 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801608c:	4910      	ldr	r1, [pc, #64]	; (80160d0 <MX_USB_DEVICE_Init+0x5c>)
 801608e:	480f      	ldr	r0, [pc, #60]	; (80160cc <MX_USB_DEVICE_Init+0x58>)
 8016090:	f7fe fccc 	bl	8014a2c <USBD_RegisterClass>
 8016094:	4603      	mov	r3, r0
 8016096:	2b00      	cmp	r3, #0
 8016098:	d001      	beq.n	801609e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801609a:	f7ec f97d 	bl	8002398 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801609e:	490d      	ldr	r1, [pc, #52]	; (80160d4 <MX_USB_DEVICE_Init+0x60>)
 80160a0:	480a      	ldr	r0, [pc, #40]	; (80160cc <MX_USB_DEVICE_Init+0x58>)
 80160a2:	f7fe fbc3 	bl	801482c <USBD_CDC_RegisterInterface>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d001      	beq.n	80160b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80160ac:	f7ec f974 	bl	8002398 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80160b0:	4806      	ldr	r0, [pc, #24]	; (80160cc <MX_USB_DEVICE_Init+0x58>)
 80160b2:	f7fe fcf1 	bl	8014a98 <USBD_Start>
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d001      	beq.n	80160c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80160bc:	f7ec f96c 	bl	8002398 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80160c0:	f7f3 f908 	bl	80092d4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80160c4:	bf00      	nop
 80160c6:	bd80      	pop	{r7, pc}
 80160c8:	240000b0 	.word	0x240000b0
 80160cc:	240015f4 	.word	0x240015f4
 80160d0:	2400001c 	.word	0x2400001c
 80160d4:	2400009c 	.word	0x2400009c

080160d8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80160dc:	2200      	movs	r2, #0
 80160de:	4905      	ldr	r1, [pc, #20]	; (80160f4 <CDC_Init_HS+0x1c>)
 80160e0:	4805      	ldr	r0, [pc, #20]	; (80160f8 <CDC_Init_HS+0x20>)
 80160e2:	f7fe fbbd 	bl	8014860 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80160e6:	4905      	ldr	r1, [pc, #20]	; (80160fc <CDC_Init_HS+0x24>)
 80160e8:	4803      	ldr	r0, [pc, #12]	; (80160f8 <CDC_Init_HS+0x20>)
 80160ea:	f7fe fbdb 	bl	80148a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80160ee:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80160f0:	4618      	mov	r0, r3
 80160f2:	bd80      	pop	{r7, pc}
 80160f4:	240020d0 	.word	0x240020d0
 80160f8:	240015f4 	.word	0x240015f4
 80160fc:	240018d0 	.word	0x240018d0

08016100 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016100:	b480      	push	{r7}
 8016102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016104:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016106:	4618      	mov	r0, r3
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr

08016110 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016110:	b480      	push	{r7}
 8016112:	b083      	sub	sp, #12
 8016114:	af00      	add	r7, sp, #0
 8016116:	4603      	mov	r3, r0
 8016118:	6039      	str	r1, [r7, #0]
 801611a:	71fb      	strb	r3, [r7, #7]
 801611c:	4613      	mov	r3, r2
 801611e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016120:	79fb      	ldrb	r3, [r7, #7]
 8016122:	2b23      	cmp	r3, #35	; 0x23
 8016124:	d84a      	bhi.n	80161bc <CDC_Control_HS+0xac>
 8016126:	a201      	add	r2, pc, #4	; (adr r2, 801612c <CDC_Control_HS+0x1c>)
 8016128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801612c:	080161bd 	.word	0x080161bd
 8016130:	080161bd 	.word	0x080161bd
 8016134:	080161bd 	.word	0x080161bd
 8016138:	080161bd 	.word	0x080161bd
 801613c:	080161bd 	.word	0x080161bd
 8016140:	080161bd 	.word	0x080161bd
 8016144:	080161bd 	.word	0x080161bd
 8016148:	080161bd 	.word	0x080161bd
 801614c:	080161bd 	.word	0x080161bd
 8016150:	080161bd 	.word	0x080161bd
 8016154:	080161bd 	.word	0x080161bd
 8016158:	080161bd 	.word	0x080161bd
 801615c:	080161bd 	.word	0x080161bd
 8016160:	080161bd 	.word	0x080161bd
 8016164:	080161bd 	.word	0x080161bd
 8016168:	080161bd 	.word	0x080161bd
 801616c:	080161bd 	.word	0x080161bd
 8016170:	080161bd 	.word	0x080161bd
 8016174:	080161bd 	.word	0x080161bd
 8016178:	080161bd 	.word	0x080161bd
 801617c:	080161bd 	.word	0x080161bd
 8016180:	080161bd 	.word	0x080161bd
 8016184:	080161bd 	.word	0x080161bd
 8016188:	080161bd 	.word	0x080161bd
 801618c:	080161bd 	.word	0x080161bd
 8016190:	080161bd 	.word	0x080161bd
 8016194:	080161bd 	.word	0x080161bd
 8016198:	080161bd 	.word	0x080161bd
 801619c:	080161bd 	.word	0x080161bd
 80161a0:	080161bd 	.word	0x080161bd
 80161a4:	080161bd 	.word	0x080161bd
 80161a8:	080161bd 	.word	0x080161bd
 80161ac:	080161bd 	.word	0x080161bd
 80161b0:	080161bd 	.word	0x080161bd
 80161b4:	080161bd 	.word	0x080161bd
 80161b8:	080161bd 	.word	0x080161bd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80161bc:	bf00      	nop
  }

  return (USBD_OK);
 80161be:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	370c      	adds	r7, #12
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr

080161cc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b084      	sub	sp, #16
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80161d6:	6879      	ldr	r1, [r7, #4]
 80161d8:	480e      	ldr	r0, [pc, #56]	; (8016214 <CDC_Receive_HS+0x48>)
 80161da:	f7fe fb63 	bl	80148a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80161de:	480d      	ldr	r0, [pc, #52]	; (8016214 <CDC_Receive_HS+0x48>)
 80161e0:	f7fe fbbe 	bl	8014960 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 80161ea:	4b0b      	ldr	r3, [pc, #44]	; (8016218 <CDC_Receive_HS+0x4c>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	4a0b      	ldr	r2, [pc, #44]	; (801621c <CDC_Receive_HS+0x50>)
 80161f0:	4413      	add	r3, r2
 80161f2:	68fa      	ldr	r2, [r7, #12]
 80161f4:	6879      	ldr	r1, [r7, #4]
 80161f6:	4618      	mov	r0, r3
 80161f8:	f000 fcba 	bl	8016b70 <memcpy>
  usbBytesReady += cpyLen;
 80161fc:	4b06      	ldr	r3, [pc, #24]	; (8016218 <CDC_Receive_HS+0x4c>)
 80161fe:	681a      	ldr	r2, [r3, #0]
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	4413      	add	r3, r2
 8016204:	4a04      	ldr	r2, [pc, #16]	; (8016218 <CDC_Receive_HS+0x4c>)
 8016206:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016208:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801620a:	4618      	mov	r0, r3
 801620c:	3710      	adds	r7, #16
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
 8016212:	bf00      	nop
 8016214:	240015f4 	.word	0x240015f4
 8016218:	2400026c 	.word	0x2400026c
 801621c:	2400016c 	.word	0x2400016c

08016220 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b084      	sub	sp, #16
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	460b      	mov	r3, r1
 801622a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801622c:	2300      	movs	r3, #0
 801622e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016230:	4b0d      	ldr	r3, [pc, #52]	; (8016268 <CDC_Transmit_HS+0x48>)
 8016232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016236:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016238:	68bb      	ldr	r3, [r7, #8]
 801623a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801623e:	2b00      	cmp	r3, #0
 8016240:	d001      	beq.n	8016246 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016242:	2301      	movs	r3, #1
 8016244:	e00b      	b.n	801625e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016246:	887b      	ldrh	r3, [r7, #2]
 8016248:	461a      	mov	r2, r3
 801624a:	6879      	ldr	r1, [r7, #4]
 801624c:	4806      	ldr	r0, [pc, #24]	; (8016268 <CDC_Transmit_HS+0x48>)
 801624e:	f7fe fb07 	bl	8014860 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016252:	4805      	ldr	r0, [pc, #20]	; (8016268 <CDC_Transmit_HS+0x48>)
 8016254:	f7fe fb44 	bl	80148e0 <USBD_CDC_TransmitPacket>
 8016258:	4603      	mov	r3, r0
 801625a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801625c:	7bfb      	ldrb	r3, [r7, #15]
}
 801625e:	4618      	mov	r0, r3
 8016260:	3710      	adds	r7, #16
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}
 8016266:	bf00      	nop
 8016268:	240015f4 	.word	0x240015f4

0801626c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801626c:	b480      	push	{r7}
 801626e:	b087      	sub	sp, #28
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	60b9      	str	r1, [r7, #8]
 8016276:	4613      	mov	r3, r2
 8016278:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801627a:	2300      	movs	r3, #0
 801627c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801627e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016282:	4618      	mov	r0, r3
 8016284:	371c      	adds	r7, #28
 8016286:	46bd      	mov	sp, r7
 8016288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628c:	4770      	bx	lr
	...

08016290 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016290:	b480      	push	{r7}
 8016292:	b083      	sub	sp, #12
 8016294:	af00      	add	r7, sp, #0
 8016296:	4603      	mov	r3, r0
 8016298:	6039      	str	r1, [r7, #0]
 801629a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801629c:	683b      	ldr	r3, [r7, #0]
 801629e:	2212      	movs	r2, #18
 80162a0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80162a2:	4b03      	ldr	r3, [pc, #12]	; (80162b0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	370c      	adds	r7, #12
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr
 80162b0:	240000cc 	.word	0x240000cc

080162b4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162b4:	b480      	push	{r7}
 80162b6:	b083      	sub	sp, #12
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	4603      	mov	r3, r0
 80162bc:	6039      	str	r1, [r7, #0]
 80162be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	2204      	movs	r2, #4
 80162c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80162c6:	4b03      	ldr	r3, [pc, #12]	; (80162d4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	370c      	adds	r7, #12
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr
 80162d4:	240000e0 	.word	0x240000e0

080162d8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	4603      	mov	r3, r0
 80162e0:	6039      	str	r1, [r7, #0]
 80162e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80162e4:	79fb      	ldrb	r3, [r7, #7]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d105      	bne.n	80162f6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80162ea:	683a      	ldr	r2, [r7, #0]
 80162ec:	4907      	ldr	r1, [pc, #28]	; (801630c <USBD_HS_ProductStrDescriptor+0x34>)
 80162ee:	4808      	ldr	r0, [pc, #32]	; (8016310 <USBD_HS_ProductStrDescriptor+0x38>)
 80162f0:	f7ff fd84 	bl	8015dfc <USBD_GetString>
 80162f4:	e004      	b.n	8016300 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80162f6:	683a      	ldr	r2, [r7, #0]
 80162f8:	4904      	ldr	r1, [pc, #16]	; (801630c <USBD_HS_ProductStrDescriptor+0x34>)
 80162fa:	4805      	ldr	r0, [pc, #20]	; (8016310 <USBD_HS_ProductStrDescriptor+0x38>)
 80162fc:	f7ff fd7e 	bl	8015dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8016300:	4b02      	ldr	r3, [pc, #8]	; (801630c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016302:	4618      	mov	r0, r3
 8016304:	3708      	adds	r7, #8
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}
 801630a:	bf00      	nop
 801630c:	240028d0 	.word	0x240028d0
 8016310:	080174f8 	.word	0x080174f8

08016314 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	4603      	mov	r3, r0
 801631c:	6039      	str	r1, [r7, #0]
 801631e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016320:	683a      	ldr	r2, [r7, #0]
 8016322:	4904      	ldr	r1, [pc, #16]	; (8016334 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016324:	4804      	ldr	r0, [pc, #16]	; (8016338 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016326:	f7ff fd69 	bl	8015dfc <USBD_GetString>
  return USBD_StrDesc;
 801632a:	4b02      	ldr	r3, [pc, #8]	; (8016334 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801632c:	4618      	mov	r0, r3
 801632e:	3708      	adds	r7, #8
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}
 8016334:	240028d0 	.word	0x240028d0
 8016338:	08017514 	.word	0x08017514

0801633c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	4603      	mov	r3, r0
 8016344:	6039      	str	r1, [r7, #0]
 8016346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	221a      	movs	r2, #26
 801634c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801634e:	f000 f843 	bl	80163d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016352:	4b02      	ldr	r3, [pc, #8]	; (801635c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016354:	4618      	mov	r0, r3
 8016356:	3708      	adds	r7, #8
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}
 801635c:	240000e4 	.word	0x240000e4

08016360 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af00      	add	r7, sp, #0
 8016366:	4603      	mov	r3, r0
 8016368:	6039      	str	r1, [r7, #0]
 801636a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801636c:	79fb      	ldrb	r3, [r7, #7]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d105      	bne.n	801637e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016372:	683a      	ldr	r2, [r7, #0]
 8016374:	4907      	ldr	r1, [pc, #28]	; (8016394 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016376:	4808      	ldr	r0, [pc, #32]	; (8016398 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016378:	f7ff fd40 	bl	8015dfc <USBD_GetString>
 801637c:	e004      	b.n	8016388 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801637e:	683a      	ldr	r2, [r7, #0]
 8016380:	4904      	ldr	r1, [pc, #16]	; (8016394 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016382:	4805      	ldr	r0, [pc, #20]	; (8016398 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016384:	f7ff fd3a 	bl	8015dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8016388:	4b02      	ldr	r3, [pc, #8]	; (8016394 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801638a:	4618      	mov	r0, r3
 801638c:	3708      	adds	r7, #8
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}
 8016392:	bf00      	nop
 8016394:	240028d0 	.word	0x240028d0
 8016398:	08017518 	.word	0x08017518

0801639c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b082      	sub	sp, #8
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	4603      	mov	r3, r0
 80163a4:	6039      	str	r1, [r7, #0]
 80163a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80163a8:	79fb      	ldrb	r3, [r7, #7]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d105      	bne.n	80163ba <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80163ae:	683a      	ldr	r2, [r7, #0]
 80163b0:	4907      	ldr	r1, [pc, #28]	; (80163d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80163b2:	4808      	ldr	r0, [pc, #32]	; (80163d4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80163b4:	f7ff fd22 	bl	8015dfc <USBD_GetString>
 80163b8:	e004      	b.n	80163c4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80163ba:	683a      	ldr	r2, [r7, #0]
 80163bc:	4904      	ldr	r1, [pc, #16]	; (80163d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80163be:	4805      	ldr	r0, [pc, #20]	; (80163d4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80163c0:	f7ff fd1c 	bl	8015dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80163c4:	4b02      	ldr	r3, [pc, #8]	; (80163d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3708      	adds	r7, #8
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
 80163ce:	bf00      	nop
 80163d0:	240028d0 	.word	0x240028d0
 80163d4:	08017524 	.word	0x08017524

080163d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b084      	sub	sp, #16
 80163dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80163de:	4b0f      	ldr	r3, [pc, #60]	; (801641c <Get_SerialNum+0x44>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80163e4:	4b0e      	ldr	r3, [pc, #56]	; (8016420 <Get_SerialNum+0x48>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80163ea:	4b0e      	ldr	r3, [pc, #56]	; (8016424 <Get_SerialNum+0x4c>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80163f0:	68fa      	ldr	r2, [r7, #12]
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4413      	add	r3, r2
 80163f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d009      	beq.n	8016412 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80163fe:	2208      	movs	r2, #8
 8016400:	4909      	ldr	r1, [pc, #36]	; (8016428 <Get_SerialNum+0x50>)
 8016402:	68f8      	ldr	r0, [r7, #12]
 8016404:	f000 f814 	bl	8016430 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016408:	2204      	movs	r2, #4
 801640a:	4908      	ldr	r1, [pc, #32]	; (801642c <Get_SerialNum+0x54>)
 801640c:	68b8      	ldr	r0, [r7, #8]
 801640e:	f000 f80f 	bl	8016430 <IntToUnicode>
  }
}
 8016412:	bf00      	nop
 8016414:	3710      	adds	r7, #16
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	1ff1e800 	.word	0x1ff1e800
 8016420:	1ff1e804 	.word	0x1ff1e804
 8016424:	1ff1e808 	.word	0x1ff1e808
 8016428:	240000e6 	.word	0x240000e6
 801642c:	240000f6 	.word	0x240000f6

08016430 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016430:	b480      	push	{r7}
 8016432:	b087      	sub	sp, #28
 8016434:	af00      	add	r7, sp, #0
 8016436:	60f8      	str	r0, [r7, #12]
 8016438:	60b9      	str	r1, [r7, #8]
 801643a:	4613      	mov	r3, r2
 801643c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801643e:	2300      	movs	r3, #0
 8016440:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016442:	2300      	movs	r3, #0
 8016444:	75fb      	strb	r3, [r7, #23]
 8016446:	e027      	b.n	8016498 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	0f1b      	lsrs	r3, r3, #28
 801644c:	2b09      	cmp	r3, #9
 801644e:	d80b      	bhi.n	8016468 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	0f1b      	lsrs	r3, r3, #28
 8016454:	b2da      	uxtb	r2, r3
 8016456:	7dfb      	ldrb	r3, [r7, #23]
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	4619      	mov	r1, r3
 801645c:	68bb      	ldr	r3, [r7, #8]
 801645e:	440b      	add	r3, r1
 8016460:	3230      	adds	r2, #48	; 0x30
 8016462:	b2d2      	uxtb	r2, r2
 8016464:	701a      	strb	r2, [r3, #0]
 8016466:	e00a      	b.n	801647e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	0f1b      	lsrs	r3, r3, #28
 801646c:	b2da      	uxtb	r2, r3
 801646e:	7dfb      	ldrb	r3, [r7, #23]
 8016470:	005b      	lsls	r3, r3, #1
 8016472:	4619      	mov	r1, r3
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	440b      	add	r3, r1
 8016478:	3237      	adds	r2, #55	; 0x37
 801647a:	b2d2      	uxtb	r2, r2
 801647c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	011b      	lsls	r3, r3, #4
 8016482:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016484:	7dfb      	ldrb	r3, [r7, #23]
 8016486:	005b      	lsls	r3, r3, #1
 8016488:	3301      	adds	r3, #1
 801648a:	68ba      	ldr	r2, [r7, #8]
 801648c:	4413      	add	r3, r2
 801648e:	2200      	movs	r2, #0
 8016490:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	3301      	adds	r3, #1
 8016496:	75fb      	strb	r3, [r7, #23]
 8016498:	7dfa      	ldrb	r2, [r7, #23]
 801649a:	79fb      	ldrb	r3, [r7, #7]
 801649c:	429a      	cmp	r2, r3
 801649e:	d3d3      	bcc.n	8016448 <IntToUnicode+0x18>
  }
}
 80164a0:	bf00      	nop
 80164a2:	bf00      	nop
 80164a4:	371c      	adds	r7, #28
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr
	...

080164b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b0b2      	sub	sp, #200	; 0xc8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80164b8:	f107 0310 	add.w	r3, r7, #16
 80164bc:	22b8      	movs	r2, #184	; 0xb8
 80164be:	2100      	movs	r1, #0
 80164c0:	4618      	mov	r0, r3
 80164c2:	f000 fb21 	bl	8016b08 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	4a1a      	ldr	r2, [pc, #104]	; (8016534 <HAL_PCD_MspInit+0x84>)
 80164cc:	4293      	cmp	r3, r2
 80164ce:	d12c      	bne.n	801652a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80164d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80164d4:	f04f 0300 	mov.w	r3, #0
 80164d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80164dc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80164e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80164e4:	f107 0310 	add.w	r3, r7, #16
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f3 fed3 	bl	800a294 <HAL_RCCEx_PeriphCLKConfig>
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d001      	beq.n	80164f8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80164f4:	f7eb ff50 	bl	8002398 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80164f8:	f7f2 feec 	bl	80092d4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80164fc:	4b0e      	ldr	r3, [pc, #56]	; (8016538 <HAL_PCD_MspInit+0x88>)
 80164fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016502:	4a0d      	ldr	r2, [pc, #52]	; (8016538 <HAL_PCD_MspInit+0x88>)
 8016504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016508:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801650c:	4b0a      	ldr	r3, [pc, #40]	; (8016538 <HAL_PCD_MspInit+0x88>)
 801650e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016516:	60fb      	str	r3, [r7, #12]
 8016518:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801651a:	2200      	movs	r2, #0
 801651c:	2100      	movs	r1, #0
 801651e:	204d      	movs	r0, #77	; 0x4d
 8016520:	f7ee fc5d 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016524:	204d      	movs	r0, #77	; 0x4d
 8016526:	f7ee fc74 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801652a:	bf00      	nop
 801652c:	37c8      	adds	r7, #200	; 0xc8
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	40040000 	.word	0x40040000
 8016538:	58024400 	.word	0x58024400

0801653c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016550:	4619      	mov	r1, r3
 8016552:	4610      	mov	r0, r2
 8016554:	f7fe faed 	bl	8014b32 <USBD_LL_SetupStage>
}
 8016558:	bf00      	nop
 801655a:	3708      	adds	r7, #8
 801655c:	46bd      	mov	sp, r7
 801655e:	bd80      	pop	{r7, pc}

08016560 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b082      	sub	sp, #8
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	460b      	mov	r3, r1
 801656a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016572:	78fa      	ldrb	r2, [r7, #3]
 8016574:	6879      	ldr	r1, [r7, #4]
 8016576:	4613      	mov	r3, r2
 8016578:	00db      	lsls	r3, r3, #3
 801657a:	4413      	add	r3, r2
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	440b      	add	r3, r1
 8016580:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016584:	681a      	ldr	r2, [r3, #0]
 8016586:	78fb      	ldrb	r3, [r7, #3]
 8016588:	4619      	mov	r1, r3
 801658a:	f7fe fb27 	bl	8014bdc <USBD_LL_DataOutStage>
}
 801658e:	bf00      	nop
 8016590:	3708      	adds	r7, #8
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}

08016596 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016596:	b580      	push	{r7, lr}
 8016598:	b082      	sub	sp, #8
 801659a:	af00      	add	r7, sp, #0
 801659c:	6078      	str	r0, [r7, #4]
 801659e:	460b      	mov	r3, r1
 80165a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80165a8:	78fa      	ldrb	r2, [r7, #3]
 80165aa:	6879      	ldr	r1, [r7, #4]
 80165ac:	4613      	mov	r3, r2
 80165ae:	00db      	lsls	r3, r3, #3
 80165b0:	4413      	add	r3, r2
 80165b2:	009b      	lsls	r3, r3, #2
 80165b4:	440b      	add	r3, r1
 80165b6:	3348      	adds	r3, #72	; 0x48
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	78fb      	ldrb	r3, [r7, #3]
 80165bc:	4619      	mov	r1, r3
 80165be:	f7fe fbc0 	bl	8014d42 <USBD_LL_DataInStage>
}
 80165c2:	bf00      	nop
 80165c4:	3708      	adds	r7, #8
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}

080165ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	b082      	sub	sp, #8
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165d8:	4618      	mov	r0, r3
 80165da:	f7fe fcfa 	bl	8014fd2 <USBD_LL_SOF>
}
 80165de:	bf00      	nop
 80165e0:	3708      	adds	r7, #8
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}

080165e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165e6:	b580      	push	{r7, lr}
 80165e8:	b084      	sub	sp, #16
 80165ea:	af00      	add	r7, sp, #0
 80165ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80165ee:	2301      	movs	r3, #1
 80165f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	691b      	ldr	r3, [r3, #16]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d102      	bne.n	8016600 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80165fa:	2300      	movs	r3, #0
 80165fc:	73fb      	strb	r3, [r7, #15]
 80165fe:	e008      	b.n	8016612 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	691b      	ldr	r3, [r3, #16]
 8016604:	2b02      	cmp	r3, #2
 8016606:	d102      	bne.n	801660e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016608:	2301      	movs	r3, #1
 801660a:	73fb      	strb	r3, [r7, #15]
 801660c:	e001      	b.n	8016612 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801660e:	f7eb fec3 	bl	8002398 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016618:	7bfa      	ldrb	r2, [r7, #15]
 801661a:	4611      	mov	r1, r2
 801661c:	4618      	mov	r0, r3
 801661e:	f7fe fc94 	bl	8014f4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016628:	4618      	mov	r0, r3
 801662a:	f7fe fc3c 	bl	8014ea6 <USBD_LL_Reset>
}
 801662e:	bf00      	nop
 8016630:	3710      	adds	r7, #16
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
	...

08016638 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016646:	4618      	mov	r0, r3
 8016648:	f7fe fc8f 	bl	8014f6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	687a      	ldr	r2, [r7, #4]
 8016658:	6812      	ldr	r2, [r2, #0]
 801665a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801665e:	f043 0301 	orr.w	r3, r3, #1
 8016662:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	6a1b      	ldr	r3, [r3, #32]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d005      	beq.n	8016678 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801666c:	4b04      	ldr	r3, [pc, #16]	; (8016680 <HAL_PCD_SuspendCallback+0x48>)
 801666e:	691b      	ldr	r3, [r3, #16]
 8016670:	4a03      	ldr	r2, [pc, #12]	; (8016680 <HAL_PCD_SuspendCallback+0x48>)
 8016672:	f043 0306 	orr.w	r3, r3, #6
 8016676:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	e000ed00 	.word	0xe000ed00

08016684 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016692:	4618      	mov	r0, r3
 8016694:	f7fe fc85 	bl	8014fa2 <USBD_LL_Resume>
}
 8016698:	bf00      	nop
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b082      	sub	sp, #8
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	460b      	mov	r3, r1
 80166aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166b2:	78fa      	ldrb	r2, [r7, #3]
 80166b4:	4611      	mov	r1, r2
 80166b6:	4618      	mov	r0, r3
 80166b8:	f7fe fcdd 	bl	8015076 <USBD_LL_IsoOUTIncomplete>
}
 80166bc:	bf00      	nop
 80166be:	3708      	adds	r7, #8
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}

080166c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	460b      	mov	r3, r1
 80166ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166d6:	78fa      	ldrb	r2, [r7, #3]
 80166d8:	4611      	mov	r1, r2
 80166da:	4618      	mov	r0, r3
 80166dc:	f7fe fc99 	bl	8015012 <USBD_LL_IsoINIncomplete>
}
 80166e0:	bf00      	nop
 80166e2:	3708      	adds	r7, #8
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7fe fcef 	bl	80150da <USBD_LL_DevConnected>
}
 80166fc:	bf00      	nop
 80166fe:	3708      	adds	r7, #8
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016712:	4618      	mov	r0, r3
 8016714:	f7fe fcec 	bl	80150f0 <USBD_LL_DevDisconnected>
}
 8016718:	bf00      	nop
 801671a:	3708      	adds	r7, #8
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}

08016720 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b082      	sub	sp, #8
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	2b01      	cmp	r3, #1
 801672e:	d140      	bne.n	80167b2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016730:	4a22      	ldr	r2, [pc, #136]	; (80167bc <USBD_LL_Init+0x9c>)
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	4a20      	ldr	r2, [pc, #128]	; (80167bc <USBD_LL_Init+0x9c>)
 801673c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016740:	4b1e      	ldr	r3, [pc, #120]	; (80167bc <USBD_LL_Init+0x9c>)
 8016742:	4a1f      	ldr	r2, [pc, #124]	; (80167c0 <USBD_LL_Init+0xa0>)
 8016744:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016746:	4b1d      	ldr	r3, [pc, #116]	; (80167bc <USBD_LL_Init+0x9c>)
 8016748:	2209      	movs	r2, #9
 801674a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801674c:	4b1b      	ldr	r3, [pc, #108]	; (80167bc <USBD_LL_Init+0x9c>)
 801674e:	2202      	movs	r2, #2
 8016750:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016752:	4b1a      	ldr	r3, [pc, #104]	; (80167bc <USBD_LL_Init+0x9c>)
 8016754:	2200      	movs	r2, #0
 8016756:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016758:	4b18      	ldr	r3, [pc, #96]	; (80167bc <USBD_LL_Init+0x9c>)
 801675a:	2202      	movs	r2, #2
 801675c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801675e:	4b17      	ldr	r3, [pc, #92]	; (80167bc <USBD_LL_Init+0x9c>)
 8016760:	2200      	movs	r2, #0
 8016762:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016764:	4b15      	ldr	r3, [pc, #84]	; (80167bc <USBD_LL_Init+0x9c>)
 8016766:	2200      	movs	r2, #0
 8016768:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801676a:	4b14      	ldr	r3, [pc, #80]	; (80167bc <USBD_LL_Init+0x9c>)
 801676c:	2200      	movs	r2, #0
 801676e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016770:	4b12      	ldr	r3, [pc, #72]	; (80167bc <USBD_LL_Init+0x9c>)
 8016772:	2200      	movs	r2, #0
 8016774:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016776:	4b11      	ldr	r3, [pc, #68]	; (80167bc <USBD_LL_Init+0x9c>)
 8016778:	2200      	movs	r2, #0
 801677a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801677c:	4b0f      	ldr	r3, [pc, #60]	; (80167bc <USBD_LL_Init+0x9c>)
 801677e:	2200      	movs	r2, #0
 8016780:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016782:	480e      	ldr	r0, [pc, #56]	; (80167bc <USBD_LL_Init+0x9c>)
 8016784:	f7f1 fab3 	bl	8007cee <HAL_PCD_Init>
 8016788:	4603      	mov	r3, r0
 801678a:	2b00      	cmp	r3, #0
 801678c:	d001      	beq.n	8016792 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801678e:	f7eb fe03 	bl	8002398 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016796:	4809      	ldr	r0, [pc, #36]	; (80167bc <USBD_LL_Init+0x9c>)
 8016798:	f7f2 fd21 	bl	80091de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801679c:	2280      	movs	r2, #128	; 0x80
 801679e:	2100      	movs	r1, #0
 80167a0:	4806      	ldr	r0, [pc, #24]	; (80167bc <USBD_LL_Init+0x9c>)
 80167a2:	f7f2 fcd5 	bl	8009150 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80167a6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80167aa:	2101      	movs	r1, #1
 80167ac:	4803      	ldr	r0, [pc, #12]	; (80167bc <USBD_LL_Init+0x9c>)
 80167ae:	f7f2 fccf 	bl	8009150 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80167b2:	2300      	movs	r3, #0
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	24002ad0 	.word	0x24002ad0
 80167c0:	40040000 	.word	0x40040000

080167c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167cc:	2300      	movs	r3, #0
 80167ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167d0:	2300      	movs	r3, #0
 80167d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f1 fbab 	bl	8007f36 <HAL_PCD_Start>
 80167e0:	4603      	mov	r3, r0
 80167e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167e4:	7bfb      	ldrb	r3, [r7, #15]
 80167e6:	4618      	mov	r0, r3
 80167e8:	f000 f942 	bl	8016a70 <USBD_Get_USB_Status>
 80167ec:	4603      	mov	r3, r0
 80167ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3710      	adds	r7, #16
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b084      	sub	sp, #16
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
 8016802:	4608      	mov	r0, r1
 8016804:	4611      	mov	r1, r2
 8016806:	461a      	mov	r2, r3
 8016808:	4603      	mov	r3, r0
 801680a:	70fb      	strb	r3, [r7, #3]
 801680c:	460b      	mov	r3, r1
 801680e:	70bb      	strb	r3, [r7, #2]
 8016810:	4613      	mov	r3, r2
 8016812:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016814:	2300      	movs	r3, #0
 8016816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016818:	2300      	movs	r3, #0
 801681a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016822:	78bb      	ldrb	r3, [r7, #2]
 8016824:	883a      	ldrh	r2, [r7, #0]
 8016826:	78f9      	ldrb	r1, [r7, #3]
 8016828:	f7f2 f8ab 	bl	8008982 <HAL_PCD_EP_Open>
 801682c:	4603      	mov	r3, r0
 801682e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016830:	7bfb      	ldrb	r3, [r7, #15]
 8016832:	4618      	mov	r0, r3
 8016834:	f000 f91c 	bl	8016a70 <USBD_Get_USB_Status>
 8016838:	4603      	mov	r3, r0
 801683a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801683c:	7bbb      	ldrb	r3, [r7, #14]
}
 801683e:	4618      	mov	r0, r3
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}

08016846 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016846:	b580      	push	{r7, lr}
 8016848:	b084      	sub	sp, #16
 801684a:	af00      	add	r7, sp, #0
 801684c:	6078      	str	r0, [r7, #4]
 801684e:	460b      	mov	r3, r1
 8016850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016852:	2300      	movs	r3, #0
 8016854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016856:	2300      	movs	r3, #0
 8016858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016860:	78fa      	ldrb	r2, [r7, #3]
 8016862:	4611      	mov	r1, r2
 8016864:	4618      	mov	r0, r3
 8016866:	f7f2 f8f4 	bl	8008a52 <HAL_PCD_EP_Close>
 801686a:	4603      	mov	r3, r0
 801686c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801686e:	7bfb      	ldrb	r3, [r7, #15]
 8016870:	4618      	mov	r0, r3
 8016872:	f000 f8fd 	bl	8016a70 <USBD_Get_USB_Status>
 8016876:	4603      	mov	r3, r0
 8016878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801687a:	7bbb      	ldrb	r3, [r7, #14]
}
 801687c:	4618      	mov	r0, r3
 801687e:	3710      	adds	r7, #16
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	460b      	mov	r3, r1
 801688e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016890:	2300      	movs	r3, #0
 8016892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016894:	2300      	movs	r3, #0
 8016896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801689e:	78fa      	ldrb	r2, [r7, #3]
 80168a0:	4611      	mov	r1, r2
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7f2 f9ae 	bl	8008c04 <HAL_PCD_EP_SetStall>
 80168a8:	4603      	mov	r3, r0
 80168aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168ac:	7bfb      	ldrb	r3, [r7, #15]
 80168ae:	4618      	mov	r0, r3
 80168b0:	f000 f8de 	bl	8016a70 <USBD_Get_USB_Status>
 80168b4:	4603      	mov	r3, r0
 80168b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b084      	sub	sp, #16
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
 80168ca:	460b      	mov	r3, r1
 80168cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168ce:	2300      	movs	r3, #0
 80168d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168d2:	2300      	movs	r3, #0
 80168d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80168dc:	78fa      	ldrb	r2, [r7, #3]
 80168de:	4611      	mov	r1, r2
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7f2 f9f3 	bl	8008ccc <HAL_PCD_EP_ClrStall>
 80168e6:	4603      	mov	r3, r0
 80168e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168ea:	7bfb      	ldrb	r3, [r7, #15]
 80168ec:	4618      	mov	r0, r3
 80168ee:	f000 f8bf 	bl	8016a70 <USBD_Get_USB_Status>
 80168f2:	4603      	mov	r3, r0
 80168f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80168f8:	4618      	mov	r0, r3
 80168fa:	3710      	adds	r7, #16
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016900:	b480      	push	{r7}
 8016902:	b085      	sub	sp, #20
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	460b      	mov	r3, r1
 801690a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016912:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016918:	2b00      	cmp	r3, #0
 801691a:	da0b      	bge.n	8016934 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801691c:	78fb      	ldrb	r3, [r7, #3]
 801691e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016922:	68f9      	ldr	r1, [r7, #12]
 8016924:	4613      	mov	r3, r2
 8016926:	00db      	lsls	r3, r3, #3
 8016928:	4413      	add	r3, r2
 801692a:	009b      	lsls	r3, r3, #2
 801692c:	440b      	add	r3, r1
 801692e:	333e      	adds	r3, #62	; 0x3e
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	e00b      	b.n	801694c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016934:	78fb      	ldrb	r3, [r7, #3]
 8016936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801693a:	68f9      	ldr	r1, [r7, #12]
 801693c:	4613      	mov	r3, r2
 801693e:	00db      	lsls	r3, r3, #3
 8016940:	4413      	add	r3, r2
 8016942:	009b      	lsls	r3, r3, #2
 8016944:	440b      	add	r3, r1
 8016946:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801694a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801694c:	4618      	mov	r0, r3
 801694e:	3714      	adds	r7, #20
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b084      	sub	sp, #16
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
 8016960:	460b      	mov	r3, r1
 8016962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016964:	2300      	movs	r3, #0
 8016966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016968:	2300      	movs	r3, #0
 801696a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016972:	78fa      	ldrb	r2, [r7, #3]
 8016974:	4611      	mov	r1, r2
 8016976:	4618      	mov	r0, r3
 8016978:	f7f1 ffde 	bl	8008938 <HAL_PCD_SetAddress>
 801697c:	4603      	mov	r3, r0
 801697e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016980:	7bfb      	ldrb	r3, [r7, #15]
 8016982:	4618      	mov	r0, r3
 8016984:	f000 f874 	bl	8016a70 <USBD_Get_USB_Status>
 8016988:	4603      	mov	r3, r0
 801698a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801698c:	7bbb      	ldrb	r3, [r7, #14]
}
 801698e:	4618      	mov	r0, r3
 8016990:	3710      	adds	r7, #16
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}

08016996 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016996:	b580      	push	{r7, lr}
 8016998:	b086      	sub	sp, #24
 801699a:	af00      	add	r7, sp, #0
 801699c:	60f8      	str	r0, [r7, #12]
 801699e:	607a      	str	r2, [r7, #4]
 80169a0:	603b      	str	r3, [r7, #0]
 80169a2:	460b      	mov	r3, r1
 80169a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169a6:	2300      	movs	r3, #0
 80169a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169aa:	2300      	movs	r3, #0
 80169ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80169b4:	7af9      	ldrb	r1, [r7, #11]
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	687a      	ldr	r2, [r7, #4]
 80169ba:	f7f2 f8e8 	bl	8008b8e <HAL_PCD_EP_Transmit>
 80169be:	4603      	mov	r3, r0
 80169c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169c2:	7dfb      	ldrb	r3, [r7, #23]
 80169c4:	4618      	mov	r0, r3
 80169c6:	f000 f853 	bl	8016a70 <USBD_Get_USB_Status>
 80169ca:	4603      	mov	r3, r0
 80169cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80169ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	3718      	adds	r7, #24
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b086      	sub	sp, #24
 80169dc:	af00      	add	r7, sp, #0
 80169de:	60f8      	str	r0, [r7, #12]
 80169e0:	607a      	str	r2, [r7, #4]
 80169e2:	603b      	str	r3, [r7, #0]
 80169e4:	460b      	mov	r3, r1
 80169e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169e8:	2300      	movs	r3, #0
 80169ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169ec:	2300      	movs	r3, #0
 80169ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80169f6:	7af9      	ldrb	r1, [r7, #11]
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	687a      	ldr	r2, [r7, #4]
 80169fc:	f7f2 f873 	bl	8008ae6 <HAL_PCD_EP_Receive>
 8016a00:	4603      	mov	r3, r0
 8016a02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a04:	7dfb      	ldrb	r3, [r7, #23]
 8016a06:	4618      	mov	r0, r3
 8016a08:	f000 f832 	bl	8016a70 <USBD_Get_USB_Status>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a10:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3718      	adds	r7, #24
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}

08016a1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a1a:	b580      	push	{r7, lr}
 8016a1c:	b082      	sub	sp, #8
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
 8016a22:	460b      	mov	r3, r1
 8016a24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a2c:	78fa      	ldrb	r2, [r7, #3]
 8016a2e:	4611      	mov	r1, r2
 8016a30:	4618      	mov	r0, r3
 8016a32:	f7f2 f894 	bl	8008b5e <HAL_PCD_EP_GetRxCount>
 8016a36:	4603      	mov	r3, r0
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3708      	adds	r7, #8
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}

08016a40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016a48:	4b03      	ldr	r3, [pc, #12]	; (8016a58 <USBD_static_malloc+0x18>)
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	370c      	adds	r7, #12
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop
 8016a58:	24002fdc 	.word	0x24002fdc

08016a5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b083      	sub	sp, #12
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016a64:	bf00      	nop
 8016a66:	370c      	adds	r7, #12
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr

08016a70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016a70:	b480      	push	{r7}
 8016a72:	b085      	sub	sp, #20
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	4603      	mov	r3, r0
 8016a78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016a7e:	79fb      	ldrb	r3, [r7, #7]
 8016a80:	2b03      	cmp	r3, #3
 8016a82:	d817      	bhi.n	8016ab4 <USBD_Get_USB_Status+0x44>
 8016a84:	a201      	add	r2, pc, #4	; (adr r2, 8016a8c <USBD_Get_USB_Status+0x1c>)
 8016a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a8a:	bf00      	nop
 8016a8c:	08016a9d 	.word	0x08016a9d
 8016a90:	08016aa3 	.word	0x08016aa3
 8016a94:	08016aa9 	.word	0x08016aa9
 8016a98:	08016aaf 	.word	0x08016aaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8016aa0:	e00b      	b.n	8016aba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016aa2:	2303      	movs	r3, #3
 8016aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8016aa6:	e008      	b.n	8016aba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8016aac:	e005      	b.n	8016aba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016aae:	2303      	movs	r3, #3
 8016ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ab2:	e002      	b.n	8016aba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ab4:	2303      	movs	r3, #3
 8016ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ab8:	bf00      	nop
  }
  return usb_status;
 8016aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3714      	adds	r7, #20
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <siprintf>:
 8016ac8:	b40e      	push	{r1, r2, r3}
 8016aca:	b500      	push	{lr}
 8016acc:	b09c      	sub	sp, #112	; 0x70
 8016ace:	ab1d      	add	r3, sp, #116	; 0x74
 8016ad0:	9002      	str	r0, [sp, #8]
 8016ad2:	9006      	str	r0, [sp, #24]
 8016ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ad8:	4809      	ldr	r0, [pc, #36]	; (8016b00 <siprintf+0x38>)
 8016ada:	9107      	str	r1, [sp, #28]
 8016adc:	9104      	str	r1, [sp, #16]
 8016ade:	4909      	ldr	r1, [pc, #36]	; (8016b04 <siprintf+0x3c>)
 8016ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ae4:	9105      	str	r1, [sp, #20]
 8016ae6:	6800      	ldr	r0, [r0, #0]
 8016ae8:	9301      	str	r3, [sp, #4]
 8016aea:	a902      	add	r1, sp, #8
 8016aec:	f000 f9a0 	bl	8016e30 <_svfiprintf_r>
 8016af0:	9b02      	ldr	r3, [sp, #8]
 8016af2:	2200      	movs	r2, #0
 8016af4:	701a      	strb	r2, [r3, #0]
 8016af6:	b01c      	add	sp, #112	; 0x70
 8016af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016afc:	b003      	add	sp, #12
 8016afe:	4770      	bx	lr
 8016b00:	2400014c 	.word	0x2400014c
 8016b04:	ffff0208 	.word	0xffff0208

08016b08 <memset>:
 8016b08:	4402      	add	r2, r0
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	4293      	cmp	r3, r2
 8016b0e:	d100      	bne.n	8016b12 <memset+0xa>
 8016b10:	4770      	bx	lr
 8016b12:	f803 1b01 	strb.w	r1, [r3], #1
 8016b16:	e7f9      	b.n	8016b0c <memset+0x4>

08016b18 <__errno>:
 8016b18:	4b01      	ldr	r3, [pc, #4]	; (8016b20 <__errno+0x8>)
 8016b1a:	6818      	ldr	r0, [r3, #0]
 8016b1c:	4770      	bx	lr
 8016b1e:	bf00      	nop
 8016b20:	2400014c 	.word	0x2400014c

08016b24 <__libc_init_array>:
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	4d0d      	ldr	r5, [pc, #52]	; (8016b5c <__libc_init_array+0x38>)
 8016b28:	4c0d      	ldr	r4, [pc, #52]	; (8016b60 <__libc_init_array+0x3c>)
 8016b2a:	1b64      	subs	r4, r4, r5
 8016b2c:	10a4      	asrs	r4, r4, #2
 8016b2e:	2600      	movs	r6, #0
 8016b30:	42a6      	cmp	r6, r4
 8016b32:	d109      	bne.n	8016b48 <__libc_init_array+0x24>
 8016b34:	4d0b      	ldr	r5, [pc, #44]	; (8016b64 <__libc_init_array+0x40>)
 8016b36:	4c0c      	ldr	r4, [pc, #48]	; (8016b68 <__libc_init_array+0x44>)
 8016b38:	f000 fc6a 	bl	8017410 <_init>
 8016b3c:	1b64      	subs	r4, r4, r5
 8016b3e:	10a4      	asrs	r4, r4, #2
 8016b40:	2600      	movs	r6, #0
 8016b42:	42a6      	cmp	r6, r4
 8016b44:	d105      	bne.n	8016b52 <__libc_init_array+0x2e>
 8016b46:	bd70      	pop	{r4, r5, r6, pc}
 8016b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b4c:	4798      	blx	r3
 8016b4e:	3601      	adds	r6, #1
 8016b50:	e7ee      	b.n	8016b30 <__libc_init_array+0xc>
 8016b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b56:	4798      	blx	r3
 8016b58:	3601      	adds	r6, #1
 8016b5a:	e7f2      	b.n	8016b42 <__libc_init_array+0x1e>
 8016b5c:	08017634 	.word	0x08017634
 8016b60:	08017634 	.word	0x08017634
 8016b64:	08017634 	.word	0x08017634
 8016b68:	08017638 	.word	0x08017638

08016b6c <__retarget_lock_acquire_recursive>:
 8016b6c:	4770      	bx	lr

08016b6e <__retarget_lock_release_recursive>:
 8016b6e:	4770      	bx	lr

08016b70 <memcpy>:
 8016b70:	440a      	add	r2, r1
 8016b72:	4291      	cmp	r1, r2
 8016b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b78:	d100      	bne.n	8016b7c <memcpy+0xc>
 8016b7a:	4770      	bx	lr
 8016b7c:	b510      	push	{r4, lr}
 8016b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b86:	4291      	cmp	r1, r2
 8016b88:	d1f9      	bne.n	8016b7e <memcpy+0xe>
 8016b8a:	bd10      	pop	{r4, pc}

08016b8c <_free_r>:
 8016b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b8e:	2900      	cmp	r1, #0
 8016b90:	d044      	beq.n	8016c1c <_free_r+0x90>
 8016b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b96:	9001      	str	r0, [sp, #4]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8016b9e:	bfb8      	it	lt
 8016ba0:	18e4      	addlt	r4, r4, r3
 8016ba2:	f000 f8df 	bl	8016d64 <__malloc_lock>
 8016ba6:	4a1e      	ldr	r2, [pc, #120]	; (8016c20 <_free_r+0x94>)
 8016ba8:	9801      	ldr	r0, [sp, #4]
 8016baa:	6813      	ldr	r3, [r2, #0]
 8016bac:	b933      	cbnz	r3, 8016bbc <_free_r+0x30>
 8016bae:	6063      	str	r3, [r4, #4]
 8016bb0:	6014      	str	r4, [r2, #0]
 8016bb2:	b003      	add	sp, #12
 8016bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016bb8:	f000 b8da 	b.w	8016d70 <__malloc_unlock>
 8016bbc:	42a3      	cmp	r3, r4
 8016bbe:	d908      	bls.n	8016bd2 <_free_r+0x46>
 8016bc0:	6825      	ldr	r5, [r4, #0]
 8016bc2:	1961      	adds	r1, r4, r5
 8016bc4:	428b      	cmp	r3, r1
 8016bc6:	bf01      	itttt	eq
 8016bc8:	6819      	ldreq	r1, [r3, #0]
 8016bca:	685b      	ldreq	r3, [r3, #4]
 8016bcc:	1949      	addeq	r1, r1, r5
 8016bce:	6021      	streq	r1, [r4, #0]
 8016bd0:	e7ed      	b.n	8016bae <_free_r+0x22>
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	685b      	ldr	r3, [r3, #4]
 8016bd6:	b10b      	cbz	r3, 8016bdc <_free_r+0x50>
 8016bd8:	42a3      	cmp	r3, r4
 8016bda:	d9fa      	bls.n	8016bd2 <_free_r+0x46>
 8016bdc:	6811      	ldr	r1, [r2, #0]
 8016bde:	1855      	adds	r5, r2, r1
 8016be0:	42a5      	cmp	r5, r4
 8016be2:	d10b      	bne.n	8016bfc <_free_r+0x70>
 8016be4:	6824      	ldr	r4, [r4, #0]
 8016be6:	4421      	add	r1, r4
 8016be8:	1854      	adds	r4, r2, r1
 8016bea:	42a3      	cmp	r3, r4
 8016bec:	6011      	str	r1, [r2, #0]
 8016bee:	d1e0      	bne.n	8016bb2 <_free_r+0x26>
 8016bf0:	681c      	ldr	r4, [r3, #0]
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	6053      	str	r3, [r2, #4]
 8016bf6:	440c      	add	r4, r1
 8016bf8:	6014      	str	r4, [r2, #0]
 8016bfa:	e7da      	b.n	8016bb2 <_free_r+0x26>
 8016bfc:	d902      	bls.n	8016c04 <_free_r+0x78>
 8016bfe:	230c      	movs	r3, #12
 8016c00:	6003      	str	r3, [r0, #0]
 8016c02:	e7d6      	b.n	8016bb2 <_free_r+0x26>
 8016c04:	6825      	ldr	r5, [r4, #0]
 8016c06:	1961      	adds	r1, r4, r5
 8016c08:	428b      	cmp	r3, r1
 8016c0a:	bf04      	itt	eq
 8016c0c:	6819      	ldreq	r1, [r3, #0]
 8016c0e:	685b      	ldreq	r3, [r3, #4]
 8016c10:	6063      	str	r3, [r4, #4]
 8016c12:	bf04      	itt	eq
 8016c14:	1949      	addeq	r1, r1, r5
 8016c16:	6021      	streq	r1, [r4, #0]
 8016c18:	6054      	str	r4, [r2, #4]
 8016c1a:	e7ca      	b.n	8016bb2 <_free_r+0x26>
 8016c1c:	b003      	add	sp, #12
 8016c1e:	bd30      	pop	{r4, r5, pc}
 8016c20:	2400333c 	.word	0x2400333c

08016c24 <sbrk_aligned>:
 8016c24:	b570      	push	{r4, r5, r6, lr}
 8016c26:	4e0e      	ldr	r6, [pc, #56]	; (8016c60 <sbrk_aligned+0x3c>)
 8016c28:	460c      	mov	r4, r1
 8016c2a:	6831      	ldr	r1, [r6, #0]
 8016c2c:	4605      	mov	r5, r0
 8016c2e:	b911      	cbnz	r1, 8016c36 <sbrk_aligned+0x12>
 8016c30:	f000 fba6 	bl	8017380 <_sbrk_r>
 8016c34:	6030      	str	r0, [r6, #0]
 8016c36:	4621      	mov	r1, r4
 8016c38:	4628      	mov	r0, r5
 8016c3a:	f000 fba1 	bl	8017380 <_sbrk_r>
 8016c3e:	1c43      	adds	r3, r0, #1
 8016c40:	d00a      	beq.n	8016c58 <sbrk_aligned+0x34>
 8016c42:	1cc4      	adds	r4, r0, #3
 8016c44:	f024 0403 	bic.w	r4, r4, #3
 8016c48:	42a0      	cmp	r0, r4
 8016c4a:	d007      	beq.n	8016c5c <sbrk_aligned+0x38>
 8016c4c:	1a21      	subs	r1, r4, r0
 8016c4e:	4628      	mov	r0, r5
 8016c50:	f000 fb96 	bl	8017380 <_sbrk_r>
 8016c54:	3001      	adds	r0, #1
 8016c56:	d101      	bne.n	8016c5c <sbrk_aligned+0x38>
 8016c58:	f04f 34ff 	mov.w	r4, #4294967295
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	bd70      	pop	{r4, r5, r6, pc}
 8016c60:	24003340 	.word	0x24003340

08016c64 <_malloc_r>:
 8016c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c68:	1ccd      	adds	r5, r1, #3
 8016c6a:	f025 0503 	bic.w	r5, r5, #3
 8016c6e:	3508      	adds	r5, #8
 8016c70:	2d0c      	cmp	r5, #12
 8016c72:	bf38      	it	cc
 8016c74:	250c      	movcc	r5, #12
 8016c76:	2d00      	cmp	r5, #0
 8016c78:	4607      	mov	r7, r0
 8016c7a:	db01      	blt.n	8016c80 <_malloc_r+0x1c>
 8016c7c:	42a9      	cmp	r1, r5
 8016c7e:	d905      	bls.n	8016c8c <_malloc_r+0x28>
 8016c80:	230c      	movs	r3, #12
 8016c82:	603b      	str	r3, [r7, #0]
 8016c84:	2600      	movs	r6, #0
 8016c86:	4630      	mov	r0, r6
 8016c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016d60 <_malloc_r+0xfc>
 8016c90:	f000 f868 	bl	8016d64 <__malloc_lock>
 8016c94:	f8d8 3000 	ldr.w	r3, [r8]
 8016c98:	461c      	mov	r4, r3
 8016c9a:	bb5c      	cbnz	r4, 8016cf4 <_malloc_r+0x90>
 8016c9c:	4629      	mov	r1, r5
 8016c9e:	4638      	mov	r0, r7
 8016ca0:	f7ff ffc0 	bl	8016c24 <sbrk_aligned>
 8016ca4:	1c43      	adds	r3, r0, #1
 8016ca6:	4604      	mov	r4, r0
 8016ca8:	d155      	bne.n	8016d56 <_malloc_r+0xf2>
 8016caa:	f8d8 4000 	ldr.w	r4, [r8]
 8016cae:	4626      	mov	r6, r4
 8016cb0:	2e00      	cmp	r6, #0
 8016cb2:	d145      	bne.n	8016d40 <_malloc_r+0xdc>
 8016cb4:	2c00      	cmp	r4, #0
 8016cb6:	d048      	beq.n	8016d4a <_malloc_r+0xe6>
 8016cb8:	6823      	ldr	r3, [r4, #0]
 8016cba:	4631      	mov	r1, r6
 8016cbc:	4638      	mov	r0, r7
 8016cbe:	eb04 0903 	add.w	r9, r4, r3
 8016cc2:	f000 fb5d 	bl	8017380 <_sbrk_r>
 8016cc6:	4581      	cmp	r9, r0
 8016cc8:	d13f      	bne.n	8016d4a <_malloc_r+0xe6>
 8016cca:	6821      	ldr	r1, [r4, #0]
 8016ccc:	1a6d      	subs	r5, r5, r1
 8016cce:	4629      	mov	r1, r5
 8016cd0:	4638      	mov	r0, r7
 8016cd2:	f7ff ffa7 	bl	8016c24 <sbrk_aligned>
 8016cd6:	3001      	adds	r0, #1
 8016cd8:	d037      	beq.n	8016d4a <_malloc_r+0xe6>
 8016cda:	6823      	ldr	r3, [r4, #0]
 8016cdc:	442b      	add	r3, r5
 8016cde:	6023      	str	r3, [r4, #0]
 8016ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d038      	beq.n	8016d5a <_malloc_r+0xf6>
 8016ce8:	685a      	ldr	r2, [r3, #4]
 8016cea:	42a2      	cmp	r2, r4
 8016cec:	d12b      	bne.n	8016d46 <_malloc_r+0xe2>
 8016cee:	2200      	movs	r2, #0
 8016cf0:	605a      	str	r2, [r3, #4]
 8016cf2:	e00f      	b.n	8016d14 <_malloc_r+0xb0>
 8016cf4:	6822      	ldr	r2, [r4, #0]
 8016cf6:	1b52      	subs	r2, r2, r5
 8016cf8:	d41f      	bmi.n	8016d3a <_malloc_r+0xd6>
 8016cfa:	2a0b      	cmp	r2, #11
 8016cfc:	d917      	bls.n	8016d2e <_malloc_r+0xca>
 8016cfe:	1961      	adds	r1, r4, r5
 8016d00:	42a3      	cmp	r3, r4
 8016d02:	6025      	str	r5, [r4, #0]
 8016d04:	bf18      	it	ne
 8016d06:	6059      	strne	r1, [r3, #4]
 8016d08:	6863      	ldr	r3, [r4, #4]
 8016d0a:	bf08      	it	eq
 8016d0c:	f8c8 1000 	streq.w	r1, [r8]
 8016d10:	5162      	str	r2, [r4, r5]
 8016d12:	604b      	str	r3, [r1, #4]
 8016d14:	4638      	mov	r0, r7
 8016d16:	f104 060b 	add.w	r6, r4, #11
 8016d1a:	f000 f829 	bl	8016d70 <__malloc_unlock>
 8016d1e:	f026 0607 	bic.w	r6, r6, #7
 8016d22:	1d23      	adds	r3, r4, #4
 8016d24:	1af2      	subs	r2, r6, r3
 8016d26:	d0ae      	beq.n	8016c86 <_malloc_r+0x22>
 8016d28:	1b9b      	subs	r3, r3, r6
 8016d2a:	50a3      	str	r3, [r4, r2]
 8016d2c:	e7ab      	b.n	8016c86 <_malloc_r+0x22>
 8016d2e:	42a3      	cmp	r3, r4
 8016d30:	6862      	ldr	r2, [r4, #4]
 8016d32:	d1dd      	bne.n	8016cf0 <_malloc_r+0x8c>
 8016d34:	f8c8 2000 	str.w	r2, [r8]
 8016d38:	e7ec      	b.n	8016d14 <_malloc_r+0xb0>
 8016d3a:	4623      	mov	r3, r4
 8016d3c:	6864      	ldr	r4, [r4, #4]
 8016d3e:	e7ac      	b.n	8016c9a <_malloc_r+0x36>
 8016d40:	4634      	mov	r4, r6
 8016d42:	6876      	ldr	r6, [r6, #4]
 8016d44:	e7b4      	b.n	8016cb0 <_malloc_r+0x4c>
 8016d46:	4613      	mov	r3, r2
 8016d48:	e7cc      	b.n	8016ce4 <_malloc_r+0x80>
 8016d4a:	230c      	movs	r3, #12
 8016d4c:	603b      	str	r3, [r7, #0]
 8016d4e:	4638      	mov	r0, r7
 8016d50:	f000 f80e 	bl	8016d70 <__malloc_unlock>
 8016d54:	e797      	b.n	8016c86 <_malloc_r+0x22>
 8016d56:	6025      	str	r5, [r4, #0]
 8016d58:	e7dc      	b.n	8016d14 <_malloc_r+0xb0>
 8016d5a:	605b      	str	r3, [r3, #4]
 8016d5c:	deff      	udf	#255	; 0xff
 8016d5e:	bf00      	nop
 8016d60:	2400333c 	.word	0x2400333c

08016d64 <__malloc_lock>:
 8016d64:	4801      	ldr	r0, [pc, #4]	; (8016d6c <__malloc_lock+0x8>)
 8016d66:	f7ff bf01 	b.w	8016b6c <__retarget_lock_acquire_recursive>
 8016d6a:	bf00      	nop
 8016d6c:	24003338 	.word	0x24003338

08016d70 <__malloc_unlock>:
 8016d70:	4801      	ldr	r0, [pc, #4]	; (8016d78 <__malloc_unlock+0x8>)
 8016d72:	f7ff befc 	b.w	8016b6e <__retarget_lock_release_recursive>
 8016d76:	bf00      	nop
 8016d78:	24003338 	.word	0x24003338

08016d7c <__ssputs_r>:
 8016d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d80:	688e      	ldr	r6, [r1, #8]
 8016d82:	461f      	mov	r7, r3
 8016d84:	42be      	cmp	r6, r7
 8016d86:	680b      	ldr	r3, [r1, #0]
 8016d88:	4682      	mov	sl, r0
 8016d8a:	460c      	mov	r4, r1
 8016d8c:	4690      	mov	r8, r2
 8016d8e:	d82c      	bhi.n	8016dea <__ssputs_r+0x6e>
 8016d90:	898a      	ldrh	r2, [r1, #12]
 8016d92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d96:	d026      	beq.n	8016de6 <__ssputs_r+0x6a>
 8016d98:	6965      	ldr	r5, [r4, #20]
 8016d9a:	6909      	ldr	r1, [r1, #16]
 8016d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016da0:	eba3 0901 	sub.w	r9, r3, r1
 8016da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016da8:	1c7b      	adds	r3, r7, #1
 8016daa:	444b      	add	r3, r9
 8016dac:	106d      	asrs	r5, r5, #1
 8016dae:	429d      	cmp	r5, r3
 8016db0:	bf38      	it	cc
 8016db2:	461d      	movcc	r5, r3
 8016db4:	0553      	lsls	r3, r2, #21
 8016db6:	d527      	bpl.n	8016e08 <__ssputs_r+0x8c>
 8016db8:	4629      	mov	r1, r5
 8016dba:	f7ff ff53 	bl	8016c64 <_malloc_r>
 8016dbe:	4606      	mov	r6, r0
 8016dc0:	b360      	cbz	r0, 8016e1c <__ssputs_r+0xa0>
 8016dc2:	6921      	ldr	r1, [r4, #16]
 8016dc4:	464a      	mov	r2, r9
 8016dc6:	f7ff fed3 	bl	8016b70 <memcpy>
 8016dca:	89a3      	ldrh	r3, [r4, #12]
 8016dcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dd4:	81a3      	strh	r3, [r4, #12]
 8016dd6:	6126      	str	r6, [r4, #16]
 8016dd8:	6165      	str	r5, [r4, #20]
 8016dda:	444e      	add	r6, r9
 8016ddc:	eba5 0509 	sub.w	r5, r5, r9
 8016de0:	6026      	str	r6, [r4, #0]
 8016de2:	60a5      	str	r5, [r4, #8]
 8016de4:	463e      	mov	r6, r7
 8016de6:	42be      	cmp	r6, r7
 8016de8:	d900      	bls.n	8016dec <__ssputs_r+0x70>
 8016dea:	463e      	mov	r6, r7
 8016dec:	6820      	ldr	r0, [r4, #0]
 8016dee:	4632      	mov	r2, r6
 8016df0:	4641      	mov	r1, r8
 8016df2:	f000 faab 	bl	801734c <memmove>
 8016df6:	68a3      	ldr	r3, [r4, #8]
 8016df8:	1b9b      	subs	r3, r3, r6
 8016dfa:	60a3      	str	r3, [r4, #8]
 8016dfc:	6823      	ldr	r3, [r4, #0]
 8016dfe:	4433      	add	r3, r6
 8016e00:	6023      	str	r3, [r4, #0]
 8016e02:	2000      	movs	r0, #0
 8016e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e08:	462a      	mov	r2, r5
 8016e0a:	f000 fac9 	bl	80173a0 <_realloc_r>
 8016e0e:	4606      	mov	r6, r0
 8016e10:	2800      	cmp	r0, #0
 8016e12:	d1e0      	bne.n	8016dd6 <__ssputs_r+0x5a>
 8016e14:	6921      	ldr	r1, [r4, #16]
 8016e16:	4650      	mov	r0, sl
 8016e18:	f7ff feb8 	bl	8016b8c <_free_r>
 8016e1c:	230c      	movs	r3, #12
 8016e1e:	f8ca 3000 	str.w	r3, [sl]
 8016e22:	89a3      	ldrh	r3, [r4, #12]
 8016e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e28:	81a3      	strh	r3, [r4, #12]
 8016e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e2e:	e7e9      	b.n	8016e04 <__ssputs_r+0x88>

08016e30 <_svfiprintf_r>:
 8016e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e34:	4698      	mov	r8, r3
 8016e36:	898b      	ldrh	r3, [r1, #12]
 8016e38:	061b      	lsls	r3, r3, #24
 8016e3a:	b09d      	sub	sp, #116	; 0x74
 8016e3c:	4607      	mov	r7, r0
 8016e3e:	460d      	mov	r5, r1
 8016e40:	4614      	mov	r4, r2
 8016e42:	d50e      	bpl.n	8016e62 <_svfiprintf_r+0x32>
 8016e44:	690b      	ldr	r3, [r1, #16]
 8016e46:	b963      	cbnz	r3, 8016e62 <_svfiprintf_r+0x32>
 8016e48:	2140      	movs	r1, #64	; 0x40
 8016e4a:	f7ff ff0b 	bl	8016c64 <_malloc_r>
 8016e4e:	6028      	str	r0, [r5, #0]
 8016e50:	6128      	str	r0, [r5, #16]
 8016e52:	b920      	cbnz	r0, 8016e5e <_svfiprintf_r+0x2e>
 8016e54:	230c      	movs	r3, #12
 8016e56:	603b      	str	r3, [r7, #0]
 8016e58:	f04f 30ff 	mov.w	r0, #4294967295
 8016e5c:	e0d0      	b.n	8017000 <_svfiprintf_r+0x1d0>
 8016e5e:	2340      	movs	r3, #64	; 0x40
 8016e60:	616b      	str	r3, [r5, #20]
 8016e62:	2300      	movs	r3, #0
 8016e64:	9309      	str	r3, [sp, #36]	; 0x24
 8016e66:	2320      	movs	r3, #32
 8016e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e70:	2330      	movs	r3, #48	; 0x30
 8016e72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017018 <_svfiprintf_r+0x1e8>
 8016e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e7a:	f04f 0901 	mov.w	r9, #1
 8016e7e:	4623      	mov	r3, r4
 8016e80:	469a      	mov	sl, r3
 8016e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e86:	b10a      	cbz	r2, 8016e8c <_svfiprintf_r+0x5c>
 8016e88:	2a25      	cmp	r2, #37	; 0x25
 8016e8a:	d1f9      	bne.n	8016e80 <_svfiprintf_r+0x50>
 8016e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8016e90:	d00b      	beq.n	8016eaa <_svfiprintf_r+0x7a>
 8016e92:	465b      	mov	r3, fp
 8016e94:	4622      	mov	r2, r4
 8016e96:	4629      	mov	r1, r5
 8016e98:	4638      	mov	r0, r7
 8016e9a:	f7ff ff6f 	bl	8016d7c <__ssputs_r>
 8016e9e:	3001      	adds	r0, #1
 8016ea0:	f000 80a9 	beq.w	8016ff6 <_svfiprintf_r+0x1c6>
 8016ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ea6:	445a      	add	r2, fp
 8016ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8016eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	f000 80a1 	beq.w	8016ff6 <_svfiprintf_r+0x1c6>
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8016eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ebe:	f10a 0a01 	add.w	sl, sl, #1
 8016ec2:	9304      	str	r3, [sp, #16]
 8016ec4:	9307      	str	r3, [sp, #28]
 8016ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016eca:	931a      	str	r3, [sp, #104]	; 0x68
 8016ecc:	4654      	mov	r4, sl
 8016ece:	2205      	movs	r2, #5
 8016ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ed4:	4850      	ldr	r0, [pc, #320]	; (8017018 <_svfiprintf_r+0x1e8>)
 8016ed6:	f7e9 fa23 	bl	8000320 <memchr>
 8016eda:	9a04      	ldr	r2, [sp, #16]
 8016edc:	b9d8      	cbnz	r0, 8016f16 <_svfiprintf_r+0xe6>
 8016ede:	06d0      	lsls	r0, r2, #27
 8016ee0:	bf44      	itt	mi
 8016ee2:	2320      	movmi	r3, #32
 8016ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ee8:	0711      	lsls	r1, r2, #28
 8016eea:	bf44      	itt	mi
 8016eec:	232b      	movmi	r3, #43	; 0x2b
 8016eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8016ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8016ef8:	d015      	beq.n	8016f26 <_svfiprintf_r+0xf6>
 8016efa:	9a07      	ldr	r2, [sp, #28]
 8016efc:	4654      	mov	r4, sl
 8016efe:	2000      	movs	r0, #0
 8016f00:	f04f 0c0a 	mov.w	ip, #10
 8016f04:	4621      	mov	r1, r4
 8016f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f0a:	3b30      	subs	r3, #48	; 0x30
 8016f0c:	2b09      	cmp	r3, #9
 8016f0e:	d94d      	bls.n	8016fac <_svfiprintf_r+0x17c>
 8016f10:	b1b0      	cbz	r0, 8016f40 <_svfiprintf_r+0x110>
 8016f12:	9207      	str	r2, [sp, #28]
 8016f14:	e014      	b.n	8016f40 <_svfiprintf_r+0x110>
 8016f16:	eba0 0308 	sub.w	r3, r0, r8
 8016f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8016f1e:	4313      	orrs	r3, r2
 8016f20:	9304      	str	r3, [sp, #16]
 8016f22:	46a2      	mov	sl, r4
 8016f24:	e7d2      	b.n	8016ecc <_svfiprintf_r+0x9c>
 8016f26:	9b03      	ldr	r3, [sp, #12]
 8016f28:	1d19      	adds	r1, r3, #4
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	9103      	str	r1, [sp, #12]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	bfbb      	ittet	lt
 8016f32:	425b      	neglt	r3, r3
 8016f34:	f042 0202 	orrlt.w	r2, r2, #2
 8016f38:	9307      	strge	r3, [sp, #28]
 8016f3a:	9307      	strlt	r3, [sp, #28]
 8016f3c:	bfb8      	it	lt
 8016f3e:	9204      	strlt	r2, [sp, #16]
 8016f40:	7823      	ldrb	r3, [r4, #0]
 8016f42:	2b2e      	cmp	r3, #46	; 0x2e
 8016f44:	d10c      	bne.n	8016f60 <_svfiprintf_r+0x130>
 8016f46:	7863      	ldrb	r3, [r4, #1]
 8016f48:	2b2a      	cmp	r3, #42	; 0x2a
 8016f4a:	d134      	bne.n	8016fb6 <_svfiprintf_r+0x186>
 8016f4c:	9b03      	ldr	r3, [sp, #12]
 8016f4e:	1d1a      	adds	r2, r3, #4
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	9203      	str	r2, [sp, #12]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	bfb8      	it	lt
 8016f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f5c:	3402      	adds	r4, #2
 8016f5e:	9305      	str	r3, [sp, #20]
 8016f60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017028 <_svfiprintf_r+0x1f8>
 8016f64:	7821      	ldrb	r1, [r4, #0]
 8016f66:	2203      	movs	r2, #3
 8016f68:	4650      	mov	r0, sl
 8016f6a:	f7e9 f9d9 	bl	8000320 <memchr>
 8016f6e:	b138      	cbz	r0, 8016f80 <_svfiprintf_r+0x150>
 8016f70:	9b04      	ldr	r3, [sp, #16]
 8016f72:	eba0 000a 	sub.w	r0, r0, sl
 8016f76:	2240      	movs	r2, #64	; 0x40
 8016f78:	4082      	lsls	r2, r0
 8016f7a:	4313      	orrs	r3, r2
 8016f7c:	3401      	adds	r4, #1
 8016f7e:	9304      	str	r3, [sp, #16]
 8016f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f84:	4825      	ldr	r0, [pc, #148]	; (801701c <_svfiprintf_r+0x1ec>)
 8016f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f8a:	2206      	movs	r2, #6
 8016f8c:	f7e9 f9c8 	bl	8000320 <memchr>
 8016f90:	2800      	cmp	r0, #0
 8016f92:	d038      	beq.n	8017006 <_svfiprintf_r+0x1d6>
 8016f94:	4b22      	ldr	r3, [pc, #136]	; (8017020 <_svfiprintf_r+0x1f0>)
 8016f96:	bb1b      	cbnz	r3, 8016fe0 <_svfiprintf_r+0x1b0>
 8016f98:	9b03      	ldr	r3, [sp, #12]
 8016f9a:	3307      	adds	r3, #7
 8016f9c:	f023 0307 	bic.w	r3, r3, #7
 8016fa0:	3308      	adds	r3, #8
 8016fa2:	9303      	str	r3, [sp, #12]
 8016fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fa6:	4433      	add	r3, r6
 8016fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8016faa:	e768      	b.n	8016e7e <_svfiprintf_r+0x4e>
 8016fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fb0:	460c      	mov	r4, r1
 8016fb2:	2001      	movs	r0, #1
 8016fb4:	e7a6      	b.n	8016f04 <_svfiprintf_r+0xd4>
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	3401      	adds	r4, #1
 8016fba:	9305      	str	r3, [sp, #20]
 8016fbc:	4619      	mov	r1, r3
 8016fbe:	f04f 0c0a 	mov.w	ip, #10
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fc8:	3a30      	subs	r2, #48	; 0x30
 8016fca:	2a09      	cmp	r2, #9
 8016fcc:	d903      	bls.n	8016fd6 <_svfiprintf_r+0x1a6>
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d0c6      	beq.n	8016f60 <_svfiprintf_r+0x130>
 8016fd2:	9105      	str	r1, [sp, #20]
 8016fd4:	e7c4      	b.n	8016f60 <_svfiprintf_r+0x130>
 8016fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8016fda:	4604      	mov	r4, r0
 8016fdc:	2301      	movs	r3, #1
 8016fde:	e7f0      	b.n	8016fc2 <_svfiprintf_r+0x192>
 8016fe0:	ab03      	add	r3, sp, #12
 8016fe2:	9300      	str	r3, [sp, #0]
 8016fe4:	462a      	mov	r2, r5
 8016fe6:	4b0f      	ldr	r3, [pc, #60]	; (8017024 <_svfiprintf_r+0x1f4>)
 8016fe8:	a904      	add	r1, sp, #16
 8016fea:	4638      	mov	r0, r7
 8016fec:	f3af 8000 	nop.w
 8016ff0:	1c42      	adds	r2, r0, #1
 8016ff2:	4606      	mov	r6, r0
 8016ff4:	d1d6      	bne.n	8016fa4 <_svfiprintf_r+0x174>
 8016ff6:	89ab      	ldrh	r3, [r5, #12]
 8016ff8:	065b      	lsls	r3, r3, #25
 8016ffa:	f53f af2d 	bmi.w	8016e58 <_svfiprintf_r+0x28>
 8016ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017000:	b01d      	add	sp, #116	; 0x74
 8017002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017006:	ab03      	add	r3, sp, #12
 8017008:	9300      	str	r3, [sp, #0]
 801700a:	462a      	mov	r2, r5
 801700c:	4b05      	ldr	r3, [pc, #20]	; (8017024 <_svfiprintf_r+0x1f4>)
 801700e:	a904      	add	r1, sp, #16
 8017010:	4638      	mov	r0, r7
 8017012:	f000 f879 	bl	8017108 <_printf_i>
 8017016:	e7eb      	b.n	8016ff0 <_svfiprintf_r+0x1c0>
 8017018:	080175f8 	.word	0x080175f8
 801701c:	08017602 	.word	0x08017602
 8017020:	00000000 	.word	0x00000000
 8017024:	08016d7d 	.word	0x08016d7d
 8017028:	080175fe 	.word	0x080175fe

0801702c <_printf_common>:
 801702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017030:	4616      	mov	r6, r2
 8017032:	4699      	mov	r9, r3
 8017034:	688a      	ldr	r2, [r1, #8]
 8017036:	690b      	ldr	r3, [r1, #16]
 8017038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801703c:	4293      	cmp	r3, r2
 801703e:	bfb8      	it	lt
 8017040:	4613      	movlt	r3, r2
 8017042:	6033      	str	r3, [r6, #0]
 8017044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017048:	4607      	mov	r7, r0
 801704a:	460c      	mov	r4, r1
 801704c:	b10a      	cbz	r2, 8017052 <_printf_common+0x26>
 801704e:	3301      	adds	r3, #1
 8017050:	6033      	str	r3, [r6, #0]
 8017052:	6823      	ldr	r3, [r4, #0]
 8017054:	0699      	lsls	r1, r3, #26
 8017056:	bf42      	ittt	mi
 8017058:	6833      	ldrmi	r3, [r6, #0]
 801705a:	3302      	addmi	r3, #2
 801705c:	6033      	strmi	r3, [r6, #0]
 801705e:	6825      	ldr	r5, [r4, #0]
 8017060:	f015 0506 	ands.w	r5, r5, #6
 8017064:	d106      	bne.n	8017074 <_printf_common+0x48>
 8017066:	f104 0a19 	add.w	sl, r4, #25
 801706a:	68e3      	ldr	r3, [r4, #12]
 801706c:	6832      	ldr	r2, [r6, #0]
 801706e:	1a9b      	subs	r3, r3, r2
 8017070:	42ab      	cmp	r3, r5
 8017072:	dc26      	bgt.n	80170c2 <_printf_common+0x96>
 8017074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017078:	1e13      	subs	r3, r2, #0
 801707a:	6822      	ldr	r2, [r4, #0]
 801707c:	bf18      	it	ne
 801707e:	2301      	movne	r3, #1
 8017080:	0692      	lsls	r2, r2, #26
 8017082:	d42b      	bmi.n	80170dc <_printf_common+0xb0>
 8017084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017088:	4649      	mov	r1, r9
 801708a:	4638      	mov	r0, r7
 801708c:	47c0      	blx	r8
 801708e:	3001      	adds	r0, #1
 8017090:	d01e      	beq.n	80170d0 <_printf_common+0xa4>
 8017092:	6823      	ldr	r3, [r4, #0]
 8017094:	6922      	ldr	r2, [r4, #16]
 8017096:	f003 0306 	and.w	r3, r3, #6
 801709a:	2b04      	cmp	r3, #4
 801709c:	bf02      	ittt	eq
 801709e:	68e5      	ldreq	r5, [r4, #12]
 80170a0:	6833      	ldreq	r3, [r6, #0]
 80170a2:	1aed      	subeq	r5, r5, r3
 80170a4:	68a3      	ldr	r3, [r4, #8]
 80170a6:	bf0c      	ite	eq
 80170a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80170ac:	2500      	movne	r5, #0
 80170ae:	4293      	cmp	r3, r2
 80170b0:	bfc4      	itt	gt
 80170b2:	1a9b      	subgt	r3, r3, r2
 80170b4:	18ed      	addgt	r5, r5, r3
 80170b6:	2600      	movs	r6, #0
 80170b8:	341a      	adds	r4, #26
 80170ba:	42b5      	cmp	r5, r6
 80170bc:	d11a      	bne.n	80170f4 <_printf_common+0xc8>
 80170be:	2000      	movs	r0, #0
 80170c0:	e008      	b.n	80170d4 <_printf_common+0xa8>
 80170c2:	2301      	movs	r3, #1
 80170c4:	4652      	mov	r2, sl
 80170c6:	4649      	mov	r1, r9
 80170c8:	4638      	mov	r0, r7
 80170ca:	47c0      	blx	r8
 80170cc:	3001      	adds	r0, #1
 80170ce:	d103      	bne.n	80170d8 <_printf_common+0xac>
 80170d0:	f04f 30ff 	mov.w	r0, #4294967295
 80170d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170d8:	3501      	adds	r5, #1
 80170da:	e7c6      	b.n	801706a <_printf_common+0x3e>
 80170dc:	18e1      	adds	r1, r4, r3
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	2030      	movs	r0, #48	; 0x30
 80170e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80170e6:	4422      	add	r2, r4
 80170e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80170ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80170f0:	3302      	adds	r3, #2
 80170f2:	e7c7      	b.n	8017084 <_printf_common+0x58>
 80170f4:	2301      	movs	r3, #1
 80170f6:	4622      	mov	r2, r4
 80170f8:	4649      	mov	r1, r9
 80170fa:	4638      	mov	r0, r7
 80170fc:	47c0      	blx	r8
 80170fe:	3001      	adds	r0, #1
 8017100:	d0e6      	beq.n	80170d0 <_printf_common+0xa4>
 8017102:	3601      	adds	r6, #1
 8017104:	e7d9      	b.n	80170ba <_printf_common+0x8e>
	...

08017108 <_printf_i>:
 8017108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801710c:	7e0f      	ldrb	r7, [r1, #24]
 801710e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017110:	2f78      	cmp	r7, #120	; 0x78
 8017112:	4691      	mov	r9, r2
 8017114:	4680      	mov	r8, r0
 8017116:	460c      	mov	r4, r1
 8017118:	469a      	mov	sl, r3
 801711a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801711e:	d807      	bhi.n	8017130 <_printf_i+0x28>
 8017120:	2f62      	cmp	r7, #98	; 0x62
 8017122:	d80a      	bhi.n	801713a <_printf_i+0x32>
 8017124:	2f00      	cmp	r7, #0
 8017126:	f000 80d4 	beq.w	80172d2 <_printf_i+0x1ca>
 801712a:	2f58      	cmp	r7, #88	; 0x58
 801712c:	f000 80c0 	beq.w	80172b0 <_printf_i+0x1a8>
 8017130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017138:	e03a      	b.n	80171b0 <_printf_i+0xa8>
 801713a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801713e:	2b15      	cmp	r3, #21
 8017140:	d8f6      	bhi.n	8017130 <_printf_i+0x28>
 8017142:	a101      	add	r1, pc, #4	; (adr r1, 8017148 <_printf_i+0x40>)
 8017144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017148:	080171a1 	.word	0x080171a1
 801714c:	080171b5 	.word	0x080171b5
 8017150:	08017131 	.word	0x08017131
 8017154:	08017131 	.word	0x08017131
 8017158:	08017131 	.word	0x08017131
 801715c:	08017131 	.word	0x08017131
 8017160:	080171b5 	.word	0x080171b5
 8017164:	08017131 	.word	0x08017131
 8017168:	08017131 	.word	0x08017131
 801716c:	08017131 	.word	0x08017131
 8017170:	08017131 	.word	0x08017131
 8017174:	080172b9 	.word	0x080172b9
 8017178:	080171e1 	.word	0x080171e1
 801717c:	08017273 	.word	0x08017273
 8017180:	08017131 	.word	0x08017131
 8017184:	08017131 	.word	0x08017131
 8017188:	080172db 	.word	0x080172db
 801718c:	08017131 	.word	0x08017131
 8017190:	080171e1 	.word	0x080171e1
 8017194:	08017131 	.word	0x08017131
 8017198:	08017131 	.word	0x08017131
 801719c:	0801727b 	.word	0x0801727b
 80171a0:	682b      	ldr	r3, [r5, #0]
 80171a2:	1d1a      	adds	r2, r3, #4
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	602a      	str	r2, [r5, #0]
 80171a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80171b0:	2301      	movs	r3, #1
 80171b2:	e09f      	b.n	80172f4 <_printf_i+0x1ec>
 80171b4:	6820      	ldr	r0, [r4, #0]
 80171b6:	682b      	ldr	r3, [r5, #0]
 80171b8:	0607      	lsls	r7, r0, #24
 80171ba:	f103 0104 	add.w	r1, r3, #4
 80171be:	6029      	str	r1, [r5, #0]
 80171c0:	d501      	bpl.n	80171c6 <_printf_i+0xbe>
 80171c2:	681e      	ldr	r6, [r3, #0]
 80171c4:	e003      	b.n	80171ce <_printf_i+0xc6>
 80171c6:	0646      	lsls	r6, r0, #25
 80171c8:	d5fb      	bpl.n	80171c2 <_printf_i+0xba>
 80171ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80171ce:	2e00      	cmp	r6, #0
 80171d0:	da03      	bge.n	80171da <_printf_i+0xd2>
 80171d2:	232d      	movs	r3, #45	; 0x2d
 80171d4:	4276      	negs	r6, r6
 80171d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171da:	485a      	ldr	r0, [pc, #360]	; (8017344 <_printf_i+0x23c>)
 80171dc:	230a      	movs	r3, #10
 80171de:	e012      	b.n	8017206 <_printf_i+0xfe>
 80171e0:	682b      	ldr	r3, [r5, #0]
 80171e2:	6820      	ldr	r0, [r4, #0]
 80171e4:	1d19      	adds	r1, r3, #4
 80171e6:	6029      	str	r1, [r5, #0]
 80171e8:	0605      	lsls	r5, r0, #24
 80171ea:	d501      	bpl.n	80171f0 <_printf_i+0xe8>
 80171ec:	681e      	ldr	r6, [r3, #0]
 80171ee:	e002      	b.n	80171f6 <_printf_i+0xee>
 80171f0:	0641      	lsls	r1, r0, #25
 80171f2:	d5fb      	bpl.n	80171ec <_printf_i+0xe4>
 80171f4:	881e      	ldrh	r6, [r3, #0]
 80171f6:	4853      	ldr	r0, [pc, #332]	; (8017344 <_printf_i+0x23c>)
 80171f8:	2f6f      	cmp	r7, #111	; 0x6f
 80171fa:	bf0c      	ite	eq
 80171fc:	2308      	moveq	r3, #8
 80171fe:	230a      	movne	r3, #10
 8017200:	2100      	movs	r1, #0
 8017202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017206:	6865      	ldr	r5, [r4, #4]
 8017208:	60a5      	str	r5, [r4, #8]
 801720a:	2d00      	cmp	r5, #0
 801720c:	bfa2      	ittt	ge
 801720e:	6821      	ldrge	r1, [r4, #0]
 8017210:	f021 0104 	bicge.w	r1, r1, #4
 8017214:	6021      	strge	r1, [r4, #0]
 8017216:	b90e      	cbnz	r6, 801721c <_printf_i+0x114>
 8017218:	2d00      	cmp	r5, #0
 801721a:	d04b      	beq.n	80172b4 <_printf_i+0x1ac>
 801721c:	4615      	mov	r5, r2
 801721e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017222:	fb03 6711 	mls	r7, r3, r1, r6
 8017226:	5dc7      	ldrb	r7, [r0, r7]
 8017228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801722c:	4637      	mov	r7, r6
 801722e:	42bb      	cmp	r3, r7
 8017230:	460e      	mov	r6, r1
 8017232:	d9f4      	bls.n	801721e <_printf_i+0x116>
 8017234:	2b08      	cmp	r3, #8
 8017236:	d10b      	bne.n	8017250 <_printf_i+0x148>
 8017238:	6823      	ldr	r3, [r4, #0]
 801723a:	07de      	lsls	r6, r3, #31
 801723c:	d508      	bpl.n	8017250 <_printf_i+0x148>
 801723e:	6923      	ldr	r3, [r4, #16]
 8017240:	6861      	ldr	r1, [r4, #4]
 8017242:	4299      	cmp	r1, r3
 8017244:	bfde      	ittt	le
 8017246:	2330      	movle	r3, #48	; 0x30
 8017248:	f805 3c01 	strble.w	r3, [r5, #-1]
 801724c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017250:	1b52      	subs	r2, r2, r5
 8017252:	6122      	str	r2, [r4, #16]
 8017254:	f8cd a000 	str.w	sl, [sp]
 8017258:	464b      	mov	r3, r9
 801725a:	aa03      	add	r2, sp, #12
 801725c:	4621      	mov	r1, r4
 801725e:	4640      	mov	r0, r8
 8017260:	f7ff fee4 	bl	801702c <_printf_common>
 8017264:	3001      	adds	r0, #1
 8017266:	d14a      	bne.n	80172fe <_printf_i+0x1f6>
 8017268:	f04f 30ff 	mov.w	r0, #4294967295
 801726c:	b004      	add	sp, #16
 801726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017272:	6823      	ldr	r3, [r4, #0]
 8017274:	f043 0320 	orr.w	r3, r3, #32
 8017278:	6023      	str	r3, [r4, #0]
 801727a:	4833      	ldr	r0, [pc, #204]	; (8017348 <_printf_i+0x240>)
 801727c:	2778      	movs	r7, #120	; 0x78
 801727e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017282:	6823      	ldr	r3, [r4, #0]
 8017284:	6829      	ldr	r1, [r5, #0]
 8017286:	061f      	lsls	r7, r3, #24
 8017288:	f851 6b04 	ldr.w	r6, [r1], #4
 801728c:	d402      	bmi.n	8017294 <_printf_i+0x18c>
 801728e:	065f      	lsls	r7, r3, #25
 8017290:	bf48      	it	mi
 8017292:	b2b6      	uxthmi	r6, r6
 8017294:	07df      	lsls	r7, r3, #31
 8017296:	bf48      	it	mi
 8017298:	f043 0320 	orrmi.w	r3, r3, #32
 801729c:	6029      	str	r1, [r5, #0]
 801729e:	bf48      	it	mi
 80172a0:	6023      	strmi	r3, [r4, #0]
 80172a2:	b91e      	cbnz	r6, 80172ac <_printf_i+0x1a4>
 80172a4:	6823      	ldr	r3, [r4, #0]
 80172a6:	f023 0320 	bic.w	r3, r3, #32
 80172aa:	6023      	str	r3, [r4, #0]
 80172ac:	2310      	movs	r3, #16
 80172ae:	e7a7      	b.n	8017200 <_printf_i+0xf8>
 80172b0:	4824      	ldr	r0, [pc, #144]	; (8017344 <_printf_i+0x23c>)
 80172b2:	e7e4      	b.n	801727e <_printf_i+0x176>
 80172b4:	4615      	mov	r5, r2
 80172b6:	e7bd      	b.n	8017234 <_printf_i+0x12c>
 80172b8:	682b      	ldr	r3, [r5, #0]
 80172ba:	6826      	ldr	r6, [r4, #0]
 80172bc:	6961      	ldr	r1, [r4, #20]
 80172be:	1d18      	adds	r0, r3, #4
 80172c0:	6028      	str	r0, [r5, #0]
 80172c2:	0635      	lsls	r5, r6, #24
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	d501      	bpl.n	80172cc <_printf_i+0x1c4>
 80172c8:	6019      	str	r1, [r3, #0]
 80172ca:	e002      	b.n	80172d2 <_printf_i+0x1ca>
 80172cc:	0670      	lsls	r0, r6, #25
 80172ce:	d5fb      	bpl.n	80172c8 <_printf_i+0x1c0>
 80172d0:	8019      	strh	r1, [r3, #0]
 80172d2:	2300      	movs	r3, #0
 80172d4:	6123      	str	r3, [r4, #16]
 80172d6:	4615      	mov	r5, r2
 80172d8:	e7bc      	b.n	8017254 <_printf_i+0x14c>
 80172da:	682b      	ldr	r3, [r5, #0]
 80172dc:	1d1a      	adds	r2, r3, #4
 80172de:	602a      	str	r2, [r5, #0]
 80172e0:	681d      	ldr	r5, [r3, #0]
 80172e2:	6862      	ldr	r2, [r4, #4]
 80172e4:	2100      	movs	r1, #0
 80172e6:	4628      	mov	r0, r5
 80172e8:	f7e9 f81a 	bl	8000320 <memchr>
 80172ec:	b108      	cbz	r0, 80172f2 <_printf_i+0x1ea>
 80172ee:	1b40      	subs	r0, r0, r5
 80172f0:	6060      	str	r0, [r4, #4]
 80172f2:	6863      	ldr	r3, [r4, #4]
 80172f4:	6123      	str	r3, [r4, #16]
 80172f6:	2300      	movs	r3, #0
 80172f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172fc:	e7aa      	b.n	8017254 <_printf_i+0x14c>
 80172fe:	6923      	ldr	r3, [r4, #16]
 8017300:	462a      	mov	r2, r5
 8017302:	4649      	mov	r1, r9
 8017304:	4640      	mov	r0, r8
 8017306:	47d0      	blx	sl
 8017308:	3001      	adds	r0, #1
 801730a:	d0ad      	beq.n	8017268 <_printf_i+0x160>
 801730c:	6823      	ldr	r3, [r4, #0]
 801730e:	079b      	lsls	r3, r3, #30
 8017310:	d413      	bmi.n	801733a <_printf_i+0x232>
 8017312:	68e0      	ldr	r0, [r4, #12]
 8017314:	9b03      	ldr	r3, [sp, #12]
 8017316:	4298      	cmp	r0, r3
 8017318:	bfb8      	it	lt
 801731a:	4618      	movlt	r0, r3
 801731c:	e7a6      	b.n	801726c <_printf_i+0x164>
 801731e:	2301      	movs	r3, #1
 8017320:	4632      	mov	r2, r6
 8017322:	4649      	mov	r1, r9
 8017324:	4640      	mov	r0, r8
 8017326:	47d0      	blx	sl
 8017328:	3001      	adds	r0, #1
 801732a:	d09d      	beq.n	8017268 <_printf_i+0x160>
 801732c:	3501      	adds	r5, #1
 801732e:	68e3      	ldr	r3, [r4, #12]
 8017330:	9903      	ldr	r1, [sp, #12]
 8017332:	1a5b      	subs	r3, r3, r1
 8017334:	42ab      	cmp	r3, r5
 8017336:	dcf2      	bgt.n	801731e <_printf_i+0x216>
 8017338:	e7eb      	b.n	8017312 <_printf_i+0x20a>
 801733a:	2500      	movs	r5, #0
 801733c:	f104 0619 	add.w	r6, r4, #25
 8017340:	e7f5      	b.n	801732e <_printf_i+0x226>
 8017342:	bf00      	nop
 8017344:	08017609 	.word	0x08017609
 8017348:	0801761a 	.word	0x0801761a

0801734c <memmove>:
 801734c:	4288      	cmp	r0, r1
 801734e:	b510      	push	{r4, lr}
 8017350:	eb01 0402 	add.w	r4, r1, r2
 8017354:	d902      	bls.n	801735c <memmove+0x10>
 8017356:	4284      	cmp	r4, r0
 8017358:	4623      	mov	r3, r4
 801735a:	d807      	bhi.n	801736c <memmove+0x20>
 801735c:	1e43      	subs	r3, r0, #1
 801735e:	42a1      	cmp	r1, r4
 8017360:	d008      	beq.n	8017374 <memmove+0x28>
 8017362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017366:	f803 2f01 	strb.w	r2, [r3, #1]!
 801736a:	e7f8      	b.n	801735e <memmove+0x12>
 801736c:	4402      	add	r2, r0
 801736e:	4601      	mov	r1, r0
 8017370:	428a      	cmp	r2, r1
 8017372:	d100      	bne.n	8017376 <memmove+0x2a>
 8017374:	bd10      	pop	{r4, pc}
 8017376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801737a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801737e:	e7f7      	b.n	8017370 <memmove+0x24>

08017380 <_sbrk_r>:
 8017380:	b538      	push	{r3, r4, r5, lr}
 8017382:	4d06      	ldr	r5, [pc, #24]	; (801739c <_sbrk_r+0x1c>)
 8017384:	2300      	movs	r3, #0
 8017386:	4604      	mov	r4, r0
 8017388:	4608      	mov	r0, r1
 801738a:	602b      	str	r3, [r5, #0]
 801738c:	f7eb ff38 	bl	8003200 <_sbrk>
 8017390:	1c43      	adds	r3, r0, #1
 8017392:	d102      	bne.n	801739a <_sbrk_r+0x1a>
 8017394:	682b      	ldr	r3, [r5, #0]
 8017396:	b103      	cbz	r3, 801739a <_sbrk_r+0x1a>
 8017398:	6023      	str	r3, [r4, #0]
 801739a:	bd38      	pop	{r3, r4, r5, pc}
 801739c:	24003334 	.word	0x24003334

080173a0 <_realloc_r>:
 80173a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173a4:	4680      	mov	r8, r0
 80173a6:	4614      	mov	r4, r2
 80173a8:	460e      	mov	r6, r1
 80173aa:	b921      	cbnz	r1, 80173b6 <_realloc_r+0x16>
 80173ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173b0:	4611      	mov	r1, r2
 80173b2:	f7ff bc57 	b.w	8016c64 <_malloc_r>
 80173b6:	b92a      	cbnz	r2, 80173c4 <_realloc_r+0x24>
 80173b8:	f7ff fbe8 	bl	8016b8c <_free_r>
 80173bc:	4625      	mov	r5, r4
 80173be:	4628      	mov	r0, r5
 80173c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c4:	f000 f81b 	bl	80173fe <_malloc_usable_size_r>
 80173c8:	4284      	cmp	r4, r0
 80173ca:	4607      	mov	r7, r0
 80173cc:	d802      	bhi.n	80173d4 <_realloc_r+0x34>
 80173ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80173d2:	d812      	bhi.n	80173fa <_realloc_r+0x5a>
 80173d4:	4621      	mov	r1, r4
 80173d6:	4640      	mov	r0, r8
 80173d8:	f7ff fc44 	bl	8016c64 <_malloc_r>
 80173dc:	4605      	mov	r5, r0
 80173de:	2800      	cmp	r0, #0
 80173e0:	d0ed      	beq.n	80173be <_realloc_r+0x1e>
 80173e2:	42bc      	cmp	r4, r7
 80173e4:	4622      	mov	r2, r4
 80173e6:	4631      	mov	r1, r6
 80173e8:	bf28      	it	cs
 80173ea:	463a      	movcs	r2, r7
 80173ec:	f7ff fbc0 	bl	8016b70 <memcpy>
 80173f0:	4631      	mov	r1, r6
 80173f2:	4640      	mov	r0, r8
 80173f4:	f7ff fbca 	bl	8016b8c <_free_r>
 80173f8:	e7e1      	b.n	80173be <_realloc_r+0x1e>
 80173fa:	4635      	mov	r5, r6
 80173fc:	e7df      	b.n	80173be <_realloc_r+0x1e>

080173fe <_malloc_usable_size_r>:
 80173fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017402:	1f18      	subs	r0, r3, #4
 8017404:	2b00      	cmp	r3, #0
 8017406:	bfbc      	itt	lt
 8017408:	580b      	ldrlt	r3, [r1, r0]
 801740a:	18c0      	addlt	r0, r0, r3
 801740c:	4770      	bx	lr
	...

08017410 <_init>:
 8017410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017412:	bf00      	nop
 8017414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017416:	bc08      	pop	{r3}
 8017418:	469e      	mov	lr, r3
 801741a:	4770      	bx	lr

0801741c <_fini>:
 801741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801741e:	bf00      	nop
 8017420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017422:	bc08      	pop	{r3}
 8017424:	469e      	mov	lr, r3
 8017426:	4770      	bx	lr
