
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b3c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08017e0c  08017e0c  00027e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080181dc  080181dc  000281dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080181e4  080181e4  000281e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080181e8  080181e8  000281e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  080181ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f6c  24000164  08018350  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240030d0  08018350  000330d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037424  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f37  00000000  00000000  000675b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a98  00000000  00000000  0006d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002830  00000000  00000000  0006ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5d3  00000000  00000000  000727b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000394d7  00000000  00000000  000b0d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d7f6  00000000  00000000  000ea262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00267a58  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c158  00000000  00000000  00267aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017df4 	.word	0x08017df4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	08017df4 	.word	0x08017df4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HG2_Write_Register+0x48>)
 80006fc:	f007 fac4 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000700:	1df9      	adds	r1, r7, #7
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <HG2_Write_Register+0x4c>)
 8000708:	f00e f840 	bl	800e78c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800070c:	1db9      	adds	r1, r7, #6
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <HG2_Write_Register+0x4c>)
 8000714:	f00e f83a 	bl	800e78c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <HG2_Write_Register+0x48>)
 8000720:	f007 fab2 	bl	8007c88 <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020c00 	.word	0x58020c00
 8000730:	24000ed0 	.word	0x24000ed0

08000734 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <LG2_Read_Register+0x50>)
 8000750:	f007 fa9a 	bl	8007c88 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000754:	1df9      	adds	r1, r7, #7
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <LG2_Read_Register+0x54>)
 800075c:	f00e f816 	bl	800e78c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000760:	f107 010f 	add.w	r1, r7, #15
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <LG2_Read_Register+0x54>)
 800076a:	f00e fa0b 	bl	800eb84 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <LG2_Read_Register+0x50>)
 8000776:	f007 fa87 	bl	8007c88 <HAL_GPIO_WritePin>

	return reg_value;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00
 8000788:	24000ed0 	.word	0x24000ed0

0800078c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LG2_Write_Register+0x48>)
 80007a4:	f007 fa70 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a8:	1df9      	adds	r1, r7, #7
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007b0:	f00d ffec 	bl	800e78c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007b4:	1db9      	adds	r1, r7, #6
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007bc:	f00d ffe6 	bl	800e78c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LG2_Write_Register+0x48>)
 80007c8:	f007 fa5e 	bl	8007c88 <HAL_GPIO_WritePin>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00
 80007d8:	24000ed0 	.word	0x24000ed0

080007dc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007e2:	2022      	movs	r0, #34	; 0x22
 80007e4:	f7ff ffa6 	bl	8000734 <LG2_Read_Register>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007ec:	2023      	movs	r0, #35	; 0x23
 80007ee:	f7ff ffa1 	bl	8000734 <LG2_Read_Register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000804:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000810:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000834 <LG2_Get_Gyro_X+0x58>
 8000814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000818:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000838 <LG2_Get_Gyro_X+0x5c>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
}
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	46fffe00 	.word	0x46fffe00
 8000838:	437a0000 	.word	0x437a0000

0800083c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000842:	2024      	movs	r0, #36	; 0x24
 8000844:	f7ff ff76 	bl	8000734 <LG2_Read_Register>
 8000848:	4603      	mov	r3, r0
 800084a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f7ff ff71 	bl	8000734 <LG2_Read_Register>
 8000852:	4603      	mov	r3, r0
 8000854:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000894 <LG2_Get_Gyro_Y+0x58>
 8000874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000878:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000898 <LG2_Get_Gyro_Y+0x5c>
 800087c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000880:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	ee07 3a90 	vmov	s15, r3
}
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	46fffe00 	.word	0x46fffe00
 8000898:	437a0000 	.word	0x437a0000
 800089c:	00000000 	.word	0x00000000

080008a0 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 80008a6:	2026      	movs	r0, #38	; 0x26
 80008a8:	f7ff ff44 	bl	8000734 <LG2_Read_Register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f7ff ff3f 	bl	8000734 <LG2_Read_Register>
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x60>
 80008dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008e0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000908 <LG2_Get_Gyro_Z+0x68>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ec:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	ee07 3a90 	vmov	s15, r3
}
 80008f6:	eeb0 0a67 	vmov.f32	s0, s15
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	00000000 	.word	0x00000000
 8000904:	40dfffc0 	.word	0x40dfffc0
 8000908:	00000000 	.word	0x00000000
 800090c:	406f4000 	.word	0x406f4000

08000910 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 800091c:	ed97 7a00 	vldr	s14, [r7]
 8000920:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000990 <setServo+0x80>
 8000924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000928:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000994 <setServo+0x84>
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000930:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000998 <setServo+0x88>
 8000934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	d81a      	bhi.n	8000980 <setServo+0x70>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <setServo+0x40>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000961 	.word	0x08000961
 8000954:	08000969 	.word	0x08000969
 8000958:	08000971 	.word	0x08000971
 800095c:	08000979 	.word	0x08000979
		case 1:
			TIM4->CCR4 = timerVal;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000966:	e00c      	b.n	8000982 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800096e:	e008      	b.n	8000982 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000976:	e004      	b.n	8000982 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <setServo+0x8c>)
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800097e:	e000      	b.n	8000982 <setServo+0x72>

		default:
			break;
 8000980:	bf00      	nop
	}
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	43340000 	.word	0x43340000
 8000994:	457a0000 	.word	0x457a0000
 8000998:	453b8000 	.word	0x453b8000
 800099c:	40000800 	.word	0x40000800

080009a0 <setLEDs>:

void setLEDs(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
 80009aa:	e181      	b.n	8000cb0 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009ac:	4aa1      	ldr	r2, [pc, #644]	; (8000c34 <setLEDs+0x294>)
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	f200 8177 	bhi.w	8000ca8 <setLEDs+0x308>
 80009ba:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <setLEDs+0x20>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	08000a81 	.word	0x08000a81
 80009c8:	08000b31 	.word	0x08000b31
 80009cc:	08000be1 	.word	0x08000be1
		case 0:
			for (int j = 0; j < 3; j++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
 80009d4:	e042      	b.n	8000a5c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	e039      	b.n	8000a50 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009dc:	4996      	ldr	r1, [pc, #600]	; (8000c38 <setLEDs+0x298>)
 80009de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e8:	4413      	add	r3, r2
 80009ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f2:	fa41 f202 	asr.w	r2, r1, r2
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d013      	beq.n	8000a24 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	00da      	lsls	r2, r3, #3
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	18d1      	adds	r1, r2, r3
 8000a04:	4a8b      	ldr	r2, [pc, #556]	; (8000c34 <setLEDs+0x294>)
 8000a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3308      	adds	r3, #8
 8000a1a:	4a88      	ldr	r2, [pc, #544]	; (8000c3c <setLEDs+0x29c>)
 8000a1c:	213c      	movs	r1, #60	; 0x3c
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a22:	e012      	b.n	8000a4a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	00da      	lsls	r2, r3, #3
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	18d1      	adds	r1, r2, r3
 8000a2c:	4a81      	ldr	r2, [pc, #516]	; (8000c34 <setLEDs+0x294>)
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	4413      	add	r3, r2
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	3308      	adds	r3, #8
 8000a42:	4a7e      	ldr	r2, [pc, #504]	; (8000c3c <setLEDs+0x29c>)
 8000a44:	211e      	movs	r1, #30
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	ddc2      	ble.n	80009dc <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	3301      	adds	r3, #1
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	ddb9      	ble.n	80009d6 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a66:	e007      	b.n	8000a78 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a68:	4a74      	ldr	r2, [pc, #464]	; (8000c3c <setLEDs+0x29c>)
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	3301      	adds	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	2bb1      	cmp	r3, #177	; 0xb1
 8000a7c:	ddf4      	ble.n	8000a68 <setLEDs+0xc8>
			}
			break;
 8000a7e:	e114      	b.n	8000caa <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	e042      	b.n	8000b0c <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	e039      	b.n	8000b00 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a8c:	496a      	ldr	r1, [pc, #424]	; (8000c38 <setLEDs+0x298>)
 8000a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a98:	4413      	add	r3, r2
 8000a9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	6a3a      	ldr	r2, [r7, #32]
 8000aa2:	fa41 f202 	asr.w	r2, r1, r2
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d013      	beq.n	8000ad4 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	00da      	lsls	r2, r3, #3
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	18d1      	adds	r1, r2, r3
 8000ab4:	4a5f      	ldr	r2, [pc, #380]	; (8000c34 <setLEDs+0x294>)
 8000ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	440b      	add	r3, r1
 8000ac8:	3308      	adds	r3, #8
 8000aca:	4a5d      	ldr	r2, [pc, #372]	; (8000c40 <setLEDs+0x2a0>)
 8000acc:	213c      	movs	r1, #60	; 0x3c
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ad2:	e012      	b.n	8000afa <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	00da      	lsls	r2, r3, #3
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	18d1      	adds	r1, r2, r3
 8000adc:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <setLEDs+0x294>)
 8000ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	440b      	add	r3, r1
 8000af0:	3308      	adds	r3, #8
 8000af2:	4a53      	ldr	r2, [pc, #332]	; (8000c40 <setLEDs+0x2a0>)
 8000af4:	211e      	movs	r1, #30
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	3301      	adds	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	ddc2      	ble.n	8000a8c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	3301      	adds	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	ddb9      	ble.n	8000a86 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	e007      	b.n	8000b28 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <setLEDs+0x2a0>)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3301      	adds	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	2bb1      	cmp	r3, #177	; 0xb1
 8000b2c:	ddf4      	ble.n	8000b18 <setLEDs+0x178>
			}
			break;
 8000b2e:	e0bc      	b.n	8000caa <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	e042      	b.n	8000bbc <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e039      	b.n	8000bb0 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b3c:	493e      	ldr	r1, [pc, #248]	; (8000c38 <setLEDs+0x298>)
 8000b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4413      	add	r3, r2
 8000b4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	fa41 f202 	asr.w	r2, r1, r2
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	00da      	lsls	r2, r3, #3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	18d1      	adds	r1, r2, r3
 8000b64:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <setLEDs+0x294>)
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3308      	adds	r3, #8
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <setLEDs+0x2a4>)
 8000b7c:	213c      	movs	r1, #60	; 0x3c
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b82:	e012      	b.n	8000baa <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	00da      	lsls	r2, r3, #3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	18d1      	adds	r1, r2, r3
 8000b8c:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <setLEDs+0x294>)
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3308      	adds	r3, #8
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <setLEDs+0x2a4>)
 8000ba4:	211e      	movs	r1, #30
 8000ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	ddc2      	ble.n	8000b3c <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	ddb9      	ble.n	8000b36 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bc2:	2338      	movs	r3, #56	; 0x38
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e007      	b.n	8000bd8 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <setLEDs+0x2a4>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	2b69      	cmp	r3, #105	; 0x69
 8000bdc:	ddf4      	ble.n	8000bc8 <setLEDs+0x228>
			}
			break;
 8000bde:	e064      	b.n	8000caa <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e04e      	b.n	8000c84 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	e045      	b.n	8000c78 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000bec:	4912      	ldr	r1, [pc, #72]	; (8000c38 <setLEDs+0x298>)
 8000bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	fa41 f202 	asr.w	r2, r1, r2
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d01f      	beq.n	8000c4c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	00da      	lsls	r2, r3, #3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	18d1      	adds	r1, r2, r3
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <setLEDs+0x294>)
 8000c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	440b      	add	r3, r1
 8000c28:	3308      	adds	r3, #8
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <setLEDs+0x2a8>)
 8000c2c:	213c      	movs	r1, #60	; 0x3c
 8000c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c32:	e01e      	b.n	8000c72 <setLEDs+0x2d2>
 8000c34:	08017f68 	.word	0x08017f68
 8000c38:	24000a60 	.word	0x24000a60
 8000c3c:	24000180 	.word	0x24000180
 8000c40:	24000448 	.word	0x24000448
 8000c44:	24000710 	.word	0x24000710
 8000c48:	240008b8 	.word	0x240008b8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	00da      	lsls	r2, r3, #3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	18d1      	adds	r1, r2, r3
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <setLEDs+0x350>)
 8000c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3308      	adds	r3, #8
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <setLEDs+0x354>)
 8000c6c:	211e      	movs	r1, #30
 8000c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	ddb6      	ble.n	8000bec <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	ddad      	ble.n	8000be6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c8a:	2338      	movs	r3, #56	; 0x38
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e007      	b.n	8000ca0 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <setLEDs+0x354>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2100      	movs	r1, #0
 8000c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b69      	cmp	r3, #105	; 0x69
 8000ca4:	ddf4      	ble.n	8000c90 <setLEDs+0x2f0>
			}
			break;
 8000ca6:	e000      	b.n	8000caa <setLEDs+0x30a>
		default:
			break;
 8000ca8:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cac:	3301      	adds	r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	2b0d      	cmp	r3, #13
 8000cb4:	f77f ae7a 	ble.w	80009ac <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb8:	23b2      	movs	r3, #178	; 0xb2
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <setLEDs+0x358>)
 8000cbc:	210c      	movs	r1, #12
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <setLEDs+0x35c>)
 8000cc0:	f00e fb4c 	bl	800f35c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cc4:	23b2      	movs	r3, #178	; 0xb2
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <setLEDs+0x360>)
 8000cc8:	2108      	movs	r1, #8
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <setLEDs+0x364>)
 8000ccc:	f00e fb46 	bl	800f35c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cd0:	236a      	movs	r3, #106	; 0x6a
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <setLEDs+0x368>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <setLEDs+0x36c>)
 8000cd8:	f00e fb40 	bl	800f35c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cdc:	236a      	movs	r3, #106	; 0x6a
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <setLEDs+0x354>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <setLEDs+0x36c>)
 8000ce4:	f00e fb3a 	bl	800f35c <HAL_TIM_PWM_Start_DMA>

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08017f68 	.word	0x08017f68
 8000cf4:	240008b8 	.word	0x240008b8
 8000cf8:	24000180 	.word	0x24000180
 8000cfc:	240010c4 	.word	0x240010c4
 8000d00:	24000448 	.word	0x24000448
 8000d04:	24000fe0 	.word	0x24000fe0
 8000d08:	24000710 	.word	0x24000710
 8000d0c:	2400102c 	.word	0x2400102c

08000d10 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d22:	f006 ffb1 	bl	8007c88 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d26:	1df9      	adds	r1, r7, #7
 8000d28:	2364      	movs	r3, #100	; 0x64
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d2e:	f00d fd2d 	bl	800e78c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d32:	f107 010f 	add.w	r1, r7, #15
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d3c:	f00d ff22 	bl	800eb84 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d48:	f006 ff9e 	bl	8007c88 <HAL_GPIO_WritePin>

	return reg_value;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	58020000 	.word	0x58020000
 8000d5c:	24000f58 	.word	0x24000f58

08000d60 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000d82:	f006 ff81 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d8e:	f00d fcfd 	bl	800e78c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d92:	1db9      	adds	r1, r7, #6
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	2201      	movs	r2, #1
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d9a:	f00d fcf7 	bl	800e78c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000da6:	f006 ff6f 	bl	8007c88 <HAL_GPIO_WritePin>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58020000 	.word	0x58020000
 8000db8:	24000f58 	.word	0x24000f58

08000dbc <LoRA_sleep>:


void LoRA_sleep(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff ffcc 	bl	8000d60 <LoRA_Write_Register>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	17c8      	asrs	r0, r1, #31
 8000dd8:	460a      	mov	r2, r1
 8000dda:	4603      	mov	r3, r0
 8000ddc:	1355      	asrs	r5, r2, #13
 8000dde:	04d4      	lsls	r4, r2, #19
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <LoRA_set_frequency+0x78>)
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	4620      	mov	r0, r4
 8000de8:	4629      	mov	r1, r5
 8000dea:	f7ff faf9 	bl	80003e0 <__aeabi_uldivmod>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	0c02      	lsrs	r2, r0, #16
 8000e04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	b2d3      	uxtb	r3, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f7ff ffa6 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	0a02      	lsrs	r2, r0, #8
 8000e22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e26:	0a0b      	lsrs	r3, r1, #8
 8000e28:	b2d3      	uxtb	r3, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2007      	movs	r0, #7
 8000e2e:	f7ff ff97 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	4619      	mov	r1, r3
 8000e36:	2008      	movs	r0, #8
 8000e38:	f7ff ff92 	bl	8000d60 <LoRA_Write_Register>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}
 8000e44:	01e84800 	.word	0x01e84800

08000e48 <LoRA_idle>:

void LoRA_idle(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e4c:	2181      	movs	r1, #129	; 0x81
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff86 	bl	8000d60 <LoRA_Write_Register>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e62:	231b      	movs	r3, #27
 8000e64:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b78      	cmp	r3, #120	; 0x78
 8000e6a:	d809      	bhi.n	8000e80 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	3b2d      	subs	r3, #45	; 0x2d
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e72:	fb82 1203 	smull	r1, r2, r2, r3
 8000e76:	1052      	asrs	r2, r2, #1
 8000e78:	17db      	asrs	r3, r3, #31
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e00b      	b.n	8000e98 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2bf0      	cmp	r3, #240	; 0xf0
 8000e84:	d808      	bhi.n	8000e98 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	331e      	adds	r3, #30
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	1092      	asrs	r2, r2, #2
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f7ff ff59 	bl	8000d60 <LoRA_Write_Register>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	66666667 	.word	0x66666667

08000ebc <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	dd0f      	ble.n	8000eea <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b14      	cmp	r3, #20
 8000ece:	dd01      	ble.n	8000ed4 <LoRA_setTxPower+0x18>
        level = 20;
 8000ed0:	2314      	movs	r3, #20
 8000ed2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b03      	subs	r3, #3
 8000ed8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000eda:	2187      	movs	r1, #135	; 0x87
 8000edc:	204d      	movs	r0, #77	; 0x4d
 8000ede:	f7ff ff3f 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ee2:	208c      	movs	r0, #140	; 0x8c
 8000ee4:	f7ff ffb8 	bl	8000e58 <LoRA_setOCP>
 8000ee8:	e00b      	b.n	8000f02 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	dc01      	bgt.n	8000ef4 <LoRA_setTxPower+0x38>
        level = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ef4:	2184      	movs	r1, #132	; 0x84
 8000ef6:	204d      	movs	r0, #77	; 0x4d
 8000ef8:	f7ff ff32 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f7ff ffab 	bl	8000e58 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3b02      	subs	r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	2009      	movs	r0, #9
 8000f18:	f7ff ff22 	bl	8000d60 <LoRA_Write_Register>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f7ff fef1 	bl	8000d10 <LoRA_Read_Register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	201d      	movs	r0, #29
 8000f3a:	f7ff ff11 	bl	8000d60 <LoRA_Write_Register>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <LoRA_begin+0x64>)
 8000f52:	f006 fe99 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <LoRA_begin+0x68>)
 8000f5e:	f006 fe93 	bl	8007c88 <HAL_GPIO_WritePin>

	LoRA_sleep();
 8000f62:	f7ff ff2b 	bl	8000dbc <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <LoRA_begin+0x6c>)
 8000f68:	f7ff ff30 	bl	8000dcc <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f7ff fef6 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	200e      	movs	r0, #14
 8000f78:	f7ff fef2 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000f7c:	200c      	movs	r0, #12
 8000f7e:	f7ff fec7 	bl	8000d10 <LoRA_Read_Register>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f043 0303 	orr.w	r3, r3, #3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	200c      	movs	r0, #12
 8000f8e:	f7ff fee7 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000f92:	2104      	movs	r1, #4
 8000f94:	2026      	movs	r0, #38	; 0x26
 8000f96:	f7ff fee3 	bl	8000d60 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000f9a:	2011      	movs	r0, #17
 8000f9c:	f7ff ff8e 	bl	8000ebc <LoRA_setTxPower>

}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58020c00 	.word	0x58020c00
 8000fac:	58020000 	.word	0x58020000
 8000fb0:	33bca100 	.word	0x33bca100

08000fb4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fb8:	f7ff ffb4 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	200d      	movs	r0, #13
 8000fc0:	f7ff fece 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2022      	movs	r0, #34	; 0x22
 8000fc8:	f7ff feca 	bl	8000d60 <LoRA_Write_Register>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000fd4:	2183      	movs	r1, #131	; 0x83
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff fec2 	bl	8000d60 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000fdc:	bf00      	nop
 8000fde:	2012      	movs	r0, #18
 8000fe0:	f7ff fe96 	bl	8000d10 <LoRA_Read_Register>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f7      	beq.n	8000fde <LoRA_endPacket+0xe>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000fee:	2108      	movs	r1, #8
 8000ff0:	2012      	movs	r0, #18
 8000ff2:	f7ff feb5 	bl	8000d60 <LoRA_Write_Register>

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001004:	2012      	movs	r0, #18
 8001006:	f7ff fe83 	bl	8000d10 <LoRA_Read_Register>
 800100a:	4603      	mov	r3, r0
 800100c:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800100e:	f7ff ff89 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4619      	mov	r1, r3
 8001018:	2012      	movs	r0, #18
 800101a:	f7ff fea1 	bl	8000d60 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001024:	2b00      	cmp	r3, #0
 8001026:	d014      	beq.n	8001052 <LoRA_parsePacket+0x58>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10f      	bne.n	8001052 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8001032:	2013      	movs	r0, #19
 8001034:	f7ff fe6c 	bl	8000d10 <LoRA_Read_Register>
 8001038:	4603      	mov	r3, r0
 800103a:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 800103c:	2010      	movs	r0, #16
 800103e:	f7ff fe67 	bl	8000d10 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	4619      	mov	r1, r3
 8001046:	200d      	movs	r0, #13
 8001048:	f7ff fe8a 	bl	8000d60 <LoRA_Write_Register>
		LoRA_idle();
 800104c:	f7ff fefc 	bl	8000e48 <LoRA_idle>
 8001050:	e00d      	b.n	800106e <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fe5c 	bl	8000d10 <LoRA_Read_Register>
 8001058:	4603      	mov	r3, r0
 800105a:	2b86      	cmp	r3, #134	; 0x86
 800105c:	d007      	beq.n	800106e <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800105e:	2100      	movs	r1, #0
 8001060:	200d      	movs	r0, #13
 8001062:	f7ff fe7d 	bl	8000d60 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001066:	2186      	movs	r1, #134	; 0x86
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff fe79 	bl	8000d60 <LoRA_Write_Register>
	}
	return packetLenght;
 800106e:	687b      	ldr	r3, [r7, #4]

}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 8001080:	f7ff ff98 	bl	8000fb4 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e00a      	b.n	80010a0 <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fe63 	bl	8000d60 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff f93f 	bl	8000324 <strlen>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8ed      	bhi.n	800108a <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff f938 	bl	8000324 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	2022      	movs	r0, #34	; 0x22
 80010bc:	f7ff fe50 	bl	8000d60 <LoRA_Write_Register>
    LoRA_endPacket();
 80010c0:	f7ff ff86 	bl	8000fd0 <LoRA_endPacket>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80010d8:	4bcb      	ldr	r3, [pc, #812]	; (8001408 <main+0x338>)
 80010da:	f507 7450 	add.w	r4, r7, #832	; 0x340
 80010de:	461d      	mov	r5, r3
 80010e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e8:	c403      	stmia	r4!, {r0, r1}
 80010ea:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f002 fa86 	bl	80035fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 fb56 	bl	80017a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010f4:	f000 fbd0 	bl	8001898 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f001 f934 	bl	8002364 <MX_GPIO_Init>
  MX_DMA_Init();
 80010fc:	f001 f8d2 	bl	80022a4 <MX_DMA_Init>
  MX_SPI3_Init();
 8001100:	f000 fe50 	bl	8001da4 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001104:	f000 fce0 	bl	8001ac8 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001108:	f001 f880 	bl	800220c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800110c:	f000 fbf6 	bl	80018fc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001110:	f000 ff5a 	bl	8001fc8 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001114:	f000 fc6a 	bl	80019ec <MX_ADC3_Init>
  MX_SPI2_Init();
 8001118:	f000 fdee 	bl	8001cf8 <MX_SPI2_Init>
  MX_I2C2_Init();
 800111c:	f000 fd38 	bl	8001b90 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001120:	f000 fe96 	bl	8001e50 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001124:	f000 ffcc 	bl	80020c0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001128:	f000 feea 	bl	8001f00 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800112c:	f015 f818 	bl	8016160 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001130:	f000 fd8c 	bl	8001c4c <MX_SPI1_Init>
  MX_UART4_Init();
 8001134:	f001 f81e 	bl	8002174 <MX_UART4_Init>
  MX_FATFS_Init();
 8001138:	f012 fde6 	bl	8013d08 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800113c:	f000 fd68 	bl	8001c10 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001140:	2332      	movs	r3, #50	; 0x32
 8001142:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
	const double SPEED = 2.0/2000;
 8001146:	a3ae      	add	r3, pc, #696	; (adr r3, 8001400 <main+0x330>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
	const double r_offset = 0;
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
	const double g_offset = 1;
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4baa      	ldr	r3, [pc, #680]	; (800140c <main+0x33c>)
 8001162:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
	const double b_offset = 2;
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800116e:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001172:	213c      	movs	r1, #60	; 0x3c
 8001174:	2010      	movs	r0, #16
 8001176:	f7ff fb09 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 800117a:	2130      	movs	r1, #48	; 0x30
 800117c:	2011      	movs	r0, #17
 800117e:	f7ff fb05 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001182:	2104      	movs	r1, #4
 8001184:	2013      	movs	r0, #19
 8001186:	f7ff fb01 	bl	800078c <LG2_Write_Register>

	HAL_Delay(3000);
 800118a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800118e:	f002 fac7 	bl	8003720 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001192:	21bf      	movs	r1, #191	; 0xbf
 8001194:	201c      	movs	r0, #28
 8001196:	f7ff faa5 	bl	80006e4 <HG2_Write_Register>
	HAL_Delay(2);
 800119a:	2002      	movs	r0, #2
 800119c:	f002 fac0 	bl	8003720 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80011a0:	2158      	movs	r1, #88	; 0x58
 80011a2:	201b      	movs	r0, #27
 80011a4:	f7ff fa9e 	bl	80006e4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80011a8:	21d8      	movs	r1, #216	; 0xd8
 80011aa:	201b      	movs	r0, #27
 80011ac:	f7ff fa9a 	bl	80006e4 <HG2_Write_Register>

	float rotZ = 0;
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
	uint32_t lastTime = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4

	float calOmegaX = 0;
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
	float calOmegaY = 0;
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	float calOmegaZ = 0;
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80011dc:	e022      	b.n	8001224 <main+0x154>
		calOmegaX += LG2_Get_Gyro_X();
 80011de:	f7ff fafd 	bl	80007dc <LG2_Get_Gyro_X>
 80011e2:	eeb0 7a40 	vmov.f32	s14, s0
 80011e6:	edd7 7aec 	vldr	s15, [r7, #944]	; 0x3b0
 80011ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ee:	edc7 7aec 	vstr	s15, [r7, #944]	; 0x3b0
		calOmegaY += LG2_Get_Gyro_Y();
 80011f2:	f7ff fb23 	bl	800083c <LG2_Get_Gyro_Y>
 80011f6:	eeb0 7a40 	vmov.f32	s14, s0
 80011fa:	edd7 7aeb 	vldr	s15, [r7, #940]	; 0x3ac
 80011fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001202:	edc7 7aeb 	vstr	s15, [r7, #940]	; 0x3ac
		calOmegaZ += LG2_Get_Gyro_Z();
 8001206:	f7ff fb4b 	bl	80008a0 <LG2_Get_Gyro_Z>
 800120a:	eeb0 7a40 	vmov.f32	s14, s0
 800120e:	edd7 7aea 	vldr	s15, [r7, #936]	; 0x3a8
 8001212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001216:	edc7 7aea 	vstr	s15, [r7, #936]	; 0x3a8
	for(int i = 0; i < 500; i++){
 800121a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001224:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001228:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800122c:	dbd7      	blt.n	80011de <main+0x10e>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 800122e:	ed97 7aec 	vldr	s14, [r7, #944]	; 0x3b0
 8001232:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001410 <main+0x340>
 8001236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123a:	edc7 7aec 	vstr	s15, [r7, #944]	; 0x3b0
	calOmegaY /= 500;
 800123e:	ed97 7aeb 	vldr	s14, [r7, #940]	; 0x3ac
 8001242:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001410 <main+0x340>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	edc7 7aeb 	vstr	s15, [r7, #940]	; 0x3ac
	calOmegaZ /= 500;
 800124e:	ed97 7aea 	vldr	s14, [r7, #936]	; 0x3a8
 8001252:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001410 <main+0x340>
 8001256:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125a:	edc7 7aea 	vstr	s15, [r7, #936]	; 0x3a8

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	2101      	movs	r1, #1
 8001262:	486c      	ldr	r0, [pc, #432]	; (8001414 <main+0x344>)
 8001264:	f006 fd10 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001268:	20c8      	movs	r0, #200	; 0xc8
 800126a:	f002 fa59 	bl	8003720 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	4868      	ldr	r0, [pc, #416]	; (8001414 <main+0x344>)
 8001274:	f006 fd08 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001278:	20c8      	movs	r0, #200	; 0xc8
 800127a:	f002 fa51 	bl	8003720 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	2101      	movs	r1, #1
 8001282:	4864      	ldr	r0, [pc, #400]	; (8001414 <main+0x344>)
 8001284:	f006 fd00 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001288:	20c8      	movs	r0, #200	; 0xc8
 800128a:	f002 fa49 	bl	8003720 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	2104      	movs	r1, #4
 8001292:	4861      	ldr	r0, [pc, #388]	; (8001418 <main+0x348>)
 8001294:	f006 fcf8 	bl	8007c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	2108      	movs	r1, #8
 800129c:	485e      	ldr	r0, [pc, #376]	; (8001418 <main+0x348>)
 800129e:	f006 fcf3 	bl	8007c88 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	485d      	ldr	r0, [pc, #372]	; (800141c <main+0x34c>)
 80012a6:	f00d ff3d 	bl	800f124 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80012aa:	2104      	movs	r1, #4
 80012ac:	485b      	ldr	r0, [pc, #364]	; (800141c <main+0x34c>)
 80012ae:	f00d ff39 	bl	800f124 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80012b2:	2108      	movs	r1, #8
 80012b4:	4859      	ldr	r0, [pc, #356]	; (800141c <main+0x34c>)
 80012b6:	f00d ff35 	bl	800f124 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012ba:	210c      	movs	r1, #12
 80012bc:	4857      	ldr	r0, [pc, #348]	; (800141c <main+0x34c>)
 80012be:	f00d ff31 	bl	800f124 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80012c2:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001420 <main+0x350>
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fb22 	bl	8000910 <setServo>
    setServo(2, 180);
 80012cc:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8001424 <main+0x354>
 80012d0:	2002      	movs	r0, #2
 80012d2:	f7ff fb1d 	bl	8000910 <setServo>
    setServo(3, 0);
 80012d6:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001428 <main+0x358>
 80012da:	2003      	movs	r0, #3
 80012dc:	f7ff fb18 	bl	8000910 <setServo>
    setServo(4, 45);
 80012e0:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800142c <main+0x35c>
 80012e4:	2004      	movs	r0, #4
 80012e6:	f7ff fb13 	bl	8000910 <setServo>

    LoRA_begin(868000000);
 80012ea:	4851      	ldr	r0, [pc, #324]	; (8001430 <main+0x360>)
 80012ec:	f7ff fe2a 	bl	8000f44 <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	long last_packet = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	int ARMED = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001302:	f002 fa01 	bl	8003708 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001316:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001434 <main+0x364>
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	edc7 7ad8 	vstr	s15, [r7, #864]	; 0x360

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001322:	f002 f9f1 	bl	8003708 <HAL_GetTick>
 8001326:	f8c7 03b4 	str.w	r0, [r7, #948]	; 0x3b4

		//write_EEPROM(1, 1);

	     // Start ADC Conversion
		//HAL_Delay(100);
		if(HAL_GetTick() - last_packet > 1000){
 800132a:	f002 f9ed 	bl	8003708 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800133a:	d902      	bls.n	8001342 <main+0x272>
			connected = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
		}

		if(connected){
 8001342:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <main+0x28e>
			LED_Color_Data[2][0] = 255;
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <main+0x368>)
 800134c:	22ff      	movs	r2, #255	; 0xff
 800134e:	619a      	str	r2, [r3, #24]
			LED_Color_Data[2][1] = 0;
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <main+0x368>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
			LED_Color_Data[2][2] = 0;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <main+0x368>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
 800135c:	e008      	b.n	8001370 <main+0x2a0>
		}else{
			LED_Color_Data[2][0] = 120;
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <main+0x368>)
 8001360:	2278      	movs	r2, #120	; 0x78
 8001362:	619a      	str	r2, [r3, #24]
			LED_Color_Data[2][1] = 255;
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <main+0x368>)
 8001366:	22ff      	movs	r2, #255	; 0xff
 8001368:	61da      	str	r2, [r3, #28]
			LED_Color_Data[2][2] = 0;
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <main+0x368>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
		}

		if(!ARMED){
 8001370:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001374:	2b00      	cmp	r3, #0
 8001376:	d169      	bne.n	800144c <main+0x37c>
			HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	482f      	ldr	r0, [pc, #188]	; (800143c <main+0x36c>)
 800137e:	f006 fc83 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2104      	movs	r1, #4
 8001386:	482d      	ldr	r0, [pc, #180]	; (800143c <main+0x36c>)
 8001388:	f006 fc7e 	bl	8007c88 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2102      	movs	r1, #2
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <main+0x370>)
 8001392:	f006 fc79 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800139c:	4829      	ldr	r0, [pc, #164]	; (8001444 <main+0x374>)
 800139e:	f006 fc73 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a8:	4826      	ldr	r0, [pc, #152]	; (8001444 <main+0x374>)
 80013aa:	f006 fc6d 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b4:	4823      	ldr	r0, [pc, #140]	; (8001444 <main+0x374>)
 80013b6:	f006 fc67 	bl	8007c88 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2102      	movs	r1, #2
 80013be:	4816      	ldr	r0, [pc, #88]	; (8001418 <main+0x348>)
 80013c0:	f006 fc62 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ca:	481f      	ldr	r0, [pc, #124]	; (8001448 <main+0x378>)
 80013cc:	f006 fc5c 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d6:	481c      	ldr	r0, [pc, #112]	; (8001448 <main+0x378>)
 80013d8:	f006 fc56 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4819      	ldr	r0, [pc, #100]	; (8001448 <main+0x378>)
 80013e4:	f006 fc50 	bl	8007c88 <HAL_GPIO_WritePin>

			LED_Color_Data[7][0] = 255;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <main+0x368>)
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
			LED_Color_Data[7][1] = 0;
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <main+0x368>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	659a      	str	r2, [r3, #88]	; 0x58
			LED_Color_Data[7][2] = 0;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <main+0x368>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	65da      	str	r2, [r3, #92]	; 0x5c
			setLEDs();
 80013fa:	f7ff fad1 	bl	80009a0 <setLEDs>
 80013fe:	e03a      	b.n	8001476 <main+0x3a6>
 8001400:	d2f1a9fc 	.word	0xd2f1a9fc
 8001404:	3f50624d 	.word	0x3f50624d
 8001408:	08017eb4 	.word	0x08017eb4
 800140c:	3ff00000 	.word	0x3ff00000
 8001410:	43fa0000 	.word	0x43fa0000
 8001414:	58020c00 	.word	0x58020c00
 8001418:	58021800 	.word	0x58021800
 800141c:	24001078 	.word	0x24001078
 8001420:	42b40000 	.word	0x42b40000
 8001424:	43340000 	.word	0x43340000
 8001428:	00000000 	.word	0x00000000
 800142c:	42340000 	.word	0x42340000
 8001430:	33bca100 	.word	0x33bca100
 8001434:	447a0000 	.word	0x447a0000
 8001438:	24000a60 	.word	0x24000a60
 800143c:	58020000 	.word	0x58020000
 8001440:	58020400 	.word	0x58020400
 8001444:	58021400 	.word	0x58021400
 8001448:	58021000 	.word	0x58021000
		}else{

			HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	48c0      	ldr	r0, [pc, #768]	; (8001754 <main+0x684>)
 8001452:	f006 fc19 	bl	8007c88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	2104      	movs	r1, #4
 800145a:	48be      	ldr	r0, [pc, #760]	; (8001754 <main+0x684>)
 800145c:	f006 fc14 	bl	8007c88 <HAL_GPIO_WritePin>


			LED_Color_Data[7][0] = 0;
 8001460:	4bbd      	ldr	r3, [pc, #756]	; (8001758 <main+0x688>)
 8001462:	2200      	movs	r2, #0
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
			LED_Color_Data[7][1] = 255;
 8001466:	4bbc      	ldr	r3, [pc, #752]	; (8001758 <main+0x688>)
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
			LED_Color_Data[7][2] = 0;
 800146c:	4bba      	ldr	r3, [pc, #744]	; (8001758 <main+0x688>)
 800146e:	2200      	movs	r2, #0
 8001470:	65da      	str	r2, [r3, #92]	; 0x5c
			setLEDs();
 8001472:	f7ff fa95 	bl	80009a0 <setLEDs>
		}

		int packet_lenght = LoRA_parsePacket();
 8001476:	f7ff fdc0 	bl	8000ffa <LoRA_parsePacket>
 800147a:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
		char LoRA_data[50];
		if(packet_lenght){
 800147e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8152 	beq.w	800172c <main+0x65c>
			connected = 1;
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
			last_packet = HAL_GetTick();
 800148e:	f002 f93b 	bl	8003708 <HAL_GetTick>
 8001492:	4603      	mov	r3, r0
 8001494:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
			for(int i = 0; i < packet_lenght; i++){
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800149e:	e012      	b.n	80014c6 <main+0x3f6>
				LoRA_data[i] = LoRA_Read_Register(0x00);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fc35 	bl	8000d10 <LoRA_Read_Register>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4619      	mov	r1, r3
 80014aa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80014ae:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80014b2:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80014b6:	4413      	add	r3, r2
 80014b8:	460a      	mov	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < packet_lenght; i++){
 80014bc:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80014c0:	3301      	adds	r3, #1
 80014c2:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 80014c6:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 80014ca:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dbe6      	blt.n	80014a0 <main+0x3d0>
			}
			LoRA_data[packet_lenght] = '\0';
 80014d2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80014d6:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80014da:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80014de:	4413      	add	r3, r2
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
		    //sprintf( data_gyro,  "%d   %d\n", strlen(LoRA_data), packet_lenght);
		    //CDC_Transmit_HS(data_gyro, strlen(data_gyro));

			//CDC_Transmit_HS(LoRA_data, packet_lenght);

		    if(strcmp(LoRA_data, "ARM") == 0){
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	499d      	ldr	r1, [pc, #628]	; (800175c <main+0x68c>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe ff11 	bl	8000310 <strcmp>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d107      	bne.n	8001504 <main+0x434>
		    	ARMED = 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
		    	setLEDs();
 80014fa:	f7ff fa51 	bl	80009a0 <setLEDs>
		    	LoRA_sendPacket("ARM SUCCESS");
 80014fe:	4898      	ldr	r0, [pc, #608]	; (8001760 <main+0x690>)
 8001500:	f7ff fdba 	bl	8001078 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "DISARM") == 0){
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4997      	ldr	r1, [pc, #604]	; (8001764 <main+0x694>)
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ff01 	bl	8000310 <strcmp>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <main+0x450>
		    	ARMED = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
		    	LoRA_sendPacket("DISARM SUCCESS");
 800151a:	4893      	ldr	r0, [pc, #588]	; (8001768 <main+0x698>)
 800151c:	f7ff fdac 	bl	8001078 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "CONT") == 0){
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4992      	ldr	r1, [pc, #584]	; (800176c <main+0x69c>)
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fef3 	bl	8000310 <strcmp>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 808f 	bne.w	8001650 <main+0x580>

		    	char cont_str[150];
		    	uint8_t CONTS[8];
		    	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001532:	2104      	movs	r1, #4
 8001534:	488e      	ldr	r0, [pc, #568]	; (8001770 <main+0x6a0>)
 8001536:	f006 fb8f 	bl	8007c58 <HAL_GPIO_ReadPin>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001542:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001546:	701a      	strb	r2, [r3, #0]
		    	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154c:	4889      	ldr	r0, [pc, #548]	; (8001774 <main+0x6a4>)
 800154e:	f006 fb83 	bl	8007c58 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800155a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800155e:	705a      	strb	r2, [r3, #1]
		    	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001564:	4883      	ldr	r0, [pc, #524]	; (8001774 <main+0x6a4>)
 8001566:	f006 fb77 	bl	8007c58 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001572:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001576:	709a      	strb	r2, [r3, #2]
		    	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001578:	2101      	movs	r1, #1
 800157a:	487f      	ldr	r0, [pc, #508]	; (8001778 <main+0x6a8>)
 800157c:	f006 fb6c 	bl	8007c58 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001588:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800158c:	70da      	strb	r2, [r3, #3]
		    	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	487a      	ldr	r0, [pc, #488]	; (800177c <main+0x6ac>)
 8001592:	f006 fb61 	bl	8007c58 <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800159e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015a2:	711a      	strb	r2, [r3, #4]
		    	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 80015a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a8:	4874      	ldr	r0, [pc, #464]	; (800177c <main+0x6ac>)
 80015aa:	f006 fb55 	bl	8007c58 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80015b6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015ba:	715a      	strb	r2, [r3, #5]
		    	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 80015bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c0:	486e      	ldr	r0, [pc, #440]	; (800177c <main+0x6ac>)
 80015c2:	f006 fb49 	bl	8007c58 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80015ce:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015d2:	719a      	strb	r2, [r3, #6]
		    	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 80015d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d8:	4868      	ldr	r0, [pc, #416]	; (800177c <main+0x6ac>)
 80015da:	f006 fb3d 	bl	8007c58 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80015e6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015ea:	71da      	strb	r2, [r3, #7]

	    		char message[100];
		    	for(int i=0; i<8; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80015f2:	e029      	b.n	8001648 <main+0x578>
		    	{
		    		if(CONTS[i])
 80015f4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80015f8:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80015fc:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d009      	beq.n	800161c <main+0x54c>
		    		{
		    			sprintf( message,  "PYRO %d DOESN'T HAVE CONTINUITY", i+1);
 8001608:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001612:	495b      	ldr	r1, [pc, #364]	; (8001780 <main+0x6b0>)
 8001614:	4618      	mov	r0, r3
 8001616:	f015 fad1 	bl	8016bbc <siprintf>
 800161a:	e008      	b.n	800162e <main+0x55e>
		    		}
		    		else
		    		{
		    			sprintf( message,  "PYRO %d HAS CONTINUITY", i+1);
 800161c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001626:	4957      	ldr	r1, [pc, #348]	; (8001784 <main+0x6b4>)
 8001628:	4618      	mov	r0, r3
 800162a:	f015 fac7 	bl	8016bbc <siprintf>
		    		}

		    		LoRA_sendPacket(message);
 800162e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fd20 	bl	8001078 <LoRA_sendPacket>
		    		HAL_Delay(100);
 8001638:	2064      	movs	r0, #100	; 0x64
 800163a:	f002 f871 	bl	8003720 <HAL_Delay>
		    	for(int i=0; i<8; i++)
 800163e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8001648:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800164c:	2b07      	cmp	r3, #7
 800164e:	ddd1      	ble.n	80015f4 <main+0x524>


		    }
		    int channel_num;
		    char fire_data[50];
		    sscanf(LoRA_data, "%s %d", fire_data, &channel_num);
 8001650:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001654:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001658:	1d38      	adds	r0, r7, #4
 800165a:	494b      	ldr	r1, [pc, #300]	; (8001788 <main+0x6b8>)
 800165c:	f015 face 	bl	8016bfc <siscanf>
		    if(strcmp(fire_data, "FIRE") == 0){
 8001660:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001664:	4949      	ldr	r1, [pc, #292]	; (800178c <main+0x6bc>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fe52 	bl	8000310 <strcmp>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d15c      	bne.n	800172c <main+0x65c>
		    	if(ARMED){
 8001672:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001676:	2b00      	cmp	r3, #0
 8001678:	d053      	beq.n	8001722 <main+0x652>
					switch (channel_num) {
 800167a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800167e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	2b07      	cmp	r3, #7
 8001688:	d84f      	bhi.n	800172a <main+0x65a>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <main+0x5c0>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016b1 	.word	0x080016b1
 8001694:	080016c3 	.word	0x080016c3
 8001698:	080016d1 	.word	0x080016d1
 800169c:	080016df 	.word	0x080016df
 80016a0:	080016ed 	.word	0x080016ed
 80016a4:	080016f9 	.word	0x080016f9
 80016a8:	08001707 	.word	0x08001707
 80016ac:	08001715 	.word	0x08001715
						case 1:
				    		LoRA_sendPacket("PYRO 1 FIRED");
 80016b0:	4837      	ldr	r0, [pc, #220]	; (8001790 <main+0x6c0>)
 80016b2:	f7ff fce1 	bl	8001078 <LoRA_sendPacket>

							HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2102      	movs	r1, #2
 80016ba:	482d      	ldr	r0, [pc, #180]	; (8001770 <main+0x6a0>)
 80016bc:	f006 fae4 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 80016c0:	e034      	b.n	800172c <main+0x65c>
						case 2:
							HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 1);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c8:	482a      	ldr	r0, [pc, #168]	; (8001774 <main+0x6a4>)
 80016ca:	f006 fadd 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 80016ce:	e02d      	b.n	800172c <main+0x65c>
						case 3:
							HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 1);
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <main+0x6a4>)
 80016d8:	f006 fad6 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 80016dc:	e026      	b.n	800172c <main+0x65c>
						case 4:
							HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 1);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e4:	4823      	ldr	r0, [pc, #140]	; (8001774 <main+0x6a4>)
 80016e6:	f006 facf 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 80016ea:	e01f      	b.n	800172c <main+0x65c>

						case 5:
							HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2102      	movs	r1, #2
 80016f0:	4821      	ldr	r0, [pc, #132]	; (8001778 <main+0x6a8>)
 80016f2:	f006 fac9 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 80016f6:	e019      	b.n	800172c <main+0x65c>
						case 6:
							HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 1);
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fe:	481f      	ldr	r0, [pc, #124]	; (800177c <main+0x6ac>)
 8001700:	f006 fac2 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 8001704:	e012      	b.n	800172c <main+0x65c>
						case 7:
							HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170c:	481b      	ldr	r0, [pc, #108]	; (800177c <main+0x6ac>)
 800170e:	f006 fabb 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 8001712:	e00b      	b.n	800172c <main+0x65c>
						case 8:
							HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <main+0x6ac>)
 800171c:	f006 fab4 	bl	8007c88 <HAL_GPIO_WritePin>
							break;
 8001720:	e004      	b.n	800172c <main+0x65c>
						default:
							break;
					}
		    	}else{
		    		LoRA_sendPacket("CANNOT FIRE, BOARD NOT ARMED");
 8001722:	481c      	ldr	r0, [pc, #112]	; (8001794 <main+0x6c4>)
 8001724:	f7ff fca8 	bl	8001078 <LoRA_sendPacket>
 8001728:	e000      	b.n	800172c <main+0x65c>
							break;
 800172a:	bf00      	nop
		    	}
		    }
		}
		setServo(1, 0);
 800172c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001798 <main+0x6c8>
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff f8ed 	bl	8000910 <setServo>
		HAL_Delay(2000);
 8001736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800173a:	f001 fff1 	bl	8003720 <HAL_Delay>
		setServo(1, 180);
 800173e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800179c <main+0x6cc>
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff f8e4 	bl	8000910 <setServo>
		HAL_Delay(2000);
 8001748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800174c:	f001 ffe8 	bl	8003720 <HAL_Delay>
	while (1) {
 8001750:	e5d7      	b.n	8001302 <main+0x232>
 8001752:	bf00      	nop
 8001754:	58020000 	.word	0x58020000
 8001758:	24000a60 	.word	0x24000a60
 800175c:	08017e0c 	.word	0x08017e0c
 8001760:	08017e10 	.word	0x08017e10
 8001764:	08017e1c 	.word	0x08017e1c
 8001768:	08017e24 	.word	0x08017e24
 800176c:	08017e34 	.word	0x08017e34
 8001770:	58020400 	.word	0x58020400
 8001774:	58021400 	.word	0x58021400
 8001778:	58021800 	.word	0x58021800
 800177c:	58021000 	.word	0x58021000
 8001780:	08017e3c 	.word	0x08017e3c
 8001784:	08017e5c 	.word	0x08017e5c
 8001788:	08017e74 	.word	0x08017e74
 800178c:	08017e7c 	.word	0x08017e7c
 8001790:	08017e84 	.word	0x08017e84
 8001794:	08017e94 	.word	0x08017e94
 8001798:	00000000 	.word	0x00000000
 800179c:	43340000 	.word	0x43340000

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09c      	sub	sp, #112	; 0x70
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	224c      	movs	r2, #76	; 0x4c
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f015 f9fc 	bl	8016bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2220      	movs	r2, #32
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f015 f9f6 	bl	8016bac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017c0:	2002      	movs	r0, #2
 80017c2:	f007 fe5b 	bl	800947c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <SystemClock_Config+0xf4>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d2:	4a30      	ldr	r2, [pc, #192]	; (8001894 <SystemClock_Config+0xf4>)
 80017d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <SystemClock_Config+0xf4>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017e6:	bf00      	nop
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <SystemClock_Config+0xf4>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f4:	d1f8      	bne.n	80017e8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80017f6:	2323      	movs	r3, #35	; 0x23
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001800:	2301      	movs	r3, #1
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001810:	2300      	movs	r3, #0
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001818:	230c      	movs	r3, #12
 800181a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001820:	230c      	movs	r3, #12
 8001822:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001824:	2302      	movs	r3, #2
 8001826:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001828:	230c      	movs	r3, #12
 800182a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800182c:	2300      	movs	r3, #0
 800182e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	4618      	mov	r0, r3
 800183a:	f007 fe69 	bl	8009510 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001844:	f000 ff02 	bl	800264c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001848:	233f      	movs	r3, #63	; 0x3f
 800184a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184c:	2303      	movs	r3, #3
 800184e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001854:	2308      	movs	r3, #8
 8001856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001858:	2340      	movs	r3, #64	; 0x40
 800185a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800185c:	2340      	movs	r3, #64	; 0x40
 800185e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f008 fa28 	bl	8009cc4 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800187a:	f000 fee7 	bl	800264c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800187e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001882:	2100      	movs	r1, #0
 8001884:	2000      	movs	r0, #0
 8001886:	f008 fbd3 	bl	800a030 <HAL_RCC_MCOConfig>
}
 800188a:	bf00      	nop
 800188c:	3770      	adds	r7, #112	; 0x70
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	58024800 	.word	0x58024800

08001898 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0ae      	sub	sp, #184	; 0xb8
 800189c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	22b8      	movs	r2, #184	; 0xb8
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f015 f981 	bl	8016bac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 80018aa:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80018ba:	230c      	movs	r3, #12
 80018bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80018be:	2304      	movs	r3, #4
 80018c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018ca:	23c0      	movs	r3, #192	; 0xc0
 80018cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	4618      	mov	r0, r3
 80018e6:	f008 fde3 	bl	800a4b0 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80018f0:	f000 feac 	bl	800264c <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	37b8      	adds	r7, #184	; 0xb8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2224      	movs	r2, #36	; 0x24
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f015 f949 	bl	8016bac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <MX_ADC1_Init+0xe4>)
 800191c:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <MX_ADC1_Init+0xe8>)
 800191e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001922:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001926:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <MX_ADC1_Init+0xe4>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800192e:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001936:	2204      	movs	r2, #4
 8001938:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <MX_ADC1_Init+0xe4>)
 800193c:	2200      	movs	r2, #0
 800193e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001942:	2200      	movs	r2, #0
 8001944:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001948:	2201      	movs	r2, #1
 800194a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_ADC1_Init+0xe4>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001956:	2200      	movs	r2, #0
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <MX_ADC1_Init+0xe4>)
 800195c:	2200      	movs	r2, #0
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001962:	2200      	movs	r2, #0
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001968:	2200      	movs	r2, #0
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <MX_ADC1_Init+0xe4>)
 800196e:	2200      	movs	r2, #0
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800197a:	4819      	ldr	r0, [pc, #100]	; (80019e0 <MX_ADC1_Init+0xe4>)
 800197c:	f002 f950 	bl	8003c20 <HAL_ADC_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001986:	f000 fe61 	bl	800264c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	4812      	ldr	r0, [pc, #72]	; (80019e0 <MX_ADC1_Init+0xe4>)
 8001996:	f003 f98b 	bl	8004cb0 <HAL_ADCEx_MultiModeConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80019a0:	f000 fe54 	bl	800264c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_ADC1_Init+0xec>)
 80019a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019a8:	2306      	movs	r3, #6
 80019aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80019ac:	2303      	movs	r3, #3
 80019ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80019b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019b6:	2304      	movs	r3, #4
 80019b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_ADC1_Init+0xe4>)
 80019ca:	f002 fb31 	bl	8004030 <HAL_ADC_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80019d4:	f000 fe3a 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3730      	adds	r7, #48	; 0x30
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	24000b08 	.word	0x24000b08
 80019e4:	40022000 	.word	0x40022000
 80019e8:	2a000400 	.word	0x2a000400

080019ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2224      	movs	r2, #36	; 0x24
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f015 f8d7 	bl	8016bac <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a00:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <MX_ADC3_Init+0xd4>)
 8001a02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a06:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001a0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a0e:	2208      	movs	r2, #8
 8001a10:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a1e:	4b27      	ldr	r3, [pc, #156]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a20:	2204      	movs	r2, #4
 8001a22:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a72:	4812      	ldr	r0, [pc, #72]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001a74:	f002 f8d4 	bl	8003c20 <HAL_ADC_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001a7e:	f000 fde5 	bl	800264c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_ADC3_Init+0xd8>)
 8001a84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a86:	2306      	movs	r3, #6
 8001a88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a8e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a94:	2304      	movs	r3, #4
 8001a96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_ADC3_Init+0xd0>)
 8001aa6:	f002 fac3 	bl	8004030 <HAL_ADC_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001ab0:	f000 fdcc 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	24000b78 	.word	0x24000b78
 8001ac0:	58026000 	.word	0x58026000
 8001ac4:	04300002 	.word	0x04300002

08001ac8 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <MX_FDCAN3_Init+0xc4>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001af2:	2210      	movs	r2, #16
 8001af4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b46:	2204      	movs	r2, #4
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b52:	2204      	movs	r2, #4
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b70:	2204      	movs	r2, #4
 8001b72:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_FDCAN3_Init+0xc0>)
 8001b76:	f005 fb63 	bl	8007240 <HAL_FDCAN_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001b80:	f000 fd64 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	24000cd8 	.word	0x24000cd8
 8001b8c:	4000d400 	.word	0x4000d400

08001b90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_I2C2_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <MX_I2C2_Init+0x7c>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bca:	480e      	ldr	r0, [pc, #56]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bcc:	f006 f876 	bl	8007cbc <HAL_I2C_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001bd6:	f000 fd39 	bl	800264c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bde:	f006 f8fd 	bl	8007ddc <HAL_I2CEx_ConfigAnalogFilter>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001be8:	f000 fd30 	bl	800264c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bec:	2100      	movs	r1, #0
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bf0:	f006 f93f 	bl	8007e72 <HAL_I2CEx_ConfigDigitalFilter>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bfa:	f000 fd27 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	24000d78 	.word	0x24000d78
 8001c08:	40005800 	.word	0x40005800
 8001c0c:	20303e5d 	.word	0x20303e5d

08001c10 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_SDMMC2_SD_Init+0x34>)
 8001c16:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <MX_SDMMC2_SD_Init+0x38>)
 8001c18:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SDMMC2_SD_Init+0x34>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_SDMMC2_SD_Init+0x34>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SDMMC2_SD_Init+0x34>)
 8001c28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2c:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <MX_SDMMC2_SD_Init+0x34>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <MX_SDMMC2_SD_Init+0x34>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	24000dcc 	.word	0x24000dcc
 8001c48:	48022400 	.word	0x48022400

08001c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c52:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <MX_SPI1_Init+0xa8>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c66:	2207      	movs	r2, #7
 8001c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c80:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_SPI1_Init+0xa4>)
 8001cde:	f00c fc31 	bl	800e544 <HAL_SPI_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001ce8:	f000 fcb0 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	24000e48 	.word	0x24000e48
 8001cf4:	40013000 	.word	0x40013000

08001cf8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001cfe:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <MX_SPI2_Init+0xa8>)
 8001d00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d12:	2207      	movs	r2, #7
 8001d14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d2c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_SPI2_Init+0xa4>)
 8001d8a:	f00c fbdb 	bl	800e544 <HAL_SPI_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001d94:	f000 fc5a 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	24000ed0 	.word	0x24000ed0
 8001da0:	40003800 	.word	0x40003800

08001da4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <MX_SPI3_Init+0xa8>)
 8001dac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001db0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001db4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc2:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001dd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001dd8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ddc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	; (8001e48 <MX_SPI3_Init+0xa4>)
 8001e36:	f00c fb85 	bl	800e544 <HAL_SPI_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001e40:	f000 fc04 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	24000f58 	.word	0x24000f58
 8001e4c:	40003c00 	.word	0x40003c00

08001e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <MX_TIM2_Init+0xac>)
 8001e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_TIM2_Init+0xac>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <MX_TIM2_Init+0xac>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_TIM2_Init+0xac>)
 8001e8a:	225a      	movs	r2, #90	; 0x5a
 8001e8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <MX_TIM2_Init+0xac>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_TIM2_Init+0xac>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e9a:	4818      	ldr	r0, [pc, #96]	; (8001efc <MX_TIM2_Init+0xac>)
 8001e9c:	f00d f8eb 	bl	800f076 <HAL_TIM_PWM_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ea6:	f000 fbd1 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4810      	ldr	r0, [pc, #64]	; (8001efc <MX_TIM2_Init+0xac>)
 8001eba:	f00e fb71 	bl	80105a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ec4:	f000 fbc2 	bl	800264c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec8:	2360      	movs	r3, #96	; 0x60
 8001eca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	2208      	movs	r2, #8
 8001edc:	4619      	mov	r1, r3
 8001ede:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_TIM2_Init+0xac>)
 8001ee0:	f00d fd90 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001eea:	f000 fbaf 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001eee:	4803      	ldr	r0, [pc, #12]	; (8001efc <MX_TIM2_Init+0xac>)
 8001ef0:	f001 f8a0 	bl	8003034 <HAL_TIM_MspPostInit>

}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	24000fe0 	.word	0x24000fe0

08001f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f26:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <MX_TIM3_Init+0xc4>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f38:	225a      	movs	r2, #90	; 0x5a
 8001f3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f48:	481d      	ldr	r0, [pc, #116]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f4a:	f00d f894 	bl	800f076 <HAL_TIM_PWM_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f54:	f000 fb7a 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f68:	f00e fb1a 	bl	80105a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f72:	f000 fb6b 	bl	800264c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f76:	2360      	movs	r3, #96	; 0x60
 8001f78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001f8e:	f00d fd39 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f98:	f000 fb58 	bl	800264c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001fa4:	f00d fd2e 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fae:	f000 fb4d 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM3_Init+0xc0>)
 8001fb4:	f001 f83e 	bl	8003034 <HAL_TIM_MspPostInit>

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	2400102c 	.word	0x2400102c
 8001fc4:	40000400 	.word	0x40000400

08001fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	615a      	str	r2, [r3, #20]
 8001fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8001fee:	4a33      	ldr	r2, [pc, #204]	; (80020bc <MX_TIM4_Init+0xf4>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8001ff4:	221c      	movs	r2, #28
 8001ff6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8002000:	f242 720f 	movw	r2, #9999	; 0x270f
 8002004:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <MX_TIM4_Init+0xf0>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002012:	4829      	ldr	r0, [pc, #164]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8002014:	f00d f82f 	bl	800f076 <HAL_TIM_PWM_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800201e:	f000 fb15 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	4821      	ldr	r0, [pc, #132]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8002032:	f00e fab5 	bl	80105a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800203c:	f000 fb06 	bl	800264c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002040:	2360      	movs	r3, #96	; 0x60
 8002042:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	4818      	ldr	r0, [pc, #96]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8002058:	f00d fcd4 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002062:	f000 faf3 	bl	800264c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002066:	463b      	mov	r3, r7
 8002068:	2204      	movs	r2, #4
 800206a:	4619      	mov	r1, r3
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <MX_TIM4_Init+0xf0>)
 800206e:	f00d fcc9 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002078:	f000 fae8 	bl	800264c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800207c:	463b      	mov	r3, r7
 800207e:	2208      	movs	r2, #8
 8002080:	4619      	mov	r1, r3
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <MX_TIM4_Init+0xf0>)
 8002084:	f00d fcbe 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800208e:	f000 fadd 	bl	800264c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002092:	463b      	mov	r3, r7
 8002094:	220c      	movs	r2, #12
 8002096:	4619      	mov	r1, r3
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <MX_TIM4_Init+0xf0>)
 800209a:	f00d fcb3 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80020a4:	f000 fad2 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <MX_TIM4_Init+0xf0>)
 80020aa:	f000 ffc3 	bl	8003034 <HAL_TIM_MspPostInit>

}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	24001078 	.word	0x24001078
 80020bc:	40000800 	.word	0x40000800

080020c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
 80020e0:	615a      	str	r2, [r3, #20]
 80020e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <MX_TIM5_Init+0xac>)
 80020e6:	4a22      	ldr	r2, [pc, #136]	; (8002170 <MX_TIM5_Init+0xb0>)
 80020e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <MX_TIM5_Init+0xac>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <MX_TIM5_Init+0xac>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <MX_TIM5_Init+0xac>)
 80020f8:	225a      	movs	r2, #90	; 0x5a
 80020fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <MX_TIM5_Init+0xac>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <MX_TIM5_Init+0xac>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002108:	4818      	ldr	r0, [pc, #96]	; (800216c <MX_TIM5_Init+0xac>)
 800210a:	f00c ffb4 	bl	800f076 <HAL_TIM_PWM_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002114:	f000 fa9a 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	4811      	ldr	r0, [pc, #68]	; (800216c <MX_TIM5_Init+0xac>)
 8002128:	f00e fa3a 	bl	80105a0 <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002132:	f000 fa8b 	bl	800264c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002136:	2360      	movs	r3, #96	; 0x60
 8002138:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002146:	463b      	mov	r3, r7
 8002148:	220c      	movs	r2, #12
 800214a:	4619      	mov	r1, r3
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM5_Init+0xac>)
 800214e:	f00d fc59 	bl	800fa04 <HAL_TIM_PWM_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002158:	f000 fa78 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM5_Init+0xac>)
 800215e:	f000 ff69 	bl	8003034 <HAL_TIM_MspPostInit>

}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	240010c4 	.word	0x240010c4
 8002170:	40000c00 	.word	0x40000c00

08002174 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <MX_UART4_Init+0x90>)
 800217a:	4a23      	ldr	r2, [pc, #140]	; (8002208 <MX_UART4_Init+0x94>)
 800217c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <MX_UART4_Init+0x90>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_UART4_Init+0x90>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <MX_UART4_Init+0x90>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_UART4_Init+0x90>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_UART4_Init+0x90>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <MX_UART4_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_UART4_Init+0x90>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MX_UART4_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_UART4_Init+0x90>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_UART4_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021bc:	4811      	ldr	r0, [pc, #68]	; (8002204 <MX_UART4_Init+0x90>)
 80021be:	f00e faa9 	bl	8010714 <HAL_UART_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80021c8:	f000 fa40 	bl	800264c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021cc:	2100      	movs	r1, #0
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <MX_UART4_Init+0x90>)
 80021d0:	f00f fbaf 	bl	8011932 <HAL_UARTEx_SetTxFifoThreshold>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80021da:	f000 fa37 	bl	800264c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021de:	2100      	movs	r1, #0
 80021e0:	4808      	ldr	r0, [pc, #32]	; (8002204 <MX_UART4_Init+0x90>)
 80021e2:	f00f fbe4 	bl	80119ae <HAL_UARTEx_SetRxFifoThreshold>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80021ec:	f000 fa2e 	bl	800264c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <MX_UART4_Init+0x90>)
 80021f2:	f00f fb65 	bl	80118c0 <HAL_UARTEx_DisableFifoMode>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80021fc:	f000 fa26 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	24001368 	.word	0x24001368
 8002208:	40004c00 	.word	0x40004c00

0800220c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <MX_USART6_UART_Init+0x94>)
 8002214:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <MX_USART6_UART_Init+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_USART6_UART_Init+0x90>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_USART6_UART_Init+0x90>)
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002250:	2200      	movs	r2, #0
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002254:	4811      	ldr	r0, [pc, #68]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002256:	f00e fa5d 	bl	8010714 <HAL_UART_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002260:	f000 f9f4 	bl	800264c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002264:	2100      	movs	r1, #0
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <MX_USART6_UART_Init+0x90>)
 8002268:	f00f fb63 	bl	8011932 <HAL_UARTEx_SetTxFifoThreshold>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002272:	f000 f9eb 	bl	800264c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002276:	2100      	movs	r1, #0
 8002278:	4808      	ldr	r0, [pc, #32]	; (800229c <MX_USART6_UART_Init+0x90>)
 800227a:	f00f fb98 	bl	80119ae <HAL_UARTEx_SetRxFifoThreshold>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002284:	f000 f9e2 	bl	800264c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_USART6_UART_Init+0x90>)
 800228a:	f00f fb19 	bl	80118c0 <HAL_UARTEx_DisableFifoMode>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002294:	f000 f9da 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	240013fc 	.word	0x240013fc
 80022a0:	40011400 	.word	0x40011400

080022a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <MX_DMA_Init+0xbc>)
 80022ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022b0:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <MX_DMA_Init+0xbc>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <MX_DMA_Init+0xbc>)
 80022bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <MX_DMA_Init+0xbc>)
 80022ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <MX_DMA_Init+0xbc>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <MX_DMA_Init+0xbc>)
 80022da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	200b      	movs	r0, #11
 80022ec:	f002 fe9d 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022f0:	200b      	movs	r0, #11
 80022f2:	f002 feb4 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	200c      	movs	r0, #12
 80022fc:	f002 fe95 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002300:	200c      	movs	r0, #12
 8002302:	f002 feac 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	200d      	movs	r0, #13
 800230c:	f002 fe8d 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002310:	200d      	movs	r0, #13
 8002312:	f002 fea4 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	200e      	movs	r0, #14
 800231c:	f002 fe85 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002320:	200e      	movs	r0, #14
 8002322:	f002 fe9c 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	200f      	movs	r0, #15
 800232c:	f002 fe7d 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002330:	200f      	movs	r0, #15
 8002332:	f002 fe94 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	2010      	movs	r0, #16
 800233c:	f002 fe75 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002340:	2010      	movs	r0, #16
 8002342:	f002 fe8c 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2046      	movs	r0, #70	; 0x46
 800234c:	f002 fe6d 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002350:	2046      	movs	r0, #70	; 0x46
 8002352:	f002 fe84 	bl	800505e <HAL_NVIC_EnableIRQ>

}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	58024400 	.word	0x58024400

08002364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800237a:	4bac      	ldr	r3, [pc, #688]	; (800262c <MX_GPIO_Init+0x2c8>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002380:	4aaa      	ldr	r2, [pc, #680]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002382:	f043 0310 	orr.w	r3, r3, #16
 8002386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800238a:	4ba8      	ldr	r3, [pc, #672]	; (800262c <MX_GPIO_Init+0x2c8>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002398:	4ba4      	ldr	r3, [pc, #656]	; (800262c <MX_GPIO_Init+0x2c8>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239e:	4aa3      	ldr	r2, [pc, #652]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023a0:	f043 0320 	orr.w	r3, r3, #32
 80023a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a8:	4ba0      	ldr	r3, [pc, #640]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b6:	4b9d      	ldr	r3, [pc, #628]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023bc:	4a9b      	ldr	r2, [pc, #620]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c6:	4b99      	ldr	r3, [pc, #612]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d4:	4b95      	ldr	r3, [pc, #596]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023da:	4a94      	ldr	r2, [pc, #592]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e4:	4b91      	ldr	r3, [pc, #580]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	4b8e      	ldr	r3, [pc, #568]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f8:	4a8c      	ldr	r2, [pc, #560]	; (800262c <MX_GPIO_Init+0x2c8>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002402:	4b8a      	ldr	r3, [pc, #552]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002410:	4b86      	ldr	r3, [pc, #536]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002416:	4a85      	ldr	r2, [pc, #532]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002420:	4b82      	ldr	r3, [pc, #520]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800242e:	4b7f      	ldr	r3, [pc, #508]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002434:	4a7d      	ldr	r2, [pc, #500]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243e:	4b7b      	ldr	r3, [pc, #492]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800244c:	4b77      	ldr	r3, [pc, #476]	; (800262c <MX_GPIO_Init+0x2c8>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a76      	ldr	r2, [pc, #472]	; (800262c <MX_GPIO_Init+0x2c8>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b73      	ldr	r3, [pc, #460]	; (800262c <MX_GPIO_Init+0x2c8>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	f241 5104 	movw	r1, #5380	; 0x1504
 8002470:	486f      	ldr	r0, [pc, #444]	; (8002630 <MX_GPIO_Init+0x2cc>)
 8002472:	f005 fc09 	bl	8007c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	f248 0106 	movw	r1, #32774	; 0x8006
 800247c:	486d      	ldr	r0, [pc, #436]	; (8002634 <MX_GPIO_Init+0x2d0>)
 800247e:	f005 fc03 	bl	8007c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	2130      	movs	r1, #48	; 0x30
 8002486:	486c      	ldr	r0, [pc, #432]	; (8002638 <MX_GPIO_Init+0x2d4>)
 8002488:	f005 fbfe 	bl	8007c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	2102      	movs	r1, #2
 8002490:	486a      	ldr	r0, [pc, #424]	; (800263c <MX_GPIO_Init+0x2d8>)
 8002492:	f005 fbf9 	bl	8007c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002496:	2200      	movs	r2, #0
 8002498:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800249c:	4868      	ldr	r0, [pc, #416]	; (8002640 <MX_GPIO_Init+0x2dc>)
 800249e:	f005 fbf3 	bl	8007c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	210e      	movs	r1, #14
 80024a6:	4867      	ldr	r0, [pc, #412]	; (8002644 <MX_GPIO_Init+0x2e0>)
 80024a8:	f005 fbee 	bl	8007c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	f240 3101 	movw	r1, #769	; 0x301
 80024b2:	4865      	ldr	r0, [pc, #404]	; (8002648 <MX_GPIO_Init+0x2e4>)
 80024b4:	f005 fbe8 	bl	8007c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80024b8:	f241 5304 	movw	r3, #5380	; 0x1504
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4857      	ldr	r0, [pc, #348]	; (8002630 <MX_GPIO_Init+0x2cc>)
 80024d2:	f005 fa19 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80024d6:	f248 0306 	movw	r3, #32774	; 0x8006
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4619      	mov	r1, r3
 80024ee:	4851      	ldr	r0, [pc, #324]	; (8002634 <MX_GPIO_Init+0x2d0>)
 80024f0:	f005 fa0a 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024f4:	2330      	movs	r3, #48	; 0x30
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	484b      	ldr	r0, [pc, #300]	; (8002638 <MX_GPIO_Init+0x2d4>)
 800250c:	f005 f9fc 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002510:	2302      	movs	r3, #2
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002514:	2301      	movs	r3, #1
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002524:	4619      	mov	r1, r3
 8002526:	4845      	ldr	r0, [pc, #276]	; (800263c <MX_GPIO_Init+0x2d8>)
 8002528:	f005 f9ee 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 800252c:	2304      	movs	r3, #4
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002534:	2301      	movs	r3, #1
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	483f      	ldr	r0, [pc, #252]	; (800263c <MX_GPIO_Init+0x2d8>)
 8002540:	f005 f9e2 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002544:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255a:	4619      	mov	r1, r3
 800255c:	4838      	ldr	r0, [pc, #224]	; (8002640 <MX_GPIO_Init+0x2dc>)
 800255e:	f005 f9d3 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002562:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256c:	2301      	movs	r3, #1
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002574:	4619      	mov	r1, r3
 8002576:	4832      	ldr	r0, [pc, #200]	; (8002640 <MX_GPIO_Init+0x2dc>)
 8002578:	f005 f9c6 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 800257c:	2301      	movs	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258c:	4619      	mov	r1, r3
 800258e:	482d      	ldr	r0, [pc, #180]	; (8002644 <MX_GPIO_Init+0x2e0>)
 8002590:	f005 f9ba 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002594:	230e      	movs	r3, #14
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	4826      	ldr	r0, [pc, #152]	; (8002644 <MX_GPIO_Init+0x2e0>)
 80025ac:	f005 f9ac 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80025b0:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c2:	4619      	mov	r1, r3
 80025c4:	481a      	ldr	r0, [pc, #104]	; (8002630 <MX_GPIO_Init+0x2cc>)
 80025c6:	f005 f99f 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 80025ca:	f240 3301 	movw	r3, #769	; 0x301
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	4819      	ldr	r0, [pc, #100]	; (8002648 <MX_GPIO_Init+0x2e4>)
 80025e4:	f005 f990 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80025e8:	2310      	movs	r3, #16
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f8:	4619      	mov	r1, r3
 80025fa:	4812      	ldr	r0, [pc, #72]	; (8002644 <MX_GPIO_Init+0x2e0>)
 80025fc:	f005 f984 	bl	8007908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_GPIO_Init+0x2d0>)
 800261e:	f005 f973 	bl	8007908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002622:	bf00      	nop
 8002624:	3738      	adds	r7, #56	; 0x38
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58024400 	.word	0x58024400
 8002630:	58021000 	.word	0x58021000
 8002634:	58020000 	.word	0x58020000
 8002638:	58020800 	.word	0x58020800
 800263c:	58020400 	.word	0x58020400
 8002640:	58021400 	.word	0x58021400
 8002644:	58021800 	.word	0x58021800
 8002648:	58020c00 	.word	0x58020c00

0800264c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002650:	b672      	cpsid	i
}
 8002652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002654:	e7fe      	b.n	8002654 <Error_Handler+0x8>
	...

08002658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_MspInit+0x30>)
 8002660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002664:	4a08      	ldr	r2, [pc, #32]	; (8002688 <HAL_MspInit+0x30>)
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_MspInit+0x30>)
 8002670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	58024400 	.word	0x58024400

0800268c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5d      	ldr	r2, [pc, #372]	; (8002820 <HAL_ADC_MspInit+0x194>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d159      	bne.n	8002762 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_ADC_MspInit+0x198>)
 80026b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026b4:	4a5b      	ldr	r2, [pc, #364]	; (8002824 <HAL_ADC_MspInit+0x198>)
 80026b6:	f043 0320 	orr.w	r3, r3, #32
 80026ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026be:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_ADC_MspInit+0x198>)
 80026c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026cc:	4b55      	ldr	r3, [pc, #340]	; (8002824 <HAL_ADC_MspInit+0x198>)
 80026ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d2:	4a54      	ldr	r2, [pc, #336]	; (8002824 <HAL_ADC_MspInit+0x198>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026dc:	4b51      	ldr	r3, [pc, #324]	; (8002824 <HAL_ADC_MspInit+0x198>)
 80026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	2303      	movs	r3, #3
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f107 031c 	add.w	r3, r7, #28
 80026fa:	4619      	mov	r1, r3
 80026fc:	484a      	ldr	r0, [pc, #296]	; (8002828 <HAL_ADC_MspInit+0x19c>)
 80026fe:	f005 f903 	bl	8007908 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002702:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002704:	4a4a      	ldr	r2, [pc, #296]	; (8002830 <HAL_ADC_MspInit+0x1a4>)
 8002706:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002708:	4b48      	ldr	r3, [pc, #288]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 800270a:	2209      	movs	r2, #9
 800270c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002714:	4b45      	ldr	r3, [pc, #276]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800271a:	4b44      	ldr	r3, [pc, #272]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 800271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800272a:	4b40      	ldr	r3, [pc, #256]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 800272c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002734:	2200      	movs	r2, #0
 8002736:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002738:	4b3c      	ldr	r3, [pc, #240]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273e:	4b3b      	ldr	r3, [pc, #236]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002744:	4839      	ldr	r0, [pc, #228]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002746:	f002 fca5 	bl	8005094 <HAL_DMA_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002750:	f7ff ff7c 	bl	800264c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a35      	ldr	r2, [pc, #212]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 8002758:	659a      	str	r2, [r3, #88]	; 0x58
 800275a:	4a34      	ldr	r2, [pc, #208]	; (800282c <HAL_ADC_MspInit+0x1a0>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002760:	e059      	b.n	8002816 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a33      	ldr	r2, [pc, #204]	; (8002834 <HAL_ADC_MspInit+0x1a8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d154      	bne.n	8002816 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_ADC_MspInit+0x198>)
 800276e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002772:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_ADC_MspInit+0x198>)
 8002774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_ADC_MspInit+0x198>)
 800277e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_ADC_MspInit+0x198>)
 800278c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002790:	4a24      	ldr	r2, [pc, #144]	; (8002824 <HAL_ADC_MspInit+0x198>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_ADC_MspInit+0x198>)
 800279c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80027a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80027ac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80027b0:	f000 ffda 	bl	8003768 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_ADC_MspInit+0x1b0>)
 80027b8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027bc:	2273      	movs	r2, #115	; 0x73
 80027be:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027da:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ea:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027f2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80027fa:	480f      	ldr	r0, [pc, #60]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 80027fc:	f002 fc4a 	bl	8005094 <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002806:	f7ff ff21 	bl	800264c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 800280e:	659a      	str	r2, [r3, #88]	; 0x58
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_ADC_MspInit+0x1ac>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002816:	bf00      	nop
 8002818:	3730      	adds	r7, #48	; 0x30
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000
 8002824:	58024400 	.word	0x58024400
 8002828:	58020800 	.word	0x58020800
 800282c:	24000be8 	.word	0x24000be8
 8002830:	40020088 	.word	0x40020088
 8002834:	58026000 	.word	0x58026000
 8002838:	24000c60 	.word	0x24000c60
 800283c:	400204b8 	.word	0x400204b8

08002840 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b0b8      	sub	sp, #224	; 0xe0
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	22b8      	movs	r2, #184	; 0xb8
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f014 f9a3 	bl	8016bac <memset>
  if(hfdcan->Instance==FDCAN3)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <HAL_FDCAN_MspInit+0xc4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d144      	bne.n	80028fa <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002870:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800287c:	2300      	movs	r3, #0
 800287e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4618      	mov	r0, r3
 8002886:	f007 fe13 	bl	800a4b0 <HAL_RCCEx_PeriphCLKConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002890:	f7ff fedc 	bl	800264c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_FDCAN_MspInit+0xc8>)
 8002896:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800289a:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_FDCAN_MspInit+0xc8>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <HAL_FDCAN_MspInit+0xc8>)
 80028a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_FDCAN_MspInit+0xc8>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <HAL_FDCAN_MspInit+0xc8>)
 80028ba:	f043 0320 	orr.w	r3, r3, #32
 80028be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_FDCAN_MspInit+0xc8>)
 80028c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028d0:	23c0      	movs	r3, #192	; 0xc0
 80028d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80028e8:	2302      	movs	r3, #2
 80028ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <HAL_FDCAN_MspInit+0xcc>)
 80028f6:	f005 f807 	bl	8007908 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80028fa:	bf00      	nop
 80028fc:	37e0      	adds	r7, #224	; 0xe0
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	4000d400 	.word	0x4000d400
 8002908:	58024400 	.word	0x58024400
 800290c:	58021400 	.word	0x58021400

08002910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0b8      	sub	sp, #224	; 0xe0
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	22b8      	movs	r2, #184	; 0xb8
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f014 f93b 	bl	8016bac <memset>
  if(hi2c->Instance==I2C2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <HAL_I2C_MspInit+0xc4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d145      	bne.n	80029cc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002940:	f04f 0208 	mov.w	r2, #8
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f007 fdaa 	bl	800a4b0 <HAL_RCCEx_PeriphCLKConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002962:	f7ff fe73 	bl	800264c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_I2C_MspInit+0xc8>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_I2C_MspInit+0xc8>)
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_I2C_MspInit+0xc8>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002984:	2303      	movs	r3, #3
 8002986:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800299c:	2304      	movs	r3, #4
 800299e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029a6:	4619      	mov	r1, r3
 80029a8:	480c      	ldr	r0, [pc, #48]	; (80029dc <HAL_I2C_MspInit+0xcc>)
 80029aa:	f004 ffad 	bl	8007908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_I2C_MspInit+0xc8>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029b4:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <HAL_I2C_MspInit+0xc8>)
 80029b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_I2C_MspInit+0xc8>)
 80029c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	37e0      	adds	r7, #224	; 0xe0
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40005800 	.word	0x40005800
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58021400 	.word	0x58021400

080029e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0ba      	sub	sp, #232	; 0xe8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	22b8      	movs	r2, #184	; 0xb8
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f014 f8d3 	bl	8016bac <memset>
  if(hsd->Instance==SDMMC2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5d      	ldr	r2, [pc, #372]	; (8002b80 <HAL_SD_MspInit+0x1a0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	f040 80b3 	bne.w	8002b78 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a22:	f107 0318 	add.w	r3, r7, #24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f007 fd42 	bl	800a4b0 <HAL_RCCEx_PeriphCLKConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002a32:	f7ff fe0b 	bl	800264c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002a36:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a3c:	4a51      	ldr	r2, [pc, #324]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a42:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002a46:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a54:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5a:	4a4a      	ldr	r2, [pc, #296]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a72:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a78:	4a42      	ldr	r2, [pc, #264]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a82:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_SD_MspInit+0x1a4>)
 8002a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a90:	2340      	movs	r3, #64	; 0x40
 8002a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002aa8:	230b      	movs	r3, #11
 8002aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4834      	ldr	r0, [pc, #208]	; (8002b88 <HAL_SD_MspInit+0x1a8>)
 8002ab6:	f004 ff27 	bl	8007908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002acc:	2303      	movs	r3, #3
 8002ace:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002ad2:	230b      	movs	r3, #11
 8002ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002adc:	4619      	mov	r1, r3
 8002ade:	482a      	ldr	r0, [pc, #168]	; (8002b88 <HAL_SD_MspInit+0x1a8>)
 8002ae0:	f004 ff12 	bl	8007908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002afe:	230b      	movs	r3, #11
 8002b00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4820      	ldr	r0, [pc, #128]	; (8002b8c <HAL_SD_MspInit+0x1ac>)
 8002b0c:	f004 fefc 	bl	8007908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002b2a:	230b      	movs	r3, #11
 8002b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4815      	ldr	r0, [pc, #84]	; (8002b8c <HAL_SD_MspInit+0x1ac>)
 8002b38:	f004 fee6 	bl	8007908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002b56:	230a      	movs	r3, #10
 8002b58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b60:	4619      	mov	r1, r3
 8002b62:	480a      	ldr	r0, [pc, #40]	; (8002b8c <HAL_SD_MspInit+0x1ac>)
 8002b64:	f004 fed0 	bl	8007908 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	207c      	movs	r0, #124	; 0x7c
 8002b6e:	f002 fa5c 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002b72:	207c      	movs	r0, #124	; 0x7c
 8002b74:	f002 fa73 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002b78:	bf00      	nop
 8002b7a:	37e8      	adds	r7, #232	; 0xe8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	48022400 	.word	0x48022400
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58020c00 	.word	0x58020c00
 8002b8c:	58021800 	.word	0x58021800

08002b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08e      	sub	sp, #56	; 0x38
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a4f      	ldr	r2, [pc, #316]	; (8002cec <HAL_SPI_MspInit+0x15c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d12e      	bne.n	8002c10 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bb2:	4b4f      	ldr	r3, [pc, #316]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bb8:	4a4d      	ldr	r2, [pc, #308]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002bba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bc2:	4b4b      	ldr	r3, [pc, #300]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	4a46      	ldr	r2, [pc, #280]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be0:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bee:	23e0      	movs	r3, #224	; 0xe0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bfe:	2305      	movs	r3, #5
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c06:	4619      	mov	r1, r3
 8002c08:	483a      	ldr	r0, [pc, #232]	; (8002cf4 <HAL_SPI_MspInit+0x164>)
 8002c0a:	f004 fe7d 	bl	8007908 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c0e:	e068      	b.n	8002ce2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a38      	ldr	r2, [pc, #224]	; (8002cf8 <HAL_SPI_MspInit+0x168>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12f      	bne.n	8002c7a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c1a:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c20:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3e:	4a2c      	ldr	r2, [pc, #176]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c48:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c68:	2305      	movs	r3, #5
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	4822      	ldr	r0, [pc, #136]	; (8002cfc <HAL_SPI_MspInit+0x16c>)
 8002c74:	f004 fe48 	bl	8007908 <HAL_GPIO_Init>
}
 8002c78:	e033      	b.n	8002ce2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <HAL_SPI_MspInit+0x170>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d12e      	bne.n	8002ce2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_SPI_MspInit+0x160>)
 8002cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002cc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4809      	ldr	r0, [pc, #36]	; (8002d04 <HAL_SPI_MspInit+0x174>)
 8002cde:	f004 fe13 	bl	8007908 <HAL_GPIO_Init>
}
 8002ce2:	bf00      	nop
 8002ce4:	3738      	adds	r7, #56	; 0x38
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40013000 	.word	0x40013000
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	58020000 	.word	0x58020000
 8002cf8:	40003800 	.word	0x40003800
 8002cfc:	58020400 	.word	0x58020400
 8002d00:	40003c00 	.word	0x40003c00
 8002d04:	58020800 	.word	0x58020800

08002d08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d15d      	bne.n	8002de6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d2a:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d30:	4a8c      	ldr	r2, [pc, #560]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d3a:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	4b86      	ldr	r3, [pc, #536]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4e:	4a85      	ldr	r2, [pc, #532]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d58:	4b82      	ldr	r3, [pc, #520]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d76:	2301      	movs	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	f107 031c 	add.w	r3, r7, #28
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4879      	ldr	r0, [pc, #484]	; (8002f68 <HAL_TIM_PWM_MspInit+0x260>)
 8002d82:	f004 fdc1 	bl	8007908 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002d86:	4b79      	ldr	r3, [pc, #484]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002d88:	4a79      	ldr	r2, [pc, #484]	; (8002f70 <HAL_TIM_PWM_MspInit+0x268>)
 8002d8a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002d8c:	4b77      	ldr	r3, [pc, #476]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002d8e:	2214      	movs	r2, #20
 8002d90:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d92:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d98:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002da6:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002da8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dae:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002db0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002db4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002db6:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dc2:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002dc8:	4868      	ldr	r0, [pc, #416]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002dca:	f002 f963 	bl	8005094 <HAL_DMA_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002dd4:	f7ff fc3a 	bl	800264c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a64      	ldr	r2, [pc, #400]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dde:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <HAL_TIM_PWM_MspInit+0x264>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002de4:	e119      	b.n	800301a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a62      	ldr	r2, [pc, #392]	; (8002f74 <HAL_TIM_PWM_MspInit+0x26c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d16d      	bne.n	8002ecc <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002df0:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df6:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002e0e:	4b5a      	ldr	r3, [pc, #360]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e10:	4a5a      	ldr	r2, [pc, #360]	; (8002f7c <HAL_TIM_PWM_MspInit+0x274>)
 8002e12:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e16:	2218      	movs	r2, #24
 8002e18:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e1a:	4b57      	ldr	r3, [pc, #348]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e20:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002e26:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e2e:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e34:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e36:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e3c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002e3e:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002e44:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002e50:	4849      	ldr	r0, [pc, #292]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e52:	f002 f91f 	bl	8005094 <HAL_DMA_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002e5c:	f7ff fbf6 	bl	800264c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
 8002e66:	4a44      	ldr	r2, [pc, #272]	; (8002f78 <HAL_TIM_PWM_MspInit+0x270>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002e6c:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e6e:	4a45      	ldr	r2, [pc, #276]	; (8002f84 <HAL_TIM_PWM_MspInit+0x27c>)
 8002e70:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e74:	2217      	movs	r2, #23
 8002e76:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e84:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e8c:	4b3c      	ldr	r3, [pc, #240]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e92:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e9a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002e9c:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002eae:	4834      	ldr	r0, [pc, #208]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002eb0:	f002 f8f0 	bl	8005094 <HAL_DMA_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002eba:	f7ff fbc7 	bl	800264c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <HAL_TIM_PWM_MspInit+0x278>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002eca:	e0a6      	b.n	800301a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_TIM_PWM_MspInit+0x280>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d15e      	bne.n	8002f94 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_TIM_PWM_MspInit+0x288>)
 8002ef8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002efc:	221f      	movs	r2, #31
 8002efe:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f06:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f12:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f1a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f22:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002f36:	4815      	ldr	r0, [pc, #84]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f38:	f002 f8ac 	bl	8005094 <HAL_DMA_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002f42:	f7ff fb83 	bl	800264c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <HAL_TIM_PWM_MspInit+0x284>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	201e      	movs	r0, #30
 8002f58:	f002 f867 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f5c:	201e      	movs	r0, #30
 8002f5e:	f002 f87e 	bl	800505e <HAL_NVIC_EnableIRQ>
}
 8002f62:	e05a      	b.n	800301a <HAL_TIM_PWM_MspInit+0x312>
 8002f64:	58024400 	.word	0x58024400
 8002f68:	58020000 	.word	0x58020000
 8002f6c:	24001110 	.word	0x24001110
 8002f70:	40020028 	.word	0x40020028
 8002f74:	40000400 	.word	0x40000400
 8002f78:	24001188 	.word	0x24001188
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	24001200 	.word	0x24001200
 8002f84:	40020070 	.word	0x40020070
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	24001278 	.word	0x24001278
 8002f90:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_TIM_PWM_MspInit+0x31c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d13d      	bne.n	800301a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f9e:	4b22      	ldr	r3, [pc, #136]	; (8003028 <HAL_TIM_PWM_MspInit+0x320>)
 8002fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <HAL_TIM_PWM_MspInit+0x320>)
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <HAL_TIM_PWM_MspInit+0x320>)
 8002fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_TIM_PWM_MspInit+0x328>)
 8002fc0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fc4:	223a      	movs	r2, #58	; 0x3a
 8002fc6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fda:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fe2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fea:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002ffe:	480b      	ldr	r0, [pc, #44]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8003000:	f002 f848 	bl	8005094 <HAL_DMA_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800300a:	f7ff fb1f 	bl	800264c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a06      	ldr	r2, [pc, #24]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
 8003014:	4a05      	ldr	r2, [pc, #20]	; (800302c <HAL_TIM_PWM_MspInit+0x324>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6393      	str	r3, [r2, #56]	; 0x38
}
 800301a:	bf00      	nop
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40000c00 	.word	0x40000c00
 8003028:	58024400 	.word	0x58024400
 800302c:	240012f0 	.word	0x240012f0
 8003030:	40020040 	.word	0x40020040

08003034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d120      	bne.n	8003098 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003056:	4b52      	ldr	r3, [pc, #328]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 8003058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305c:	4a50      	ldr	r2, [pc, #320]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003066:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 8003068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800307e:	2302      	movs	r3, #2
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003086:	2301      	movs	r3, #1
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	4619      	mov	r1, r3
 8003090:	4844      	ldr	r0, [pc, #272]	; (80031a4 <HAL_TIM_MspPostInit+0x170>)
 8003092:	f004 fc39 	bl	8007908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003096:	e07f      	b.n	8003198 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a42      	ldr	r2, [pc, #264]	; (80031a8 <HAL_TIM_MspPostInit+0x174>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d11f      	bne.n	80030e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 80030a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a8:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 80030aa:	f043 0302 	orr.w	r3, r3, #2
 80030ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b2:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 80030b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030c0:	2330      	movs	r3, #48	; 0x30
 80030c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030c8:	2302      	movs	r3, #2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030cc:	2300      	movs	r3, #0
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030d0:	2302      	movs	r3, #2
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	4832      	ldr	r0, [pc, #200]	; (80031a4 <HAL_TIM_MspPostInit+0x170>)
 80030dc:	f004 fc14 	bl	8007908 <HAL_GPIO_Init>
}
 80030e0:	e05a      	b.n	8003198 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a31      	ldr	r2, [pc, #196]	; (80031ac <HAL_TIM_MspPostInit+0x178>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d131      	bne.n	8003150 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 80030ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800310a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800311c:	2302      	movs	r3, #2
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	4619      	mov	r1, r3
 8003126:	4822      	ldr	r0, [pc, #136]	; (80031b0 <HAL_TIM_MspPostInit+0x17c>)
 8003128:	f004 fbee 	bl	8007908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800312c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003136:	2302      	movs	r3, #2
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800313e:	2302      	movs	r3, #2
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	4819      	ldr	r0, [pc, #100]	; (80031b0 <HAL_TIM_MspPostInit+0x17c>)
 800314a:	f004 fbdd 	bl	8007908 <HAL_GPIO_Init>
}
 800314e:	e023      	b.n	8003198 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_TIM_MspPostInit+0x180>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d11e      	bne.n	8003198 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 800315c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003160:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <HAL_TIM_MspPostInit+0x16c>)
 800316c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003178:	2308      	movs	r3, #8
 800317a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003180:	2302      	movs	r3, #2
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003188:	2302      	movs	r3, #2
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318c:	f107 031c 	add.w	r3, r7, #28
 8003190:	4619      	mov	r1, r3
 8003192:	4809      	ldr	r0, [pc, #36]	; (80031b8 <HAL_TIM_MspPostInit+0x184>)
 8003194:	f004 fbb8 	bl	8007908 <HAL_GPIO_Init>
}
 8003198:	bf00      	nop
 800319a:	3730      	adds	r7, #48	; 0x30
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	58024400 	.word	0x58024400
 80031a4:	58020400 	.word	0x58020400
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	58020c00 	.word	0x58020c00
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	58020000 	.word	0x58020000

080031bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b0ba      	sub	sp, #232	; 0xe8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d4:	f107 0318 	add.w	r3, r7, #24
 80031d8:	22b8      	movs	r2, #184	; 0xb8
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f013 fce5 	bl	8016bac <memset>
  if(huart->Instance==UART4)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a4d      	ldr	r2, [pc, #308]	; (800331c <HAL_UART_MspInit+0x160>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d147      	bne.n	800327c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031ec:	f04f 0202 	mov.w	r2, #2
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031fe:	f107 0318 	add.w	r3, r7, #24
 8003202:	4618      	mov	r0, r3
 8003204:	f007 f954 	bl	800a4b0 <HAL_RCCEx_PeriphCLKConfig>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800320e:	f7ff fa1d 	bl	800264c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_UART_MspInit+0x164>)
 8003214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003218:	4a41      	ldr	r2, [pc, #260]	; (8003320 <HAL_UART_MspInit+0x164>)
 800321a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800321e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_UART_MspInit+0x164>)
 8003224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_UART_MspInit+0x164>)
 8003232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003236:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <HAL_UART_MspInit+0x164>)
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003240:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_UART_MspInit+0x164>)
 8003242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800324e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003268:	2308      	movs	r3, #8
 800326a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003272:	4619      	mov	r1, r3
 8003274:	482b      	ldr	r0, [pc, #172]	; (8003324 <HAL_UART_MspInit+0x168>)
 8003276:	f004 fb47 	bl	8007908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800327a:	e04a      	b.n	8003312 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_UART_MspInit+0x16c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d145      	bne.n	8003312 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003286:	f04f 0201 	mov.w	r2, #1
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003292:	2300      	movs	r3, #0
 8003294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003298:	f107 0318 	add.w	r3, r7, #24
 800329c:	4618      	mov	r0, r3
 800329e:	f007 f907 	bl	800a4b0 <HAL_RCCEx_PeriphCLKConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80032a8:	f7ff f9d0 	bl	800264c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_UART_MspInit+0x164>)
 80032ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032b2:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_UART_MspInit+0x164>)
 80032b4:	f043 0320 	orr.w	r3, r3, #32
 80032b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_UART_MspInit+0x164>)
 80032be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_UART_MspInit+0x164>)
 80032cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d0:	4a13      	ldr	r2, [pc, #76]	; (8003320 <HAL_UART_MspInit+0x164>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_UART_MspInit+0x164>)
 80032dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032e8:	23c0      	movs	r3, #192	; 0xc0
 80032ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003300:	2307      	movs	r3, #7
 8003302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003306:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800330a:	4619      	mov	r1, r3
 800330c:	4807      	ldr	r0, [pc, #28]	; (800332c <HAL_UART_MspInit+0x170>)
 800330e:	f004 fafb 	bl	8007908 <HAL_GPIO_Init>
}
 8003312:	bf00      	nop
 8003314:	37e8      	adds	r7, #232	; 0xe8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40004c00 	.word	0x40004c00
 8003320:	58024400 	.word	0x58024400
 8003324:	58020400 	.word	0x58020400
 8003328:	40011400 	.word	0x40011400
 800332c:	58020800 	.word	0x58020800

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003334:	e7fe      	b.n	8003334 <NMI_Handler+0x4>

08003336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333a:	e7fe      	b.n	800333a <HardFault_Handler+0x4>

0800333c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <MemManage_Handler+0x4>

08003342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <BusFault_Handler+0x4>

08003348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <UsageFault_Handler+0x4>

0800334e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800337c:	f000 f9b0 	bl	80036e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <DMA1_Stream0_IRQHandler+0x10>)
 800338a:	f002 fc47 	bl	8005c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	24001278 	.word	0x24001278

08003398 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <DMA1_Stream1_IRQHandler+0x10>)
 800339e:	f002 fc3d 	bl	8005c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	24001110 	.word	0x24001110

080033ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <DMA1_Stream2_IRQHandler+0x10>)
 80033b2:	f002 fc33 	bl	8005c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	240012f0 	.word	0x240012f0

080033c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <DMA1_Stream3_IRQHandler+0x10>)
 80033c6:	f002 fc29 	bl	8005c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	24001188 	.word	0x24001188

080033d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <DMA1_Stream4_IRQHandler+0x10>)
 80033da:	f002 fc1f 	bl	8005c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	24001200 	.word	0x24001200

080033e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <DMA1_Stream5_IRQHandler+0x10>)
 80033ee:	f002 fc15 	bl	8005c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	24000be8 	.word	0x24000be8

080033fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <TIM4_IRQHandler+0x10>)
 8003402:	f00c f9df 	bl	800f7c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	24001078 	.word	0x24001078

08003410 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA2_Stream7_IRQHandler+0x10>)
 8003416:	f002 fc01 	bl	8005c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	24000c60 	.word	0x24000c60

08003424 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <OTG_HS_IRQHandler+0x10>)
 800342a:	f004 fec7 	bl	80081bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	24002994 	.word	0x24002994

08003438 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <SDMMC2_IRQHandler+0x10>)
 800343e:	f009 fe8d 	bl	800d15c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	24000dcc 	.word	0x24000dcc

0800344c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <_sbrk+0x5c>)
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <_sbrk+0x60>)
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003460:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <_sbrk+0x64>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <_sbrk+0x64>)
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <_sbrk+0x68>)
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <_sbrk+0x64>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	429a      	cmp	r2, r3
 800347a:	d207      	bcs.n	800348c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800347c:	f013 fb5e 	bl	8016b3c <__errno>
 8003480:	4603      	mov	r3, r0
 8003482:	220c      	movs	r2, #12
 8003484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	e009      	b.n	80034a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <_sbrk+0x64>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <_sbrk+0x64>)
 800349c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	24050000 	.word	0x24050000
 80034ac:	00000800 	.word	0x00000800
 80034b0:	24001490 	.word	0x24001490
 80034b4:	240030d0 	.word	0x240030d0

080034b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <SystemInit+0xd0>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <SystemInit+0xd0>)
 80034c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034cc:	4b2f      	ldr	r3, [pc, #188]	; (800358c <SystemInit+0xd4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d807      	bhi.n	80034e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <SystemInit+0xd4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 030f 	bic.w	r3, r3, #15
 80034e0:	4a2a      	ldr	r2, [pc, #168]	; (800358c <SystemInit+0xd4>)
 80034e2:	f043 0307 	orr.w	r3, r3, #7
 80034e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <SystemInit+0xd8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <SystemInit+0xd8>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034f4:	4b26      	ldr	r3, [pc, #152]	; (8003590 <SystemInit+0xd8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034fa:	4b25      	ldr	r3, [pc, #148]	; (8003590 <SystemInit+0xd8>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4924      	ldr	r1, [pc, #144]	; (8003590 <SystemInit+0xd8>)
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <SystemInit+0xdc>)
 8003502:	4013      	ands	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <SystemInit+0xd4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <SystemInit+0xd4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 030f 	bic.w	r3, r3, #15
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <SystemInit+0xd4>)
 800351c:	f043 0307 	orr.w	r3, r3, #7
 8003520:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <SystemInit+0xd8>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <SystemInit+0xd8>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800352e:	4b18      	ldr	r3, [pc, #96]	; (8003590 <SystemInit+0xd8>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003534:	4b16      	ldr	r3, [pc, #88]	; (8003590 <SystemInit+0xd8>)
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <SystemInit+0xe0>)
 8003538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800353a:	4b15      	ldr	r3, [pc, #84]	; (8003590 <SystemInit+0xd8>)
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <SystemInit+0xe4>)
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <SystemInit+0xd8>)
 8003542:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <SystemInit+0xe8>)
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <SystemInit+0xd8>)
 8003548:	2200      	movs	r2, #0
 800354a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <SystemInit+0xd8>)
 800354e:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <SystemInit+0xe8>)
 8003550:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <SystemInit+0xd8>)
 8003554:	2200      	movs	r2, #0
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <SystemInit+0xd8>)
 800355a:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <SystemInit+0xe8>)
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <SystemInit+0xd8>)
 8003560:	2200      	movs	r2, #0
 8003562:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <SystemInit+0xd8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a09      	ldr	r2, [pc, #36]	; (8003590 <SystemInit+0xd8>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <SystemInit+0xd8>)
 8003572:	2200      	movs	r2, #0
 8003574:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <SystemInit+0xec>)
 8003578:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800357c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00
 800358c:	52002000 	.word	0x52002000
 8003590:	58024400 	.word	0x58024400
 8003594:	eaf6ed7f 	.word	0xeaf6ed7f
 8003598:	02020200 	.word	0x02020200
 800359c:	01ff0000 	.word	0x01ff0000
 80035a0:	01010280 	.word	0x01010280
 80035a4:	52004000 	.word	0x52004000

080035a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80035a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035ac:	f7ff ff84 	bl	80034b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035b0:	480c      	ldr	r0, [pc, #48]	; (80035e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035b2:	490d      	ldr	r1, [pc, #52]	; (80035e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035b8:	e002      	b.n	80035c0 <LoopCopyDataInit>

080035ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035be:	3304      	adds	r3, #4

080035c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c4:	d3f9      	bcc.n	80035ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035c8:	4c0a      	ldr	r4, [pc, #40]	; (80035f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035cc:	e001      	b.n	80035d2 <LoopFillZerobss>

080035ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035d0:	3204      	adds	r2, #4

080035d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d4:	d3fb      	bcc.n	80035ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035d6:	f013 fab7 	bl	8016b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035da:	f7fd fd79 	bl	80010d0 <main>
  bx  lr
 80035de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80035e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80035e8:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 80035ec:	080181ec 	.word	0x080181ec
  ldr r2, =_sbss
 80035f0:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 80035f4:	240030d0 	.word	0x240030d0

080035f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f8:	e7fe      	b.n	80035f8 <ADC3_IRQHandler>
	...

080035fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003602:	2003      	movs	r0, #3
 8003604:	f001 fd06 	bl	8005014 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003608:	f006 fd7c 	bl	800a104 <HAL_RCC_GetSysClockFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_Init+0x68>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	4913      	ldr	r1, [pc, #76]	; (8003668 <HAL_Init+0x6c>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_Init+0x68>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <HAL_Init+0x6c>)
 8003630:	5cd3      	ldrb	r3, [r2, r3]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <HAL_Init+0x70>)
 800363e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_Init+0x74>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003646:	200f      	movs	r0, #15
 8003648:	f000 f814 	bl	8003674 <HAL_InitTick>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e002      	b.n	800365c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003656:	f7fe ffff 	bl	8002658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400
 8003668:	08017fd8 	.word	0x08017fd8
 800366c:	24000004 	.word	0x24000004
 8003670:	24000000 	.word	0x24000000

08003674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800367c:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_InitTick+0x60>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e021      	b.n	80036cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_InitTick+0x64>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_InitTick+0x60>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003696:	fbb3 f3f1 	udiv	r3, r3, r1
 800369a:	fbb2 f3f3 	udiv	r3, r2, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fceb 	bl	800507a <HAL_SYSTICK_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00e      	b.n	80036cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d80a      	bhi.n	80036ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b4:	2200      	movs	r2, #0
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	f001 fcb5 	bl	800502a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c0:	4a06      	ldr	r2, [pc, #24]	; (80036dc <HAL_InitTick+0x68>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2400000c 	.word	0x2400000c
 80036d8:	24000000 	.word	0x24000000
 80036dc:	24000008 	.word	0x24000008

080036e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_IncTick+0x20>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_IncTick+0x24>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_IncTick+0x24>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2400000c 	.word	0x2400000c
 8003704:	24001494 	.word	0x24001494

08003708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return uwTick;
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_GetTick+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	24001494 	.word	0x24001494

08003720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff ffee 	bl	8003708 <HAL_GetTick>
 800372c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d005      	beq.n	8003746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_Delay+0x44>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003746:	bf00      	nop
 8003748:	f7ff ffde 	bl	8003708 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d8f7      	bhi.n	8003748 <HAL_Delay+0x28>
  {
  }
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2400000c 	.word	0x2400000c

08003768 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	43db      	mvns	r3, r3
 800377a:	401a      	ands	r2, r3
 800377c:	4904      	ldr	r1, [pc, #16]	; (8003790 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	58000400 	.word	0x58000400

08003794 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3360      	adds	r3, #96	; 0x60
 800380e:	461a      	mov	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <LL_ADC_SetOffset+0x60>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10b      	bne.n	8003838 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003836:	e00b      	b.n	8003850 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	431a      	orrs	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	58026000 	.word	0x58026000

08003860 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3360      	adds	r3, #96	; 0x60
 800386e:	461a      	mov	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	611a      	str	r2, [r3, #16]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3360      	adds	r3, #96	; 0x60
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	601a      	str	r2, [r3, #0]
  }
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	58026000 	.word	0x58026000

08003904 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <LL_ADC_SetOffsetSaturation+0x40>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10e      	bne.n	8003936 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3360      	adds	r3, #96	; 0x60
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	431a      	orrs	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	58026000 	.word	0x58026000

08003948 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <LL_ADC_SetOffsetSign+0x40>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d10e      	bne.n	800397a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3360      	adds	r3, #96	; 0x60
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	431a      	orrs	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	58026000 	.word	0x58026000

0800398c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3360      	adds	r3, #96	; 0x60
 800399c:	461a      	mov	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <LL_ADC_SetOffsetState+0x50>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80039be:	e007      	b.n	80039d0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	58026000 	.word	0x58026000

080039e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3330      	adds	r3, #48	; 0x30
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	211f      	movs	r1, #31
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0e9b      	lsrs	r3, r3, #26
 8003a18:	f003 011f 	and.w	r1, r3, #31
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	431a      	orrs	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3314      	adds	r3, #20
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	0e5b      	lsrs	r3, r3, #25
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	4413      	add	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	0d1b      	lsrs	r3, r3, #20
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2107      	movs	r1, #7
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	0d1b      	lsrs	r3, r3, #20
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d115      	bne.n	8003ad0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f003 0318 	and.w	r3, r3, #24
 8003aba:	4914      	ldr	r1, [pc, #80]	; (8003b0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003abc:	40d9      	lsrs	r1, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003ace:	e014      	b.n	8003afa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0318 	and.w	r3, r3, #24
 8003ae6:	4909      	ldr	r1, [pc, #36]	; (8003b0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ae8:	40d9      	lsrs	r1, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	400b      	ands	r3, r1
 8003aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	58026000 	.word	0x58026000
 8003b0c:	000fffff 	.word	0x000fffff

08003b10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6093      	str	r3, [r2, #8]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	5fffffc0 	.word	0x5fffffc0

08003b34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d101      	bne.n	8003b4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <LL_ADC_EnableInternalRegulator+0x24>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	6fffffc0 	.word	0x6fffffc0

08003b84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b98:	d101      	bne.n	8003b9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <LL_ADC_IsEnabled+0x18>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <LL_ADC_IsEnabled+0x1a>
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d101      	bne.n	8003bea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d101      	bne.n	8003c10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1ee      	b.n	8004018 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fe fd1f 	bl	800268c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff67 	bl	8003b34 <LL_ADC_IsDeepPowerDownEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff4d 	bl	8003b10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff ff82 	bl	8003b84 <LL_ADC_IsInternalRegulatorEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d114      	bne.n	8003cb0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff66 	bl	8003b5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c90:	4b8e      	ldr	r3, [pc, #568]	; (8003ecc <HAL_ADC_Init+0x2ac>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	4a8e      	ldr	r2, [pc, #568]	; (8003ed0 <HAL_ADC_Init+0x2b0>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ca2:	e002      	b.n	8003caa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f9      	bne.n	8003ca4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff65 	bl	8003b84 <LL_ADC_IsInternalRegulatorEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff76 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003ce6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 8188 	bne.w	8004006 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 8184 	bne.w	8004006 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d06:	f043 0202 	orr.w	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff4a 	bl	8003bac <LL_ADC_IsEnabled>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d136      	bne.n	8003d8c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6c      	ldr	r2, [pc, #432]	; (8003ed4 <HAL_ADC_Init+0x2b4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_ADC_Init+0x112>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a6a      	ldr	r2, [pc, #424]	; (8003ed8 <HAL_ADC_Init+0x2b8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10e      	bne.n	8003d50 <HAL_ADC_Init+0x130>
 8003d32:	4868      	ldr	r0, [pc, #416]	; (8003ed4 <HAL_ADC_Init+0x2b4>)
 8003d34:	f7ff ff3a 	bl	8003bac <LL_ADC_IsEnabled>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	4867      	ldr	r0, [pc, #412]	; (8003ed8 <HAL_ADC_Init+0x2b8>)
 8003d3c:	f7ff ff36 	bl	8003bac <LL_ADC_IsEnabled>
 8003d40:	4603      	mov	r3, r0
 8003d42:	4323      	orrs	r3, r4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e008      	b.n	8003d62 <HAL_ADC_Init+0x142>
 8003d50:	4862      	ldr	r0, [pc, #392]	; (8003edc <HAL_ADC_Init+0x2bc>)
 8003d52:	f7ff ff2b 	bl	8003bac <LL_ADC_IsEnabled>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d012      	beq.n	8003d8c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5a      	ldr	r2, [pc, #360]	; (8003ed4 <HAL_ADC_Init+0x2b4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_ADC_Init+0x15a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a58      	ldr	r2, [pc, #352]	; (8003ed8 <HAL_ADC_Init+0x2b8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Init+0x15e>
 8003d7a:	4a59      	ldr	r2, [pc, #356]	; (8003ee0 <HAL_ADC_Init+0x2c0>)
 8003d7c:	e000      	b.n	8003d80 <HAL_ADC_Init+0x160>
 8003d7e:	4a59      	ldr	r2, [pc, #356]	; (8003ee4 <HAL_ADC_Init+0x2c4>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f7ff fd04 	bl	8003794 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a52      	ldr	r2, [pc, #328]	; (8003edc <HAL_ADC_Init+0x2bc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d129      	bne.n	8003dea <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7e5b      	ldrb	r3, [r3, #25]
 8003d9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003da0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003da6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d013      	beq.n	8003dd8 <HAL_ADC_Init+0x1b8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d00d      	beq.n	8003dd4 <HAL_ADC_Init+0x1b4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b1c      	cmp	r3, #28
 8003dbe:	d007      	beq.n	8003dd0 <HAL_ADC_Init+0x1b0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b18      	cmp	r3, #24
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_Init+0x1ac>
 8003dc8:	2318      	movs	r3, #24
 8003dca:	e006      	b.n	8003dda <HAL_ADC_Init+0x1ba>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e004      	b.n	8003dda <HAL_ADC_Init+0x1ba>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	e002      	b.n	8003dda <HAL_ADC_Init+0x1ba>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	e000      	b.n	8003dda <HAL_ADC_Init+0x1ba>
 8003dd8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003dda:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e00e      	b.n	8003e08 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7e5b      	ldrb	r3, [r3, #25]
 8003dee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003df4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003dfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d106      	bne.n	8003e20 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	3b01      	subs	r3, #1
 8003e18:	045b      	lsls	r3, r3, #17
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <HAL_ADC_Init+0x2bc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d115      	bne.n	8003e72 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <HAL_ADC_Init+0x2c8>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	430b      	orrs	r3, r1
 8003e58:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	611a      	str	r2, [r3, #16]
 8003e70:	e009      	b.n	8003e86 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <HAL_ADC_Init+0x2cc>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	69b9      	ldr	r1, [r7, #24]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fea1 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003e90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff feae 	bl	8003bf8 <LL_ADC_INJ_IsConversionOngoing>
 8003e9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 808e 	bne.w	8003fc2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 808a 	bne.w	8003fc2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <HAL_ADC_Init+0x2bc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7e1b      	ldrb	r3, [r3, #24]
 8003ebc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ec4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e018      	b.n	8003efe <HAL_ADC_Init+0x2de>
 8003ecc:	24000000 	.word	0x24000000
 8003ed0:	053e2d63 	.word	0x053e2d63
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	40022100 	.word	0x40022100
 8003edc:	58026000 	.word	0x58026000
 8003ee0:	40022300 	.word	0x40022300
 8003ee4:	58026300 	.word	0x58026300
 8003ee8:	fff04007 	.word	0xfff04007
 8003eec:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7e1b      	ldrb	r3, [r3, #24]
 8003ef4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	4b46      	ldr	r3, [pc, #280]	; (8004020 <HAL_ADC_Init+0x400>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d137      	bne.n	8003f8c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a3f      	ldr	r2, [pc, #252]	; (8004024 <HAL_ADC_Init+0x404>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d116      	bne.n	8003f5a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_ADC_Init+0x408>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f44:	4311      	orrs	r1, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	611a      	str	r2, [r3, #16]
 8003f58:	e020      	b.n	8003f9c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_ADC_Init+0x40c>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0411      	lsls	r1, r2, #16
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f70:	4311      	orrs	r1, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f76:	4311      	orrs	r1, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	611a      	str	r2, [r3, #16]
 8003f8a:	e007      	b.n	8003f9c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <HAL_ADC_Init+0x404>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d002      	beq.n	8003fc2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fd63 	bl	8004a88 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f023 010f 	bic.w	r1, r3, #15
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	1e5a      	subs	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fe2:	e007      	b.n	8003ff4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 020f 	bic.w	r2, r2, #15
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff8:	f023 0303 	bic.w	r3, r3, #3
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	661a      	str	r2, [r3, #96]	; 0x60
 8004004:	e007      	b.n	8004016 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400a:	f043 0210 	orr.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004016:	7ffb      	ldrb	r3, [r7, #31]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3724      	adds	r7, #36	; 0x24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	ffffbffc 	.word	0xffffbffc
 8004024:	58026000 	.word	0x58026000
 8004028:	fc00f81f 	.word	0xfc00f81f
 800402c:	fc00f81e 	.word	0xfc00f81e

08004030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b0b9      	sub	sp, #228	; 0xe4
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800404a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4aa9      	ldr	r2, [pc, #676]	; (80042f8 <HAL_ADC_ConfigChannel+0x2c8>)
 8004052:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d102      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x34>
 800405e:	2302      	movs	r3, #2
 8004060:	f000 bcfa 	b.w	8004a58 <HAL_ADC_ConfigChannel+0xa28>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fdae 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	f040 84de 	bne.w	8004a3a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a9e      	ldr	r2, [pc, #632]	; (80042fc <HAL_ADC_ConfigChannel+0x2cc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d033      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x76>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	0e9b      	lsrs	r3, r3, #26
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2201      	movs	r2, #1
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	e01d      	b.n	80040e2 <HAL_ADC_ConfigChannel+0xb2>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80040ca:	2320      	movs	r3, #32
 80040cc:	e004      	b.n	80040d8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80040ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2201      	movs	r2, #1
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	69d1      	ldr	r1, [r2, #28]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	f7ff fc6f 	bl	80039e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fd63 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 800410c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fd6f 	bl	8003bf8 <LL_ADC_INJ_IsConversionOngoing>
 800411a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800411e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 8270 	bne.w	8004608 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004128:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 826b 	bne.w	8004608 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6819      	ldr	r1, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	461a      	mov	r2, r3
 8004140:	f7ff fc7a 	bl	8003a38 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6c      	ldr	r2, [pc, #432]	; (80042fc <HAL_ADC_ConfigChannel+0x2cc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10d      	bne.n	800416a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	08db      	lsrs	r3, r3, #3
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004168:	e032      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800416a:	4b65      	ldr	r3, [pc, #404]	; (8004300 <HAL_ADC_ConfigChannel+0x2d0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004176:	d10b      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x160>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	e01d      	b.n	80041cc <HAL_ADC_ConfigChannel+0x19c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x186>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	e00a      	b.n	80041cc <HAL_ADC_ConfigChannel+0x19c>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	089b      	lsrs	r3, r3, #2
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d048      	beq.n	800426a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6919      	ldr	r1, [r3, #16]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e8:	f7ff fb08 	bl	80037fc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a42      	ldr	r2, [pc, #264]	; (80042fc <HAL_ADC_ConfigChannel+0x2cc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d119      	bne.n	800422a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6919      	ldr	r1, [r3, #16]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	461a      	mov	r2, r3
 8004204:	f7ff fba0 	bl	8003948 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6919      	ldr	r1, [r3, #16]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d102      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x1f0>
 800421a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800421e:	e000      	b.n	8004222 <HAL_ADC_ConfigChannel+0x1f2>
 8004220:	2300      	movs	r3, #0
 8004222:	461a      	mov	r2, r3
 8004224:	f7ff fb6e 	bl	8003904 <LL_ADC_SetOffsetSaturation>
 8004228:	e1ee      	b.n	8004608 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6919      	ldr	r1, [r3, #16]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004238:	2b01      	cmp	r3, #1
 800423a:	d102      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x212>
 800423c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004240:	e000      	b.n	8004244 <HAL_ADC_ConfigChannel+0x214>
 8004242:	2300      	movs	r3, #0
 8004244:	461a      	mov	r2, r3
 8004246:	f7ff fb3b 	bl	80038c0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6919      	ldr	r1, [r3, #16]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	7e1b      	ldrb	r3, [r3, #24]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d102      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x230>
 800425a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800425e:	e000      	b.n	8004262 <HAL_ADC_ConfigChannel+0x232>
 8004260:	2300      	movs	r3, #0
 8004262:	461a      	mov	r2, r3
 8004264:	f7ff fb12 	bl	800388c <LL_ADC_SetDataRightShift>
 8004268:	e1ce      	b.n	8004608 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a23      	ldr	r2, [pc, #140]	; (80042fc <HAL_ADC_ConfigChannel+0x2cc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	f040 8181 	bne.w	8004578 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff faef 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004282:	4603      	mov	r3, r0
 8004284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x272>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fae4 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	0e9b      	lsrs	r3, r3, #26
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	e01e      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x2b0>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fad9 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80042c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80042c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80042d0:	2320      	movs	r3, #32
 80042d2:	e004      	b.n	80042de <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80042d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x2d4>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0e9b      	lsrs	r3, r3, #26
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	e01e      	b.n	8004336 <HAL_ADC_ConfigChannel+0x306>
 80042f8:	47ff0000 	.word	0x47ff0000
 80042fc:	58026000 	.word	0x58026000
 8004300:	5c001000 	.word	0x5c001000
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800431c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004320:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e004      	b.n	8004336 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800432c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004330:	fab3 f383 	clz	r3, r3
 8004334:	b2db      	uxtb	r3, r3
 8004336:	429a      	cmp	r2, r3
 8004338:	d106      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fb22 	bl	800398c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fa86 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004354:	4603      	mov	r3, r0
 8004356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x344>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fa7b 	bl	8003860 <LL_ADC_GetOffsetChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	f003 021f 	and.w	r2, r3, #31
 8004372:	e01e      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x382>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fa70 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004380:	4603      	mov	r3, r0
 8004382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800439a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80043a2:	2320      	movs	r3, #32
 80043a4:	e004      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80043a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x39a>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	0e9b      	lsrs	r3, r3, #26
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	e018      	b.n	80043fc <HAL_ADC_ConfigChannel+0x3cc>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80043de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80043e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80043ee:	2320      	movs	r3, #32
 80043f0:	e004      	b.n	80043fc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80043f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d106      	bne.n	800440e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2200      	movs	r2, #0
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fabf 	bl	800398c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2102      	movs	r1, #2
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fa23 	bl	8003860 <LL_ADC_GetOffsetChannel>
 800441a:	4603      	mov	r3, r0
 800441c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <HAL_ADC_ConfigChannel+0x40a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fa18 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	0e9b      	lsrs	r3, r3, #26
 8004434:	f003 021f 	and.w	r2, r3, #31
 8004438:	e01e      	b.n	8004478 <HAL_ADC_ConfigChannel+0x448>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fa0d 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004446:	4603      	mov	r3, r0
 8004448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004450:	fa93 f3a3 	rbit	r3, r3
 8004454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800445c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004468:	2320      	movs	r3, #32
 800446a:	e004      	b.n	8004476 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800446c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x460>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	0e9b      	lsrs	r3, r3, #26
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	e014      	b.n	80044ba <HAL_ADC_ConfigChannel+0x48a>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800449e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80044a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80044ac:	2320      	movs	r3, #32
 80044ae:	e004      	b.n	80044ba <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80044b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d106      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	2102      	movs	r1, #2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fa60 	bl	800398c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2103      	movs	r1, #3
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff f9c4 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80044d8:	4603      	mov	r3, r0
 80044da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x4c8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2103      	movs	r1, #3
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff f9b9 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80044ee:	4603      	mov	r3, r0
 80044f0:	0e9b      	lsrs	r3, r3, #26
 80044f2:	f003 021f 	and.w	r2, r3, #31
 80044f6:	e017      	b.n	8004528 <HAL_ADC_ConfigChannel+0x4f8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2103      	movs	r1, #3
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff f9ae 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004504:	4603      	mov	r3, r0
 8004506:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800451a:	2320      	movs	r3, #32
 800451c:	e003      	b.n	8004526 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x510>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	e011      	b.n	8004564 <HAL_ADC_ConfigChannel+0x534>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800454e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004550:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004558:	2320      	movs	r3, #32
 800455a:	e003      	b.n	8004564 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800455c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	429a      	cmp	r2, r3
 8004566:	d14f      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2200      	movs	r2, #0
 800456e:	2103      	movs	r1, #3
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fa0b 	bl	800398c <LL_ADC_SetOffsetState>
 8004576:	e047      	b.n	8004608 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	069b      	lsls	r3, r3, #26
 8004588:	429a      	cmp	r2, r3
 800458a:	d107      	bne.n	800459c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800459a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	069b      	lsls	r3, r3, #26
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d107      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045be:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	069b      	lsls	r3, r3, #26
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d107      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045e2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	069b      	lsls	r3, r3, #26
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d107      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004606:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff facd 	bl	8003bac <LL_ADC_IsEnabled>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 8219 	bne.w	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6819      	ldr	r1, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f7ff fa32 	bl	8003a90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4aa1      	ldr	r2, [pc, #644]	; (80048b8 <HAL_ADC_ConfigChannel+0x888>)
 8004632:	4293      	cmp	r3, r2
 8004634:	f040 812e 	bne.w	8004894 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x630>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	0e9b      	lsrs	r3, r3, #26
 800464e:	3301      	adds	r3, #1
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2b09      	cmp	r3, #9
 8004656:	bf94      	ite	ls
 8004658:	2301      	movls	r3, #1
 800465a:	2300      	movhi	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e019      	b.n	8004694 <HAL_ADC_ConfigChannel+0x664>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800466e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004670:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004678:	2320      	movs	r3, #32
 800467a:	e003      	b.n	8004684 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800467c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3301      	adds	r3, #1
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2b09      	cmp	r3, #9
 800468c:	bf94      	ite	ls
 800468e:	2301      	movls	r3, #1
 8004690:	2300      	movhi	r3, #0
 8004692:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004694:	2b00      	cmp	r3, #0
 8004696:	d079      	beq.n	800478c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d107      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x684>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	0e9b      	lsrs	r3, r3, #26
 80046aa:	3301      	adds	r3, #1
 80046ac:	069b      	lsls	r3, r3, #26
 80046ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046b2:	e015      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x6b0>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80046c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80046c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e003      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80046d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	069b      	lsls	r3, r3, #26
 80046dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x6d0>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0e9b      	lsrs	r3, r3, #26
 80046f2:	3301      	adds	r3, #1
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	e017      	b.n	8004730 <HAL_ADC_ConfigChannel+0x700>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800470e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004718:	2320      	movs	r3, #32
 800471a:	e003      	b.n	8004724 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3301      	adds	r3, #1
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2101      	movs	r1, #1
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	ea42 0103 	orr.w	r1, r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x726>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0e9b      	lsrs	r3, r3, #26
 8004746:	3301      	adds	r3, #1
 8004748:	f003 021f 	and.w	r2, r3, #31
 800474c:	4613      	mov	r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4413      	add	r3, r2
 8004752:	051b      	lsls	r3, r3, #20
 8004754:	e018      	b.n	8004788 <HAL_ADC_ConfigChannel+0x758>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800476e:	2320      	movs	r3, #32
 8004770:	e003      	b.n	800477a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	3301      	adds	r3, #1
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004788:	430b      	orrs	r3, r1
 800478a:	e07e      	b.n	800488a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004794:	2b00      	cmp	r3, #0
 8004796:	d107      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x778>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0e9b      	lsrs	r3, r3, #26
 800479e:	3301      	adds	r3, #1
 80047a0:	069b      	lsls	r3, r3, #26
 80047a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047a6:	e015      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x7a4>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e003      	b.n	80047cc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	069b      	lsls	r3, r3, #26
 80047d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x7c4>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0e9b      	lsrs	r3, r3, #26
 80047e6:	3301      	adds	r3, #1
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	e017      	b.n	8004824 <HAL_ADC_ConfigChannel+0x7f4>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	61bb      	str	r3, [r7, #24]
  return result;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e003      	b.n	8004818 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	ea42 0103 	orr.w	r1, r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10d      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x820>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	0e9b      	lsrs	r3, r3, #26
 800483a:	3301      	adds	r3, #1
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	3b1e      	subs	r3, #30
 8004848:	051b      	lsls	r3, r3, #20
 800484a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800484e:	e01b      	b.n	8004888 <HAL_ADC_ConfigChannel+0x858>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	60fb      	str	r3, [r7, #12]
  return result;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004868:	2320      	movs	r3, #32
 800486a:	e003      	b.n	8004874 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	3301      	adds	r3, #1
 8004876:	f003 021f 	and.w	r2, r3, #31
 800487a:	4613      	mov	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4413      	add	r3, r2
 8004880:	3b1e      	subs	r3, #30
 8004882:	051b      	lsls	r3, r3, #20
 8004884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004888:	430b      	orrs	r3, r1
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	4619      	mov	r1, r3
 8004890:	f7ff f8d2 	bl	8003a38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f280 80d7 	bge.w	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a06      	ldr	r2, [pc, #24]	; (80048bc <HAL_ADC_ConfigChannel+0x88c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_ADC_ConfigChannel+0x882>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <HAL_ADC_ConfigChannel+0x890>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10a      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x898>
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <HAL_ADC_ConfigChannel+0x894>)
 80048b4:	e009      	b.n	80048ca <HAL_ADC_ConfigChannel+0x89a>
 80048b6:	bf00      	nop
 80048b8:	47ff0000 	.word	0x47ff0000
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40022100 	.word	0x40022100
 80048c4:	40022300 	.word	0x40022300
 80048c8:	4b65      	ldr	r3, [pc, #404]	; (8004a60 <HAL_ADC_ConfigChannel+0xa30>)
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe ff88 	bl	80037e0 <LL_ADC_GetCommonPathInternalCh>
 80048d0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a62      	ldr	r2, [pc, #392]	; (8004a64 <HAL_ADC_ConfigChannel+0xa34>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_ADC_ConfigChannel+0x8b8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a61      	ldr	r2, [pc, #388]	; (8004a68 <HAL_ADC_ConfigChannel+0xa38>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d10e      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x8d6>
 80048e8:	485e      	ldr	r0, [pc, #376]	; (8004a64 <HAL_ADC_ConfigChannel+0xa34>)
 80048ea:	f7ff f95f 	bl	8003bac <LL_ADC_IsEnabled>
 80048ee:	4604      	mov	r4, r0
 80048f0:	485d      	ldr	r0, [pc, #372]	; (8004a68 <HAL_ADC_ConfigChannel+0xa38>)
 80048f2:	f7ff f95b 	bl	8003bac <LL_ADC_IsEnabled>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4323      	orrs	r3, r4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e008      	b.n	8004918 <HAL_ADC_ConfigChannel+0x8e8>
 8004906:	4859      	ldr	r0, [pc, #356]	; (8004a6c <HAL_ADC_ConfigChannel+0xa3c>)
 8004908:	f7ff f950 	bl	8003bac <LL_ADC_IsEnabled>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8084 	beq.w	8004a26 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a53      	ldr	r2, [pc, #332]	; (8004a70 <HAL_ADC_ConfigChannel+0xa40>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d132      	bne.n	800498e <HAL_ADC_ConfigChannel+0x95e>
 8004928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800492c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d12c      	bne.n	800498e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a4c      	ldr	r2, [pc, #304]	; (8004a6c <HAL_ADC_ConfigChannel+0xa3c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	f040 8086 	bne.w	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a47      	ldr	r2, [pc, #284]	; (8004a64 <HAL_ADC_ConfigChannel+0xa34>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <HAL_ADC_ConfigChannel+0x924>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a46      	ldr	r2, [pc, #280]	; (8004a68 <HAL_ADC_ConfigChannel+0xa38>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x928>
 8004954:	4a47      	ldr	r2, [pc, #284]	; (8004a74 <HAL_ADC_ConfigChannel+0xa44>)
 8004956:	e000      	b.n	800495a <HAL_ADC_ConfigChannel+0x92a>
 8004958:	4a41      	ldr	r2, [pc, #260]	; (8004a60 <HAL_ADC_ConfigChannel+0xa30>)
 800495a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800495e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fe ff28 	bl	80037ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800496a:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <HAL_ADC_ConfigChannel+0xa48>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	099b      	lsrs	r3, r3, #6
 8004970:	4a42      	ldr	r2, [pc, #264]	; (8004a7c <HAL_ADC_ConfigChannel+0xa4c>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	3301      	adds	r3, #1
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800497e:	e002      	b.n	8004986 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	3b01      	subs	r3, #1
 8004984:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f9      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800498c:	e05e      	b.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <HAL_ADC_ConfigChannel+0xa50>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d120      	bne.n	80049da <HAL_ADC_ConfigChannel+0x9aa>
 8004998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800499c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d11a      	bne.n	80049da <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a30      	ldr	r2, [pc, #192]	; (8004a6c <HAL_ADC_ConfigChannel+0xa3c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d14e      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <HAL_ADC_ConfigChannel+0xa34>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_ADC_ConfigChannel+0x992>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <HAL_ADC_ConfigChannel+0xa38>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x996>
 80049c2:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <HAL_ADC_ConfigChannel+0xa44>)
 80049c4:	e000      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x998>
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <HAL_ADC_ConfigChannel+0xa30>)
 80049c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7fe fef1 	bl	80037ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049d8:	e038      	b.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <HAL_ADC_ConfigChannel+0xa54>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d133      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
 80049e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d12d      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <HAL_ADC_ConfigChannel+0xa3c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d128      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_ADC_ConfigChannel+0xa34>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_ADC_ConfigChannel+0x9de>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <HAL_ADC_ConfigChannel+0xa38>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x9e2>
 8004a0e:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_ADC_ConfigChannel+0xa44>)
 8004a10:	e000      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x9e4>
 8004a12:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <HAL_ADC_ConfigChannel+0xa30>)
 8004a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe fecb 	bl	80037ba <LL_ADC_SetCommonPathInternalCh>
 8004a24:	e012      	b.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004a38:	e008      	b.n	8004a4c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a54:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	37e4      	adds	r7, #228	; 0xe4
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd90      	pop	{r4, r7, pc}
 8004a60:	58026300 	.word	0x58026300
 8004a64:	40022000 	.word	0x40022000
 8004a68:	40022100 	.word	0x40022100
 8004a6c:	58026000 	.word	0x58026000
 8004a70:	c7520000 	.word	0xc7520000
 8004a74:	40022300 	.word	0x40022300
 8004a78:	24000000 	.word	0x24000000
 8004a7c:	053e2d63 	.word	0x053e2d63
 8004a80:	c3210000 	.word	0xc3210000
 8004a84:	cb840000 	.word	0xcb840000

08004a88 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6c      	ldr	r2, [pc, #432]	; (8004c48 <ADC_ConfigureBoostMode+0x1c0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <ADC_ConfigureBoostMode+0x1c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6b      	ldr	r2, [pc, #428]	; (8004c4c <ADC_ConfigureBoostMode+0x1c4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d109      	bne.n	8004ab8 <ADC_ConfigureBoostMode+0x30>
 8004aa4:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <ADC_ConfigureBoostMode+0x1c8>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e008      	b.n	8004aca <ADC_ConfigureBoostMode+0x42>
 8004ab8:	4b66      	ldr	r3, [pc, #408]	; (8004c54 <ADC_ConfigureBoostMode+0x1cc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01c      	beq.n	8004b08 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004ace:	f005 fc93 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 8004ad2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004adc:	d010      	beq.n	8004b00 <ADC_ConfigureBoostMode+0x78>
 8004ade:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ae2:	d873      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x144>
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d002      	beq.n	8004af0 <ADC_ConfigureBoostMode+0x68>
 8004aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aee:	d16d      	bne.n	8004bcc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	60fb      	str	r3, [r7, #12]
        break;
 8004afe:	e068      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	089b      	lsrs	r3, r3, #2
 8004b04:	60fb      	str	r3, [r7, #12]
        break;
 8004b06:	e064      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004b08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	f006 fe6e 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b14:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b1e:	d051      	beq.n	8004bc4 <ADC_ConfigureBoostMode+0x13c>
 8004b20:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b24:	d854      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b26:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b2a:	d047      	beq.n	8004bbc <ADC_ConfigureBoostMode+0x134>
 8004b2c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b30:	d84e      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b32:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b36:	d03d      	beq.n	8004bb4 <ADC_ConfigureBoostMode+0x12c>
 8004b38:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b3c:	d848      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b42:	d033      	beq.n	8004bac <ADC_ConfigureBoostMode+0x124>
 8004b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b48:	d842      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b4a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004b4e:	d029      	beq.n	8004ba4 <ADC_ConfigureBoostMode+0x11c>
 8004b50:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004b54:	d83c      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b56:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b5a:	d01a      	beq.n	8004b92 <ADC_ConfigureBoostMode+0x10a>
 8004b5c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b60:	d836      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b62:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b66:	d014      	beq.n	8004b92 <ADC_ConfigureBoostMode+0x10a>
 8004b68:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b6c:	d830      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b72:	d00e      	beq.n	8004b92 <ADC_ConfigureBoostMode+0x10a>
 8004b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b78:	d82a      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b7e:	d008      	beq.n	8004b92 <ADC_ConfigureBoostMode+0x10a>
 8004b80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b84:	d824      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
 8004b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b8a:	d002      	beq.n	8004b92 <ADC_ConfigureBoostMode+0x10a>
 8004b8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b90:	d11e      	bne.n	8004bd0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	0c9b      	lsrs	r3, r3, #18
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
        break;
 8004ba2:	e016      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	60fb      	str	r3, [r7, #12]
        break;
 8004baa:	e012      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	60fb      	str	r3, [r7, #12]
        break;
 8004bb2:	e00e      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	60fb      	str	r3, [r7, #12]
        break;
 8004bba:	e00a      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	09db      	lsrs	r3, r3, #7
 8004bc0:	60fb      	str	r3, [r7, #12]
        break;
 8004bc2:	e006      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	60fb      	str	r3, [r7, #12]
        break;
 8004bca:	e002      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004bd0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <ADC_ConfigureBoostMode+0x1d0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d808      	bhi.n	8004bf2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004bf0:	e025      	b.n	8004c3e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <ADC_ConfigureBoostMode+0x1d4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d80a      	bhi.n	8004c10 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0c:	609a      	str	r2, [r3, #8]
}
 8004c0e:	e016      	b.n	8004c3e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <ADC_ConfigureBoostMode+0x1d8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d80a      	bhi.n	8004c2e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	e007      	b.n	8004c3e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004c3c:	609a      	str	r2, [r3, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40022000 	.word	0x40022000
 8004c4c:	40022100 	.word	0x40022100
 8004c50:	40022300 	.word	0x40022300
 8004c54:	58026300 	.word	0x58026300
 8004c58:	005f5e10 	.word	0x005f5e10
 8004c5c:	00bebc20 	.word	0x00bebc20
 8004c60:	017d7840 	.word	0x017d7840

08004c64 <LL_ADC_IsEnabled>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <LL_ADC_IsEnabled+0x18>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <LL_ADC_IsEnabled+0x1a>
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_ADC_REG_IsConversionOngoing>:
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d101      	bne.n	8004ca2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b0a3      	sub	sp, #140	; 0x8c
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0c1      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5e      	ldr	r2, [pc, #376]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d102      	bne.n	8004cee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ce8:	4b5d      	ldr	r3, [pc, #372]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e001      	b.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0a0      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ffb9 	bl	8004c8a <LL_ADC_REG_IsConversionOngoing>
 8004d18:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ffb2 	bl	8004c8a <LL_ADC_REG_IsConversionOngoing>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 8081 	bne.w	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d17c      	bne.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a48      	ldr	r2, [pc, #288]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a46      	ldr	r2, [pc, #280]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004d4a:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d4c:	e000      	b.n	8004d50 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004d4e:	4b46      	ldr	r3, [pc, #280]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d50:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d039      	beq.n	8004dce <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a3a      	ldr	r2, [pc, #232]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10e      	bne.n	8004d9e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004d80:	4836      	ldr	r0, [pc, #216]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d82:	f7ff ff6f 	bl	8004c64 <LL_ADC_IsEnabled>
 8004d86:	4604      	mov	r4, r0
 8004d88:	4835      	ldr	r0, [pc, #212]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d8a:	f7ff ff6b 	bl	8004c64 <LL_ADC_IsEnabled>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4323      	orrs	r3, r4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	e008      	b.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004d9e:	4833      	ldr	r0, [pc, #204]	; (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004da0:	f7ff ff60 	bl	8004c64 <LL_ADC_IsEnabled>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d047      	beq.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004db4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	6811      	ldr	r1, [r2, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	6892      	ldr	r2, [r2, #8]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dcc:	e03a      	b.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d10e      	bne.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004dee:	481b      	ldr	r0, [pc, #108]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004df0:	f7ff ff38 	bl	8004c64 <LL_ADC_IsEnabled>
 8004df4:	4604      	mov	r4, r0
 8004df6:	481a      	ldr	r0, [pc, #104]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004df8:	f7ff ff34 	bl	8004c64 <LL_ADC_IsEnabled>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4323      	orrs	r3, r4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e008      	b.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004e0c:	4817      	ldr	r0, [pc, #92]	; (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e0e:	f7ff ff29 	bl	8004c64 <LL_ADC_IsEnabled>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf0c      	ite	eq
 8004e18:	2301      	moveq	r3, #1
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004e2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2e:	e009      	b.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004e42:	e000      	b.n	8004e46 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e4e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	378c      	adds	r7, #140	; 0x8c
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40022100 	.word	0x40022100
 8004e64:	40022300 	.word	0x40022300
 8004e68:	58026300 	.word	0x58026300
 8004e6c:	58026000 	.word	0x58026000
 8004e70:	fffff0e0 	.word	0xfffff0e0

08004e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e90:	4013      	ands	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ea2:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	60d3      	str	r3, [r2, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	e000ed00 	.word	0xe000ed00
 8004eb8:	05fa0000 	.word	0x05fa0000

08004ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	0a1b      	lsrs	r3, r3, #8
 8004ec6:	f003 0307 	and.w	r3, r3, #7
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	e000ed00 	.word	0xe000ed00

08004ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	db0b      	blt.n	8004f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	4907      	ldr	r1, [pc, #28]	; (8004f10 <__NVIC_EnableIRQ+0x38>)
 8004ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2001      	movs	r0, #1
 8004efa:	fa00 f202 	lsl.w	r2, r0, r2
 8004efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e100 	.word	0xe000e100

08004f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db0a      	blt.n	8004f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	490c      	ldr	r1, [pc, #48]	; (8004f60 <__NVIC_SetPriority+0x4c>)
 8004f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	440b      	add	r3, r1
 8004f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f3c:	e00a      	b.n	8004f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4908      	ldr	r1, [pc, #32]	; (8004f64 <__NVIC_SetPriority+0x50>)
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	0112      	lsls	r2, r2, #4
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	440b      	add	r3, r1
 8004f52:	761a      	strb	r2, [r3, #24]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	e000e100 	.word	0xe000e100
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f1c3 0307 	rsb	r3, r3, #7
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf28      	it	cs
 8004f86:	2304      	movcs	r3, #4
 8004f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d902      	bls.n	8004f98 <NVIC_EncodePriority+0x30>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3b03      	subs	r3, #3
 8004f96:	e000      	b.n	8004f9a <NVIC_EncodePriority+0x32>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	401a      	ands	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	43d9      	mvns	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc0:	4313      	orrs	r3, r2
         );
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3724      	adds	r7, #36	; 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fe0:	d301      	bcc.n	8004fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e00f      	b.n	8005006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <SysTick_Config+0x40>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fee:	210f      	movs	r1, #15
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	f7ff ff8e 	bl	8004f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <SysTick_Config+0x40>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <SysTick_Config+0x40>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010

08005014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff29 	bl	8004e74 <__NVIC_SetPriorityGrouping>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	4603      	mov	r3, r0
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005038:	f7ff ff40 	bl	8004ebc <__NVIC_GetPriorityGrouping>
 800503c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	6978      	ldr	r0, [r7, #20]
 8005044:	f7ff ff90 	bl	8004f68 <NVIC_EncodePriority>
 8005048:	4602      	mov	r2, r0
 800504a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff5f 	bl	8004f14 <__NVIC_SetPriority>
}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	4603      	mov	r3, r0
 8005066:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ff33 	bl	8004ed8 <__NVIC_EnableIRQ>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff ffa4 	bl	8004fd0 <SysTick_Config>
 8005088:	4603      	mov	r3, r0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800509c:	f7fe fb34 	bl	8003708 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e314      	b.n	80056d6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a66      	ldr	r2, [pc, #408]	; (800524c <HAL_DMA_Init+0x1b8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d04a      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a65      	ldr	r2, [pc, #404]	; (8005250 <HAL_DMA_Init+0x1bc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d045      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a63      	ldr	r2, [pc, #396]	; (8005254 <HAL_DMA_Init+0x1c0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d040      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a62      	ldr	r2, [pc, #392]	; (8005258 <HAL_DMA_Init+0x1c4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d03b      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a60      	ldr	r2, [pc, #384]	; (800525c <HAL_DMA_Init+0x1c8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d036      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a5f      	ldr	r2, [pc, #380]	; (8005260 <HAL_DMA_Init+0x1cc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d031      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a5d      	ldr	r2, [pc, #372]	; (8005264 <HAL_DMA_Init+0x1d0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02c      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a5c      	ldr	r2, [pc, #368]	; (8005268 <HAL_DMA_Init+0x1d4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d027      	beq.n	800514c <HAL_DMA_Init+0xb8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5a      	ldr	r2, [pc, #360]	; (800526c <HAL_DMA_Init+0x1d8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_DMA_Init+0xb8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a59      	ldr	r2, [pc, #356]	; (8005270 <HAL_DMA_Init+0x1dc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01d      	beq.n	800514c <HAL_DMA_Init+0xb8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a57      	ldr	r2, [pc, #348]	; (8005274 <HAL_DMA_Init+0x1e0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_DMA_Init+0xb8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a56      	ldr	r2, [pc, #344]	; (8005278 <HAL_DMA_Init+0x1e4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_DMA_Init+0xb8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a54      	ldr	r2, [pc, #336]	; (800527c <HAL_DMA_Init+0x1e8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_DMA_Init+0xb8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a53      	ldr	r2, [pc, #332]	; (8005280 <HAL_DMA_Init+0x1ec>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_DMA_Init+0xb8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a51      	ldr	r2, [pc, #324]	; (8005284 <HAL_DMA_Init+0x1f0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_DMA_Init+0xb8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a50      	ldr	r2, [pc, #320]	; (8005288 <HAL_DMA_Init+0x1f4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d101      	bne.n	8005150 <HAL_DMA_Init+0xbc>
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <HAL_DMA_Init+0xbe>
 8005150:	2300      	movs	r3, #0
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 813c 	beq.w	80053d0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a37      	ldr	r2, [pc, #220]	; (800524c <HAL_DMA_Init+0x1b8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d04a      	beq.n	8005208 <HAL_DMA_Init+0x174>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a36      	ldr	r2, [pc, #216]	; (8005250 <HAL_DMA_Init+0x1bc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d045      	beq.n	8005208 <HAL_DMA_Init+0x174>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a34      	ldr	r2, [pc, #208]	; (8005254 <HAL_DMA_Init+0x1c0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d040      	beq.n	8005208 <HAL_DMA_Init+0x174>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a33      	ldr	r2, [pc, #204]	; (8005258 <HAL_DMA_Init+0x1c4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d03b      	beq.n	8005208 <HAL_DMA_Init+0x174>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a31      	ldr	r2, [pc, #196]	; (800525c <HAL_DMA_Init+0x1c8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d036      	beq.n	8005208 <HAL_DMA_Init+0x174>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a30      	ldr	r2, [pc, #192]	; (8005260 <HAL_DMA_Init+0x1cc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d031      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2e      	ldr	r2, [pc, #184]	; (8005264 <HAL_DMA_Init+0x1d0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d02c      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2d      	ldr	r2, [pc, #180]	; (8005268 <HAL_DMA_Init+0x1d4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d027      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2b      	ldr	r2, [pc, #172]	; (800526c <HAL_DMA_Init+0x1d8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d022      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2a      	ldr	r2, [pc, #168]	; (8005270 <HAL_DMA_Init+0x1dc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d01d      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a28      	ldr	r2, [pc, #160]	; (8005274 <HAL_DMA_Init+0x1e0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a27      	ldr	r2, [pc, #156]	; (8005278 <HAL_DMA_Init+0x1e4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <HAL_DMA_Init+0x1e8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a24      	ldr	r2, [pc, #144]	; (8005280 <HAL_DMA_Init+0x1ec>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a22      	ldr	r2, [pc, #136]	; (8005284 <HAL_DMA_Init+0x1f0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_DMA_Init+0x174>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a21      	ldr	r2, [pc, #132]	; (8005288 <HAL_DMA_Init+0x1f4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <HAL_DMA_Init+0x186>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e007      	b.n	800522a <HAL_DMA_Init+0x196>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800522a:	e02f      	b.n	800528c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800522c:	f7fe fa6c 	bl	8003708 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b05      	cmp	r3, #5
 8005238:	d928      	bls.n	800528c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2203      	movs	r2, #3
 8005244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e244      	b.n	80056d6 <HAL_DMA_Init+0x642>
 800524c:	40020010 	.word	0x40020010
 8005250:	40020028 	.word	0x40020028
 8005254:	40020040 	.word	0x40020040
 8005258:	40020058 	.word	0x40020058
 800525c:	40020070 	.word	0x40020070
 8005260:	40020088 	.word	0x40020088
 8005264:	400200a0 	.word	0x400200a0
 8005268:	400200b8 	.word	0x400200b8
 800526c:	40020410 	.word	0x40020410
 8005270:	40020428 	.word	0x40020428
 8005274:	40020440 	.word	0x40020440
 8005278:	40020458 	.word	0x40020458
 800527c:	40020470 	.word	0x40020470
 8005280:	40020488 	.word	0x40020488
 8005284:	400204a0 	.word	0x400204a0
 8005288:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1c8      	bne.n	800522c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4b84      	ldr	r3, [pc, #528]	; (80054b8 <HAL_DMA_Init+0x424>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80052b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d107      	bne.n	80052f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	4313      	orrs	r3, r2
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b28      	cmp	r3, #40	; 0x28
 80052f6:	d903      	bls.n	8005300 <HAL_DMA_Init+0x26c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b2e      	cmp	r3, #46	; 0x2e
 80052fe:	d91f      	bls.n	8005340 <HAL_DMA_Init+0x2ac>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b3e      	cmp	r3, #62	; 0x3e
 8005306:	d903      	bls.n	8005310 <HAL_DMA_Init+0x27c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b42      	cmp	r3, #66	; 0x42
 800530e:	d917      	bls.n	8005340 <HAL_DMA_Init+0x2ac>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b46      	cmp	r3, #70	; 0x46
 8005316:	d903      	bls.n	8005320 <HAL_DMA_Init+0x28c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b48      	cmp	r3, #72	; 0x48
 800531e:	d90f      	bls.n	8005340 <HAL_DMA_Init+0x2ac>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b4e      	cmp	r3, #78	; 0x4e
 8005326:	d903      	bls.n	8005330 <HAL_DMA_Init+0x29c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b52      	cmp	r3, #82	; 0x52
 800532e:	d907      	bls.n	8005340 <HAL_DMA_Init+0x2ac>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b73      	cmp	r3, #115	; 0x73
 8005336:	d905      	bls.n	8005344 <HAL_DMA_Init+0x2b0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b77      	cmp	r3, #119	; 0x77
 800533e:	d801      	bhi.n	8005344 <HAL_DMA_Init+0x2b0>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <HAL_DMA_Init+0x2b2>
 8005344:	2300      	movs	r3, #0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005350:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b04      	cmp	r3, #4
 800537a:	d117      	bne.n	80053ac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00e      	beq.n	80053ac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fdcc 	bl	8006f2c <DMA_CheckFifoParam>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2240      	movs	r2, #64	; 0x40
 800539e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e194      	b.n	80056d6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 fd07 	bl	8006dc8 <DMA_CalcBaseAndBitshift>
 80053ba:	4603      	mov	r3, r0
 80053bc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	223f      	movs	r2, #63	; 0x3f
 80053c8:	409a      	lsls	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	e0ca      	b.n	8005566 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a39      	ldr	r2, [pc, #228]	; (80054bc <HAL_DMA_Init+0x428>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_DMA_Init+0x38c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a38      	ldr	r2, [pc, #224]	; (80054c0 <HAL_DMA_Init+0x42c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01d      	beq.n	8005420 <HAL_DMA_Init+0x38c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a36      	ldr	r2, [pc, #216]	; (80054c4 <HAL_DMA_Init+0x430>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_DMA_Init+0x38c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <HAL_DMA_Init+0x434>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_DMA_Init+0x38c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a33      	ldr	r2, [pc, #204]	; (80054cc <HAL_DMA_Init+0x438>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_DMA_Init+0x38c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a32      	ldr	r2, [pc, #200]	; (80054d0 <HAL_DMA_Init+0x43c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_DMA_Init+0x38c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <HAL_DMA_Init+0x440>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_DMA_Init+0x38c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <HAL_DMA_Init+0x444>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <HAL_DMA_Init+0x390>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_DMA_Init+0x392>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8094 	beq.w	8005554 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_DMA_Init+0x428>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d021      	beq.n	800547a <HAL_DMA_Init+0x3e6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <HAL_DMA_Init+0x42c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01c      	beq.n	800547a <HAL_DMA_Init+0x3e6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1f      	ldr	r2, [pc, #124]	; (80054c4 <HAL_DMA_Init+0x430>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <HAL_DMA_Init+0x3e6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_DMA_Init+0x434>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d012      	beq.n	800547a <HAL_DMA_Init+0x3e6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <HAL_DMA_Init+0x438>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00d      	beq.n	800547a <HAL_DMA_Init+0x3e6>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_DMA_Init+0x43c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d008      	beq.n	800547a <HAL_DMA_Init+0x3e6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_DMA_Init+0x440>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <HAL_DMA_Init+0x3e6>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_DMA_Init+0x444>)
 8005478:	4293      	cmp	r3, r2
 800547a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4b11      	ldr	r3, [pc, #68]	; (80054dc <HAL_DMA_Init+0x448>)
 8005498:	4013      	ands	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d01d      	beq.n	80054e0 <HAL_DMA_Init+0x44c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d102      	bne.n	80054b2 <HAL_DMA_Init+0x41e>
 80054ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054b0:	e017      	b.n	80054e2 <HAL_DMA_Init+0x44e>
 80054b2:	2300      	movs	r3, #0
 80054b4:	e015      	b.n	80054e2 <HAL_DMA_Init+0x44e>
 80054b6:	bf00      	nop
 80054b8:	fe10803f 	.word	0xfe10803f
 80054bc:	58025408 	.word	0x58025408
 80054c0:	5802541c 	.word	0x5802541c
 80054c4:	58025430 	.word	0x58025430
 80054c8:	58025444 	.word	0x58025444
 80054cc:	58025458 	.word	0x58025458
 80054d0:	5802546c 	.word	0x5802546c
 80054d4:	58025480 	.word	0x58025480
 80054d8:	58025494 	.word	0x58025494
 80054dc:	fffe000f 	.word	0xfffe000f
 80054e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68d2      	ldr	r2, [r2, #12]
 80054e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005500:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005508:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005510:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	4b6e      	ldr	r3, [pc, #440]	; (80056e0 <HAL_DMA_Init+0x64c>)
 8005528:	4413      	add	r3, r2
 800552a:	4a6e      	ldr	r2, [pc, #440]	; (80056e4 <HAL_DMA_Init+0x650>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	091b      	lsrs	r3, r3, #4
 8005532:	009a      	lsls	r2, r3, #2
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 fc45 	bl	8006dc8 <DMA_CalcBaseAndBitshift>
 800553e:	4603      	mov	r3, r0
 8005540:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2201      	movs	r2, #1
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e008      	b.n	8005566 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2240      	movs	r2, #64	; 0x40
 8005558:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0b7      	b.n	80056d6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a5f      	ldr	r2, [pc, #380]	; (80056e8 <HAL_DMA_Init+0x654>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d072      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a5d      	ldr	r2, [pc, #372]	; (80056ec <HAL_DMA_Init+0x658>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d06d      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5c      	ldr	r2, [pc, #368]	; (80056f0 <HAL_DMA_Init+0x65c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d068      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5a      	ldr	r2, [pc, #360]	; (80056f4 <HAL_DMA_Init+0x660>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d063      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a59      	ldr	r2, [pc, #356]	; (80056f8 <HAL_DMA_Init+0x664>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d05e      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a57      	ldr	r2, [pc, #348]	; (80056fc <HAL_DMA_Init+0x668>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d059      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a56      	ldr	r2, [pc, #344]	; (8005700 <HAL_DMA_Init+0x66c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d054      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a54      	ldr	r2, [pc, #336]	; (8005704 <HAL_DMA_Init+0x670>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d04f      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a53      	ldr	r2, [pc, #332]	; (8005708 <HAL_DMA_Init+0x674>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d04a      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a51      	ldr	r2, [pc, #324]	; (800570c <HAL_DMA_Init+0x678>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d045      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a50      	ldr	r2, [pc, #320]	; (8005710 <HAL_DMA_Init+0x67c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d040      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a4e      	ldr	r2, [pc, #312]	; (8005714 <HAL_DMA_Init+0x680>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d03b      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a4d      	ldr	r2, [pc, #308]	; (8005718 <HAL_DMA_Init+0x684>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d036      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a4b      	ldr	r2, [pc, #300]	; (800571c <HAL_DMA_Init+0x688>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d031      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a4a      	ldr	r2, [pc, #296]	; (8005720 <HAL_DMA_Init+0x68c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d02c      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a48      	ldr	r2, [pc, #288]	; (8005724 <HAL_DMA_Init+0x690>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d027      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a47      	ldr	r2, [pc, #284]	; (8005728 <HAL_DMA_Init+0x694>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a45      	ldr	r2, [pc, #276]	; (800572c <HAL_DMA_Init+0x698>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01d      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a44      	ldr	r2, [pc, #272]	; (8005730 <HAL_DMA_Init+0x69c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a42      	ldr	r2, [pc, #264]	; (8005734 <HAL_DMA_Init+0x6a0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a41      	ldr	r2, [pc, #260]	; (8005738 <HAL_DMA_Init+0x6a4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a3f      	ldr	r2, [pc, #252]	; (800573c <HAL_DMA_Init+0x6a8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a3e      	ldr	r2, [pc, #248]	; (8005740 <HAL_DMA_Init+0x6ac>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_DMA_Init+0x5c2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3c      	ldr	r2, [pc, #240]	; (8005744 <HAL_DMA_Init+0x6b0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d101      	bne.n	800565a <HAL_DMA_Init+0x5c6>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_DMA_Init+0x5c8>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d032      	beq.n	80056c6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fcdf 	bl	8007024 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d102      	bne.n	8005674 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005688:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d010      	beq.n	80056b4 <HAL_DMA_Init+0x620>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d80c      	bhi.n	80056b4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fd5c 	bl	8007158 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e008      	b.n	80056c6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	a7fdabf8 	.word	0xa7fdabf8
 80056e4:	cccccccd 	.word	0xcccccccd
 80056e8:	40020010 	.word	0x40020010
 80056ec:	40020028 	.word	0x40020028
 80056f0:	40020040 	.word	0x40020040
 80056f4:	40020058 	.word	0x40020058
 80056f8:	40020070 	.word	0x40020070
 80056fc:	40020088 	.word	0x40020088
 8005700:	400200a0 	.word	0x400200a0
 8005704:	400200b8 	.word	0x400200b8
 8005708:	40020410 	.word	0x40020410
 800570c:	40020428 	.word	0x40020428
 8005710:	40020440 	.word	0x40020440
 8005714:	40020458 	.word	0x40020458
 8005718:	40020470 	.word	0x40020470
 800571c:	40020488 	.word	0x40020488
 8005720:	400204a0 	.word	0x400204a0
 8005724:	400204b8 	.word	0x400204b8
 8005728:	58025408 	.word	0x58025408
 800572c:	5802541c 	.word	0x5802541c
 8005730:	58025430 	.word	0x58025430
 8005734:	58025444 	.word	0x58025444
 8005738:	58025458 	.word	0x58025458
 800573c:	5802546c 	.word	0x5802546c
 8005740:	58025480 	.word	0x58025480
 8005744:	58025494 	.word	0x58025494

08005748 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e226      	b.n	8005bb2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_DMA_Start_IT+0x2a>
 800576e:	2302      	movs	r3, #2
 8005770:	e21f      	b.n	8005bb2 <HAL_DMA_Start_IT+0x46a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	f040 820a 	bne.w	8005b9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a68      	ldr	r2, [pc, #416]	; (800593c <HAL_DMA_Start_IT+0x1f4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d04a      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a66      	ldr	r2, [pc, #408]	; (8005940 <HAL_DMA_Start_IT+0x1f8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d045      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a65      	ldr	r2, [pc, #404]	; (8005944 <HAL_DMA_Start_IT+0x1fc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d040      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a63      	ldr	r2, [pc, #396]	; (8005948 <HAL_DMA_Start_IT+0x200>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d03b      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a62      	ldr	r2, [pc, #392]	; (800594c <HAL_DMA_Start_IT+0x204>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d036      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a60      	ldr	r2, [pc, #384]	; (8005950 <HAL_DMA_Start_IT+0x208>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a5f      	ldr	r2, [pc, #380]	; (8005954 <HAL_DMA_Start_IT+0x20c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d02c      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a5d      	ldr	r2, [pc, #372]	; (8005958 <HAL_DMA_Start_IT+0x210>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d027      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5c      	ldr	r2, [pc, #368]	; (800595c <HAL_DMA_Start_IT+0x214>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5a      	ldr	r2, [pc, #360]	; (8005960 <HAL_DMA_Start_IT+0x218>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a59      	ldr	r2, [pc, #356]	; (8005964 <HAL_DMA_Start_IT+0x21c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a57      	ldr	r2, [pc, #348]	; (8005968 <HAL_DMA_Start_IT+0x220>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a56      	ldr	r2, [pc, #344]	; (800596c <HAL_DMA_Start_IT+0x224>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a54      	ldr	r2, [pc, #336]	; (8005970 <HAL_DMA_Start_IT+0x228>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a53      	ldr	r2, [pc, #332]	; (8005974 <HAL_DMA_Start_IT+0x22c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_DMA_Start_IT+0xee>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a51      	ldr	r2, [pc, #324]	; (8005978 <HAL_DMA_Start_IT+0x230>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <HAL_DMA_Start_IT+0x100>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e007      	b.n	8005858 <HAL_DMA_Start_IT+0x110>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f001 f906 	bl	8006a70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a34      	ldr	r2, [pc, #208]	; (800593c <HAL_DMA_Start_IT+0x1f4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d04a      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a33      	ldr	r2, [pc, #204]	; (8005940 <HAL_DMA_Start_IT+0x1f8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d045      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a31      	ldr	r2, [pc, #196]	; (8005944 <HAL_DMA_Start_IT+0x1fc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d040      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <HAL_DMA_Start_IT+0x200>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d03b      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_DMA_Start_IT+0x204>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d036      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <HAL_DMA_Start_IT+0x208>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d031      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <HAL_DMA_Start_IT+0x20c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d02c      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <HAL_DMA_Start_IT+0x210>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d027      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <HAL_DMA_Start_IT+0x214>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d022      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a27      	ldr	r2, [pc, #156]	; (8005960 <HAL_DMA_Start_IT+0x218>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d01d      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <HAL_DMA_Start_IT+0x21c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d018      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a24      	ldr	r2, [pc, #144]	; (8005968 <HAL_DMA_Start_IT+0x220>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a22      	ldr	r2, [pc, #136]	; (800596c <HAL_DMA_Start_IT+0x224>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00e      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a21      	ldr	r2, [pc, #132]	; (8005970 <HAL_DMA_Start_IT+0x228>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <HAL_DMA_Start_IT+0x22c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_DMA_Start_IT+0x1bc>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <HAL_DMA_Start_IT+0x230>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_DMA_Start_IT+0x1c0>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_DMA_Start_IT+0x1c2>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d036      	beq.n	800597c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 021e 	bic.w	r2, r3, #30
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0216 	orr.w	r2, r2, #22
 8005920:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d03e      	beq.n	80059a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0208 	orr.w	r2, r2, #8
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e035      	b.n	80059a8 <HAL_DMA_Start_IT+0x260>
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 020e 	bic.w	r2, r3, #14
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 020a 	orr.w	r2, r2, #10
 800598e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0204 	orr.w	r2, r2, #4
 80059a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a83      	ldr	r2, [pc, #524]	; (8005bbc <HAL_DMA_Start_IT+0x474>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d072      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a82      	ldr	r2, [pc, #520]	; (8005bc0 <HAL_DMA_Start_IT+0x478>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d06d      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a80      	ldr	r2, [pc, #512]	; (8005bc4 <HAL_DMA_Start_IT+0x47c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d068      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a7f      	ldr	r2, [pc, #508]	; (8005bc8 <HAL_DMA_Start_IT+0x480>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d063      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a7d      	ldr	r2, [pc, #500]	; (8005bcc <HAL_DMA_Start_IT+0x484>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d05e      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7c      	ldr	r2, [pc, #496]	; (8005bd0 <HAL_DMA_Start_IT+0x488>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d059      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a7a      	ldr	r2, [pc, #488]	; (8005bd4 <HAL_DMA_Start_IT+0x48c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d054      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a79      	ldr	r2, [pc, #484]	; (8005bd8 <HAL_DMA_Start_IT+0x490>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d04f      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a77      	ldr	r2, [pc, #476]	; (8005bdc <HAL_DMA_Start_IT+0x494>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d04a      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a76      	ldr	r2, [pc, #472]	; (8005be0 <HAL_DMA_Start_IT+0x498>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d045      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a74      	ldr	r2, [pc, #464]	; (8005be4 <HAL_DMA_Start_IT+0x49c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d040      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a73      	ldr	r2, [pc, #460]	; (8005be8 <HAL_DMA_Start_IT+0x4a0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d03b      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a71      	ldr	r2, [pc, #452]	; (8005bec <HAL_DMA_Start_IT+0x4a4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d036      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a70      	ldr	r2, [pc, #448]	; (8005bf0 <HAL_DMA_Start_IT+0x4a8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d031      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a6e      	ldr	r2, [pc, #440]	; (8005bf4 <HAL_DMA_Start_IT+0x4ac>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d02c      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a6d      	ldr	r2, [pc, #436]	; (8005bf8 <HAL_DMA_Start_IT+0x4b0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d027      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a6b      	ldr	r2, [pc, #428]	; (8005bfc <HAL_DMA_Start_IT+0x4b4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d022      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a6a      	ldr	r2, [pc, #424]	; (8005c00 <HAL_DMA_Start_IT+0x4b8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d01d      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a68      	ldr	r2, [pc, #416]	; (8005c04 <HAL_DMA_Start_IT+0x4bc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d018      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a67      	ldr	r2, [pc, #412]	; (8005c08 <HAL_DMA_Start_IT+0x4c0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d013      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a65      	ldr	r2, [pc, #404]	; (8005c0c <HAL_DMA_Start_IT+0x4c4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a64      	ldr	r2, [pc, #400]	; (8005c10 <HAL_DMA_Start_IT+0x4c8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d009      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a62      	ldr	r2, [pc, #392]	; (8005c14 <HAL_DMA_Start_IT+0x4cc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_DMA_Start_IT+0x350>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a61      	ldr	r2, [pc, #388]	; (8005c18 <HAL_DMA_Start_IT+0x4d0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d101      	bne.n	8005a9c <HAL_DMA_Start_IT+0x354>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <HAL_DMA_Start_IT+0x356>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01a      	beq.n	8005ad8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005abe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a37      	ldr	r2, [pc, #220]	; (8005bbc <HAL_DMA_Start_IT+0x474>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d04a      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a36      	ldr	r2, [pc, #216]	; (8005bc0 <HAL_DMA_Start_IT+0x478>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d045      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <HAL_DMA_Start_IT+0x47c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d040      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a33      	ldr	r2, [pc, #204]	; (8005bc8 <HAL_DMA_Start_IT+0x480>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d03b      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a31      	ldr	r2, [pc, #196]	; (8005bcc <HAL_DMA_Start_IT+0x484>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d036      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a30      	ldr	r2, [pc, #192]	; (8005bd0 <HAL_DMA_Start_IT+0x488>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d031      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2e      	ldr	r2, [pc, #184]	; (8005bd4 <HAL_DMA_Start_IT+0x48c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d02c      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a2d      	ldr	r2, [pc, #180]	; (8005bd8 <HAL_DMA_Start_IT+0x490>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d027      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2b      	ldr	r2, [pc, #172]	; (8005bdc <HAL_DMA_Start_IT+0x494>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d022      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2a      	ldr	r2, [pc, #168]	; (8005be0 <HAL_DMA_Start_IT+0x498>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d01d      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a28      	ldr	r2, [pc, #160]	; (8005be4 <HAL_DMA_Start_IT+0x49c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d018      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a27      	ldr	r2, [pc, #156]	; (8005be8 <HAL_DMA_Start_IT+0x4a0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a25      	ldr	r2, [pc, #148]	; (8005bec <HAL_DMA_Start_IT+0x4a4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00e      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a24      	ldr	r2, [pc, #144]	; (8005bf0 <HAL_DMA_Start_IT+0x4a8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d009      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <HAL_DMA_Start_IT+0x4ac>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_DMA_Start_IT+0x430>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a21      	ldr	r2, [pc, #132]	; (8005bf8 <HAL_DMA_Start_IT+0x4b0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d108      	bne.n	8005b8a <HAL_DMA_Start_IT+0x442>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	e012      	b.n	8005bb0 <HAL_DMA_Start_IT+0x468>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e009      	b.n	8005bb0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40020010 	.word	0x40020010
 8005bc0:	40020028 	.word	0x40020028
 8005bc4:	40020040 	.word	0x40020040
 8005bc8:	40020058 	.word	0x40020058
 8005bcc:	40020070 	.word	0x40020070
 8005bd0:	40020088 	.word	0x40020088
 8005bd4:	400200a0 	.word	0x400200a0
 8005bd8:	400200b8 	.word	0x400200b8
 8005bdc:	40020410 	.word	0x40020410
 8005be0:	40020428 	.word	0x40020428
 8005be4:	40020440 	.word	0x40020440
 8005be8:	40020458 	.word	0x40020458
 8005bec:	40020470 	.word	0x40020470
 8005bf0:	40020488 	.word	0x40020488
 8005bf4:	400204a0 	.word	0x400204a0
 8005bf8:	400204b8 	.word	0x400204b8
 8005bfc:	58025408 	.word	0x58025408
 8005c00:	5802541c 	.word	0x5802541c
 8005c04:	58025430 	.word	0x58025430
 8005c08:	58025444 	.word	0x58025444
 8005c0c:	58025458 	.word	0x58025458
 8005c10:	5802546c 	.word	0x5802546c
 8005c14:	58025480 	.word	0x58025480
 8005c18:	58025494 	.word	0x58025494

08005c1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	; 0x28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c28:	4b67      	ldr	r3, [pc, #412]	; (8005dc8 <HAL_DMA_IRQHandler+0x1ac>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a67      	ldr	r2, [pc, #412]	; (8005dcc <HAL_DMA_IRQHandler+0x1b0>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	0a9b      	lsrs	r3, r3, #10
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a5f      	ldr	r2, [pc, #380]	; (8005dd0 <HAL_DMA_IRQHandler+0x1b4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d04a      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a5d      	ldr	r2, [pc, #372]	; (8005dd4 <HAL_DMA_IRQHandler+0x1b8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d045      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a5c      	ldr	r2, [pc, #368]	; (8005dd8 <HAL_DMA_IRQHandler+0x1bc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d040      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a5a      	ldr	r2, [pc, #360]	; (8005ddc <HAL_DMA_IRQHandler+0x1c0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d03b      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a59      	ldr	r2, [pc, #356]	; (8005de0 <HAL_DMA_IRQHandler+0x1c4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d036      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a57      	ldr	r2, [pc, #348]	; (8005de4 <HAL_DMA_IRQHandler+0x1c8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d031      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a56      	ldr	r2, [pc, #344]	; (8005de8 <HAL_DMA_IRQHandler+0x1cc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d02c      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a54      	ldr	r2, [pc, #336]	; (8005dec <HAL_DMA_IRQHandler+0x1d0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d027      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a53      	ldr	r2, [pc, #332]	; (8005df0 <HAL_DMA_IRQHandler+0x1d4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d022      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a51      	ldr	r2, [pc, #324]	; (8005df4 <HAL_DMA_IRQHandler+0x1d8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01d      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a50      	ldr	r2, [pc, #320]	; (8005df8 <HAL_DMA_IRQHandler+0x1dc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d018      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4e      	ldr	r2, [pc, #312]	; (8005dfc <HAL_DMA_IRQHandler+0x1e0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a4d      	ldr	r2, [pc, #308]	; (8005e00 <HAL_DMA_IRQHandler+0x1e4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a4b      	ldr	r2, [pc, #300]	; (8005e04 <HAL_DMA_IRQHandler+0x1e8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4a      	ldr	r2, [pc, #296]	; (8005e08 <HAL_DMA_IRQHandler+0x1ec>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_DMA_IRQHandler+0xd2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a48      	ldr	r2, [pc, #288]	; (8005e0c <HAL_DMA_IRQHandler+0x1f0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d101      	bne.n	8005cf2 <HAL_DMA_IRQHandler+0xd6>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <HAL_DMA_IRQHandler+0xd8>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 842b 	beq.w	8006550 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	2208      	movs	r2, #8
 8005d04:	409a      	lsls	r2, r3
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80a2 	beq.w	8005e54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2e      	ldr	r2, [pc, #184]	; (8005dd0 <HAL_DMA_IRQHandler+0x1b4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2d      	ldr	r2, [pc, #180]	; (8005dd4 <HAL_DMA_IRQHandler+0x1b8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2b      	ldr	r2, [pc, #172]	; (8005dd8 <HAL_DMA_IRQHandler+0x1bc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <HAL_DMA_IRQHandler+0x1c0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <HAL_DMA_IRQHandler+0x1c4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <HAL_DMA_IRQHandler+0x1c8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a25      	ldr	r2, [pc, #148]	; (8005de8 <HAL_DMA_IRQHandler+0x1cc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a24      	ldr	r2, [pc, #144]	; (8005dec <HAL_DMA_IRQHandler+0x1d0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a22      	ldr	r2, [pc, #136]	; (8005df0 <HAL_DMA_IRQHandler+0x1d4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a21      	ldr	r2, [pc, #132]	; (8005df4 <HAL_DMA_IRQHandler+0x1d8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1f      	ldr	r2, [pc, #124]	; (8005df8 <HAL_DMA_IRQHandler+0x1dc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1e      	ldr	r2, [pc, #120]	; (8005dfc <HAL_DMA_IRQHandler+0x1e0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <HAL_DMA_IRQHandler+0x1e4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1b      	ldr	r2, [pc, #108]	; (8005e04 <HAL_DMA_IRQHandler+0x1e8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <HAL_DMA_IRQHandler+0x1ec>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x194>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <HAL_DMA_IRQHandler+0x1f0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d12f      	bne.n	8005e10 <HAL_DMA_IRQHandler+0x1f4>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	e02e      	b.n	8005e24 <HAL_DMA_IRQHandler+0x208>
 8005dc6:	bf00      	nop
 8005dc8:	24000000 	.word	0x24000000
 8005dcc:	1b4e81b5 	.word	0x1b4e81b5
 8005dd0:	40020010 	.word	0x40020010
 8005dd4:	40020028 	.word	0x40020028
 8005dd8:	40020040 	.word	0x40020040
 8005ddc:	40020058 	.word	0x40020058
 8005de0:	40020070 	.word	0x40020070
 8005de4:	40020088 	.word	0x40020088
 8005de8:	400200a0 	.word	0x400200a0
 8005dec:	400200b8 	.word	0x400200b8
 8005df0:	40020410 	.word	0x40020410
 8005df4:	40020428 	.word	0x40020428
 8005df8:	40020440 	.word	0x40020440
 8005dfc:	40020458 	.word	0x40020458
 8005e00:	40020470 	.word	0x40020470
 8005e04:	40020488 	.word	0x40020488
 8005e08:	400204a0 	.word	0x400204a0
 8005e0c:	400204b8 	.word	0x400204b8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d015      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0204 	bic.w	r2, r2, #4
 8005e36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2208      	movs	r2, #8
 8005e42:	409a      	lsls	r2, r3
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	f043 0201 	orr.w	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d06e      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a69      	ldr	r2, [pc, #420]	; (8006014 <HAL_DMA_IRQHandler+0x3f8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d04a      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a67      	ldr	r2, [pc, #412]	; (8006018 <HAL_DMA_IRQHandler+0x3fc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d045      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a66      	ldr	r2, [pc, #408]	; (800601c <HAL_DMA_IRQHandler+0x400>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d040      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a64      	ldr	r2, [pc, #400]	; (8006020 <HAL_DMA_IRQHandler+0x404>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d03b      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a63      	ldr	r2, [pc, #396]	; (8006024 <HAL_DMA_IRQHandler+0x408>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d036      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a61      	ldr	r2, [pc, #388]	; (8006028 <HAL_DMA_IRQHandler+0x40c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a60      	ldr	r2, [pc, #384]	; (800602c <HAL_DMA_IRQHandler+0x410>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d02c      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a5e      	ldr	r2, [pc, #376]	; (8006030 <HAL_DMA_IRQHandler+0x414>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a5d      	ldr	r2, [pc, #372]	; (8006034 <HAL_DMA_IRQHandler+0x418>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a5b      	ldr	r2, [pc, #364]	; (8006038 <HAL_DMA_IRQHandler+0x41c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a5a      	ldr	r2, [pc, #360]	; (800603c <HAL_DMA_IRQHandler+0x420>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a58      	ldr	r2, [pc, #352]	; (8006040 <HAL_DMA_IRQHandler+0x424>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a57      	ldr	r2, [pc, #348]	; (8006044 <HAL_DMA_IRQHandler+0x428>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a55      	ldr	r2, [pc, #340]	; (8006048 <HAL_DMA_IRQHandler+0x42c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a54      	ldr	r2, [pc, #336]	; (800604c <HAL_DMA_IRQHandler+0x430>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x2ee>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a52      	ldr	r2, [pc, #328]	; (8006050 <HAL_DMA_IRQHandler+0x434>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d10a      	bne.n	8005f20 <HAL_DMA_IRQHandler+0x304>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e003      	b.n	8005f28 <HAL_DMA_IRQHandler+0x30c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2201      	movs	r2, #1
 8005f36:	409a      	lsls	r2, r3
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f40:	f043 0202 	orr.w	r2, r3, #2
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	2204      	movs	r2, #4
 8005f52:	409a      	lsls	r2, r3
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 808f 	beq.w	800607c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <HAL_DMA_IRQHandler+0x3f8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d04a      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <HAL_DMA_IRQHandler+0x3fc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d045      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a29      	ldr	r2, [pc, #164]	; (800601c <HAL_DMA_IRQHandler+0x400>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d040      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a27      	ldr	r2, [pc, #156]	; (8006020 <HAL_DMA_IRQHandler+0x404>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d03b      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a26      	ldr	r2, [pc, #152]	; (8006024 <HAL_DMA_IRQHandler+0x408>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d036      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a24      	ldr	r2, [pc, #144]	; (8006028 <HAL_DMA_IRQHandler+0x40c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d031      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a23      	ldr	r2, [pc, #140]	; (800602c <HAL_DMA_IRQHandler+0x410>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d02c      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a21      	ldr	r2, [pc, #132]	; (8006030 <HAL_DMA_IRQHandler+0x414>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d027      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a20      	ldr	r2, [pc, #128]	; (8006034 <HAL_DMA_IRQHandler+0x418>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <HAL_DMA_IRQHandler+0x41c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01d      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1d      	ldr	r2, [pc, #116]	; (800603c <HAL_DMA_IRQHandler+0x420>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_DMA_IRQHandler+0x424>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <HAL_DMA_IRQHandler+0x428>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a18      	ldr	r2, [pc, #96]	; (8006048 <HAL_DMA_IRQHandler+0x42c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <HAL_DMA_IRQHandler+0x430>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x3e2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <HAL_DMA_IRQHandler+0x434>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d12a      	bne.n	8006054 <HAL_DMA_IRQHandler+0x438>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	bf14      	ite	ne
 800600c:	2301      	movne	r3, #1
 800600e:	2300      	moveq	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	e023      	b.n	800605c <HAL_DMA_IRQHandler+0x440>
 8006014:	40020010 	.word	0x40020010
 8006018:	40020028 	.word	0x40020028
 800601c:	40020040 	.word	0x40020040
 8006020:	40020058 	.word	0x40020058
 8006024:	40020070 	.word	0x40020070
 8006028:	40020088 	.word	0x40020088
 800602c:	400200a0 	.word	0x400200a0
 8006030:	400200b8 	.word	0x400200b8
 8006034:	40020410 	.word	0x40020410
 8006038:	40020428 	.word	0x40020428
 800603c:	40020440 	.word	0x40020440
 8006040:	40020458 	.word	0x40020458
 8006044:	40020470 	.word	0x40020470
 8006048:	40020488 	.word	0x40020488
 800604c:	400204a0 	.word	0x400204a0
 8006050:	400204b8 	.word	0x400204b8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2300      	movs	r3, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2204      	movs	r2, #4
 800606a:	409a      	lsls	r2, r3
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006074:	f043 0204 	orr.w	r2, r3, #4
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2210      	movs	r2, #16
 8006086:	409a      	lsls	r2, r3
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80a6 	beq.w	80061de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a85      	ldr	r2, [pc, #532]	; (80062ac <HAL_DMA_IRQHandler+0x690>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d04a      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a83      	ldr	r2, [pc, #524]	; (80062b0 <HAL_DMA_IRQHandler+0x694>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d045      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a82      	ldr	r2, [pc, #520]	; (80062b4 <HAL_DMA_IRQHandler+0x698>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d040      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a80      	ldr	r2, [pc, #512]	; (80062b8 <HAL_DMA_IRQHandler+0x69c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d03b      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a7f      	ldr	r2, [pc, #508]	; (80062bc <HAL_DMA_IRQHandler+0x6a0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d036      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a7d      	ldr	r2, [pc, #500]	; (80062c0 <HAL_DMA_IRQHandler+0x6a4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d031      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a7c      	ldr	r2, [pc, #496]	; (80062c4 <HAL_DMA_IRQHandler+0x6a8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d02c      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a7a      	ldr	r2, [pc, #488]	; (80062c8 <HAL_DMA_IRQHandler+0x6ac>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d027      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a79      	ldr	r2, [pc, #484]	; (80062cc <HAL_DMA_IRQHandler+0x6b0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d022      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a77      	ldr	r2, [pc, #476]	; (80062d0 <HAL_DMA_IRQHandler+0x6b4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01d      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a76      	ldr	r2, [pc, #472]	; (80062d4 <HAL_DMA_IRQHandler+0x6b8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a74      	ldr	r2, [pc, #464]	; (80062d8 <HAL_DMA_IRQHandler+0x6bc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a73      	ldr	r2, [pc, #460]	; (80062dc <HAL_DMA_IRQHandler+0x6c0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a71      	ldr	r2, [pc, #452]	; (80062e0 <HAL_DMA_IRQHandler+0x6c4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a70      	ldr	r2, [pc, #448]	; (80062e4 <HAL_DMA_IRQHandler+0x6c8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_DMA_IRQHandler+0x516>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a6e      	ldr	r2, [pc, #440]	; (80062e8 <HAL_DMA_IRQHandler+0x6cc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d10a      	bne.n	8006148 <HAL_DMA_IRQHandler+0x52c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e009      	b.n	800615c <HAL_DMA_IRQHandler+0x540>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	bf14      	ite	ne
 8006156:	2301      	movne	r3, #1
 8006158:	2300      	moveq	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d03e      	beq.n	80061de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2210      	movs	r2, #16
 800616a:	409a      	lsls	r2, r3
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d108      	bne.n	800619e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d024      	beq.n	80061de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
 800619c:	e01f      	b.n	80061de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01b      	beq.n	80061de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
 80061ae:	e016      	b.n	80061de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0208 	bic.w	r2, r2, #8
 80061cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2220      	movs	r2, #32
 80061e8:	409a      	lsls	r2, r3
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 8110 	beq.w	8006414 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a2c      	ldr	r2, [pc, #176]	; (80062ac <HAL_DMA_IRQHandler+0x690>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d04a      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2b      	ldr	r2, [pc, #172]	; (80062b0 <HAL_DMA_IRQHandler+0x694>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d045      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a29      	ldr	r2, [pc, #164]	; (80062b4 <HAL_DMA_IRQHandler+0x698>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d040      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a28      	ldr	r2, [pc, #160]	; (80062b8 <HAL_DMA_IRQHandler+0x69c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d03b      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a26      	ldr	r2, [pc, #152]	; (80062bc <HAL_DMA_IRQHandler+0x6a0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d036      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <HAL_DMA_IRQHandler+0x6a4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d031      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a23      	ldr	r2, [pc, #140]	; (80062c4 <HAL_DMA_IRQHandler+0x6a8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02c      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <HAL_DMA_IRQHandler+0x6ac>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d027      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <HAL_DMA_IRQHandler+0x6b0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <HAL_DMA_IRQHandler+0x6b4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d01d      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <HAL_DMA_IRQHandler+0x6b8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <HAL_DMA_IRQHandler+0x6bc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <HAL_DMA_IRQHandler+0x6c0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_DMA_IRQHandler+0x6c4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <HAL_DMA_IRQHandler+0x6c8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_DMA_IRQHandler+0x678>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <HAL_DMA_IRQHandler+0x6cc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d12b      	bne.n	80062ec <HAL_DMA_IRQHandler+0x6d0>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bf14      	ite	ne
 80062a2:	2301      	movne	r3, #1
 80062a4:	2300      	moveq	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	e02a      	b.n	8006300 <HAL_DMA_IRQHandler+0x6e4>
 80062aa:	bf00      	nop
 80062ac:	40020010 	.word	0x40020010
 80062b0:	40020028 	.word	0x40020028
 80062b4:	40020040 	.word	0x40020040
 80062b8:	40020058 	.word	0x40020058
 80062bc:	40020070 	.word	0x40020070
 80062c0:	40020088 	.word	0x40020088
 80062c4:	400200a0 	.word	0x400200a0
 80062c8:	400200b8 	.word	0x400200b8
 80062cc:	40020410 	.word	0x40020410
 80062d0:	40020428 	.word	0x40020428
 80062d4:	40020440 	.word	0x40020440
 80062d8:	40020458 	.word	0x40020458
 80062dc:	40020470 	.word	0x40020470
 80062e0:	40020488 	.word	0x40020488
 80062e4:	400204a0 	.word	0x400204a0
 80062e8:	400204b8 	.word	0x400204b8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf14      	ite	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	2300      	moveq	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8087 	beq.w	8006414 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2220      	movs	r2, #32
 8006310:	409a      	lsls	r2, r3
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b04      	cmp	r3, #4
 8006320:	d139      	bne.n	8006396 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0216 	bic.w	r2, r2, #22
 8006330:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006340:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <HAL_DMA_IRQHandler+0x736>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0208 	bic.w	r2, r2, #8
 8006360:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	223f      	movs	r2, #63	; 0x3f
 800636c:	409a      	lsls	r2, r3
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 834a 	beq.w	8006a20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
          }
          return;
 8006394:	e344      	b.n	8006a20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d018      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d108      	bne.n	80063c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d02c      	beq.n	8006414 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
 80063c2:	e027      	b.n	8006414 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d023      	beq.n	8006414 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	e01e      	b.n	8006414 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10f      	bne.n	8006404 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0210 	bic.w	r2, r2, #16
 80063f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8306 	beq.w	8006a2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8088 	beq.w	800653c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2204      	movs	r2, #4
 8006430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a7a      	ldr	r2, [pc, #488]	; (8006624 <HAL_DMA_IRQHandler+0xa08>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d04a      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a79      	ldr	r2, [pc, #484]	; (8006628 <HAL_DMA_IRQHandler+0xa0c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d045      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a77      	ldr	r2, [pc, #476]	; (800662c <HAL_DMA_IRQHandler+0xa10>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d040      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a76      	ldr	r2, [pc, #472]	; (8006630 <HAL_DMA_IRQHandler+0xa14>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d03b      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a74      	ldr	r2, [pc, #464]	; (8006634 <HAL_DMA_IRQHandler+0xa18>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d036      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a73      	ldr	r2, [pc, #460]	; (8006638 <HAL_DMA_IRQHandler+0xa1c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d031      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a71      	ldr	r2, [pc, #452]	; (800663c <HAL_DMA_IRQHandler+0xa20>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d02c      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a70      	ldr	r2, [pc, #448]	; (8006640 <HAL_DMA_IRQHandler+0xa24>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d027      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6e      	ldr	r2, [pc, #440]	; (8006644 <HAL_DMA_IRQHandler+0xa28>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d022      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a6d      	ldr	r2, [pc, #436]	; (8006648 <HAL_DMA_IRQHandler+0xa2c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d01d      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a6b      	ldr	r2, [pc, #428]	; (800664c <HAL_DMA_IRQHandler+0xa30>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d018      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a6a      	ldr	r2, [pc, #424]	; (8006650 <HAL_DMA_IRQHandler+0xa34>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d013      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a68      	ldr	r2, [pc, #416]	; (8006654 <HAL_DMA_IRQHandler+0xa38>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00e      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a67      	ldr	r2, [pc, #412]	; (8006658 <HAL_DMA_IRQHandler+0xa3c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d009      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a65      	ldr	r2, [pc, #404]	; (800665c <HAL_DMA_IRQHandler+0xa40>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d004      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x8b8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a64      	ldr	r2, [pc, #400]	; (8006660 <HAL_DMA_IRQHandler+0xa44>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d108      	bne.n	80064e6 <HAL_DMA_IRQHandler+0x8ca>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e007      	b.n	80064f6 <HAL_DMA_IRQHandler+0x8da>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fe:	429a      	cmp	r2, r3
 8006500:	d307      	bcc.n	8006512 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f2      	bne.n	80064f6 <HAL_DMA_IRQHandler+0x8da>
 8006510:	e000      	b.n	8006514 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006512:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2203      	movs	r2, #3
 8006526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800652a:	e003      	b.n	8006534 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8272 	beq.w	8006a2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	e26c      	b.n	8006a2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a43      	ldr	r2, [pc, #268]	; (8006664 <HAL_DMA_IRQHandler+0xa48>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d022      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x984>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a42      	ldr	r2, [pc, #264]	; (8006668 <HAL_DMA_IRQHandler+0xa4c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d01d      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x984>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a40      	ldr	r2, [pc, #256]	; (800666c <HAL_DMA_IRQHandler+0xa50>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d018      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x984>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a3f      	ldr	r2, [pc, #252]	; (8006670 <HAL_DMA_IRQHandler+0xa54>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d013      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x984>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3d      	ldr	r2, [pc, #244]	; (8006674 <HAL_DMA_IRQHandler+0xa58>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00e      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x984>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a3c      	ldr	r2, [pc, #240]	; (8006678 <HAL_DMA_IRQHandler+0xa5c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d009      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x984>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3a      	ldr	r2, [pc, #232]	; (800667c <HAL_DMA_IRQHandler+0xa60>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d004      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x984>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a39      	ldr	r2, [pc, #228]	; (8006680 <HAL_DMA_IRQHandler+0xa64>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d101      	bne.n	80065a4 <HAL_DMA_IRQHandler+0x988>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <HAL_DMA_IRQHandler+0x98a>
 80065a4:	2300      	movs	r3, #0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 823f 	beq.w	8006a2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	2204      	movs	r2, #4
 80065be:	409a      	lsls	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80cd 	beq.w	8006764 <HAL_DMA_IRQHandler+0xb48>
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80c7 	beq.w	8006764 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2204      	movs	r2, #4
 80065e0:	409a      	lsls	r2, r3
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d049      	beq.n	8006684 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8210 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800660c:	e20a      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8206 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006620:	e200      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe08>
 8006622:	bf00      	nop
 8006624:	40020010 	.word	0x40020010
 8006628:	40020028 	.word	0x40020028
 800662c:	40020040 	.word	0x40020040
 8006630:	40020058 	.word	0x40020058
 8006634:	40020070 	.word	0x40020070
 8006638:	40020088 	.word	0x40020088
 800663c:	400200a0 	.word	0x400200a0
 8006640:	400200b8 	.word	0x400200b8
 8006644:	40020410 	.word	0x40020410
 8006648:	40020428 	.word	0x40020428
 800664c:	40020440 	.word	0x40020440
 8006650:	40020458 	.word	0x40020458
 8006654:	40020470 	.word	0x40020470
 8006658:	40020488 	.word	0x40020488
 800665c:	400204a0 	.word	0x400204a0
 8006660:	400204b8 	.word	0x400204b8
 8006664:	58025408 	.word	0x58025408
 8006668:	5802541c 	.word	0x5802541c
 800666c:	58025430 	.word	0x58025430
 8006670:	58025444 	.word	0x58025444
 8006674:	58025458 	.word	0x58025458
 8006678:	5802546c 	.word	0x5802546c
 800667c:	58025480 	.word	0x58025480
 8006680:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d160      	bne.n	8006750 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a7f      	ldr	r2, [pc, #508]	; (8006890 <HAL_DMA_IRQHandler+0xc74>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d04a      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a7d      	ldr	r2, [pc, #500]	; (8006894 <HAL_DMA_IRQHandler+0xc78>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d045      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a7c      	ldr	r2, [pc, #496]	; (8006898 <HAL_DMA_IRQHandler+0xc7c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d040      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7a      	ldr	r2, [pc, #488]	; (800689c <HAL_DMA_IRQHandler+0xc80>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d03b      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a79      	ldr	r2, [pc, #484]	; (80068a0 <HAL_DMA_IRQHandler+0xc84>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d036      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a77      	ldr	r2, [pc, #476]	; (80068a4 <HAL_DMA_IRQHandler+0xc88>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d031      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a76      	ldr	r2, [pc, #472]	; (80068a8 <HAL_DMA_IRQHandler+0xc8c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d02c      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a74      	ldr	r2, [pc, #464]	; (80068ac <HAL_DMA_IRQHandler+0xc90>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d027      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a73      	ldr	r2, [pc, #460]	; (80068b0 <HAL_DMA_IRQHandler+0xc94>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d022      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a71      	ldr	r2, [pc, #452]	; (80068b4 <HAL_DMA_IRQHandler+0xc98>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d01d      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a70      	ldr	r2, [pc, #448]	; (80068b8 <HAL_DMA_IRQHandler+0xc9c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d018      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a6e      	ldr	r2, [pc, #440]	; (80068bc <HAL_DMA_IRQHandler+0xca0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a6d      	ldr	r2, [pc, #436]	; (80068c0 <HAL_DMA_IRQHandler+0xca4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00e      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a6b      	ldr	r2, [pc, #428]	; (80068c4 <HAL_DMA_IRQHandler+0xca8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a6a      	ldr	r2, [pc, #424]	; (80068c8 <HAL_DMA_IRQHandler+0xcac>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_DMA_IRQHandler+0xb12>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a68      	ldr	r2, [pc, #416]	; (80068cc <HAL_DMA_IRQHandler+0xcb0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d108      	bne.n	8006740 <HAL_DMA_IRQHandler+0xb24>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0208 	bic.w	r2, r2, #8
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e007      	b.n	8006750 <HAL_DMA_IRQHandler+0xb34>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0204 	bic.w	r2, r2, #4
 800674e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8165 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006762:	e15f      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2202      	movs	r2, #2
 800676e:	409a      	lsls	r2, r3
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	4013      	ands	r3, r2
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80c5 	beq.w	8006904 <HAL_DMA_IRQHandler+0xce8>
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80bf 	beq.w	8006904 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2202      	movs	r2, #2
 8006790:	409a      	lsls	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d018      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 813a 	beq.w	8006a28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067bc:	e134      	b.n	8006a28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 8130 	beq.w	8006a28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d0:	e12a      	b.n	8006a28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f040 8089 	bne.w	80068f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2b      	ldr	r2, [pc, #172]	; (8006890 <HAL_DMA_IRQHandler+0xc74>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d04a      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a29      	ldr	r2, [pc, #164]	; (8006894 <HAL_DMA_IRQHandler+0xc78>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d045      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a28      	ldr	r2, [pc, #160]	; (8006898 <HAL_DMA_IRQHandler+0xc7c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d040      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a26      	ldr	r2, [pc, #152]	; (800689c <HAL_DMA_IRQHandler+0xc80>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d03b      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a25      	ldr	r2, [pc, #148]	; (80068a0 <HAL_DMA_IRQHandler+0xc84>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d036      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a23      	ldr	r2, [pc, #140]	; (80068a4 <HAL_DMA_IRQHandler+0xc88>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d031      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <HAL_DMA_IRQHandler+0xc8c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d02c      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a20      	ldr	r2, [pc, #128]	; (80068ac <HAL_DMA_IRQHandler+0xc90>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d027      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <HAL_DMA_IRQHandler+0xc94>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_DMA_IRQHandler+0xc98>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01d      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1c      	ldr	r2, [pc, #112]	; (80068b8 <HAL_DMA_IRQHandler+0xc9c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1a      	ldr	r2, [pc, #104]	; (80068bc <HAL_DMA_IRQHandler+0xca0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <HAL_DMA_IRQHandler+0xca4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_DMA_IRQHandler+0xca8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a16      	ldr	r2, [pc, #88]	; (80068c8 <HAL_DMA_IRQHandler+0xcac>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_DMA_IRQHandler+0xc62>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a14      	ldr	r2, [pc, #80]	; (80068cc <HAL_DMA_IRQHandler+0xcb0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d128      	bne.n	80068d0 <HAL_DMA_IRQHandler+0xcb4>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0214 	bic.w	r2, r2, #20
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	e027      	b.n	80068e0 <HAL_DMA_IRQHandler+0xcc4>
 8006890:	40020010 	.word	0x40020010
 8006894:	40020028 	.word	0x40020028
 8006898:	40020040 	.word	0x40020040
 800689c:	40020058 	.word	0x40020058
 80068a0:	40020070 	.word	0x40020070
 80068a4:	40020088 	.word	0x40020088
 80068a8:	400200a0 	.word	0x400200a0
 80068ac:	400200b8 	.word	0x400200b8
 80068b0:	40020410 	.word	0x40020410
 80068b4:	40020428 	.word	0x40020428
 80068b8:	40020440 	.word	0x40020440
 80068bc:	40020458 	.word	0x40020458
 80068c0:	40020470 	.word	0x40020470
 80068c4:	40020488 	.word	0x40020488
 80068c8:	400204a0 	.word	0x400204a0
 80068cc:	400204b8 	.word	0x400204b8
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 020a 	bic.w	r2, r2, #10
 80068de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8097 	beq.w	8006a28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006902:	e091      	b.n	8006a28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2208      	movs	r2, #8
 800690e:	409a      	lsls	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8088 	beq.w	8006a2a <HAL_DMA_IRQHandler+0xe0e>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8082 	beq.w	8006a2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a41      	ldr	r2, [pc, #260]	; (8006a30 <HAL_DMA_IRQHandler+0xe14>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d04a      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a3f      	ldr	r2, [pc, #252]	; (8006a34 <HAL_DMA_IRQHandler+0xe18>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d045      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a3e      	ldr	r2, [pc, #248]	; (8006a38 <HAL_DMA_IRQHandler+0xe1c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d040      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a3c      	ldr	r2, [pc, #240]	; (8006a3c <HAL_DMA_IRQHandler+0xe20>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d03b      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a3b      	ldr	r2, [pc, #236]	; (8006a40 <HAL_DMA_IRQHandler+0xe24>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d036      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a39      	ldr	r2, [pc, #228]	; (8006a44 <HAL_DMA_IRQHandler+0xe28>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d031      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a38      	ldr	r2, [pc, #224]	; (8006a48 <HAL_DMA_IRQHandler+0xe2c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d02c      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a36      	ldr	r2, [pc, #216]	; (8006a4c <HAL_DMA_IRQHandler+0xe30>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d027      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a35      	ldr	r2, [pc, #212]	; (8006a50 <HAL_DMA_IRQHandler+0xe34>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d022      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a33      	ldr	r2, [pc, #204]	; (8006a54 <HAL_DMA_IRQHandler+0xe38>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01d      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a32      	ldr	r2, [pc, #200]	; (8006a58 <HAL_DMA_IRQHandler+0xe3c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a30      	ldr	r2, [pc, #192]	; (8006a5c <HAL_DMA_IRQHandler+0xe40>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2f      	ldr	r2, [pc, #188]	; (8006a60 <HAL_DMA_IRQHandler+0xe44>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2d      	ldr	r2, [pc, #180]	; (8006a64 <HAL_DMA_IRQHandler+0xe48>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	; (8006a68 <HAL_DMA_IRQHandler+0xe4c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xdaa>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a2a      	ldr	r2, [pc, #168]	; (8006a6c <HAL_DMA_IRQHandler+0xe50>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d108      	bne.n	80069d8 <HAL_DMA_IRQHandler+0xdbc>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 021c 	bic.w	r2, r2, #28
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e007      	b.n	80069e8 <HAL_DMA_IRQHandler+0xdcc>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 020e 	bic.w	r2, r2, #14
 80069e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	2201      	movs	r2, #1
 80069f2:	409a      	lsls	r2, r3
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4798      	blx	r3
 8006a1e:	e004      	b.n	8006a2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006a20:	bf00      	nop
 8006a22:	e002      	b.n	8006a2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a24:	bf00      	nop
 8006a26:	e000      	b.n	8006a2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a2a:	3728      	adds	r7, #40	; 0x28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40020010 	.word	0x40020010
 8006a34:	40020028 	.word	0x40020028
 8006a38:	40020040 	.word	0x40020040
 8006a3c:	40020058 	.word	0x40020058
 8006a40:	40020070 	.word	0x40020070
 8006a44:	40020088 	.word	0x40020088
 8006a48:	400200a0 	.word	0x400200a0
 8006a4c:	400200b8 	.word	0x400200b8
 8006a50:	40020410 	.word	0x40020410
 8006a54:	40020428 	.word	0x40020428
 8006a58:	40020440 	.word	0x40020440
 8006a5c:	40020458 	.word	0x40020458
 8006a60:	40020470 	.word	0x40020470
 8006a64:	40020488 	.word	0x40020488
 8006a68:	400204a0 	.word	0x400204a0
 8006a6c:	400204b8 	.word	0x400204b8

08006a70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a7f      	ldr	r2, [pc, #508]	; (8006c8c <DMA_SetConfig+0x21c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d072      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a7d      	ldr	r2, [pc, #500]	; (8006c90 <DMA_SetConfig+0x220>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d06d      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a7c      	ldr	r2, [pc, #496]	; (8006c94 <DMA_SetConfig+0x224>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d068      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a7a      	ldr	r2, [pc, #488]	; (8006c98 <DMA_SetConfig+0x228>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d063      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a79      	ldr	r2, [pc, #484]	; (8006c9c <DMA_SetConfig+0x22c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d05e      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a77      	ldr	r2, [pc, #476]	; (8006ca0 <DMA_SetConfig+0x230>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d059      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a76      	ldr	r2, [pc, #472]	; (8006ca4 <DMA_SetConfig+0x234>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d054      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a74      	ldr	r2, [pc, #464]	; (8006ca8 <DMA_SetConfig+0x238>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d04f      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a73      	ldr	r2, [pc, #460]	; (8006cac <DMA_SetConfig+0x23c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04a      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a71      	ldr	r2, [pc, #452]	; (8006cb0 <DMA_SetConfig+0x240>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d045      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a70      	ldr	r2, [pc, #448]	; (8006cb4 <DMA_SetConfig+0x244>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d040      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a6e      	ldr	r2, [pc, #440]	; (8006cb8 <DMA_SetConfig+0x248>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d03b      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a6d      	ldr	r2, [pc, #436]	; (8006cbc <DMA_SetConfig+0x24c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d036      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a6b      	ldr	r2, [pc, #428]	; (8006cc0 <DMA_SetConfig+0x250>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d031      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a6a      	ldr	r2, [pc, #424]	; (8006cc4 <DMA_SetConfig+0x254>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d02c      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a68      	ldr	r2, [pc, #416]	; (8006cc8 <DMA_SetConfig+0x258>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d027      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a67      	ldr	r2, [pc, #412]	; (8006ccc <DMA_SetConfig+0x25c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a65      	ldr	r2, [pc, #404]	; (8006cd0 <DMA_SetConfig+0x260>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a64      	ldr	r2, [pc, #400]	; (8006cd4 <DMA_SetConfig+0x264>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a62      	ldr	r2, [pc, #392]	; (8006cd8 <DMA_SetConfig+0x268>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a61      	ldr	r2, [pc, #388]	; (8006cdc <DMA_SetConfig+0x26c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a5f      	ldr	r2, [pc, #380]	; (8006ce0 <DMA_SetConfig+0x270>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a5e      	ldr	r2, [pc, #376]	; (8006ce4 <DMA_SetConfig+0x274>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <DMA_SetConfig+0x10a>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a5c      	ldr	r2, [pc, #368]	; (8006ce8 <DMA_SetConfig+0x278>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d101      	bne.n	8006b7e <DMA_SetConfig+0x10e>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <DMA_SetConfig+0x110>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a39      	ldr	r2, [pc, #228]	; (8006c8c <DMA_SetConfig+0x21c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d04a      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a38      	ldr	r2, [pc, #224]	; (8006c90 <DMA_SetConfig+0x220>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d045      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a36      	ldr	r2, [pc, #216]	; (8006c94 <DMA_SetConfig+0x224>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d040      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a35      	ldr	r2, [pc, #212]	; (8006c98 <DMA_SetConfig+0x228>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d03b      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a33      	ldr	r2, [pc, #204]	; (8006c9c <DMA_SetConfig+0x22c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d036      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a32      	ldr	r2, [pc, #200]	; (8006ca0 <DMA_SetConfig+0x230>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d031      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a30      	ldr	r2, [pc, #192]	; (8006ca4 <DMA_SetConfig+0x234>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02c      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2f      	ldr	r2, [pc, #188]	; (8006ca8 <DMA_SetConfig+0x238>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d027      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2d      	ldr	r2, [pc, #180]	; (8006cac <DMA_SetConfig+0x23c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d022      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2c      	ldr	r2, [pc, #176]	; (8006cb0 <DMA_SetConfig+0x240>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d01d      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <DMA_SetConfig+0x244>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d018      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a29      	ldr	r2, [pc, #164]	; (8006cb8 <DMA_SetConfig+0x248>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a27      	ldr	r2, [pc, #156]	; (8006cbc <DMA_SetConfig+0x24c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a26      	ldr	r2, [pc, #152]	; (8006cc0 <DMA_SetConfig+0x250>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a24      	ldr	r2, [pc, #144]	; (8006cc4 <DMA_SetConfig+0x254>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <DMA_SetConfig+0x1d0>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <DMA_SetConfig+0x258>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d101      	bne.n	8006c44 <DMA_SetConfig+0x1d4>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <DMA_SetConfig+0x1d6>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d059      	beq.n	8006cfe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	223f      	movs	r2, #63	; 0x3f
 8006c54:	409a      	lsls	r2, r3
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d138      	bne.n	8006cec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c8a:	e086      	b.n	8006d9a <DMA_SetConfig+0x32a>
 8006c8c:	40020010 	.word	0x40020010
 8006c90:	40020028 	.word	0x40020028
 8006c94:	40020040 	.word	0x40020040
 8006c98:	40020058 	.word	0x40020058
 8006c9c:	40020070 	.word	0x40020070
 8006ca0:	40020088 	.word	0x40020088
 8006ca4:	400200a0 	.word	0x400200a0
 8006ca8:	400200b8 	.word	0x400200b8
 8006cac:	40020410 	.word	0x40020410
 8006cb0:	40020428 	.word	0x40020428
 8006cb4:	40020440 	.word	0x40020440
 8006cb8:	40020458 	.word	0x40020458
 8006cbc:	40020470 	.word	0x40020470
 8006cc0:	40020488 	.word	0x40020488
 8006cc4:	400204a0 	.word	0x400204a0
 8006cc8:	400204b8 	.word	0x400204b8
 8006ccc:	58025408 	.word	0x58025408
 8006cd0:	5802541c 	.word	0x5802541c
 8006cd4:	58025430 	.word	0x58025430
 8006cd8:	58025444 	.word	0x58025444
 8006cdc:	58025458 	.word	0x58025458
 8006ce0:	5802546c 	.word	0x5802546c
 8006ce4:	58025480 	.word	0x58025480
 8006ce8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	60da      	str	r2, [r3, #12]
}
 8006cfc:	e04d      	b.n	8006d9a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <DMA_SetConfig+0x338>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <DMA_SetConfig+0x2de>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a27      	ldr	r2, [pc, #156]	; (8006dac <DMA_SetConfig+0x33c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <DMA_SetConfig+0x2de>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <DMA_SetConfig+0x340>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <DMA_SetConfig+0x2de>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a24      	ldr	r2, [pc, #144]	; (8006db4 <DMA_SetConfig+0x344>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <DMA_SetConfig+0x2de>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a23      	ldr	r2, [pc, #140]	; (8006db8 <DMA_SetConfig+0x348>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <DMA_SetConfig+0x2de>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a21      	ldr	r2, [pc, #132]	; (8006dbc <DMA_SetConfig+0x34c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <DMA_SetConfig+0x2de>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a20      	ldr	r2, [pc, #128]	; (8006dc0 <DMA_SetConfig+0x350>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <DMA_SetConfig+0x2de>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1e      	ldr	r2, [pc, #120]	; (8006dc4 <DMA_SetConfig+0x354>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <DMA_SetConfig+0x2e2>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <DMA_SetConfig+0x2e4>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d020      	beq.n	8006d9a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2201      	movs	r2, #1
 8006d62:	409a      	lsls	r2, r3
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2b40      	cmp	r3, #64	; 0x40
 8006d76:	d108      	bne.n	8006d8a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	60da      	str	r2, [r3, #12]
}
 8006d88:	e007      	b.n	8006d9a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	60da      	str	r2, [r3, #12]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	58025408 	.word	0x58025408
 8006dac:	5802541c 	.word	0x5802541c
 8006db0:	58025430 	.word	0x58025430
 8006db4:	58025444 	.word	0x58025444
 8006db8:	58025458 	.word	0x58025458
 8006dbc:	5802546c 	.word	0x5802546c
 8006dc0:	58025480 	.word	0x58025480
 8006dc4:	58025494 	.word	0x58025494

08006dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a42      	ldr	r2, [pc, #264]	; (8006ee0 <DMA_CalcBaseAndBitshift+0x118>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d04a      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a41      	ldr	r2, [pc, #260]	; (8006ee4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d045      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a3f      	ldr	r2, [pc, #252]	; (8006ee8 <DMA_CalcBaseAndBitshift+0x120>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d040      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a3e      	ldr	r2, [pc, #248]	; (8006eec <DMA_CalcBaseAndBitshift+0x124>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d03b      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3c      	ldr	r2, [pc, #240]	; (8006ef0 <DMA_CalcBaseAndBitshift+0x128>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d036      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a3b      	ldr	r2, [pc, #236]	; (8006ef4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d031      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a39      	ldr	r2, [pc, #228]	; (8006ef8 <DMA_CalcBaseAndBitshift+0x130>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d02c      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a38      	ldr	r2, [pc, #224]	; (8006efc <DMA_CalcBaseAndBitshift+0x134>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d027      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a36      	ldr	r2, [pc, #216]	; (8006f00 <DMA_CalcBaseAndBitshift+0x138>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d022      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a35      	ldr	r2, [pc, #212]	; (8006f04 <DMA_CalcBaseAndBitshift+0x13c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d01d      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a33      	ldr	r2, [pc, #204]	; (8006f08 <DMA_CalcBaseAndBitshift+0x140>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d018      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a32      	ldr	r2, [pc, #200]	; (8006f0c <DMA_CalcBaseAndBitshift+0x144>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d013      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a30      	ldr	r2, [pc, #192]	; (8006f10 <DMA_CalcBaseAndBitshift+0x148>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00e      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <DMA_CalcBaseAndBitshift+0x14c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d009      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a2d      	ldr	r2, [pc, #180]	; (8006f18 <DMA_CalcBaseAndBitshift+0x150>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d004      	beq.n	8006e70 <DMA_CalcBaseAndBitshift+0xa8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2c      	ldr	r2, [pc, #176]	; (8006f1c <DMA_CalcBaseAndBitshift+0x154>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d101      	bne.n	8006e74 <DMA_CalcBaseAndBitshift+0xac>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <DMA_CalcBaseAndBitshift+0xae>
 8006e74:	2300      	movs	r3, #0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d024      	beq.n	8006ec4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	3b10      	subs	r3, #16
 8006e82:	4a27      	ldr	r2, [pc, #156]	; (8006f20 <DMA_CalcBaseAndBitshift+0x158>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	091b      	lsrs	r3, r3, #4
 8006e8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	4a24      	ldr	r2, [pc, #144]	; (8006f24 <DMA_CalcBaseAndBitshift+0x15c>)
 8006e94:	5cd3      	ldrb	r3, [r2, r3]
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d908      	bls.n	8006eb4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4b1f      	ldr	r3, [pc, #124]	; (8006f28 <DMA_CalcBaseAndBitshift+0x160>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	1d1a      	adds	r2, r3, #4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	659a      	str	r2, [r3, #88]	; 0x58
 8006eb2:	e00d      	b.n	8006ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <DMA_CalcBaseAndBitshift+0x160>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ec2:	e005      	b.n	8006ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40020010 	.word	0x40020010
 8006ee4:	40020028 	.word	0x40020028
 8006ee8:	40020040 	.word	0x40020040
 8006eec:	40020058 	.word	0x40020058
 8006ef0:	40020070 	.word	0x40020070
 8006ef4:	40020088 	.word	0x40020088
 8006ef8:	400200a0 	.word	0x400200a0
 8006efc:	400200b8 	.word	0x400200b8
 8006f00:	40020410 	.word	0x40020410
 8006f04:	40020428 	.word	0x40020428
 8006f08:	40020440 	.word	0x40020440
 8006f0c:	40020458 	.word	0x40020458
 8006f10:	40020470 	.word	0x40020470
 8006f14:	40020488 	.word	0x40020488
 8006f18:	400204a0 	.word	0x400204a0
 8006f1c:	400204b8 	.word	0x400204b8
 8006f20:	aaaaaaab 	.word	0xaaaaaaab
 8006f24:	08017fe8 	.word	0x08017fe8
 8006f28:	fffffc00 	.word	0xfffffc00

08006f2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d120      	bne.n	8006f82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d858      	bhi.n	8006ffa <DMA_CheckFifoParam+0xce>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <DMA_CheckFifoParam+0x24>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f73 	.word	0x08006f73
 8006f58:	08006f61 	.word	0x08006f61
 8006f5c:	08006ffb 	.word	0x08006ffb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d048      	beq.n	8006ffe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f70:	e045      	b.n	8006ffe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f7a:	d142      	bne.n	8007002 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f80:	e03f      	b.n	8007002 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d123      	bne.n	8006fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d838      	bhi.n	8007006 <DMA_CheckFifoParam+0xda>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <DMA_CheckFifoParam+0x70>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fb3 	.word	0x08006fb3
 8006fa4:	08006fad 	.word	0x08006fad
 8006fa8:	08006fc5 	.word	0x08006fc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
        break;
 8006fb0:	e030      	b.n	8007014 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d025      	beq.n	800700a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fc2:	e022      	b.n	800700a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fcc:	d11f      	bne.n	800700e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fd2:	e01c      	b.n	800700e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d902      	bls.n	8006fe2 <DMA_CheckFifoParam+0xb6>
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d003      	beq.n	8006fe8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006fe0:	e018      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8006fe6:	e015      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00e      	beq.n	8007012 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff8:	e00b      	b.n	8007012 <DMA_CheckFifoParam+0xe6>
        break;
 8006ffa:	bf00      	nop
 8006ffc:	e00a      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
        break;
 8006ffe:	bf00      	nop
 8007000:	e008      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
        break;
 8007002:	bf00      	nop
 8007004:	e006      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
        break;
 8007006:	bf00      	nop
 8007008:	e004      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
        break;
 800700a:	bf00      	nop
 800700c:	e002      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
        break;
 800700e:	bf00      	nop
 8007010:	e000      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
    break;
 8007012:	bf00      	nop
    }
  }

  return status;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop

08007024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a38      	ldr	r2, [pc, #224]	; (8007118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d022      	beq.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a36      	ldr	r2, [pc, #216]	; (800711c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01d      	beq.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a35      	ldr	r2, [pc, #212]	; (8007120 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d018      	beq.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a33      	ldr	r2, [pc, #204]	; (8007124 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a32      	ldr	r2, [pc, #200]	; (8007128 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00e      	beq.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a30      	ldr	r2, [pc, #192]	; (800712c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d009      	beq.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a2f      	ldr	r2, [pc, #188]	; (8007130 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d004      	beq.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d101      	bne.n	8007086 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	3b08      	subs	r3, #8
 8007094:	4a28      	ldr	r2, [pc, #160]	; (8007138 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4b26      	ldr	r3, [pc, #152]	; (800713c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	461a      	mov	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a24      	ldr	r2, [pc, #144]	; (8007140 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80070b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	2201      	movs	r2, #1
 80070ba:	409a      	lsls	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80070c0:	e024      	b.n	800710c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	3b10      	subs	r3, #16
 80070ca:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d806      	bhi.n	80070ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4a1b      	ldr	r2, [pc, #108]	; (800714c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d902      	bls.n	80070ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3308      	adds	r3, #8
 80070e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a16      	ldr	r2, [pc, #88]	; (8007154 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80070fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	2201      	movs	r2, #1
 8007106:	409a      	lsls	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800710c:	bf00      	nop
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	58025408 	.word	0x58025408
 800711c:	5802541c 	.word	0x5802541c
 8007120:	58025430 	.word	0x58025430
 8007124:	58025444 	.word	0x58025444
 8007128:	58025458 	.word	0x58025458
 800712c:	5802546c 	.word	0x5802546c
 8007130:	58025480 	.word	0x58025480
 8007134:	58025494 	.word	0x58025494
 8007138:	cccccccd 	.word	0xcccccccd
 800713c:	16009600 	.word	0x16009600
 8007140:	58025880 	.word	0x58025880
 8007144:	aaaaaaab 	.word	0xaaaaaaab
 8007148:	400204b8 	.word	0x400204b8
 800714c:	4002040f 	.word	0x4002040f
 8007150:	10008200 	.word	0x10008200
 8007154:	40020880 	.word	0x40020880

08007158 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d04a      	beq.n	8007204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d847      	bhi.n	8007204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a25      	ldr	r2, [pc, #148]	; (8007210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d022      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a24      	ldr	r2, [pc, #144]	; (8007214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d01d      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a22      	ldr	r2, [pc, #136]	; (8007218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d018      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a21      	ldr	r2, [pc, #132]	; (800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d013      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00e      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1e      	ldr	r2, [pc, #120]	; (8007224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d009      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a1c      	ldr	r2, [pc, #112]	; (8007228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d004      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1b      	ldr	r2, [pc, #108]	; (800722c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d101      	bne.n	80071c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80071c8:	2300      	movs	r3, #0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4b17      	ldr	r3, [pc, #92]	; (8007230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a15      	ldr	r2, [pc, #84]	; (8007234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80071e0:	671a      	str	r2, [r3, #112]	; 0x70
 80071e2:	e009      	b.n	80071f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4b14      	ldr	r3, [pc, #80]	; (8007238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a11      	ldr	r2, [pc, #68]	; (800723c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80071f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	2201      	movs	r2, #1
 80071fe:	409a      	lsls	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	58025408 	.word	0x58025408
 8007214:	5802541c 	.word	0x5802541c
 8007218:	58025430 	.word	0x58025430
 800721c:	58025444 	.word	0x58025444
 8007220:	58025458 	.word	0x58025458
 8007224:	5802546c 	.word	0x5802546c
 8007228:	58025480 	.word	0x58025480
 800722c:	58025494 	.word	0x58025494
 8007230:	1600963f 	.word	0x1600963f
 8007234:	58025940 	.word	0x58025940
 8007238:	1000823f 	.word	0x1000823f
 800723c:	40020940 	.word	0x40020940

08007240 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b098      	sub	sp, #96	; 0x60
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007248:	4a84      	ldr	r2, [pc, #528]	; (800745c <HAL_FDCAN_Init+0x21c>)
 800724a:	f107 030c 	add.w	r3, r7, #12
 800724e:	4611      	mov	r1, r2
 8007250:	224c      	movs	r2, #76	; 0x4c
 8007252:	4618      	mov	r0, r3
 8007254:	f00f fc9c 	bl	8016b90 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e1c6      	b.n	80075f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a7e      	ldr	r2, [pc, #504]	; (8007460 <HAL_FDCAN_Init+0x220>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d106      	bne.n	800727a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fb fad6 	bl	8002840 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0210 	bic.w	r2, r2, #16
 80072a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072a4:	f7fc fa30 	bl	8003708 <HAL_GetTick>
 80072a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80072aa:	e014      	b.n	80072d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80072ac:	f7fc fa2c 	bl	8003708 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b0a      	cmp	r3, #10
 80072b8:	d90d      	bls.n	80072d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072c0:	f043 0201 	orr.w	r2, r3, #1
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2203      	movs	r2, #3
 80072ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e18c      	b.n	80075f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d0e3      	beq.n	80072ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072f4:	f7fc fa08 	bl	8003708 <HAL_GetTick>
 80072f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80072fa:	e014      	b.n	8007326 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80072fc:	f7fc fa04 	bl	8003708 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b0a      	cmp	r3, #10
 8007308:	d90d      	bls.n	8007326 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007310:	f043 0201 	orr.w	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2203      	movs	r2, #3
 800731e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e164      	b.n	80075f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0e3      	beq.n	80072fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0202 	orr.w	r2, r2, #2
 8007342:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7c1b      	ldrb	r3, [r3, #16]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d108      	bne.n	800735e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800735a:	619a      	str	r2, [r3, #24]
 800735c:	e007      	b.n	800736e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7c5b      	ldrb	r3, [r3, #17]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d108      	bne.n	8007388 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007384:	619a      	str	r2, [r3, #24]
 8007386:	e007      	b.n	8007398 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007396:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7c9b      	ldrb	r3, [r3, #18]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d108      	bne.n	80073b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073ae:	619a      	str	r2, [r3, #24]
 80073b0:	e007      	b.n	80073c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699a      	ldr	r2, [r3, #24]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80073e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0210 	bic.w	r2, r2, #16
 80073f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d108      	bne.n	8007412 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0204 	orr.w	r2, r2, #4
 800740e:	619a      	str	r2, [r3, #24]
 8007410:	e030      	b.n	8007474 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d02c      	beq.n	8007474 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d020      	beq.n	8007464 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007430:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f042 0210 	orr.w	r2, r2, #16
 8007440:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d114      	bne.n	8007474 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0220 	orr.w	r2, r2, #32
 8007458:	619a      	str	r2, [r3, #24]
 800745a:	e00b      	b.n	8007474 <HAL_FDCAN_Init+0x234>
 800745c:	08017ed4 	.word	0x08017ed4
 8007460:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0220 	orr.w	r2, r2, #32
 8007472:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	3b01      	subs	r3, #1
 800747a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	3b01      	subs	r3, #1
 8007482:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007484:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800748c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	3b01      	subs	r3, #1
 8007496:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800749c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800749e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a8:	d115      	bne.n	80074d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	3b01      	subs	r3, #1
 80074b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	3b01      	subs	r3, #1
 80074c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80074c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	3b01      	subs	r3, #1
 80074cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80074d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fc:	4413      	add	r3, r2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800750a:	f023 0107 	bic.w	r1, r3, #7
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	3360      	adds	r3, #96	; 0x60
 8007516:	443b      	add	r3, r7
 8007518:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	d011      	beq.n	8007552 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007536:	f023 0107 	bic.w	r1, r3, #7
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	3360      	adds	r3, #96	; 0x60
 8007542:	443b      	add	r3, r7
 8007544:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007556:	2b00      	cmp	r3, #0
 8007558:	d012      	beq.n	8007580 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007562:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	3360      	adds	r3, #96	; 0x60
 800756e:	443b      	add	r3, r7
 8007570:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007574:	011a      	lsls	r2, r3, #4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007590:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	3360      	adds	r3, #96	; 0x60
 800759c:	443b      	add	r3, r7
 800759e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a11      	ldr	r2, [pc, #68]	; (80075f8 <HAL_FDCAN_Init+0x3b8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d107      	bne.n	80075c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f022 0203 	bic.w	r2, r2, #3
 80075c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f80b 	bl	80075fc <FDCAN_CalcultateRamBlockAddresses>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80075ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3760      	adds	r7, #96	; 0x60
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	4000a000 	.word	0x4000a000

080075fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007608:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007612:	4ba7      	ldr	r3, [pc, #668]	; (80078b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007614:	4013      	ands	r3, r2
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	0091      	lsls	r1, r2, #2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	430b      	orrs	r3, r1
 8007620:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	041a      	lsls	r2, r3, #16
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	4413      	add	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007652:	4b97      	ldr	r3, [pc, #604]	; (80078b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007654:	4013      	ands	r3, r2
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	0091      	lsls	r1, r2, #2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	430b      	orrs	r3, r1
 8007660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007674:	041a      	lsls	r2, r3, #16
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	4413      	add	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007694:	4b86      	ldr	r3, [pc, #536]	; (80078b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007696:	4013      	ands	r3, r2
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	0091      	lsls	r1, r2, #2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6812      	ldr	r2, [r2, #0]
 80076a0:	430b      	orrs	r3, r1
 80076a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	041a      	lsls	r2, r3, #16
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80076dc:	4b74      	ldr	r3, [pc, #464]	; (80078b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076de:	4013      	ands	r3, r2
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	0091      	lsls	r1, r2, #2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	430b      	orrs	r3, r1
 80076ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fe:	041a      	lsls	r2, r3, #16
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007712:	fb02 f303 	mul.w	r3, r2, r3
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007724:	4b62      	ldr	r3, [pc, #392]	; (80078b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007726:	4013      	ands	r3, r2
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	0091      	lsls	r1, r2, #2
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	6812      	ldr	r2, [r2, #0]
 8007730:	430b      	orrs	r3, r1
 8007732:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	4413      	add	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007750:	4b57      	ldr	r3, [pc, #348]	; (80078b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007752:	4013      	ands	r3, r2
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	0091      	lsls	r1, r2, #2
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	430b      	orrs	r3, r1
 800775e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800776a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007772:	041a      	lsls	r2, r3, #16
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	4413      	add	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007792:	4b47      	ldr	r3, [pc, #284]	; (80078b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007794:	4013      	ands	r3, r2
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	0091      	lsls	r1, r2, #2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6812      	ldr	r2, [r2, #0]
 800779e:	430b      	orrs	r3, r1
 80077a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80077ac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b4:	041a      	lsls	r2, r3, #16
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80077c8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d0:	061a      	lsls	r2, r3, #24
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e0:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80077e2:	4413      	add	r3, r2
 80077e4:	009a      	lsls	r2, r3, #2
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	441a      	add	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007846:	fb01 f303 	mul.w	r3, r1, r3
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	441a      	add	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	441a      	add	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007876:	fb01 f303 	mul.w	r3, r1, r3
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a6:	4a04      	ldr	r2, [pc, #16]	; (80078b8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d915      	bls.n	80078d8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80078ac:	e006      	b.n	80078bc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80078ae:	bf00      	nop
 80078b0:	ffff0003 	.word	0xffff0003
 80078b4:	10002b00 	.word	0x10002b00
 80078b8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078c2:	f043 0220 	orr.w	r2, r3, #32
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2203      	movs	r2, #3
 80078d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e010      	b.n	80078fa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	e005      	b.n	80078ec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3304      	adds	r3, #4
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d3f3      	bcc.n	80078e0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop

08007908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007908:	b480      	push	{r7}
 800790a:	b089      	sub	sp, #36	; 0x24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007916:	4b86      	ldr	r3, [pc, #536]	; (8007b30 <HAL_GPIO_Init+0x228>)
 8007918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800791a:	e18c      	b.n	8007c36 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	2101      	movs	r1, #1
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	fa01 f303 	lsl.w	r3, r1, r3
 8007928:	4013      	ands	r3, r2
 800792a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 817e 	beq.w	8007c30 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	2b01      	cmp	r3, #1
 800793e:	d005      	beq.n	800794c <HAL_GPIO_Init+0x44>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d130      	bne.n	80079ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	2203      	movs	r2, #3
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	43db      	mvns	r3, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4013      	ands	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4313      	orrs	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007982:	2201      	movs	r2, #1
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	43db      	mvns	r3, r3
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	4013      	ands	r3, r2
 8007990:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f003 0201 	and.w	r2, r3, #1
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d017      	beq.n	80079ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	2203      	movs	r2, #3
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43db      	mvns	r3, r3
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	689a      	ldr	r2, [r3, #8]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d123      	bne.n	8007a3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	08da      	lsrs	r2, r3, #3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3208      	adds	r2, #8
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	220f      	movs	r2, #15
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4013      	ands	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	08da      	lsrs	r2, r3, #3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3208      	adds	r2, #8
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	2203      	movs	r2, #3
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	4013      	ands	r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 0203 	and.w	r2, r3, #3
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80d8 	beq.w	8007c30 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a80:	4b2c      	ldr	r3, [pc, #176]	; (8007b34 <HAL_GPIO_Init+0x22c>)
 8007a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a86:	4a2b      	ldr	r2, [pc, #172]	; (8007b34 <HAL_GPIO_Init+0x22c>)
 8007a88:	f043 0302 	orr.w	r3, r3, #2
 8007a8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007a90:	4b28      	ldr	r3, [pc, #160]	; (8007b34 <HAL_GPIO_Init+0x22c>)
 8007a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a9e:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <HAL_GPIO_Init+0x230>)
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	089b      	lsrs	r3, r3, #2
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	220f      	movs	r2, #15
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1d      	ldr	r2, [pc, #116]	; (8007b3c <HAL_GPIO_Init+0x234>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d04a      	beq.n	8007b60 <HAL_GPIO_Init+0x258>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a1c      	ldr	r2, [pc, #112]	; (8007b40 <HAL_GPIO_Init+0x238>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d02b      	beq.n	8007b2a <HAL_GPIO_Init+0x222>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a1b      	ldr	r2, [pc, #108]	; (8007b44 <HAL_GPIO_Init+0x23c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d025      	beq.n	8007b26 <HAL_GPIO_Init+0x21e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a1a      	ldr	r2, [pc, #104]	; (8007b48 <HAL_GPIO_Init+0x240>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d01f      	beq.n	8007b22 <HAL_GPIO_Init+0x21a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <HAL_GPIO_Init+0x244>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d019      	beq.n	8007b1e <HAL_GPIO_Init+0x216>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <HAL_GPIO_Init+0x248>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <HAL_GPIO_Init+0x212>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <HAL_GPIO_Init+0x24c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00d      	beq.n	8007b16 <HAL_GPIO_Init+0x20e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a16      	ldr	r2, [pc, #88]	; (8007b58 <HAL_GPIO_Init+0x250>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <HAL_GPIO_Init+0x20a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a15      	ldr	r2, [pc, #84]	; (8007b5c <HAL_GPIO_Init+0x254>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d101      	bne.n	8007b0e <HAL_GPIO_Init+0x206>
 8007b0a:	2309      	movs	r3, #9
 8007b0c:	e029      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e027      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b12:	2307      	movs	r3, #7
 8007b14:	e025      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b16:	2306      	movs	r3, #6
 8007b18:	e023      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b1a:	2305      	movs	r3, #5
 8007b1c:	e021      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b1e:	2304      	movs	r3, #4
 8007b20:	e01f      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b22:	2303      	movs	r3, #3
 8007b24:	e01d      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e01b      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e019      	b.n	8007b62 <HAL_GPIO_Init+0x25a>
 8007b2e:	bf00      	nop
 8007b30:	58000080 	.word	0x58000080
 8007b34:	58024400 	.word	0x58024400
 8007b38:	58000400 	.word	0x58000400
 8007b3c:	58020000 	.word	0x58020000
 8007b40:	58020400 	.word	0x58020400
 8007b44:	58020800 	.word	0x58020800
 8007b48:	58020c00 	.word	0x58020c00
 8007b4c:	58021000 	.word	0x58021000
 8007b50:	58021400 	.word	0x58021400
 8007b54:	58021800 	.word	0x58021800
 8007b58:	58021c00 	.word	0x58021c00
 8007b5c:	58022400 	.word	0x58022400
 8007b60:	2300      	movs	r3, #0
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	f002 0203 	and.w	r2, r2, #3
 8007b68:	0092      	lsls	r2, r2, #2
 8007b6a:	4093      	lsls	r3, r2
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b72:	4938      	ldr	r1, [pc, #224]	; (8007c54 <HAL_GPIO_Init+0x34c>)
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	089b      	lsrs	r3, r3, #2
 8007b78:	3302      	adds	r3, #2
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	43db      	mvns	r3, r3
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	3301      	adds	r3, #1
 8007c34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f47f ae6b 	bne.w	800791c <HAL_GPIO_Init+0x14>
  }
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	3724      	adds	r7, #36	; 0x24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	58000400 	.word	0x58000400

08007c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	887b      	ldrh	r3, [r7, #2]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
 8007c74:	e001      	b.n	8007c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	807b      	strh	r3, [r7, #2]
 8007c94:	4613      	mov	r3, r2
 8007c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c98:	787b      	ldrb	r3, [r7, #1]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c9e:	887a      	ldrh	r2, [r7, #2]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ca4:	e003      	b.n	8007cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ca6:	887b      	ldrh	r3, [r7, #2]
 8007ca8:	041a      	lsls	r2, r3, #16
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	619a      	str	r2, [r3, #24]
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e07f      	b.n	8007dce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fa fe14 	bl	8002910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2224      	movs	r2, #36	; 0x24
 8007cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d107      	bne.n	8007d36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d32:	609a      	str	r2, [r3, #8]
 8007d34:	e006      	b.n	8007d44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d104      	bne.n	8007d56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6859      	ldr	r1, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <HAL_I2C_Init+0x11c>)
 8007d62:	430b      	orrs	r3, r1
 8007d64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69d9      	ldr	r1, [r3, #28]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1a      	ldr	r2, [r3, #32]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0201 	orr.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	02008000 	.word	0x02008000

08007ddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d138      	bne.n	8007e64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e032      	b.n	8007e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2224      	movs	r2, #36	; 0x24
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0201 	bic.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6819      	ldr	r1, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0201 	orr.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	e000      	b.n	8007e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
  }
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d139      	bne.n	8007efc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e033      	b.n	8007efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2224      	movs	r2, #36	; 0x24
 8007ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0201 	bic.w	r2, r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ec4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e000      	b.n	8007efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0c:	b08f      	sub	sp, #60	; 0x3c
 8007f0e:	af0a      	add	r7, sp, #40	; 0x28
 8007f10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e116      	b.n	800814a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f00e faf4 	bl	8016524 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f00a fc9f 	bl	801289e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	603b      	str	r3, [r7, #0]
 8007f66:	687e      	ldr	r6, [r7, #4]
 8007f68:	466d      	mov	r5, sp
 8007f6a:	f106 0410 	add.w	r4, r6, #16
 8007f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f7e:	1d33      	adds	r3, r6, #4
 8007f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f82:	6838      	ldr	r0, [r7, #0]
 8007f84:	f00a fb6a 	bl	801265c <USB_CoreInit>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e0d7      	b.n	800814a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f00a fc8d 	bl	80128c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
 8007faa:	e04a      	b.n	8008042 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007fac:	7bfa      	ldrb	r2, [r7, #15]
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	333d      	adds	r3, #61	; 0x3d
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007fc0:	7bfa      	ldrb	r2, [r7, #15]
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	333c      	adds	r3, #60	; 0x3c
 8007fd0:	7bfa      	ldrb	r2, [r7, #15]
 8007fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007fd4:	7bfa      	ldrb	r2, [r7, #15]
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	b298      	uxth	r0, r3
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3356      	adds	r3, #86	; 0x56
 8007fe8:	4602      	mov	r2, r0
 8007fea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007fec:	7bfa      	ldrb	r2, [r7, #15]
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	3340      	adds	r3, #64	; 0x40
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008000:	7bfa      	ldrb	r2, [r7, #15]
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4613      	mov	r3, r2
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	440b      	add	r3, r1
 800800e:	3344      	adds	r3, #68	; 0x44
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008014:	7bfa      	ldrb	r2, [r7, #15]
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	3348      	adds	r3, #72	; 0x48
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008028:	7bfa      	ldrb	r2, [r7, #15]
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	4613      	mov	r3, r2
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	334c      	adds	r3, #76	; 0x4c
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	3301      	adds	r3, #1
 8008040:	73fb      	strb	r3, [r7, #15]
 8008042:	7bfa      	ldrb	r2, [r7, #15]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	429a      	cmp	r2, r3
 800804a:	d3af      	bcc.n	8007fac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
 8008050:	e044      	b.n	80080dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008052:	7bfa      	ldrb	r2, [r7, #15]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008068:	7bfa      	ldrb	r2, [r7, #15]
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	4613      	mov	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800807a:	7bfa      	ldrb	r2, [r7, #15]
 800807c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800807e:	7bfa      	ldrb	r2, [r7, #15]
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008094:	7bfa      	ldrb	r2, [r7, #15]
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	4613      	mov	r3, r2
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80080aa:	7bfa      	ldrb	r2, [r7, #15]
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	4613      	mov	r3, r2
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80080c0:	7bfa      	ldrb	r2, [r7, #15]
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	3301      	adds	r3, #1
 80080da:	73fb      	strb	r3, [r7, #15]
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d3b5      	bcc.n	8008052 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	687e      	ldr	r6, [r7, #4]
 80080ee:	466d      	mov	r5, sp
 80080f0:	f106 0410 	add.w	r4, r6, #16
 80080f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008100:	e885 0003 	stmia.w	r5, {r0, r1}
 8008104:	1d33      	adds	r3, r6, #4
 8008106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008108:	6838      	ldr	r0, [r7, #0]
 800810a:	f00a fc25 	bl	8012958 <USB_DevInit>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e014      	b.n	800814a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	2b01      	cmp	r3, #1
 8008136:	d102      	bne.n	800813e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f96f 	bl	800941c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f00b fc67 	bl	8013a16 <USB_DevDisconnect>

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008152 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_PCD_Start+0x1c>
 800816a:	2302      	movs	r3, #2
 800816c:	e022      	b.n	80081b4 <HAL_PCD_Start+0x62>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008186:	2b01      	cmp	r3, #1
 8008188:	d105      	bne.n	8008196 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f00a fb6e 	bl	801287c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f00b fc15 	bl	80139d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80081bc:	b590      	push	{r4, r7, lr}
 80081be:	b08d      	sub	sp, #52	; 0x34
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f00b fcd3 	bl	8013b7e <USB_GetMode>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f040 84b7 	bne.w	8008b4e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f00b fc37 	bl	8013a58 <USB_ReadInterrupts>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 84ad 	beq.w	8008b4c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f00b fc24 	bl	8013a58 <USB_ReadInterrupts>
 8008210:	4603      	mov	r3, r0
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b02      	cmp	r3, #2
 8008218:	d107      	bne.n	800822a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695a      	ldr	r2, [r3, #20]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f002 0202 	and.w	r2, r2, #2
 8008228:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f00b fc12 	bl	8013a58 <USB_ReadInterrupts>
 8008234:	4603      	mov	r3, r0
 8008236:	f003 0310 	and.w	r3, r3, #16
 800823a:	2b10      	cmp	r3, #16
 800823c:	d161      	bne.n	8008302 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	699a      	ldr	r2, [r3, #24]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0210 	bic.w	r2, r2, #16
 800824c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	f003 020f 	and.w	r2, r3, #15
 800825a:	4613      	mov	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	4413      	add	r3, r2
 800826a:	3304      	adds	r3, #4
 800826c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	0c5b      	lsrs	r3, r3, #17
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	2b02      	cmp	r3, #2
 8008278:	d124      	bne.n	80082c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008280:	4013      	ands	r3, r2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d035      	beq.n	80082f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	091b      	lsrs	r3, r3, #4
 800828e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008294:	b29b      	uxth	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	6a38      	ldr	r0, [r7, #32]
 800829a:	f00b fa49 	bl	8013730 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	091b      	lsrs	r3, r3, #4
 80082a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082aa:	441a      	add	r2, r3
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	695a      	ldr	r2, [r3, #20]
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082bc:	441a      	add	r2, r3
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	615a      	str	r2, [r3, #20]
 80082c2:	e016      	b.n	80082f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	0c5b      	lsrs	r3, r3, #17
 80082c8:	f003 030f 	and.w	r3, r3, #15
 80082cc:	2b06      	cmp	r3, #6
 80082ce:	d110      	bne.n	80082f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082d6:	2208      	movs	r2, #8
 80082d8:	4619      	mov	r1, r3
 80082da:	6a38      	ldr	r0, [r7, #32]
 80082dc:	f00b fa28 	bl	8013730 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	695a      	ldr	r2, [r3, #20]
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	091b      	lsrs	r3, r3, #4
 80082e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082ec:	441a      	add	r2, r3
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f042 0210 	orr.w	r2, r2, #16
 8008300:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f00b fba6 	bl	8013a58 <USB_ReadInterrupts>
 800830c:	4603      	mov	r3, r0
 800830e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008312:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008316:	f040 80a7 	bne.w	8008468 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f00b fbab 	bl	8013a7e <USB_ReadDevAllOutEpInterrupt>
 8008328:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800832a:	e099      	b.n	8008460 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 808e 	beq.w	8008454 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	4611      	mov	r1, r2
 8008342:	4618      	mov	r0, r3
 8008344:	f00b fbcf 	bl	8013ae6 <USB_ReadDevOutEPInterrupt>
 8008348:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00c      	beq.n	800836e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008360:	461a      	mov	r2, r3
 8008362:	2301      	movs	r3, #1
 8008364:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fed1 	bl	8009110 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00c      	beq.n	8008392 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008384:	461a      	mov	r2, r3
 8008386:	2308      	movs	r3, #8
 8008388:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800838a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 ffa7 	bl	80092e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	461a      	mov	r2, r3
 80083aa:	2310      	movs	r3, #16
 80083ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d030      	beq.n	800841a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	2b80      	cmp	r3, #128	; 0x80
 80083c2:	d109      	bne.n	80083d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80083d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083da:	4613      	mov	r3, r2
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4413      	add	r3, r2
 80083ea:	3304      	adds	r3, #4
 80083ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	78db      	ldrb	r3, [r3, #3]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d108      	bne.n	8008408 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2200      	movs	r2, #0
 80083fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f00e f986 	bl	8016714 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008414:	461a      	mov	r2, r3
 8008416:	2302      	movs	r3, #2
 8008418:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008430:	461a      	mov	r2, r3
 8008432:	2320      	movs	r3, #32
 8008434:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d009      	beq.n	8008454 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844c:	461a      	mov	r2, r3
 800844e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008452:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	3301      	adds	r3, #1
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	f47f af62 	bne.w	800832c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f00b faf3 	bl	8013a58 <USB_ReadInterrupts>
 8008472:	4603      	mov	r3, r0
 8008474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800847c:	f040 80db 	bne.w	8008636 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f00b fb14 	bl	8013ab2 <USB_ReadDevAllInEpInterrupt>
 800848a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008490:	e0cd      	b.n	800862e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 80c2 	beq.w	8008622 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f00b fb3a 	bl	8013b22 <USB_ReadDevInEPInterrupt>
 80084ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d057      	beq.n	800856a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	2201      	movs	r2, #1
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	43db      	mvns	r3, r3
 80084d4:	69f9      	ldr	r1, [r7, #28]
 80084d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084da:	4013      	ands	r3, r2
 80084dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	461a      	mov	r2, r3
 80084ec:	2301      	movs	r3, #1
 80084ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d132      	bne.n	800855e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	3348      	adds	r3, #72	; 0x48
 8008508:	6819      	ldr	r1, [r3, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850e:	4613      	mov	r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4403      	add	r3, r0
 8008518:	3344      	adds	r3, #68	; 0x44
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4419      	add	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008522:	4613      	mov	r3, r2
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4403      	add	r3, r0
 800852c:	3348      	adds	r3, #72	; 0x48
 800852e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d113      	bne.n	800855e <HAL_PCD_IRQHandler+0x3a2>
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	4613      	mov	r3, r2
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	334c      	adds	r3, #76	; 0x4c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d108      	bne.n	800855e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008556:	461a      	mov	r2, r3
 8008558:	2101      	movs	r1, #1
 800855a:	f00b fb43 	bl	8013be4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	b2db      	uxtb	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f00e f850 	bl	801660a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008580:	461a      	mov	r2, r3
 8008582:	2308      	movs	r3, #8
 8008584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	461a      	mov	r2, r3
 800859e:	2310      	movs	r3, #16
 80085a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b8:	461a      	mov	r2, r3
 80085ba:	2340      	movs	r3, #64	; 0x40
 80085bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d023      	beq.n	8008610 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80085c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ca:	6a38      	ldr	r0, [r7, #32]
 80085cc:	f00a fb22 	bl	8012c14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80085d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d2:	4613      	mov	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	3338      	adds	r3, #56	; 0x38
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	4413      	add	r3, r2
 80085e0:	3304      	adds	r3, #4
 80085e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	78db      	ldrb	r3, [r3, #3]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d108      	bne.n	80085fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2200      	movs	r2, #0
 80085f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f00e f89d 	bl	8016738 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	461a      	mov	r2, r3
 800860c:	2302      	movs	r3, #2
 800860e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800861a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fcea 	bl	8008ff6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	3301      	adds	r3, #1
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	2b00      	cmp	r3, #0
 8008632:	f47f af2e 	bne.w	8008492 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f00b fa0c 	bl	8013a58 <USB_ReadInterrupts>
 8008640:	4603      	mov	r3, r0
 8008642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800864a:	d122      	bne.n	8008692 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800865a:	f023 0301 	bic.w	r3, r3, #1
 800865e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008666:	2b01      	cmp	r3, #1
 8008668:	d108      	bne.n	800867c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008672:	2100      	movs	r1, #0
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fef5 	bl	8009464 <HAL_PCDEx_LPM_Callback>
 800867a:	e002      	b.n	8008682 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f00e f83b 	bl	80166f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695a      	ldr	r2, [r3, #20]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f00b f9de 	bl	8013a58 <USB_ReadInterrupts>
 800869c:	4603      	mov	r3, r0
 800869e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a6:	d112      	bne.n	80086ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d102      	bne.n	80086be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f00d fff7 	bl	80166ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	695a      	ldr	r2, [r3, #20]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80086cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f00b f9c0 	bl	8013a58 <USB_ReadInterrupts>
 80086d8:	4603      	mov	r3, r0
 80086da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086e2:	d121      	bne.n	8008728 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695a      	ldr	r2, [r3, #20]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80086f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d111      	bne.n	8008722 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870c:	089b      	lsrs	r3, r3, #2
 800870e:	f003 020f 	and.w	r2, r3, #15
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008718:	2101      	movs	r1, #1
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fea2 	bl	8009464 <HAL_PCDEx_LPM_Callback>
 8008720:	e002      	b.n	8008728 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f00d ffc2 	bl	80166ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f00b f993 	bl	8013a58 <USB_ReadInterrupts>
 8008732:	4603      	mov	r3, r0
 8008734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873c:	f040 80b7 	bne.w	80088ae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800874e:	f023 0301 	bic.w	r3, r3, #1
 8008752:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2110      	movs	r1, #16
 800875a:	4618      	mov	r0, r3
 800875c:	f00a fa5a 	bl	8012c14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008760:	2300      	movs	r3, #0
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008764:	e046      	b.n	80087f4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008772:	461a      	mov	r2, r3
 8008774:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008778:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008798:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	461a      	mov	r2, r3
 80087a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80087ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	3301      	adds	r3, #1
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d3b3      	bcc.n	8008766 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800880c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008810:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	2b00      	cmp	r3, #0
 8008818:	d016      	beq.n	8008848 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800882a:	f043 030b 	orr.w	r3, r3, #11
 800882e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883a:	69fa      	ldr	r2, [r7, #28]
 800883c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008840:	f043 030b 	orr.w	r3, r3, #11
 8008844:	6453      	str	r3, [r2, #68]	; 0x44
 8008846:	e015      	b.n	8008874 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	4619      	mov	r1, r3
 8008858:	f242 032b 	movw	r3, #8235	; 0x202b
 800885c:	4313      	orrs	r3, r2
 800885e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	69fa      	ldr	r2, [r7, #28]
 800886a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800886e:	f043 030b 	orr.w	r3, r3, #11
 8008872:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	69fa      	ldr	r2, [r7, #28]
 800887e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008882:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008886:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008898:	461a      	mov	r2, r3
 800889a:	f00b f9a3 	bl	8013be4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695a      	ldr	r2, [r3, #20]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80088ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f00b f8d0 	bl	8013a58 <USB_ReadInterrupts>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c2:	d124      	bne.n	800890e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f00b f967 	bl	8013b9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f00a fa1b 	bl	8012d0e <USB_GetDevSpeed>
 80088d8:	4603      	mov	r3, r0
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681c      	ldr	r4, [r3, #0]
 80088e4:	f001 fd88 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 80088e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	4620      	mov	r0, r4
 80088f4:	f009 ff20 	bl	8012738 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f00d feae 	bl	801665a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695a      	ldr	r2, [r3, #20]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800890c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f00b f8a0 	bl	8013a58 <USB_ReadInterrupts>
 8008918:	4603      	mov	r3, r0
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b08      	cmp	r3, #8
 8008920:	d10a      	bne.n	8008938 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f00d fe8b 	bl	801663e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f002 0208 	and.w	r2, r2, #8
 8008936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f00b f88b 	bl	8013a58 <USB_ReadInterrupts>
 8008942:	4603      	mov	r3, r0
 8008944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008948:	2b80      	cmp	r3, #128	; 0x80
 800894a:	d122      	bne.n	8008992 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008958:	2301      	movs	r3, #1
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
 800895c:	e014      	b.n	8008988 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	4613      	mov	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d105      	bne.n	8008982 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fb09 	bl	8008f94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	3301      	adds	r3, #1
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898e:	429a      	cmp	r2, r3
 8008990:	d3e5      	bcc.n	800895e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f00b f85e 	bl	8013a58 <USB_ReadInterrupts>
 800899c:	4603      	mov	r3, r0
 800899e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a6:	d13b      	bne.n	8008a20 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089a8:	2301      	movs	r3, #1
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24
 80089ac:	e02b      	b.n	8008a06 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	4613      	mov	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	3340      	adds	r3, #64	; 0x40
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d115      	bne.n	8008a00 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80089d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da12      	bge.n	8008a00 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089de:	4613      	mov	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	333f      	adds	r3, #63	; 0x3f
 80089ea:	2201      	movs	r2, #1
 80089ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 faca 	bl	8008f94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	3301      	adds	r3, #1
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d3ce      	bcc.n	80089ae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695a      	ldr	r2, [r3, #20]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f00b f817 	bl	8013a58 <USB_ReadInterrupts>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a34:	d155      	bne.n	8008ae2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a36:	2301      	movs	r3, #1
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3a:	e045      	b.n	8008ac8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a50:	4613      	mov	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d12e      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008a64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	da2b      	bge.n	8008ac2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008a76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d121      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008a90:	2201      	movs	r2, #1
 8008a92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008abe:	6053      	str	r3, [r2, #4]
            break;
 8008ac0:	e007      	b.n	8008ad2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d3b4      	bcc.n	8008a3c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f00a ffb6 	bl	8013a58 <USB_ReadInterrupts>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af6:	d10a      	bne.n	8008b0e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f00d fe2f 	bl	801675c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f00a ffa0 	bl	8013a58 <USB_ReadInterrupts>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d115      	bne.n	8008b4e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f00d fe1f 	bl	8016778 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6859      	ldr	r1, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	e000      	b.n	8008b4e <HAL_PCD_IRQHandler+0x992>
      return;
 8008b4c:	bf00      	nop
    }
  }
}
 8008b4e:	3734      	adds	r7, #52	; 0x34
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}

08008b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <HAL_PCD_SetAddress+0x1a>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e013      	b.n	8008b96 <HAL_PCD_SetAddress+0x42>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f00a fefe 	bl	8013988 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	461a      	mov	r2, r3
 8008bac:	4603      	mov	r3, r0
 8008bae:	70fb      	strb	r3, [r7, #3]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	803b      	strh	r3, [r7, #0]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da0f      	bge.n	8008be4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	f003 020f 	and.w	r2, r3, #15
 8008bca:	4613      	mov	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	3338      	adds	r3, #56	; 0x38
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3304      	adds	r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	705a      	strb	r2, [r3, #1]
 8008be2:	e00f      	b.n	8008c04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008c10:	883a      	ldrh	r2, [r7, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	78ba      	ldrb	r2, [r7, #2]
 8008c1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008c2e:	78bb      	ldrb	r3, [r7, #2]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d102      	bne.n	8008c3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_PCD_EP_Open+0xaa>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e00e      	b.n	8008c66 <HAL_PCD_EP_Open+0xc8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f00a f87e 	bl	8012d58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008c64:	7afb      	ldrb	r3, [r7, #11]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da0f      	bge.n	8008ca2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	f003 020f 	and.w	r2, r3, #15
 8008c88:	4613      	mov	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3338      	adds	r3, #56	; 0x38
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	705a      	strb	r2, [r3, #1]
 8008ca0:	e00f      	b.n	8008cc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	f003 020f 	and.w	r2, r3, #15
 8008ca8:	4613      	mov	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_PCD_EP_Close+0x6e>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e00e      	b.n	8008cfa <HAL_PCD_EP_Close+0x8c>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f00a f8bc 	bl	8012e68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	3304      	adds	r3, #4
 8008d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2200      	movs	r2, #0
 8008d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d102      	bne.n	8008d5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6979      	ldr	r1, [r7, #20]
 8008d6c:	f00a f958 	bl	8013020 <USB_EPStartXfer>

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008d9c:	681b      	ldr	r3, [r3, #0]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	460b      	mov	r3, r1
 8008db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dba:	7afb      	ldrb	r3, [r7, #11]
 8008dbc:	f003 020f 	and.w	r2, r3, #15
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	3338      	adds	r3, #56	; 0x38
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	3304      	adds	r3, #4
 8008dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	2200      	movs	r2, #0
 8008de2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2201      	movs	r2, #1
 8008de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d102      	bne.n	8008e04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6979      	ldr	r1, [r7, #20]
 8008e12:	f00a f905 	bl	8013020 <USB_EPStartXfer>

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	f003 020f 	and.w	r2, r3, #15
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d901      	bls.n	8008e3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e050      	b.n	8008ee0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	da0f      	bge.n	8008e66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	f003 020f 	and.w	r2, r3, #15
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	3338      	adds	r3, #56	; 0x38
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	4413      	add	r3, r2
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	705a      	strb	r2, [r3, #1]
 8008e64:	e00d      	b.n	8008e82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	4413      	add	r3, r2
 8008e78:	3304      	adds	r3, #4
 8008e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <HAL_PCD_EP_SetStall+0x82>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e01e      	b.n	8008ee0 <HAL_PCD_EP_SetStall+0xc0>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f00a fc95 	bl	80137e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	b2d9      	uxtb	r1, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f00a fe87 	bl	8013be4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	f003 020f 	and.w	r2, r3, #15
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d901      	bls.n	8008f06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e042      	b.n	8008f8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da0f      	bge.n	8008f2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	f003 020f 	and.w	r2, r3, #15
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	3338      	adds	r3, #56	; 0x38
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	4413      	add	r3, r2
 8008f22:	3304      	adds	r3, #4
 8008f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	705a      	strb	r2, [r3, #1]
 8008f2c:	e00f      	b.n	8008f4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	f003 020f 	and.w	r2, r3, #15
 8008f34:	4613      	mov	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	4413      	add	r3, r2
 8008f44:	3304      	adds	r3, #4
 8008f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <HAL_PCD_EP_ClrStall+0x86>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e00e      	b.n	8008f8c <HAL_PCD_EP_ClrStall+0xa4>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f00a fc9d 	bl	80138bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da0c      	bge.n	8008fc2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	4613      	mov	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	3338      	adds	r3, #56	; 0x38
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	e00c      	b.n	8008fdc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	4613      	mov	r3, r2
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3304      	adds	r3, #4
 8008fda:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f00a fabc 	bl	8013560 <USB_EPStopXfer>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008fec:	7afb      	ldrb	r3, [r7, #11]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b08a      	sub	sp, #40	; 0x28
 8008ffa:	af02      	add	r7, sp, #8
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	4613      	mov	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	3338      	adds	r3, #56	; 0x38
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	4413      	add	r3, r2
 800901a:	3304      	adds	r3, #4
 800901c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	429a      	cmp	r2, r3
 8009028:	d901      	bls.n	800902e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e06c      	b.n	8009108 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	429a      	cmp	r2, r3
 8009042:	d902      	bls.n	800904a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	3303      	adds	r3, #3
 800904e:	089b      	lsrs	r3, r3, #2
 8009050:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009052:	e02b      	b.n	80090ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	691a      	ldr	r2, [r3, #16]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	429a      	cmp	r2, r3
 8009068:	d902      	bls.n	8009070 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	3303      	adds	r3, #3
 8009074:	089b      	lsrs	r3, r3, #2
 8009076:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	68d9      	ldr	r1, [r3, #12]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	b2da      	uxtb	r2, r3
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009088:	b2db      	uxtb	r3, r3
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4603      	mov	r3, r0
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	f00a fb10 	bl	80136b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	441a      	add	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	695a      	ldr	r2, [r3, #20]
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	441a      	add	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d809      	bhi.n	80090d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	695a      	ldr	r2, [r3, #20]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d203      	bcs.n	80090d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1be      	bne.n	8009054 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	691a      	ldr	r2, [r3, #16]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d811      	bhi.n	8009106 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	2201      	movs	r2, #1
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	43db      	mvns	r3, r3
 80090fc:	6939      	ldr	r1, [r7, #16]
 80090fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009102:	4013      	ands	r3, r2
 8009104:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	333c      	adds	r3, #60	; 0x3c
 8009128:	3304      	adds	r3, #4
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	4413      	add	r3, r2
 8009136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d17b      	bne.n	800923e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f003 0308 	and.w	r3, r3, #8
 800914c:	2b00      	cmp	r3, #0
 800914e:	d015      	beq.n	800917c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	4a61      	ldr	r2, [pc, #388]	; (80092d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009154:	4293      	cmp	r3, r2
 8009156:	f240 80b9 	bls.w	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 80b3 	beq.w	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	4413      	add	r3, r2
 800916e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009172:	461a      	mov	r2, r3
 8009174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009178:	6093      	str	r3, [r2, #8]
 800917a:	e0a7      	b.n	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009192:	461a      	mov	r2, r3
 8009194:	2320      	movs	r3, #32
 8009196:	6093      	str	r3, [r2, #8]
 8009198:	e098      	b.n	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f040 8093 	bne.w	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4a4b      	ldr	r2, [pc, #300]	; (80092d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d90f      	bls.n	80091ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00a      	beq.n	80091ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c4:	461a      	mov	r2, r3
 80091c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ca:	6093      	str	r3, [r2, #8]
 80091cc:	e07e      	b.n	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	4613      	mov	r3, r2
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	4413      	add	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	4413      	add	r3, r2
 80091e0:	3304      	adds	r3, #4
 80091e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a1a      	ldr	r2, [r3, #32]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	0159      	lsls	r1, r3, #5
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	440b      	add	r3, r1
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091fa:	1ad2      	subs	r2, r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d114      	bne.n	8009230 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009218:	461a      	mov	r2, r3
 800921a:	2101      	movs	r1, #1
 800921c:	f00a fce2 	bl	8013be4 <USB_EP0_OutStart>
 8009220:	e006      	b.n	8009230 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	441a      	add	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f00d f9cc 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
 800923c:	e046      	b.n	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	4a26      	ldr	r2, [pc, #152]	; (80092dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d124      	bne.n	8009290 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	461a      	mov	r2, r3
 800925e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009262:	6093      	str	r3, [r2, #8]
 8009264:	e032      	b.n	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d008      	beq.n	8009282 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927c:	461a      	mov	r2, r3
 800927e:	2320      	movs	r3, #32
 8009280:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f00d f9a3 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
 800928e:	e01d      	b.n	80092cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d114      	bne.n	80092c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	4613      	mov	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d108      	bne.n	80092c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092b8:	461a      	mov	r2, r3
 80092ba:	2100      	movs	r1, #0
 80092bc:	f00a fc92 	bl	8013be4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f00d f984 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	4f54300a 	.word	0x4f54300a
 80092dc:	4f54310a 	.word	0x4f54310a

080092e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	333c      	adds	r3, #60	; 0x3c
 80092f8:	3304      	adds	r3, #4
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4a15      	ldr	r2, [pc, #84]	; (8009368 <PCD_EP_OutSetupPacket_int+0x88>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d90e      	bls.n	8009334 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	461a      	mov	r2, r3
 800932e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009332:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f00d f93b 	bl	80165b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <PCD_EP_OutSetupPacket_int+0x88>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d90c      	bls.n	800935c <PCD_EP_OutSetupPacket_int+0x7c>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d108      	bne.n	800935c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009354:	461a      	mov	r2, r3
 8009356:	2101      	movs	r1, #1
 8009358:	f00a fc44 	bl	8013be4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	4f54300a 	.word	0x4f54300a

0800936c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
 8009378:	4613      	mov	r3, r2
 800937a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d107      	bne.n	800939a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800938a:	883b      	ldrh	r3, [r7, #0]
 800938c:	0419      	lsls	r1, r3, #16
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	430a      	orrs	r2, r1
 8009396:	629a      	str	r2, [r3, #40]	; 0x28
 8009398:	e028      	b.n	80093ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a0:	0c1b      	lsrs	r3, r3, #16
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
 80093ac:	e00d      	b.n	80093ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	3340      	adds	r3, #64	; 0x40
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	0c1b      	lsrs	r3, r3, #16
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	3301      	adds	r3, #1
 80093c8:	73fb      	strb	r3, [r7, #15]
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d3ec      	bcc.n	80093ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093d4:	883b      	ldrh	r3, [r7, #0]
 80093d6:	0418      	lsls	r0, r3, #16
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6819      	ldr	r1, [r3, #0]
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	3b01      	subs	r3, #1
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	4302      	orrs	r2, r0
 80093e4:	3340      	adds	r3, #64	; 0x40
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	887a      	ldrh	r2, [r7, #2]
 800940c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <HAL_PCDEx_ActivateLPM+0x44>)
 800944c:	4313      	orrs	r3, r2
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	10000003 	.word	0x10000003

08009464 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009484:	4b19      	ldr	r3, [pc, #100]	; (80094ec <HAL_PWREx_ConfigSupply+0x70>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b04      	cmp	r3, #4
 800948e:	d00a      	beq.n	80094a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009490:	4b16      	ldr	r3, [pc, #88]	; (80094ec <HAL_PWREx_ConfigSupply+0x70>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f003 0307 	and.w	r3, r3, #7
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	429a      	cmp	r2, r3
 800949c:	d001      	beq.n	80094a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e01f      	b.n	80094e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e01d      	b.n	80094e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80094a6:	4b11      	ldr	r3, [pc, #68]	; (80094ec <HAL_PWREx_ConfigSupply+0x70>)
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f023 0207 	bic.w	r2, r3, #7
 80094ae:	490f      	ldr	r1, [pc, #60]	; (80094ec <HAL_PWREx_ConfigSupply+0x70>)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80094b6:	f7fa f927 	bl	8003708 <HAL_GetTick>
 80094ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80094bc:	e009      	b.n	80094d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80094be:	f7fa f923 	bl	8003708 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094cc:	d901      	bls.n	80094d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e007      	b.n	80094e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80094d2:	4b06      	ldr	r3, [pc, #24]	; (80094ec <HAL_PWREx_ConfigSupply+0x70>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094de:	d1ee      	bne.n	80094be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	58024800 	.word	0x58024800

080094f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4a04      	ldr	r2, [pc, #16]	; (800950c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094fe:	60d3      	str	r3, [r2, #12]
}
 8009500:	bf00      	nop
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	58024800 	.word	0x58024800

08009510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e3c8      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 8087 	beq.w	800963e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009530:	4b88      	ldr	r3, [pc, #544]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800953a:	4b86      	ldr	r3, [pc, #536]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800953c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	2b10      	cmp	r3, #16
 8009544:	d007      	beq.n	8009556 <HAL_RCC_OscConfig+0x46>
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	2b18      	cmp	r3, #24
 800954a:	d110      	bne.n	800956e <HAL_RCC_OscConfig+0x5e>
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	2b02      	cmp	r3, #2
 8009554:	d10b      	bne.n	800956e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009556:	4b7f      	ldr	r3, [pc, #508]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d06c      	beq.n	800963c <HAL_RCC_OscConfig+0x12c>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d168      	bne.n	800963c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e3a2      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009576:	d106      	bne.n	8009586 <HAL_RCC_OscConfig+0x76>
 8009578:	4b76      	ldr	r3, [pc, #472]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a75      	ldr	r2, [pc, #468]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800957e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	e02e      	b.n	80095e4 <HAL_RCC_OscConfig+0xd4>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10c      	bne.n	80095a8 <HAL_RCC_OscConfig+0x98>
 800958e:	4b71      	ldr	r3, [pc, #452]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a70      	ldr	r2, [pc, #448]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	4b6e      	ldr	r3, [pc, #440]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a6d      	ldr	r2, [pc, #436]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	e01d      	b.n	80095e4 <HAL_RCC_OscConfig+0xd4>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095b0:	d10c      	bne.n	80095cc <HAL_RCC_OscConfig+0xbc>
 80095b2:	4b68      	ldr	r3, [pc, #416]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a67      	ldr	r2, [pc, #412]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	4b65      	ldr	r3, [pc, #404]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a64      	ldr	r2, [pc, #400]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	e00b      	b.n	80095e4 <HAL_RCC_OscConfig+0xd4>
 80095cc:	4b61      	ldr	r3, [pc, #388]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a60      	ldr	r2, [pc, #384]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	4b5e      	ldr	r3, [pc, #376]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a5d      	ldr	r2, [pc, #372]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80095de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d013      	beq.n	8009614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ec:	f7fa f88c 	bl	8003708 <HAL_GetTick>
 80095f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095f2:	e008      	b.n	8009606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095f4:	f7fa f888 	bl	8003708 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b64      	cmp	r3, #100	; 0x64
 8009600:	d901      	bls.n	8009606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e356      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009606:	4b53      	ldr	r3, [pc, #332]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f0      	beq.n	80095f4 <HAL_RCC_OscConfig+0xe4>
 8009612:	e014      	b.n	800963e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009614:	f7fa f878 	bl	8003708 <HAL_GetTick>
 8009618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800961a:	e008      	b.n	800962e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800961c:	f7fa f874 	bl	8003708 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	2b64      	cmp	r3, #100	; 0x64
 8009628:	d901      	bls.n	800962e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e342      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800962e:	4b49      	ldr	r3, [pc, #292]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1f0      	bne.n	800961c <HAL_RCC_OscConfig+0x10c>
 800963a:	e000      	b.n	800963e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800963c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 808c 	beq.w	8009764 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800964c:	4b41      	ldr	r3, [pc, #260]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009654:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009656:	4b3f      	ldr	r3, [pc, #252]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <HAL_RCC_OscConfig+0x162>
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	2b18      	cmp	r3, #24
 8009666:	d137      	bne.n	80096d8 <HAL_RCC_OscConfig+0x1c8>
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d132      	bne.n	80096d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009672:	4b38      	ldr	r3, [pc, #224]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0304 	and.w	r3, r3, #4
 800967a:	2b00      	cmp	r3, #0
 800967c:	d005      	beq.n	800968a <HAL_RCC_OscConfig+0x17a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e314      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800968a:	4b32      	ldr	r3, [pc, #200]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f023 0219 	bic.w	r2, r3, #25
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	492f      	ldr	r1, [pc, #188]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009698:	4313      	orrs	r3, r2
 800969a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969c:	f7fa f834 	bl	8003708 <HAL_GetTick>
 80096a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096a2:	e008      	b.n	80096b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096a4:	f7fa f830 	bl	8003708 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e2fe      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096b6:	4b27      	ldr	r3, [pc, #156]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f0      	beq.n	80096a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c2:	4b24      	ldr	r3, [pc, #144]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	061b      	lsls	r3, r3, #24
 80096d0:	4920      	ldr	r1, [pc, #128]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096d6:	e045      	b.n	8009764 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d026      	beq.n	800972e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096e0:	4b1c      	ldr	r3, [pc, #112]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f023 0219 	bic.w	r2, r3, #25
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	4919      	ldr	r1, [pc, #100]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096f2:	f7fa f809 	bl	8003708 <HAL_GetTick>
 80096f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096f8:	e008      	b.n	800970c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096fa:	f7fa f805 	bl	8003708 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	2b02      	cmp	r3, #2
 8009706:	d901      	bls.n	800970c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e2d3      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800970c:	4b11      	ldr	r3, [pc, #68]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0f0      	beq.n	80096fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009718:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	061b      	lsls	r3, r3, #24
 8009726:	490b      	ldr	r1, [pc, #44]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009728:	4313      	orrs	r3, r2
 800972a:	604b      	str	r3, [r1, #4]
 800972c:	e01a      	b.n	8009764 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800972e:	4b09      	ldr	r3, [pc, #36]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a08      	ldr	r2, [pc, #32]	; (8009754 <HAL_RCC_OscConfig+0x244>)
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973a:	f7f9 ffe5 	bl	8003708 <HAL_GetTick>
 800973e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009740:	e00a      	b.n	8009758 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009742:	f7f9 ffe1 	bl	8003708 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	d903      	bls.n	8009758 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e2af      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
 8009754:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009758:	4b96      	ldr	r3, [pc, #600]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1ee      	bne.n	8009742 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b00      	cmp	r3, #0
 800976e:	d06a      	beq.n	8009846 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009770:	4b90      	ldr	r3, [pc, #576]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009778:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800977a:	4b8e      	ldr	r3, [pc, #568]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800977c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b08      	cmp	r3, #8
 8009784:	d007      	beq.n	8009796 <HAL_RCC_OscConfig+0x286>
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	2b18      	cmp	r3, #24
 800978a:	d11b      	bne.n	80097c4 <HAL_RCC_OscConfig+0x2b4>
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	2b01      	cmp	r3, #1
 8009794:	d116      	bne.n	80097c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009796:	4b87      	ldr	r3, [pc, #540]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d005      	beq.n	80097ae <HAL_RCC_OscConfig+0x29e>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	2b80      	cmp	r3, #128	; 0x80
 80097a8:	d001      	beq.n	80097ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e282      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097ae:	4b81      	ldr	r3, [pc, #516]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	061b      	lsls	r3, r3, #24
 80097bc:	497d      	ldr	r1, [pc, #500]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097c2:	e040      	b.n	8009846 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d023      	beq.n	8009814 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80097cc:	4b79      	ldr	r3, [pc, #484]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a78      	ldr	r2, [pc, #480]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80097d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d8:	f7f9 ff96 	bl	8003708 <HAL_GetTick>
 80097dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097de:	e008      	b.n	80097f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80097e0:	f7f9 ff92 	bl	8003708 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d901      	bls.n	80097f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e260      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097f2:	4b70      	ldr	r3, [pc, #448]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0f0      	beq.n	80097e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097fe:	4b6d      	ldr	r3, [pc, #436]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	061b      	lsls	r3, r3, #24
 800980c:	4969      	ldr	r1, [pc, #420]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800980e:	4313      	orrs	r3, r2
 8009810:	60cb      	str	r3, [r1, #12]
 8009812:	e018      	b.n	8009846 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009814:	4b67      	ldr	r3, [pc, #412]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a66      	ldr	r2, [pc, #408]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800981a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800981e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009820:	f7f9 ff72 	bl	8003708 <HAL_GetTick>
 8009824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009826:	e008      	b.n	800983a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009828:	f7f9 ff6e 	bl	8003708 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b02      	cmp	r3, #2
 8009834:	d901      	bls.n	800983a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e23c      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800983a:	4b5e      	ldr	r3, [pc, #376]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1f0      	bne.n	8009828 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0308 	and.w	r3, r3, #8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d036      	beq.n	80098c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d019      	beq.n	800988e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800985a:	4b56      	ldr	r3, [pc, #344]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800985c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985e:	4a55      	ldr	r2, [pc, #340]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009860:	f043 0301 	orr.w	r3, r3, #1
 8009864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009866:	f7f9 ff4f 	bl	8003708 <HAL_GetTick>
 800986a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800986c:	e008      	b.n	8009880 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800986e:	f7f9 ff4b 	bl	8003708 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d901      	bls.n	8009880 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e219      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009880:	4b4c      	ldr	r3, [pc, #304]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0f0      	beq.n	800986e <HAL_RCC_OscConfig+0x35e>
 800988c:	e018      	b.n	80098c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800988e:	4b49      	ldr	r3, [pc, #292]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009892:	4a48      	ldr	r2, [pc, #288]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009894:	f023 0301 	bic.w	r3, r3, #1
 8009898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800989a:	f7f9 ff35 	bl	8003708 <HAL_GetTick>
 800989e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098a0:	e008      	b.n	80098b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098a2:	f7f9 ff31 	bl	8003708 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d901      	bls.n	80098b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e1ff      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098b4:	4b3f      	ldr	r3, [pc, #252]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80098b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f0      	bne.n	80098a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0320 	and.w	r3, r3, #32
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d036      	beq.n	800993a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d019      	beq.n	8009908 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80098d4:	4b37      	ldr	r3, [pc, #220]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a36      	ldr	r2, [pc, #216]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80098da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098e0:	f7f9 ff12 	bl	8003708 <HAL_GetTick>
 80098e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80098e6:	e008      	b.n	80098fa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098e8:	f7f9 ff0e 	bl	8003708 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e1dc      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80098fa:	4b2e      	ldr	r3, [pc, #184]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f0      	beq.n	80098e8 <HAL_RCC_OscConfig+0x3d8>
 8009906:	e018      	b.n	800993a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009908:	4b2a      	ldr	r3, [pc, #168]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a29      	ldr	r2, [pc, #164]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800990e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009912:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009914:	f7f9 fef8 	bl	8003708 <HAL_GetTick>
 8009918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800991a:	e008      	b.n	800992e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800991c:	f7f9 fef4 	bl	8003708 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	2b02      	cmp	r3, #2
 8009928:	d901      	bls.n	800992e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e1c2      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800992e:	4b21      	ldr	r3, [pc, #132]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1f0      	bne.n	800991c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8086 	beq.w	8009a54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009948:	4b1b      	ldr	r3, [pc, #108]	; (80099b8 <HAL_RCC_OscConfig+0x4a8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a1a      	ldr	r2, [pc, #104]	; (80099b8 <HAL_RCC_OscConfig+0x4a8>)
 800994e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009954:	f7f9 fed8 	bl	8003708 <HAL_GetTick>
 8009958:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800995a:	e008      	b.n	800996e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800995c:	f7f9 fed4 	bl	8003708 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	2b64      	cmp	r3, #100	; 0x64
 8009968:	d901      	bls.n	800996e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e1a2      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800996e:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <HAL_RCC_OscConfig+0x4a8>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0f0      	beq.n	800995c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d106      	bne.n	8009990 <HAL_RCC_OscConfig+0x480>
 8009982:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009986:	4a0b      	ldr	r2, [pc, #44]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 8009988:	f043 0301 	orr.w	r3, r3, #1
 800998c:	6713      	str	r3, [r2, #112]	; 0x70
 800998e:	e032      	b.n	80099f6 <HAL_RCC_OscConfig+0x4e6>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d111      	bne.n	80099bc <HAL_RCC_OscConfig+0x4ac>
 8009998:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800999a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999c:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 800999e:	f023 0301 	bic.w	r3, r3, #1
 80099a2:	6713      	str	r3, [r2, #112]	; 0x70
 80099a4:	4b03      	ldr	r3, [pc, #12]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80099a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a8:	4a02      	ldr	r2, [pc, #8]	; (80099b4 <HAL_RCC_OscConfig+0x4a4>)
 80099aa:	f023 0304 	bic.w	r3, r3, #4
 80099ae:	6713      	str	r3, [r2, #112]	; 0x70
 80099b0:	e021      	b.n	80099f6 <HAL_RCC_OscConfig+0x4e6>
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400
 80099b8:	58024800 	.word	0x58024800
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	2b05      	cmp	r3, #5
 80099c2:	d10c      	bne.n	80099de <HAL_RCC_OscConfig+0x4ce>
 80099c4:	4b83      	ldr	r3, [pc, #524]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c8:	4a82      	ldr	r2, [pc, #520]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099ca:	f043 0304 	orr.w	r3, r3, #4
 80099ce:	6713      	str	r3, [r2, #112]	; 0x70
 80099d0:	4b80      	ldr	r3, [pc, #512]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d4:	4a7f      	ldr	r2, [pc, #508]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099d6:	f043 0301 	orr.w	r3, r3, #1
 80099da:	6713      	str	r3, [r2, #112]	; 0x70
 80099dc:	e00b      	b.n	80099f6 <HAL_RCC_OscConfig+0x4e6>
 80099de:	4b7d      	ldr	r3, [pc, #500]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e2:	4a7c      	ldr	r2, [pc, #496]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	6713      	str	r3, [r2, #112]	; 0x70
 80099ea:	4b7a      	ldr	r3, [pc, #488]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ee:	4a79      	ldr	r2, [pc, #484]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 80099f0:	f023 0304 	bic.w	r3, r3, #4
 80099f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d015      	beq.n	8009a2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099fe:	f7f9 fe83 	bl	8003708 <HAL_GetTick>
 8009a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a04:	e00a      	b.n	8009a1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a06:	f7f9 fe7f 	bl	8003708 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d901      	bls.n	8009a1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e14b      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a1c:	4b6d      	ldr	r3, [pc, #436]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d0ee      	beq.n	8009a06 <HAL_RCC_OscConfig+0x4f6>
 8009a28:	e014      	b.n	8009a54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2a:	f7f9 fe6d 	bl	8003708 <HAL_GetTick>
 8009a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a30:	e00a      	b.n	8009a48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a32:	f7f9 fe69 	bl	8003708 <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d901      	bls.n	8009a48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e135      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a48:	4b62      	ldr	r3, [pc, #392]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1ee      	bne.n	8009a32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 812a 	beq.w	8009cb2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009a5e:	4b5d      	ldr	r3, [pc, #372]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a66:	2b18      	cmp	r3, #24
 8009a68:	f000 80ba 	beq.w	8009be0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f040 8095 	bne.w	8009ba0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a76:	4b57      	ldr	r3, [pc, #348]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a56      	ldr	r2, [pc, #344]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a82:	f7f9 fe41 	bl	8003708 <HAL_GetTick>
 8009a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a88:	e008      	b.n	8009a9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a8a:	f7f9 fe3d 	bl	8003708 <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e10b      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a9c:	4b4d      	ldr	r3, [pc, #308]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1f0      	bne.n	8009a8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009aa8:	4b4a      	ldr	r3, [pc, #296]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009aac:	4b4a      	ldr	r3, [pc, #296]	; (8009bd8 <HAL_RCC_OscConfig+0x6c8>)
 8009aae:	4013      	ands	r3, r2
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ab8:	0112      	lsls	r2, r2, #4
 8009aba:	430a      	orrs	r2, r1
 8009abc:	4945      	ldr	r1, [pc, #276]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	628b      	str	r3, [r1, #40]	; 0x28
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	025b      	lsls	r3, r3, #9
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	3b01      	subs	r3, #1
 8009ade:	041b      	lsls	r3, r3, #16
 8009ae0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aea:	3b01      	subs	r3, #1
 8009aec:	061b      	lsls	r3, r3, #24
 8009aee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009af2:	4938      	ldr	r1, [pc, #224]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009af8:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	4a35      	ldr	r2, [pc, #212]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009afe:	f023 0301 	bic.w	r3, r3, #1
 8009b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009b04:	4b33      	ldr	r3, [pc, #204]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b08:	4b34      	ldr	r3, [pc, #208]	; (8009bdc <HAL_RCC_OscConfig+0x6cc>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009b10:	00d2      	lsls	r2, r2, #3
 8009b12:	4930      	ldr	r1, [pc, #192]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009b18:	4b2e      	ldr	r3, [pc, #184]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	f023 020c 	bic.w	r2, r3, #12
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	492b      	ldr	r1, [pc, #172]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009b2a:	4b2a      	ldr	r3, [pc, #168]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	f023 0202 	bic.w	r2, r3, #2
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	4927      	ldr	r1, [pc, #156]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009b3c:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	4a24      	ldr	r2, [pc, #144]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b48:	4b22      	ldr	r3, [pc, #136]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	4a21      	ldr	r2, [pc, #132]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009b54:	4b1f      	ldr	r3, [pc, #124]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	4a1e      	ldr	r2, [pc, #120]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009b60:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	4a1b      	ldr	r2, [pc, #108]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b6c:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7f9 fdc6 	bl	8003708 <HAL_GetTick>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b80:	f7f9 fdc2 	bl	8003708 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e090      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b92:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <HAL_RCC_OscConfig+0x670>
 8009b9e:	e088      	b.n	8009cb2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a0b      	ldr	r2, [pc, #44]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bac:	f7f9 fdac 	bl	8003708 <HAL_GetTick>
 8009bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009bb2:	e008      	b.n	8009bc6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bb4:	f7f9 fda8 	bl	8003708 <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e076      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009bc6:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <HAL_RCC_OscConfig+0x6c4>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1f0      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x6a4>
 8009bd2:	e06e      	b.n	8009cb2 <HAL_RCC_OscConfig+0x7a2>
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	fffffc0c 	.word	0xfffffc0c
 8009bdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009be0:	4b36      	ldr	r3, [pc, #216]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009be6:	4b35      	ldr	r3, [pc, #212]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d031      	beq.n	8009c58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f003 0203 	and.w	r2, r3, #3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d12a      	bne.n	8009c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	091b      	lsrs	r3, r3, #4
 8009c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d122      	bne.n	8009c58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d11a      	bne.n	8009c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	0a5b      	lsrs	r3, r3, #9
 8009c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d111      	bne.n	8009c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d108      	bne.n	8009c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	0e1b      	lsrs	r3, r3, #24
 8009c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d001      	beq.n	8009c5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e02b      	b.n	8009cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009c5c:	4b17      	ldr	r3, [pc, #92]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c60:	08db      	lsrs	r3, r3, #3
 8009c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d01f      	beq.n	8009cb2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009c72:	4b12      	ldr	r3, [pc, #72]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	4a11      	ldr	r2, [pc, #68]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009c78:	f023 0301 	bic.w	r3, r3, #1
 8009c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c7e:	f7f9 fd43 	bl	8003708 <HAL_GetTick>
 8009c82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009c84:	bf00      	nop
 8009c86:	f7f9 fd3f 	bl	8003708 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d0f9      	beq.n	8009c86 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009c92:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <HAL_RCC_OscConfig+0x7b0>)
 8009c98:	4013      	ands	r3, r2
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009c9e:	00d2      	lsls	r2, r2, #3
 8009ca0:	4906      	ldr	r1, [pc, #24]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009ca6:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	4a04      	ldr	r2, [pc, #16]	; (8009cbc <HAL_RCC_OscConfig+0x7ac>)
 8009cac:	f043 0301 	orr.w	r3, r3, #1
 8009cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3730      	adds	r7, #48	; 0x30
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	58024400 	.word	0x58024400
 8009cc0:	ffff0007 	.word	0xffff0007

08009cc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e19c      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009cd8:	4b8a      	ldr	r3, [pc, #552]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d910      	bls.n	8009d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ce6:	4b87      	ldr	r3, [pc, #540]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f023 020f 	bic.w	r2, r3, #15
 8009cee:	4985      	ldr	r1, [pc, #532]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cf6:	4b83      	ldr	r3, [pc, #524]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d001      	beq.n	8009d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e184      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d010      	beq.n	8009d36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691a      	ldr	r2, [r3, #16]
 8009d18:	4b7b      	ldr	r3, [pc, #492]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d908      	bls.n	8009d36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d24:	4b78      	ldr	r3, [pc, #480]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	4975      	ldr	r1, [pc, #468]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0308 	and.w	r3, r3, #8
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d010      	beq.n	8009d64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	695a      	ldr	r2, [r3, #20]
 8009d46:	4b70      	ldr	r3, [pc, #448]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d908      	bls.n	8009d64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d52:	4b6d      	ldr	r3, [pc, #436]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	496a      	ldr	r1, [pc, #424]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0310 	and.w	r3, r3, #16
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d010      	beq.n	8009d92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699a      	ldr	r2, [r3, #24]
 8009d74:	4b64      	ldr	r3, [pc, #400]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d908      	bls.n	8009d92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d80:	4b61      	ldr	r3, [pc, #388]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	495e      	ldr	r1, [pc, #376]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d010      	beq.n	8009dc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	69da      	ldr	r2, [r3, #28]
 8009da2:	4b59      	ldr	r3, [pc, #356]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d908      	bls.n	8009dc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009dae:	4b56      	ldr	r3, [pc, #344]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	4953      	ldr	r1, [pc, #332]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d010      	beq.n	8009dee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	4b4d      	ldr	r3, [pc, #308]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	f003 030f 	and.w	r3, r3, #15
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d908      	bls.n	8009dee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ddc:	4b4a      	ldr	r3, [pc, #296]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	f023 020f 	bic.w	r2, r3, #15
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4947      	ldr	r1, [pc, #284]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d055      	beq.n	8009ea6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009dfa:	4b43      	ldr	r3, [pc, #268]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	4940      	ldr	r1, [pc, #256]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d107      	bne.n	8009e24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e14:	4b3c      	ldr	r3, [pc, #240]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d121      	bne.n	8009e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e0f6      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d107      	bne.n	8009e3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e2c:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d115      	bne.n	8009e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e0ea      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d107      	bne.n	8009e54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e44:	4b30      	ldr	r3, [pc, #192]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d109      	bne.n	8009e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e0de      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e54:	4b2c      	ldr	r3, [pc, #176]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e0d6      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009e64:	4b28      	ldr	r3, [pc, #160]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f023 0207 	bic.w	r2, r3, #7
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	4925      	ldr	r1, [pc, #148]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e76:	f7f9 fc47 	bl	8003708 <HAL_GetTick>
 8009e7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e7c:	e00a      	b.n	8009e94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e7e:	f7f9 fc43 	bl	8003708 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d901      	bls.n	8009e94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e0be      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e94:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d1eb      	bne.n	8009e7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 0302 	and.w	r3, r3, #2
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d010      	beq.n	8009ed4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d208      	bcs.n	8009ed4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ec2:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f023 020f 	bic.w	r2, r3, #15
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	490e      	ldr	r1, [pc, #56]	; (8009f08 <HAL_RCC_ClockConfig+0x244>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ed4:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d214      	bcs.n	8009f0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ee2:	4b08      	ldr	r3, [pc, #32]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f023 020f 	bic.w	r2, r3, #15
 8009eea:	4906      	ldr	r1, [pc, #24]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ef2:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <HAL_RCC_ClockConfig+0x240>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 030f 	and.w	r3, r3, #15
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d005      	beq.n	8009f0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e086      	b.n	800a012 <HAL_RCC_ClockConfig+0x34e>
 8009f04:	52002000 	.word	0x52002000
 8009f08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d010      	beq.n	8009f3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	4b3f      	ldr	r3, [pc, #252]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d208      	bcs.n	8009f3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f28:	4b3c      	ldr	r3, [pc, #240]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	4939      	ldr	r1, [pc, #228]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0308 	and.w	r3, r3, #8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d010      	beq.n	8009f68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695a      	ldr	r2, [r3, #20]
 8009f4a:	4b34      	ldr	r3, [pc, #208]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d208      	bcs.n	8009f68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f56:	4b31      	ldr	r3, [pc, #196]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	492e      	ldr	r1, [pc, #184]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0310 	and.w	r3, r3, #16
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d010      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699a      	ldr	r2, [r3, #24]
 8009f78:	4b28      	ldr	r3, [pc, #160]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d208      	bcs.n	8009f96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f84:	4b25      	ldr	r3, [pc, #148]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	4922      	ldr	r1, [pc, #136]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d010      	beq.n	8009fc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	69da      	ldr	r2, [r3, #28]
 8009fa6:	4b1d      	ldr	r3, [pc, #116]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d208      	bcs.n	8009fc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009fb2:	4b1a      	ldr	r3, [pc, #104]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	4917      	ldr	r1, [pc, #92]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009fc4:	f000 f89e 	bl	800a104 <HAL_RCC_GetSysClockFreq>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	4b14      	ldr	r3, [pc, #80]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	0a1b      	lsrs	r3, r3, #8
 8009fd0:	f003 030f 	and.w	r3, r3, #15
 8009fd4:	4912      	ldr	r1, [pc, #72]	; (800a020 <HAL_RCC_ClockConfig+0x35c>)
 8009fd6:	5ccb      	ldrb	r3, [r1, r3]
 8009fd8:	f003 031f 	and.w	r3, r3, #31
 8009fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <HAL_RCC_ClockConfig+0x358>)
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	4a0d      	ldr	r2, [pc, #52]	; (800a020 <HAL_RCC_ClockConfig+0x35c>)
 8009fec:	5cd3      	ldrb	r3, [r2, r3]
 8009fee:	f003 031f 	and.w	r3, r3, #31
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff8:	4a0a      	ldr	r2, [pc, #40]	; (800a024 <HAL_RCC_ClockConfig+0x360>)
 8009ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ffc:	4a0a      	ldr	r2, [pc, #40]	; (800a028 <HAL_RCC_ClockConfig+0x364>)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a002:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <HAL_RCC_ClockConfig+0x368>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4618      	mov	r0, r3
 800a008:	f7f9 fb34 	bl	8003674 <HAL_InitTick>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	58024400 	.word	0x58024400
 800a020:	08017fd8 	.word	0x08017fd8
 800a024:	24000004 	.word	0x24000004
 800a028:	24000000 	.word	0x24000000
 800a02c:	24000008 	.word	0x24000008

0800a030 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08c      	sub	sp, #48	; 0x30
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d12a      	bne.n	800a098 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a042:	4b2d      	ldr	r3, [pc, #180]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a048:	4a2b      	ldr	r2, [pc, #172]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a052:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	61bb      	str	r3, [r7, #24]
 800a05e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a060:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a066:	2302      	movs	r3, #2
 800a068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a06a:	2303      	movs	r3, #3
 800a06c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a072:	2300      	movs	r3, #0
 800a074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a076:	f107 031c 	add.w	r3, r7, #28
 800a07a:	4619      	mov	r1, r3
 800a07c:	481f      	ldr	r0, [pc, #124]	; (800a0fc <HAL_RCC_MCOConfig+0xcc>)
 800a07e:	f7fd fc43 	bl	8007908 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a082:	4b1d      	ldr	r3, [pc, #116]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	430b      	orrs	r3, r1
 800a090:	4919      	ldr	r1, [pc, #100]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a092:	4313      	orrs	r3, r2
 800a094:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a096:	e02a      	b.n	800a0ee <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a098:	4b17      	ldr	r3, [pc, #92]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a09a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a09e:	4a16      	ldr	r2, [pc, #88]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a0a0:	f043 0304 	orr.w	r3, r3, #4
 800a0a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0a8:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a0aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a0b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a0cc:	f107 031c 	add.w	r3, r7, #28
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	480b      	ldr	r0, [pc, #44]	; (800a100 <HAL_RCC_MCOConfig+0xd0>)
 800a0d4:	f7fd fc18 	bl	8007908 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a0d8:	4b07      	ldr	r3, [pc, #28]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	01d9      	lsls	r1, r3, #7
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	4903      	ldr	r1, [pc, #12]	; (800a0f8 <HAL_RCC_MCOConfig+0xc8>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	610b      	str	r3, [r1, #16]
}
 800a0ee:	bf00      	nop
 800a0f0:	3730      	adds	r7, #48	; 0x30
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	58024400 	.word	0x58024400
 800a0fc:	58020000 	.word	0x58020000
 800a100:	58020800 	.word	0x58020800

0800a104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a104:	b480      	push	{r7}
 800a106:	b089      	sub	sp, #36	; 0x24
 800a108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a10a:	4bb3      	ldr	r3, [pc, #716]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a112:	2b18      	cmp	r3, #24
 800a114:	f200 8155 	bhi.w	800a3c2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a118:	a201      	add	r2, pc, #4	; (adr r2, 800a120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11e:	bf00      	nop
 800a120:	0800a185 	.word	0x0800a185
 800a124:	0800a3c3 	.word	0x0800a3c3
 800a128:	0800a3c3 	.word	0x0800a3c3
 800a12c:	0800a3c3 	.word	0x0800a3c3
 800a130:	0800a3c3 	.word	0x0800a3c3
 800a134:	0800a3c3 	.word	0x0800a3c3
 800a138:	0800a3c3 	.word	0x0800a3c3
 800a13c:	0800a3c3 	.word	0x0800a3c3
 800a140:	0800a1ab 	.word	0x0800a1ab
 800a144:	0800a3c3 	.word	0x0800a3c3
 800a148:	0800a3c3 	.word	0x0800a3c3
 800a14c:	0800a3c3 	.word	0x0800a3c3
 800a150:	0800a3c3 	.word	0x0800a3c3
 800a154:	0800a3c3 	.word	0x0800a3c3
 800a158:	0800a3c3 	.word	0x0800a3c3
 800a15c:	0800a3c3 	.word	0x0800a3c3
 800a160:	0800a1b1 	.word	0x0800a1b1
 800a164:	0800a3c3 	.word	0x0800a3c3
 800a168:	0800a3c3 	.word	0x0800a3c3
 800a16c:	0800a3c3 	.word	0x0800a3c3
 800a170:	0800a3c3 	.word	0x0800a3c3
 800a174:	0800a3c3 	.word	0x0800a3c3
 800a178:	0800a3c3 	.word	0x0800a3c3
 800a17c:	0800a3c3 	.word	0x0800a3c3
 800a180:	0800a1b7 	.word	0x0800a1b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a184:	4b94      	ldr	r3, [pc, #592]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0320 	and.w	r3, r3, #32
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d009      	beq.n	800a1a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a190:	4b91      	ldr	r3, [pc, #580]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	08db      	lsrs	r3, r3, #3
 800a196:	f003 0303 	and.w	r3, r3, #3
 800a19a:	4a90      	ldr	r2, [pc, #576]	; (800a3dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a19c:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a1a2:	e111      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a1a4:	4b8d      	ldr	r3, [pc, #564]	; (800a3dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1a6:	61bb      	str	r3, [r7, #24]
      break;
 800a1a8:	e10e      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a1aa:	4b8d      	ldr	r3, [pc, #564]	; (800a3e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a1ac:	61bb      	str	r3, [r7, #24]
      break;
 800a1ae:	e10b      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a1b0:	4b8c      	ldr	r3, [pc, #560]	; (800a3e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a1b2:	61bb      	str	r3, [r7, #24]
      break;
 800a1b4:	e108      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1b6:	4b88      	ldr	r3, [pc, #544]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a1c0:	4b85      	ldr	r3, [pc, #532]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c4:	091b      	lsrs	r3, r3, #4
 800a1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a1cc:	4b82      	ldr	r3, [pc, #520]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a1d6:	4b80      	ldr	r3, [pc, #512]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	08db      	lsrs	r3, r3, #3
 800a1dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	fb02 f303 	mul.w	r3, r2, r3
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 80e1 	beq.w	800a3bc <HAL_RCC_GetSysClockFreq+0x2b8>
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	f000 8083 	beq.w	800a308 <HAL_RCC_GetSysClockFreq+0x204>
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b02      	cmp	r3, #2
 800a206:	f200 80a1 	bhi.w	800a34c <HAL_RCC_GetSysClockFreq+0x248>
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <HAL_RCC_GetSysClockFreq+0x114>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d056      	beq.n	800a2c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a216:	e099      	b.n	800a34c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a218:	4b6f      	ldr	r3, [pc, #444]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 0320 	and.w	r3, r3, #32
 800a220:	2b00      	cmp	r3, #0
 800a222:	d02d      	beq.n	800a280 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a224:	4b6c      	ldr	r3, [pc, #432]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	08db      	lsrs	r3, r3, #3
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	4a6b      	ldr	r2, [pc, #428]	; (800a3dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a230:	fa22 f303 	lsr.w	r3, r2, r3
 800a234:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a24e:	4b62      	ldr	r3, [pc, #392]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a256:	ee07 3a90 	vmov	s15, r3
 800a25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a25e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a262:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a26e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a27a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a27e:	e087      	b.n	800a390 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	ee07 3a90 	vmov	s15, r3
 800a286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a3ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800a28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a292:	4b51      	ldr	r3, [pc, #324]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2c2:	e065      	b.n	800a390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	ee07 3a90 	vmov	s15, r3
 800a2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a3f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2d6:	4b40      	ldr	r3, [pc, #256]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2de:	ee07 3a90 	vmov	s15, r3
 800a2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a306:	e043      	b.n	800a390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	ee07 3a90 	vmov	s15, r3
 800a30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a312:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a3f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a31a:	4b2f      	ldr	r3, [pc, #188]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a32a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a32e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a34a:	e021      	b.n	800a390 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	ee07 3a90 	vmov	s15, r3
 800a352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a356:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a3f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a35e:	4b1e      	ldr	r3, [pc, #120]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a36e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a38e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a390:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a394:	0a5b      	lsrs	r3, r3, #9
 800a396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a39a:	3301      	adds	r3, #1
 800a39c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	ee07 3a90 	vmov	s15, r3
 800a3a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a3a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3b4:	ee17 3a90 	vmov	r3, s15
 800a3b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a3ba:	e005      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	61bb      	str	r3, [r7, #24]
      break;
 800a3c0:	e002      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a3c2:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a3c4:	61bb      	str	r3, [r7, #24]
      break;
 800a3c6:	bf00      	nop
  }

  return sysclockfreq;
 800a3c8:	69bb      	ldr	r3, [r7, #24]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3724      	adds	r7, #36	; 0x24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	58024400 	.word	0x58024400
 800a3dc:	03d09000 	.word	0x03d09000
 800a3e0:	003d0900 	.word	0x003d0900
 800a3e4:	02faf080 	.word	0x02faf080
 800a3e8:	46000000 	.word	0x46000000
 800a3ec:	4c742400 	.word	0x4c742400
 800a3f0:	4a742400 	.word	0x4a742400
 800a3f4:	4c3ebc20 	.word	0x4c3ebc20

0800a3f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a3fe:	f7ff fe81 	bl	800a104 <HAL_RCC_GetSysClockFreq>
 800a402:	4602      	mov	r2, r0
 800a404:	4b10      	ldr	r3, [pc, #64]	; (800a448 <HAL_RCC_GetHCLKFreq+0x50>)
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	0a1b      	lsrs	r3, r3, #8
 800a40a:	f003 030f 	and.w	r3, r3, #15
 800a40e:	490f      	ldr	r1, [pc, #60]	; (800a44c <HAL_RCC_GetHCLKFreq+0x54>)
 800a410:	5ccb      	ldrb	r3, [r1, r3]
 800a412:	f003 031f 	and.w	r3, r3, #31
 800a416:	fa22 f303 	lsr.w	r3, r2, r3
 800a41a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a41c:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <HAL_RCC_GetHCLKFreq+0x50>)
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	f003 030f 	and.w	r3, r3, #15
 800a424:	4a09      	ldr	r2, [pc, #36]	; (800a44c <HAL_RCC_GetHCLKFreq+0x54>)
 800a426:	5cd3      	ldrb	r3, [r2, r3]
 800a428:	f003 031f 	and.w	r3, r3, #31
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	fa22 f303 	lsr.w	r3, r2, r3
 800a432:	4a07      	ldr	r2, [pc, #28]	; (800a450 <HAL_RCC_GetHCLKFreq+0x58>)
 800a434:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a436:	4a07      	ldr	r2, [pc, #28]	; (800a454 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a43c:	4b04      	ldr	r3, [pc, #16]	; (800a450 <HAL_RCC_GetHCLKFreq+0x58>)
 800a43e:	681b      	ldr	r3, [r3, #0]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	58024400 	.word	0x58024400
 800a44c:	08017fd8 	.word	0x08017fd8
 800a450:	24000004 	.word	0x24000004
 800a454:	24000000 	.word	0x24000000

0800a458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a45c:	f7ff ffcc 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a460:	4602      	mov	r2, r0
 800a462:	4b06      	ldr	r3, [pc, #24]	; (800a47c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	091b      	lsrs	r3, r3, #4
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	4904      	ldr	r1, [pc, #16]	; (800a480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a46e:	5ccb      	ldrb	r3, [r1, r3]
 800a470:	f003 031f 	and.w	r3, r3, #31
 800a474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a478:	4618      	mov	r0, r3
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	58024400 	.word	0x58024400
 800a480:	08017fd8 	.word	0x08017fd8

0800a484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a488:	f7ff ffb6 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a48c:	4602      	mov	r2, r0
 800a48e:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	0a1b      	lsrs	r3, r3, #8
 800a494:	f003 0307 	and.w	r3, r3, #7
 800a498:	4904      	ldr	r1, [pc, #16]	; (800a4ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800a49a:	5ccb      	ldrb	r3, [r1, r3]
 800a49c:	f003 031f 	and.w	r3, r3, #31
 800a4a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	58024400 	.word	0x58024400
 800a4ac:	08017fd8 	.word	0x08017fd8

0800a4b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4b4:	b0c6      	sub	sp, #280	; 0x118
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a4d4:	2500      	movs	r5, #0
 800a4d6:	ea54 0305 	orrs.w	r3, r4, r5
 800a4da:	d049      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4e6:	d02f      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a4e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4ec:	d828      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4f2:	d01a      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a4f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4f8:	d822      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a4fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a502:	d007      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a504:	e01c      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a506:	4bab      	ldr	r3, [pc, #684]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4aaa      	ldr	r2, [pc, #680]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a512:	e01a      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a518:	3308      	adds	r3, #8
 800a51a:	2102      	movs	r1, #2
 800a51c:	4618      	mov	r0, r3
 800a51e:	f002 fa49 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a522:	4603      	mov	r3, r0
 800a524:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a528:	e00f      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52e:	3328      	adds	r3, #40	; 0x28
 800a530:	2102      	movs	r1, #2
 800a532:	4618      	mov	r0, r3
 800a534:	f002 faf0 	bl	800cb18 <RCCEx_PLL3_Config>
 800a538:	4603      	mov	r3, r0
 800a53a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a53e:	e004      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a546:	e000      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a54a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a552:	4b98      	ldr	r3, [pc, #608]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a556:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a560:	4a94      	ldr	r2, [pc, #592]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a562:	430b      	orrs	r3, r1
 800a564:	6513      	str	r3, [r2, #80]	; 0x50
 800a566:	e003      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a568:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a56c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a57c:	f04f 0900 	mov.w	r9, #0
 800a580:	ea58 0309 	orrs.w	r3, r8, r9
 800a584:	d047      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d82a      	bhi.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a590:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a5ad 	.word	0x0800a5ad
 800a59c:	0800a5bb 	.word	0x0800a5bb
 800a5a0:	0800a5d1 	.word	0x0800a5d1
 800a5a4:	0800a5ef 	.word	0x0800a5ef
 800a5a8:	0800a5ef 	.word	0x0800a5ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5ac:	4b81      	ldr	r3, [pc, #516]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	4a80      	ldr	r2, [pc, #512]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5b8:	e01a      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5be:	3308      	adds	r3, #8
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f002 f9f6 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5ce:	e00f      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d4:	3328      	adds	r3, #40	; 0x28
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f002 fa9d 	bl	800cb18 <RCCEx_PLL3_Config>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5e4:	e004      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5ec:	e000      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a5ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5f8:	4b6e      	ldr	r3, [pc, #440]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5fc:	f023 0107 	bic.w	r1, r3, #7
 800a600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a606:	4a6b      	ldr	r2, [pc, #428]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a608:	430b      	orrs	r3, r1
 800a60a:	6513      	str	r3, [r2, #80]	; 0x50
 800a60c:	e003      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a60e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a612:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a622:	f04f 0b00 	mov.w	fp, #0
 800a626:	ea5a 030b 	orrs.w	r3, sl, fp
 800a62a:	d05b      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a634:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a638:	d03b      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a63a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a63e:	d834      	bhi.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a644:	d037      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a64a:	d82e      	bhi.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a64c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a650:	d033      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a652:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a656:	d828      	bhi.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a65c:	d01a      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a65e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a662:	d822      	bhi.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a668:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a66c:	d007      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a66e:	e01c      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a670:	4b50      	ldr	r3, [pc, #320]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	4a4f      	ldr	r2, [pc, #316]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a67a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a67c:	e01e      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a682:	3308      	adds	r3, #8
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f002 f994 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a692:	e013      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a698:	3328      	adds	r3, #40	; 0x28
 800a69a:	2100      	movs	r1, #0
 800a69c:	4618      	mov	r0, r3
 800a69e:	f002 fa3b 	bl	800cb18 <RCCEx_PLL3_Config>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6a8:	e008      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6b0:	e004      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a6b2:	bf00      	nop
 800a6b4:	e002      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a6b6:	bf00      	nop
 800a6b8:	e000      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a6ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a6c4:	4b3b      	ldr	r3, [pc, #236]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6d4:	4a37      	ldr	r2, [pc, #220]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6593      	str	r3, [r2, #88]	; 0x58
 800a6da:	e003      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a6f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d05d      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a70c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a710:	d03b      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a712:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a716:	d834      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a71c:	d037      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a71e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a722:	d82e      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a724:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a728:	d033      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a72a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a72e:	d828      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a734:	d01a      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a73a:	d822      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a744:	d007      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a746:	e01c      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a748:	4b1a      	ldr	r3, [pc, #104]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	4a19      	ldr	r2, [pc, #100]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a74e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a754:	e01e      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75a:	3308      	adds	r3, #8
 800a75c:	2100      	movs	r1, #0
 800a75e:	4618      	mov	r0, r3
 800a760:	f002 f928 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a76a:	e013      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a770:	3328      	adds	r3, #40	; 0x28
 800a772:	2100      	movs	r1, #0
 800a774:	4618      	mov	r0, r3
 800a776:	f002 f9cf 	bl	800cb18 <RCCEx_PLL3_Config>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a780:	e008      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a788:	e004      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a78a:	bf00      	nop
 800a78c:	e002      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a78e:	bf00      	nop
 800a790:	e000      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a792:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a794:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10d      	bne.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a79c:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a7ac:	4a01      	ldr	r2, [pc, #4]	; (800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	6593      	str	r3, [r2, #88]	; 0x58
 800a7b2:	e005      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a7b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a7cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7d6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	d03a      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7e6:	2b30      	cmp	r3, #48	; 0x30
 800a7e8:	d01f      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a7ea:	2b30      	cmp	r3, #48	; 0x30
 800a7ec:	d819      	bhi.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	d00c      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a7f2:	2b20      	cmp	r3, #32
 800a7f4:	d815      	bhi.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d019      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a7fa:	2b10      	cmp	r3, #16
 800a7fc:	d111      	bne.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7fe:	4baa      	ldr	r3, [pc, #680]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a802:	4aa9      	ldr	r2, [pc, #676]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a808:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a80a:	e011      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a810:	3308      	adds	r3, #8
 800a812:	2102      	movs	r1, #2
 800a814:	4618      	mov	r0, r3
 800a816:	f002 f8cd 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a820:	e006      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a828:	e002      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a82a:	bf00      	nop
 800a82c:	e000      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a82e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a830:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a838:	4b9b      	ldr	r3, [pc, #620]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a846:	4a98      	ldr	r2, [pc, #608]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a848:	430b      	orrs	r3, r1
 800a84a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a84c:	e003      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a852:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a866:	2300      	movs	r3, #0
 800a868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a86c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a870:	460b      	mov	r3, r1
 800a872:	4313      	orrs	r3, r2
 800a874:	d051      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a880:	d035      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a886:	d82e      	bhi.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a88c:	d031      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a88e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a892:	d828      	bhi.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a898:	d01a      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a89a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a89e:	d822      	bhi.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d003      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8a8:	d007      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a8aa:	e01c      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ac:	4b7e      	ldr	r3, [pc, #504]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b0:	4a7d      	ldr	r2, [pc, #500]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8b8:	e01c      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8be:	3308      	adds	r3, #8
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f002 f876 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8ce:	e011      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d4:	3328      	adds	r3, #40	; 0x28
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f002 f91d 	bl	800cb18 <RCCEx_PLL3_Config>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8e4:	e006      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8ec:	e002      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a8ee:	bf00      	nop
 800a8f0:	e000      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a8f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a8fc:	4b6a      	ldr	r3, [pc, #424]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a900:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a90a:	4a67      	ldr	r2, [pc, #412]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a90c:	430b      	orrs	r3, r1
 800a90e:	6513      	str	r3, [r2, #80]	; 0x50
 800a910:	e003      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a912:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a916:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a926:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a92a:	2300      	movs	r3, #0
 800a92c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a930:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a934:	460b      	mov	r3, r1
 800a936:	4313      	orrs	r3, r2
 800a938:	d053      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a944:	d033      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a946:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a94a:	d82c      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a94c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a950:	d02f      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a952:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a956:	d826      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a958:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a95c:	d02b      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a95e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a962:	d820      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a968:	d012      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a96a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a96e:	d81a      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a970:	2b00      	cmp	r3, #0
 800a972:	d022      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a978:	d115      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97e:	3308      	adds	r3, #8
 800a980:	2101      	movs	r1, #1
 800a982:	4618      	mov	r0, r3
 800a984:	f002 f816 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a988:	4603      	mov	r3, r0
 800a98a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a98e:	e015      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a994:	3328      	adds	r3, #40	; 0x28
 800a996:	2101      	movs	r1, #1
 800a998:	4618      	mov	r0, r3
 800a99a:	f002 f8bd 	bl	800cb18 <RCCEx_PLL3_Config>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a9a4:	e00a      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9ac:	e006      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9ae:	bf00      	nop
 800a9b0:	e004      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9b2:	bf00      	nop
 800a9b4:	e002      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9b6:	bf00      	nop
 800a9b8:	e000      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a9ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10a      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a9c4:	4b38      	ldr	r3, [pc, #224]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9d2:	4a35      	ldr	r2, [pc, #212]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9d4:	430b      	orrs	r3, r1
 800a9d6:	6513      	str	r3, [r2, #80]	; 0x50
 800a9d8:	e003      	b.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a9ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	d058      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aa02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa0e:	d033      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aa10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa14:	d82c      	bhi.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa1a:	d02f      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aa1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa20:	d826      	bhi.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa26:	d02b      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aa28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa2c:	d820      	bhi.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa32:	d012      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800aa34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa38:	d81a      	bhi.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d022      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aa3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa42:	d115      	bne.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa48:	3308      	adds	r3, #8
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 ffb1 	bl	800c9b4 <RCCEx_PLL2_Config>
 800aa52:	4603      	mov	r3, r0
 800aa54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa58:	e015      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5e:	3328      	adds	r3, #40	; 0x28
 800aa60:	2101      	movs	r1, #1
 800aa62:	4618      	mov	r0, r3
 800aa64:	f002 f858 	bl	800cb18 <RCCEx_PLL3_Config>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa6e:	e00a      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa76:	e006      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa78:	bf00      	nop
 800aa7a:	e004      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa7c:	bf00      	nop
 800aa7e:	e002      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa80:	bf00      	nop
 800aa82:	e000      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10e      	bne.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa8e:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa92:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa9e:	4a02      	ldr	r2, [pc, #8]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaa0:	430b      	orrs	r3, r1
 800aaa2:	6593      	str	r3, [r2, #88]	; 0x58
 800aaa4:	e006      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aaa6:	bf00      	nop
 800aaa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aab0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aac4:	2300      	movs	r3, #0
 800aac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aaca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aace:	460b      	mov	r3, r1
 800aad0:	4313      	orrs	r3, r2
 800aad2:	d037      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aade:	d00e      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae4:	d816      	bhi.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d018      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aaea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaee:	d111      	bne.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaf0:	4bc4      	ldr	r3, [pc, #784]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	4ac3      	ldr	r2, [pc, #780]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aafa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aafc:	e00f      	b.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab02:	3308      	adds	r3, #8
 800ab04:	2101      	movs	r1, #1
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 ff54 	bl	800c9b4 <RCCEx_PLL2_Config>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ab12:	e004      	b.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab1a:	e000      	b.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ab1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10a      	bne.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab26:	4bb7      	ldr	r3, [pc, #732]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab34:	4ab3      	ldr	r2, [pc, #716]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab36:	430b      	orrs	r3, r1
 800ab38:	6513      	str	r3, [r2, #80]	; 0x50
 800ab3a:	e003      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ab50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab54:	2300      	movs	r3, #0
 800ab56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4313      	orrs	r3, r2
 800ab62:	d039      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ab64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d81c      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ab6e:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ab70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab74:	0800abb1 	.word	0x0800abb1
 800ab78:	0800ab85 	.word	0x0800ab85
 800ab7c:	0800ab93 	.word	0x0800ab93
 800ab80:	0800abb1 	.word	0x0800abb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab84:	4b9f      	ldr	r3, [pc, #636]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	4a9e      	ldr	r2, [pc, #632]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab90:	e00f      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab96:	3308      	adds	r3, #8
 800ab98:	2102      	movs	r1, #2
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f001 ff0a 	bl	800c9b4 <RCCEx_PLL2_Config>
 800aba0:	4603      	mov	r3, r0
 800aba2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aba6:	e004      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abae:	e000      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800abb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10a      	bne.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800abba:	4b92      	ldr	r3, [pc, #584]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abbe:	f023 0103 	bic.w	r1, r3, #3
 800abc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc8:	4a8e      	ldr	r2, [pc, #568]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abca:	430b      	orrs	r3, r1
 800abcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abce:	e003      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800abe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abe8:	2300      	movs	r3, #0
 800abea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800abf2:	460b      	mov	r3, r1
 800abf4:	4313      	orrs	r3, r2
 800abf6:	f000 8099 	beq.w	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abfa:	4b83      	ldr	r3, [pc, #524]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a82      	ldr	r2, [pc, #520]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ac00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac06:	f7f8 fd7f 	bl	8003708 <HAL_GetTick>
 800ac0a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac0e:	e00b      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac10:	f7f8 fd7a 	bl	8003708 <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	2b64      	cmp	r3, #100	; 0x64
 800ac1e:	d903      	bls.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac26:	e005      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac28:	4b77      	ldr	r3, [pc, #476]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0ed      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ac34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d173      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ac3c:	4b71      	ldr	r3, [pc, #452]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac48:	4053      	eors	r3, r2
 800ac4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d015      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac52:	4b6c      	ldr	r3, [pc, #432]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac5e:	4b69      	ldr	r3, [pc, #420]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac62:	4a68      	ldr	r2, [pc, #416]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac6a:	4b66      	ldr	r3, [pc, #408]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6e:	4a65      	ldr	r2, [pc, #404]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac76:	4a63      	ldr	r2, [pc, #396]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ac7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac8a:	d118      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac8c:	f7f8 fd3c 	bl	8003708 <HAL_GetTick>
 800ac90:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac94:	e00d      	b.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac96:	f7f8 fd37 	bl	8003708 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aca0:	1ad2      	subs	r2, r2, r3
 800aca2:	f241 3388 	movw	r3, #5000	; 0x1388
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d903      	bls.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800acb0:	e005      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acb2:	4b54      	ldr	r3, [pc, #336]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb6:	f003 0302 	and.w	r3, r3, #2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0eb      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800acbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d129      	bne.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800acce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acd6:	d10e      	bne.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800acd8:	4b4a      	ldr	r3, [pc, #296]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ace0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace8:	091a      	lsrs	r2, r3, #4
 800acea:	4b48      	ldr	r3, [pc, #288]	; (800ae0c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800acec:	4013      	ands	r3, r2
 800acee:	4a45      	ldr	r2, [pc, #276]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf0:	430b      	orrs	r3, r1
 800acf2:	6113      	str	r3, [r2, #16]
 800acf4:	e005      	b.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800acf6:	4b43      	ldr	r3, [pc, #268]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	4a42      	ldr	r2, [pc, #264]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad00:	6113      	str	r3, [r2, #16]
 800ad02:	4b40      	ldr	r3, [pc, #256]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ad06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad12:	4a3c      	ldr	r2, [pc, #240]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad14:	430b      	orrs	r3, r1
 800ad16:	6713      	str	r3, [r2, #112]	; 0x70
 800ad18:	e008      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad1e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800ad22:	e003      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f002 0301 	and.w	r3, r2, #1
 800ad38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ad42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ad46:	460b      	mov	r3, r1
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	f000 808f 	beq.w	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ad4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad54:	2b28      	cmp	r3, #40	; 0x28
 800ad56:	d871      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ad58:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ad5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5e:	bf00      	nop
 800ad60:	0800ae45 	.word	0x0800ae45
 800ad64:	0800ae3d 	.word	0x0800ae3d
 800ad68:	0800ae3d 	.word	0x0800ae3d
 800ad6c:	0800ae3d 	.word	0x0800ae3d
 800ad70:	0800ae3d 	.word	0x0800ae3d
 800ad74:	0800ae3d 	.word	0x0800ae3d
 800ad78:	0800ae3d 	.word	0x0800ae3d
 800ad7c:	0800ae3d 	.word	0x0800ae3d
 800ad80:	0800ae11 	.word	0x0800ae11
 800ad84:	0800ae3d 	.word	0x0800ae3d
 800ad88:	0800ae3d 	.word	0x0800ae3d
 800ad8c:	0800ae3d 	.word	0x0800ae3d
 800ad90:	0800ae3d 	.word	0x0800ae3d
 800ad94:	0800ae3d 	.word	0x0800ae3d
 800ad98:	0800ae3d 	.word	0x0800ae3d
 800ad9c:	0800ae3d 	.word	0x0800ae3d
 800ada0:	0800ae27 	.word	0x0800ae27
 800ada4:	0800ae3d 	.word	0x0800ae3d
 800ada8:	0800ae3d 	.word	0x0800ae3d
 800adac:	0800ae3d 	.word	0x0800ae3d
 800adb0:	0800ae3d 	.word	0x0800ae3d
 800adb4:	0800ae3d 	.word	0x0800ae3d
 800adb8:	0800ae3d 	.word	0x0800ae3d
 800adbc:	0800ae3d 	.word	0x0800ae3d
 800adc0:	0800ae45 	.word	0x0800ae45
 800adc4:	0800ae3d 	.word	0x0800ae3d
 800adc8:	0800ae3d 	.word	0x0800ae3d
 800adcc:	0800ae3d 	.word	0x0800ae3d
 800add0:	0800ae3d 	.word	0x0800ae3d
 800add4:	0800ae3d 	.word	0x0800ae3d
 800add8:	0800ae3d 	.word	0x0800ae3d
 800addc:	0800ae3d 	.word	0x0800ae3d
 800ade0:	0800ae45 	.word	0x0800ae45
 800ade4:	0800ae3d 	.word	0x0800ae3d
 800ade8:	0800ae3d 	.word	0x0800ae3d
 800adec:	0800ae3d 	.word	0x0800ae3d
 800adf0:	0800ae3d 	.word	0x0800ae3d
 800adf4:	0800ae3d 	.word	0x0800ae3d
 800adf8:	0800ae3d 	.word	0x0800ae3d
 800adfc:	0800ae3d 	.word	0x0800ae3d
 800ae00:	0800ae45 	.word	0x0800ae45
 800ae04:	58024400 	.word	0x58024400
 800ae08:	58024800 	.word	0x58024800
 800ae0c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae14:	3308      	adds	r3, #8
 800ae16:	2101      	movs	r1, #1
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f001 fdcb 	bl	800c9b4 <RCCEx_PLL2_Config>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae24:	e00f      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2a:	3328      	adds	r3, #40	; 0x28
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 fe72 	bl	800cb18 <RCCEx_PLL3_Config>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae3a:	e004      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae42:	e000      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ae44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10a      	bne.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ae4e:	4bbf      	ldr	r3, [pc, #764]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ae56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae5c:	4abb      	ldr	r2, [pc, #748]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	6553      	str	r3, [r2, #84]	; 0x54
 800ae62:	e003      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f002 0302 	and.w	r3, r2, #2
 800ae78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	d041      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d824      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ae96:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aee9 	.word	0x0800aee9
 800aea0:	0800aeb5 	.word	0x0800aeb5
 800aea4:	0800aecb 	.word	0x0800aecb
 800aea8:	0800aee9 	.word	0x0800aee9
 800aeac:	0800aee9 	.word	0x0800aee9
 800aeb0:	0800aee9 	.word	0x0800aee9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb8:	3308      	adds	r3, #8
 800aeba:	2101      	movs	r1, #1
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 fd79 	bl	800c9b4 <RCCEx_PLL2_Config>
 800aec2:	4603      	mov	r3, r0
 800aec4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aec8:	e00f      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aece:	3328      	adds	r3, #40	; 0x28
 800aed0:	2101      	movs	r1, #1
 800aed2:	4618      	mov	r0, r3
 800aed4:	f001 fe20 	bl	800cb18 <RCCEx_PLL3_Config>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aede:	e004      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aee6:	e000      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800aee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10a      	bne.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aef2:	4b96      	ldr	r3, [pc, #600]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef6:	f023 0107 	bic.w	r1, r3, #7
 800aefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af00:	4a92      	ldr	r2, [pc, #584]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af02:	430b      	orrs	r3, r1
 800af04:	6553      	str	r3, [r2, #84]	; 0x54
 800af06:	e003      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f002 0304 	and.w	r3, r2, #4
 800af1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af20:	2300      	movs	r3, #0
 800af22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af26:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800af2a:	460b      	mov	r3, r1
 800af2c:	4313      	orrs	r3, r2
 800af2e:	d044      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af38:	2b05      	cmp	r3, #5
 800af3a:	d825      	bhi.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800af3c:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800af3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af42:	bf00      	nop
 800af44:	0800af91 	.word	0x0800af91
 800af48:	0800af5d 	.word	0x0800af5d
 800af4c:	0800af73 	.word	0x0800af73
 800af50:	0800af91 	.word	0x0800af91
 800af54:	0800af91 	.word	0x0800af91
 800af58:	0800af91 	.word	0x0800af91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af60:	3308      	adds	r3, #8
 800af62:	2101      	movs	r1, #1
 800af64:	4618      	mov	r0, r3
 800af66:	f001 fd25 	bl	800c9b4 <RCCEx_PLL2_Config>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af70:	e00f      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af76:	3328      	adds	r3, #40	; 0x28
 800af78:	2101      	movs	r1, #1
 800af7a:	4618      	mov	r0, r3
 800af7c:	f001 fdcc 	bl	800cb18 <RCCEx_PLL3_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af86:	e004      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af8e:	e000      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800af90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10b      	bne.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af9a:	4b6c      	ldr	r3, [pc, #432]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9e:	f023 0107 	bic.w	r1, r3, #7
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afaa:	4a68      	ldr	r2, [pc, #416]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afac:	430b      	orrs	r3, r1
 800afae:	6593      	str	r3, [r2, #88]	; 0x58
 800afb0:	e003      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	f002 0320 	and.w	r3, r2, #32
 800afc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afca:	2300      	movs	r3, #0
 800afcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4313      	orrs	r3, r2
 800afd8:	d055      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800afda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afe6:	d033      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800afe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afec:	d82c      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800afee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff2:	d02f      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800aff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff8:	d826      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800affa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800affe:	d02b      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b004:	d820      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b00a:	d012      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b00c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b010:	d81a      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d022      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b01a:	d115      	bne.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b020:	3308      	adds	r3, #8
 800b022:	2100      	movs	r1, #0
 800b024:	4618      	mov	r0, r3
 800b026:	f001 fcc5 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b02a:	4603      	mov	r3, r0
 800b02c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b030:	e015      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b036:	3328      	adds	r3, #40	; 0x28
 800b038:	2102      	movs	r1, #2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fd6c 	bl	800cb18 <RCCEx_PLL3_Config>
 800b040:	4603      	mov	r3, r0
 800b042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b046:	e00a      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b04e:	e006      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b050:	bf00      	nop
 800b052:	e004      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b054:	bf00      	nop
 800b056:	e002      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b058:	bf00      	nop
 800b05a:	e000      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b05c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b05e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10b      	bne.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b066:	4b39      	ldr	r3, [pc, #228]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b076:	4a35      	ldr	r2, [pc, #212]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b078:	430b      	orrs	r3, r1
 800b07a:	6553      	str	r3, [r2, #84]	; 0x54
 800b07c:	e003      	b.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b082:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b092:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b096:	2300      	movs	r3, #0
 800b098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b09c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	d058      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0b2:	d033      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b0b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0b8:	d82c      	bhi.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0be:	d02f      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0c4:	d826      	bhi.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0ca:	d02b      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b0cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0d0:	d820      	bhi.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0d6:	d012      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0dc:	d81a      	bhi.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d022      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e6:	d115      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 fc5f 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0fc:	e015      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b102:	3328      	adds	r3, #40	; 0x28
 800b104:	2102      	movs	r1, #2
 800b106:	4618      	mov	r0, r3
 800b108:	f001 fd06 	bl	800cb18 <RCCEx_PLL3_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b112:	e00a      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b11a:	e006      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b11c:	bf00      	nop
 800b11e:	e004      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b120:	bf00      	nop
 800b122:	e002      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b124:	bf00      	nop
 800b126:	e000      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b12a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10e      	bne.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b132:	4b06      	ldr	r3, [pc, #24]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b136:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b142:	4a02      	ldr	r2, [pc, #8]	; (800b14c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b144:	430b      	orrs	r3, r1
 800b146:	6593      	str	r3, [r2, #88]	; 0x58
 800b148:	e006      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b14a:	bf00      	nop
 800b14c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b150:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b154:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b164:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b168:	2300      	movs	r3, #0
 800b16a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b16e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b172:	460b      	mov	r3, r1
 800b174:	4313      	orrs	r3, r2
 800b176:	d055      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b180:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b184:	d033      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b186:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b18a:	d82c      	bhi.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b18c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b190:	d02f      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b196:	d826      	bhi.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b198:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b19c:	d02b      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b19e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b1a2:	d820      	bhi.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b1a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1a8:	d012      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b1aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ae:	d81a      	bhi.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d022      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b1b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1b8:	d115      	bne.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1be:	3308      	adds	r3, #8
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f001 fbf6 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1ce:	e015      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d4:	3328      	adds	r3, #40	; 0x28
 800b1d6:	2102      	movs	r1, #2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f001 fc9d 	bl	800cb18 <RCCEx_PLL3_Config>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1e4:	e00a      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1ec:	e006      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1ee:	bf00      	nop
 800b1f0:	e004      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1f2:	bf00      	nop
 800b1f4:	e002      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1f6:	bf00      	nop
 800b1f8:	e000      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10b      	bne.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b204:	4ba0      	ldr	r3, [pc, #640]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b208:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b214:	4a9c      	ldr	r2, [pc, #624]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b216:	430b      	orrs	r3, r1
 800b218:	6593      	str	r3, [r2, #88]	; 0x58
 800b21a:	e003      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b220:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f002 0308 	and.w	r3, r2, #8
 800b230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b234:	2300      	movs	r3, #0
 800b236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b23a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b23e:	460b      	mov	r3, r1
 800b240:	4313      	orrs	r3, r2
 800b242:	d01e      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b250:	d10c      	bne.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b256:	3328      	adds	r3, #40	; 0x28
 800b258:	2102      	movs	r1, #2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f001 fc5c 	bl	800cb18 <RCCEx_PLL3_Config>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b26c:	4b86      	ldr	r3, [pc, #536]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b270:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b27c:	4a82      	ldr	r2, [pc, #520]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b27e:	430b      	orrs	r3, r1
 800b280:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f002 0310 	and.w	r3, r2, #16
 800b28e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b292:	2300      	movs	r3, #0
 800b294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b298:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b29c:	460b      	mov	r3, r1
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	d01e      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ae:	d10c      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b4:	3328      	adds	r3, #40	; 0x28
 800b2b6:	2102      	movs	r1, #2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f001 fc2d 	bl	800cb18 <RCCEx_PLL3_Config>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b2ca:	4b6f      	ldr	r3, [pc, #444]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2da:	4a6b      	ldr	r2, [pc, #428]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b2ec:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2f2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	d03e      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b308:	d022      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b30a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b30e:	d81b      	bhi.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b318:	d00b      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b31a:	e015      	b.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b320:	3308      	adds	r3, #8
 800b322:	2100      	movs	r1, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f001 fb45 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b330:	e00f      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b336:	3328      	adds	r3, #40	; 0x28
 800b338:	2102      	movs	r1, #2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 fbec 	bl	800cb18 <RCCEx_PLL3_Config>
 800b340:	4603      	mov	r3, r0
 800b342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b346:	e004      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b34e:	e000      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b350:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10b      	bne.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b35a:	4b4b      	ldr	r3, [pc, #300]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b35e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b36a:	4a47      	ldr	r2, [pc, #284]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b36c:	430b      	orrs	r3, r1
 800b36e:	6593      	str	r3, [r2, #88]	; 0x58
 800b370:	e003      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b372:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b376:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b386:	673b      	str	r3, [r7, #112]	; 0x70
 800b388:	2300      	movs	r3, #0
 800b38a:	677b      	str	r3, [r7, #116]	; 0x74
 800b38c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b390:	460b      	mov	r3, r1
 800b392:	4313      	orrs	r3, r2
 800b394:	d03b      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b39e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3a2:	d01f      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b3a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3a8:	d818      	bhi.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b3aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3ae:	d003      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b3b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3b4:	d007      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b3b6:	e011      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b8:	4b33      	ldr	r3, [pc, #204]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	4a32      	ldr	r2, [pc, #200]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3c4:	e00f      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ca:	3328      	adds	r3, #40	; 0x28
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f001 fba2 	bl	800cb18 <RCCEx_PLL3_Config>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3da:	e004      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3e2:	e000      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10b      	bne.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3ee:	4b26      	ldr	r3, [pc, #152]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3fe:	4a22      	ldr	r2, [pc, #136]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b400:	430b      	orrs	r3, r1
 800b402:	6553      	str	r3, [r2, #84]	; 0x54
 800b404:	e003      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b406:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b40a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b41a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b41c:	2300      	movs	r3, #0
 800b41e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b420:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b424:	460b      	mov	r3, r1
 800b426:	4313      	orrs	r3, r2
 800b428:	d034      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b438:	d007      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b43a:	e011      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b43c:	4b12      	ldr	r3, [pc, #72]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	4a11      	ldr	r2, [pc, #68]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b448:	e00e      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44e:	3308      	adds	r3, #8
 800b450:	2102      	movs	r1, #2
 800b452:	4618      	mov	r0, r3
 800b454:	f001 faae 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b45e:	e003      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b466:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b468:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10d      	bne.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b470:	4b05      	ldr	r3, [pc, #20]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b47e:	4a02      	ldr	r2, [pc, #8]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b480:	430b      	orrs	r3, r1
 800b482:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b484:	e006      	b.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b486:	bf00      	nop
 800b488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b48c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b490:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b4a0:	663b      	str	r3, [r7, #96]	; 0x60
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	667b      	str	r3, [r7, #100]	; 0x64
 800b4a6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	d00c      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b4:	3328      	adds	r3, #40	; 0x28
 800b4b6:	2102      	movs	r1, #2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f001 fb2d 	bl	800cb18 <RCCEx_PLL3_Config>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b4d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4d8:	2300      	movs	r3, #0
 800b4da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4dc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	d036      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4f0:	d018      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b4f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4f6:	d811      	bhi.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4fc:	d014      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b4fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b502:	d80b      	bhi.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b504:	2b00      	cmp	r3, #0
 800b506:	d011      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b50c:	d106      	bne.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b50e:	4bb7      	ldr	r3, [pc, #732]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b512:	4ab6      	ldr	r2, [pc, #728]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b518:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b51a:	e008      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b522:	e004      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b524:	bf00      	nop
 800b526:	e002      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b528:	bf00      	nop
 800b52a:	e000      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b52c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b52e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10a      	bne.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b536:	4bad      	ldr	r3, [pc, #692]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b544:	4aa9      	ldr	r2, [pc, #676]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b546:	430b      	orrs	r3, r1
 800b548:	6553      	str	r3, [r2, #84]	; 0x54
 800b54a:	e003      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b550:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b560:	653b      	str	r3, [r7, #80]	; 0x50
 800b562:	2300      	movs	r3, #0
 800b564:	657b      	str	r3, [r7, #84]	; 0x54
 800b566:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b56a:	460b      	mov	r3, r1
 800b56c:	4313      	orrs	r3, r2
 800b56e:	d009      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b570:	4b9e      	ldr	r3, [pc, #632]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b574:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57e:	4a9b      	ldr	r2, [pc, #620]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b580:	430b      	orrs	r3, r1
 800b582:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b590:	64bb      	str	r3, [r7, #72]	; 0x48
 800b592:	2300      	movs	r3, #0
 800b594:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b596:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b59a:	460b      	mov	r3, r1
 800b59c:	4313      	orrs	r3, r2
 800b59e:	d009      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b5a0:	4b92      	ldr	r3, [pc, #584]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5ae:	4a8f      	ldr	r2, [pc, #572]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b5c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	647b      	str	r3, [r7, #68]	; 0x44
 800b5c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	d00e      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b5d0:	4b86      	ldr	r3, [pc, #536]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	4a85      	ldr	r2, [pc, #532]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b5da:	6113      	str	r3, [r2, #16]
 800b5dc:	4b83      	ldr	r3, [pc, #524]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5de:	6919      	ldr	r1, [r3, #16]
 800b5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5e8:	4a80      	ldr	r2, [pc, #512]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b5fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b600:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b604:	460b      	mov	r3, r1
 800b606:	4313      	orrs	r3, r2
 800b608:	d009      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b60a:	4b78      	ldr	r3, [pc, #480]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b60e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b618:	4a74      	ldr	r2, [pc, #464]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b61a:	430b      	orrs	r3, r1
 800b61c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b62a:	633b      	str	r3, [r7, #48]	; 0x30
 800b62c:	2300      	movs	r3, #0
 800b62e:	637b      	str	r3, [r7, #52]	; 0x34
 800b630:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b634:	460b      	mov	r3, r1
 800b636:	4313      	orrs	r3, r2
 800b638:	d00a      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b63a:	4b6c      	ldr	r3, [pc, #432]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b63e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b64a:	4a68      	ldr	r2, [pc, #416]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b64c:	430b      	orrs	r3, r1
 800b64e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	2100      	movs	r1, #0
 800b65a:	62b9      	str	r1, [r7, #40]	; 0x28
 800b65c:	f003 0301 	and.w	r3, r3, #1
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b662:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b666:	460b      	mov	r3, r1
 800b668:	4313      	orrs	r3, r2
 800b66a:	d011      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	3308      	adds	r3, #8
 800b672:	2100      	movs	r1, #0
 800b674:	4618      	mov	r0, r3
 800b676:	f001 f99d 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b680:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b68c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	2100      	movs	r1, #0
 800b69a:	6239      	str	r1, [r7, #32]
 800b69c:	f003 0302 	and.w	r3, r3, #2
 800b6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	d011      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f001 f97d 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b6c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	2100      	movs	r1, #0
 800b6da:	61b9      	str	r1, [r7, #24]
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	61fb      	str	r3, [r7, #28]
 800b6e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	d011      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	2102      	movs	r1, #2
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f001 f95d 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b700:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b70c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	2100      	movs	r1, #0
 800b71a:	6139      	str	r1, [r7, #16]
 800b71c:	f003 0308 	and.w	r3, r3, #8
 800b720:	617b      	str	r3, [r7, #20]
 800b722:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b726:	460b      	mov	r3, r1
 800b728:	4313      	orrs	r3, r2
 800b72a:	d011      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b730:	3328      	adds	r3, #40	; 0x28
 800b732:	2100      	movs	r1, #0
 800b734:	4618      	mov	r0, r3
 800b736:	f001 f9ef 	bl	800cb18 <RCCEx_PLL3_Config>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b74c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	2100      	movs	r1, #0
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	f003 0310 	and.w	r3, r3, #16
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b766:	460b      	mov	r3, r1
 800b768:	4313      	orrs	r3, r2
 800b76a:	d011      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b770:	3328      	adds	r3, #40	; 0x28
 800b772:	2101      	movs	r1, #1
 800b774:	4618      	mov	r0, r3
 800b776:	f001 f9cf 	bl	800cb18 <RCCEx_PLL3_Config>
 800b77a:	4603      	mov	r3, r0
 800b77c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b784:	2b00      	cmp	r3, #0
 800b786:	d003      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b78c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	2100      	movs	r1, #0
 800b79a:	6039      	str	r1, [r7, #0]
 800b79c:	f003 0320 	and.w	r3, r3, #32
 800b7a0:	607b      	str	r3, [r7, #4]
 800b7a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	d011      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	3328      	adds	r3, #40	; 0x28
 800b7b2:	2102      	movs	r1, #2
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f001 f9af 	bl	800cb18 <RCCEx_PLL3_Config>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b7c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b7d0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e000      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7ea:	bf00      	nop
 800b7ec:	58024400 	.word	0x58024400

0800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b090      	sub	sp, #64	; 0x40
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b7fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7fe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b802:	430b      	orrs	r3, r1
 800b804:	f040 8094 	bne.w	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b808:	4b9b      	ldr	r3, [pc, #620]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80c:	f003 0307 	and.w	r3, r3, #7
 800b810:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	2b04      	cmp	r3, #4
 800b816:	f200 8087 	bhi.w	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b81a:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b820:	0800b835 	.word	0x0800b835
 800b824:	0800b85d 	.word	0x0800b85d
 800b828:	0800b885 	.word	0x0800b885
 800b82c:	0800b921 	.word	0x0800b921
 800b830:	0800b8ad 	.word	0x0800b8ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b834:	4b90      	ldr	r3, [pc, #576]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b83c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b840:	d108      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b846:	4618      	mov	r0, r3
 800b848:	f000 ff62 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b850:	f000 bc93 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b858:	f000 bc8f 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b85c:	4b86      	ldr	r3, [pc, #536]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b868:	d108      	bne.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b86a:	f107 0318 	add.w	r3, r7, #24
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 fca6 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b878:	f000 bc7f 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b880:	f000 bc7b 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b884:	4b7c      	ldr	r3, [pc, #496]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b88c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b890:	d108      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	4618      	mov	r0, r3
 800b898:	f000 fde6 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8a0:	f000 bc6b 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8a8:	f000 bc67 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8ac:	4b72      	ldr	r3, [pc, #456]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8b6:	4b70      	ldr	r3, [pc, #448]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0304 	and.w	r3, r3, #4
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d10c      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d109      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8c8:	4b6b      	ldr	r3, [pc, #428]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	08db      	lsrs	r3, r3, #3
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	4a6a      	ldr	r2, [pc, #424]	; (800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b8d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8da:	e01f      	b.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8dc:	4b66      	ldr	r3, [pc, #408]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e8:	d106      	bne.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8f0:	d102      	bne.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8f2:	4b63      	ldr	r3, [pc, #396]	; (800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8f6:	e011      	b.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8f8:	4b5f      	ldr	r3, [pc, #380]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b904:	d106      	bne.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90c:	d102      	bne.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b90e:	4b5d      	ldr	r3, [pc, #372]	; (800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b910:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b912:	e003      	b.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b914:	2300      	movs	r3, #0
 800b916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b918:	f000 bc2f 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b91c:	f000 bc2d 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b920:	4b59      	ldr	r3, [pc, #356]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b924:	f000 bc29 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b92c:	f000 bc25 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b934:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b938:	430b      	orrs	r3, r1
 800b93a:	f040 80a7 	bne.w	800ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b93e:	4b4e      	ldr	r3, [pc, #312]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b942:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b946:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b94e:	d054      	beq.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b956:	f200 808b 	bhi.w	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b960:	f000 8083 	beq.w	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b96a:	f200 8081 	bhi.w	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b974:	d02f      	beq.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b97c:	d878      	bhi.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	2b00      	cmp	r3, #0
 800b982:	d004      	beq.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b98a:	d012      	beq.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b98c:	e070      	b.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b98e:	4b3a      	ldr	r3, [pc, #232]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b99a:	d107      	bne.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b99c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 feb5 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9aa:	e3e6      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b0:	e3e3      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9b2:	4b31      	ldr	r3, [pc, #196]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9be:	d107      	bne.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9c0:	f107 0318 	add.w	r3, r7, #24
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f000 fbfb 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ce:	e3d4      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d4:	e3d1      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9d6:	4b28      	ldr	r3, [pc, #160]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e2:	d107      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9e4:	f107 030c 	add.w	r3, r7, #12
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 fd3d 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9f2:	e3c2      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9f8:	e3bf      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9fa:	4b1f      	ldr	r3, [pc, #124]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba04:	4b1c      	ldr	r3, [pc, #112]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b04      	cmp	r3, #4
 800ba0e:	d10c      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d109      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba16:	4b18      	ldr	r3, [pc, #96]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	08db      	lsrs	r3, r3, #3
 800ba1c:	f003 0303 	and.w	r3, r3, #3
 800ba20:	4a16      	ldr	r2, [pc, #88]	; (800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ba22:	fa22 f303 	lsr.w	r3, r2, r3
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba28:	e01e      	b.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba36:	d106      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ba38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba3e:	d102      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba40:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba44:	e010      	b.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba46:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba52:	d106      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ba54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba5a:	d102      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba5c:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba60:	e002      	b.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ba66:	e388      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba68:	e387      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba6a:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6e:	e384      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba74:	e381      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba76:	bf00      	nop
 800ba78:	58024400 	.word	0x58024400
 800ba7c:	03d09000 	.word	0x03d09000
 800ba80:	003d0900 	.word	0x003d0900
 800ba84:	02faf080 	.word	0x02faf080
 800ba88:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ba8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba90:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ba94:	430b      	orrs	r3, r1
 800ba96:	f040 809c 	bne.w	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ba9a:	4b9e      	ldr	r3, [pc, #632]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba9e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800baa2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800baaa:	d054      	beq.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800baac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bab2:	f200 808b 	bhi.w	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800babc:	f000 8083 	beq.w	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bac6:	f200 8081 	bhi.w	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bad0:	d02f      	beq.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bad8:	d878      	bhi.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bae6:	d012      	beq.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bae8:	e070      	b.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800baea:	4b8a      	ldr	r3, [pc, #552]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baf6:	d107      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fe07 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb06:	e338      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0c:	e335      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb0e:	4b81      	ldr	r3, [pc, #516]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb1a:	d107      	bne.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb1c:	f107 0318 	add.w	r3, r7, #24
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 fb4d 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb2a:	e326      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb30:	e323      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb32:	4b78      	ldr	r3, [pc, #480]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb3e:	d107      	bne.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb40:	f107 030c 	add.w	r3, r7, #12
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 fc8f 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb4e:	e314      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb50:	2300      	movs	r3, #0
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb54:	e311      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb56:	4b6f      	ldr	r3, [pc, #444]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb60:	4b6c      	ldr	r3, [pc, #432]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 0304 	and.w	r3, r3, #4
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d10c      	bne.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d109      	bne.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb72:	4b68      	ldr	r3, [pc, #416]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	08db      	lsrs	r3, r3, #3
 800bb78:	f003 0303 	and.w	r3, r3, #3
 800bb7c:	4a66      	ldr	r2, [pc, #408]	; (800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bb7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb84:	e01e      	b.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb86:	4b63      	ldr	r3, [pc, #396]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb92:	d106      	bne.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb9a:	d102      	bne.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb9c:	4b5f      	ldr	r3, [pc, #380]	; (800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba0:	e010      	b.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bba2:	4b5c      	ldr	r3, [pc, #368]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbae:	d106      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbb6:	d102      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bbb8:	4b59      	ldr	r3, [pc, #356]	; (800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbbc:	e002      	b.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bbc2:	e2da      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbc4:	e2d9      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bbc6:	4b57      	ldr	r3, [pc, #348]	; (800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbca:	e2d6      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd0:	e2d3      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bbd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbd6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bbda:	430b      	orrs	r3, r1
 800bbdc:	f040 80a7 	bne.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bbe0:	4b4c      	ldr	r3, [pc, #304]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bbe8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbf0:	d055      	beq.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbf8:	f200 8096 	bhi.w	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc02:	f000 8084 	beq.w	800bd0e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc0c:	f200 808c 	bhi.w	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc16:	d030      	beq.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc1e:	f200 8083 	bhi.w	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d004      	beq.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc2e:	d012      	beq.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bc30:	e07a      	b.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc32:	4b38      	ldr	r3, [pc, #224]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 fd63 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc4e:	e294      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc54:	e291      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc56:	4b2f      	ldr	r3, [pc, #188]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc62:	d107      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc64:	f107 0318 	add.w	r3, r7, #24
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 faa9 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc72:	e282      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc78:	e27f      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc7a:	4b26      	ldr	r3, [pc, #152]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc86:	d107      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc88:	f107 030c 	add.w	r3, r7, #12
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 fbeb 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc96:	e270      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc9c:	e26d      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bca6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bca8:	4b1a      	ldr	r3, [pc, #104]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b04      	cmp	r3, #4
 800bcb2:	d10c      	bne.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d109      	bne.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcba:	4b16      	ldr	r3, [pc, #88]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	08db      	lsrs	r3, r3, #3
 800bcc0:	f003 0303 	and.w	r3, r3, #3
 800bcc4:	4a14      	ldr	r2, [pc, #80]	; (800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bcc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bccc:	e01e      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcce:	4b11      	ldr	r3, [pc, #68]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcda:	d106      	bne.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bce2:	d102      	bne.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bce4:	4b0d      	ldr	r3, [pc, #52]	; (800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce8:	e010      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcea:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcf6:	d106      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcfe:	d102      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd00:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd04:	e002      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd0a:	e236      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd0c:	e235      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd0e:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bd10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd12:	e232      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd14:	58024400 	.word	0x58024400
 800bd18:	03d09000 	.word	0x03d09000
 800bd1c:	003d0900 	.word	0x003d0900
 800bd20:	02faf080 	.word	0x02faf080
 800bd24:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2c:	e225      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bd2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd32:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bd36:	430b      	orrs	r3, r1
 800bd38:	f040 8085 	bne.w	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bd3c:	4b9c      	ldr	r3, [pc, #624]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd40:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bd44:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd4c:	d06b      	beq.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd54:	d874      	bhi.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd5c:	d056      	beq.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd64:	d86c      	bhi.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd6c:	d03b      	beq.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd74:	d864      	bhi.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd7c:	d021      	beq.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd84:	d85c      	bhi.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d004      	beq.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd92:	d004      	beq.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bd94:	e054      	b.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bd96:	f7fe fb5f 	bl	800a458 <HAL_RCC_GetPCLK1Freq>
 800bd9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd9c:	e1ed      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd9e:	4b84      	ldr	r3, [pc, #528]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bda6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdaa:	d107      	bne.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdac:	f107 0318 	add.w	r3, r7, #24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 fa05 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdba:	e1de      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc0:	e1db      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdc2:	4b7b      	ldr	r3, [pc, #492]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdce:	d107      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdd0:	f107 030c 	add.w	r3, r7, #12
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 fb47 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdde:	e1cc      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde4:	e1c9      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bde6:	4b72      	ldr	r3, [pc, #456]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0304 	and.w	r3, r3, #4
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d109      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdf2:	4b6f      	ldr	r3, [pc, #444]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	08db      	lsrs	r3, r3, #3
 800bdf8:	f003 0303 	and.w	r3, r3, #3
 800bdfc:	4a6d      	ldr	r2, [pc, #436]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bdfe:	fa22 f303 	lsr.w	r3, r2, r3
 800be02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be04:	e1b9      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be0a:	e1b6      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800be0c:	4b68      	ldr	r3, [pc, #416]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be18:	d102      	bne.n	800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800be1a:	4b67      	ldr	r3, [pc, #412]	; (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800be1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be1e:	e1ac      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be24:	e1a9      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800be26:	4b62      	ldr	r3, [pc, #392]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be32:	d102      	bne.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800be34:	4b61      	ldr	r3, [pc, #388]	; (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be38:	e19f      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be3e:	e19c      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be44:	e199      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800be46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be4a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800be4e:	430b      	orrs	r3, r1
 800be50:	d173      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800be52:	4b57      	ldr	r3, [pc, #348]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be5a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be62:	d02f      	beq.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be6a:	d863      	bhi.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800be6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d004      	beq.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be78:	d012      	beq.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800be7a:	e05b      	b.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be7c:	4b4c      	ldr	r3, [pc, #304]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be88:	d107      	bne.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be8a:	f107 0318 	add.w	r3, r7, #24
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 f996 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be98:	e16f      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be9e:	e16c      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bea0:	4b43      	ldr	r3, [pc, #268]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beac:	d107      	bne.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beae:	f107 030c 	add.w	r3, r7, #12
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fad8 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bebc:	e15d      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec2:	e15a      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bec4:	4b3a      	ldr	r3, [pc, #232]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800becc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bece:	4b38      	ldr	r3, [pc, #224]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0304 	and.w	r3, r3, #4
 800bed6:	2b04      	cmp	r3, #4
 800bed8:	d10c      	bne.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d109      	bne.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bee0:	4b33      	ldr	r3, [pc, #204]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	08db      	lsrs	r3, r3, #3
 800bee6:	f003 0303 	and.w	r3, r3, #3
 800beea:	4a32      	ldr	r2, [pc, #200]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800beec:	fa22 f303 	lsr.w	r3, r2, r3
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bef2:	e01e      	b.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bef4:	4b2e      	ldr	r3, [pc, #184]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800befc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf00:	d106      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf08:	d102      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf0a:	4b2b      	ldr	r3, [pc, #172]	; (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf0e:	e010      	b.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf10:	4b27      	ldr	r3, [pc, #156]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf1c:	d106      	bne.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf24:	d102      	bne.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf26:	4b25      	ldr	r3, [pc, #148]	; (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bf28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf2a:	e002      	b.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf30:	e123      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf32:	e122      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf38:	e11f      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bf3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf3e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bf42:	430b      	orrs	r3, r1
 800bf44:	d13c      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bf46:	4b1a      	ldr	r3, [pc, #104]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf4e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d004      	beq.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf5c:	d012      	beq.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bf5e:	e023      	b.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf60:	4b13      	ldr	r3, [pc, #76]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf6c:	d107      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fbcc 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf7c:	e0fd      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf82:	e0fa      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf84:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf90:	d107      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf92:	f107 0318 	add.w	r3, r7, #24
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 f912 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfa0:	e0eb      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa6:	e0e8      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfac:	e0e5      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfae:	bf00      	nop
 800bfb0:	58024400 	.word	0x58024400
 800bfb4:	03d09000 	.word	0x03d09000
 800bfb8:	003d0900 	.word	0x003d0900
 800bfbc:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bfc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfc4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	f040 8085 	bne.w	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bfce:	4b6d      	ldr	r3, [pc, #436]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bfd6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfde:	d06b      	beq.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfe6:	d874      	bhi.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfee:	d056      	beq.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bff6:	d86c      	bhi.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bffe:	d03b      	beq.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c006:	d864      	bhi.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c00e:	d021      	beq.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c016:	d85c      	bhi.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d004      	beq.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c024:	d004      	beq.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c026:	e054      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c028:	f000 f8b4 	bl	800c194 <HAL_RCCEx_GetD3PCLK1Freq>
 800c02c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c02e:	e0a4      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c030:	4b54      	ldr	r3, [pc, #336]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c03c:	d107      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c03e:	f107 0318 	add.w	r3, r7, #24
 800c042:	4618      	mov	r0, r3
 800c044:	f000 f8bc 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c04c:	e095      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c052:	e092      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c054:	4b4b      	ldr	r3, [pc, #300]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c05c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c060:	d107      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c062:	f107 030c 	add.w	r3, r7, #12
 800c066:	4618      	mov	r0, r3
 800c068:	f000 f9fe 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c070:	e083      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c076:	e080      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c078:	4b42      	ldr	r3, [pc, #264]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b04      	cmp	r3, #4
 800c082:	d109      	bne.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c084:	4b3f      	ldr	r3, [pc, #252]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	08db      	lsrs	r3, r3, #3
 800c08a:	f003 0303 	and.w	r3, r3, #3
 800c08e:	4a3e      	ldr	r2, [pc, #248]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c090:	fa22 f303 	lsr.w	r3, r2, r3
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c096:	e070      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c09c:	e06d      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c09e:	4b39      	ldr	r3, [pc, #228]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0aa:	d102      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c0ac:	4b37      	ldr	r3, [pc, #220]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b0:	e063      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b6:	e060      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0b8:	4b32      	ldr	r3, [pc, #200]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0c4:	d102      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c0c6:	4b32      	ldr	r3, [pc, #200]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ca:	e056      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d0:	e053      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d6:	e050      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0dc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c0e0:	430b      	orrs	r3, r1
 800c0e2:	d148      	bne.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c0e4:	4b27      	ldr	r3, [pc, #156]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0f4:	d02a      	beq.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fc:	d838      	bhi.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c10a:	d00d      	beq.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c10c:	e030      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c10e:	4b1d      	ldr	r3, [pc, #116]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11a:	d102      	bne.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c11c:	4b1c      	ldr	r3, [pc, #112]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c120:	e02b      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c126:	e028      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c128:	4b16      	ldr	r3, [pc, #88]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c134:	d107      	bne.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fae8 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c144:	e019      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c14a:	e016      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c158:	d107      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c15a:	f107 0318 	add.w	r3, r7, #24
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 f82e 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c168:	e007      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16e:	e004      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c174:	e001      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3740      	adds	r7, #64	; 0x40
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	58024400 	.word	0x58024400
 800c188:	03d09000 	.word	0x03d09000
 800c18c:	003d0900 	.word	0x003d0900
 800c190:	02faf080 	.word	0x02faf080

0800c194 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c198:	f7fe f92e 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800c19c:	4602      	mov	r2, r0
 800c19e:	4b06      	ldr	r3, [pc, #24]	; (800c1b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	091b      	lsrs	r3, r3, #4
 800c1a4:	f003 0307 	and.w	r3, r3, #7
 800c1a8:	4904      	ldr	r1, [pc, #16]	; (800c1bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c1aa:	5ccb      	ldrb	r3, [r1, r3]
 800c1ac:	f003 031f 	and.w	r3, r3, #31
 800c1b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	58024400 	.word	0x58024400
 800c1bc:	08017fd8 	.word	0x08017fd8

0800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b089      	sub	sp, #36	; 0x24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1c8:	4ba1      	ldr	r3, [pc, #644]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	f003 0303 	and.w	r3, r3, #3
 800c1d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c1d2:	4b9f      	ldr	r3, [pc, #636]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d6:	0b1b      	lsrs	r3, r3, #12
 800c1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c1de:	4b9c      	ldr	r3, [pc, #624]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e2:	091b      	lsrs	r3, r3, #4
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c1ea:	4b99      	ldr	r3, [pc, #612]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ee:	08db      	lsrs	r3, r3, #3
 800c1f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	fb02 f303 	mul.w	r3, r2, r3
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 8111 	beq.w	800c430 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	2b02      	cmp	r3, #2
 800c212:	f000 8083 	beq.w	800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	f200 80a1 	bhi.w	800c360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d003      	beq.n	800c22c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d056      	beq.n	800c2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c22a:	e099      	b.n	800c360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c22c:	4b88      	ldr	r3, [pc, #544]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b00      	cmp	r3, #0
 800c236:	d02d      	beq.n	800c294 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c238:	4b85      	ldr	r3, [pc, #532]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	08db      	lsrs	r3, r3, #3
 800c23e:	f003 0303 	and.w	r3, r3, #3
 800c242:	4a84      	ldr	r2, [pc, #528]	; (800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c244:	fa22 f303 	lsr.w	r3, r2, r3
 800c248:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	ee07 3a90 	vmov	s15, r3
 800c250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c262:	4b7b      	ldr	r3, [pc, #492]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c26a:	ee07 3a90 	vmov	s15, r3
 800c26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c272:	ed97 6a03 	vldr	s12, [r7, #12]
 800c276:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c292:	e087      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	ee07 3a90 	vmov	s15, r3
 800c29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a6:	4b6a      	ldr	r3, [pc, #424]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ae:	ee07 3a90 	vmov	s15, r3
 800c2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2d6:	e065      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	ee07 3a90 	vmov	s15, r3
 800c2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ea:	4b59      	ldr	r3, [pc, #356]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c31a:	e043      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	ee07 3a90 	vmov	s15, r3
 800c322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c326:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c32e:	4b48      	ldr	r3, [pc, #288]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c342:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c35e:	e021      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	ee07 3a90 	vmov	s15, r3
 800c366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c36a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c372:	4b37      	ldr	r3, [pc, #220]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c37a:	ee07 3a90 	vmov	s15, r3
 800c37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c382:	ed97 6a03 	vldr	s12, [r7, #12]
 800c386:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c3a4:	4b2a      	ldr	r3, [pc, #168]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	0a5b      	lsrs	r3, r3, #9
 800c3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ae:	ee07 3a90 	vmov	s15, r3
 800c3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ca:	ee17 2a90 	vmov	r2, s15
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c3d2:	4b1f      	ldr	r3, [pc, #124]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d6:	0c1b      	lsrs	r3, r3, #16
 800c3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3f8:	ee17 2a90 	vmov	r2, s15
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c400:	4b13      	ldr	r3, [pc, #76]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c404:	0e1b      	lsrs	r3, r3, #24
 800c406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40a:	ee07 3a90 	vmov	s15, r3
 800c40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c426:	ee17 2a90 	vmov	r2, s15
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c42e:	e008      	b.n	800c442 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	609a      	str	r2, [r3, #8]
}
 800c442:	bf00      	nop
 800c444:	3724      	adds	r7, #36	; 0x24
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	58024400 	.word	0x58024400
 800c454:	03d09000 	.word	0x03d09000
 800c458:	46000000 	.word	0x46000000
 800c45c:	4c742400 	.word	0x4c742400
 800c460:	4a742400 	.word	0x4a742400
 800c464:	4c3ebc20 	.word	0x4c3ebc20

0800c468 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c468:	b480      	push	{r7}
 800c46a:	b089      	sub	sp, #36	; 0x24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c470:	4ba1      	ldr	r3, [pc, #644]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	f003 0303 	and.w	r3, r3, #3
 800c478:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c47a:	4b9f      	ldr	r3, [pc, #636]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47e:	0d1b      	lsrs	r3, r3, #20
 800c480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c484:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c486:	4b9c      	ldr	r3, [pc, #624]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48a:	0a1b      	lsrs	r3, r3, #8
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c492:	4b99      	ldr	r3, [pc, #612]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c496:	08db      	lsrs	r3, r3, #3
 800c498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	fb02 f303 	mul.w	r3, r2, r3
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 8111 	beq.w	800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	f000 8083 	beq.w	800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	f200 80a1 	bhi.w	800c608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d003      	beq.n	800c4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d056      	beq.n	800c580 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c4d2:	e099      	b.n	800c608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4d4:	4b88      	ldr	r3, [pc, #544]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0320 	and.w	r3, r3, #32
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d02d      	beq.n	800c53c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4e0:	4b85      	ldr	r3, [pc, #532]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	08db      	lsrs	r3, r3, #3
 800c4e6:	f003 0303 	and.w	r3, r3, #3
 800c4ea:	4a84      	ldr	r2, [pc, #528]	; (800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c4ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	ee07 3a90 	vmov	s15, r3
 800c4f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c50a:	4b7b      	ldr	r3, [pc, #492]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c512:	ee07 3a90 	vmov	s15, r3
 800c516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c51e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c536:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c53a:	e087      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	ee07 3a90 	vmov	s15, r3
 800c542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c546:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c54e:	4b6a      	ldr	r3, [pc, #424]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c556:	ee07 3a90 	vmov	s15, r3
 800c55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c55e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c562:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c57a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c57e:	e065      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	ee07 3a90 	vmov	s15, r3
 800c586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c58a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c592:	4b59      	ldr	r3, [pc, #356]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5c2:	e043      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c70c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5d6:	4b48      	ldr	r3, [pc, #288]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c606:	e021      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c612:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c61a:	4b37      	ldr	r3, [pc, #220]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c622:	ee07 3a90 	vmov	s15, r3
 800c626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c62e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c64a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c64c:	4b2a      	ldr	r3, [pc, #168]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c650:	0a5b      	lsrs	r3, r3, #9
 800c652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c662:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c666:	edd7 6a07 	vldr	s13, [r7, #28]
 800c66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c66e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c672:	ee17 2a90 	vmov	r2, s15
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c67a:	4b1f      	ldr	r3, [pc, #124]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67e:	0c1b      	lsrs	r3, r3, #16
 800c680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c684:	ee07 3a90 	vmov	s15, r3
 800c688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c690:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c694:	edd7 6a07 	vldr	s13, [r7, #28]
 800c698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c69c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6a0:	ee17 2a90 	vmov	r2, s15
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c6a8:	4b13      	ldr	r3, [pc, #76]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ac:	0e1b      	lsrs	r3, r3, #24
 800c6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b2:	ee07 3a90 	vmov	s15, r3
 800c6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6ce:	ee17 2a90 	vmov	r2, s15
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c6d6:	e008      	b.n	800c6ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	609a      	str	r2, [r3, #8]
}
 800c6ea:	bf00      	nop
 800c6ec:	3724      	adds	r7, #36	; 0x24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	58024400 	.word	0x58024400
 800c6fc:	03d09000 	.word	0x03d09000
 800c700:	46000000 	.word	0x46000000
 800c704:	4c742400 	.word	0x4c742400
 800c708:	4a742400 	.word	0x4a742400
 800c70c:	4c3ebc20 	.word	0x4c3ebc20

0800c710 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c710:	b480      	push	{r7}
 800c712:	b089      	sub	sp, #36	; 0x24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c718:	4ba0      	ldr	r3, [pc, #640]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71c:	f003 0303 	and.w	r3, r3, #3
 800c720:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c722:	4b9e      	ldr	r3, [pc, #632]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c726:	091b      	lsrs	r3, r3, #4
 800c728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c72c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c72e:	4b9b      	ldr	r3, [pc, #620]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c738:	4b98      	ldr	r3, [pc, #608]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c73c:	08db      	lsrs	r3, r3, #3
 800c73e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	fb02 f303 	mul.w	r3, r2, r3
 800c748:	ee07 3a90 	vmov	s15, r3
 800c74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c750:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 8111 	beq.w	800c97e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	2b02      	cmp	r3, #2
 800c760:	f000 8083 	beq.w	800c86a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2b02      	cmp	r3, #2
 800c768:	f200 80a1 	bhi.w	800c8ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d056      	beq.n	800c826 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c778:	e099      	b.n	800c8ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c77a:	4b88      	ldr	r3, [pc, #544]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0320 	and.w	r3, r3, #32
 800c782:	2b00      	cmp	r3, #0
 800c784:	d02d      	beq.n	800c7e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c786:	4b85      	ldr	r3, [pc, #532]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	08db      	lsrs	r3, r3, #3
 800c78c:	f003 0303 	and.w	r3, r3, #3
 800c790:	4a83      	ldr	r2, [pc, #524]	; (800c9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c792:	fa22 f303 	lsr.w	r3, r2, r3
 800c796:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	ee07 3a90 	vmov	s15, r3
 800c7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7b0:	4b7a      	ldr	r3, [pc, #488]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b8:	ee07 3a90 	vmov	s15, r3
 800c7bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7e0:	e087      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	ee07 3a90 	vmov	s15, r3
 800c7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c7f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7f4:	4b69      	ldr	r3, [pc, #420]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7fc:	ee07 3a90 	vmov	s15, r3
 800c800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c804:	ed97 6a03 	vldr	s12, [r7, #12]
 800c808:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c80c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c81c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c820:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c824:	e065      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	ee07 3a90 	vmov	s15, r3
 800c82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c830:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c9ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c838:	4b58      	ldr	r3, [pc, #352]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c840:	ee07 3a90 	vmov	s15, r3
 800c844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c848:	ed97 6a03 	vldr	s12, [r7, #12]
 800c84c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c868:	e043      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	ee07 3a90 	vmov	s15, r3
 800c870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c874:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c87c:	4b47      	ldr	r3, [pc, #284]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c884:	ee07 3a90 	vmov	s15, r3
 800c888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c890:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c89c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8ac:	e021      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	ee07 3a90 	vmov	s15, r3
 800c8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c8bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8c0:	4b36      	ldr	r3, [pc, #216]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c8:	ee07 3a90 	vmov	s15, r3
 800c8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c8f2:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f6:	0a5b      	lsrs	r3, r3, #9
 800c8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8fc:	ee07 3a90 	vmov	s15, r3
 800c900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c918:	ee17 2a90 	vmov	r2, s15
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c920:	4b1e      	ldr	r3, [pc, #120]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c924:	0c1b      	lsrs	r3, r3, #16
 800c926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c946:	ee17 2a90 	vmov	r2, s15
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c94e:	4b13      	ldr	r3, [pc, #76]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c952:	0e1b      	lsrs	r3, r3, #24
 800c954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c958:	ee07 3a90 	vmov	s15, r3
 800c95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c968:	edd7 6a07 	vldr	s13, [r7, #28]
 800c96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c974:	ee17 2a90 	vmov	r2, s15
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c97c:	e008      	b.n	800c990 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	609a      	str	r2, [r3, #8]
}
 800c990:	bf00      	nop
 800c992:	3724      	adds	r7, #36	; 0x24
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	58024400 	.word	0x58024400
 800c9a0:	03d09000 	.word	0x03d09000
 800c9a4:	46000000 	.word	0x46000000
 800c9a8:	4c742400 	.word	0x4c742400
 800c9ac:	4a742400 	.word	0x4a742400
 800c9b0:	4c3ebc20 	.word	0x4c3ebc20

0800c9b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c9c2:	4b53      	ldr	r3, [pc, #332]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c6:	f003 0303 	and.w	r3, r3, #3
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d101      	bne.n	800c9d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e099      	b.n	800cb06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c9d2:	4b4f      	ldr	r3, [pc, #316]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a4e      	ldr	r2, [pc, #312]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9de:	f7f6 fe93 	bl	8003708 <HAL_GetTick>
 800c9e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9e4:	e008      	b.n	800c9f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c9e6:	f7f6 fe8f 	bl	8003708 <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d901      	bls.n	800c9f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e086      	b.n	800cb06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9f8:	4b45      	ldr	r3, [pc, #276]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1f0      	bne.n	800c9e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ca04:	4b42      	ldr	r3, [pc, #264]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	031b      	lsls	r3, r3, #12
 800ca12:	493f      	ldr	r1, [pc, #252]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca14:	4313      	orrs	r3, r2
 800ca16:	628b      	str	r3, [r1, #40]	; 0x28
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	025b      	lsls	r3, r3, #9
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	041b      	lsls	r3, r3, #16
 800ca36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	061b      	lsls	r3, r3, #24
 800ca44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca48:	4931      	ldr	r1, [pc, #196]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca4e:	4b30      	ldr	r3, [pc, #192]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	492d      	ldr	r1, [pc, #180]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca60:	4b2b      	ldr	r3, [pc, #172]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	f023 0220 	bic.w	r2, r3, #32
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	4928      	ldr	r1, [pc, #160]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca72:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	4a26      	ldr	r2, [pc, #152]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca78:	f023 0310 	bic.w	r3, r3, #16
 800ca7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca7e:	4b24      	ldr	r3, [pc, #144]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca82:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <RCCEx_PLL2_Config+0x160>)
 800ca84:	4013      	ands	r3, r2
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	69d2      	ldr	r2, [r2, #28]
 800ca8a:	00d2      	lsls	r2, r2, #3
 800ca8c:	4920      	ldr	r1, [pc, #128]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca92:	4b1f      	ldr	r3, [pc, #124]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca96:	4a1e      	ldr	r2, [pc, #120]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca98:	f043 0310 	orr.w	r3, r3, #16
 800ca9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d106      	bne.n	800cab2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800caa4:	4b1a      	ldr	r3, [pc, #104]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa8:	4a19      	ldr	r2, [pc, #100]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800caaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800caae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cab0:	e00f      	b.n	800cad2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d106      	bne.n	800cac6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cab8:	4b15      	ldr	r3, [pc, #84]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800caba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabc:	4a14      	ldr	r2, [pc, #80]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cabe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cac4:	e005      	b.n	800cad2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cac6:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caca:	4a11      	ldr	r2, [pc, #68]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cacc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cad0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cad2:	4b0f      	ldr	r3, [pc, #60]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a0e      	ldr	r2, [pc, #56]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cadc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cade:	f7f6 fe13 	bl	8003708 <HAL_GetTick>
 800cae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cae4:	e008      	b.n	800caf8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cae6:	f7f6 fe0f 	bl	8003708 <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d901      	bls.n	800caf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e006      	b.n	800cb06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800caf8:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0f0      	beq.n	800cae6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	58024400 	.word	0x58024400
 800cb14:	ffff0007 	.word	0xffff0007

0800cb18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb26:	4b53      	ldr	r3, [pc, #332]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2a:	f003 0303 	and.w	r3, r3, #3
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d101      	bne.n	800cb36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e099      	b.n	800cc6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb36:	4b4f      	ldr	r3, [pc, #316]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a4e      	ldr	r2, [pc, #312]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb42:	f7f6 fde1 	bl	8003708 <HAL_GetTick>
 800cb46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb48:	e008      	b.n	800cb5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cb4a:	f7f6 fddd 	bl	8003708 <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d901      	bls.n	800cb5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e086      	b.n	800cc6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb5c:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1f0      	bne.n	800cb4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb68:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	051b      	lsls	r3, r3, #20
 800cb76:	493f      	ldr	r1, [pc, #252]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	628b      	str	r3, [r1, #40]	; 0x28
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	025b      	lsls	r3, r3, #9
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	431a      	orrs	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	041b      	lsls	r3, r3, #16
 800cb9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb9e:	431a      	orrs	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	061b      	lsls	r3, r3, #24
 800cba8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbac:	4931      	ldr	r1, [pc, #196]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cbb2:	4b30      	ldr	r3, [pc, #192]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	492d      	ldr	r1, [pc, #180]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cbc4:	4b2b      	ldr	r3, [pc, #172]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	4928      	ldr	r1, [pc, #160]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cbd6:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	4a26      	ldr	r2, [pc, #152]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cbe2:	4b24      	ldr	r3, [pc, #144]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbe6:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <RCCEx_PLL3_Config+0x160>)
 800cbe8:	4013      	ands	r3, r2
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	69d2      	ldr	r2, [r2, #28]
 800cbee:	00d2      	lsls	r2, r2, #3
 800cbf0:	4920      	ldr	r1, [pc, #128]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cbf6:	4b1f      	ldr	r3, [pc, #124]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfa:	4a1e      	ldr	r2, [pc, #120]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cc08:	4b1a      	ldr	r3, [pc, #104]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	4a19      	ldr	r2, [pc, #100]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cc12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc14:	e00f      	b.n	800cc36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d106      	bne.n	800cc2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cc1c:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	4a14      	ldr	r2, [pc, #80]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc28:	e005      	b.n	800cc36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cc2a:	4b12      	ldr	r3, [pc, #72]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	4a11      	ldr	r2, [pc, #68]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cc36:	4b0f      	ldr	r3, [pc, #60]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a0e      	ldr	r2, [pc, #56]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc42:	f7f6 fd61 	bl	8003708 <HAL_GetTick>
 800cc46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc48:	e008      	b.n	800cc5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cc4a:	f7f6 fd5d 	bl	8003708 <HAL_GetTick>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d901      	bls.n	800cc5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e006      	b.n	800cc6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0f0      	beq.n	800cc4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	58024400 	.word	0x58024400
 800cc78:	ffff0007 	.word	0xffff0007

0800cc7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08a      	sub	sp, #40	; 0x28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e075      	b.n	800cd7a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d105      	bne.n	800cca6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7f5 fe9d 	bl	80029e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2204      	movs	r2, #4
 800ccaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f868 	bl	800cd84 <HAL_SD_InitCard>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e05d      	b.n	800cd7a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ccbe:	f107 0308 	add.w	r3, r7, #8
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fdaf 	bl	800d828 <HAL_SD_GetCardStatus>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d001      	beq.n	800ccd4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e052      	b.n	800cd7a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ccd4:	7e3b      	ldrb	r3, [r7, #24]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ccda:	7e7b      	ldrb	r3, [r7, #25]
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d10a      	bne.n	800ccfe <HAL_SD_Init+0x82>
 800cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d102      	bne.n	800ccf4 <HAL_SD_Init+0x78>
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d004      	beq.n	800ccfe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccfa:	659a      	str	r2, [r3, #88]	; 0x58
 800ccfc:	e00b      	b.n	800cd16 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d104      	bne.n	800cd10 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd0c:	659a      	str	r2, [r3, #88]	; 0x58
 800cd0e:	e002      	b.n	800cd16 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fe6d 	bl	800d9fc <HAL_SD_ConfigWideBusOperation>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e026      	b.n	800cd7a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cd2c:	f7f6 fcec 	bl	8003708 <HAL_GetTick>
 800cd30:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cd32:	e011      	b.n	800cd58 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd34:	f7f6 fce8 	bl	8003708 <HAL_GetTick>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd42:	d109      	bne.n	800cd58 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cd54:	2303      	movs	r3, #3
 800cd56:	e010      	b.n	800cd7a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 ff61 	bl	800dc20 <HAL_SD_GetCardState>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b04      	cmp	r3, #4
 800cd62:	d1e7      	bne.n	800cd34 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3728      	adds	r7, #40	; 0x28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cd84:	b590      	push	{r4, r7, lr}
 800cd86:	b08d      	sub	sp, #52	; 0x34
 800cd88:	af02      	add	r7, sp, #8
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cd90:	2300      	movs	r3, #0
 800cd92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cd94:	2300      	movs	r3, #0
 800cd96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cd9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cda0:	f04f 0100 	mov.w	r1, #0
 800cda4:	f7fe fd24 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800cda8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d109      	bne.n	800cdc4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cdbe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e070      	b.n	800cea6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	0a1b      	lsrs	r3, r3, #8
 800cdc8:	4a39      	ldr	r2, [pc, #228]	; (800ceb0 <HAL_SD_InitCard+0x12c>)
 800cdca:	fba2 2303 	umull	r2, r3, r2, r3
 800cdce:	091b      	lsrs	r3, r3, #4
 800cdd0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681c      	ldr	r4, [r3, #0]
 800cdd6:	466a      	mov	r2, sp
 800cdd8:	f107 0318 	add.w	r3, r7, #24
 800cddc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cde0:	e882 0003 	stmia.w	r2, {r0, r1}
 800cde4:	f107 030c 	add.w	r3, r7, #12
 800cde8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdea:	4620      	mov	r0, r4
 800cdec:	f004 fe6c 	bl	8011ac8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f004 feaf 	bl	8011b58 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d005      	beq.n	800ce0c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce0a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d007      	beq.n	800ce22 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800ce12:	4a28      	ldr	r2, [pc, #160]	; (800ceb4 <HAL_SD_InitCard+0x130>)
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7f6 fc7f 	bl	8003720 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 ffea 	bl	800ddfc <SD_PowerON>
 800ce28:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00b      	beq.n	800ce48 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce44:	2301      	movs	r3, #1
 800ce46:	e02e      	b.n	800cea6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 ff09 	bl	800dc60 <SD_InitCard>
 800ce4e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e01b      	b.n	800cea6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ce76:	4618      	mov	r0, r3
 800ce78:	f004 ff04 	bl	8011c84 <SDMMC_CmdBlockLength>
 800ce7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00f      	beq.n	800cea4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a0b      	ldr	r2, [pc, #44]	; (800ceb8 <HAL_SD_InitCard+0x134>)
 800ce8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	431a      	orrs	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	e000      	b.n	800cea6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	372c      	adds	r7, #44	; 0x2c
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd90      	pop	{r4, r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	014f8b59 	.word	0x014f8b59
 800ceb4:	00012110 	.word	0x00012110
 800ceb8:	1fe00fff 	.word	0x1fe00fff

0800cebc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08c      	sub	sp, #48	; 0x30
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d107      	bne.n	800cee4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e08d      	b.n	800d000 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	f040 8086 	bne.w	800cffe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	441a      	add	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d907      	bls.n	800cf16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e074      	b.n	800d000 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2203      	movs	r2, #3
 800cf1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2200      	movs	r2, #0
 800cf24:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	025a      	lsls	r2, r3, #9
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d002      	beq.n	800cf42 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	025b      	lsls	r3, r3, #9
 800cf40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf42:	f04f 33ff 	mov.w	r3, #4294967295
 800cf46:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	025b      	lsls	r3, r3, #9
 800cf4c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cf4e:	2390      	movs	r3, #144	; 0x90
 800cf50:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cf52:	2302      	movs	r3, #2
 800cf54:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f107 0210 	add.w	r2, r7, #16
 800cf66:	4611      	mov	r1, r2
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f004 fe5f 	bl	8011c2c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68da      	ldr	r2, [r3, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf7c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68ba      	ldr	r2, [r7, #8]
 800cf84:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d90a      	bls.n	800cfaa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2282      	movs	r2, #130	; 0x82
 800cf98:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f004 feb5 	bl	8011d10 <SDMMC_CmdReadMultiBlock>
 800cfa6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cfa8:	e009      	b.n	800cfbe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2281      	movs	r2, #129	; 0x81
 800cfae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f004 fe87 	bl	8011cca <SDMMC_CmdReadSingleBlock>
 800cfbc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d012      	beq.n	800cfea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a0f      	ldr	r2, [pc, #60]	; (800d008 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800cfca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	431a      	orrs	r2, r3
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e00a      	b.n	800d000 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cff8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	e000      	b.n	800d000 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cffe:	2302      	movs	r3, #2
  }
}
 800d000:	4618      	mov	r0, r3
 800d002:	3730      	adds	r7, #48	; 0x30
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	1fe00fff 	.word	0x1fe00fff

0800d00c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08c      	sub	sp, #48	; 0x30
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d107      	bne.n	800d034 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d028:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e08d      	b.n	800d150 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	f040 8086 	bne.w	800d14e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	441a      	add	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d052:	429a      	cmp	r2, r3
 800d054:	d907      	bls.n	800d066 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	e074      	b.n	800d150 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2203      	movs	r2, #3
 800d06a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2200      	movs	r2, #0
 800d074:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	025a      	lsls	r2, r3, #9
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d002      	beq.n	800d092 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	025b      	lsls	r3, r3, #9
 800d090:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d092:	f04f 33ff 	mov.w	r3, #4294967295
 800d096:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	025b      	lsls	r3, r3, #9
 800d09c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d09e:	2390      	movs	r3, #144	; 0x90
 800d0a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f107 0210 	add.w	r2, r7, #16
 800d0b6:	4611      	mov	r1, r2
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f004 fdb7 	bl	8011c2c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	68da      	ldr	r2, [r3, #12]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d90a      	bls.n	800d0fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	22a0      	movs	r2, #160	; 0xa0
 800d0e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f004 fe53 	bl	8011d9c <SDMMC_CmdWriteMultiBlock>
 800d0f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d0f8:	e009      	b.n	800d10e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2290      	movs	r2, #144	; 0x90
 800d0fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d106:	4618      	mov	r0, r3
 800d108:	f004 fe25 	bl	8011d56 <SDMMC_CmdWriteSingleBlock>
 800d10c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d012      	beq.n	800d13a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a0f      	ldr	r2, [pc, #60]	; (800d158 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d11a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d122:	431a      	orrs	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e00a      	b.n	800d150 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d148:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	e000      	b.n	800d150 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d14e:	2302      	movs	r3, #2
  }
}
 800d150:	4618      	mov	r0, r3
 800d152:	3730      	adds	r7, #48	; 0x30
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	1fe00fff 	.word	0x1fe00fff

0800d15c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d168:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d008      	beq.n	800d18a <HAL_SD_IRQHandler+0x2e>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f003 0308 	and.w	r3, r3, #8
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d003      	beq.n	800d18a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f001 f926 	bl	800e3d4 <SD_Read_IT>
 800d188:	e19a      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80ac 	beq.w	800d2f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	4b59      	ldr	r3, [pc, #356]	; (800d314 <HAL_SD_IRQHandler+0x1b8>)
 800d1b0:	400b      	ands	r3, r1
 800d1b2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d1c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68da      	ldr	r2, [r3, #12]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1d2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f003 0308 	and.w	r3, r3, #8
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d038      	beq.n	800d250 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f003 0302 	and.w	r3, r3, #2
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d104      	bne.n	800d1f2 <HAL_SD_IRQHandler+0x96>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f003 0320 	and.w	r3, r3, #32
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d011      	beq.n	800d216 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f004 fdf4 	bl	8011de4 <SDMMC_CmdStopTransfer>
 800d1fc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d008      	beq.n	800d216 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	431a      	orrs	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f95b 	bl	800d4cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a3f      	ldr	r2, [pc, #252]	; (800d318 <HAL_SD_IRQHandler+0x1bc>)
 800d21c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d104      	bne.n	800d240 <HAL_SD_IRQHandler+0xe4>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f003 0302 	and.w	r3, r3, #2
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f006 fdf5 	bl	8013e30 <HAL_SD_RxCpltCallback>
 800d246:	e13b      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f006 fde7 	bl	8013e1c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d24e:	e137      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 8132 	beq.w	800d4c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2200      	movs	r2, #0
 800d262:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2200      	movs	r2, #0
 800d26a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2200      	movs	r2, #0
 800d272:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f003 0302 	and.w	r3, r3, #2
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d104      	bne.n	800d288 <HAL_SD_IRQHandler+0x12c>
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f003 0320 	and.w	r3, r3, #32
 800d284:	2b00      	cmp	r3, #0
 800d286:	d011      	beq.n	800d2ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f004 fda9 	bl	8011de4 <SDMMC_CmdStopTransfer>
 800d292:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d008      	beq.n	800d2ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	431a      	orrs	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f910 	bl	800d4cc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f003 0310 	and.w	r3, r3, #16
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d104      	bne.n	800d2ce <HAL_SD_IRQHandler+0x172>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f003 0320 	and.w	r3, r3, #32
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f006 fda4 	bl	8013e1c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d105      	bne.n	800d2ea <HAL_SD_IRQHandler+0x18e>
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f003 0302 	and.w	r3, r3, #2
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 80eb 	beq.w	800d4c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f006 fda0 	bl	8013e30 <HAL_SD_RxCpltCallback>
}
 800d2f0:	e0e6      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00d      	beq.n	800d31c <HAL_SD_IRQHandler+0x1c0>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f003 0308 	and.w	r3, r3, #8
 800d306:	2b00      	cmp	r3, #0
 800d308:	d008      	beq.n	800d31c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f001 f8a8 	bl	800e460 <SD_Write_IT>
 800d310:	e0d6      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
 800d312:	bf00      	nop
 800d314:	ffff3ec5 	.word	0xffff3ec5
 800d318:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d322:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 809d 	beq.w	800d466 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d332:	f003 0302 	and.w	r3, r3, #2
 800d336:	2b00      	cmp	r3, #0
 800d338:	d005      	beq.n	800d346 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d33e:	f043 0202 	orr.w	r2, r3, #2
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d34c:	f003 0308 	and.w	r3, r3, #8
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d358:	f043 0208 	orr.w	r2, r3, #8
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d366:	f003 0320 	and.w	r3, r3, #32
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d005      	beq.n	800d37a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d372:	f043 0220 	orr.w	r2, r3, #32
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d380:	f003 0310 	and.w	r3, r3, #16
 800d384:	2b00      	cmp	r3, #0
 800d386:	d005      	beq.n	800d394 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38c:	f043 0210 	orr.w	r2, r3, #16
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a4b      	ldr	r2, [pc, #300]	; (800d4c8 <HAL_SD_IRQHandler+0x36c>)
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d3aa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3ba:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68da      	ldr	r2, [r3, #12]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3da:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f004 fcff 	bl	8011de4 <SDMMC_CmdStopTransfer>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ec:	431a      	orrs	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	68da      	ldr	r2, [r3, #12]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d400:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d40a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f003 0308 	and.w	r3, r3, #8
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00a      	beq.n	800d42c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 f851 	bl	800d4cc <HAL_SD_ErrorCallback>
}
 800d42a:	e049      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d432:	2b00      	cmp	r3, #0
 800d434:	d044      	beq.n	800d4c0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d040      	beq.n	800d4c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d44c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2200      	movs	r2, #0
 800d454:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f834 	bl	800d4cc <HAL_SD_ErrorCallback>
}
 800d464:	e02c      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d46c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d470:	2b00      	cmp	r3, #0
 800d472:	d025      	beq.n	800d4c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d47c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d484:	f003 0304 	and.w	r3, r3, #4
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10c      	bne.n	800d4a6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f003 0320 	and.w	r3, r3, #32
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f001 f84a 	bl	800e530 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d49c:	e010      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f001 f832 	bl	800e508 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d4a4:	e00c      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f003 0320 	and.w	r3, r3, #32
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d003      	beq.n	800d4b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 f833 	bl	800e51c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d4b6:	e003      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 f81b 	bl	800e4f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d4be:	e7ff      	b.n	800d4c0 <HAL_SD_IRQHandler+0x364>
 800d4c0:	bf00      	nop
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	18000f3a 	.word	0x18000f3a

0800d4cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4ee:	0f9b      	lsrs	r3, r3, #30
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4fa:	0e9b      	lsrs	r3, r3, #26
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 030f 	and.w	r3, r3, #15
 800d502:	b2da      	uxtb	r2, r3
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d50c:	0e1b      	lsrs	r3, r3, #24
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	f003 0303 	and.w	r3, r3, #3
 800d514:	b2da      	uxtb	r2, r3
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d51e:	0c1b      	lsrs	r3, r3, #16
 800d520:	b2da      	uxtb	r2, r3
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d52a:	0a1b      	lsrs	r3, r3, #8
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d536:	b2da      	uxtb	r2, r3
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d540:	0d1b      	lsrs	r3, r3, #20
 800d542:	b29a      	uxth	r2, r3
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d54c:	0c1b      	lsrs	r3, r3, #16
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	f003 030f 	and.w	r3, r3, #15
 800d554:	b2da      	uxtb	r2, r3
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d55e:	0bdb      	lsrs	r3, r3, #15
 800d560:	b2db      	uxtb	r3, r3
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	b2da      	uxtb	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d570:	0b9b      	lsrs	r3, r3, #14
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f003 0301 	and.w	r3, r3, #1
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d582:	0b5b      	lsrs	r3, r3, #13
 800d584:	b2db      	uxtb	r3, r3
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d594:	0b1b      	lsrs	r3, r3, #12
 800d596:	b2db      	uxtb	r3, r3
 800d598:	f003 0301 	and.w	r3, r3, #1
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d163      	bne.n	800d678 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5b4:	009a      	lsls	r2, r3, #2
 800d5b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d5ba:	4013      	ands	r3, r2
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d5c0:	0f92      	lsrs	r2, r2, #30
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5cc:	0edb      	lsrs	r3, r3, #27
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	f003 0307 	and.w	r3, r3, #7
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5de:	0e1b      	lsrs	r3, r3, #24
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	f003 0307 	and.w	r3, r3, #7
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5f0:	0d5b      	lsrs	r3, r3, #21
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f003 0307 	and.w	r3, r3, #7
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d602:	0c9b      	lsrs	r3, r3, #18
 800d604:	b2db      	uxtb	r3, r3
 800d606:	f003 0307 	and.w	r3, r3, #7
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d614:	0bdb      	lsrs	r3, r3, #15
 800d616:	b2db      	uxtb	r3, r3
 800d618:	f003 0307 	and.w	r3, r3, #7
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	7e1b      	ldrb	r3, [r3, #24]
 800d630:	b2db      	uxtb	r3, r3
 800d632:	f003 0307 	and.w	r3, r3, #7
 800d636:	3302      	adds	r3, #2
 800d638:	2201      	movs	r2, #1
 800d63a:	fa02 f303 	lsl.w	r3, r2, r3
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d642:	fb03 f202 	mul.w	r2, r3, r2
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	7a1b      	ldrb	r3, [r3, #8]
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	f003 030f 	and.w	r3, r3, #15
 800d654:	2201      	movs	r2, #1
 800d656:	409a      	lsls	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d664:	0a52      	lsrs	r2, r2, #9
 800d666:	fb03 f202 	mul.w	r2, r3, r2
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d674:	655a      	str	r2, [r3, #84]	; 0x54
 800d676:	e031      	b.n	800d6dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d11d      	bne.n	800d6bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d684:	041b      	lsls	r3, r3, #16
 800d686:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d68e:	0c1b      	lsrs	r3, r3, #16
 800d690:	431a      	orrs	r2, r3
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	3301      	adds	r3, #1
 800d69c:	029a      	lsls	r2, r3, #10
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	655a      	str	r2, [r3, #84]	; 0x54
 800d6ba:	e00f      	b.n	800d6dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a58      	ldr	r2, [pc, #352]	; (800d824 <HAL_SD_GetCardCSD+0x344>)
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e09d      	b.n	800d818 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e0:	0b9b      	lsrs	r3, r3, #14
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0301 	and.w	r3, r3, #1
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f2:	09db      	lsrs	r3, r3, #7
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d704:	b2db      	uxtb	r3, r3
 800d706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d714:	0fdb      	lsrs	r3, r3, #31
 800d716:	b2da      	uxtb	r2, r3
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d720:	0f5b      	lsrs	r3, r3, #29
 800d722:	b2db      	uxtb	r3, r3
 800d724:	f003 0303 	and.w	r3, r3, #3
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d732:	0e9b      	lsrs	r3, r3, #26
 800d734:	b2db      	uxtb	r3, r3
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d744:	0d9b      	lsrs	r3, r3, #22
 800d746:	b2db      	uxtb	r3, r3
 800d748:	f003 030f 	and.w	r3, r3, #15
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d756:	0d5b      	lsrs	r3, r3, #21
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d772:	0c1b      	lsrs	r3, r3, #16
 800d774:	b2db      	uxtb	r3, r3
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d786:	0bdb      	lsrs	r3, r3, #15
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	f003 0301 	and.w	r3, r3, #1
 800d78e:	b2da      	uxtb	r2, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d79a:	0b9b      	lsrs	r3, r3, #14
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7ae:	0b5b      	lsrs	r3, r3, #13
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c2:	0b1b      	lsrs	r3, r3, #12
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7d6:	0a9b      	lsrs	r3, r3, #10
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	f003 0303 	and.w	r3, r3, #3
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7ea:	0a1b      	lsrs	r3, r3, #8
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f003 0303 	and.w	r3, r3, #3
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7fe:	085b      	lsrs	r3, r3, #1
 800d800:	b2db      	uxtb	r3, r3
 800d802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d806:	b2da      	uxtb	r2, r3
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	1fe00fff 	.word	0x1fe00fff

0800d828 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b094      	sub	sp, #80	; 0x50
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	2b03      	cmp	r3, #3
 800d842:	d101      	bne.n	800d848 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	e0a7      	b.n	800d998 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d848:	f107 0308 	add.w	r3, r7, #8
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 fb62 	bl	800df18 <SD_SendSDStatus>
 800d854:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d011      	beq.n	800d880 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a4f      	ldr	r2, [pc, #316]	; (800d9a0 <HAL_SD_GetCardStatus+0x178>)
 800d862:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d86a:	431a      	orrs	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d87e:	e070      	b.n	800d962 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	099b      	lsrs	r3, r3, #6
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f003 0303 	and.w	r3, r3, #3
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	095b      	lsrs	r3, r3, #5
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 0301 	and.w	r3, r3, #1
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	0a1b      	lsrs	r3, r3, #8
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	0e1b      	lsrs	r3, r3, #24
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	061a      	lsls	r2, r3, #24
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	021b      	lsls	r3, r3, #8
 800d8c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d8c6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	0a1b      	lsrs	r3, r3, #8
 800d8cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d8d0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	0e1b      	lsrs	r3, r3, #24
 800d8d6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	0a1b      	lsrs	r3, r3, #8
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	0d1b      	lsrs	r3, r3, #20
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f003 030f 	and.w	r3, r3, #15
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	0c1b      	lsrs	r3, r3, #16
 800d902:	b29b      	uxth	r3, r3
 800d904:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d908:	b29a      	uxth	r2, r3
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	b29b      	uxth	r3, r3
 800d912:	4313      	orrs	r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	0a9b      	lsrs	r3, r3, #10
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d924:	b2da      	uxtb	r2, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	0a1b      	lsrs	r3, r3, #8
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0303 	and.w	r3, r3, #3
 800d934:	b2da      	uxtb	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	091b      	lsrs	r3, r3, #4
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 030f 	and.w	r3, r3, #15
 800d944:	b2da      	uxtb	r2, r3
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	f003 030f 	and.w	r3, r3, #15
 800d952:	b2da      	uxtb	r2, r3
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	0e1b      	lsrs	r3, r3, #24
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d96a:	4618      	mov	r0, r3
 800d96c:	f004 f98a 	bl	8011c84 <SDMMC_CmdBlockLength>
 800d970:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00d      	beq.n	800d994 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a08      	ldr	r2, [pc, #32]	; (800d9a0 <HAL_SD_GetCardStatus+0x178>)
 800d97e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d984:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d994:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3750      	adds	r7, #80	; 0x50
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	1fe00fff 	.word	0x1fe00fff

0800d9a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d9fc:	b590      	push	{r4, r7, lr}
 800d9fe:	b08d      	sub	sp, #52	; 0x34
 800da00:	af02      	add	r7, sp, #8
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800da06:	2300      	movs	r3, #0
 800da08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2203      	movs	r2, #3
 800da10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d02e      	beq.n	800da7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da22:	d106      	bne.n	800da32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	635a      	str	r2, [r3, #52]	; 0x34
 800da30:	e029      	b.n	800da86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da38:	d10a      	bne.n	800da50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fb64 	bl	800e108 <SD_WideBus_Enable>
 800da40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	431a      	orrs	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	635a      	str	r2, [r3, #52]	; 0x34
 800da4e:	e01a      	b.n	800da86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d10a      	bne.n	800da6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 fba1 	bl	800e19e <SD_WideBus_Disable>
 800da5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	431a      	orrs	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	635a      	str	r2, [r3, #52]	; 0x34
 800da6a:	e00c      	b.n	800da86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	635a      	str	r2, [r3, #52]	; 0x34
 800da78:	e005      	b.n	800da86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d007      	beq.n	800da9e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a5f      	ldr	r2, [pc, #380]	; (800dc10 <HAL_SD_ConfigWideBusOperation+0x214>)
 800da94:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800da96:	2301      	movs	r3, #1
 800da98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da9c:	e096      	b.n	800dbcc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800da9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800daa2:	f04f 0100 	mov.w	r1, #0
 800daa6:	f7fd fea3 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800daaa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 8083 	beq.w	800dbba <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	695a      	ldr	r2, [r3, #20]
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	4950      	ldr	r1, [pc, #320]	; (800dc14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dad2:	fba1 1303 	umull	r1, r3, r1, r3
 800dad6:	0e1b      	lsrs	r3, r3, #24
 800dad8:	429a      	cmp	r2, r3
 800dada:	d303      	bcc.n	800dae4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	61bb      	str	r3, [r7, #24]
 800dae2:	e05a      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daec:	d103      	bne.n	800daf6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	61bb      	str	r3, [r7, #24]
 800daf4:	e051      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dafe:	d126      	bne.n	800db4e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	695b      	ldr	r3, [r3, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d10e      	bne.n	800db26 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	4a43      	ldr	r2, [pc, #268]	; (800dc18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d906      	bls.n	800db1e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	4a40      	ldr	r2, [pc, #256]	; (800dc14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800db14:	fba2 2303 	umull	r2, r3, r2, r3
 800db18:	0e5b      	lsrs	r3, r3, #25
 800db1a:	61bb      	str	r3, [r7, #24]
 800db1c:	e03d      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	695b      	ldr	r3, [r3, #20]
 800db22:	61bb      	str	r3, [r7, #24]
 800db24:	e039      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	69fa      	ldr	r2, [r7, #28]
 800db2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db32:	4a39      	ldr	r2, [pc, #228]	; (800dc18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d906      	bls.n	800db46 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	4a36      	ldr	r2, [pc, #216]	; (800dc14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800db3c:	fba2 2303 	umull	r2, r3, r2, r3
 800db40:	0e5b      	lsrs	r3, r3, #25
 800db42:	61bb      	str	r3, [r7, #24]
 800db44:	e029      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	61bb      	str	r3, [r7, #24]
 800db4c:	e025      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	695b      	ldr	r3, [r3, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10e      	bne.n	800db74 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	4a30      	ldr	r2, [pc, #192]	; (800dc1c <HAL_SD_ConfigWideBusOperation+0x220>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d906      	bls.n	800db6c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	4a2c      	ldr	r2, [pc, #176]	; (800dc14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800db62:	fba2 2303 	umull	r2, r3, r2, r3
 800db66:	0e1b      	lsrs	r3, r3, #24
 800db68:	61bb      	str	r3, [r7, #24]
 800db6a:	e016      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	61bb      	str	r3, [r7, #24]
 800db72:	e012      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	69fa      	ldr	r2, [r7, #28]
 800db7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db80:	4a26      	ldr	r2, [pc, #152]	; (800dc1c <HAL_SD_ConfigWideBusOperation+0x220>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d906      	bls.n	800db94 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	4a22      	ldr	r2, [pc, #136]	; (800dc14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800db8a:	fba2 2303 	umull	r2, r3, r2, r3
 800db8e:	0e1b      	lsrs	r3, r3, #24
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	e002      	b.n	800db9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681c      	ldr	r4, [r3, #0]
 800db9e:	466a      	mov	r2, sp
 800dba0:	f107 0314 	add.w	r3, r7, #20
 800dba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dba8:	e882 0003 	stmia.w	r2, {r0, r1}
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f003 ff88 	bl	8011ac8 <SDMMC_Init>
 800dbb8:	e008      	b.n	800dbcc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f004 f855 	bl	8011c84 <SDMMC_CmdBlockLength>
 800dbda:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbdc:	6a3b      	ldr	r3, [r7, #32]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00c      	beq.n	800dbfc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a0a      	ldr	r2, [pc, #40]	; (800dc10 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dbe8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbee:	6a3b      	ldr	r3, [r7, #32]
 800dbf0:	431a      	orrs	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800dc04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	372c      	adds	r7, #44	; 0x2c
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd90      	pop	{r4, r7, pc}
 800dc10:	1fe00fff 	.word	0x1fe00fff
 800dc14:	55e63b89 	.word	0x55e63b89
 800dc18:	02faf080 	.word	0x02faf080
 800dc1c:	017d7840 	.word	0x017d7840

0800dc20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dc2c:	f107 030c 	add.w	r3, r7, #12
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fa40 	bl	800e0b8 <SD_SendStatus>
 800dc38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d005      	beq.n	800dc4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	431a      	orrs	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	0a5b      	lsrs	r3, r3, #9
 800dc50:	f003 030f 	and.w	r3, r3, #15
 800dc54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dc56:	693b      	ldr	r3, [r7, #16]
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3718      	adds	r7, #24
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b090      	sub	sp, #64	; 0x40
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dc6c:	f7f5 fd4c 	bl	8003708 <HAL_GetTick>
 800dc70:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f003 ff7f 	bl	8011b7a <SDMMC_GetPowerState>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d102      	bne.n	800dc88 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dc86:	e0b5      	b.n	800ddf4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8c:	2b03      	cmp	r3, #3
 800dc8e:	d02e      	beq.n	800dcee <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f004 f9ca 	bl	801202e <SDMMC_CmdSendCID>
 800dc9a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <SD_InitCard+0x46>
    {
      return errorstate;
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	e0a6      	b.n	800ddf4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2100      	movs	r1, #0
 800dcac:	4618      	mov	r0, r3
 800dcae:	f003 ffaa 	bl	8011c06 <SDMMC_GetResponse>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2104      	movs	r1, #4
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f003 ffa1 	bl	8011c06 <SDMMC_GetResponse>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2108      	movs	r1, #8
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f003 ff98 	bl	8011c06 <SDMMC_GetResponse>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	210c      	movs	r1, #12
 800dce2:	4618      	mov	r0, r3
 800dce4:	f003 ff8f 	bl	8011c06 <SDMMC_GetResponse>
 800dce8:	4602      	mov	r2, r0
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d01d      	beq.n	800dd32 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dcf6:	e019      	b.n	800dd2c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f107 020a 	add.w	r2, r7, #10
 800dd00:	4611      	mov	r1, r2
 800dd02:	4618      	mov	r0, r3
 800dd04:	f004 f9d2 	bl	80120ac <SDMMC_CmdSetRelAdd>
 800dd08:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d001      	beq.n	800dd14 <SD_InitCard+0xb4>
      {
        return errorstate;
 800dd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd12:	e06f      	b.n	800ddf4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800dd14:	f7f5 fcf8 	bl	8003708 <HAL_GetTick>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	f241 3287 	movw	r2, #4999	; 0x1387
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d902      	bls.n	800dd2c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dd26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd2a:	e063      	b.n	800ddf4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dd2c:	897b      	ldrh	r3, [r7, #10]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0e2      	beq.n	800dcf8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d036      	beq.n	800dda8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dd3a:	897b      	ldrh	r3, [r7, #10]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd4a:	041b      	lsls	r3, r3, #16
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4610      	mov	r0, r2
 800dd50:	f004 f98c 	bl	801206c <SDMMC_CmdSendCSD>
 800dd54:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d001      	beq.n	800dd60 <SD_InitCard+0x100>
    {
      return errorstate;
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5e:	e049      	b.n	800ddf4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2100      	movs	r1, #0
 800dd66:	4618      	mov	r0, r3
 800dd68:	f003 ff4d 	bl	8011c06 <SDMMC_GetResponse>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2104      	movs	r1, #4
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f003 ff44 	bl	8011c06 <SDMMC_GetResponse>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2108      	movs	r1, #8
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f003 ff3b 	bl	8011c06 <SDMMC_GetResponse>
 800dd90:	4602      	mov	r2, r0
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	210c      	movs	r1, #12
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f003 ff32 	bl	8011c06 <SDMMC_GetResponse>
 800dda2:	4602      	mov	r2, r0
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2104      	movs	r1, #4
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f003 ff29 	bl	8011c06 <SDMMC_GetResponse>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	0d1a      	lsrs	r2, r3, #20
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ddbc:	f107 030c 	add.w	r3, r7, #12
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7ff fb8c 	bl	800d4e0 <HAL_SD_GetCardCSD>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d002      	beq.n	800ddd4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ddd2:	e00f      	b.n	800ddf4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dddc:	041b      	lsls	r3, r3, #16
 800ddde:	4619      	mov	r1, r3
 800dde0:	4610      	mov	r0, r2
 800dde2:	f004 f83b 	bl	8011e5c <SDMMC_CmdSelDesel>
 800dde6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800dde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <SD_InitCard+0x192>
  {
    return errorstate;
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	e000      	b.n	800ddf4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ddf2:	2300      	movs	r3, #0
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3740      	adds	r7, #64	; 0x40
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de04:	2300      	movs	r3, #0
 800de06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800de08:	2300      	movs	r3, #0
 800de0a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800de0c:	2300      	movs	r3, #0
 800de0e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f004 f844 	bl	8011ea2 <SDMMC_CmdGoIdleState>
 800de1a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <SD_PowerON+0x2a>
  {
    return errorstate;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	e072      	b.n	800df0c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f004 f857 	bl	8011ede <SDMMC_CmdOperCond>
 800de30:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de38:	d10d      	bne.n	800de56 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	f004 f82c 	bl	8011ea2 <SDMMC_CmdGoIdleState>
 800de4a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d004      	beq.n	800de5c <SD_PowerON+0x60>
    {
      return errorstate;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	e05a      	b.n	800df0c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de60:	2b01      	cmp	r3, #1
 800de62:	d137      	bne.n	800ded4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2100      	movs	r1, #0
 800de6a:	4618      	mov	r0, r3
 800de6c:	f004 f857 	bl	8011f1e <SDMMC_CmdAppCommand>
 800de70:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d02d      	beq.n	800ded4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de7c:	e046      	b.n	800df0c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2100      	movs	r1, #0
 800de84:	4618      	mov	r0, r3
 800de86:	f004 f84a 	bl	8011f1e <SDMMC_CmdAppCommand>
 800de8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <SD_PowerON+0x9a>
    {
      return errorstate;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	e03a      	b.n	800df0c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	491e      	ldr	r1, [pc, #120]	; (800df14 <SD_PowerON+0x118>)
 800de9c:	4618      	mov	r0, r3
 800de9e:	f004 f861 	bl	8011f64 <SDMMC_CmdAppOperCommand>
 800dea2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d002      	beq.n	800deb0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800deae:	e02d      	b.n	800df0c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2100      	movs	r1, #0
 800deb6:	4618      	mov	r0, r3
 800deb8:	f003 fea5 	bl	8011c06 <SDMMC_GetResponse>
 800debc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	0fdb      	lsrs	r3, r3, #31
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d101      	bne.n	800deca <SD_PowerON+0xce>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e000      	b.n	800decc <SD_PowerON+0xd0>
 800deca:	2300      	movs	r3, #0
 800decc:	613b      	str	r3, [r7, #16]

    count++;
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	3301      	adds	r3, #1
 800ded2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800deda:	4293      	cmp	r3, r2
 800dedc:	d802      	bhi.n	800dee4 <SD_PowerON+0xe8>
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d0cc      	beq.n	800de7e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800deea:	4293      	cmp	r3, r2
 800deec:	d902      	bls.n	800def4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800deee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800def2:	e00b      	b.n	800df0c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	c1100000 	.word	0xc1100000

0800df18 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08c      	sub	sp, #48	; 0x30
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800df22:	f7f5 fbf1 	bl	8003708 <HAL_GetTick>
 800df26:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2100      	movs	r1, #0
 800df32:	4618      	mov	r0, r3
 800df34:	f003 fe67 	bl	8011c06 <SDMMC_GetResponse>
 800df38:	4603      	mov	r3, r0
 800df3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df42:	d102      	bne.n	800df4a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df48:	e0b0      	b.n	800e0ac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2140      	movs	r1, #64	; 0x40
 800df50:	4618      	mov	r0, r3
 800df52:	f003 fe97 	bl	8011c84 <SDMMC_CmdBlockLength>
 800df56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d005      	beq.n	800df6a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	e0a0      	b.n	800e0ac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df72:	041b      	lsls	r3, r3, #16
 800df74:	4619      	mov	r1, r3
 800df76:	4610      	mov	r0, r2
 800df78:	f003 ffd1 	bl	8011f1e <SDMMC_CmdAppCommand>
 800df7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df7e:	6a3b      	ldr	r3, [r7, #32]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d005      	beq.n	800df90 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	e08d      	b.n	800e0ac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800df90:	f04f 33ff 	mov.w	r3, #4294967295
 800df94:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800df96:	2340      	movs	r3, #64	; 0x40
 800df98:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800df9a:	2360      	movs	r3, #96	; 0x60
 800df9c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800df9e:	2302      	movs	r3, #2
 800dfa0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f107 0208 	add.w	r2, r7, #8
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f003 fe39 	bl	8011c2c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f004 f8b9 	bl	8012136 <SDMMC_CmdStatusRegister>
 800dfc4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d02b      	beq.n	800e024 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dfd4:	6a3b      	ldr	r3, [r7, #32]
 800dfd6:	e069      	b.n	800e0ac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d013      	beq.n	800e00e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfea:	e00d      	b.n	800e008 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4618      	mov	r0, r3
 800dff2:	f003 fd93 	bl	8011b1c <SDMMC_ReadFIFO>
 800dff6:	4602      	mov	r2, r0
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	601a      	str	r2, [r3, #0]
        pData++;
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	3304      	adds	r3, #4
 800e000:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	3301      	adds	r3, #1
 800e006:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	2b07      	cmp	r3, #7
 800e00c:	d9ee      	bls.n	800dfec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e00e:	f7f5 fb7b 	bl	8003708 <HAL_GetTick>
 800e012:	4602      	mov	r2, r0
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e01c:	d102      	bne.n	800e024 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e01e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e022:	e043      	b.n	800e0ac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e02a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d0d2      	beq.n	800dfd8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e038:	f003 0308 	and.w	r3, r3, #8
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d001      	beq.n	800e044 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e040:	2308      	movs	r3, #8
 800e042:	e033      	b.n	800e0ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e04a:	f003 0302 	and.w	r3, r3, #2
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d001      	beq.n	800e056 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e052:	2302      	movs	r3, #2
 800e054:	e02a      	b.n	800e0ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e05c:	f003 0320 	and.w	r3, r3, #32
 800e060:	2b00      	cmp	r3, #0
 800e062:	d017      	beq.n	800e094 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e064:	2320      	movs	r3, #32
 800e066:	e021      	b.n	800e0ac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f003 fd55 	bl	8011b1c <SDMMC_ReadFIFO>
 800e072:	4602      	mov	r2, r0
 800e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e076:	601a      	str	r2, [r3, #0]
    pData++;
 800e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07a:	3304      	adds	r3, #4
 800e07c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e07e:	f7f5 fb43 	bl	8003708 <HAL_GetTick>
 800e082:	4602      	mov	r2, r0
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	1ad3      	subs	r3, r2, r3
 800e088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08c:	d102      	bne.n	800e094 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e08e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e092:	e00b      	b.n	800e0ac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e09a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d1e2      	bne.n	800e068 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a03      	ldr	r2, [pc, #12]	; (800e0b4 <SD_SendSDStatus+0x19c>)
 800e0a8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3730      	adds	r7, #48	; 0x30
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	18000f3a 	.word	0x18000f3a

0800e0b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e0c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0cc:	e018      	b.n	800e100 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0d6:	041b      	lsls	r3, r3, #16
 800e0d8:	4619      	mov	r1, r3
 800e0da:	4610      	mov	r0, r2
 800e0dc:	f004 f808 	bl	80120f0 <SDMMC_CmdSendStatus>
 800e0e0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <SD_SendStatus+0x34>
  {
    return errorstate;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	e009      	b.n	800e100 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f003 fd87 	bl	8011c06 <SDMMC_GetResponse>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e110:	2300      	movs	r3, #0
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	2300      	movs	r3, #0
 800e116:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2100      	movs	r1, #0
 800e11e:	4618      	mov	r0, r3
 800e120:	f003 fd71 	bl	8011c06 <SDMMC_GetResponse>
 800e124:	4603      	mov	r3, r0
 800e126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e12a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e12e:	d102      	bne.n	800e136 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e134:	e02f      	b.n	800e196 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e136:	f107 030c 	add.w	r3, r7, #12
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f879 	bl	800e234 <SD_FindSCR>
 800e142:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	e023      	b.n	800e196 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01c      	beq.n	800e192 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e160:	041b      	lsls	r3, r3, #16
 800e162:	4619      	mov	r1, r3
 800e164:	4610      	mov	r0, r2
 800e166:	f003 feda 	bl	8011f1e <SDMMC_CmdAppCommand>
 800e16a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	e00f      	b.n	800e196 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2102      	movs	r1, #2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f003 ff11 	bl	8011fa4 <SDMMC_CmdBusWidth>
 800e182:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	e003      	b.n	800e196 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e18e:	2300      	movs	r3, #0
 800e190:	e001      	b.n	800e196 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b086      	sub	sp, #24
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f003 fd26 	bl	8011c06 <SDMMC_GetResponse>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1c4:	d102      	bne.n	800e1cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1ca:	e02f      	b.n	800e22c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1cc:	f107 030c 	add.w	r3, r7, #12
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f82e 	bl	800e234 <SD_FindSCR>
 800e1d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d001      	beq.n	800e1e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	e023      	b.n	800e22c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d01c      	beq.n	800e228 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f6:	041b      	lsls	r3, r3, #16
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	f003 fe8f 	bl	8011f1e <SDMMC_CmdAppCommand>
 800e200:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	e00f      	b.n	800e22c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2100      	movs	r1, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f003 fec6 	bl	8011fa4 <SDMMC_CmdBusWidth>
 800e218:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	e003      	b.n	800e22c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e224:	2300      	movs	r3, #0
 800e226:	e001      	b.n	800e22c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3718      	adds	r7, #24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b08e      	sub	sp, #56	; 0x38
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e23e:	f7f5 fa63 	bl	8003708 <HAL_GetTick>
 800e242:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e244:	2300      	movs	r3, #0
 800e246:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e248:	2300      	movs	r3, #0
 800e24a:	60bb      	str	r3, [r7, #8]
 800e24c:	2300      	movs	r3, #0
 800e24e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2108      	movs	r1, #8
 800e25a:	4618      	mov	r0, r3
 800e25c:	f003 fd12 	bl	8011c84 <SDMMC_CmdBlockLength>
 800e260:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	e0ad      	b.n	800e3c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e274:	041b      	lsls	r3, r3, #16
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f003 fe50 	bl	8011f1e <SDMMC_CmdAppCommand>
 800e27e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	e09e      	b.n	800e3c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e28a:	f04f 33ff 	mov.w	r3, #4294967295
 800e28e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e290:	2308      	movs	r3, #8
 800e292:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e294:	2330      	movs	r3, #48	; 0x30
 800e296:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e298:	2302      	movs	r3, #2
 800e29a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e29c:	2300      	movs	r3, #0
 800e29e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f107 0210 	add.w	r2, r7, #16
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f003 fcbc 	bl	8011c2c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f003 fe96 	bl	8011fea <SDMMC_CmdSendSCR>
 800e2be:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d027      	beq.n	800e316 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c8:	e07e      	b.n	800e3c8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d113      	bne.n	800e300 <SD_FindSCR+0xcc>
 800e2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d110      	bne.n	800e300 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f003 fc1a 	bl	8011b1c <SDMMC_ReadFIFO>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f003 fc13 	bl	8011b1c <SDMMC_ReadFIFO>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	60fb      	str	r3, [r7, #12]
      index++;
 800e2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e300:	f7f5 fa02 	bl	8003708 <HAL_GetTick>
 800e304:	4602      	mov	r2, r0
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30e:	d102      	bne.n	800e316 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e314:	e058      	b.n	800e3c8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e31c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e320:	4013      	ands	r3, r2
 800e322:	2b00      	cmp	r3, #0
 800e324:	d0d1      	beq.n	800e2ca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32c:	f003 0308 	and.w	r3, r3, #8
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2208      	movs	r2, #8
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e33c:	2308      	movs	r3, #8
 800e33e:	e043      	b.n	800e3c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e346:	f003 0302 	and.w	r3, r3, #2
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d005      	beq.n	800e35a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2202      	movs	r2, #2
 800e354:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e356:	2302      	movs	r3, #2
 800e358:	e036      	b.n	800e3c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e360:	f003 0320 	and.w	r3, r3, #32
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2220      	movs	r2, #32
 800e36e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e370:	2320      	movs	r3, #32
 800e372:	e029      	b.n	800e3c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a15      	ldr	r2, [pc, #84]	; (800e3d0 <SD_FindSCR+0x19c>)
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	061a      	lsls	r2, r3, #24
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	021b      	lsls	r3, r3, #8
 800e384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e388:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	0a1b      	lsrs	r3, r3, #8
 800e38e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e392:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	0e1b      	lsrs	r3, r3, #24
 800e398:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	601a      	str	r2, [r3, #0]
    scr++;
 800e39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	061a      	lsls	r2, r3, #24
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	021b      	lsls	r3, r3, #8
 800e3ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	0a1b      	lsrs	r3, r3, #8
 800e3b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e3ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	0e1b      	lsrs	r3, r3, #24
 800e3c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3738      	adds	r7, #56	; 0x38
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	18000f3a 	.word	0x18000f3a

0800e3d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b086      	sub	sp, #24
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e6:	2b1f      	cmp	r3, #31
 800e3e8:	d936      	bls.n	800e458 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	617b      	str	r3, [r7, #20]
 800e3ee:	e027      	b.n	800e440 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f003 fb91 	bl	8011b1c <SDMMC_ReadFIFO>
 800e3fa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	b2da      	uxtb	r2, r3
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	3301      	adds	r3, #1
 800e408:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	0a1b      	lsrs	r3, r3, #8
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	3301      	adds	r3, #1
 800e418:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	0c1b      	lsrs	r3, r3, #16
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	3301      	adds	r3, #1
 800e428:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	0e1b      	lsrs	r3, r3, #24
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	3301      	adds	r3, #1
 800e438:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	3301      	adds	r3, #1
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	2b07      	cmp	r3, #7
 800e444:	d9d4      	bls.n	800e3f0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e450:	f1a3 0220 	sub.w	r2, r3, #32
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e458:	bf00      	nop
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a1b      	ldr	r3, [r3, #32]
 800e472:	2b1f      	cmp	r3, #31
 800e474:	d93a      	bls.n	800e4ec <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e476:	2300      	movs	r3, #0
 800e478:	617b      	str	r3, [r7, #20]
 800e47a:	e02b      	b.n	800e4d4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	3301      	adds	r3, #1
 800e486:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	021a      	lsls	r2, r3, #8
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	4313      	orrs	r3, r2
 800e492:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	3301      	adds	r3, #1
 800e498:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	041a      	lsls	r2, r3, #16
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	061a      	lsls	r2, r3, #24
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f107 020c 	add.w	r2, r7, #12
 800e4c6:	4611      	mov	r1, r2
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f003 fb34 	bl	8011b36 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	617b      	str	r3, [r7, #20]
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	2b07      	cmp	r3, #7
 800e4d8:	d9d0      	bls.n	800e47c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	693a      	ldr	r2, [r7, #16]
 800e4de:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6a1b      	ldr	r3, [r3, #32]
 800e4e4:	f1a3 0220 	sub.w	r2, r3, #32
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	621a      	str	r2, [r3, #32]
  }
}
 800e4ec:	bf00      	nop
 800e4ee:	3718      	adds	r7, #24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e510:	bf00      	nop
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e524:	bf00      	nop
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e538:	bf00      	nop
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	e10f      	b.n	800e776 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a87      	ldr	r2, [pc, #540]	; (800e780 <HAL_SPI_Init+0x23c>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d00f      	beq.n	800e586 <HAL_SPI_Init+0x42>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a86      	ldr	r2, [pc, #536]	; (800e784 <HAL_SPI_Init+0x240>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d00a      	beq.n	800e586 <HAL_SPI_Init+0x42>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a84      	ldr	r2, [pc, #528]	; (800e788 <HAL_SPI_Init+0x244>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d005      	beq.n	800e586 <HAL_SPI_Init+0x42>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	2b0f      	cmp	r3, #15
 800e580:	d901      	bls.n	800e586 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e582:	2301      	movs	r3, #1
 800e584:	e0f7      	b.n	800e776 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 fd5a 	bl	800f040 <SPI_GetPacketSize>
 800e58c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a7b      	ldr	r2, [pc, #492]	; (800e780 <HAL_SPI_Init+0x23c>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d00c      	beq.n	800e5b2 <HAL_SPI_Init+0x6e>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a79      	ldr	r2, [pc, #484]	; (800e784 <HAL_SPI_Init+0x240>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d007      	beq.n	800e5b2 <HAL_SPI_Init+0x6e>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a78      	ldr	r2, [pc, #480]	; (800e788 <HAL_SPI_Init+0x244>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d002      	beq.n	800e5b2 <HAL_SPI_Init+0x6e>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b08      	cmp	r3, #8
 800e5b0:	d811      	bhi.n	800e5d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e5b6:	4a72      	ldr	r2, [pc, #456]	; (800e780 <HAL_SPI_Init+0x23c>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d009      	beq.n	800e5d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a70      	ldr	r2, [pc, #448]	; (800e784 <HAL_SPI_Init+0x240>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d004      	beq.n	800e5d0 <HAL_SPI_Init+0x8c>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a6f      	ldr	r2, [pc, #444]	; (800e788 <HAL_SPI_Init+0x244>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d104      	bne.n	800e5da <HAL_SPI_Init+0x96>
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	d901      	bls.n	800e5da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e0cd      	b.n	800e776 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d106      	bne.n	800e5f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7f4 face 	bl	8002b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f022 0201 	bic.w	r2, r2, #1
 800e60a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e616:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	699b      	ldr	r3, [r3, #24]
 800e61c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e620:	d119      	bne.n	800e656 <HAL_SPI_Init+0x112>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e62a:	d103      	bne.n	800e634 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e630:	2b00      	cmp	r3, #0
 800e632:	d008      	beq.n	800e646 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10c      	bne.n	800e656 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e644:	d107      	bne.n	800e656 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e654:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00f      	beq.n	800e682 <HAL_SPI_Init+0x13e>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	2b06      	cmp	r3, #6
 800e668:	d90b      	bls.n	800e682 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	430a      	orrs	r2, r1
 800e67e:	601a      	str	r2, [r3, #0]
 800e680:	e007      	b.n	800e692 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e690:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	69da      	ldr	r2, [r3, #28]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69a:	431a      	orrs	r2, r3
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	431a      	orrs	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a4:	ea42 0103 	orr.w	r1, r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68da      	ldr	r2, [r3, #12]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6bc:	431a      	orrs	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c2:	431a      	orrs	r2, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	431a      	orrs	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	431a      	orrs	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	695b      	ldr	r3, [r3, #20]
 800e6d4:	431a      	orrs	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	431a      	orrs	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	431a      	orrs	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6e6:	431a      	orrs	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	431a      	orrs	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f2:	ea42 0103 	orr.w	r1, r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	430a      	orrs	r2, r1
 800e700:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d113      	bne.n	800e732 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e71c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e730:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f022 0201 	bic.w	r2, r2, #1
 800e740:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00a      	beq.n	800e764 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	430a      	orrs	r2, r1
 800e762:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	40013000 	.word	0x40013000
 800e784:	40003800 	.word	0x40003800
 800e788:	40003c00 	.word	0x40003c00

0800e78c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08a      	sub	sp, #40	; 0x28
 800e790:	af02      	add	r7, sp, #8
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	4613      	mov	r3, r2
 800e79a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	3320      	adds	r3, #32
 800e7a2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d101      	bne.n	800e7b6 <HAL_SPI_Transmit+0x2a>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e1e1      	b.n	800eb7a <HAL_SPI_Transmit+0x3ee>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e7be:	f7f4 ffa3 	bl	8003708 <HAL_GetTick>
 800e7c2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d007      	beq.n	800e7e0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e7d0:	2302      	movs	r3, #2
 800e7d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e7dc:	7efb      	ldrb	r3, [r7, #27]
 800e7de:	e1cc      	b.n	800eb7a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <HAL_SPI_Transmit+0x60>
 800e7e6:	88fb      	ldrh	r3, [r7, #6]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d107      	bne.n	800e7fc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e7f8:	7efb      	ldrb	r3, [r7, #27]
 800e7fa:	e1be      	b.n	800eb7a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2203      	movs	r2, #3
 800e800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	88fa      	ldrh	r2, [r7, #6]
 800e816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	88fa      	ldrh	r2, [r7, #6]
 800e81e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2200      	movs	r2, #0
 800e82c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2200      	movs	r2, #0
 800e834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2200      	movs	r2, #0
 800e842:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e84c:	d108      	bne.n	800e860 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	e009      	b.n	800e874 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e872:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	4b96      	ldr	r3, [pc, #600]	; (800ead4 <HAL_SPI_Transmit+0x348>)
 800e87c:	4013      	ands	r3, r2
 800e87e:	88f9      	ldrh	r1, [r7, #6]
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	6812      	ldr	r2, [r2, #0]
 800e884:	430b      	orrs	r3, r1
 800e886:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f042 0201 	orr.w	r2, r2, #1
 800e896:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8a0:	d107      	bne.n	800e8b2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	2b0f      	cmp	r3, #15
 800e8b8:	d947      	bls.n	800e94a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e8ba:	e03f      	b.n	800e93c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	695b      	ldr	r3, [r3, #20]
 800e8c2:	f003 0302 	and.w	r3, r3, #2
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d114      	bne.n	800e8f4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	6812      	ldr	r2, [r2, #0]
 800e8d4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8da:	1d1a      	adds	r2, r3, #4
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e8f2:	e023      	b.n	800e93c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8f4:	f7f4 ff08 	bl	8003708 <HAL_GetTick>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	1ad3      	subs	r3, r2, r3
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d803      	bhi.n	800e90c <HAL_SPI_Transmit+0x180>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90a:	d102      	bne.n	800e912 <HAL_SPI_Transmit+0x186>
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d114      	bne.n	800e93c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f000 fac6 	bl	800eea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e938:	2303      	movs	r3, #3
 800e93a:	e11e      	b.n	800eb7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e942:	b29b      	uxth	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1b9      	bne.n	800e8bc <HAL_SPI_Transmit+0x130>
 800e948:	e0f1      	b.n	800eb2e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	2b07      	cmp	r3, #7
 800e950:	f240 80e6 	bls.w	800eb20 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e954:	e05d      	b.n	800ea12 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	695b      	ldr	r3, [r3, #20]
 800e95c:	f003 0302 	and.w	r3, r3, #2
 800e960:	2b02      	cmp	r3, #2
 800e962:	d132      	bne.n	800e9ca <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d918      	bls.n	800e9a2 <HAL_SPI_Transmit+0x216>
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e974:	2b00      	cmp	r3, #0
 800e976:	d014      	beq.n	800e9a2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	6812      	ldr	r2, [r2, #0]
 800e982:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e988:	1d1a      	adds	r2, r3, #4
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e994:	b29b      	uxth	r3, r3
 800e996:	3b02      	subs	r3, #2
 800e998:	b29a      	uxth	r2, r3
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e9a0:	e037      	b.n	800ea12 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9a6:	881a      	ldrh	r2, [r3, #0]
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9b0:	1c9a      	adds	r2, r3, #2
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e9c8:	e023      	b.n	800ea12 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9ca:	f7f4 fe9d 	bl	8003708 <HAL_GetTick>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d803      	bhi.n	800e9e2 <HAL_SPI_Transmit+0x256>
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e0:	d102      	bne.n	800e9e8 <HAL_SPI_Transmit+0x25c>
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d114      	bne.n	800ea12 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f000 fa5b 	bl	800eea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ea0e:	2303      	movs	r3, #3
 800ea10:	e0b3      	b.n	800eb7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d19b      	bne.n	800e956 <HAL_SPI_Transmit+0x1ca>
 800ea1e:	e086      	b.n	800eb2e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	695b      	ldr	r3, [r3, #20]
 800ea26:	f003 0302 	and.w	r3, r3, #2
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d154      	bne.n	800ead8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d918      	bls.n	800ea6c <HAL_SPI_Transmit+0x2e0>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea3e:	2b40      	cmp	r3, #64	; 0x40
 800ea40:	d914      	bls.n	800ea6c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	6812      	ldr	r2, [r2, #0]
 800ea4c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea52:	1d1a      	adds	r2, r3, #4
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	3b04      	subs	r3, #4
 800ea62:	b29a      	uxth	r2, r3
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea6a:	e059      	b.n	800eb20 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d917      	bls.n	800eaa8 <HAL_SPI_Transmit+0x31c>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d013      	beq.n	800eaa8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea84:	881a      	ldrh	r2, [r3, #0]
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea8e:	1c9a      	adds	r2, r3, #2
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	3b02      	subs	r3, #2
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eaa6:	e03b      	b.n	800eb20 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3320      	adds	r3, #32
 800eab2:	7812      	ldrb	r2, [r2, #0]
 800eab4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	3b01      	subs	r3, #1
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ead2:	e025      	b.n	800eb20 <HAL_SPI_Transmit+0x394>
 800ead4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ead8:	f7f4 fe16 	bl	8003708 <HAL_GetTick>
 800eadc:	4602      	mov	r2, r0
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	683a      	ldr	r2, [r7, #0]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d803      	bhi.n	800eaf0 <HAL_SPI_Transmit+0x364>
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaee:	d102      	bne.n	800eaf6 <HAL_SPI_Transmit+0x36a>
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d114      	bne.n	800eb20 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f000 f9d4 	bl	800eea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	e02c      	b.n	800eb7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f47f af79 	bne.w	800ea20 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2200      	movs	r2, #0
 800eb36:	2108      	movs	r1, #8
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f000 fa53 	bl	800efe4 <SPI_WaitOnFlagUntilTimeout>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d007      	beq.n	800eb54 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb4a:	f043 0220 	orr.w	r2, r3, #32
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f000 f9a5 	bl	800eea4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	e000      	b.n	800eb7a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800eb78:	7efb      	ldrb	r3, [r7, #27]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3720      	adds	r7, #32
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop

0800eb84 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	603b      	str	r3, [r7, #0]
 800eb90:	4613      	mov	r3, r2
 800eb92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	3330      	adds	r3, #48	; 0x30
 800eb9e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d101      	bne.n	800ebae <HAL_SPI_Receive+0x2a>
 800ebaa:	2302      	movs	r3, #2
 800ebac:	e173      	b.n	800ee96 <HAL_SPI_Receive+0x312>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ebb6:	f7f4 fda7 	bl	8003708 <HAL_GetTick>
 800ebba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d007      	beq.n	800ebd8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ebc8:	2302      	movs	r3, #2
 800ebca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebd4:	7ffb      	ldrb	r3, [r7, #31]
 800ebd6:	e15e      	b.n	800ee96 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d002      	beq.n	800ebe4 <HAL_SPI_Receive+0x60>
 800ebde:	88fb      	ldrh	r3, [r7, #6]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d107      	bne.n	800ebf4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebf0:	7ffb      	ldrb	r3, [r7, #31]
 800ebf2:	e150      	b.n	800ee96 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2204      	movs	r2, #4
 800ebf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	88fa      	ldrh	r2, [r7, #6]
 800ec0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	88fa      	ldrh	r2, [r7, #6]
 800ec16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec44:	d108      	bne.n	800ec58 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	e009      	b.n	800ec6c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ec6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685a      	ldr	r2, [r3, #4]
 800ec72:	4b8b      	ldr	r3, [pc, #556]	; (800eea0 <HAL_SPI_Receive+0x31c>)
 800ec74:	4013      	ands	r3, r2
 800ec76:	88f9      	ldrh	r1, [r7, #6]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	6812      	ldr	r2, [r2, #0]
 800ec7c:	430b      	orrs	r3, r1
 800ec7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f042 0201 	orr.w	r2, r2, #1
 800ec8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec98:	d107      	bne.n	800ecaa <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eca8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	2b0f      	cmp	r3, #15
 800ecb0:	d948      	bls.n	800ed44 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ecb2:	e040      	b.n	800ed36 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	695a      	ldr	r2, [r3, #20]
 800ecba:	f248 0308 	movw	r3, #32776	; 0x8008
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d014      	beq.n	800ecee <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eccc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ecce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecd4:	1d1a      	adds	r2, r3, #4
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	3b01      	subs	r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ecec:	e023      	b.n	800ed36 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecee:	f7f4 fd0b 	bl	8003708 <HAL_GetTick>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d803      	bhi.n	800ed06 <HAL_SPI_Receive+0x182>
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed04:	d102      	bne.n	800ed0c <HAL_SPI_Receive+0x188>
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d114      	bne.n	800ed36 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f000 f8c9 	bl	800eea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e0af      	b.n	800ee96 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1b8      	bne.n	800ecb4 <HAL_SPI_Receive+0x130>
 800ed42:	e095      	b.n	800ee70 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	2b07      	cmp	r3, #7
 800ed4a:	f240 808b 	bls.w	800ee64 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ed4e:	e03f      	b.n	800edd0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d114      	bne.n	800ed88 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	8812      	ldrh	r2, [r2, #0]
 800ed66:	b292      	uxth	r2, r2
 800ed68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed6e:	1c9a      	adds	r2, r3, #2
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ed86:	e023      	b.n	800edd0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed88:	f7f4 fcbe 	bl	8003708 <HAL_GetTick>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d803      	bhi.n	800eda0 <HAL_SPI_Receive+0x21c>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9e:	d102      	bne.n	800eda6 <HAL_SPI_Receive+0x222>
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d114      	bne.n	800edd0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f000 f87c 	bl	800eea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edcc:	2303      	movs	r3, #3
 800edce:	e062      	b.n	800ee96 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1b9      	bne.n	800ed50 <HAL_SPI_Receive+0x1cc>
 800eddc:	e048      	b.n	800ee70 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	f003 0301 	and.w	r3, r3, #1
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d117      	bne.n	800ee1c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edf8:	7812      	ldrb	r2, [r2, #0]
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee02:	1c5a      	adds	r2, r3, #1
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	3b01      	subs	r3, #1
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ee1a:	e023      	b.n	800ee64 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee1c:	f7f4 fc74 	bl	8003708 <HAL_GetTick>
 800ee20:	4602      	mov	r2, r0
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d803      	bhi.n	800ee34 <HAL_SPI_Receive+0x2b0>
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee32:	d102      	bne.n	800ee3a <HAL_SPI_Receive+0x2b6>
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d114      	bne.n	800ee64 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f000 f832 	bl	800eea4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee60:	2303      	movs	r3, #3
 800ee62:	e018      	b.n	800ee96 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1b6      	bne.n	800edde <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f000 f817 	bl	800eea4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800ee90:	2301      	movs	r3, #1
 800ee92:	e000      	b.n	800ee96 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800ee94:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3720      	adds	r7, #32
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	ffff0000 	.word	0xffff0000

0800eea4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	695b      	ldr	r3, [r3, #20]
 800eeb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	699a      	ldr	r2, [r3, #24]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f042 0208 	orr.w	r2, r2, #8
 800eec2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	699a      	ldr	r2, [r3, #24]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f042 0210 	orr.w	r2, r2, #16
 800eed2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f022 0201 	bic.w	r2, r2, #1
 800eee2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6919      	ldr	r1, [r3, #16]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	4b3c      	ldr	r3, [pc, #240]	; (800efe0 <SPI_CloseTransfer+0x13c>)
 800eef0:	400b      	ands	r3, r1
 800eef2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	689a      	ldr	r2, [r3, #8]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ef02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b04      	cmp	r3, #4
 800ef0e:	d014      	beq.n	800ef3a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f003 0320 	and.w	r3, r3, #32
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00f      	beq.n	800ef3a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	699a      	ldr	r2, [r3, #24]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f042 0220 	orr.w	r2, r2, #32
 800ef38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b03      	cmp	r3, #3
 800ef44:	d014      	beq.n	800ef70 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00f      	beq.n	800ef70 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef56:	f043 0204 	orr.w	r2, r3, #4
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	699a      	ldr	r2, [r3, #24]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00f      	beq.n	800ef9a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef80:	f043 0201 	orr.w	r2, r3, #1
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	699a      	ldr	r2, [r3, #24]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00f      	beq.n	800efc4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efaa:	f043 0208 	orr.w	r2, r3, #8
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699a      	ldr	r2, [r3, #24]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800efc2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800efd4:	bf00      	nop
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	fffffc90 	.word	0xfffffc90

0800efe4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	603b      	str	r3, [r7, #0]
 800eff0:	4613      	mov	r3, r2
 800eff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800eff4:	e010      	b.n	800f018 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eff6:	f7f4 fb87 	bl	8003708 <HAL_GetTick>
 800effa:	4602      	mov	r2, r0
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	429a      	cmp	r2, r3
 800f004:	d803      	bhi.n	800f00e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00c:	d102      	bne.n	800f014 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f014:	2303      	movs	r3, #3
 800f016:	e00f      	b.n	800f038 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	695a      	ldr	r2, [r3, #20]
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	4013      	ands	r3, r2
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	429a      	cmp	r2, r3
 800f026:	bf0c      	ite	eq
 800f028:	2301      	moveq	r3, #1
 800f02a:	2300      	movne	r3, #0
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	461a      	mov	r2, r3
 800f030:	79fb      	ldrb	r3, [r7, #7]
 800f032:	429a      	cmp	r2, r3
 800f034:	d0df      	beq.n	800eff6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f040:	b480      	push	{r7}
 800f042:	b085      	sub	sp, #20
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f04c:	095b      	lsrs	r3, r3, #5
 800f04e:	3301      	adds	r3, #1
 800f050:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	3301      	adds	r3, #1
 800f058:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	3307      	adds	r3, #7
 800f05e:	08db      	lsrs	r3, r3, #3
 800f060:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	fb02 f303 	mul.w	r3, r2, r3
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3714      	adds	r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b082      	sub	sp, #8
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	e049      	b.n	800f11c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b00      	cmp	r3, #0
 800f092:	d106      	bne.n	800f0a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7f3 fe33 	bl	8002d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2202      	movs	r2, #2
 800f0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	3304      	adds	r3, #4
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	f000 fed1 	bl	800fe5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2201      	movs	r2, #1
 800f106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2201      	movs	r2, #1
 800f10e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2201      	movs	r2, #1
 800f116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d109      	bne.n	800f148 <HAL_TIM_PWM_Start+0x24>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	bf14      	ite	ne
 800f140:	2301      	movne	r3, #1
 800f142:	2300      	moveq	r3, #0
 800f144:	b2db      	uxtb	r3, r3
 800f146:	e03c      	b.n	800f1c2 <HAL_TIM_PWM_Start+0x9e>
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	d109      	bne.n	800f162 <HAL_TIM_PWM_Start+0x3e>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f154:	b2db      	uxtb	r3, r3
 800f156:	2b01      	cmp	r3, #1
 800f158:	bf14      	ite	ne
 800f15a:	2301      	movne	r3, #1
 800f15c:	2300      	moveq	r3, #0
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	e02f      	b.n	800f1c2 <HAL_TIM_PWM_Start+0x9e>
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	2b08      	cmp	r3, #8
 800f166:	d109      	bne.n	800f17c <HAL_TIM_PWM_Start+0x58>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b01      	cmp	r3, #1
 800f172:	bf14      	ite	ne
 800f174:	2301      	movne	r3, #1
 800f176:	2300      	moveq	r3, #0
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	e022      	b.n	800f1c2 <HAL_TIM_PWM_Start+0x9e>
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b0c      	cmp	r3, #12
 800f180:	d109      	bne.n	800f196 <HAL_TIM_PWM_Start+0x72>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	bf14      	ite	ne
 800f18e:	2301      	movne	r3, #1
 800f190:	2300      	moveq	r3, #0
 800f192:	b2db      	uxtb	r3, r3
 800f194:	e015      	b.n	800f1c2 <HAL_TIM_PWM_Start+0x9e>
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	2b10      	cmp	r3, #16
 800f19a:	d109      	bne.n	800f1b0 <HAL_TIM_PWM_Start+0x8c>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	bf14      	ite	ne
 800f1a8:	2301      	movne	r3, #1
 800f1aa:	2300      	moveq	r3, #0
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	e008      	b.n	800f1c2 <HAL_TIM_PWM_Start+0x9e>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	bf14      	ite	ne
 800f1bc:	2301      	movne	r3, #1
 800f1be:	2300      	moveq	r3, #0
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d001      	beq.n	800f1ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e0ab      	b.n	800f322 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d104      	bne.n	800f1da <HAL_TIM_PWM_Start+0xb6>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f1d8:	e023      	b.n	800f222 <HAL_TIM_PWM_Start+0xfe>
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	2b04      	cmp	r3, #4
 800f1de:	d104      	bne.n	800f1ea <HAL_TIM_PWM_Start+0xc6>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2202      	movs	r2, #2
 800f1e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1e8:	e01b      	b.n	800f222 <HAL_TIM_PWM_Start+0xfe>
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2b08      	cmp	r3, #8
 800f1ee:	d104      	bne.n	800f1fa <HAL_TIM_PWM_Start+0xd6>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f1f8:	e013      	b.n	800f222 <HAL_TIM_PWM_Start+0xfe>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b0c      	cmp	r3, #12
 800f1fe:	d104      	bne.n	800f20a <HAL_TIM_PWM_Start+0xe6>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2202      	movs	r2, #2
 800f204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f208:	e00b      	b.n	800f222 <HAL_TIM_PWM_Start+0xfe>
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	2b10      	cmp	r3, #16
 800f20e:	d104      	bne.n	800f21a <HAL_TIM_PWM_Start+0xf6>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2202      	movs	r2, #2
 800f214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f218:	e003      	b.n	800f222 <HAL_TIM_PWM_Start+0xfe>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2202      	movs	r2, #2
 800f21e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2201      	movs	r2, #1
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f001 f992 	bl	8010554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a3d      	ldr	r2, [pc, #244]	; (800f32c <HAL_TIM_PWM_Start+0x208>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d013      	beq.n	800f262 <HAL_TIM_PWM_Start+0x13e>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4a3c      	ldr	r2, [pc, #240]	; (800f330 <HAL_TIM_PWM_Start+0x20c>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d00e      	beq.n	800f262 <HAL_TIM_PWM_Start+0x13e>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4a3a      	ldr	r2, [pc, #232]	; (800f334 <HAL_TIM_PWM_Start+0x210>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d009      	beq.n	800f262 <HAL_TIM_PWM_Start+0x13e>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4a39      	ldr	r2, [pc, #228]	; (800f338 <HAL_TIM_PWM_Start+0x214>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d004      	beq.n	800f262 <HAL_TIM_PWM_Start+0x13e>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a37      	ldr	r2, [pc, #220]	; (800f33c <HAL_TIM_PWM_Start+0x218>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d101      	bne.n	800f266 <HAL_TIM_PWM_Start+0x142>
 800f262:	2301      	movs	r3, #1
 800f264:	e000      	b.n	800f268 <HAL_TIM_PWM_Start+0x144>
 800f266:	2300      	movs	r3, #0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d007      	beq.n	800f27c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f27a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a2a      	ldr	r2, [pc, #168]	; (800f32c <HAL_TIM_PWM_Start+0x208>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d02c      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f28e:	d027      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a2a      	ldr	r2, [pc, #168]	; (800f340 <HAL_TIM_PWM_Start+0x21c>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d022      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a29      	ldr	r2, [pc, #164]	; (800f344 <HAL_TIM_PWM_Start+0x220>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d01d      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a27      	ldr	r2, [pc, #156]	; (800f348 <HAL_TIM_PWM_Start+0x224>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d018      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a1f      	ldr	r2, [pc, #124]	; (800f330 <HAL_TIM_PWM_Start+0x20c>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d013      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a23      	ldr	r2, [pc, #140]	; (800f34c <HAL_TIM_PWM_Start+0x228>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d00e      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a1b      	ldr	r2, [pc, #108]	; (800f334 <HAL_TIM_PWM_Start+0x210>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d009      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a1f      	ldr	r2, [pc, #124]	; (800f350 <HAL_TIM_PWM_Start+0x22c>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d004      	beq.n	800f2e0 <HAL_TIM_PWM_Start+0x1bc>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a1e      	ldr	r2, [pc, #120]	; (800f354 <HAL_TIM_PWM_Start+0x230>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d115      	bne.n	800f30c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	689a      	ldr	r2, [r3, #8]
 800f2e6:	4b1c      	ldr	r3, [pc, #112]	; (800f358 <HAL_TIM_PWM_Start+0x234>)
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b06      	cmp	r3, #6
 800f2f0:	d015      	beq.n	800f31e <HAL_TIM_PWM_Start+0x1fa>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2f8:	d011      	beq.n	800f31e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f042 0201 	orr.w	r2, r2, #1
 800f308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f30a:	e008      	b.n	800f31e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f042 0201 	orr.w	r2, r2, #1
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	e000      	b.n	800f320 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f31e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	40010000 	.word	0x40010000
 800f330:	40010400 	.word	0x40010400
 800f334:	40014000 	.word	0x40014000
 800f338:	40014400 	.word	0x40014400
 800f33c:	40014800 	.word	0x40014800
 800f340:	40000400 	.word	0x40000400
 800f344:	40000800 	.word	0x40000800
 800f348:	40000c00 	.word	0x40000c00
 800f34c:	40001800 	.word	0x40001800
 800f350:	4000e000 	.word	0x4000e000
 800f354:	4000e400 	.word	0x4000e400
 800f358:	00010007 	.word	0x00010007

0800f35c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b086      	sub	sp, #24
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f36a:	2300      	movs	r3, #0
 800f36c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d109      	bne.n	800f388 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	bf0c      	ite	eq
 800f380:	2301      	moveq	r3, #1
 800f382:	2300      	movne	r3, #0
 800f384:	b2db      	uxtb	r3, r3
 800f386:	e03c      	b.n	800f402 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	2b04      	cmp	r3, #4
 800f38c:	d109      	bne.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2b02      	cmp	r3, #2
 800f398:	bf0c      	ite	eq
 800f39a:	2301      	moveq	r3, #1
 800f39c:	2300      	movne	r3, #0
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	e02f      	b.n	800f402 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	2b08      	cmp	r3, #8
 800f3a6:	d109      	bne.n	800f3bc <HAL_TIM_PWM_Start_DMA+0x60>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	2b02      	cmp	r3, #2
 800f3b2:	bf0c      	ite	eq
 800f3b4:	2301      	moveq	r3, #1
 800f3b6:	2300      	movne	r3, #0
 800f3b8:	b2db      	uxtb	r3, r3
 800f3ba:	e022      	b.n	800f402 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	2b0c      	cmp	r3, #12
 800f3c0:	d109      	bne.n	800f3d6 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	bf0c      	ite	eq
 800f3ce:	2301      	moveq	r3, #1
 800f3d0:	2300      	movne	r3, #0
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	e015      	b.n	800f402 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	2b10      	cmp	r3, #16
 800f3da:	d109      	bne.n	800f3f0 <HAL_TIM_PWM_Start_DMA+0x94>
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	bf0c      	ite	eq
 800f3e8:	2301      	moveq	r3, #1
 800f3ea:	2300      	movne	r3, #0
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	e008      	b.n	800f402 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	2b02      	cmp	r3, #2
 800f3fa:	bf0c      	ite	eq
 800f3fc:	2301      	moveq	r3, #1
 800f3fe:	2300      	movne	r3, #0
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f406:	2302      	movs	r3, #2
 800f408:	e1ba      	b.n	800f780 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d109      	bne.n	800f424 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f416:	b2db      	uxtb	r3, r3
 800f418:	2b01      	cmp	r3, #1
 800f41a:	bf0c      	ite	eq
 800f41c:	2301      	moveq	r3, #1
 800f41e:	2300      	movne	r3, #0
 800f420:	b2db      	uxtb	r3, r3
 800f422:	e03c      	b.n	800f49e <HAL_TIM_PWM_Start_DMA+0x142>
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	2b04      	cmp	r3, #4
 800f428:	d109      	bne.n	800f43e <HAL_TIM_PWM_Start_DMA+0xe2>
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f430:	b2db      	uxtb	r3, r3
 800f432:	2b01      	cmp	r3, #1
 800f434:	bf0c      	ite	eq
 800f436:	2301      	moveq	r3, #1
 800f438:	2300      	movne	r3, #0
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	e02f      	b.n	800f49e <HAL_TIM_PWM_Start_DMA+0x142>
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	2b08      	cmp	r3, #8
 800f442:	d109      	bne.n	800f458 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	bf0c      	ite	eq
 800f450:	2301      	moveq	r3, #1
 800f452:	2300      	movne	r3, #0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	e022      	b.n	800f49e <HAL_TIM_PWM_Start_DMA+0x142>
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b0c      	cmp	r3, #12
 800f45c:	d109      	bne.n	800f472 <HAL_TIM_PWM_Start_DMA+0x116>
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b01      	cmp	r3, #1
 800f468:	bf0c      	ite	eq
 800f46a:	2301      	moveq	r3, #1
 800f46c:	2300      	movne	r3, #0
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	e015      	b.n	800f49e <HAL_TIM_PWM_Start_DMA+0x142>
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	2b10      	cmp	r3, #16
 800f476:	d109      	bne.n	800f48c <HAL_TIM_PWM_Start_DMA+0x130>
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	2b01      	cmp	r3, #1
 800f482:	bf0c      	ite	eq
 800f484:	2301      	moveq	r3, #1
 800f486:	2300      	movne	r3, #0
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	e008      	b.n	800f49e <HAL_TIM_PWM_Start_DMA+0x142>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f492:	b2db      	uxtb	r3, r3
 800f494:	2b01      	cmp	r3, #1
 800f496:	bf0c      	ite	eq
 800f498:	2301      	moveq	r3, #1
 800f49a:	2300      	movne	r3, #0
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d034      	beq.n	800f50c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d002      	beq.n	800f4ae <HAL_TIM_PWM_Start_DMA+0x152>
 800f4a8:	887b      	ldrh	r3, [r7, #2]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d101      	bne.n	800f4b2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e166      	b.n	800f780 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d104      	bne.n	800f4c2 <HAL_TIM_PWM_Start_DMA+0x166>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2202      	movs	r2, #2
 800f4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4c0:	e026      	b.n	800f510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	2b04      	cmp	r3, #4
 800f4c6:	d104      	bne.n	800f4d2 <HAL_TIM_PWM_Start_DMA+0x176>
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4d0:	e01e      	b.n	800f510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	2b08      	cmp	r3, #8
 800f4d6:	d104      	bne.n	800f4e2 <HAL_TIM_PWM_Start_DMA+0x186>
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2202      	movs	r2, #2
 800f4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4e0:	e016      	b.n	800f510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	2b0c      	cmp	r3, #12
 800f4e6:	d104      	bne.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x196>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4f0:	e00e      	b.n	800f510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b10      	cmp	r3, #16
 800f4f6:	d104      	bne.n	800f502 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2202      	movs	r2, #2
 800f4fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f500:	e006      	b.n	800f510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2202      	movs	r2, #2
 800f506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f50a:	e001      	b.n	800f510 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	e137      	b.n	800f780 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2b0c      	cmp	r3, #12
 800f514:	f200 80ae 	bhi.w	800f674 <HAL_TIM_PWM_Start_DMA+0x318>
 800f518:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51e:	bf00      	nop
 800f520:	0800f555 	.word	0x0800f555
 800f524:	0800f675 	.word	0x0800f675
 800f528:	0800f675 	.word	0x0800f675
 800f52c:	0800f675 	.word	0x0800f675
 800f530:	0800f59d 	.word	0x0800f59d
 800f534:	0800f675 	.word	0x0800f675
 800f538:	0800f675 	.word	0x0800f675
 800f53c:	0800f675 	.word	0x0800f675
 800f540:	0800f5e5 	.word	0x0800f5e5
 800f544:	0800f675 	.word	0x0800f675
 800f548:	0800f675 	.word	0x0800f675
 800f54c:	0800f675 	.word	0x0800f675
 800f550:	0800f62d 	.word	0x0800f62d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f558:	4a8b      	ldr	r2, [pc, #556]	; (800f788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f55a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f560:	4a8a      	ldr	r2, [pc, #552]	; (800f78c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f568:	4a89      	ldr	r2, [pc, #548]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f56a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f570:	6879      	ldr	r1, [r7, #4]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	3334      	adds	r3, #52	; 0x34
 800f578:	461a      	mov	r2, r3
 800f57a:	887b      	ldrh	r3, [r7, #2]
 800f57c:	f7f6 f8e4 	bl	8005748 <HAL_DMA_Start_IT>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	e0fa      	b.n	800f780 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	68da      	ldr	r2, [r3, #12]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f598:	60da      	str	r2, [r3, #12]
      break;
 800f59a:	e06e      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a0:	4a79      	ldr	r2, [pc, #484]	; (800f788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f5a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a8:	4a78      	ldr	r2, [pc, #480]	; (800f78c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f5aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b0:	4a77      	ldr	r2, [pc, #476]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f5b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f5b8:	6879      	ldr	r1, [r7, #4]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	3338      	adds	r3, #56	; 0x38
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	887b      	ldrh	r3, [r7, #2]
 800f5c4:	f7f6 f8c0 	bl	8005748 <HAL_DMA_Start_IT>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d001      	beq.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	e0d6      	b.n	800f780 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	68da      	ldr	r2, [r3, #12]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f5e0:	60da      	str	r2, [r3, #12]
      break;
 800f5e2:	e04a      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e8:	4a67      	ldr	r2, [pc, #412]	; (800f788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f5ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f0:	4a66      	ldr	r2, [pc, #408]	; (800f78c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f5f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f8:	4a65      	ldr	r2, [pc, #404]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f5fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f600:	6879      	ldr	r1, [r7, #4]
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	333c      	adds	r3, #60	; 0x3c
 800f608:	461a      	mov	r2, r3
 800f60a:	887b      	ldrh	r3, [r7, #2]
 800f60c:	f7f6 f89c 	bl	8005748 <HAL_DMA_Start_IT>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	e0b2      	b.n	800f780 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	68da      	ldr	r2, [r3, #12]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f628:	60da      	str	r2, [r3, #12]
      break;
 800f62a:	e026      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f630:	4a55      	ldr	r2, [pc, #340]	; (800f788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f632:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f638:	4a54      	ldr	r2, [pc, #336]	; (800f78c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f63a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f640:	4a53      	ldr	r2, [pc, #332]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f642:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f648:	6879      	ldr	r1, [r7, #4]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3340      	adds	r3, #64	; 0x40
 800f650:	461a      	mov	r2, r3
 800f652:	887b      	ldrh	r3, [r7, #2]
 800f654:	f7f6 f878 	bl	8005748 <HAL_DMA_Start_IT>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	e08e      	b.n	800f780 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	68da      	ldr	r2, [r3, #12]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f670:	60da      	str	r2, [r3, #12]
      break;
 800f672:	e002      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f674:	2301      	movs	r3, #1
 800f676:	75fb      	strb	r3, [r7, #23]
      break;
 800f678:	bf00      	nop
  }

  if (status == HAL_OK)
 800f67a:	7dfb      	ldrb	r3, [r7, #23]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d17e      	bne.n	800f77e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	2201      	movs	r2, #1
 800f686:	68b9      	ldr	r1, [r7, #8]
 800f688:	4618      	mov	r0, r3
 800f68a:	f000 ff63 	bl	8010554 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a40      	ldr	r2, [pc, #256]	; (800f794 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d013      	beq.n	800f6c0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a3e      	ldr	r2, [pc, #248]	; (800f798 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d00e      	beq.n	800f6c0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a3d      	ldr	r2, [pc, #244]	; (800f79c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d009      	beq.n	800f6c0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a3b      	ldr	r2, [pc, #236]	; (800f7a0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d004      	beq.n	800f6c0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a3a      	ldr	r2, [pc, #232]	; (800f7a4 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d101      	bne.n	800f6c4 <HAL_TIM_PWM_Start_DMA+0x368>
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e000      	b.n	800f6c6 <HAL_TIM_PWM_Start_DMA+0x36a>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d007      	beq.n	800f6da <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4a2d      	ldr	r2, [pc, #180]	; (800f794 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d02c      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ec:	d027      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a2d      	ldr	r2, [pc, #180]	; (800f7a8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d022      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a2b      	ldr	r2, [pc, #172]	; (800f7ac <HAL_TIM_PWM_Start_DMA+0x450>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d01d      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4a2a      	ldr	r2, [pc, #168]	; (800f7b0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d018      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a21      	ldr	r2, [pc, #132]	; (800f798 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d013      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4a26      	ldr	r2, [pc, #152]	; (800f7b4 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d00e      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a1d      	ldr	r2, [pc, #116]	; (800f79c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d009      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a22      	ldr	r2, [pc, #136]	; (800f7b8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d004      	beq.n	800f73e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a20      	ldr	r2, [pc, #128]	; (800f7bc <HAL_TIM_PWM_Start_DMA+0x460>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d115      	bne.n	800f76a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	689a      	ldr	r2, [r3, #8]
 800f744:	4b1e      	ldr	r3, [pc, #120]	; (800f7c0 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f746:	4013      	ands	r3, r2
 800f748:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	2b06      	cmp	r3, #6
 800f74e:	d015      	beq.n	800f77c <HAL_TIM_PWM_Start_DMA+0x420>
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f756:	d011      	beq.n	800f77c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f042 0201 	orr.w	r2, r2, #1
 800f766:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f768:	e008      	b.n	800f77c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f042 0201 	orr.w	r2, r2, #1
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	e000      	b.n	800f77e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f77c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3718      	adds	r7, #24
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	0800fd4b 	.word	0x0800fd4b
 800f78c:	0800fdf3 	.word	0x0800fdf3
 800f790:	0800fcb9 	.word	0x0800fcb9
 800f794:	40010000 	.word	0x40010000
 800f798:	40010400 	.word	0x40010400
 800f79c:	40014000 	.word	0x40014000
 800f7a0:	40014400 	.word	0x40014400
 800f7a4:	40014800 	.word	0x40014800
 800f7a8:	40000400 	.word	0x40000400
 800f7ac:	40000800 	.word	0x40000800
 800f7b0:	40000c00 	.word	0x40000c00
 800f7b4:	40001800 	.word	0x40001800
 800f7b8:	4000e000 	.word	0x4000e000
 800f7bc:	4000e400 	.word	0x4000e400
 800f7c0:	00010007 	.word	0x00010007

0800f7c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	f003 0302 	and.w	r3, r3, #2
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d122      	bne.n	800f820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	f003 0302 	and.w	r3, r3, #2
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d11b      	bne.n	800f820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f06f 0202 	mvn.w	r2, #2
 800f7f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	699b      	ldr	r3, [r3, #24]
 800f7fe:	f003 0303 	and.w	r3, r3, #3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d003      	beq.n	800f80e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fa24 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f80c:	e005      	b.n	800f81a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 fa16 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 fa27 	bl	800fc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	691b      	ldr	r3, [r3, #16]
 800f826:	f003 0304 	and.w	r3, r3, #4
 800f82a:	2b04      	cmp	r3, #4
 800f82c:	d122      	bne.n	800f874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	f003 0304 	and.w	r3, r3, #4
 800f838:	2b04      	cmp	r3, #4
 800f83a:	d11b      	bne.n	800f874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f06f 0204 	mvn.w	r2, #4
 800f844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2202      	movs	r2, #2
 800f84a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f856:	2b00      	cmp	r3, #0
 800f858:	d003      	beq.n	800f862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 f9fa 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f860:	e005      	b.n	800f86e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f9ec 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 f9fd 	bl	800fc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	691b      	ldr	r3, [r3, #16]
 800f87a:	f003 0308 	and.w	r3, r3, #8
 800f87e:	2b08      	cmp	r3, #8
 800f880:	d122      	bne.n	800f8c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	f003 0308 	and.w	r3, r3, #8
 800f88c:	2b08      	cmp	r3, #8
 800f88e:	d11b      	bne.n	800f8c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f06f 0208 	mvn.w	r2, #8
 800f898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2204      	movs	r2, #4
 800f89e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	69db      	ldr	r3, [r3, #28]
 800f8a6:	f003 0303 	and.w	r3, r3, #3
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d003      	beq.n	800f8b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f9d0 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f8b4:	e005      	b.n	800f8c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f9c2 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f9d3 	bl	800fc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	f003 0310 	and.w	r3, r3, #16
 800f8d2:	2b10      	cmp	r3, #16
 800f8d4:	d122      	bne.n	800f91c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	f003 0310 	and.w	r3, r3, #16
 800f8e0:	2b10      	cmp	r3, #16
 800f8e2:	d11b      	bne.n	800f91c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f06f 0210 	mvn.w	r2, #16
 800f8ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2208      	movs	r2, #8
 800f8f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	69db      	ldr	r3, [r3, #28]
 800f8fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d003      	beq.n	800f90a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f9a6 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f908:	e005      	b.n	800f916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f998 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 f9a9 	bl	800fc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	691b      	ldr	r3, [r3, #16]
 800f922:	f003 0301 	and.w	r3, r3, #1
 800f926:	2b01      	cmp	r3, #1
 800f928:	d10e      	bne.n	800f948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	f003 0301 	and.w	r3, r3, #1
 800f934:	2b01      	cmp	r3, #1
 800f936:	d107      	bne.n	800f948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f06f 0201 	mvn.w	r2, #1
 800f940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 f972 	bl	800fc2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f952:	2b80      	cmp	r3, #128	; 0x80
 800f954:	d10e      	bne.n	800f974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f960:	2b80      	cmp	r3, #128	; 0x80
 800f962:	d107      	bne.n	800f974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 febc 	bl	80106ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	691b      	ldr	r3, [r3, #16]
 800f97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f97e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f982:	d10e      	bne.n	800f9a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f98e:	2b80      	cmp	r3, #128	; 0x80
 800f990:	d107      	bne.n	800f9a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 feaf 	bl	8010700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	691b      	ldr	r3, [r3, #16]
 800f9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ac:	2b40      	cmp	r3, #64	; 0x40
 800f9ae:	d10e      	bne.n	800f9ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ba:	2b40      	cmp	r3, #64	; 0x40
 800f9bc:	d107      	bne.n	800f9ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f9c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 f961 	bl	800fc90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	f003 0320 	and.w	r3, r3, #32
 800f9d8:	2b20      	cmp	r3, #32
 800f9da:	d10e      	bne.n	800f9fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	f003 0320 	and.w	r3, r3, #32
 800f9e6:	2b20      	cmp	r3, #32
 800f9e8:	d107      	bne.n	800f9fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f06f 0220 	mvn.w	r2, #32
 800f9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 fe6f 	bl	80106d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f9fa:	bf00      	nop
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
	...

0800fa04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa10:	2300      	movs	r3, #0
 800fa12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d101      	bne.n	800fa22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fa1e:	2302      	movs	r3, #2
 800fa20:	e0ff      	b.n	800fc22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2201      	movs	r2, #1
 800fa26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b14      	cmp	r3, #20
 800fa2e:	f200 80f0 	bhi.w	800fc12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fa32:	a201      	add	r2, pc, #4	; (adr r2, 800fa38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa38:	0800fa8d 	.word	0x0800fa8d
 800fa3c:	0800fc13 	.word	0x0800fc13
 800fa40:	0800fc13 	.word	0x0800fc13
 800fa44:	0800fc13 	.word	0x0800fc13
 800fa48:	0800facd 	.word	0x0800facd
 800fa4c:	0800fc13 	.word	0x0800fc13
 800fa50:	0800fc13 	.word	0x0800fc13
 800fa54:	0800fc13 	.word	0x0800fc13
 800fa58:	0800fb0f 	.word	0x0800fb0f
 800fa5c:	0800fc13 	.word	0x0800fc13
 800fa60:	0800fc13 	.word	0x0800fc13
 800fa64:	0800fc13 	.word	0x0800fc13
 800fa68:	0800fb4f 	.word	0x0800fb4f
 800fa6c:	0800fc13 	.word	0x0800fc13
 800fa70:	0800fc13 	.word	0x0800fc13
 800fa74:	0800fc13 	.word	0x0800fc13
 800fa78:	0800fb91 	.word	0x0800fb91
 800fa7c:	0800fc13 	.word	0x0800fc13
 800fa80:	0800fc13 	.word	0x0800fc13
 800fa84:	0800fc13 	.word	0x0800fc13
 800fa88:	0800fbd1 	.word	0x0800fbd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	68b9      	ldr	r1, [r7, #8]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f000 fa88 	bl	800ffa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	699a      	ldr	r2, [r3, #24]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f042 0208 	orr.w	r2, r2, #8
 800faa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	699a      	ldr	r2, [r3, #24]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f022 0204 	bic.w	r2, r2, #4
 800fab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6999      	ldr	r1, [r3, #24]
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	691a      	ldr	r2, [r3, #16]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	430a      	orrs	r2, r1
 800fac8:	619a      	str	r2, [r3, #24]
      break;
 800faca:	e0a5      	b.n	800fc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68b9      	ldr	r1, [r7, #8]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 faf8 	bl	80100c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	699a      	ldr	r2, [r3, #24]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	699a      	ldr	r2, [r3, #24]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6999      	ldr	r1, [r3, #24]
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	691b      	ldr	r3, [r3, #16]
 800fb02:	021a      	lsls	r2, r3, #8
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	430a      	orrs	r2, r1
 800fb0a:	619a      	str	r2, [r3, #24]
      break;
 800fb0c:	e084      	b.n	800fc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	68b9      	ldr	r1, [r7, #8]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f000 fb61 	bl	80101dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	69da      	ldr	r2, [r3, #28]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f042 0208 	orr.w	r2, r2, #8
 800fb28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	69da      	ldr	r2, [r3, #28]
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f022 0204 	bic.w	r2, r2, #4
 800fb38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	69d9      	ldr	r1, [r3, #28]
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	691a      	ldr	r2, [r3, #16]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	430a      	orrs	r2, r1
 800fb4a:	61da      	str	r2, [r3, #28]
      break;
 800fb4c:	e064      	b.n	800fc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68b9      	ldr	r1, [r7, #8]
 800fb54:	4618      	mov	r0, r3
 800fb56:	f000 fbc9 	bl	80102ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	69da      	ldr	r2, [r3, #28]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	69da      	ldr	r2, [r3, #28]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	69d9      	ldr	r1, [r3, #28]
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	021a      	lsls	r2, r3, #8
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	430a      	orrs	r2, r1
 800fb8c:	61da      	str	r2, [r3, #28]
      break;
 800fb8e:	e043      	b.n	800fc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68b9      	ldr	r1, [r7, #8]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f000 fc12 	bl	80103c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f042 0208 	orr.w	r2, r2, #8
 800fbaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f022 0204 	bic.w	r2, r2, #4
 800fbba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	691a      	ldr	r2, [r3, #16]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	430a      	orrs	r2, r1
 800fbcc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fbce:	e023      	b.n	800fc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68b9      	ldr	r1, [r7, #8]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f000 fc56 	bl	8010488 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	691b      	ldr	r3, [r3, #16]
 800fc06:	021a      	lsls	r2, r3, #8
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	430a      	orrs	r2, r1
 800fc0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc10:	e002      	b.n	800fc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	75fb      	strb	r3, [r7, #23]
      break;
 800fc16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop

0800fc2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fc34:	bf00      	nop
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fc98:	bf00      	nop
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fcac:	bf00      	nop
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d107      	bne.n	800fce0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fcde:	e02a      	b.n	800fd36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d107      	bne.n	800fcfa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2202      	movs	r2, #2
 800fcee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fcf8:	e01d      	b.n	800fd36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d107      	bne.n	800fd14 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2204      	movs	r2, #4
 800fd08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd12:	e010      	b.n	800fd36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d107      	bne.n	800fd2e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2208      	movs	r2, #8
 800fd22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2201      	movs	r2, #1
 800fd28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fd2c:	e003      	b.n	800fd36 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2201      	movs	r2, #1
 800fd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f7ff ffb4 	bl	800fca4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	771a      	strb	r2, [r3, #28]
}
 800fd42:	bf00      	nop
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b084      	sub	sp, #16
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d10b      	bne.n	800fd7a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2201      	movs	r2, #1
 800fd66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	69db      	ldr	r3, [r3, #28]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d136      	bne.n	800fdde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2201      	movs	r2, #1
 800fd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd78:	e031      	b.n	800fdde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d10b      	bne.n	800fd9c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2202      	movs	r2, #2
 800fd88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	69db      	ldr	r3, [r3, #28]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d125      	bne.n	800fdde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2201      	movs	r2, #1
 800fd96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd9a:	e020      	b.n	800fdde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d10b      	bne.n	800fdbe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2204      	movs	r2, #4
 800fdaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	69db      	ldr	r3, [r3, #28]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d114      	bne.n	800fdde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fdbc:	e00f      	b.n	800fdde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d10a      	bne.n	800fdde <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2208      	movs	r2, #8
 800fdcc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	69db      	ldr	r3, [r3, #28]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d103      	bne.n	800fdde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f7ff ff42 	bl	800fc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2200      	movs	r2, #0
 800fde8:	771a      	strb	r2, [r3, #28]
}
 800fdea:	bf00      	nop
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdfe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d103      	bne.n	800fe12 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	771a      	strb	r2, [r3, #28]
 800fe10:	e019      	b.n	800fe46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d103      	bne.n	800fe24 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2202      	movs	r2, #2
 800fe20:	771a      	strb	r2, [r3, #28]
 800fe22:	e010      	b.n	800fe46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d103      	bne.n	800fe36 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2204      	movs	r2, #4
 800fe32:	771a      	strb	r2, [r3, #28]
 800fe34:	e007      	b.n	800fe46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d102      	bne.n	800fe46 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2208      	movs	r2, #8
 800fe44:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff ff18 	bl	800fc7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	771a      	strb	r2, [r3, #28]
}
 800fe52:	bf00      	nop
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
	...

0800fe5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4a44      	ldr	r2, [pc, #272]	; (800ff80 <TIM_Base_SetConfig+0x124>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d013      	beq.n	800fe9c <TIM_Base_SetConfig+0x40>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe7a:	d00f      	beq.n	800fe9c <TIM_Base_SetConfig+0x40>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a41      	ldr	r2, [pc, #260]	; (800ff84 <TIM_Base_SetConfig+0x128>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d00b      	beq.n	800fe9c <TIM_Base_SetConfig+0x40>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4a40      	ldr	r2, [pc, #256]	; (800ff88 <TIM_Base_SetConfig+0x12c>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d007      	beq.n	800fe9c <TIM_Base_SetConfig+0x40>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4a3f      	ldr	r2, [pc, #252]	; (800ff8c <TIM_Base_SetConfig+0x130>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d003      	beq.n	800fe9c <TIM_Base_SetConfig+0x40>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	4a3e      	ldr	r2, [pc, #248]	; (800ff90 <TIM_Base_SetConfig+0x134>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d108      	bne.n	800feae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	4313      	orrs	r3, r2
 800feac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4a33      	ldr	r2, [pc, #204]	; (800ff80 <TIM_Base_SetConfig+0x124>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d027      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800febc:	d023      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4a30      	ldr	r2, [pc, #192]	; (800ff84 <TIM_Base_SetConfig+0x128>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d01f      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4a2f      	ldr	r2, [pc, #188]	; (800ff88 <TIM_Base_SetConfig+0x12c>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d01b      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4a2e      	ldr	r2, [pc, #184]	; (800ff8c <TIM_Base_SetConfig+0x130>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d017      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4a2d      	ldr	r2, [pc, #180]	; (800ff90 <TIM_Base_SetConfig+0x134>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d013      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4a2c      	ldr	r2, [pc, #176]	; (800ff94 <TIM_Base_SetConfig+0x138>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d00f      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4a2b      	ldr	r2, [pc, #172]	; (800ff98 <TIM_Base_SetConfig+0x13c>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d00b      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4a2a      	ldr	r2, [pc, #168]	; (800ff9c <TIM_Base_SetConfig+0x140>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d007      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4a29      	ldr	r2, [pc, #164]	; (800ffa0 <TIM_Base_SetConfig+0x144>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d003      	beq.n	800ff06 <TIM_Base_SetConfig+0xaa>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4a28      	ldr	r2, [pc, #160]	; (800ffa4 <TIM_Base_SetConfig+0x148>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d108      	bne.n	800ff18 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	695b      	ldr	r3, [r3, #20]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	689a      	ldr	r2, [r3, #8]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4a10      	ldr	r2, [pc, #64]	; (800ff80 <TIM_Base_SetConfig+0x124>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d00f      	beq.n	800ff64 <TIM_Base_SetConfig+0x108>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4a12      	ldr	r2, [pc, #72]	; (800ff90 <TIM_Base_SetConfig+0x134>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d00b      	beq.n	800ff64 <TIM_Base_SetConfig+0x108>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	4a11      	ldr	r2, [pc, #68]	; (800ff94 <TIM_Base_SetConfig+0x138>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d007      	beq.n	800ff64 <TIM_Base_SetConfig+0x108>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a10      	ldr	r2, [pc, #64]	; (800ff98 <TIM_Base_SetConfig+0x13c>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d003      	beq.n	800ff64 <TIM_Base_SetConfig+0x108>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a0f      	ldr	r2, [pc, #60]	; (800ff9c <TIM_Base_SetConfig+0x140>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d103      	bne.n	800ff6c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	691a      	ldr	r2, [r3, #16]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	615a      	str	r2, [r3, #20]
}
 800ff72:	bf00      	nop
 800ff74:	3714      	adds	r7, #20
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop
 800ff80:	40010000 	.word	0x40010000
 800ff84:	40000400 	.word	0x40000400
 800ff88:	40000800 	.word	0x40000800
 800ff8c:	40000c00 	.word	0x40000c00
 800ff90:	40010400 	.word	0x40010400
 800ff94:	40014000 	.word	0x40014000
 800ff98:	40014400 	.word	0x40014400
 800ff9c:	40014800 	.word	0x40014800
 800ffa0:	4000e000 	.word	0x4000e000
 800ffa4:	4000e400 	.word	0x4000e400

0800ffa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b087      	sub	sp, #28
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a1b      	ldr	r3, [r3, #32]
 800ffb6:	f023 0201 	bic.w	r2, r3, #1
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6a1b      	ldr	r3, [r3, #32]
 800ffc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	699b      	ldr	r3, [r3, #24]
 800ffce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	4b37      	ldr	r3, [pc, #220]	; (80100b0 <TIM_OC1_SetConfig+0x108>)
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f023 0303 	bic.w	r3, r3, #3
 800ffde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	f023 0302 	bic.w	r3, r3, #2
 800fff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	697a      	ldr	r2, [r7, #20]
 800fff8:	4313      	orrs	r3, r2
 800fffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4a2d      	ldr	r2, [pc, #180]	; (80100b4 <TIM_OC1_SetConfig+0x10c>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d00f      	beq.n	8010024 <TIM_OC1_SetConfig+0x7c>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4a2c      	ldr	r2, [pc, #176]	; (80100b8 <TIM_OC1_SetConfig+0x110>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d00b      	beq.n	8010024 <TIM_OC1_SetConfig+0x7c>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	4a2b      	ldr	r2, [pc, #172]	; (80100bc <TIM_OC1_SetConfig+0x114>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d007      	beq.n	8010024 <TIM_OC1_SetConfig+0x7c>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a2a      	ldr	r2, [pc, #168]	; (80100c0 <TIM_OC1_SetConfig+0x118>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d003      	beq.n	8010024 <TIM_OC1_SetConfig+0x7c>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4a29      	ldr	r2, [pc, #164]	; (80100c4 <TIM_OC1_SetConfig+0x11c>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d10c      	bne.n	801003e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	f023 0308 	bic.w	r3, r3, #8
 801002a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	4313      	orrs	r3, r2
 8010034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	f023 0304 	bic.w	r3, r3, #4
 801003c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4a1c      	ldr	r2, [pc, #112]	; (80100b4 <TIM_OC1_SetConfig+0x10c>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d00f      	beq.n	8010066 <TIM_OC1_SetConfig+0xbe>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a1b      	ldr	r2, [pc, #108]	; (80100b8 <TIM_OC1_SetConfig+0x110>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d00b      	beq.n	8010066 <TIM_OC1_SetConfig+0xbe>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a1a      	ldr	r2, [pc, #104]	; (80100bc <TIM_OC1_SetConfig+0x114>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d007      	beq.n	8010066 <TIM_OC1_SetConfig+0xbe>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a19      	ldr	r2, [pc, #100]	; (80100c0 <TIM_OC1_SetConfig+0x118>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d003      	beq.n	8010066 <TIM_OC1_SetConfig+0xbe>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4a18      	ldr	r2, [pc, #96]	; (80100c4 <TIM_OC1_SetConfig+0x11c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d111      	bne.n	801008a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801006c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	695b      	ldr	r3, [r3, #20]
 801007a:	693a      	ldr	r2, [r7, #16]
 801007c:	4313      	orrs	r3, r2
 801007e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	699b      	ldr	r3, [r3, #24]
 8010084:	693a      	ldr	r2, [r7, #16]
 8010086:	4313      	orrs	r3, r2
 8010088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	685a      	ldr	r2, [r3, #4]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	697a      	ldr	r2, [r7, #20]
 80100a2:	621a      	str	r2, [r3, #32]
}
 80100a4:	bf00      	nop
 80100a6:	371c      	adds	r7, #28
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr
 80100b0:	fffeff8f 	.word	0xfffeff8f
 80100b4:	40010000 	.word	0x40010000
 80100b8:	40010400 	.word	0x40010400
 80100bc:	40014000 	.word	0x40014000
 80100c0:	40014400 	.word	0x40014400
 80100c4:	40014800 	.word	0x40014800

080100c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b087      	sub	sp, #28
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a1b      	ldr	r3, [r3, #32]
 80100d6:	f023 0210 	bic.w	r2, r3, #16
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6a1b      	ldr	r3, [r3, #32]
 80100e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	699b      	ldr	r3, [r3, #24]
 80100ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	4b34      	ldr	r3, [pc, #208]	; (80101c4 <TIM_OC2_SetConfig+0xfc>)
 80100f4:	4013      	ands	r3, r2
 80100f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	021b      	lsls	r3, r3, #8
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	4313      	orrs	r3, r2
 801010a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	f023 0320 	bic.w	r3, r3, #32
 8010112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	011b      	lsls	r3, r3, #4
 801011a:	697a      	ldr	r2, [r7, #20]
 801011c:	4313      	orrs	r3, r2
 801011e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4a29      	ldr	r2, [pc, #164]	; (80101c8 <TIM_OC2_SetConfig+0x100>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d003      	beq.n	8010130 <TIM_OC2_SetConfig+0x68>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a28      	ldr	r2, [pc, #160]	; (80101cc <TIM_OC2_SetConfig+0x104>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d10d      	bne.n	801014c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	011b      	lsls	r3, r3, #4
 801013e:	697a      	ldr	r2, [r7, #20]
 8010140:	4313      	orrs	r3, r2
 8010142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801014a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a1e      	ldr	r2, [pc, #120]	; (80101c8 <TIM_OC2_SetConfig+0x100>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d00f      	beq.n	8010174 <TIM_OC2_SetConfig+0xac>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a1d      	ldr	r2, [pc, #116]	; (80101cc <TIM_OC2_SetConfig+0x104>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d00b      	beq.n	8010174 <TIM_OC2_SetConfig+0xac>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a1c      	ldr	r2, [pc, #112]	; (80101d0 <TIM_OC2_SetConfig+0x108>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d007      	beq.n	8010174 <TIM_OC2_SetConfig+0xac>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4a1b      	ldr	r2, [pc, #108]	; (80101d4 <TIM_OC2_SetConfig+0x10c>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d003      	beq.n	8010174 <TIM_OC2_SetConfig+0xac>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4a1a      	ldr	r2, [pc, #104]	; (80101d8 <TIM_OC2_SetConfig+0x110>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d113      	bne.n	801019c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801017a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	695b      	ldr	r3, [r3, #20]
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	693a      	ldr	r2, [r7, #16]
 801018c:	4313      	orrs	r3, r2
 801018e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	4313      	orrs	r3, r2
 801019a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	685a      	ldr	r2, [r3, #4]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	697a      	ldr	r2, [r7, #20]
 80101b4:	621a      	str	r2, [r3, #32]
}
 80101b6:	bf00      	nop
 80101b8:	371c      	adds	r7, #28
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	feff8fff 	.word	0xfeff8fff
 80101c8:	40010000 	.word	0x40010000
 80101cc:	40010400 	.word	0x40010400
 80101d0:	40014000 	.word	0x40014000
 80101d4:	40014400 	.word	0x40014400
 80101d8:	40014800 	.word	0x40014800

080101dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101dc:	b480      	push	{r7}
 80101de:	b087      	sub	sp, #28
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6a1b      	ldr	r3, [r3, #32]
 80101ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a1b      	ldr	r3, [r3, #32]
 80101f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	69db      	ldr	r3, [r3, #28]
 8010202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	4b33      	ldr	r3, [pc, #204]	; (80102d4 <TIM_OC3_SetConfig+0xf8>)
 8010208:	4013      	ands	r3, r2
 801020a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f023 0303 	bic.w	r3, r3, #3
 8010212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	4313      	orrs	r3, r2
 801021c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	021b      	lsls	r3, r3, #8
 801022c:	697a      	ldr	r2, [r7, #20]
 801022e:	4313      	orrs	r3, r2
 8010230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a28      	ldr	r2, [pc, #160]	; (80102d8 <TIM_OC3_SetConfig+0xfc>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d003      	beq.n	8010242 <TIM_OC3_SetConfig+0x66>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a27      	ldr	r2, [pc, #156]	; (80102dc <TIM_OC3_SetConfig+0x100>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d10d      	bne.n	801025e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	021b      	lsls	r3, r3, #8
 8010250:	697a      	ldr	r2, [r7, #20]
 8010252:	4313      	orrs	r3, r2
 8010254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801025c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4a1d      	ldr	r2, [pc, #116]	; (80102d8 <TIM_OC3_SetConfig+0xfc>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d00f      	beq.n	8010286 <TIM_OC3_SetConfig+0xaa>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4a1c      	ldr	r2, [pc, #112]	; (80102dc <TIM_OC3_SetConfig+0x100>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d00b      	beq.n	8010286 <TIM_OC3_SetConfig+0xaa>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a1b      	ldr	r2, [pc, #108]	; (80102e0 <TIM_OC3_SetConfig+0x104>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d007      	beq.n	8010286 <TIM_OC3_SetConfig+0xaa>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a1a      	ldr	r2, [pc, #104]	; (80102e4 <TIM_OC3_SetConfig+0x108>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d003      	beq.n	8010286 <TIM_OC3_SetConfig+0xaa>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a19      	ldr	r2, [pc, #100]	; (80102e8 <TIM_OC3_SetConfig+0x10c>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d113      	bne.n	80102ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801028c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	695b      	ldr	r3, [r3, #20]
 801029a:	011b      	lsls	r3, r3, #4
 801029c:	693a      	ldr	r2, [r7, #16]
 801029e:	4313      	orrs	r3, r2
 80102a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	699b      	ldr	r3, [r3, #24]
 80102a6:	011b      	lsls	r3, r3, #4
 80102a8:	693a      	ldr	r2, [r7, #16]
 80102aa:	4313      	orrs	r3, r2
 80102ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	693a      	ldr	r2, [r7, #16]
 80102b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	685a      	ldr	r2, [r3, #4]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	697a      	ldr	r2, [r7, #20]
 80102c6:	621a      	str	r2, [r3, #32]
}
 80102c8:	bf00      	nop
 80102ca:	371c      	adds	r7, #28
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr
 80102d4:	fffeff8f 	.word	0xfffeff8f
 80102d8:	40010000 	.word	0x40010000
 80102dc:	40010400 	.word	0x40010400
 80102e0:	40014000 	.word	0x40014000
 80102e4:	40014400 	.word	0x40014400
 80102e8:	40014800 	.word	0x40014800

080102ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b087      	sub	sp, #28
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6a1b      	ldr	r3, [r3, #32]
 80102fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6a1b      	ldr	r3, [r3, #32]
 8010306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	69db      	ldr	r3, [r3, #28]
 8010312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	4b24      	ldr	r3, [pc, #144]	; (80103a8 <TIM_OC4_SetConfig+0xbc>)
 8010318:	4013      	ands	r3, r2
 801031a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	021b      	lsls	r3, r3, #8
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	4313      	orrs	r3, r2
 801032e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	031b      	lsls	r3, r3, #12
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	4313      	orrs	r3, r2
 8010342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4a19      	ldr	r2, [pc, #100]	; (80103ac <TIM_OC4_SetConfig+0xc0>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d00f      	beq.n	801036c <TIM_OC4_SetConfig+0x80>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a18      	ldr	r2, [pc, #96]	; (80103b0 <TIM_OC4_SetConfig+0xc4>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d00b      	beq.n	801036c <TIM_OC4_SetConfig+0x80>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a17      	ldr	r2, [pc, #92]	; (80103b4 <TIM_OC4_SetConfig+0xc8>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d007      	beq.n	801036c <TIM_OC4_SetConfig+0x80>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a16      	ldr	r2, [pc, #88]	; (80103b8 <TIM_OC4_SetConfig+0xcc>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d003      	beq.n	801036c <TIM_OC4_SetConfig+0x80>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a15      	ldr	r2, [pc, #84]	; (80103bc <TIM_OC4_SetConfig+0xd0>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d109      	bne.n	8010380 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	695b      	ldr	r3, [r3, #20]
 8010378:	019b      	lsls	r3, r3, #6
 801037a:	697a      	ldr	r2, [r7, #20]
 801037c:	4313      	orrs	r3, r2
 801037e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	697a      	ldr	r2, [r7, #20]
 8010384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	685a      	ldr	r2, [r3, #4]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	693a      	ldr	r2, [r7, #16]
 8010398:	621a      	str	r2, [r3, #32]
}
 801039a:	bf00      	nop
 801039c:	371c      	adds	r7, #28
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop
 80103a8:	feff8fff 	.word	0xfeff8fff
 80103ac:	40010000 	.word	0x40010000
 80103b0:	40010400 	.word	0x40010400
 80103b4:	40014000 	.word	0x40014000
 80103b8:	40014400 	.word	0x40014400
 80103bc:	40014800 	.word	0x40014800

080103c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80103c0:	b480      	push	{r7}
 80103c2:	b087      	sub	sp, #28
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6a1b      	ldr	r3, [r3, #32]
 80103ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6a1b      	ldr	r3, [r3, #32]
 80103da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80103e8:	68fa      	ldr	r2, [r7, #12]
 80103ea:	4b21      	ldr	r3, [pc, #132]	; (8010470 <TIM_OC5_SetConfig+0xb0>)
 80103ec:	4013      	ands	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	041b      	lsls	r3, r3, #16
 8010408:	693a      	ldr	r2, [r7, #16]
 801040a:	4313      	orrs	r3, r2
 801040c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4a18      	ldr	r2, [pc, #96]	; (8010474 <TIM_OC5_SetConfig+0xb4>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d00f      	beq.n	8010436 <TIM_OC5_SetConfig+0x76>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a17      	ldr	r2, [pc, #92]	; (8010478 <TIM_OC5_SetConfig+0xb8>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d00b      	beq.n	8010436 <TIM_OC5_SetConfig+0x76>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a16      	ldr	r2, [pc, #88]	; (801047c <TIM_OC5_SetConfig+0xbc>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d007      	beq.n	8010436 <TIM_OC5_SetConfig+0x76>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a15      	ldr	r2, [pc, #84]	; (8010480 <TIM_OC5_SetConfig+0xc0>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d003      	beq.n	8010436 <TIM_OC5_SetConfig+0x76>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4a14      	ldr	r2, [pc, #80]	; (8010484 <TIM_OC5_SetConfig+0xc4>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d109      	bne.n	801044a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801043c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	695b      	ldr	r3, [r3, #20]
 8010442:	021b      	lsls	r3, r3, #8
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	4313      	orrs	r3, r2
 8010448:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	697a      	ldr	r2, [r7, #20]
 801044e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	685a      	ldr	r2, [r3, #4]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	693a      	ldr	r2, [r7, #16]
 8010462:	621a      	str	r2, [r3, #32]
}
 8010464:	bf00      	nop
 8010466:	371c      	adds	r7, #28
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	fffeff8f 	.word	0xfffeff8f
 8010474:	40010000 	.word	0x40010000
 8010478:	40010400 	.word	0x40010400
 801047c:	40014000 	.word	0x40014000
 8010480:	40014400 	.word	0x40014400
 8010484:	40014800 	.word	0x40014800

08010488 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010488:	b480      	push	{r7}
 801048a:	b087      	sub	sp, #28
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6a1b      	ldr	r3, [r3, #32]
 8010496:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	4b22      	ldr	r3, [pc, #136]	; (801053c <TIM_OC6_SetConfig+0xb4>)
 80104b4:	4013      	ands	r3, r2
 80104b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	4313      	orrs	r3, r2
 80104c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80104ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	051b      	lsls	r3, r3, #20
 80104d2:	693a      	ldr	r2, [r7, #16]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a19      	ldr	r2, [pc, #100]	; (8010540 <TIM_OC6_SetConfig+0xb8>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d00f      	beq.n	8010500 <TIM_OC6_SetConfig+0x78>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a18      	ldr	r2, [pc, #96]	; (8010544 <TIM_OC6_SetConfig+0xbc>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d00b      	beq.n	8010500 <TIM_OC6_SetConfig+0x78>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a17      	ldr	r2, [pc, #92]	; (8010548 <TIM_OC6_SetConfig+0xc0>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d007      	beq.n	8010500 <TIM_OC6_SetConfig+0x78>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a16      	ldr	r2, [pc, #88]	; (801054c <TIM_OC6_SetConfig+0xc4>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d003      	beq.n	8010500 <TIM_OC6_SetConfig+0x78>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4a15      	ldr	r2, [pc, #84]	; (8010550 <TIM_OC6_SetConfig+0xc8>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d109      	bne.n	8010514 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010506:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	695b      	ldr	r3, [r3, #20]
 801050c:	029b      	lsls	r3, r3, #10
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	4313      	orrs	r3, r2
 8010512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	685a      	ldr	r2, [r3, #4]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	693a      	ldr	r2, [r7, #16]
 801052c:	621a      	str	r2, [r3, #32]
}
 801052e:	bf00      	nop
 8010530:	371c      	adds	r7, #28
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	feff8fff 	.word	0xfeff8fff
 8010540:	40010000 	.word	0x40010000
 8010544:	40010400 	.word	0x40010400
 8010548:	40014000 	.word	0x40014000
 801054c:	40014400 	.word	0x40014400
 8010550:	40014800 	.word	0x40014800

08010554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010554:	b480      	push	{r7}
 8010556:	b087      	sub	sp, #28
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	f003 031f 	and.w	r3, r3, #31
 8010566:	2201      	movs	r2, #1
 8010568:	fa02 f303 	lsl.w	r3, r2, r3
 801056c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6a1a      	ldr	r2, [r3, #32]
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	43db      	mvns	r3, r3
 8010576:	401a      	ands	r2, r3
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6a1a      	ldr	r2, [r3, #32]
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	f003 031f 	and.w	r3, r3, #31
 8010586:	6879      	ldr	r1, [r7, #4]
 8010588:	fa01 f303 	lsl.w	r3, r1, r3
 801058c:	431a      	orrs	r2, r3
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	621a      	str	r2, [r3, #32]
}
 8010592:	bf00      	nop
 8010594:	371c      	adds	r7, #28
 8010596:	46bd      	mov	sp, r7
 8010598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059c:	4770      	bx	lr
	...

080105a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b085      	sub	sp, #20
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d101      	bne.n	80105b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80105b4:	2302      	movs	r3, #2
 80105b6:	e077      	b.n	80106a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2201      	movs	r2, #1
 80105bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2202      	movs	r2, #2
 80105c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4a35      	ldr	r2, [pc, #212]	; (80106b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d004      	beq.n	80105ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4a34      	ldr	r2, [pc, #208]	; (80106b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d108      	bne.n	80105fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80105f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	4313      	orrs	r3, r2
 80105fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010604:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	4313      	orrs	r3, r2
 801060e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a25      	ldr	r2, [pc, #148]	; (80106b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d02c      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801062a:	d027      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a22      	ldr	r2, [pc, #136]	; (80106bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d022      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a21      	ldr	r2, [pc, #132]	; (80106c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d01d      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4a1f      	ldr	r2, [pc, #124]	; (80106c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d018      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a1a      	ldr	r2, [pc, #104]	; (80106b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d013      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a1b      	ldr	r2, [pc, #108]	; (80106c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d00e      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4a1a      	ldr	r2, [pc, #104]	; (80106cc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d009      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a18      	ldr	r2, [pc, #96]	; (80106d0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d004      	beq.n	801067c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4a17      	ldr	r2, [pc, #92]	; (80106d4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d10c      	bne.n	8010696 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	68ba      	ldr	r2, [r7, #8]
 801068a:	4313      	orrs	r3, r2
 801068c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	68ba      	ldr	r2, [r7, #8]
 8010694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2201      	movs	r2, #1
 801069a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106a6:	2300      	movs	r3, #0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3714      	adds	r7, #20
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr
 80106b4:	40010000 	.word	0x40010000
 80106b8:	40010400 	.word	0x40010400
 80106bc:	40000400 	.word	0x40000400
 80106c0:	40000800 	.word	0x40000800
 80106c4:	40000c00 	.word	0x40000c00
 80106c8:	40001800 	.word	0x40001800
 80106cc:	40014000 	.word	0x40014000
 80106d0:	4000e000 	.word	0x4000e000
 80106d4:	4000e400 	.word	0x4000e400

080106d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010708:	bf00      	nop
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d101      	bne.n	8010726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010722:	2301      	movs	r3, #1
 8010724:	e042      	b.n	80107ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801072c:	2b00      	cmp	r3, #0
 801072e:	d106      	bne.n	801073e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f7f2 fd3f 	bl	80031bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2224      	movs	r2, #36	; 0x24
 8010742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f022 0201 	bic.w	r2, r2, #1
 8010754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 f82c 	bl	80107b4 <UART_SetConfig>
 801075c:	4603      	mov	r3, r0
 801075e:	2b01      	cmp	r3, #1
 8010760:	d101      	bne.n	8010766 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e022      	b.n	80107ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801076a:	2b00      	cmp	r3, #0
 801076c:	d002      	beq.n	8010774 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fe8c 	bl	801148c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	689a      	ldr	r2, [r3, #8]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	681a      	ldr	r2, [r3, #0]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f042 0201 	orr.w	r2, r2, #1
 80107a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f000 ff13 	bl	80115d0 <UART_CheckIdleState>
 80107aa:	4603      	mov	r3, r0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107b8:	b092      	sub	sp, #72	; 0x48
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107be:	2300      	movs	r3, #0
 80107c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	689a      	ldr	r2, [r3, #8]
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	691b      	ldr	r3, [r3, #16]
 80107cc:	431a      	orrs	r2, r3
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	695b      	ldr	r3, [r3, #20]
 80107d2:	431a      	orrs	r2, r3
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	69db      	ldr	r3, [r3, #28]
 80107d8:	4313      	orrs	r3, r2
 80107da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	4bbe      	ldr	r3, [pc, #760]	; (8010adc <UART_SetConfig+0x328>)
 80107e4:	4013      	ands	r3, r2
 80107e6:	697a      	ldr	r2, [r7, #20]
 80107e8:	6812      	ldr	r2, [r2, #0]
 80107ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107ec:	430b      	orrs	r3, r1
 80107ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	68da      	ldr	r2, [r3, #12]
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	430a      	orrs	r2, r1
 8010804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4ab3      	ldr	r2, [pc, #716]	; (8010ae0 <UART_SetConfig+0x32c>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d004      	beq.n	8010820 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	6a1b      	ldr	r3, [r3, #32]
 801081a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801081c:	4313      	orrs	r3, r2
 801081e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	689a      	ldr	r2, [r3, #8]
 8010826:	4baf      	ldr	r3, [pc, #700]	; (8010ae4 <UART_SetConfig+0x330>)
 8010828:	4013      	ands	r3, r2
 801082a:	697a      	ldr	r2, [r7, #20]
 801082c:	6812      	ldr	r2, [r2, #0]
 801082e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010830:	430b      	orrs	r3, r1
 8010832:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801083a:	f023 010f 	bic.w	r1, r3, #15
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	430a      	orrs	r2, r1
 8010848:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	4aa6      	ldr	r2, [pc, #664]	; (8010ae8 <UART_SetConfig+0x334>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d177      	bne.n	8010944 <UART_SetConfig+0x190>
 8010854:	4ba5      	ldr	r3, [pc, #660]	; (8010aec <UART_SetConfig+0x338>)
 8010856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801085c:	2b28      	cmp	r3, #40	; 0x28
 801085e:	d86d      	bhi.n	801093c <UART_SetConfig+0x188>
 8010860:	a201      	add	r2, pc, #4	; (adr r2, 8010868 <UART_SetConfig+0xb4>)
 8010862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010866:	bf00      	nop
 8010868:	0801090d 	.word	0x0801090d
 801086c:	0801093d 	.word	0x0801093d
 8010870:	0801093d 	.word	0x0801093d
 8010874:	0801093d 	.word	0x0801093d
 8010878:	0801093d 	.word	0x0801093d
 801087c:	0801093d 	.word	0x0801093d
 8010880:	0801093d 	.word	0x0801093d
 8010884:	0801093d 	.word	0x0801093d
 8010888:	08010915 	.word	0x08010915
 801088c:	0801093d 	.word	0x0801093d
 8010890:	0801093d 	.word	0x0801093d
 8010894:	0801093d 	.word	0x0801093d
 8010898:	0801093d 	.word	0x0801093d
 801089c:	0801093d 	.word	0x0801093d
 80108a0:	0801093d 	.word	0x0801093d
 80108a4:	0801093d 	.word	0x0801093d
 80108a8:	0801091d 	.word	0x0801091d
 80108ac:	0801093d 	.word	0x0801093d
 80108b0:	0801093d 	.word	0x0801093d
 80108b4:	0801093d 	.word	0x0801093d
 80108b8:	0801093d 	.word	0x0801093d
 80108bc:	0801093d 	.word	0x0801093d
 80108c0:	0801093d 	.word	0x0801093d
 80108c4:	0801093d 	.word	0x0801093d
 80108c8:	08010925 	.word	0x08010925
 80108cc:	0801093d 	.word	0x0801093d
 80108d0:	0801093d 	.word	0x0801093d
 80108d4:	0801093d 	.word	0x0801093d
 80108d8:	0801093d 	.word	0x0801093d
 80108dc:	0801093d 	.word	0x0801093d
 80108e0:	0801093d 	.word	0x0801093d
 80108e4:	0801093d 	.word	0x0801093d
 80108e8:	0801092d 	.word	0x0801092d
 80108ec:	0801093d 	.word	0x0801093d
 80108f0:	0801093d 	.word	0x0801093d
 80108f4:	0801093d 	.word	0x0801093d
 80108f8:	0801093d 	.word	0x0801093d
 80108fc:	0801093d 	.word	0x0801093d
 8010900:	0801093d 	.word	0x0801093d
 8010904:	0801093d 	.word	0x0801093d
 8010908:	08010935 	.word	0x08010935
 801090c:	2301      	movs	r3, #1
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010912:	e326      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010914:	2304      	movs	r3, #4
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091a:	e322      	b.n	8010f62 <UART_SetConfig+0x7ae>
 801091c:	2308      	movs	r3, #8
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010922:	e31e      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010924:	2310      	movs	r3, #16
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092a:	e31a      	b.n	8010f62 <UART_SetConfig+0x7ae>
 801092c:	2320      	movs	r3, #32
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010932:	e316      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010934:	2340      	movs	r3, #64	; 0x40
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093a:	e312      	b.n	8010f62 <UART_SetConfig+0x7ae>
 801093c:	2380      	movs	r3, #128	; 0x80
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010942:	e30e      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a69      	ldr	r2, [pc, #420]	; (8010af0 <UART_SetConfig+0x33c>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d130      	bne.n	80109b0 <UART_SetConfig+0x1fc>
 801094e:	4b67      	ldr	r3, [pc, #412]	; (8010aec <UART_SetConfig+0x338>)
 8010950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010952:	f003 0307 	and.w	r3, r3, #7
 8010956:	2b05      	cmp	r3, #5
 8010958:	d826      	bhi.n	80109a8 <UART_SetConfig+0x1f4>
 801095a:	a201      	add	r2, pc, #4	; (adr r2, 8010960 <UART_SetConfig+0x1ac>)
 801095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010960:	08010979 	.word	0x08010979
 8010964:	08010981 	.word	0x08010981
 8010968:	08010989 	.word	0x08010989
 801096c:	08010991 	.word	0x08010991
 8010970:	08010999 	.word	0x08010999
 8010974:	080109a1 	.word	0x080109a1
 8010978:	2300      	movs	r3, #0
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801097e:	e2f0      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010980:	2304      	movs	r3, #4
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010986:	e2ec      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010988:	2308      	movs	r3, #8
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801098e:	e2e8      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010990:	2310      	movs	r3, #16
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010996:	e2e4      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010998:	2320      	movs	r3, #32
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099e:	e2e0      	b.n	8010f62 <UART_SetConfig+0x7ae>
 80109a0:	2340      	movs	r3, #64	; 0x40
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a6:	e2dc      	b.n	8010f62 <UART_SetConfig+0x7ae>
 80109a8:	2380      	movs	r3, #128	; 0x80
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ae:	e2d8      	b.n	8010f62 <UART_SetConfig+0x7ae>
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a4f      	ldr	r2, [pc, #316]	; (8010af4 <UART_SetConfig+0x340>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d130      	bne.n	8010a1c <UART_SetConfig+0x268>
 80109ba:	4b4c      	ldr	r3, [pc, #304]	; (8010aec <UART_SetConfig+0x338>)
 80109bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109be:	f003 0307 	and.w	r3, r3, #7
 80109c2:	2b05      	cmp	r3, #5
 80109c4:	d826      	bhi.n	8010a14 <UART_SetConfig+0x260>
 80109c6:	a201      	add	r2, pc, #4	; (adr r2, 80109cc <UART_SetConfig+0x218>)
 80109c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109cc:	080109e5 	.word	0x080109e5
 80109d0:	080109ed 	.word	0x080109ed
 80109d4:	080109f5 	.word	0x080109f5
 80109d8:	080109fd 	.word	0x080109fd
 80109dc:	08010a05 	.word	0x08010a05
 80109e0:	08010a0d 	.word	0x08010a0d
 80109e4:	2300      	movs	r3, #0
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ea:	e2ba      	b.n	8010f62 <UART_SetConfig+0x7ae>
 80109ec:	2304      	movs	r3, #4
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f2:	e2b6      	b.n	8010f62 <UART_SetConfig+0x7ae>
 80109f4:	2308      	movs	r3, #8
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109fa:	e2b2      	b.n	8010f62 <UART_SetConfig+0x7ae>
 80109fc:	2310      	movs	r3, #16
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a02:	e2ae      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a04:	2320      	movs	r3, #32
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0a:	e2aa      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a0c:	2340      	movs	r3, #64	; 0x40
 8010a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a12:	e2a6      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a14:	2380      	movs	r3, #128	; 0x80
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1a:	e2a2      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a35      	ldr	r2, [pc, #212]	; (8010af8 <UART_SetConfig+0x344>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d130      	bne.n	8010a88 <UART_SetConfig+0x2d4>
 8010a26:	4b31      	ldr	r3, [pc, #196]	; (8010aec <UART_SetConfig+0x338>)
 8010a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a2a:	f003 0307 	and.w	r3, r3, #7
 8010a2e:	2b05      	cmp	r3, #5
 8010a30:	d826      	bhi.n	8010a80 <UART_SetConfig+0x2cc>
 8010a32:	a201      	add	r2, pc, #4	; (adr r2, 8010a38 <UART_SetConfig+0x284>)
 8010a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a38:	08010a51 	.word	0x08010a51
 8010a3c:	08010a59 	.word	0x08010a59
 8010a40:	08010a61 	.word	0x08010a61
 8010a44:	08010a69 	.word	0x08010a69
 8010a48:	08010a71 	.word	0x08010a71
 8010a4c:	08010a79 	.word	0x08010a79
 8010a50:	2300      	movs	r3, #0
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a56:	e284      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a58:	2304      	movs	r3, #4
 8010a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a5e:	e280      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a60:	2308      	movs	r3, #8
 8010a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a66:	e27c      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a68:	2310      	movs	r3, #16
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6e:	e278      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a70:	2320      	movs	r3, #32
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a76:	e274      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a78:	2340      	movs	r3, #64	; 0x40
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7e:	e270      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a80:	2380      	movs	r3, #128	; 0x80
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a86:	e26c      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a1b      	ldr	r2, [pc, #108]	; (8010afc <UART_SetConfig+0x348>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d142      	bne.n	8010b18 <UART_SetConfig+0x364>
 8010a92:	4b16      	ldr	r3, [pc, #88]	; (8010aec <UART_SetConfig+0x338>)
 8010a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a96:	f003 0307 	and.w	r3, r3, #7
 8010a9a:	2b05      	cmp	r3, #5
 8010a9c:	d838      	bhi.n	8010b10 <UART_SetConfig+0x35c>
 8010a9e:	a201      	add	r2, pc, #4	; (adr r2, 8010aa4 <UART_SetConfig+0x2f0>)
 8010aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa4:	08010abd 	.word	0x08010abd
 8010aa8:	08010ac5 	.word	0x08010ac5
 8010aac:	08010acd 	.word	0x08010acd
 8010ab0:	08010ad5 	.word	0x08010ad5
 8010ab4:	08010b01 	.word	0x08010b01
 8010ab8:	08010b09 	.word	0x08010b09
 8010abc:	2300      	movs	r3, #0
 8010abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac2:	e24e      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ac4:	2304      	movs	r3, #4
 8010ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aca:	e24a      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010acc:	2308      	movs	r3, #8
 8010ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ad2:	e246      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ad4:	2310      	movs	r3, #16
 8010ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ada:	e242      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010adc:	cfff69f3 	.word	0xcfff69f3
 8010ae0:	58000c00 	.word	0x58000c00
 8010ae4:	11fff4ff 	.word	0x11fff4ff
 8010ae8:	40011000 	.word	0x40011000
 8010aec:	58024400 	.word	0x58024400
 8010af0:	40004400 	.word	0x40004400
 8010af4:	40004800 	.word	0x40004800
 8010af8:	40004c00 	.word	0x40004c00
 8010afc:	40005000 	.word	0x40005000
 8010b00:	2320      	movs	r3, #32
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b06:	e22c      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010b08:	2340      	movs	r3, #64	; 0x40
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e228      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010b10:	2380      	movs	r3, #128	; 0x80
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e224      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4ab1      	ldr	r2, [pc, #708]	; (8010de4 <UART_SetConfig+0x630>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d176      	bne.n	8010c10 <UART_SetConfig+0x45c>
 8010b22:	4bb1      	ldr	r3, [pc, #708]	; (8010de8 <UART_SetConfig+0x634>)
 8010b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b2a:	2b28      	cmp	r3, #40	; 0x28
 8010b2c:	d86c      	bhi.n	8010c08 <UART_SetConfig+0x454>
 8010b2e:	a201      	add	r2, pc, #4	; (adr r2, 8010b34 <UART_SetConfig+0x380>)
 8010b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b34:	08010bd9 	.word	0x08010bd9
 8010b38:	08010c09 	.word	0x08010c09
 8010b3c:	08010c09 	.word	0x08010c09
 8010b40:	08010c09 	.word	0x08010c09
 8010b44:	08010c09 	.word	0x08010c09
 8010b48:	08010c09 	.word	0x08010c09
 8010b4c:	08010c09 	.word	0x08010c09
 8010b50:	08010c09 	.word	0x08010c09
 8010b54:	08010be1 	.word	0x08010be1
 8010b58:	08010c09 	.word	0x08010c09
 8010b5c:	08010c09 	.word	0x08010c09
 8010b60:	08010c09 	.word	0x08010c09
 8010b64:	08010c09 	.word	0x08010c09
 8010b68:	08010c09 	.word	0x08010c09
 8010b6c:	08010c09 	.word	0x08010c09
 8010b70:	08010c09 	.word	0x08010c09
 8010b74:	08010be9 	.word	0x08010be9
 8010b78:	08010c09 	.word	0x08010c09
 8010b7c:	08010c09 	.word	0x08010c09
 8010b80:	08010c09 	.word	0x08010c09
 8010b84:	08010c09 	.word	0x08010c09
 8010b88:	08010c09 	.word	0x08010c09
 8010b8c:	08010c09 	.word	0x08010c09
 8010b90:	08010c09 	.word	0x08010c09
 8010b94:	08010bf1 	.word	0x08010bf1
 8010b98:	08010c09 	.word	0x08010c09
 8010b9c:	08010c09 	.word	0x08010c09
 8010ba0:	08010c09 	.word	0x08010c09
 8010ba4:	08010c09 	.word	0x08010c09
 8010ba8:	08010c09 	.word	0x08010c09
 8010bac:	08010c09 	.word	0x08010c09
 8010bb0:	08010c09 	.word	0x08010c09
 8010bb4:	08010bf9 	.word	0x08010bf9
 8010bb8:	08010c09 	.word	0x08010c09
 8010bbc:	08010c09 	.word	0x08010c09
 8010bc0:	08010c09 	.word	0x08010c09
 8010bc4:	08010c09 	.word	0x08010c09
 8010bc8:	08010c09 	.word	0x08010c09
 8010bcc:	08010c09 	.word	0x08010c09
 8010bd0:	08010c09 	.word	0x08010c09
 8010bd4:	08010c01 	.word	0x08010c01
 8010bd8:	2301      	movs	r3, #1
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bde:	e1c0      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010be0:	2304      	movs	r3, #4
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e1bc      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010be8:	2308      	movs	r3, #8
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e1b8      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010bf0:	2310      	movs	r3, #16
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e1b4      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010bf8:	2320      	movs	r3, #32
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e1b0      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c00:	2340      	movs	r3, #64	; 0x40
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e1ac      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c08:	2380      	movs	r3, #128	; 0x80
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e1a8      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4a75      	ldr	r2, [pc, #468]	; (8010dec <UART_SetConfig+0x638>)
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d130      	bne.n	8010c7c <UART_SetConfig+0x4c8>
 8010c1a:	4b73      	ldr	r3, [pc, #460]	; (8010de8 <UART_SetConfig+0x634>)
 8010c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c1e:	f003 0307 	and.w	r3, r3, #7
 8010c22:	2b05      	cmp	r3, #5
 8010c24:	d826      	bhi.n	8010c74 <UART_SetConfig+0x4c0>
 8010c26:	a201      	add	r2, pc, #4	; (adr r2, 8010c2c <UART_SetConfig+0x478>)
 8010c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2c:	08010c45 	.word	0x08010c45
 8010c30:	08010c4d 	.word	0x08010c4d
 8010c34:	08010c55 	.word	0x08010c55
 8010c38:	08010c5d 	.word	0x08010c5d
 8010c3c:	08010c65 	.word	0x08010c65
 8010c40:	08010c6d 	.word	0x08010c6d
 8010c44:	2300      	movs	r3, #0
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4a:	e18a      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c4c:	2304      	movs	r3, #4
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c52:	e186      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c54:	2308      	movs	r3, #8
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5a:	e182      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c5c:	2310      	movs	r3, #16
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c62:	e17e      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c64:	2320      	movs	r3, #32
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6a:	e17a      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c6c:	2340      	movs	r3, #64	; 0x40
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c72:	e176      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c74:	2380      	movs	r3, #128	; 0x80
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e172      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4a5b      	ldr	r2, [pc, #364]	; (8010df0 <UART_SetConfig+0x63c>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d130      	bne.n	8010ce8 <UART_SetConfig+0x534>
 8010c86:	4b58      	ldr	r3, [pc, #352]	; (8010de8 <UART_SetConfig+0x634>)
 8010c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c8a:	f003 0307 	and.w	r3, r3, #7
 8010c8e:	2b05      	cmp	r3, #5
 8010c90:	d826      	bhi.n	8010ce0 <UART_SetConfig+0x52c>
 8010c92:	a201      	add	r2, pc, #4	; (adr r2, 8010c98 <UART_SetConfig+0x4e4>)
 8010c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c98:	08010cb1 	.word	0x08010cb1
 8010c9c:	08010cb9 	.word	0x08010cb9
 8010ca0:	08010cc1 	.word	0x08010cc1
 8010ca4:	08010cc9 	.word	0x08010cc9
 8010ca8:	08010cd1 	.word	0x08010cd1
 8010cac:	08010cd9 	.word	0x08010cd9
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb6:	e154      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010cb8:	2304      	movs	r3, #4
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cbe:	e150      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010cc0:	2308      	movs	r3, #8
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc6:	e14c      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010cc8:	2310      	movs	r3, #16
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e148      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010cd0:	2320      	movs	r3, #32
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd6:	e144      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010cd8:	2340      	movs	r3, #64	; 0x40
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cde:	e140      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ce0:	2380      	movs	r3, #128	; 0x80
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e13c      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a41      	ldr	r2, [pc, #260]	; (8010df4 <UART_SetConfig+0x640>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	f040 8082 	bne.w	8010df8 <UART_SetConfig+0x644>
 8010cf4:	4b3c      	ldr	r3, [pc, #240]	; (8010de8 <UART_SetConfig+0x634>)
 8010cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cfc:	2b28      	cmp	r3, #40	; 0x28
 8010cfe:	d86d      	bhi.n	8010ddc <UART_SetConfig+0x628>
 8010d00:	a201      	add	r2, pc, #4	; (adr r2, 8010d08 <UART_SetConfig+0x554>)
 8010d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d06:	bf00      	nop
 8010d08:	08010dad 	.word	0x08010dad
 8010d0c:	08010ddd 	.word	0x08010ddd
 8010d10:	08010ddd 	.word	0x08010ddd
 8010d14:	08010ddd 	.word	0x08010ddd
 8010d18:	08010ddd 	.word	0x08010ddd
 8010d1c:	08010ddd 	.word	0x08010ddd
 8010d20:	08010ddd 	.word	0x08010ddd
 8010d24:	08010ddd 	.word	0x08010ddd
 8010d28:	08010db5 	.word	0x08010db5
 8010d2c:	08010ddd 	.word	0x08010ddd
 8010d30:	08010ddd 	.word	0x08010ddd
 8010d34:	08010ddd 	.word	0x08010ddd
 8010d38:	08010ddd 	.word	0x08010ddd
 8010d3c:	08010ddd 	.word	0x08010ddd
 8010d40:	08010ddd 	.word	0x08010ddd
 8010d44:	08010ddd 	.word	0x08010ddd
 8010d48:	08010dbd 	.word	0x08010dbd
 8010d4c:	08010ddd 	.word	0x08010ddd
 8010d50:	08010ddd 	.word	0x08010ddd
 8010d54:	08010ddd 	.word	0x08010ddd
 8010d58:	08010ddd 	.word	0x08010ddd
 8010d5c:	08010ddd 	.word	0x08010ddd
 8010d60:	08010ddd 	.word	0x08010ddd
 8010d64:	08010ddd 	.word	0x08010ddd
 8010d68:	08010dc5 	.word	0x08010dc5
 8010d6c:	08010ddd 	.word	0x08010ddd
 8010d70:	08010ddd 	.word	0x08010ddd
 8010d74:	08010ddd 	.word	0x08010ddd
 8010d78:	08010ddd 	.word	0x08010ddd
 8010d7c:	08010ddd 	.word	0x08010ddd
 8010d80:	08010ddd 	.word	0x08010ddd
 8010d84:	08010ddd 	.word	0x08010ddd
 8010d88:	08010dcd 	.word	0x08010dcd
 8010d8c:	08010ddd 	.word	0x08010ddd
 8010d90:	08010ddd 	.word	0x08010ddd
 8010d94:	08010ddd 	.word	0x08010ddd
 8010d98:	08010ddd 	.word	0x08010ddd
 8010d9c:	08010ddd 	.word	0x08010ddd
 8010da0:	08010ddd 	.word	0x08010ddd
 8010da4:	08010ddd 	.word	0x08010ddd
 8010da8:	08010dd5 	.word	0x08010dd5
 8010dac:	2301      	movs	r3, #1
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e0d6      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010db4:	2304      	movs	r3, #4
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e0d2      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010dbc:	2308      	movs	r3, #8
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e0ce      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010dc4:	2310      	movs	r3, #16
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e0ca      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010dcc:	2320      	movs	r3, #32
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd2:	e0c6      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e0c2      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ddc:	2380      	movs	r3, #128	; 0x80
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e0be      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010de4:	40011400 	.word	0x40011400
 8010de8:	58024400 	.word	0x58024400
 8010dec:	40007800 	.word	0x40007800
 8010df0:	40007c00 	.word	0x40007c00
 8010df4:	40011800 	.word	0x40011800
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4aad      	ldr	r2, [pc, #692]	; (80110b4 <UART_SetConfig+0x900>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d176      	bne.n	8010ef0 <UART_SetConfig+0x73c>
 8010e02:	4bad      	ldr	r3, [pc, #692]	; (80110b8 <UART_SetConfig+0x904>)
 8010e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010e0a:	2b28      	cmp	r3, #40	; 0x28
 8010e0c:	d86c      	bhi.n	8010ee8 <UART_SetConfig+0x734>
 8010e0e:	a201      	add	r2, pc, #4	; (adr r2, 8010e14 <UART_SetConfig+0x660>)
 8010e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e14:	08010eb9 	.word	0x08010eb9
 8010e18:	08010ee9 	.word	0x08010ee9
 8010e1c:	08010ee9 	.word	0x08010ee9
 8010e20:	08010ee9 	.word	0x08010ee9
 8010e24:	08010ee9 	.word	0x08010ee9
 8010e28:	08010ee9 	.word	0x08010ee9
 8010e2c:	08010ee9 	.word	0x08010ee9
 8010e30:	08010ee9 	.word	0x08010ee9
 8010e34:	08010ec1 	.word	0x08010ec1
 8010e38:	08010ee9 	.word	0x08010ee9
 8010e3c:	08010ee9 	.word	0x08010ee9
 8010e40:	08010ee9 	.word	0x08010ee9
 8010e44:	08010ee9 	.word	0x08010ee9
 8010e48:	08010ee9 	.word	0x08010ee9
 8010e4c:	08010ee9 	.word	0x08010ee9
 8010e50:	08010ee9 	.word	0x08010ee9
 8010e54:	08010ec9 	.word	0x08010ec9
 8010e58:	08010ee9 	.word	0x08010ee9
 8010e5c:	08010ee9 	.word	0x08010ee9
 8010e60:	08010ee9 	.word	0x08010ee9
 8010e64:	08010ee9 	.word	0x08010ee9
 8010e68:	08010ee9 	.word	0x08010ee9
 8010e6c:	08010ee9 	.word	0x08010ee9
 8010e70:	08010ee9 	.word	0x08010ee9
 8010e74:	08010ed1 	.word	0x08010ed1
 8010e78:	08010ee9 	.word	0x08010ee9
 8010e7c:	08010ee9 	.word	0x08010ee9
 8010e80:	08010ee9 	.word	0x08010ee9
 8010e84:	08010ee9 	.word	0x08010ee9
 8010e88:	08010ee9 	.word	0x08010ee9
 8010e8c:	08010ee9 	.word	0x08010ee9
 8010e90:	08010ee9 	.word	0x08010ee9
 8010e94:	08010ed9 	.word	0x08010ed9
 8010e98:	08010ee9 	.word	0x08010ee9
 8010e9c:	08010ee9 	.word	0x08010ee9
 8010ea0:	08010ee9 	.word	0x08010ee9
 8010ea4:	08010ee9 	.word	0x08010ee9
 8010ea8:	08010ee9 	.word	0x08010ee9
 8010eac:	08010ee9 	.word	0x08010ee9
 8010eb0:	08010ee9 	.word	0x08010ee9
 8010eb4:	08010ee1 	.word	0x08010ee1
 8010eb8:	2301      	movs	r3, #1
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e050      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ec0:	2304      	movs	r3, #4
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e04c      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ec8:	2308      	movs	r3, #8
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e048      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ed0:	2310      	movs	r3, #16
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed6:	e044      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ed8:	2320      	movs	r3, #32
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ede:	e040      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ee0:	2340      	movs	r3, #64	; 0x40
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee6:	e03c      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ee8:	2380      	movs	r3, #128	; 0x80
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eee:	e038      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4a71      	ldr	r2, [pc, #452]	; (80110bc <UART_SetConfig+0x908>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d130      	bne.n	8010f5c <UART_SetConfig+0x7a8>
 8010efa:	4b6f      	ldr	r3, [pc, #444]	; (80110b8 <UART_SetConfig+0x904>)
 8010efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010efe:	f003 0307 	and.w	r3, r3, #7
 8010f02:	2b05      	cmp	r3, #5
 8010f04:	d826      	bhi.n	8010f54 <UART_SetConfig+0x7a0>
 8010f06:	a201      	add	r2, pc, #4	; (adr r2, 8010f0c <UART_SetConfig+0x758>)
 8010f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f0c:	08010f25 	.word	0x08010f25
 8010f10:	08010f2d 	.word	0x08010f2d
 8010f14:	08010f35 	.word	0x08010f35
 8010f18:	08010f3d 	.word	0x08010f3d
 8010f1c:	08010f45 	.word	0x08010f45
 8010f20:	08010f4d 	.word	0x08010f4d
 8010f24:	2302      	movs	r3, #2
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2a:	e01a      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010f2c:	2304      	movs	r3, #4
 8010f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f32:	e016      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010f34:	2308      	movs	r3, #8
 8010f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3a:	e012      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010f3c:	2310      	movs	r3, #16
 8010f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f42:	e00e      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010f44:	2320      	movs	r3, #32
 8010f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4a:	e00a      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010f4c:	2340      	movs	r3, #64	; 0x40
 8010f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f52:	e006      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010f54:	2380      	movs	r3, #128	; 0x80
 8010f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5a:	e002      	b.n	8010f62 <UART_SetConfig+0x7ae>
 8010f5c:	2380      	movs	r3, #128	; 0x80
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	4a55      	ldr	r2, [pc, #340]	; (80110bc <UART_SetConfig+0x908>)
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	f040 80f8 	bne.w	801115e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f72:	2b20      	cmp	r3, #32
 8010f74:	dc46      	bgt.n	8011004 <UART_SetConfig+0x850>
 8010f76:	2b02      	cmp	r3, #2
 8010f78:	db75      	blt.n	8011066 <UART_SetConfig+0x8b2>
 8010f7a:	3b02      	subs	r3, #2
 8010f7c:	2b1e      	cmp	r3, #30
 8010f7e:	d872      	bhi.n	8011066 <UART_SetConfig+0x8b2>
 8010f80:	a201      	add	r2, pc, #4	; (adr r2, 8010f88 <UART_SetConfig+0x7d4>)
 8010f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f86:	bf00      	nop
 8010f88:	0801100b 	.word	0x0801100b
 8010f8c:	08011067 	.word	0x08011067
 8010f90:	08011013 	.word	0x08011013
 8010f94:	08011067 	.word	0x08011067
 8010f98:	08011067 	.word	0x08011067
 8010f9c:	08011067 	.word	0x08011067
 8010fa0:	08011023 	.word	0x08011023
 8010fa4:	08011067 	.word	0x08011067
 8010fa8:	08011067 	.word	0x08011067
 8010fac:	08011067 	.word	0x08011067
 8010fb0:	08011067 	.word	0x08011067
 8010fb4:	08011067 	.word	0x08011067
 8010fb8:	08011067 	.word	0x08011067
 8010fbc:	08011067 	.word	0x08011067
 8010fc0:	08011033 	.word	0x08011033
 8010fc4:	08011067 	.word	0x08011067
 8010fc8:	08011067 	.word	0x08011067
 8010fcc:	08011067 	.word	0x08011067
 8010fd0:	08011067 	.word	0x08011067
 8010fd4:	08011067 	.word	0x08011067
 8010fd8:	08011067 	.word	0x08011067
 8010fdc:	08011067 	.word	0x08011067
 8010fe0:	08011067 	.word	0x08011067
 8010fe4:	08011067 	.word	0x08011067
 8010fe8:	08011067 	.word	0x08011067
 8010fec:	08011067 	.word	0x08011067
 8010ff0:	08011067 	.word	0x08011067
 8010ff4:	08011067 	.word	0x08011067
 8010ff8:	08011067 	.word	0x08011067
 8010ffc:	08011067 	.word	0x08011067
 8011000:	08011059 	.word	0x08011059
 8011004:	2b40      	cmp	r3, #64	; 0x40
 8011006:	d02a      	beq.n	801105e <UART_SetConfig+0x8aa>
 8011008:	e02d      	b.n	8011066 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801100a:	f7fb f8c3 	bl	800c194 <HAL_RCCEx_GetD3PCLK1Freq>
 801100e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011010:	e02f      	b.n	8011072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011016:	4618      	mov	r0, r3
 8011018:	f7fb f8d2 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011020:	e027      	b.n	8011072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011022:	f107 0318 	add.w	r3, r7, #24
 8011026:	4618      	mov	r0, r3
 8011028:	f7fb fa1e 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011030:	e01f      	b.n	8011072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011032:	4b21      	ldr	r3, [pc, #132]	; (80110b8 <UART_SetConfig+0x904>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	f003 0320 	and.w	r3, r3, #32
 801103a:	2b00      	cmp	r3, #0
 801103c:	d009      	beq.n	8011052 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801103e:	4b1e      	ldr	r3, [pc, #120]	; (80110b8 <UART_SetConfig+0x904>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	08db      	lsrs	r3, r3, #3
 8011044:	f003 0303 	and.w	r3, r3, #3
 8011048:	4a1d      	ldr	r2, [pc, #116]	; (80110c0 <UART_SetConfig+0x90c>)
 801104a:	fa22 f303 	lsr.w	r3, r2, r3
 801104e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011050:	e00f      	b.n	8011072 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011052:	4b1b      	ldr	r3, [pc, #108]	; (80110c0 <UART_SetConfig+0x90c>)
 8011054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011056:	e00c      	b.n	8011072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011058:	4b1a      	ldr	r3, [pc, #104]	; (80110c4 <UART_SetConfig+0x910>)
 801105a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801105c:	e009      	b.n	8011072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801105e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011064:	e005      	b.n	8011072 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011066:	2300      	movs	r3, #0
 8011068:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801106a:	2301      	movs	r3, #1
 801106c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011074:	2b00      	cmp	r3, #0
 8011076:	f000 81ee 	beq.w	8011456 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107e:	4a12      	ldr	r2, [pc, #72]	; (80110c8 <UART_SetConfig+0x914>)
 8011080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011084:	461a      	mov	r2, r3
 8011086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011088:	fbb3 f3f2 	udiv	r3, r3, r2
 801108c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	685a      	ldr	r2, [r3, #4]
 8011092:	4613      	mov	r3, r2
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	4413      	add	r3, r2
 8011098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801109a:	429a      	cmp	r2, r3
 801109c:	d305      	bcc.n	80110aa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d910      	bls.n	80110cc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80110aa:	2301      	movs	r3, #1
 80110ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80110b0:	e1d1      	b.n	8011456 <UART_SetConfig+0xca2>
 80110b2:	bf00      	nop
 80110b4:	40011c00 	.word	0x40011c00
 80110b8:	58024400 	.word	0x58024400
 80110bc:	58000c00 	.word	0x58000c00
 80110c0:	03d09000 	.word	0x03d09000
 80110c4:	003d0900 	.word	0x003d0900
 80110c8:	08017ff0 	.word	0x08017ff0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ce:	2200      	movs	r2, #0
 80110d0:	60bb      	str	r3, [r7, #8]
 80110d2:	60fa      	str	r2, [r7, #12]
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d8:	4ac0      	ldr	r2, [pc, #768]	; (80113dc <UART_SetConfig+0xc28>)
 80110da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110de:	b29b      	uxth	r3, r3
 80110e0:	2200      	movs	r2, #0
 80110e2:	603b      	str	r3, [r7, #0]
 80110e4:	607a      	str	r2, [r7, #4]
 80110e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80110ee:	f7ef f977 	bl	80003e0 <__aeabi_uldivmod>
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	4610      	mov	r0, r2
 80110f8:	4619      	mov	r1, r3
 80110fa:	f04f 0200 	mov.w	r2, #0
 80110fe:	f04f 0300 	mov.w	r3, #0
 8011102:	020b      	lsls	r3, r1, #8
 8011104:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011108:	0202      	lsls	r2, r0, #8
 801110a:	6979      	ldr	r1, [r7, #20]
 801110c:	6849      	ldr	r1, [r1, #4]
 801110e:	0849      	lsrs	r1, r1, #1
 8011110:	2000      	movs	r0, #0
 8011112:	460c      	mov	r4, r1
 8011114:	4605      	mov	r5, r0
 8011116:	eb12 0804 	adds.w	r8, r2, r4
 801111a:	eb43 0905 	adc.w	r9, r3, r5
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	469a      	mov	sl, r3
 8011126:	4693      	mov	fp, r2
 8011128:	4652      	mov	r2, sl
 801112a:	465b      	mov	r3, fp
 801112c:	4640      	mov	r0, r8
 801112e:	4649      	mov	r1, r9
 8011130:	f7ef f956 	bl	80003e0 <__aeabi_uldivmod>
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	4613      	mov	r3, r2
 801113a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011142:	d308      	bcc.n	8011156 <UART_SetConfig+0x9a2>
 8011144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801114a:	d204      	bcs.n	8011156 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011152:	60da      	str	r2, [r3, #12]
 8011154:	e17f      	b.n	8011456 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011156:	2301      	movs	r3, #1
 8011158:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801115c:	e17b      	b.n	8011456 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	69db      	ldr	r3, [r3, #28]
 8011162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011166:	f040 80bd 	bne.w	80112e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801116a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801116e:	2b20      	cmp	r3, #32
 8011170:	dc48      	bgt.n	8011204 <UART_SetConfig+0xa50>
 8011172:	2b00      	cmp	r3, #0
 8011174:	db7b      	blt.n	801126e <UART_SetConfig+0xaba>
 8011176:	2b20      	cmp	r3, #32
 8011178:	d879      	bhi.n	801126e <UART_SetConfig+0xaba>
 801117a:	a201      	add	r2, pc, #4	; (adr r2, 8011180 <UART_SetConfig+0x9cc>)
 801117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011180:	0801120b 	.word	0x0801120b
 8011184:	08011213 	.word	0x08011213
 8011188:	0801126f 	.word	0x0801126f
 801118c:	0801126f 	.word	0x0801126f
 8011190:	0801121b 	.word	0x0801121b
 8011194:	0801126f 	.word	0x0801126f
 8011198:	0801126f 	.word	0x0801126f
 801119c:	0801126f 	.word	0x0801126f
 80111a0:	0801122b 	.word	0x0801122b
 80111a4:	0801126f 	.word	0x0801126f
 80111a8:	0801126f 	.word	0x0801126f
 80111ac:	0801126f 	.word	0x0801126f
 80111b0:	0801126f 	.word	0x0801126f
 80111b4:	0801126f 	.word	0x0801126f
 80111b8:	0801126f 	.word	0x0801126f
 80111bc:	0801126f 	.word	0x0801126f
 80111c0:	0801123b 	.word	0x0801123b
 80111c4:	0801126f 	.word	0x0801126f
 80111c8:	0801126f 	.word	0x0801126f
 80111cc:	0801126f 	.word	0x0801126f
 80111d0:	0801126f 	.word	0x0801126f
 80111d4:	0801126f 	.word	0x0801126f
 80111d8:	0801126f 	.word	0x0801126f
 80111dc:	0801126f 	.word	0x0801126f
 80111e0:	0801126f 	.word	0x0801126f
 80111e4:	0801126f 	.word	0x0801126f
 80111e8:	0801126f 	.word	0x0801126f
 80111ec:	0801126f 	.word	0x0801126f
 80111f0:	0801126f 	.word	0x0801126f
 80111f4:	0801126f 	.word	0x0801126f
 80111f8:	0801126f 	.word	0x0801126f
 80111fc:	0801126f 	.word	0x0801126f
 8011200:	08011261 	.word	0x08011261
 8011204:	2b40      	cmp	r3, #64	; 0x40
 8011206:	d02e      	beq.n	8011266 <UART_SetConfig+0xab2>
 8011208:	e031      	b.n	801126e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801120a:	f7f9 f925 	bl	800a458 <HAL_RCC_GetPCLK1Freq>
 801120e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011210:	e033      	b.n	801127a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011212:	f7f9 f937 	bl	800a484 <HAL_RCC_GetPCLK2Freq>
 8011216:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011218:	e02f      	b.n	801127a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801121e:	4618      	mov	r0, r3
 8011220:	f7fa ffce 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011228:	e027      	b.n	801127a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801122a:	f107 0318 	add.w	r3, r7, #24
 801122e:	4618      	mov	r0, r3
 8011230:	f7fb f91a 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011238:	e01f      	b.n	801127a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801123a:	4b69      	ldr	r3, [pc, #420]	; (80113e0 <UART_SetConfig+0xc2c>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f003 0320 	and.w	r3, r3, #32
 8011242:	2b00      	cmp	r3, #0
 8011244:	d009      	beq.n	801125a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011246:	4b66      	ldr	r3, [pc, #408]	; (80113e0 <UART_SetConfig+0xc2c>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	08db      	lsrs	r3, r3, #3
 801124c:	f003 0303 	and.w	r3, r3, #3
 8011250:	4a64      	ldr	r2, [pc, #400]	; (80113e4 <UART_SetConfig+0xc30>)
 8011252:	fa22 f303 	lsr.w	r3, r2, r3
 8011256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011258:	e00f      	b.n	801127a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801125a:	4b62      	ldr	r3, [pc, #392]	; (80113e4 <UART_SetConfig+0xc30>)
 801125c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801125e:	e00c      	b.n	801127a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011260:	4b61      	ldr	r3, [pc, #388]	; (80113e8 <UART_SetConfig+0xc34>)
 8011262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011264:	e009      	b.n	801127a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801126a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801126c:	e005      	b.n	801127a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801126e:	2300      	movs	r3, #0
 8011270:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011272:	2301      	movs	r3, #1
 8011274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801127a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801127c:	2b00      	cmp	r3, #0
 801127e:	f000 80ea 	beq.w	8011456 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011286:	4a55      	ldr	r2, [pc, #340]	; (80113dc <UART_SetConfig+0xc28>)
 8011288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801128c:	461a      	mov	r2, r3
 801128e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011290:	fbb3 f3f2 	udiv	r3, r3, r2
 8011294:	005a      	lsls	r2, r3, #1
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	085b      	lsrs	r3, r3, #1
 801129c:	441a      	add	r2, r3
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80112a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	2b0f      	cmp	r3, #15
 80112ac:	d916      	bls.n	80112dc <UART_SetConfig+0xb28>
 80112ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112b4:	d212      	bcs.n	80112dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	f023 030f 	bic.w	r3, r3, #15
 80112be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c2:	085b      	lsrs	r3, r3, #1
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	f003 0307 	and.w	r3, r3, #7
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80112ce:	4313      	orrs	r3, r2
 80112d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80112d8:	60da      	str	r2, [r3, #12]
 80112da:	e0bc      	b.n	8011456 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80112dc:	2301      	movs	r3, #1
 80112de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80112e2:	e0b8      	b.n	8011456 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80112e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112e8:	2b20      	cmp	r3, #32
 80112ea:	dc4b      	bgt.n	8011384 <UART_SetConfig+0xbd0>
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f2c0 8087 	blt.w	8011400 <UART_SetConfig+0xc4c>
 80112f2:	2b20      	cmp	r3, #32
 80112f4:	f200 8084 	bhi.w	8011400 <UART_SetConfig+0xc4c>
 80112f8:	a201      	add	r2, pc, #4	; (adr r2, 8011300 <UART_SetConfig+0xb4c>)
 80112fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fe:	bf00      	nop
 8011300:	0801138b 	.word	0x0801138b
 8011304:	08011393 	.word	0x08011393
 8011308:	08011401 	.word	0x08011401
 801130c:	08011401 	.word	0x08011401
 8011310:	0801139b 	.word	0x0801139b
 8011314:	08011401 	.word	0x08011401
 8011318:	08011401 	.word	0x08011401
 801131c:	08011401 	.word	0x08011401
 8011320:	080113ab 	.word	0x080113ab
 8011324:	08011401 	.word	0x08011401
 8011328:	08011401 	.word	0x08011401
 801132c:	08011401 	.word	0x08011401
 8011330:	08011401 	.word	0x08011401
 8011334:	08011401 	.word	0x08011401
 8011338:	08011401 	.word	0x08011401
 801133c:	08011401 	.word	0x08011401
 8011340:	080113bb 	.word	0x080113bb
 8011344:	08011401 	.word	0x08011401
 8011348:	08011401 	.word	0x08011401
 801134c:	08011401 	.word	0x08011401
 8011350:	08011401 	.word	0x08011401
 8011354:	08011401 	.word	0x08011401
 8011358:	08011401 	.word	0x08011401
 801135c:	08011401 	.word	0x08011401
 8011360:	08011401 	.word	0x08011401
 8011364:	08011401 	.word	0x08011401
 8011368:	08011401 	.word	0x08011401
 801136c:	08011401 	.word	0x08011401
 8011370:	08011401 	.word	0x08011401
 8011374:	08011401 	.word	0x08011401
 8011378:	08011401 	.word	0x08011401
 801137c:	08011401 	.word	0x08011401
 8011380:	080113f3 	.word	0x080113f3
 8011384:	2b40      	cmp	r3, #64	; 0x40
 8011386:	d037      	beq.n	80113f8 <UART_SetConfig+0xc44>
 8011388:	e03a      	b.n	8011400 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801138a:	f7f9 f865 	bl	800a458 <HAL_RCC_GetPCLK1Freq>
 801138e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011390:	e03c      	b.n	801140c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011392:	f7f9 f877 	bl	800a484 <HAL_RCC_GetPCLK2Freq>
 8011396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011398:	e038      	b.n	801140c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fa ff0e 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113a8:	e030      	b.n	801140c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113aa:	f107 0318 	add.w	r3, r7, #24
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fb f85a 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113b8:	e028      	b.n	801140c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113ba:	4b09      	ldr	r3, [pc, #36]	; (80113e0 <UART_SetConfig+0xc2c>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f003 0320 	and.w	r3, r3, #32
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d012      	beq.n	80113ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113c6:	4b06      	ldr	r3, [pc, #24]	; (80113e0 <UART_SetConfig+0xc2c>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	08db      	lsrs	r3, r3, #3
 80113cc:	f003 0303 	and.w	r3, r3, #3
 80113d0:	4a04      	ldr	r2, [pc, #16]	; (80113e4 <UART_SetConfig+0xc30>)
 80113d2:	fa22 f303 	lsr.w	r3, r2, r3
 80113d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113d8:	e018      	b.n	801140c <UART_SetConfig+0xc58>
 80113da:	bf00      	nop
 80113dc:	08017ff0 	.word	0x08017ff0
 80113e0:	58024400 	.word	0x58024400
 80113e4:	03d09000 	.word	0x03d09000
 80113e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80113ec:	4b24      	ldr	r3, [pc, #144]	; (8011480 <UART_SetConfig+0xccc>)
 80113ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f0:	e00c      	b.n	801140c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113f2:	4b24      	ldr	r3, [pc, #144]	; (8011484 <UART_SetConfig+0xcd0>)
 80113f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f6:	e009      	b.n	801140c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113fe:	e005      	b.n	801140c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011400:	2300      	movs	r3, #0
 8011402:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011404:	2301      	movs	r3, #1
 8011406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801140a:	bf00      	nop
    }

    if (pclk != 0U)
 801140c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140e:	2b00      	cmp	r3, #0
 8011410:	d021      	beq.n	8011456 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011416:	4a1c      	ldr	r2, [pc, #112]	; (8011488 <UART_SetConfig+0xcd4>)
 8011418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801141c:	461a      	mov	r2, r3
 801141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011420:	fbb3 f2f2 	udiv	r2, r3, r2
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	085b      	lsrs	r3, r3, #1
 801142a:	441a      	add	r2, r3
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	fbb2 f3f3 	udiv	r3, r2, r3
 8011434:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011438:	2b0f      	cmp	r3, #15
 801143a:	d909      	bls.n	8011450 <UART_SetConfig+0xc9c>
 801143c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011442:	d205      	bcs.n	8011450 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	b29a      	uxth	r2, r3
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	60da      	str	r2, [r3, #12]
 801144e:	e002      	b.n	8011456 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011450:	2301      	movs	r3, #1
 8011452:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	2201      	movs	r2, #1
 801145a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	2201      	movs	r2, #1
 8011462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	2200      	movs	r2, #0
 801146a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	2200      	movs	r2, #0
 8011470:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011472:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011476:	4618      	mov	r0, r3
 8011478:	3748      	adds	r7, #72	; 0x48
 801147a:	46bd      	mov	sp, r7
 801147c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011480:	03d09000 	.word	0x03d09000
 8011484:	003d0900 	.word	0x003d0900
 8011488:	08017ff0 	.word	0x08017ff0

0801148c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801148c:	b480      	push	{r7}
 801148e:	b083      	sub	sp, #12
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011498:	f003 0301 	and.w	r3, r3, #1
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00a      	beq.n	80114b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	430a      	orrs	r2, r1
 80114b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ba:	f003 0302 	and.w	r3, r3, #2
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d00a      	beq.n	80114d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	430a      	orrs	r2, r1
 80114d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114dc:	f003 0304 	and.w	r3, r3, #4
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00a      	beq.n	80114fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	430a      	orrs	r2, r1
 80114f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114fe:	f003 0308 	and.w	r3, r3, #8
 8011502:	2b00      	cmp	r3, #0
 8011504:	d00a      	beq.n	801151c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	430a      	orrs	r2, r1
 801151a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011520:	f003 0310 	and.w	r3, r3, #16
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00a      	beq.n	801153e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	689b      	ldr	r3, [r3, #8]
 801152e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	430a      	orrs	r2, r1
 801153c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011542:	f003 0320 	and.w	r3, r3, #32
 8011546:	2b00      	cmp	r3, #0
 8011548:	d00a      	beq.n	8011560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	430a      	orrs	r2, r1
 801155e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011568:	2b00      	cmp	r3, #0
 801156a:	d01a      	beq.n	80115a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	430a      	orrs	r2, r1
 8011580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801158a:	d10a      	bne.n	80115a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	430a      	orrs	r2, r1
 80115a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00a      	beq.n	80115c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	430a      	orrs	r2, r1
 80115c2:	605a      	str	r2, [r3, #4]
  }
}
 80115c4:	bf00      	nop
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b098      	sub	sp, #96	; 0x60
 80115d4:	af02      	add	r7, sp, #8
 80115d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2200      	movs	r2, #0
 80115dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115e0:	f7f2 f892 	bl	8003708 <HAL_GetTick>
 80115e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f003 0308 	and.w	r3, r3, #8
 80115f0:	2b08      	cmp	r3, #8
 80115f2:	d12f      	bne.n	8011654 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115fc:	2200      	movs	r2, #0
 80115fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f88e 	bl	8011724 <UART_WaitOnFlagUntilTimeout>
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d022      	beq.n	8011654 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	e853 3f00 	ldrex	r3, [r3]
 801161a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801161c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801161e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011622:	653b      	str	r3, [r7, #80]	; 0x50
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	461a      	mov	r2, r3
 801162a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801162c:	647b      	str	r3, [r7, #68]	; 0x44
 801162e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011634:	e841 2300 	strex	r3, r2, [r1]
 8011638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801163a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801163c:	2b00      	cmp	r3, #0
 801163e:	d1e6      	bne.n	801160e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2220      	movs	r2, #32
 8011644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2200      	movs	r2, #0
 801164c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011650:	2303      	movs	r3, #3
 8011652:	e063      	b.n	801171c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f003 0304 	and.w	r3, r3, #4
 801165e:	2b04      	cmp	r3, #4
 8011660:	d149      	bne.n	80116f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011666:	9300      	str	r3, [sp, #0]
 8011668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801166a:	2200      	movs	r2, #0
 801166c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 f857 	bl	8011724 <UART_WaitOnFlagUntilTimeout>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d03c      	beq.n	80116f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	e853 3f00 	ldrex	r3, [r3]
 8011688:	623b      	str	r3, [r7, #32]
   return(result);
 801168a:	6a3b      	ldr	r3, [r7, #32]
 801168c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	461a      	mov	r2, r3
 8011698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801169a:	633b      	str	r3, [r7, #48]	; 0x30
 801169c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801169e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116a2:	e841 2300 	strex	r3, r2, [r1]
 80116a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80116a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1e6      	bne.n	801167c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	3308      	adds	r3, #8
 80116b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	e853 3f00 	ldrex	r3, [r3]
 80116bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f023 0301 	bic.w	r3, r3, #1
 80116c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	3308      	adds	r3, #8
 80116cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116ce:	61fa      	str	r2, [r7, #28]
 80116d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116d2:	69b9      	ldr	r1, [r7, #24]
 80116d4:	69fa      	ldr	r2, [r7, #28]
 80116d6:	e841 2300 	strex	r3, r2, [r1]
 80116da:	617b      	str	r3, [r7, #20]
   return(result);
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1e5      	bne.n	80116ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2220      	movs	r2, #32
 80116e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2200      	movs	r2, #0
 80116ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116f2:	2303      	movs	r3, #3
 80116f4:	e012      	b.n	801171c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2220      	movs	r2, #32
 80116fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2220      	movs	r2, #32
 8011702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2200      	movs	r2, #0
 801170a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2200      	movs	r2, #0
 8011710:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2200      	movs	r2, #0
 8011716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801171a:	2300      	movs	r3, #0
}
 801171c:	4618      	mov	r0, r3
 801171e:	3758      	adds	r7, #88	; 0x58
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	603b      	str	r3, [r7, #0]
 8011730:	4613      	mov	r3, r2
 8011732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011734:	e049      	b.n	80117ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173c:	d045      	beq.n	80117ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801173e:	f7f1 ffe3 	bl	8003708 <HAL_GetTick>
 8011742:	4602      	mov	r2, r0
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	69ba      	ldr	r2, [r7, #24]
 801174a:	429a      	cmp	r2, r3
 801174c:	d302      	bcc.n	8011754 <UART_WaitOnFlagUntilTimeout+0x30>
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011754:	2303      	movs	r3, #3
 8011756:	e048      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f003 0304 	and.w	r3, r3, #4
 8011762:	2b00      	cmp	r3, #0
 8011764:	d031      	beq.n	80117ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	69db      	ldr	r3, [r3, #28]
 801176c:	f003 0308 	and.w	r3, r3, #8
 8011770:	2b08      	cmp	r3, #8
 8011772:	d110      	bne.n	8011796 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2208      	movs	r2, #8
 801177a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801177c:	68f8      	ldr	r0, [r7, #12]
 801177e:	f000 f839 	bl	80117f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2208      	movs	r2, #8
 8011786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2200      	movs	r2, #0
 801178e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	e029      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	69db      	ldr	r3, [r3, #28]
 801179c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117a4:	d111      	bne.n	80117ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80117ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f000 f81f 	bl	80117f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2220      	movs	r2, #32
 80117ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80117c6:	2303      	movs	r3, #3
 80117c8:	e00f      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	69da      	ldr	r2, [r3, #28]
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	4013      	ands	r3, r2
 80117d4:	68ba      	ldr	r2, [r7, #8]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	bf0c      	ite	eq
 80117da:	2301      	moveq	r3, #1
 80117dc:	2300      	movne	r3, #0
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	461a      	mov	r2, r3
 80117e2:	79fb      	ldrb	r3, [r7, #7]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d0a6      	beq.n	8011736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
	...

080117f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b095      	sub	sp, #84	; 0x54
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011804:	e853 3f00 	ldrex	r3, [r3]
 8011808:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	461a      	mov	r2, r3
 8011818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801181a:	643b      	str	r3, [r7, #64]	; 0x40
 801181c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801181e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011822:	e841 2300 	strex	r3, r2, [r1]
 8011826:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1e6      	bne.n	80117fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3308      	adds	r3, #8
 8011834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	e853 3f00 	ldrex	r3, [r3]
 801183c:	61fb      	str	r3, [r7, #28]
   return(result);
 801183e:	69fa      	ldr	r2, [r7, #28]
 8011840:	4b1e      	ldr	r3, [pc, #120]	; (80118bc <UART_EndRxTransfer+0xc8>)
 8011842:	4013      	ands	r3, r2
 8011844:	64bb      	str	r3, [r7, #72]	; 0x48
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	3308      	adds	r3, #8
 801184c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801184e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011856:	e841 2300 	strex	r3, r2, [r1]
 801185a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	2b00      	cmp	r3, #0
 8011860:	d1e5      	bne.n	801182e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011866:	2b01      	cmp	r3, #1
 8011868:	d118      	bne.n	801189c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	e853 3f00 	ldrex	r3, [r3]
 8011876:	60bb      	str	r3, [r7, #8]
   return(result);
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	f023 0310 	bic.w	r3, r3, #16
 801187e:	647b      	str	r3, [r7, #68]	; 0x44
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	461a      	mov	r2, r3
 8011886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011888:	61bb      	str	r3, [r7, #24]
 801188a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188c:	6979      	ldr	r1, [r7, #20]
 801188e:	69ba      	ldr	r2, [r7, #24]
 8011890:	e841 2300 	strex	r3, r2, [r1]
 8011894:	613b      	str	r3, [r7, #16]
   return(result);
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1e6      	bne.n	801186a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2220      	movs	r2, #32
 80118a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2200      	movs	r2, #0
 80118a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80118b0:	bf00      	nop
 80118b2:	3754      	adds	r7, #84	; 0x54
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr
 80118bc:	effffffe 	.word	0xeffffffe

080118c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d101      	bne.n	80118d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80118d2:	2302      	movs	r3, #2
 80118d4:	e027      	b.n	8011926 <HAL_UARTEx_DisableFifoMode+0x66>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2201      	movs	r2, #1
 80118da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2224      	movs	r2, #36	; 0x24
 80118e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f022 0201 	bic.w	r2, r2, #1
 80118fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011904:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2200      	movs	r2, #0
 801190a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	68fa      	ldr	r2, [r7, #12]
 8011912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2220      	movs	r2, #32
 8011918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2200      	movs	r2, #0
 8011920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011924:	2300      	movs	r3, #0
}
 8011926:	4618      	mov	r0, r3
 8011928:	3714      	adds	r7, #20
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr

08011932 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b084      	sub	sp, #16
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
 801193a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011942:	2b01      	cmp	r3, #1
 8011944:	d101      	bne.n	801194a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011946:	2302      	movs	r3, #2
 8011948:	e02d      	b.n	80119a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2201      	movs	r2, #1
 801194e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2224      	movs	r2, #36	; 0x24
 8011956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	f022 0201 	bic.w	r2, r2, #1
 8011970:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	683a      	ldr	r2, [r7, #0]
 8011982:	430a      	orrs	r2, r1
 8011984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f000 f850 	bl	8011a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	68fa      	ldr	r2, [r7, #12]
 8011992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2220      	movs	r2, #32
 8011998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119a4:	2300      	movs	r3, #0
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119ae:	b580      	push	{r7, lr}
 80119b0:	b084      	sub	sp, #16
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
 80119b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d101      	bne.n	80119c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119c2:	2302      	movs	r3, #2
 80119c4:	e02d      	b.n	8011a22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2201      	movs	r2, #1
 80119ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2224      	movs	r2, #36	; 0x24
 80119d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f022 0201 	bic.w	r2, r2, #1
 80119ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	683a      	ldr	r2, [r7, #0]
 80119fe:	430a      	orrs	r2, r1
 8011a00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f812 	bl	8011a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	68fa      	ldr	r2, [r7, #12]
 8011a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2220      	movs	r2, #32
 8011a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a20:	2300      	movs	r3, #0
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	3710      	adds	r7, #16
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
	...

08011a2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b085      	sub	sp, #20
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d108      	bne.n	8011a4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2201      	movs	r2, #1
 8011a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a4c:	e031      	b.n	8011ab2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a4e:	2310      	movs	r3, #16
 8011a50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a52:	2310      	movs	r3, #16
 8011a54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	689b      	ldr	r3, [r3, #8]
 8011a5c:	0e5b      	lsrs	r3, r3, #25
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	f003 0307 	and.w	r3, r3, #7
 8011a64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	0f5b      	lsrs	r3, r3, #29
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	f003 0307 	and.w	r3, r3, #7
 8011a74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a76:	7bbb      	ldrb	r3, [r7, #14]
 8011a78:	7b3a      	ldrb	r2, [r7, #12]
 8011a7a:	4911      	ldr	r1, [pc, #68]	; (8011ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8011a7c:	5c8a      	ldrb	r2, [r1, r2]
 8011a7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a82:	7b3a      	ldrb	r2, [r7, #12]
 8011a84:	490f      	ldr	r1, [pc, #60]	; (8011ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8011a86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a88:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a8c:	b29a      	uxth	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a94:	7bfb      	ldrb	r3, [r7, #15]
 8011a96:	7b7a      	ldrb	r2, [r7, #13]
 8011a98:	4909      	ldr	r1, [pc, #36]	; (8011ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8011a9a:	5c8a      	ldrb	r2, [r1, r2]
 8011a9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011aa0:	7b7a      	ldrb	r2, [r7, #13]
 8011aa2:	4908      	ldr	r1, [pc, #32]	; (8011ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8011aa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011ab2:	bf00      	nop
 8011ab4:	3714      	adds	r7, #20
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	08018008 	.word	0x08018008
 8011ac4:	08018010 	.word	0x08018010

08011ac8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011ac8:	b084      	sub	sp, #16
 8011aca:	b480      	push	{r7}
 8011acc:	b085      	sub	sp, #20
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	f107 001c 	add.w	r0, r7, #28
 8011ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011ade:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011ae0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011ae2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011ae6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011aea:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011aee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	4313      	orrs	r3, r2
 8011af4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	685a      	ldr	r2, [r3, #4]
 8011afa:	4b07      	ldr	r3, [pc, #28]	; (8011b18 <SDMMC_Init+0x50>)
 8011afc:	4013      	ands	r3, r2
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	431a      	orrs	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3714      	adds	r7, #20
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	b004      	add	sp, #16
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	ffc02c00 	.word	0xffc02c00

08011b1c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	370c      	adds	r7, #12
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr

08011b36 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011b36:	b480      	push	{r7}
 8011b38:	b083      	sub	sp, #12
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	370c      	adds	r7, #12
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr

08011b58 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f043 0203 	orr.w	r2, r3, #3
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	370c      	adds	r7, #12
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011b7a:	b480      	push	{r7}
 8011b7c:	b083      	sub	sp, #12
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f003 0303 	and.w	r3, r3, #3
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	370c      	adds	r7, #12
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b94:	4770      	bx	lr
	...

08011b98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011bbc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011bc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	4313      	orrs	r3, r2
 8011bc8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	68da      	ldr	r2, [r3, #12]
 8011bce:	4b06      	ldr	r3, [pc, #24]	; (8011be8 <SDMMC_SendCommand+0x50>)
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	431a      	orrs	r2, r3
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011bda:	2300      	movs	r3, #0
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3714      	adds	r7, #20
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr
 8011be8:	fffee0c0 	.word	0xfffee0c0

08011bec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	691b      	ldr	r3, [r3, #16]
 8011bf8:	b2db      	uxtb	r3, r3
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	370c      	adds	r7, #12
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c04:	4770      	bx	lr

08011c06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011c06:	b480      	push	{r7}
 8011c08:	b085      	sub	sp, #20
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
 8011c0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	3314      	adds	r3, #20
 8011c14:	461a      	mov	r2, r3
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	4413      	add	r3, r2
 8011c1a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr

08011c2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b085      	sub	sp, #20
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c36:	2300      	movs	r3, #0
 8011c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	685a      	ldr	r2, [r3, #4]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c52:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011c58:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011c5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	4313      	orrs	r3, r2
 8011c64:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	431a      	orrs	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011c76:	2300      	movs	r3, #0

}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3714      	adds	r7, #20
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr

08011c84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b088      	sub	sp, #32
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011c92:	2310      	movs	r3, #16
 8011c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ca6:	f107 0308 	add.w	r3, r7, #8
 8011caa:	4619      	mov	r1, r3
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7ff ff73 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cb6:	2110      	movs	r1, #16
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f000 fa5f 	bl	801217c <SDMMC_GetCmdResp1>
 8011cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cc0:	69fb      	ldr	r3, [r7, #28]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3720      	adds	r7, #32
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b088      	sub	sp, #32
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
 8011cd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011cd8:	2311      	movs	r3, #17
 8011cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cec:	f107 0308 	add.w	r3, r7, #8
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff ff50 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cfc:	2111      	movs	r1, #17
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 fa3c 	bl	801217c <SDMMC_GetCmdResp1>
 8011d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d06:	69fb      	ldr	r3, [r7, #28]
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3720      	adds	r7, #32
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}

08011d10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b088      	sub	sp, #32
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011d1e:	2312      	movs	r3, #18
 8011d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d32:	f107 0308 	add.w	r3, r7, #8
 8011d36:	4619      	mov	r1, r3
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7ff ff2d 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d42:	2112      	movs	r1, #18
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f000 fa19 	bl	801217c <SDMMC_GetCmdResp1>
 8011d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d4c:	69fb      	ldr	r3, [r7, #28]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3720      	adds	r7, #32
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}

08011d56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011d56:	b580      	push	{r7, lr}
 8011d58:	b088      	sub	sp, #32
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
 8011d5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011d64:	2318      	movs	r3, #24
 8011d66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d78:	f107 0308 	add.w	r3, r7, #8
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f7ff ff0a 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d88:	2118      	movs	r1, #24
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 f9f6 	bl	801217c <SDMMC_GetCmdResp1>
 8011d90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d92:	69fb      	ldr	r3, [r7, #28]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3720      	adds	r7, #32
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b088      	sub	sp, #32
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011daa:	2319      	movs	r3, #25
 8011dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011db2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011db4:	2300      	movs	r3, #0
 8011db6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dbe:	f107 0308 	add.w	r3, r7, #8
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f7ff fee7 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dce:	2119      	movs	r1, #25
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 f9d3 	bl	801217c <SDMMC_GetCmdResp1>
 8011dd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dd8:	69fb      	ldr	r3, [r7, #28]
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3720      	adds	r7, #32
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
	...

08011de4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b088      	sub	sp, #32
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011dec:	2300      	movs	r3, #0
 8011dee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011df0:	230c      	movs	r3, #12
 8011df2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e02:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e1c:	f107 0308 	add.w	r3, r7, #8
 8011e20:	4619      	mov	r1, r3
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f7ff feb8 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011e28:	4a0b      	ldr	r2, [pc, #44]	; (8011e58 <SDMMC_CmdStopTransfer+0x74>)
 8011e2a:	210c      	movs	r1, #12
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f000 f9a5 	bl	801217c <SDMMC_GetCmdResp1>
 8011e32:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e46:	d101      	bne.n	8011e4c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011e4c:	69fb      	ldr	r3, [r7, #28]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3720      	adds	r7, #32
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	05f5e100 	.word	0x05f5e100

08011e5c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b088      	sub	sp, #32
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011e6a:	2307      	movs	r3, #7
 8011e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e74:	2300      	movs	r3, #0
 8011e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e7e:	f107 0308 	add.w	r3, r7, #8
 8011e82:	4619      	mov	r1, r3
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7ff fe87 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e8e:	2107      	movs	r1, #7
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f000 f973 	bl	801217c <SDMMC_GetCmdResp1>
 8011e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e98:	69fb      	ldr	r3, [r7, #28]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3720      	adds	r7, #32
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b088      	sub	sp, #32
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ebe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ec0:	f107 0308 	add.w	r3, r7, #8
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff fe66 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 fb97 	bl	8012600 <SDMMC_GetCmdError>
 8011ed2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ed4:	69fb      	ldr	r3, [r7, #28]
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3720      	adds	r7, #32
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b088      	sub	sp, #32
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011ee6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011eec:	2308      	movs	r3, #8
 8011eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f00:	f107 0308 	add.w	r3, r7, #8
 8011f04:	4619      	mov	r1, r3
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7ff fe46 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 fb29 	bl	8012564 <SDMMC_GetCmdResp7>
 8011f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f14:	69fb      	ldr	r3, [r7, #28]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3720      	adds	r7, #32
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b088      	sub	sp, #32
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
 8011f26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011f2c:	2337      	movs	r3, #55	; 0x37
 8011f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f36:	2300      	movs	r3, #0
 8011f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f40:	f107 0308 	add.w	r3, r7, #8
 8011f44:	4619      	mov	r1, r3
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7ff fe26 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f50:	2137      	movs	r1, #55	; 0x37
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f000 f912 	bl	801217c <SDMMC_GetCmdResp1>
 8011f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f5a:	69fb      	ldr	r3, [r7, #28]
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3720      	adds	r7, #32
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b088      	sub	sp, #32
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011f72:	2329      	movs	r3, #41	; 0x29
 8011f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f86:	f107 0308 	add.w	r3, r7, #8
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f7ff fe03 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 fa2e 	bl	80123f4 <SDMMC_GetCmdResp3>
 8011f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f9a:	69fb      	ldr	r3, [r7, #28]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3720      	adds	r7, #32
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011fb2:	2306      	movs	r3, #6
 8011fb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fc6:	f107 0308 	add.w	r3, r7, #8
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff fde3 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fd6:	2106      	movs	r1, #6
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f000 f8cf 	bl	801217c <SDMMC_GetCmdResp1>
 8011fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fe0:	69fb      	ldr	r3, [r7, #28]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3720      	adds	r7, #32
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}

08011fea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011fea:	b580      	push	{r7, lr}
 8011fec:	b088      	sub	sp, #32
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011ff6:	2333      	movs	r3, #51	; 0x33
 8011ff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012000:	2300      	movs	r3, #0
 8012002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012008:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801200a:	f107 0308 	add.w	r3, r7, #8
 801200e:	4619      	mov	r1, r3
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff fdc1 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012016:	f241 3288 	movw	r2, #5000	; 0x1388
 801201a:	2133      	movs	r1, #51	; 0x33
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 f8ad 	bl	801217c <SDMMC_GetCmdResp1>
 8012022:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012024:	69fb      	ldr	r3, [r7, #28]
}
 8012026:	4618      	mov	r0, r3
 8012028:	3720      	adds	r7, #32
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b088      	sub	sp, #32
 8012032:	af00      	add	r7, sp, #0
 8012034:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012036:	2300      	movs	r3, #0
 8012038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801203a:	2302      	movs	r3, #2
 801203c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801203e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012044:	2300      	movs	r3, #0
 8012046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801204c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801204e:	f107 0308 	add.w	r3, r7, #8
 8012052:	4619      	mov	r1, r3
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff fd9f 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f000 f980 	bl	8012360 <SDMMC_GetCmdResp2>
 8012060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012062:	69fb      	ldr	r3, [r7, #28]
}
 8012064:	4618      	mov	r0, r3
 8012066:	3720      	adds	r7, #32
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b088      	sub	sp, #32
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801207a:	2309      	movs	r3, #9
 801207c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801207e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012084:	2300      	movs	r3, #0
 8012086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801208c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801208e:	f107 0308 	add.w	r3, r7, #8
 8012092:	4619      	mov	r1, r3
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff fd7f 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f960 	bl	8012360 <SDMMC_GetCmdResp2>
 80120a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120a2:	69fb      	ldr	r3, [r7, #28]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3720      	adds	r7, #32
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b088      	sub	sp, #32
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80120b6:	2300      	movs	r3, #0
 80120b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80120ba:	2303      	movs	r3, #3
 80120bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120c4:	2300      	movs	r3, #0
 80120c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120ce:	f107 0308 	add.w	r3, r7, #8
 80120d2:	4619      	mov	r1, r3
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7ff fd5f 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80120da:	683a      	ldr	r2, [r7, #0]
 80120dc:	2103      	movs	r1, #3
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f000 f9c8 	bl	8012474 <SDMMC_GetCmdResp6>
 80120e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120e6:	69fb      	ldr	r3, [r7, #28]
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3720      	adds	r7, #32
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b088      	sub	sp, #32
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80120fe:	230d      	movs	r3, #13
 8012100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012110:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012112:	f107 0308 	add.w	r3, r7, #8
 8012116:	4619      	mov	r1, r3
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff fd3d 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012122:	210d      	movs	r1, #13
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 f829 	bl	801217c <SDMMC_GetCmdResp1>
 801212a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801212c:	69fb      	ldr	r3, [r7, #28]
}
 801212e:	4618      	mov	r0, r3
 8012130:	3720      	adds	r7, #32
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b088      	sub	sp, #32
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801213e:	2300      	movs	r3, #0
 8012140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012142:	230d      	movs	r3, #13
 8012144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012146:	f44f 7380 	mov.w	r3, #256	; 0x100
 801214a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801214c:	2300      	movs	r3, #0
 801214e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012154:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012156:	f107 0308 	add.w	r3, r7, #8
 801215a:	4619      	mov	r1, r3
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f7ff fd1b 	bl	8011b98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012162:	f241 3288 	movw	r2, #5000	; 0x1388
 8012166:	210d      	movs	r1, #13
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f000 f807 	bl	801217c <SDMMC_GetCmdResp1>
 801216e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012170:	69fb      	ldr	r3, [r7, #28]
}
 8012172:	4618      	mov	r0, r3
 8012174:	3720      	adds	r7, #32
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
	...

0801217c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b088      	sub	sp, #32
 8012180:	af00      	add	r7, sp, #0
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	460b      	mov	r3, r1
 8012186:	607a      	str	r2, [r7, #4]
 8012188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801218a:	4b70      	ldr	r3, [pc, #448]	; (801234c <SDMMC_GetCmdResp1+0x1d0>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4a70      	ldr	r2, [pc, #448]	; (8012350 <SDMMC_GetCmdResp1+0x1d4>)
 8012190:	fba2 2303 	umull	r2, r3, r2, r3
 8012194:	0a5a      	lsrs	r2, r3, #9
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	fb02 f303 	mul.w	r3, r2, r3
 801219c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801219e:	69fb      	ldr	r3, [r7, #28]
 80121a0:	1e5a      	subs	r2, r3, #1
 80121a2:	61fa      	str	r2, [r7, #28]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d102      	bne.n	80121ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121ac:	e0c9      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80121b4:	69ba      	ldr	r2, [r7, #24]
 80121b6:	4b67      	ldr	r3, [pc, #412]	; (8012354 <SDMMC_GetCmdResp1+0x1d8>)
 80121b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d0ef      	beq.n	801219e <SDMMC_GetCmdResp1+0x22>
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d1ea      	bne.n	801219e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121cc:	f003 0304 	and.w	r3, r3, #4
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d004      	beq.n	80121de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2204      	movs	r2, #4
 80121d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80121da:	2304      	movs	r3, #4
 80121dc:	e0b1      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121e2:	f003 0301 	and.w	r3, r3, #1
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d004      	beq.n	80121f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	2201      	movs	r2, #1
 80121ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121f0:	2301      	movs	r3, #1
 80121f2:	e0a6      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	4a58      	ldr	r2, [pc, #352]	; (8012358 <SDMMC_GetCmdResp1+0x1dc>)
 80121f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f7ff fcf6 	bl	8011bec <SDMMC_GetCommandResponse>
 8012200:	4603      	mov	r3, r0
 8012202:	461a      	mov	r2, r3
 8012204:	7afb      	ldrb	r3, [r7, #11]
 8012206:	4293      	cmp	r3, r2
 8012208:	d001      	beq.n	801220e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801220a:	2301      	movs	r3, #1
 801220c:	e099      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801220e:	2100      	movs	r1, #0
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f7ff fcf8 	bl	8011c06 <SDMMC_GetResponse>
 8012216:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	4b50      	ldr	r3, [pc, #320]	; (801235c <SDMMC_GetCmdResp1+0x1e0>)
 801221c:	4013      	ands	r3, r2
 801221e:	2b00      	cmp	r3, #0
 8012220:	d101      	bne.n	8012226 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012222:	2300      	movs	r3, #0
 8012224:	e08d      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	2b00      	cmp	r3, #0
 801222a:	da02      	bge.n	8012232 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801222c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012230:	e087      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012238:	2b00      	cmp	r3, #0
 801223a:	d001      	beq.n	8012240 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801223c:	2340      	movs	r3, #64	; 0x40
 801223e:	e080      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801224a:	2380      	movs	r3, #128	; 0x80
 801224c:	e079      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012254:	2b00      	cmp	r3, #0
 8012256:	d002      	beq.n	801225e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012258:	f44f 7380 	mov.w	r3, #256	; 0x100
 801225c:	e071      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012264:	2b00      	cmp	r3, #0
 8012266:	d002      	beq.n	801226e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012268:	f44f 7300 	mov.w	r3, #512	; 0x200
 801226c:	e069      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012274:	2b00      	cmp	r3, #0
 8012276:	d002      	beq.n	801227e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801227c:	e061      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012284:	2b00      	cmp	r3, #0
 8012286:	d002      	beq.n	801228e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801228c:	e059      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012294:	2b00      	cmp	r3, #0
 8012296:	d002      	beq.n	801229e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801229c:	e051      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80122a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122ac:	e049      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d002      	beq.n	80122be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80122b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80122bc:	e041      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d002      	beq.n	80122ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80122c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122cc:	e039      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d002      	beq.n	80122de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80122d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80122dc:	e031      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d002      	beq.n	80122ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80122e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80122ec:	e029      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80122f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80122fc:	e021      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012304:	2b00      	cmp	r3, #0
 8012306:	d002      	beq.n	801230e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012308:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801230c:	e019      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012314:	2b00      	cmp	r3, #0
 8012316:	d002      	beq.n	801231e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801231c:	e011      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012328:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801232c:	e009      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	f003 0308 	and.w	r3, r3, #8
 8012334:	2b00      	cmp	r3, #0
 8012336:	d002      	beq.n	801233e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012338:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801233c:	e001      	b.n	8012342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801233e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012342:	4618      	mov	r0, r3
 8012344:	3720      	adds	r7, #32
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	24000000 	.word	0x24000000
 8012350:	10624dd3 	.word	0x10624dd3
 8012354:	00200045 	.word	0x00200045
 8012358:	002000c5 	.word	0x002000c5
 801235c:	fdffe008 	.word	0xfdffe008

08012360 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012360:	b480      	push	{r7}
 8012362:	b085      	sub	sp, #20
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012368:	4b1f      	ldr	r3, [pc, #124]	; (80123e8 <SDMMC_GetCmdResp2+0x88>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4a1f      	ldr	r2, [pc, #124]	; (80123ec <SDMMC_GetCmdResp2+0x8c>)
 801236e:	fba2 2303 	umull	r2, r3, r2, r3
 8012372:	0a5b      	lsrs	r3, r3, #9
 8012374:	f241 3288 	movw	r2, #5000	; 0x1388
 8012378:	fb02 f303 	mul.w	r3, r2, r3
 801237c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	1e5a      	subs	r2, r3, #1
 8012382:	60fa      	str	r2, [r7, #12]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d102      	bne.n	801238e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801238c:	e026      	b.n	80123dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012392:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801239a:	2b00      	cmp	r3, #0
 801239c:	d0ef      	beq.n	801237e <SDMMC_GetCmdResp2+0x1e>
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1ea      	bne.n	801237e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ac:	f003 0304 	and.w	r3, r3, #4
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d004      	beq.n	80123be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2204      	movs	r2, #4
 80123b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123ba:	2304      	movs	r3, #4
 80123bc:	e00e      	b.n	80123dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123c2:	f003 0301 	and.w	r3, r3, #1
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d004      	beq.n	80123d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2201      	movs	r2, #1
 80123ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123d0:	2301      	movs	r3, #1
 80123d2:	e003      	b.n	80123dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	4a06      	ldr	r2, [pc, #24]	; (80123f0 <SDMMC_GetCmdResp2+0x90>)
 80123d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3714      	adds	r7, #20
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr
 80123e8:	24000000 	.word	0x24000000
 80123ec:	10624dd3 	.word	0x10624dd3
 80123f0:	002000c5 	.word	0x002000c5

080123f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b085      	sub	sp, #20
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80123fc:	4b1a      	ldr	r3, [pc, #104]	; (8012468 <SDMMC_GetCmdResp3+0x74>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a1a      	ldr	r2, [pc, #104]	; (801246c <SDMMC_GetCmdResp3+0x78>)
 8012402:	fba2 2303 	umull	r2, r3, r2, r3
 8012406:	0a5b      	lsrs	r3, r3, #9
 8012408:	f241 3288 	movw	r2, #5000	; 0x1388
 801240c:	fb02 f303 	mul.w	r3, r2, r3
 8012410:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	1e5a      	subs	r2, r3, #1
 8012416:	60fa      	str	r2, [r7, #12]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d102      	bne.n	8012422 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801241c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012420:	e01b      	b.n	801245a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012426:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801242e:	2b00      	cmp	r3, #0
 8012430:	d0ef      	beq.n	8012412 <SDMMC_GetCmdResp3+0x1e>
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012438:	2b00      	cmp	r3, #0
 801243a:	d1ea      	bne.n	8012412 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012440:	f003 0304 	and.w	r3, r3, #4
 8012444:	2b00      	cmp	r3, #0
 8012446:	d004      	beq.n	8012452 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2204      	movs	r2, #4
 801244c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801244e:	2304      	movs	r3, #4
 8012450:	e003      	b.n	801245a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4a06      	ldr	r2, [pc, #24]	; (8012470 <SDMMC_GetCmdResp3+0x7c>)
 8012456:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3714      	adds	r7, #20
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr
 8012466:	bf00      	nop
 8012468:	24000000 	.word	0x24000000
 801246c:	10624dd3 	.word	0x10624dd3
 8012470:	002000c5 	.word	0x002000c5

08012474 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b088      	sub	sp, #32
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	460b      	mov	r3, r1
 801247e:	607a      	str	r2, [r7, #4]
 8012480:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012482:	4b35      	ldr	r3, [pc, #212]	; (8012558 <SDMMC_GetCmdResp6+0xe4>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4a35      	ldr	r2, [pc, #212]	; (801255c <SDMMC_GetCmdResp6+0xe8>)
 8012488:	fba2 2303 	umull	r2, r3, r2, r3
 801248c:	0a5b      	lsrs	r3, r3, #9
 801248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012492:	fb02 f303 	mul.w	r3, r2, r3
 8012496:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012498:	69fb      	ldr	r3, [r7, #28]
 801249a:	1e5a      	subs	r2, r3, #1
 801249c:	61fa      	str	r2, [r7, #28]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d102      	bne.n	80124a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124a6:	e052      	b.n	801254e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ac:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d0ef      	beq.n	8012498 <SDMMC_GetCmdResp6+0x24>
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1ea      	bne.n	8012498 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124c6:	f003 0304 	and.w	r3, r3, #4
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d004      	beq.n	80124d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2204      	movs	r2, #4
 80124d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80124d4:	2304      	movs	r3, #4
 80124d6:	e03a      	b.n	801254e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124dc:	f003 0301 	and.w	r3, r3, #1
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d004      	beq.n	80124ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2201      	movs	r2, #1
 80124e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124ea:	2301      	movs	r3, #1
 80124ec:	e02f      	b.n	801254e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f7ff fb7c 	bl	8011bec <SDMMC_GetCommandResponse>
 80124f4:	4603      	mov	r3, r0
 80124f6:	461a      	mov	r2, r3
 80124f8:	7afb      	ldrb	r3, [r7, #11]
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d001      	beq.n	8012502 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124fe:	2301      	movs	r3, #1
 8012500:	e025      	b.n	801254e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	4a16      	ldr	r2, [pc, #88]	; (8012560 <SDMMC_GetCmdResp6+0xec>)
 8012506:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012508:	2100      	movs	r1, #0
 801250a:	68f8      	ldr	r0, [r7, #12]
 801250c:	f7ff fb7b 	bl	8011c06 <SDMMC_GetResponse>
 8012510:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012518:	2b00      	cmp	r3, #0
 801251a:	d106      	bne.n	801252a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	0c1b      	lsrs	r3, r3, #16
 8012520:	b29a      	uxth	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012526:	2300      	movs	r3, #0
 8012528:	e011      	b.n	801254e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012530:	2b00      	cmp	r3, #0
 8012532:	d002      	beq.n	801253a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012538:	e009      	b.n	801254e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012540:	2b00      	cmp	r3, #0
 8012542:	d002      	beq.n	801254a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012548:	e001      	b.n	801254e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801254a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801254e:	4618      	mov	r0, r3
 8012550:	3720      	adds	r7, #32
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	24000000 	.word	0x24000000
 801255c:	10624dd3 	.word	0x10624dd3
 8012560:	002000c5 	.word	0x002000c5

08012564 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012564:	b480      	push	{r7}
 8012566:	b085      	sub	sp, #20
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801256c:	4b22      	ldr	r3, [pc, #136]	; (80125f8 <SDMMC_GetCmdResp7+0x94>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a22      	ldr	r2, [pc, #136]	; (80125fc <SDMMC_GetCmdResp7+0x98>)
 8012572:	fba2 2303 	umull	r2, r3, r2, r3
 8012576:	0a5b      	lsrs	r3, r3, #9
 8012578:	f241 3288 	movw	r2, #5000	; 0x1388
 801257c:	fb02 f303 	mul.w	r3, r2, r3
 8012580:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	1e5a      	subs	r2, r3, #1
 8012586:	60fa      	str	r2, [r7, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d102      	bne.n	8012592 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801258c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012590:	e02c      	b.n	80125ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012596:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d0ef      	beq.n	8012582 <SDMMC_GetCmdResp7+0x1e>
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1ea      	bne.n	8012582 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125b0:	f003 0304 	and.w	r3, r3, #4
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d004      	beq.n	80125c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2204      	movs	r2, #4
 80125bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125be:	2304      	movs	r3, #4
 80125c0:	e014      	b.n	80125ec <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125c6:	f003 0301 	and.w	r3, r3, #1
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d004      	beq.n	80125d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2201      	movs	r2, #1
 80125d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125d4:	2301      	movs	r3, #1
 80125d6:	e009      	b.n	80125ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d002      	beq.n	80125ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2240      	movs	r2, #64	; 0x40
 80125e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80125ea:	2300      	movs	r3, #0

}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3714      	adds	r7, #20
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr
 80125f8:	24000000 	.word	0x24000000
 80125fc:	10624dd3 	.word	0x10624dd3

08012600 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012608:	4b11      	ldr	r3, [pc, #68]	; (8012650 <SDMMC_GetCmdError+0x50>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a11      	ldr	r2, [pc, #68]	; (8012654 <SDMMC_GetCmdError+0x54>)
 801260e:	fba2 2303 	umull	r2, r3, r2, r3
 8012612:	0a5b      	lsrs	r3, r3, #9
 8012614:	f241 3288 	movw	r2, #5000	; 0x1388
 8012618:	fb02 f303 	mul.w	r3, r2, r3
 801261c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	1e5a      	subs	r2, r3, #1
 8012622:	60fa      	str	r2, [r7, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801262c:	e009      	b.n	8012642 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012636:	2b00      	cmp	r3, #0
 8012638:	d0f1      	beq.n	801261e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4a06      	ldr	r2, [pc, #24]	; (8012658 <SDMMC_GetCmdError+0x58>)
 801263e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012640:	2300      	movs	r3, #0
}
 8012642:	4618      	mov	r0, r3
 8012644:	3714      	adds	r7, #20
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	24000000 	.word	0x24000000
 8012654:	10624dd3 	.word	0x10624dd3
 8012658:	002000c5 	.word	0x002000c5

0801265c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801265c:	b084      	sub	sp, #16
 801265e:	b580      	push	{r7, lr}
 8012660:	b084      	sub	sp, #16
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
 8012666:	f107 001c 	add.w	r0, r7, #28
 801266a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012670:	2b01      	cmp	r3, #1
 8012672:	d120      	bne.n	80126b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	68da      	ldr	r2, [r3, #12]
 8012684:	4b2a      	ldr	r3, [pc, #168]	; (8012730 <USB_CoreInit+0xd4>)
 8012686:	4013      	ands	r3, r2
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801269a:	2b01      	cmp	r3, #1
 801269c:	d105      	bne.n	80126aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f001 faf8 	bl	8013ca0 <USB_CoreReset>
 80126b0:	4603      	mov	r3, r0
 80126b2:	73fb      	strb	r3, [r7, #15]
 80126b4:	e01a      	b.n	80126ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	68db      	ldr	r3, [r3, #12]
 80126ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f001 faec 	bl	8013ca0 <USB_CoreReset>
 80126c8:	4603      	mov	r3, r0
 80126ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80126cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d106      	bne.n	80126e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	639a      	str	r2, [r3, #56]	; 0x38
 80126de:	e005      	b.n	80126ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d116      	bne.n	8012720 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012700:	4b0c      	ldr	r3, [pc, #48]	; (8012734 <USB_CoreInit+0xd8>)
 8012702:	4313      	orrs	r3, r2
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	689b      	ldr	r3, [r3, #8]
 801270c:	f043 0206 	orr.w	r2, r3, #6
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	f043 0220 	orr.w	r2, r3, #32
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012720:	7bfb      	ldrb	r3, [r7, #15]
}
 8012722:	4618      	mov	r0, r3
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801272c:	b004      	add	sp, #16
 801272e:	4770      	bx	lr
 8012730:	ffbdffbf 	.word	0xffbdffbf
 8012734:	03ee0000 	.word	0x03ee0000

08012738 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012738:	b480      	push	{r7}
 801273a:	b087      	sub	sp, #28
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	4613      	mov	r3, r2
 8012744:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012746:	79fb      	ldrb	r3, [r7, #7]
 8012748:	2b02      	cmp	r3, #2
 801274a:	d165      	bne.n	8012818 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	4a41      	ldr	r2, [pc, #260]	; (8012854 <USB_SetTurnaroundTime+0x11c>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d906      	bls.n	8012762 <USB_SetTurnaroundTime+0x2a>
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	4a40      	ldr	r2, [pc, #256]	; (8012858 <USB_SetTurnaroundTime+0x120>)
 8012758:	4293      	cmp	r3, r2
 801275a:	d202      	bcs.n	8012762 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801275c:	230f      	movs	r3, #15
 801275e:	617b      	str	r3, [r7, #20]
 8012760:	e062      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	4a3c      	ldr	r2, [pc, #240]	; (8012858 <USB_SetTurnaroundTime+0x120>)
 8012766:	4293      	cmp	r3, r2
 8012768:	d306      	bcc.n	8012778 <USB_SetTurnaroundTime+0x40>
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	4a3b      	ldr	r2, [pc, #236]	; (801285c <USB_SetTurnaroundTime+0x124>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d202      	bcs.n	8012778 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012772:	230e      	movs	r3, #14
 8012774:	617b      	str	r3, [r7, #20]
 8012776:	e057      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	4a38      	ldr	r2, [pc, #224]	; (801285c <USB_SetTurnaroundTime+0x124>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d306      	bcc.n	801278e <USB_SetTurnaroundTime+0x56>
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	4a37      	ldr	r2, [pc, #220]	; (8012860 <USB_SetTurnaroundTime+0x128>)
 8012784:	4293      	cmp	r3, r2
 8012786:	d202      	bcs.n	801278e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012788:	230d      	movs	r3, #13
 801278a:	617b      	str	r3, [r7, #20]
 801278c:	e04c      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	4a33      	ldr	r2, [pc, #204]	; (8012860 <USB_SetTurnaroundTime+0x128>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d306      	bcc.n	80127a4 <USB_SetTurnaroundTime+0x6c>
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	4a32      	ldr	r2, [pc, #200]	; (8012864 <USB_SetTurnaroundTime+0x12c>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d802      	bhi.n	80127a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801279e:	230c      	movs	r3, #12
 80127a0:	617b      	str	r3, [r7, #20]
 80127a2:	e041      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	4a2f      	ldr	r2, [pc, #188]	; (8012864 <USB_SetTurnaroundTime+0x12c>)
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d906      	bls.n	80127ba <USB_SetTurnaroundTime+0x82>
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	4a2e      	ldr	r2, [pc, #184]	; (8012868 <USB_SetTurnaroundTime+0x130>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d802      	bhi.n	80127ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80127b4:	230b      	movs	r3, #11
 80127b6:	617b      	str	r3, [r7, #20]
 80127b8:	e036      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	4a2a      	ldr	r2, [pc, #168]	; (8012868 <USB_SetTurnaroundTime+0x130>)
 80127be:	4293      	cmp	r3, r2
 80127c0:	d906      	bls.n	80127d0 <USB_SetTurnaroundTime+0x98>
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	4a29      	ldr	r2, [pc, #164]	; (801286c <USB_SetTurnaroundTime+0x134>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d802      	bhi.n	80127d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80127ca:	230a      	movs	r3, #10
 80127cc:	617b      	str	r3, [r7, #20]
 80127ce:	e02b      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	4a26      	ldr	r2, [pc, #152]	; (801286c <USB_SetTurnaroundTime+0x134>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d906      	bls.n	80127e6 <USB_SetTurnaroundTime+0xae>
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	4a25      	ldr	r2, [pc, #148]	; (8012870 <USB_SetTurnaroundTime+0x138>)
 80127dc:	4293      	cmp	r3, r2
 80127de:	d202      	bcs.n	80127e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80127e0:	2309      	movs	r3, #9
 80127e2:	617b      	str	r3, [r7, #20]
 80127e4:	e020      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	4a21      	ldr	r2, [pc, #132]	; (8012870 <USB_SetTurnaroundTime+0x138>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d306      	bcc.n	80127fc <USB_SetTurnaroundTime+0xc4>
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	4a20      	ldr	r2, [pc, #128]	; (8012874 <USB_SetTurnaroundTime+0x13c>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d802      	bhi.n	80127fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80127f6:	2308      	movs	r3, #8
 80127f8:	617b      	str	r3, [r7, #20]
 80127fa:	e015      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	4a1d      	ldr	r2, [pc, #116]	; (8012874 <USB_SetTurnaroundTime+0x13c>)
 8012800:	4293      	cmp	r3, r2
 8012802:	d906      	bls.n	8012812 <USB_SetTurnaroundTime+0xda>
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	4a1c      	ldr	r2, [pc, #112]	; (8012878 <USB_SetTurnaroundTime+0x140>)
 8012808:	4293      	cmp	r3, r2
 801280a:	d202      	bcs.n	8012812 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801280c:	2307      	movs	r3, #7
 801280e:	617b      	str	r3, [r7, #20]
 8012810:	e00a      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012812:	2306      	movs	r3, #6
 8012814:	617b      	str	r3, [r7, #20]
 8012816:	e007      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012818:	79fb      	ldrb	r3, [r7, #7]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d102      	bne.n	8012824 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801281e:	2309      	movs	r3, #9
 8012820:	617b      	str	r3, [r7, #20]
 8012822:	e001      	b.n	8012828 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012824:	2309      	movs	r3, #9
 8012826:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	68da      	ldr	r2, [r3, #12]
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	029b      	lsls	r3, r3, #10
 801283c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012840:	431a      	orrs	r2, r3
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012846:	2300      	movs	r3, #0
}
 8012848:	4618      	mov	r0, r3
 801284a:	371c      	adds	r7, #28
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr
 8012854:	00d8acbf 	.word	0x00d8acbf
 8012858:	00e4e1c0 	.word	0x00e4e1c0
 801285c:	00f42400 	.word	0x00f42400
 8012860:	01067380 	.word	0x01067380
 8012864:	011a499f 	.word	0x011a499f
 8012868:	01312cff 	.word	0x01312cff
 801286c:	014ca43f 	.word	0x014ca43f
 8012870:	016e3600 	.word	0x016e3600
 8012874:	01a6ab1f 	.word	0x01a6ab1f
 8012878:	01e84800 	.word	0x01e84800

0801287c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801287c:	b480      	push	{r7}
 801287e:	b083      	sub	sp, #12
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	689b      	ldr	r3, [r3, #8]
 8012888:	f043 0201 	orr.w	r2, r3, #1
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012890:	2300      	movs	r3, #0
}
 8012892:	4618      	mov	r0, r3
 8012894:	370c      	adds	r7, #12
 8012896:	46bd      	mov	sp, r7
 8012898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289c:	4770      	bx	lr

0801289e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801289e:	b480      	push	{r7}
 80128a0:	b083      	sub	sp, #12
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	689b      	ldr	r3, [r3, #8]
 80128aa:	f023 0201 	bic.w	r2, r3, #1
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80128b2:	2300      	movs	r3, #0
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	370c      	adds	r7, #12
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	460b      	mov	r3, r1
 80128ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80128cc:	2300      	movs	r3, #0
 80128ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80128dc:	78fb      	ldrb	r3, [r7, #3]
 80128de:	2b01      	cmp	r3, #1
 80128e0:	d115      	bne.n	801290e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80128ee:	2001      	movs	r0, #1
 80128f0:	f7f0 ff16 	bl	8003720 <HAL_Delay>
      ms++;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	3301      	adds	r3, #1
 80128f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f001 f93f 	bl	8013b7e <USB_GetMode>
 8012900:	4603      	mov	r3, r0
 8012902:	2b01      	cmp	r3, #1
 8012904:	d01e      	beq.n	8012944 <USB_SetCurrentMode+0x84>
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2b31      	cmp	r3, #49	; 0x31
 801290a:	d9f0      	bls.n	80128ee <USB_SetCurrentMode+0x2e>
 801290c:	e01a      	b.n	8012944 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801290e:	78fb      	ldrb	r3, [r7, #3]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d115      	bne.n	8012940 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012920:	2001      	movs	r0, #1
 8012922:	f7f0 fefd 	bl	8003720 <HAL_Delay>
      ms++;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	3301      	adds	r3, #1
 801292a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f001 f926 	bl	8013b7e <USB_GetMode>
 8012932:	4603      	mov	r3, r0
 8012934:	2b00      	cmp	r3, #0
 8012936:	d005      	beq.n	8012944 <USB_SetCurrentMode+0x84>
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2b31      	cmp	r3, #49	; 0x31
 801293c:	d9f0      	bls.n	8012920 <USB_SetCurrentMode+0x60>
 801293e:	e001      	b.n	8012944 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012940:	2301      	movs	r3, #1
 8012942:	e005      	b.n	8012950 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	2b32      	cmp	r3, #50	; 0x32
 8012948:	d101      	bne.n	801294e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801294a:	2301      	movs	r3, #1
 801294c:	e000      	b.n	8012950 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012958:	b084      	sub	sp, #16
 801295a:	b580      	push	{r7, lr}
 801295c:	b086      	sub	sp, #24
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
 8012962:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801296a:	2300      	movs	r3, #0
 801296c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012972:	2300      	movs	r3, #0
 8012974:	613b      	str	r3, [r7, #16]
 8012976:	e009      	b.n	801298c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	3340      	adds	r3, #64	; 0x40
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	4413      	add	r3, r2
 8012982:	2200      	movs	r2, #0
 8012984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	3301      	adds	r3, #1
 801298a:	613b      	str	r3, [r7, #16]
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	2b0e      	cmp	r3, #14
 8012990:	d9f2      	bls.n	8012978 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012994:	2b00      	cmp	r3, #0
 8012996:	d11c      	bne.n	80129d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	68fa      	ldr	r2, [r7, #12]
 80129a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80129a6:	f043 0302 	orr.w	r3, r3, #2
 80129aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	601a      	str	r2, [r3, #0]
 80129d0:	e005      	b.n	80129de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80129e4:	461a      	mov	r2, r3
 80129e6:	2300      	movs	r3, #0
 80129e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129f0:	4619      	mov	r1, r3
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129f8:	461a      	mov	r2, r3
 80129fa:	680b      	ldr	r3, [r1, #0]
 80129fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80129fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d10c      	bne.n	8012a1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d104      	bne.n	8012a14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f000 f965 	bl	8012cdc <USB_SetDevSpeed>
 8012a12:	e008      	b.n	8012a26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012a14:	2101      	movs	r1, #1
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f000 f960 	bl	8012cdc <USB_SetDevSpeed>
 8012a1c:	e003      	b.n	8012a26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012a1e:	2103      	movs	r1, #3
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 f95b 	bl	8012cdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012a26:	2110      	movs	r1, #16
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f000 f8f3 	bl	8012c14 <USB_FlushTxFifo>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012a34:	2301      	movs	r3, #1
 8012a36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f000 f91f 	bl	8012c7c <USB_FlushRxFifo>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d001      	beq.n	8012a48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012a44:	2301      	movs	r3, #1
 8012a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a4e:	461a      	mov	r2, r3
 8012a50:	2300      	movs	r3, #0
 8012a52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a66:	461a      	mov	r2, r3
 8012a68:	2300      	movs	r3, #0
 8012a6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	613b      	str	r3, [r7, #16]
 8012a70:	e043      	b.n	8012afa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	015a      	lsls	r2, r3, #5
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	4413      	add	r3, r2
 8012a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a88:	d118      	bne.n	8012abc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d10a      	bne.n	8012aa6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	015a      	lsls	r2, r3, #5
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	4413      	add	r3, r2
 8012a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012aa2:	6013      	str	r3, [r2, #0]
 8012aa4:	e013      	b.n	8012ace <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	015a      	lsls	r2, r3, #5
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	4413      	add	r3, r2
 8012aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012ab8:	6013      	str	r3, [r2, #0]
 8012aba:	e008      	b.n	8012ace <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	015a      	lsls	r2, r3, #5
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ac8:	461a      	mov	r2, r3
 8012aca:	2300      	movs	r3, #0
 8012acc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	015a      	lsls	r2, r3, #5
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ada:	461a      	mov	r2, r3
 8012adc:	2300      	movs	r3, #0
 8012ade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	015a      	lsls	r2, r3, #5
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aec:	461a      	mov	r2, r3
 8012aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012af2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	3301      	adds	r3, #1
 8012af8:	613b      	str	r3, [r7, #16]
 8012afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afc:	693a      	ldr	r2, [r7, #16]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d3b7      	bcc.n	8012a72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b02:	2300      	movs	r3, #0
 8012b04:	613b      	str	r3, [r7, #16]
 8012b06:	e043      	b.n	8012b90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	015a      	lsls	r2, r3, #5
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	4413      	add	r3, r2
 8012b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b1e:	d118      	bne.n	8012b52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d10a      	bne.n	8012b3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	015a      	lsls	r2, r3, #5
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b32:	461a      	mov	r2, r3
 8012b34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012b38:	6013      	str	r3, [r2, #0]
 8012b3a:	e013      	b.n	8012b64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	015a      	lsls	r2, r3, #5
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	4413      	add	r3, r2
 8012b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b48:	461a      	mov	r2, r3
 8012b4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012b4e:	6013      	str	r3, [r2, #0]
 8012b50:	e008      	b.n	8012b64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	015a      	lsls	r2, r3, #5
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	4413      	add	r3, r2
 8012b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b5e:	461a      	mov	r2, r3
 8012b60:	2300      	movs	r3, #0
 8012b62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	015a      	lsls	r2, r3, #5
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b70:	461a      	mov	r2, r3
 8012b72:	2300      	movs	r3, #0
 8012b74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	015a      	lsls	r2, r3, #5
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b82:	461a      	mov	r2, r3
 8012b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012b88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	613b      	str	r3, [r7, #16]
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	693a      	ldr	r2, [r7, #16]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d3b7      	bcc.n	8012b08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b9e:	691b      	ldr	r3, [r3, #16]
 8012ba0:	68fa      	ldr	r2, [r7, #12]
 8012ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012baa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012bb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d105      	bne.n	8012bcc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	699b      	ldr	r3, [r3, #24]
 8012bc4:	f043 0210 	orr.w	r2, r3, #16
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	699a      	ldr	r2, [r3, #24]
 8012bd0:	4b0e      	ldr	r3, [pc, #56]	; (8012c0c <USB_DevInit+0x2b4>)
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d005      	beq.n	8012bea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	699b      	ldr	r3, [r3, #24]
 8012be2:	f043 0208 	orr.w	r2, r3, #8
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d105      	bne.n	8012bfc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	699a      	ldr	r2, [r3, #24]
 8012bf4:	4b06      	ldr	r3, [pc, #24]	; (8012c10 <USB_DevInit+0x2b8>)
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3718      	adds	r7, #24
 8012c02:	46bd      	mov	sp, r7
 8012c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012c08:	b004      	add	sp, #16
 8012c0a:	4770      	bx	lr
 8012c0c:	803c3800 	.word	0x803c3800
 8012c10:	40000004 	.word	0x40000004

08012c14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012c14:	b480      	push	{r7}
 8012c16:	b085      	sub	sp, #20
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	3301      	adds	r3, #1
 8012c26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	4a13      	ldr	r2, [pc, #76]	; (8012c78 <USB_FlushTxFifo+0x64>)
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d901      	bls.n	8012c34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012c30:	2303      	movs	r3, #3
 8012c32:	e01b      	b.n	8012c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	691b      	ldr	r3, [r3, #16]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	daf2      	bge.n	8012c22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	019b      	lsls	r3, r3, #6
 8012c44:	f043 0220 	orr.w	r2, r3, #32
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	3301      	adds	r3, #1
 8012c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	4a08      	ldr	r2, [pc, #32]	; (8012c78 <USB_FlushTxFifo+0x64>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d901      	bls.n	8012c5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012c5a:	2303      	movs	r3, #3
 8012c5c:	e006      	b.n	8012c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	691b      	ldr	r3, [r3, #16]
 8012c62:	f003 0320 	and.w	r3, r3, #32
 8012c66:	2b20      	cmp	r3, #32
 8012c68:	d0f0      	beq.n	8012c4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012c6a:	2300      	movs	r3, #0
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3714      	adds	r7, #20
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr
 8012c78:	00030d40 	.word	0x00030d40

08012c7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b085      	sub	sp, #20
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012c84:	2300      	movs	r3, #0
 8012c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	4a11      	ldr	r2, [pc, #68]	; (8012cd8 <USB_FlushRxFifo+0x5c>)
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d901      	bls.n	8012c9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012c96:	2303      	movs	r3, #3
 8012c98:	e018      	b.n	8012ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	daf2      	bge.n	8012c88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2210      	movs	r2, #16
 8012caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	4a08      	ldr	r2, [pc, #32]	; (8012cd8 <USB_FlushRxFifo+0x5c>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d901      	bls.n	8012cbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012cba:	2303      	movs	r3, #3
 8012cbc:	e006      	b.n	8012ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	691b      	ldr	r3, [r3, #16]
 8012cc2:	f003 0310 	and.w	r3, r3, #16
 8012cc6:	2b10      	cmp	r3, #16
 8012cc8:	d0f0      	beq.n	8012cac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012cca:	2300      	movs	r3, #0
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3714      	adds	r7, #20
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr
 8012cd8:	00030d40 	.word	0x00030d40

08012cdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	460b      	mov	r3, r1
 8012ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	78fb      	ldrb	r3, [r7, #3]
 8012cf6:	68f9      	ldr	r1, [r7, #12]
 8012cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cfc:	4313      	orrs	r3, r2
 8012cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3714      	adds	r7, #20
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr

08012d0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012d0e:	b480      	push	{r7}
 8012d10:	b087      	sub	sp, #28
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d20:	689b      	ldr	r3, [r3, #8]
 8012d22:	f003 0306 	and.w	r3, r3, #6
 8012d26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d102      	bne.n	8012d34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	75fb      	strb	r3, [r7, #23]
 8012d32:	e00a      	b.n	8012d4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	d002      	beq.n	8012d40 <USB_GetDevSpeed+0x32>
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2b06      	cmp	r3, #6
 8012d3e:	d102      	bne.n	8012d46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012d40:	2302      	movs	r3, #2
 8012d42:	75fb      	strb	r3, [r7, #23]
 8012d44:	e001      	b.n	8012d4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012d46:	230f      	movs	r3, #15
 8012d48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	371c      	adds	r7, #28
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr

08012d58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	785b      	ldrb	r3, [r3, #1]
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d139      	bne.n	8012de8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d7a:	69da      	ldr	r2, [r3, #28]
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	f003 030f 	and.w	r3, r3, #15
 8012d84:	2101      	movs	r1, #1
 8012d86:	fa01 f303 	lsl.w	r3, r1, r3
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	68f9      	ldr	r1, [r7, #12]
 8012d8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d92:	4313      	orrs	r3, r2
 8012d94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	015a      	lsls	r2, r3, #5
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d153      	bne.n	8012e54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	015a      	lsls	r2, r3, #5
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	4413      	add	r3, r2
 8012db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012db8:	681a      	ldr	r2, [r3, #0]
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	689b      	ldr	r3, [r3, #8]
 8012dbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	791b      	ldrb	r3, [r3, #4]
 8012dc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012dc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	059b      	lsls	r3, r3, #22
 8012dce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012dd0:	431a      	orrs	r2, r3
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	0159      	lsls	r1, r3, #5
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	440b      	add	r3, r1
 8012dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dde:	4619      	mov	r1, r3
 8012de0:	4b20      	ldr	r3, [pc, #128]	; (8012e64 <USB_ActivateEndpoint+0x10c>)
 8012de2:	4313      	orrs	r3, r2
 8012de4:	600b      	str	r3, [r1, #0]
 8012de6:	e035      	b.n	8012e54 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dee:	69da      	ldr	r2, [r3, #28]
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	f003 030f 	and.w	r3, r3, #15
 8012df8:	2101      	movs	r1, #1
 8012dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8012dfe:	041b      	lsls	r3, r3, #16
 8012e00:	68f9      	ldr	r1, [r7, #12]
 8012e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e06:	4313      	orrs	r3, r2
 8012e08:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	015a      	lsls	r2, r3, #5
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	4413      	add	r3, r2
 8012e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d119      	bne.n	8012e54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	015a      	lsls	r2, r3, #5
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	4413      	add	r3, r2
 8012e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	689b      	ldr	r3, [r3, #8]
 8012e32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	791b      	ldrb	r3, [r3, #4]
 8012e3a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e3c:	430b      	orrs	r3, r1
 8012e3e:	431a      	orrs	r2, r3
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	0159      	lsls	r1, r3, #5
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	440b      	add	r3, r1
 8012e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	4b05      	ldr	r3, [pc, #20]	; (8012e64 <USB_ActivateEndpoint+0x10c>)
 8012e50:	4313      	orrs	r3, r2
 8012e52:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3714      	adds	r7, #20
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop
 8012e64:	10008000 	.word	0x10008000

08012e68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b085      	sub	sp, #20
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	785b      	ldrb	r3, [r3, #1]
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	d161      	bne.n	8012f48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	015a      	lsls	r2, r3, #5
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	4413      	add	r3, r2
 8012e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e9a:	d11f      	bne.n	8012edc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	015a      	lsls	r2, r3, #5
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	68ba      	ldr	r2, [r7, #8]
 8012eac:	0151      	lsls	r1, r2, #5
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	440a      	add	r2, r1
 8012eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012eba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	015a      	lsls	r2, r3, #5
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	68ba      	ldr	r2, [r7, #8]
 8012ecc:	0151      	lsls	r1, r2, #5
 8012ece:	68fa      	ldr	r2, [r7, #12]
 8012ed0:	440a      	add	r2, r1
 8012ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	f003 030f 	and.w	r3, r3, #15
 8012eec:	2101      	movs	r1, #1
 8012eee:	fa01 f303 	lsl.w	r3, r1, r3
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	43db      	mvns	r3, r3
 8012ef6:	68f9      	ldr	r1, [r7, #12]
 8012ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012efc:	4013      	ands	r3, r2
 8012efe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f06:	69da      	ldr	r2, [r3, #28]
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	f003 030f 	and.w	r3, r3, #15
 8012f10:	2101      	movs	r1, #1
 8012f12:	fa01 f303 	lsl.w	r3, r1, r3
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	43db      	mvns	r3, r3
 8012f1a:	68f9      	ldr	r1, [r7, #12]
 8012f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f20:	4013      	ands	r3, r2
 8012f22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	015a      	lsls	r2, r3, #5
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	0159      	lsls	r1, r3, #5
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	440b      	add	r3, r1
 8012f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f3e:	4619      	mov	r1, r3
 8012f40:	4b35      	ldr	r3, [pc, #212]	; (8013018 <USB_DeactivateEndpoint+0x1b0>)
 8012f42:	4013      	ands	r3, r2
 8012f44:	600b      	str	r3, [r1, #0]
 8012f46:	e060      	b.n	801300a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	015a      	lsls	r2, r3, #5
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	4413      	add	r3, r2
 8012f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f5e:	d11f      	bne.n	8012fa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	015a      	lsls	r2, r3, #5
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	4413      	add	r3, r2
 8012f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	68ba      	ldr	r2, [r7, #8]
 8012f70:	0151      	lsls	r1, r2, #5
 8012f72:	68fa      	ldr	r2, [r7, #12]
 8012f74:	440a      	add	r2, r1
 8012f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	015a      	lsls	r2, r3, #5
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	4413      	add	r3, r2
 8012f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	68ba      	ldr	r2, [r7, #8]
 8012f90:	0151      	lsls	r1, r2, #5
 8012f92:	68fa      	ldr	r2, [r7, #12]
 8012f94:	440a      	add	r2, r1
 8012f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	f003 030f 	and.w	r3, r3, #15
 8012fb0:	2101      	movs	r1, #1
 8012fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8012fb6:	041b      	lsls	r3, r3, #16
 8012fb8:	43db      	mvns	r3, r3
 8012fba:	68f9      	ldr	r1, [r7, #12]
 8012fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fc0:	4013      	ands	r3, r2
 8012fc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fca:	69da      	ldr	r2, [r3, #28]
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	f003 030f 	and.w	r3, r3, #15
 8012fd4:	2101      	movs	r1, #1
 8012fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8012fda:	041b      	lsls	r3, r3, #16
 8012fdc:	43db      	mvns	r3, r3
 8012fde:	68f9      	ldr	r1, [r7, #12]
 8012fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fe4:	4013      	ands	r3, r2
 8012fe6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	015a      	lsls	r2, r3, #5
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	4413      	add	r3, r2
 8012ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ff4:	681a      	ldr	r2, [r3, #0]
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	0159      	lsls	r1, r3, #5
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	440b      	add	r3, r1
 8012ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013002:	4619      	mov	r1, r3
 8013004:	4b05      	ldr	r3, [pc, #20]	; (801301c <USB_DeactivateEndpoint+0x1b4>)
 8013006:	4013      	ands	r3, r2
 8013008:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	3714      	adds	r7, #20
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	4770      	bx	lr
 8013018:	ec337800 	.word	0xec337800
 801301c:	eff37800 	.word	0xeff37800

08013020 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b08a      	sub	sp, #40	; 0x28
 8013024:	af02      	add	r7, sp, #8
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	60b9      	str	r1, [r7, #8]
 801302a:	4613      	mov	r3, r2
 801302c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	785b      	ldrb	r3, [r3, #1]
 801303c:	2b01      	cmp	r3, #1
 801303e:	f040 8181 	bne.w	8013344 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d132      	bne.n	80130b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	015a      	lsls	r2, r3, #5
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	4413      	add	r3, r2
 8013052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013056:	691a      	ldr	r2, [r3, #16]
 8013058:	69bb      	ldr	r3, [r7, #24]
 801305a:	0159      	lsls	r1, r3, #5
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	440b      	add	r3, r1
 8013060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013064:	4619      	mov	r1, r3
 8013066:	4ba5      	ldr	r3, [pc, #660]	; (80132fc <USB_EPStartXfer+0x2dc>)
 8013068:	4013      	ands	r3, r2
 801306a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	015a      	lsls	r2, r3, #5
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	4413      	add	r3, r2
 8013074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	69ba      	ldr	r2, [r7, #24]
 801307c:	0151      	lsls	r1, r2, #5
 801307e:	69fa      	ldr	r2, [r7, #28]
 8013080:	440a      	add	r2, r1
 8013082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801308a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	015a      	lsls	r2, r3, #5
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	4413      	add	r3, r2
 8013094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013098:	691a      	ldr	r2, [r3, #16]
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	0159      	lsls	r1, r3, #5
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	440b      	add	r3, r1
 80130a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130a6:	4619      	mov	r1, r3
 80130a8:	4b95      	ldr	r3, [pc, #596]	; (8013300 <USB_EPStartXfer+0x2e0>)
 80130aa:	4013      	ands	r3, r2
 80130ac:	610b      	str	r3, [r1, #16]
 80130ae:	e092      	b.n	80131d6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	015a      	lsls	r2, r3, #5
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	4413      	add	r3, r2
 80130b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130bc:	691a      	ldr	r2, [r3, #16]
 80130be:	69bb      	ldr	r3, [r7, #24]
 80130c0:	0159      	lsls	r1, r3, #5
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	440b      	add	r3, r1
 80130c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130ca:	4619      	mov	r1, r3
 80130cc:	4b8c      	ldr	r3, [pc, #560]	; (8013300 <USB_EPStartXfer+0x2e0>)
 80130ce:	4013      	ands	r3, r2
 80130d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80130d2:	69bb      	ldr	r3, [r7, #24]
 80130d4:	015a      	lsls	r2, r3, #5
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	4413      	add	r3, r2
 80130da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130de:	691a      	ldr	r2, [r3, #16]
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	0159      	lsls	r1, r3, #5
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	440b      	add	r3, r1
 80130e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130ec:	4619      	mov	r1, r3
 80130ee:	4b83      	ldr	r3, [pc, #524]	; (80132fc <USB_EPStartXfer+0x2dc>)
 80130f0:	4013      	ands	r3, r2
 80130f2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d11a      	bne.n	8013130 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	691a      	ldr	r2, [r3, #16]
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	429a      	cmp	r2, r3
 8013104:	d903      	bls.n	801310e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	689a      	ldr	r2, [r3, #8]
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801310e:	69bb      	ldr	r3, [r7, #24]
 8013110:	015a      	lsls	r2, r3, #5
 8013112:	69fb      	ldr	r3, [r7, #28]
 8013114:	4413      	add	r3, r2
 8013116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801311a:	691b      	ldr	r3, [r3, #16]
 801311c:	69ba      	ldr	r2, [r7, #24]
 801311e:	0151      	lsls	r1, r2, #5
 8013120:	69fa      	ldr	r2, [r7, #28]
 8013122:	440a      	add	r2, r1
 8013124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801312c:	6113      	str	r3, [r2, #16]
 801312e:	e01b      	b.n	8013168 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	015a      	lsls	r2, r3, #5
 8013134:	69fb      	ldr	r3, [r7, #28]
 8013136:	4413      	add	r3, r2
 8013138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801313c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	6919      	ldr	r1, [r3, #16]
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	440b      	add	r3, r1
 8013148:	1e59      	subs	r1, r3, #1
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	689b      	ldr	r3, [r3, #8]
 801314e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013152:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013154:	4b6b      	ldr	r3, [pc, #428]	; (8013304 <USB_EPStartXfer+0x2e4>)
 8013156:	400b      	ands	r3, r1
 8013158:	69b9      	ldr	r1, [r7, #24]
 801315a:	0148      	lsls	r0, r1, #5
 801315c:	69f9      	ldr	r1, [r7, #28]
 801315e:	4401      	add	r1, r0
 8013160:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013164:	4313      	orrs	r3, r2
 8013166:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	015a      	lsls	r2, r3, #5
 801316c:	69fb      	ldr	r3, [r7, #28]
 801316e:	4413      	add	r3, r2
 8013170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013174:	691a      	ldr	r2, [r3, #16]
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	691b      	ldr	r3, [r3, #16]
 801317a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801317e:	69b9      	ldr	r1, [r7, #24]
 8013180:	0148      	lsls	r0, r1, #5
 8013182:	69f9      	ldr	r1, [r7, #28]
 8013184:	4401      	add	r1, r0
 8013186:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801318a:	4313      	orrs	r3, r2
 801318c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	791b      	ldrb	r3, [r3, #4]
 8013192:	2b01      	cmp	r3, #1
 8013194:	d11f      	bne.n	80131d6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	015a      	lsls	r2, r3, #5
 801319a:	69fb      	ldr	r3, [r7, #28]
 801319c:	4413      	add	r3, r2
 801319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131a2:	691b      	ldr	r3, [r3, #16]
 80131a4:	69ba      	ldr	r2, [r7, #24]
 80131a6:	0151      	lsls	r1, r2, #5
 80131a8:	69fa      	ldr	r2, [r7, #28]
 80131aa:	440a      	add	r2, r1
 80131ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80131b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	015a      	lsls	r2, r3, #5
 80131ba:	69fb      	ldr	r3, [r7, #28]
 80131bc:	4413      	add	r3, r2
 80131be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	69ba      	ldr	r2, [r7, #24]
 80131c6:	0151      	lsls	r1, r2, #5
 80131c8:	69fa      	ldr	r2, [r7, #28]
 80131ca:	440a      	add	r2, r1
 80131cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80131d6:	79fb      	ldrb	r3, [r7, #7]
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d14b      	bne.n	8013274 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	69db      	ldr	r3, [r3, #28]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d009      	beq.n	80131f8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	015a      	lsls	r2, r3, #5
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	4413      	add	r3, r2
 80131ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f0:	461a      	mov	r2, r3
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	69db      	ldr	r3, [r3, #28]
 80131f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	791b      	ldrb	r3, [r3, #4]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d128      	bne.n	8013252 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013206:	689b      	ldr	r3, [r3, #8]
 8013208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801320c:	2b00      	cmp	r3, #0
 801320e:	d110      	bne.n	8013232 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	69fb      	ldr	r3, [r7, #28]
 8013216:	4413      	add	r3, r2
 8013218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	69ba      	ldr	r2, [r7, #24]
 8013220:	0151      	lsls	r1, r2, #5
 8013222:	69fa      	ldr	r2, [r7, #28]
 8013224:	440a      	add	r2, r1
 8013226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801322a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801322e:	6013      	str	r3, [r2, #0]
 8013230:	e00f      	b.n	8013252 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	015a      	lsls	r2, r3, #5
 8013236:	69fb      	ldr	r3, [r7, #28]
 8013238:	4413      	add	r3, r2
 801323a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	69ba      	ldr	r2, [r7, #24]
 8013242:	0151      	lsls	r1, r2, #5
 8013244:	69fa      	ldr	r2, [r7, #28]
 8013246:	440a      	add	r2, r1
 8013248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013250:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	015a      	lsls	r2, r3, #5
 8013256:	69fb      	ldr	r3, [r7, #28]
 8013258:	4413      	add	r3, r2
 801325a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	69ba      	ldr	r2, [r7, #24]
 8013262:	0151      	lsls	r1, r2, #5
 8013264:	69fa      	ldr	r2, [r7, #28]
 8013266:	440a      	add	r2, r1
 8013268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801326c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013270:	6013      	str	r3, [r2, #0]
 8013272:	e16a      	b.n	801354a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013274:	69bb      	ldr	r3, [r7, #24]
 8013276:	015a      	lsls	r2, r3, #5
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	4413      	add	r3, r2
 801327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	69ba      	ldr	r2, [r7, #24]
 8013284:	0151      	lsls	r1, r2, #5
 8013286:	69fa      	ldr	r2, [r7, #28]
 8013288:	440a      	add	r2, r1
 801328a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801328e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013292:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	791b      	ldrb	r3, [r3, #4]
 8013298:	2b01      	cmp	r3, #1
 801329a:	d015      	beq.n	80132c8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	691b      	ldr	r3, [r3, #16]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	f000 8152 	beq.w	801354a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	f003 030f 	and.w	r3, r3, #15
 80132b6:	2101      	movs	r1, #1
 80132b8:	fa01 f303 	lsl.w	r3, r1, r3
 80132bc:	69f9      	ldr	r1, [r7, #28]
 80132be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132c2:	4313      	orrs	r3, r2
 80132c4:	634b      	str	r3, [r1, #52]	; 0x34
 80132c6:	e140      	b.n	801354a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ce:	689b      	ldr	r3, [r3, #8]
 80132d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d117      	bne.n	8013308 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	015a      	lsls	r2, r3, #5
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	4413      	add	r3, r2
 80132e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	69ba      	ldr	r2, [r7, #24]
 80132e8:	0151      	lsls	r1, r2, #5
 80132ea:	69fa      	ldr	r2, [r7, #28]
 80132ec:	440a      	add	r2, r1
 80132ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80132f6:	6013      	str	r3, [r2, #0]
 80132f8:	e016      	b.n	8013328 <USB_EPStartXfer+0x308>
 80132fa:	bf00      	nop
 80132fc:	e007ffff 	.word	0xe007ffff
 8013300:	fff80000 	.word	0xfff80000
 8013304:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	015a      	lsls	r2, r3, #5
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	4413      	add	r3, r2
 8013310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	69ba      	ldr	r2, [r7, #24]
 8013318:	0151      	lsls	r1, r2, #5
 801331a:	69fa      	ldr	r2, [r7, #28]
 801331c:	440a      	add	r2, r1
 801331e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013326:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	68d9      	ldr	r1, [r3, #12]
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	781a      	ldrb	r2, [r3, #0]
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	691b      	ldr	r3, [r3, #16]
 8013334:	b298      	uxth	r0, r3
 8013336:	79fb      	ldrb	r3, [r7, #7]
 8013338:	9300      	str	r3, [sp, #0]
 801333a:	4603      	mov	r3, r0
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f000 f9b9 	bl	80136b4 <USB_WritePacket>
 8013342:	e102      	b.n	801354a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	015a      	lsls	r2, r3, #5
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	4413      	add	r3, r2
 801334c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013350:	691a      	ldr	r2, [r3, #16]
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	0159      	lsls	r1, r3, #5
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	440b      	add	r3, r1
 801335a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801335e:	4619      	mov	r1, r3
 8013360:	4b7c      	ldr	r3, [pc, #496]	; (8013554 <USB_EPStartXfer+0x534>)
 8013362:	4013      	ands	r3, r2
 8013364:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	015a      	lsls	r2, r3, #5
 801336a:	69fb      	ldr	r3, [r7, #28]
 801336c:	4413      	add	r3, r2
 801336e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013372:	691a      	ldr	r2, [r3, #16]
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	0159      	lsls	r1, r3, #5
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	440b      	add	r3, r1
 801337c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013380:	4619      	mov	r1, r3
 8013382:	4b75      	ldr	r3, [pc, #468]	; (8013558 <USB_EPStartXfer+0x538>)
 8013384:	4013      	ands	r3, r2
 8013386:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013388:	69bb      	ldr	r3, [r7, #24]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d12f      	bne.n	80133ee <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	691b      	ldr	r3, [r3, #16]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d003      	beq.n	801339e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	689a      	ldr	r2, [r3, #8]
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	689a      	ldr	r2, [r3, #8]
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	015a      	lsls	r2, r3, #5
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	4413      	add	r3, r2
 80133ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133b2:	691a      	ldr	r2, [r3, #16]
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	6a1b      	ldr	r3, [r3, #32]
 80133b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133bc:	69b9      	ldr	r1, [r7, #24]
 80133be:	0148      	lsls	r0, r1, #5
 80133c0:	69f9      	ldr	r1, [r7, #28]
 80133c2:	4401      	add	r1, r0
 80133c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80133c8:	4313      	orrs	r3, r2
 80133ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	015a      	lsls	r2, r3, #5
 80133d0:	69fb      	ldr	r3, [r7, #28]
 80133d2:	4413      	add	r3, r2
 80133d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d8:	691b      	ldr	r3, [r3, #16]
 80133da:	69ba      	ldr	r2, [r7, #24]
 80133dc:	0151      	lsls	r1, r2, #5
 80133de:	69fa      	ldr	r2, [r7, #28]
 80133e0:	440a      	add	r2, r1
 80133e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133ea:	6113      	str	r3, [r2, #16]
 80133ec:	e05f      	b.n	80134ae <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	691b      	ldr	r3, [r3, #16]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d123      	bne.n	801343e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	015a      	lsls	r2, r3, #5
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	4413      	add	r3, r2
 80133fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013402:	691a      	ldr	r2, [r3, #16]
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	689b      	ldr	r3, [r3, #8]
 8013408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801340c:	69b9      	ldr	r1, [r7, #24]
 801340e:	0148      	lsls	r0, r1, #5
 8013410:	69f9      	ldr	r1, [r7, #28]
 8013412:	4401      	add	r1, r0
 8013414:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013418:	4313      	orrs	r3, r2
 801341a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	015a      	lsls	r2, r3, #5
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	4413      	add	r3, r2
 8013424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	69ba      	ldr	r2, [r7, #24]
 801342c:	0151      	lsls	r1, r2, #5
 801342e:	69fa      	ldr	r2, [r7, #28]
 8013430:	440a      	add	r2, r1
 8013432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801343a:	6113      	str	r3, [r2, #16]
 801343c:	e037      	b.n	80134ae <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	691a      	ldr	r2, [r3, #16]
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	689b      	ldr	r3, [r3, #8]
 8013446:	4413      	add	r3, r2
 8013448:	1e5a      	subs	r2, r3, #1
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	689b      	ldr	r3, [r3, #8]
 801344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013452:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	689b      	ldr	r3, [r3, #8]
 8013458:	8afa      	ldrh	r2, [r7, #22]
 801345a:	fb03 f202 	mul.w	r2, r3, r2
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	015a      	lsls	r2, r3, #5
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	4413      	add	r3, r2
 801346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801346e:	691a      	ldr	r2, [r3, #16]
 8013470:	8afb      	ldrh	r3, [r7, #22]
 8013472:	04d9      	lsls	r1, r3, #19
 8013474:	4b39      	ldr	r3, [pc, #228]	; (801355c <USB_EPStartXfer+0x53c>)
 8013476:	400b      	ands	r3, r1
 8013478:	69b9      	ldr	r1, [r7, #24]
 801347a:	0148      	lsls	r0, r1, #5
 801347c:	69f9      	ldr	r1, [r7, #28]
 801347e:	4401      	add	r1, r0
 8013480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013484:	4313      	orrs	r3, r2
 8013486:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013488:	69bb      	ldr	r3, [r7, #24]
 801348a:	015a      	lsls	r2, r3, #5
 801348c:	69fb      	ldr	r3, [r7, #28]
 801348e:	4413      	add	r3, r2
 8013490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013494:	691a      	ldr	r2, [r3, #16]
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	6a1b      	ldr	r3, [r3, #32]
 801349a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801349e:	69b9      	ldr	r1, [r7, #24]
 80134a0:	0148      	lsls	r0, r1, #5
 80134a2:	69f9      	ldr	r1, [r7, #28]
 80134a4:	4401      	add	r1, r0
 80134a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80134aa:	4313      	orrs	r3, r2
 80134ac:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80134ae:	79fb      	ldrb	r3, [r7, #7]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d10d      	bne.n	80134d0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d009      	beq.n	80134d0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	68d9      	ldr	r1, [r3, #12]
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	015a      	lsls	r2, r3, #5
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	4413      	add	r3, r2
 80134c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134cc:	460a      	mov	r2, r1
 80134ce:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	791b      	ldrb	r3, [r3, #4]
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d128      	bne.n	801352a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80134d8:	69fb      	ldr	r3, [r7, #28]
 80134da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134de:	689b      	ldr	r3, [r3, #8]
 80134e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d110      	bne.n	801350a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	015a      	lsls	r2, r3, #5
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	4413      	add	r3, r2
 80134f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	69ba      	ldr	r2, [r7, #24]
 80134f8:	0151      	lsls	r1, r2, #5
 80134fa:	69fa      	ldr	r2, [r7, #28]
 80134fc:	440a      	add	r2, r1
 80134fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013506:	6013      	str	r3, [r2, #0]
 8013508:	e00f      	b.n	801352a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801350a:	69bb      	ldr	r3, [r7, #24]
 801350c:	015a      	lsls	r2, r3, #5
 801350e:	69fb      	ldr	r3, [r7, #28]
 8013510:	4413      	add	r3, r2
 8013512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	69ba      	ldr	r2, [r7, #24]
 801351a:	0151      	lsls	r1, r2, #5
 801351c:	69fa      	ldr	r2, [r7, #28]
 801351e:	440a      	add	r2, r1
 8013520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013528:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	015a      	lsls	r2, r3, #5
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	4413      	add	r3, r2
 8013532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	69ba      	ldr	r2, [r7, #24]
 801353a:	0151      	lsls	r1, r2, #5
 801353c:	69fa      	ldr	r2, [r7, #28]
 801353e:	440a      	add	r2, r1
 8013540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013544:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013548:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801354a:	2300      	movs	r3, #0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3720      	adds	r7, #32
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	fff80000 	.word	0xfff80000
 8013558:	e007ffff 	.word	0xe007ffff
 801355c:	1ff80000 	.word	0x1ff80000

08013560 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013560:	b480      	push	{r7}
 8013562:	b087      	sub	sp, #28
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801356a:	2300      	movs	r3, #0
 801356c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801356e:	2300      	movs	r3, #0
 8013570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	785b      	ldrb	r3, [r3, #1]
 801357a:	2b01      	cmp	r3, #1
 801357c:	d14a      	bne.n	8013614 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	015a      	lsls	r2, r3, #5
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	4413      	add	r3, r2
 8013588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013596:	f040 8086 	bne.w	80136a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	015a      	lsls	r2, r3, #5
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	683a      	ldr	r2, [r7, #0]
 80135ac:	7812      	ldrb	r2, [r2, #0]
 80135ae:	0151      	lsls	r1, r2, #5
 80135b0:	693a      	ldr	r2, [r7, #16]
 80135b2:	440a      	add	r2, r1
 80135b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80135bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	015a      	lsls	r2, r3, #5
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	4413      	add	r3, r2
 80135c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	7812      	ldrb	r2, [r2, #0]
 80135d2:	0151      	lsls	r1, r2, #5
 80135d4:	693a      	ldr	r2, [r7, #16]
 80135d6:	440a      	add	r2, r1
 80135d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80135e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	3301      	adds	r3, #1
 80135e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80135ee:	4293      	cmp	r3, r2
 80135f0:	d902      	bls.n	80135f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80135f2:	2301      	movs	r3, #1
 80135f4:	75fb      	strb	r3, [r7, #23]
          break;
 80135f6:	e056      	b.n	80136a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	015a      	lsls	r2, r3, #5
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	4413      	add	r3, r2
 8013602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801360c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013610:	d0e7      	beq.n	80135e2 <USB_EPStopXfer+0x82>
 8013612:	e048      	b.n	80136a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	015a      	lsls	r2, r3, #5
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	4413      	add	r3, r2
 801361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801362c:	d13b      	bne.n	80136a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	015a      	lsls	r2, r3, #5
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	4413      	add	r3, r2
 8013638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	683a      	ldr	r2, [r7, #0]
 8013640:	7812      	ldrb	r2, [r2, #0]
 8013642:	0151      	lsls	r1, r2, #5
 8013644:	693a      	ldr	r2, [r7, #16]
 8013646:	440a      	add	r2, r1
 8013648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801364c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013650:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	015a      	lsls	r2, r3, #5
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	4413      	add	r3, r2
 801365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	683a      	ldr	r2, [r7, #0]
 8013664:	7812      	ldrb	r2, [r2, #0]
 8013666:	0151      	lsls	r1, r2, #5
 8013668:	693a      	ldr	r2, [r7, #16]
 801366a:	440a      	add	r2, r1
 801366c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	3301      	adds	r3, #1
 801367a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013682:	4293      	cmp	r3, r2
 8013684:	d902      	bls.n	801368c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013686:	2301      	movs	r3, #1
 8013688:	75fb      	strb	r3, [r7, #23]
          break;
 801368a:	e00c      	b.n	80136a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	4413      	add	r3, r2
 8013696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136a4:	d0e7      	beq.n	8013676 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80136a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	371c      	adds	r7, #28
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr

080136b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b089      	sub	sp, #36	; 0x24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	4611      	mov	r1, r2
 80136c0:	461a      	mov	r2, r3
 80136c2:	460b      	mov	r3, r1
 80136c4:	71fb      	strb	r3, [r7, #7]
 80136c6:	4613      	mov	r3, r2
 80136c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80136d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d123      	bne.n	8013722 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80136da:	88bb      	ldrh	r3, [r7, #4]
 80136dc:	3303      	adds	r3, #3
 80136de:	089b      	lsrs	r3, r3, #2
 80136e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80136e2:	2300      	movs	r3, #0
 80136e4:	61bb      	str	r3, [r7, #24]
 80136e6:	e018      	b.n	801371a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80136e8:	79fb      	ldrb	r3, [r7, #7]
 80136ea:	031a      	lsls	r2, r3, #12
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	4413      	add	r3, r2
 80136f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80136f4:	461a      	mov	r2, r3
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	3301      	adds	r3, #1
 8013700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	3301      	adds	r3, #1
 8013706:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	3301      	adds	r3, #1
 801370c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801370e:	69fb      	ldr	r3, [r7, #28]
 8013710:	3301      	adds	r3, #1
 8013712:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013714:	69bb      	ldr	r3, [r7, #24]
 8013716:	3301      	adds	r3, #1
 8013718:	61bb      	str	r3, [r7, #24]
 801371a:	69ba      	ldr	r2, [r7, #24]
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	429a      	cmp	r2, r3
 8013720:	d3e2      	bcc.n	80136e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	3724      	adds	r7, #36	; 0x24
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr

08013730 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013730:	b480      	push	{r7}
 8013732:	b08b      	sub	sp, #44	; 0x2c
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	4613      	mov	r3, r2
 801373c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013746:	88fb      	ldrh	r3, [r7, #6]
 8013748:	089b      	lsrs	r3, r3, #2
 801374a:	b29b      	uxth	r3, r3
 801374c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801374e:	88fb      	ldrh	r3, [r7, #6]
 8013750:	f003 0303 	and.w	r3, r3, #3
 8013754:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013756:	2300      	movs	r3, #0
 8013758:	623b      	str	r3, [r7, #32]
 801375a:	e014      	b.n	8013786 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801375c:	69bb      	ldr	r3, [r7, #24]
 801375e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	601a      	str	r2, [r3, #0]
    pDest++;
 8013768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376a:	3301      	adds	r3, #1
 801376c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013770:	3301      	adds	r3, #1
 8013772:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013776:	3301      	adds	r3, #1
 8013778:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377c:	3301      	adds	r3, #1
 801377e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013780:	6a3b      	ldr	r3, [r7, #32]
 8013782:	3301      	adds	r3, #1
 8013784:	623b      	str	r3, [r7, #32]
 8013786:	6a3a      	ldr	r2, [r7, #32]
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	429a      	cmp	r2, r3
 801378c:	d3e6      	bcc.n	801375c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801378e:	8bfb      	ldrh	r3, [r7, #30]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d01e      	beq.n	80137d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013794:	2300      	movs	r3, #0
 8013796:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801379e:	461a      	mov	r2, r3
 80137a0:	f107 0310 	add.w	r3, r7, #16
 80137a4:	6812      	ldr	r2, [r2, #0]
 80137a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80137a8:	693a      	ldr	r2, [r7, #16]
 80137aa:	6a3b      	ldr	r3, [r7, #32]
 80137ac:	b2db      	uxtb	r3, r3
 80137ae:	00db      	lsls	r3, r3, #3
 80137b0:	fa22 f303 	lsr.w	r3, r2, r3
 80137b4:	b2da      	uxtb	r2, r3
 80137b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b8:	701a      	strb	r2, [r3, #0]
      i++;
 80137ba:	6a3b      	ldr	r3, [r7, #32]
 80137bc:	3301      	adds	r3, #1
 80137be:	623b      	str	r3, [r7, #32]
      pDest++;
 80137c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c2:	3301      	adds	r3, #1
 80137c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80137c6:	8bfb      	ldrh	r3, [r7, #30]
 80137c8:	3b01      	subs	r3, #1
 80137ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80137cc:	8bfb      	ldrh	r3, [r7, #30]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d1ea      	bne.n	80137a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80137d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	372c      	adds	r7, #44	; 0x2c
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b085      	sub	sp, #20
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	785b      	ldrb	r3, [r3, #1]
 80137f8:	2b01      	cmp	r3, #1
 80137fa:	d12c      	bne.n	8013856 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	015a      	lsls	r2, r3, #5
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	4413      	add	r3, r2
 8013804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	db12      	blt.n	8013834 <USB_EPSetStall+0x54>
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00f      	beq.n	8013834 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	015a      	lsls	r2, r3, #5
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	4413      	add	r3, r2
 801381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	68ba      	ldr	r2, [r7, #8]
 8013824:	0151      	lsls	r1, r2, #5
 8013826:	68fa      	ldr	r2, [r7, #12]
 8013828:	440a      	add	r2, r1
 801382a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801382e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013832:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	015a      	lsls	r2, r3, #5
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	4413      	add	r3, r2
 801383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	68ba      	ldr	r2, [r7, #8]
 8013844:	0151      	lsls	r1, r2, #5
 8013846:	68fa      	ldr	r2, [r7, #12]
 8013848:	440a      	add	r2, r1
 801384a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801384e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013852:	6013      	str	r3, [r2, #0]
 8013854:	e02b      	b.n	80138ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	015a      	lsls	r2, r3, #5
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	4413      	add	r3, r2
 801385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	db12      	blt.n	801388e <USB_EPSetStall+0xae>
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d00f      	beq.n	801388e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	015a      	lsls	r2, r3, #5
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	4413      	add	r3, r2
 8013876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	68ba      	ldr	r2, [r7, #8]
 801387e:	0151      	lsls	r1, r2, #5
 8013880:	68fa      	ldr	r2, [r7, #12]
 8013882:	440a      	add	r2, r1
 8013884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801388c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	015a      	lsls	r2, r3, #5
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	4413      	add	r3, r2
 8013896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	68ba      	ldr	r2, [r7, #8]
 801389e:	0151      	lsls	r1, r2, #5
 80138a0:	68fa      	ldr	r2, [r7, #12]
 80138a2:	440a      	add	r2, r1
 80138a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80138ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80138ae:	2300      	movs	r3, #0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3714      	adds	r7, #20
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr

080138bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138bc:	b480      	push	{r7}
 80138be:	b085      	sub	sp, #20
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	785b      	ldrb	r3, [r3, #1]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d128      	bne.n	801392a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	015a      	lsls	r2, r3, #5
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	4413      	add	r3, r2
 80138e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	0151      	lsls	r1, r2, #5
 80138ea:	68fa      	ldr	r2, [r7, #12]
 80138ec:	440a      	add	r2, r1
 80138ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80138f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	791b      	ldrb	r3, [r3, #4]
 80138fc:	2b03      	cmp	r3, #3
 80138fe:	d003      	beq.n	8013908 <USB_EPClearStall+0x4c>
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	791b      	ldrb	r3, [r3, #4]
 8013904:	2b02      	cmp	r3, #2
 8013906:	d138      	bne.n	801397a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	015a      	lsls	r2, r3, #5
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	4413      	add	r3, r2
 8013910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	68ba      	ldr	r2, [r7, #8]
 8013918:	0151      	lsls	r1, r2, #5
 801391a:	68fa      	ldr	r2, [r7, #12]
 801391c:	440a      	add	r2, r1
 801391e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013926:	6013      	str	r3, [r2, #0]
 8013928:	e027      	b.n	801397a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	015a      	lsls	r2, r3, #5
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	4413      	add	r3, r2
 8013932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	68ba      	ldr	r2, [r7, #8]
 801393a:	0151      	lsls	r1, r2, #5
 801393c:	68fa      	ldr	r2, [r7, #12]
 801393e:	440a      	add	r2, r1
 8013940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013944:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013948:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	791b      	ldrb	r3, [r3, #4]
 801394e:	2b03      	cmp	r3, #3
 8013950:	d003      	beq.n	801395a <USB_EPClearStall+0x9e>
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	791b      	ldrb	r3, [r3, #4]
 8013956:	2b02      	cmp	r3, #2
 8013958:	d10f      	bne.n	801397a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	015a      	lsls	r2, r3, #5
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	4413      	add	r3, r2
 8013962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	68ba      	ldr	r2, [r7, #8]
 801396a:	0151      	lsls	r1, r2, #5
 801396c:	68fa      	ldr	r2, [r7, #12]
 801396e:	440a      	add	r2, r1
 8013970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013978:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	3714      	adds	r7, #20
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr

08013988 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013988:	b480      	push	{r7}
 801398a:	b085      	sub	sp, #20
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	460b      	mov	r3, r1
 8013992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80139a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80139aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	78fb      	ldrb	r3, [r7, #3]
 80139b6:	011b      	lsls	r3, r3, #4
 80139b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80139bc:	68f9      	ldr	r1, [r7, #12]
 80139be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139c2:	4313      	orrs	r3, r2
 80139c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80139c6:	2300      	movs	r3, #0
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3714      	adds	r7, #20
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr

080139d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b085      	sub	sp, #20
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80139ee:	f023 0303 	bic.w	r3, r3, #3
 80139f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	68fa      	ldr	r2, [r7, #12]
 80139fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a02:	f023 0302 	bic.w	r3, r3, #2
 8013a06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3714      	adds	r7, #20
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr

08013a16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013a16:	b480      	push	{r7}
 8013a18:	b085      	sub	sp, #20
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	68fa      	ldr	r2, [r7, #12]
 8013a2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a30:	f023 0303 	bic.w	r3, r3, #3
 8013a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	68fa      	ldr	r2, [r7, #12]
 8013a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a44:	f043 0302 	orr.w	r3, r3, #2
 8013a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a4a:	2300      	movs	r3, #0
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3714      	adds	r7, #20
 8013a50:	46bd      	mov	sp, r7
 8013a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a56:	4770      	bx	lr

08013a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013a58:	b480      	push	{r7}
 8013a5a:	b085      	sub	sp, #20
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	695b      	ldr	r3, [r3, #20]
 8013a64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	699b      	ldr	r3, [r3, #24]
 8013a6a:	68fa      	ldr	r2, [r7, #12]
 8013a6c:	4013      	ands	r3, r2
 8013a6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013a70:	68fb      	ldr	r3, [r7, #12]
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3714      	adds	r7, #20
 8013a76:	46bd      	mov	sp, r7
 8013a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7c:	4770      	bx	lr

08013a7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013a7e:	b480      	push	{r7}
 8013a80:	b085      	sub	sp, #20
 8013a82:	af00      	add	r7, sp, #0
 8013a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a90:	699b      	ldr	r3, [r3, #24]
 8013a92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a9a:	69db      	ldr	r3, [r3, #28]
 8013a9c:	68ba      	ldr	r2, [r7, #8]
 8013a9e:	4013      	ands	r3, r2
 8013aa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	0c1b      	lsrs	r3, r3, #16
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3714      	adds	r7, #20
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr

08013ab2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ab2:	b480      	push	{r7}
 8013ab4:	b085      	sub	sp, #20
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ac4:	699b      	ldr	r3, [r3, #24]
 8013ac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ace:	69db      	ldr	r3, [r3, #28]
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	4013      	ands	r3, r2
 8013ad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	b29b      	uxth	r3, r3
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3714      	adds	r7, #20
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr

08013ae6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b085      	sub	sp, #20
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
 8013aee:	460b      	mov	r3, r1
 8013af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013af6:	78fb      	ldrb	r3, [r7, #3]
 8013af8:	015a      	lsls	r2, r3, #5
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	4413      	add	r3, r2
 8013afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b0c:	695b      	ldr	r3, [r3, #20]
 8013b0e:	68ba      	ldr	r2, [r7, #8]
 8013b10:	4013      	ands	r3, r2
 8013b12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013b14:	68bb      	ldr	r3, [r7, #8]
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3714      	adds	r7, #20
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr

08013b22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013b22:	b480      	push	{r7}
 8013b24:	b087      	sub	sp, #28
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]
 8013b2a:	460b      	mov	r3, r1
 8013b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b38:	691b      	ldr	r3, [r3, #16]
 8013b3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013b46:	78fb      	ldrb	r3, [r7, #3]
 8013b48:	f003 030f 	and.w	r3, r3, #15
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8013b52:	01db      	lsls	r3, r3, #7
 8013b54:	b2db      	uxtb	r3, r3
 8013b56:	693a      	ldr	r2, [r7, #16]
 8013b58:	4313      	orrs	r3, r2
 8013b5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013b5c:	78fb      	ldrb	r3, [r7, #3]
 8013b5e:	015a      	lsls	r2, r3, #5
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	4413      	add	r3, r2
 8013b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b68:	689b      	ldr	r3, [r3, #8]
 8013b6a:	693a      	ldr	r2, [r7, #16]
 8013b6c:	4013      	ands	r3, r2
 8013b6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013b70:	68bb      	ldr	r3, [r7, #8]
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	371c      	adds	r7, #28
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr

08013b7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013b7e:	b480      	push	{r7}
 8013b80:	b083      	sub	sp, #12
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	695b      	ldr	r3, [r3, #20]
 8013b8a:	f003 0301 	and.w	r3, r3, #1
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	370c      	adds	r7, #12
 8013b92:	46bd      	mov	sp, r7
 8013b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b98:	4770      	bx	lr
	...

08013b9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b085      	sub	sp, #20
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	4b09      	ldr	r3, [pc, #36]	; (8013be0 <USB_ActivateSetup+0x44>)
 8013bba:	4013      	ands	r3, r2
 8013bbc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	68fa      	ldr	r2, [r7, #12]
 8013bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013bd2:	2300      	movs	r3, #0
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3714      	adds	r7, #20
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr
 8013be0:	fffff800 	.word	0xfffff800

08013be4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013be4:	b480      	push	{r7}
 8013be6:	b087      	sub	sp, #28
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	460b      	mov	r3, r1
 8013bee:	607a      	str	r2, [r7, #4]
 8013bf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	333c      	adds	r3, #60	; 0x3c
 8013bfa:	3304      	adds	r3, #4
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	4a26      	ldr	r2, [pc, #152]	; (8013c9c <USB_EP0_OutStart+0xb8>)
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d90a      	bls.n	8013c1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c18:	d101      	bne.n	8013c1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	e037      	b.n	8013c8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c24:	461a      	mov	r2, r3
 8013c26:	2300      	movs	r3, #0
 8013c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c30:	691b      	ldr	r3, [r3, #16]
 8013c32:	697a      	ldr	r2, [r7, #20]
 8013c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c44:	691b      	ldr	r3, [r3, #16]
 8013c46:	697a      	ldr	r2, [r7, #20]
 8013c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c4c:	f043 0318 	orr.w	r3, r3, #24
 8013c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c58:	691b      	ldr	r3, [r3, #16]
 8013c5a:	697a      	ldr	r2, [r7, #20]
 8013c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013c64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013c66:	7afb      	ldrb	r3, [r7, #11]
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	d10f      	bne.n	8013c8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c72:	461a      	mov	r2, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	697a      	ldr	r2, [r7, #20]
 8013c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013c8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c8c:	2300      	movs	r3, #0
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	371c      	adds	r7, #28
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr
 8013c9a:	bf00      	nop
 8013c9c:	4f54300a 	.word	0x4f54300a

08013ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	3301      	adds	r3, #1
 8013cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	4a13      	ldr	r2, [pc, #76]	; (8013d04 <USB_CoreReset+0x64>)
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d901      	bls.n	8013cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013cba:	2303      	movs	r3, #3
 8013cbc:	e01b      	b.n	8013cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	691b      	ldr	r3, [r3, #16]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	daf2      	bge.n	8013cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	691b      	ldr	r3, [r3, #16]
 8013cce:	f043 0201 	orr.w	r2, r3, #1
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	4a09      	ldr	r2, [pc, #36]	; (8013d04 <USB_CoreReset+0x64>)
 8013ce0:	4293      	cmp	r3, r2
 8013ce2:	d901      	bls.n	8013ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013ce4:	2303      	movs	r3, #3
 8013ce6:	e006      	b.n	8013cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	691b      	ldr	r3, [r3, #16]
 8013cec:	f003 0301 	and.w	r3, r3, #1
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d0f0      	beq.n	8013cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8013cf4:	2300      	movs	r3, #0
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3714      	adds	r7, #20
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	00030d40 	.word	0x00030d40

08013d08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013d0c:	4904      	ldr	r1, [pc, #16]	; (8013d20 <MX_FATFS_Init+0x18>)
 8013d0e:	4805      	ldr	r0, [pc, #20]	; (8013d24 <MX_FATFS_Init+0x1c>)
 8013d10:	f002 fa16 	bl	8016140 <FATFS_LinkDriver>
 8013d14:	4603      	mov	r3, r0
 8013d16:	461a      	mov	r2, r3
 8013d18:	4b03      	ldr	r3, [pc, #12]	; (8013d28 <MX_FATFS_Init+0x20>)
 8013d1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013d1c:	bf00      	nop
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	2400149c 	.word	0x2400149c
 8013d24:	08018018 	.word	0x08018018
 8013d28:	24001498 	.word	0x24001498

08013d2c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013d32:	2300      	movs	r3, #0
 8013d34:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013d36:	f000 f885 	bl	8013e44 <BSP_SD_IsDetected>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	d001      	beq.n	8013d44 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013d40:	2302      	movs	r3, #2
 8013d42:	e012      	b.n	8013d6a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013d44:	480b      	ldr	r0, [pc, #44]	; (8013d74 <BSP_SD_Init+0x48>)
 8013d46:	f7f8 ff99 	bl	800cc7c <HAL_SD_Init>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013d4e:	79fb      	ldrb	r3, [r7, #7]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d109      	bne.n	8013d68 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013d58:	4806      	ldr	r0, [pc, #24]	; (8013d74 <BSP_SD_Init+0x48>)
 8013d5a:	f7f9 fe4f 	bl	800d9fc <HAL_SD_ConfigWideBusOperation>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d001      	beq.n	8013d68 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013d64:	2301      	movs	r3, #1
 8013d66:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013d68:	79fb      	ldrb	r3, [r7, #7]
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3708      	adds	r7, #8
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	24000dcc 	.word	0x24000dcc

08013d78 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b086      	sub	sp, #24
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013d84:	2300      	movs	r3, #0
 8013d86:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	68ba      	ldr	r2, [r7, #8]
 8013d8c:	68f9      	ldr	r1, [r7, #12]
 8013d8e:	4806      	ldr	r0, [pc, #24]	; (8013da8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013d90:	f7f9 f894 	bl	800cebc <HAL_SD_ReadBlocks_DMA>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d001      	beq.n	8013d9e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3718      	adds	r7, #24
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	24000dcc 	.word	0x24000dcc

08013dac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b086      	sub	sp, #24
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013db8:	2300      	movs	r3, #0
 8013dba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	68f9      	ldr	r1, [r7, #12]
 8013dc2:	4806      	ldr	r0, [pc, #24]	; (8013ddc <BSP_SD_WriteBlocks_DMA+0x30>)
 8013dc4:	f7f9 f922 	bl	800d00c <HAL_SD_WriteBlocks_DMA>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d001      	beq.n	8013dd2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3718      	adds	r7, #24
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	24000dcc 	.word	0x24000dcc

08013de0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013de4:	4805      	ldr	r0, [pc, #20]	; (8013dfc <BSP_SD_GetCardState+0x1c>)
 8013de6:	f7f9 ff1b 	bl	800dc20 <HAL_SD_GetCardState>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b04      	cmp	r3, #4
 8013dee:	bf14      	ite	ne
 8013df0:	2301      	movne	r3, #1
 8013df2:	2300      	moveq	r3, #0
 8013df4:	b2db      	uxtb	r3, r3
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	bd80      	pop	{r7, pc}
 8013dfa:	bf00      	nop
 8013dfc:	24000dcc 	.word	0x24000dcc

08013e00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013e08:	6879      	ldr	r1, [r7, #4]
 8013e0a:	4803      	ldr	r0, [pc, #12]	; (8013e18 <BSP_SD_GetCardInfo+0x18>)
 8013e0c:	f7f9 fdca 	bl	800d9a4 <HAL_SD_GetCardInfo>
}
 8013e10:	bf00      	nop
 8013e12:	3708      	adds	r7, #8
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	24000dcc 	.word	0x24000dcc

08013e1c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013e24:	f000 f9a0 	bl	8014168 <BSP_SD_WriteCpltCallback>
}
 8013e28:	bf00      	nop
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013e38:	f000 f9a2 	bl	8014180 <BSP_SD_ReadCpltCallback>
}
 8013e3c:	bf00      	nop
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013e4e:	f000 f80b 	bl	8013e68 <BSP_PlatformIsDetected>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d101      	bne.n	8013e5c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013e5c:	79fb      	ldrb	r3, [r7, #7]
 8013e5e:	b2db      	uxtb	r3, r3
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3708      	adds	r7, #8
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013e6e:	2301      	movs	r3, #1
 8013e70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013e72:	2104      	movs	r1, #4
 8013e74:	4806      	ldr	r0, [pc, #24]	; (8013e90 <BSP_PlatformIsDetected+0x28>)
 8013e76:	f7f3 feef 	bl	8007c58 <HAL_GPIO_ReadPin>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d001      	beq.n	8013e84 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013e80:	2300      	movs	r3, #0
 8013e82:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013e84:	79fb      	ldrb	r3, [r7, #7]
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	58020400 	.word	0x58020400

08013e94 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013e9c:	f7ef fc34 	bl	8003708 <HAL_GetTick>
 8013ea0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013ea2:	e006      	b.n	8013eb2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013ea4:	f7ff ff9c 	bl	8013de0 <BSP_SD_GetCardState>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d101      	bne.n	8013eb2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	e009      	b.n	8013ec6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013eb2:	f7ef fc29 	bl	8003708 <HAL_GetTick>
 8013eb6:	4602      	mov	r2, r0
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	1ad3      	subs	r3, r2, r3
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d8f0      	bhi.n	8013ea4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3710      	adds	r7, #16
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
	...

08013ed0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b082      	sub	sp, #8
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013eda:	4b0b      	ldr	r3, [pc, #44]	; (8013f08 <SD_CheckStatus+0x38>)
 8013edc:	2201      	movs	r2, #1
 8013ede:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013ee0:	f7ff ff7e 	bl	8013de0 <BSP_SD_GetCardState>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d107      	bne.n	8013efa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013eea:	4b07      	ldr	r3, [pc, #28]	; (8013f08 <SD_CheckStatus+0x38>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	f023 0301 	bic.w	r3, r3, #1
 8013ef4:	b2da      	uxtb	r2, r3
 8013ef6:	4b04      	ldr	r3, [pc, #16]	; (8013f08 <SD_CheckStatus+0x38>)
 8013ef8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013efa:	4b03      	ldr	r3, [pc, #12]	; (8013f08 <SD_CheckStatus+0x38>)
 8013efc:	781b      	ldrb	r3, [r3, #0]
 8013efe:	b2db      	uxtb	r3, r3
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	2400000d 	.word	0x2400000d

08013f0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	4603      	mov	r3, r0
 8013f14:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013f16:	f7ff ff09 	bl	8013d2c <BSP_SD_Init>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d107      	bne.n	8013f30 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013f20:	79fb      	ldrb	r3, [r7, #7]
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7ff ffd4 	bl	8013ed0 <SD_CheckStatus>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	4b04      	ldr	r3, [pc, #16]	; (8013f40 <SD_initialize+0x34>)
 8013f2e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013f30:	4b03      	ldr	r3, [pc, #12]	; (8013f40 <SD_initialize+0x34>)
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	b2db      	uxtb	r3, r3
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3708      	adds	r7, #8
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	2400000d 	.word	0x2400000d

08013f44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013f4e:	79fb      	ldrb	r3, [r7, #7]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7ff ffbd 	bl	8013ed0 <SD_CheckStatus>
 8013f56:	4603      	mov	r3, r0
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3708      	adds	r7, #8
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b086      	sub	sp, #24
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	60b9      	str	r1, [r7, #8]
 8013f68:	607a      	str	r2, [r7, #4]
 8013f6a:	603b      	str	r3, [r7, #0]
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013f70:	2301      	movs	r3, #1
 8013f72:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013f74:	f247 5030 	movw	r0, #30000	; 0x7530
 8013f78:	f7ff ff8c 	bl	8013e94 <SD_CheckStatusWithTimeout>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	da01      	bge.n	8013f86 <SD_read+0x26>
  {
    return res;
 8013f82:	7dfb      	ldrb	r3, [r7, #23]
 8013f84:	e03b      	b.n	8013ffe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	6879      	ldr	r1, [r7, #4]
 8013f8a:	68b8      	ldr	r0, [r7, #8]
 8013f8c:	f7ff fef4 	bl	8013d78 <BSP_SD_ReadBlocks_DMA>
 8013f90:	4603      	mov	r3, r0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d132      	bne.n	8013ffc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013f96:	4b1c      	ldr	r3, [pc, #112]	; (8014008 <SD_read+0xa8>)
 8013f98:	2200      	movs	r2, #0
 8013f9a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013f9c:	f7ef fbb4 	bl	8003708 <HAL_GetTick>
 8013fa0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013fa2:	bf00      	nop
 8013fa4:	4b18      	ldr	r3, [pc, #96]	; (8014008 <SD_read+0xa8>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d108      	bne.n	8013fbe <SD_read+0x5e>
 8013fac:	f7ef fbac 	bl	8003708 <HAL_GetTick>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	1ad3      	subs	r3, r2, r3
 8013fb6:	f247 522f 	movw	r2, #29999	; 0x752f
 8013fba:	4293      	cmp	r3, r2
 8013fbc:	d9f2      	bls.n	8013fa4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013fbe:	4b12      	ldr	r3, [pc, #72]	; (8014008 <SD_read+0xa8>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d102      	bne.n	8013fcc <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	75fb      	strb	r3, [r7, #23]
 8013fca:	e017      	b.n	8013ffc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013fcc:	4b0e      	ldr	r3, [pc, #56]	; (8014008 <SD_read+0xa8>)
 8013fce:	2200      	movs	r2, #0
 8013fd0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013fd2:	f7ef fb99 	bl	8003708 <HAL_GetTick>
 8013fd6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013fd8:	e007      	b.n	8013fea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013fda:	f7ff ff01 	bl	8013de0 <BSP_SD_GetCardState>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d102      	bne.n	8013fea <SD_read+0x8a>
          {
            res = RES_OK;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013fe8:	e008      	b.n	8013ffc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013fea:	f7ef fb8d 	bl	8003708 <HAL_GetTick>
 8013fee:	4602      	mov	r2, r0
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	f247 522f 	movw	r2, #29999	; 0x752f
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	d9ee      	bls.n	8013fda <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3718      	adds	r7, #24
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	240014a4 	.word	0x240014a4

0801400c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b086      	sub	sp, #24
 8014010:	af00      	add	r7, sp, #0
 8014012:	60b9      	str	r1, [r7, #8]
 8014014:	607a      	str	r2, [r7, #4]
 8014016:	603b      	str	r3, [r7, #0]
 8014018:	4603      	mov	r3, r0
 801401a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801401c:	2301      	movs	r3, #1
 801401e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014020:	4b24      	ldr	r3, [pc, #144]	; (80140b4 <SD_write+0xa8>)
 8014022:	2200      	movs	r2, #0
 8014024:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014026:	f247 5030 	movw	r0, #30000	; 0x7530
 801402a:	f7ff ff33 	bl	8013e94 <SD_CheckStatusWithTimeout>
 801402e:	4603      	mov	r3, r0
 8014030:	2b00      	cmp	r3, #0
 8014032:	da01      	bge.n	8014038 <SD_write+0x2c>
  {
    return res;
 8014034:	7dfb      	ldrb	r3, [r7, #23]
 8014036:	e038      	b.n	80140aa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014038:	683a      	ldr	r2, [r7, #0]
 801403a:	6879      	ldr	r1, [r7, #4]
 801403c:	68b8      	ldr	r0, [r7, #8]
 801403e:	f7ff feb5 	bl	8013dac <BSP_SD_WriteBlocks_DMA>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d12f      	bne.n	80140a8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014048:	f7ef fb5e 	bl	8003708 <HAL_GetTick>
 801404c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801404e:	bf00      	nop
 8014050:	4b18      	ldr	r3, [pc, #96]	; (80140b4 <SD_write+0xa8>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d108      	bne.n	801406a <SD_write+0x5e>
 8014058:	f7ef fb56 	bl	8003708 <HAL_GetTick>
 801405c:	4602      	mov	r2, r0
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	1ad3      	subs	r3, r2, r3
 8014062:	f247 522f 	movw	r2, #29999	; 0x752f
 8014066:	4293      	cmp	r3, r2
 8014068:	d9f2      	bls.n	8014050 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801406a:	4b12      	ldr	r3, [pc, #72]	; (80140b4 <SD_write+0xa8>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d102      	bne.n	8014078 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014072:	2301      	movs	r3, #1
 8014074:	75fb      	strb	r3, [r7, #23]
 8014076:	e017      	b.n	80140a8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014078:	4b0e      	ldr	r3, [pc, #56]	; (80140b4 <SD_write+0xa8>)
 801407a:	2200      	movs	r2, #0
 801407c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801407e:	f7ef fb43 	bl	8003708 <HAL_GetTick>
 8014082:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014084:	e007      	b.n	8014096 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014086:	f7ff feab 	bl	8013de0 <BSP_SD_GetCardState>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d102      	bne.n	8014096 <SD_write+0x8a>
          {
            res = RES_OK;
 8014090:	2300      	movs	r3, #0
 8014092:	75fb      	strb	r3, [r7, #23]
            break;
 8014094:	e008      	b.n	80140a8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014096:	f7ef fb37 	bl	8003708 <HAL_GetTick>
 801409a:	4602      	mov	r2, r0
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d9ee      	bls.n	8014086 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80140a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3718      	adds	r7, #24
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
 80140b2:	bf00      	nop
 80140b4:	240014a0 	.word	0x240014a0

080140b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b08c      	sub	sp, #48	; 0x30
 80140bc:	af00      	add	r7, sp, #0
 80140be:	4603      	mov	r3, r0
 80140c0:	603a      	str	r2, [r7, #0]
 80140c2:	71fb      	strb	r3, [r7, #7]
 80140c4:	460b      	mov	r3, r1
 80140c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80140c8:	2301      	movs	r3, #1
 80140ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80140ce:	4b25      	ldr	r3, [pc, #148]	; (8014164 <SD_ioctl+0xac>)
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	f003 0301 	and.w	r3, r3, #1
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <SD_ioctl+0x28>
 80140dc:	2303      	movs	r3, #3
 80140de:	e03c      	b.n	801415a <SD_ioctl+0xa2>

  switch (cmd)
 80140e0:	79bb      	ldrb	r3, [r7, #6]
 80140e2:	2b03      	cmp	r3, #3
 80140e4:	d834      	bhi.n	8014150 <SD_ioctl+0x98>
 80140e6:	a201      	add	r2, pc, #4	; (adr r2, 80140ec <SD_ioctl+0x34>)
 80140e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ec:	080140fd 	.word	0x080140fd
 80140f0:	08014105 	.word	0x08014105
 80140f4:	0801411d 	.word	0x0801411d
 80140f8:	08014137 	.word	0x08014137
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80140fc:	2300      	movs	r3, #0
 80140fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014102:	e028      	b.n	8014156 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014104:	f107 0308 	add.w	r3, r7, #8
 8014108:	4618      	mov	r0, r3
 801410a:	f7ff fe79 	bl	8013e00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801410e:	6a3a      	ldr	r2, [r7, #32]
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014114:	2300      	movs	r3, #0
 8014116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801411a:	e01c      	b.n	8014156 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801411c:	f107 0308 	add.w	r3, r7, #8
 8014120:	4618      	mov	r0, r3
 8014122:	f7ff fe6d 	bl	8013e00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	b29a      	uxth	r2, r3
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801412e:	2300      	movs	r3, #0
 8014130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014134:	e00f      	b.n	8014156 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014136:	f107 0308 	add.w	r3, r7, #8
 801413a:	4618      	mov	r0, r3
 801413c:	f7ff fe60 	bl	8013e00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014142:	0a5a      	lsrs	r2, r3, #9
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014148:	2300      	movs	r3, #0
 801414a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801414e:	e002      	b.n	8014156 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014150:	2304      	movs	r3, #4
 8014152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801415a:	4618      	mov	r0, r3
 801415c:	3730      	adds	r7, #48	; 0x30
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	2400000d 	.word	0x2400000d

08014168 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014168:	b480      	push	{r7}
 801416a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801416c:	4b03      	ldr	r3, [pc, #12]	; (801417c <BSP_SD_WriteCpltCallback+0x14>)
 801416e:	2201      	movs	r2, #1
 8014170:	601a      	str	r2, [r3, #0]
}
 8014172:	bf00      	nop
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr
 801417c:	240014a0 	.word	0x240014a0

08014180 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014180:	b480      	push	{r7}
 8014182:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014184:	4b03      	ldr	r3, [pc, #12]	; (8014194 <BSP_SD_ReadCpltCallback+0x14>)
 8014186:	2201      	movs	r2, #1
 8014188:	601a      	str	r2, [r3, #0]
}
 801418a:	bf00      	nop
 801418c:	46bd      	mov	sp, r7
 801418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014192:	4770      	bx	lr
 8014194:	240014a4 	.word	0x240014a4

08014198 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b084      	sub	sp, #16
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	460b      	mov	r3, r1
 80141a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80141a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80141a8:	f002 fc84 	bl	8016ab4 <USBD_static_malloc>
 80141ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d109      	bne.n	80141c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	32b0      	adds	r2, #176	; 0xb0
 80141be:	2100      	movs	r1, #0
 80141c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80141c4:	2302      	movs	r3, #2
 80141c6:	e0d4      	b.n	8014372 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80141c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80141cc:	2100      	movs	r1, #0
 80141ce:	68f8      	ldr	r0, [r7, #12]
 80141d0:	f002 fcec 	bl	8016bac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	32b0      	adds	r2, #176	; 0xb0
 80141de:	68f9      	ldr	r1, [r7, #12]
 80141e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	32b0      	adds	r2, #176	; 0xb0
 80141ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	7c1b      	ldrb	r3, [r3, #16]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d138      	bne.n	8014272 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014200:	4b5e      	ldr	r3, [pc, #376]	; (801437c <USBD_CDC_Init+0x1e4>)
 8014202:	7819      	ldrb	r1, [r3, #0]
 8014204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014208:	2202      	movs	r2, #2
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f002 fb2f 	bl	801686e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014210:	4b5a      	ldr	r3, [pc, #360]	; (801437c <USBD_CDC_Init+0x1e4>)
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	f003 020f 	and.w	r2, r3, #15
 8014218:	6879      	ldr	r1, [r7, #4]
 801421a:	4613      	mov	r3, r2
 801421c:	009b      	lsls	r3, r3, #2
 801421e:	4413      	add	r3, r2
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	440b      	add	r3, r1
 8014224:	3324      	adds	r3, #36	; 0x24
 8014226:	2201      	movs	r2, #1
 8014228:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801422a:	4b55      	ldr	r3, [pc, #340]	; (8014380 <USBD_CDC_Init+0x1e8>)
 801422c:	7819      	ldrb	r1, [r3, #0]
 801422e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014232:	2202      	movs	r2, #2
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f002 fb1a 	bl	801686e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801423a:	4b51      	ldr	r3, [pc, #324]	; (8014380 <USBD_CDC_Init+0x1e8>)
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	f003 020f 	and.w	r2, r3, #15
 8014242:	6879      	ldr	r1, [r7, #4]
 8014244:	4613      	mov	r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	4413      	add	r3, r2
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	440b      	add	r3, r1
 801424e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014252:	2201      	movs	r2, #1
 8014254:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014256:	4b4b      	ldr	r3, [pc, #300]	; (8014384 <USBD_CDC_Init+0x1ec>)
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	f003 020f 	and.w	r2, r3, #15
 801425e:	6879      	ldr	r1, [r7, #4]
 8014260:	4613      	mov	r3, r2
 8014262:	009b      	lsls	r3, r3, #2
 8014264:	4413      	add	r3, r2
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	440b      	add	r3, r1
 801426a:	3326      	adds	r3, #38	; 0x26
 801426c:	2210      	movs	r2, #16
 801426e:	801a      	strh	r2, [r3, #0]
 8014270:	e035      	b.n	80142de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014272:	4b42      	ldr	r3, [pc, #264]	; (801437c <USBD_CDC_Init+0x1e4>)
 8014274:	7819      	ldrb	r1, [r3, #0]
 8014276:	2340      	movs	r3, #64	; 0x40
 8014278:	2202      	movs	r2, #2
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f002 faf7 	bl	801686e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014280:	4b3e      	ldr	r3, [pc, #248]	; (801437c <USBD_CDC_Init+0x1e4>)
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	f003 020f 	and.w	r2, r3, #15
 8014288:	6879      	ldr	r1, [r7, #4]
 801428a:	4613      	mov	r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4413      	add	r3, r2
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	440b      	add	r3, r1
 8014294:	3324      	adds	r3, #36	; 0x24
 8014296:	2201      	movs	r2, #1
 8014298:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801429a:	4b39      	ldr	r3, [pc, #228]	; (8014380 <USBD_CDC_Init+0x1e8>)
 801429c:	7819      	ldrb	r1, [r3, #0]
 801429e:	2340      	movs	r3, #64	; 0x40
 80142a0:	2202      	movs	r2, #2
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f002 fae3 	bl	801686e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80142a8:	4b35      	ldr	r3, [pc, #212]	; (8014380 <USBD_CDC_Init+0x1e8>)
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	f003 020f 	and.w	r2, r3, #15
 80142b0:	6879      	ldr	r1, [r7, #4]
 80142b2:	4613      	mov	r3, r2
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	4413      	add	r3, r2
 80142b8:	009b      	lsls	r3, r3, #2
 80142ba:	440b      	add	r3, r1
 80142bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80142c0:	2201      	movs	r2, #1
 80142c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80142c4:	4b2f      	ldr	r3, [pc, #188]	; (8014384 <USBD_CDC_Init+0x1ec>)
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	f003 020f 	and.w	r2, r3, #15
 80142cc:	6879      	ldr	r1, [r7, #4]
 80142ce:	4613      	mov	r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	4413      	add	r3, r2
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	440b      	add	r3, r1
 80142d8:	3326      	adds	r3, #38	; 0x26
 80142da:	2210      	movs	r2, #16
 80142dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80142de:	4b29      	ldr	r3, [pc, #164]	; (8014384 <USBD_CDC_Init+0x1ec>)
 80142e0:	7819      	ldrb	r1, [r3, #0]
 80142e2:	2308      	movs	r3, #8
 80142e4:	2203      	movs	r2, #3
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f002 fac1 	bl	801686e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80142ec:	4b25      	ldr	r3, [pc, #148]	; (8014384 <USBD_CDC_Init+0x1ec>)
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	f003 020f 	and.w	r2, r3, #15
 80142f4:	6879      	ldr	r1, [r7, #4]
 80142f6:	4613      	mov	r3, r2
 80142f8:	009b      	lsls	r3, r3, #2
 80142fa:	4413      	add	r3, r2
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	440b      	add	r3, r1
 8014300:	3324      	adds	r3, #36	; 0x24
 8014302:	2201      	movs	r2, #1
 8014304:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	2200      	movs	r2, #0
 801430a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014314:	687a      	ldr	r2, [r7, #4]
 8014316:	33b0      	adds	r3, #176	; 0xb0
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	4413      	add	r3, r2
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	2200      	movs	r2, #0
 8014326:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2200      	movs	r2, #0
 801432e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014338:	2b00      	cmp	r3, #0
 801433a:	d101      	bne.n	8014340 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801433c:	2302      	movs	r3, #2
 801433e:	e018      	b.n	8014372 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	7c1b      	ldrb	r3, [r3, #16]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d10a      	bne.n	801435e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014348:	4b0d      	ldr	r3, [pc, #52]	; (8014380 <USBD_CDC_Init+0x1e8>)
 801434a:	7819      	ldrb	r1, [r3, #0]
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f002 fb78 	bl	8016a4c <USBD_LL_PrepareReceive>
 801435c:	e008      	b.n	8014370 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801435e:	4b08      	ldr	r3, [pc, #32]	; (8014380 <USBD_CDC_Init+0x1e8>)
 8014360:	7819      	ldrb	r1, [r3, #0]
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014368:	2340      	movs	r3, #64	; 0x40
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f002 fb6e 	bl	8016a4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014370:	2300      	movs	r3, #0
}
 8014372:	4618      	mov	r0, r3
 8014374:	3710      	adds	r7, #16
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}
 801437a:	bf00      	nop
 801437c:	24000097 	.word	0x24000097
 8014380:	24000098 	.word	0x24000098
 8014384:	24000099 	.word	0x24000099

08014388 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	460b      	mov	r3, r1
 8014392:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014394:	4b3a      	ldr	r3, [pc, #232]	; (8014480 <USBD_CDC_DeInit+0xf8>)
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	4619      	mov	r1, r3
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f002 fa8d 	bl	80168ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80143a0:	4b37      	ldr	r3, [pc, #220]	; (8014480 <USBD_CDC_DeInit+0xf8>)
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	f003 020f 	and.w	r2, r3, #15
 80143a8:	6879      	ldr	r1, [r7, #4]
 80143aa:	4613      	mov	r3, r2
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	4413      	add	r3, r2
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	440b      	add	r3, r1
 80143b4:	3324      	adds	r3, #36	; 0x24
 80143b6:	2200      	movs	r2, #0
 80143b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80143ba:	4b32      	ldr	r3, [pc, #200]	; (8014484 <USBD_CDC_DeInit+0xfc>)
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	4619      	mov	r1, r3
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f002 fa7a 	bl	80168ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80143c6:	4b2f      	ldr	r3, [pc, #188]	; (8014484 <USBD_CDC_DeInit+0xfc>)
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	f003 020f 	and.w	r2, r3, #15
 80143ce:	6879      	ldr	r1, [r7, #4]
 80143d0:	4613      	mov	r3, r2
 80143d2:	009b      	lsls	r3, r3, #2
 80143d4:	4413      	add	r3, r2
 80143d6:	009b      	lsls	r3, r3, #2
 80143d8:	440b      	add	r3, r1
 80143da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80143de:	2200      	movs	r2, #0
 80143e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80143e2:	4b29      	ldr	r3, [pc, #164]	; (8014488 <USBD_CDC_DeInit+0x100>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	4619      	mov	r1, r3
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f002 fa66 	bl	80168ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80143ee:	4b26      	ldr	r3, [pc, #152]	; (8014488 <USBD_CDC_DeInit+0x100>)
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	f003 020f 	and.w	r2, r3, #15
 80143f6:	6879      	ldr	r1, [r7, #4]
 80143f8:	4613      	mov	r3, r2
 80143fa:	009b      	lsls	r3, r3, #2
 80143fc:	4413      	add	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	440b      	add	r3, r1
 8014402:	3324      	adds	r3, #36	; 0x24
 8014404:	2200      	movs	r2, #0
 8014406:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014408:	4b1f      	ldr	r3, [pc, #124]	; (8014488 <USBD_CDC_DeInit+0x100>)
 801440a:	781b      	ldrb	r3, [r3, #0]
 801440c:	f003 020f 	and.w	r2, r3, #15
 8014410:	6879      	ldr	r1, [r7, #4]
 8014412:	4613      	mov	r3, r2
 8014414:	009b      	lsls	r3, r3, #2
 8014416:	4413      	add	r3, r2
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	440b      	add	r3, r1
 801441c:	3326      	adds	r3, #38	; 0x26
 801441e:	2200      	movs	r2, #0
 8014420:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	32b0      	adds	r2, #176	; 0xb0
 801442c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d01f      	beq.n	8014474 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	33b0      	adds	r3, #176	; 0xb0
 801443e:	009b      	lsls	r3, r3, #2
 8014440:	4413      	add	r3, r2
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	32b0      	adds	r2, #176	; 0xb0
 8014452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014456:	4618      	mov	r0, r3
 8014458:	f002 fb3a 	bl	8016ad0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	32b0      	adds	r2, #176	; 0xb0
 8014466:	2100      	movs	r1, #0
 8014468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2200      	movs	r2, #0
 8014470:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3708      	adds	r7, #8
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
 801447e:	bf00      	nop
 8014480:	24000097 	.word	0x24000097
 8014484:	24000098 	.word	0x24000098
 8014488:	24000099 	.word	0x24000099

0801448c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	32b0      	adds	r2, #176	; 0xb0
 80144a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80144a6:	2300      	movs	r3, #0
 80144a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80144aa:	2300      	movs	r3, #0
 80144ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80144ae:	2300      	movs	r3, #0
 80144b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d101      	bne.n	80144bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80144b8:	2303      	movs	r3, #3
 80144ba:	e0bf      	b.n	801463c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144bc:	683b      	ldr	r3, [r7, #0]
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d050      	beq.n	801456a <USBD_CDC_Setup+0xde>
 80144c8:	2b20      	cmp	r3, #32
 80144ca:	f040 80af 	bne.w	801462c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	88db      	ldrh	r3, [r3, #6]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d03a      	beq.n	801454c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	b25b      	sxtb	r3, r3
 80144dc:	2b00      	cmp	r3, #0
 80144de:	da1b      	bge.n	8014518 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	33b0      	adds	r3, #176	; 0xb0
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	685b      	ldr	r3, [r3, #4]
 80144f0:	689b      	ldr	r3, [r3, #8]
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80144f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80144f8:	683a      	ldr	r2, [r7, #0]
 80144fa:	88d2      	ldrh	r2, [r2, #6]
 80144fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	88db      	ldrh	r3, [r3, #6]
 8014502:	2b07      	cmp	r3, #7
 8014504:	bf28      	it	cs
 8014506:	2307      	movcs	r3, #7
 8014508:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	89fa      	ldrh	r2, [r7, #14]
 801450e:	4619      	mov	r1, r3
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f001 fd49 	bl	8015fa8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014516:	e090      	b.n	801463a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	785a      	ldrb	r2, [r3, #1]
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	88db      	ldrh	r3, [r3, #6]
 8014526:	2b3f      	cmp	r3, #63	; 0x3f
 8014528:	d803      	bhi.n	8014532 <USBD_CDC_Setup+0xa6>
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	88db      	ldrh	r3, [r3, #6]
 801452e:	b2da      	uxtb	r2, r3
 8014530:	e000      	b.n	8014534 <USBD_CDC_Setup+0xa8>
 8014532:	2240      	movs	r2, #64	; 0x40
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801453a:	6939      	ldr	r1, [r7, #16]
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014542:	461a      	mov	r2, r3
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f001 fd5b 	bl	8016000 <USBD_CtlPrepareRx>
      break;
 801454a:	e076      	b.n	801463a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	33b0      	adds	r3, #176	; 0xb0
 8014556:	009b      	lsls	r3, r3, #2
 8014558:	4413      	add	r3, r2
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	683a      	ldr	r2, [r7, #0]
 8014560:	7850      	ldrb	r0, [r2, #1]
 8014562:	2200      	movs	r2, #0
 8014564:	6839      	ldr	r1, [r7, #0]
 8014566:	4798      	blx	r3
      break;
 8014568:	e067      	b.n	801463a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	785b      	ldrb	r3, [r3, #1]
 801456e:	2b0b      	cmp	r3, #11
 8014570:	d851      	bhi.n	8014616 <USBD_CDC_Setup+0x18a>
 8014572:	a201      	add	r2, pc, #4	; (adr r2, 8014578 <USBD_CDC_Setup+0xec>)
 8014574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014578:	080145a9 	.word	0x080145a9
 801457c:	08014625 	.word	0x08014625
 8014580:	08014617 	.word	0x08014617
 8014584:	08014617 	.word	0x08014617
 8014588:	08014617 	.word	0x08014617
 801458c:	08014617 	.word	0x08014617
 8014590:	08014617 	.word	0x08014617
 8014594:	08014617 	.word	0x08014617
 8014598:	08014617 	.word	0x08014617
 801459c:	08014617 	.word	0x08014617
 80145a0:	080145d3 	.word	0x080145d3
 80145a4:	080145fd 	.word	0x080145fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	2b03      	cmp	r3, #3
 80145b2:	d107      	bne.n	80145c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80145b4:	f107 030a 	add.w	r3, r7, #10
 80145b8:	2202      	movs	r2, #2
 80145ba:	4619      	mov	r1, r3
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f001 fcf3 	bl	8015fa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145c2:	e032      	b.n	801462a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145c4:	6839      	ldr	r1, [r7, #0]
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f001 fc7d 	bl	8015ec6 <USBD_CtlError>
            ret = USBD_FAIL;
 80145cc:	2303      	movs	r3, #3
 80145ce:	75fb      	strb	r3, [r7, #23]
          break;
 80145d0:	e02b      	b.n	801462a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145d8:	b2db      	uxtb	r3, r3
 80145da:	2b03      	cmp	r3, #3
 80145dc:	d107      	bne.n	80145ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80145de:	f107 030d 	add.w	r3, r7, #13
 80145e2:	2201      	movs	r2, #1
 80145e4:	4619      	mov	r1, r3
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f001 fcde 	bl	8015fa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145ec:	e01d      	b.n	801462a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145ee:	6839      	ldr	r1, [r7, #0]
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f001 fc68 	bl	8015ec6 <USBD_CtlError>
            ret = USBD_FAIL;
 80145f6:	2303      	movs	r3, #3
 80145f8:	75fb      	strb	r3, [r7, #23]
          break;
 80145fa:	e016      	b.n	801462a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014602:	b2db      	uxtb	r3, r3
 8014604:	2b03      	cmp	r3, #3
 8014606:	d00f      	beq.n	8014628 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014608:	6839      	ldr	r1, [r7, #0]
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f001 fc5b 	bl	8015ec6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014610:	2303      	movs	r3, #3
 8014612:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014614:	e008      	b.n	8014628 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014616:	6839      	ldr	r1, [r7, #0]
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f001 fc54 	bl	8015ec6 <USBD_CtlError>
          ret = USBD_FAIL;
 801461e:	2303      	movs	r3, #3
 8014620:	75fb      	strb	r3, [r7, #23]
          break;
 8014622:	e002      	b.n	801462a <USBD_CDC_Setup+0x19e>
          break;
 8014624:	bf00      	nop
 8014626:	e008      	b.n	801463a <USBD_CDC_Setup+0x1ae>
          break;
 8014628:	bf00      	nop
      }
      break;
 801462a:	e006      	b.n	801463a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801462c:	6839      	ldr	r1, [r7, #0]
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f001 fc49 	bl	8015ec6 <USBD_CtlError>
      ret = USBD_FAIL;
 8014634:	2303      	movs	r3, #3
 8014636:	75fb      	strb	r3, [r7, #23]
      break;
 8014638:	bf00      	nop
  }

  return (uint8_t)ret;
 801463a:	7dfb      	ldrb	r3, [r7, #23]
}
 801463c:	4618      	mov	r0, r3
 801463e:	3718      	adds	r7, #24
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b084      	sub	sp, #16
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	460b      	mov	r3, r1
 801464e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014656:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	32b0      	adds	r2, #176	; 0xb0
 8014662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d101      	bne.n	801466e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801466a:	2303      	movs	r3, #3
 801466c:	e065      	b.n	801473a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	32b0      	adds	r2, #176	; 0xb0
 8014678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801467c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801467e:	78fb      	ldrb	r3, [r7, #3]
 8014680:	f003 020f 	and.w	r2, r3, #15
 8014684:	6879      	ldr	r1, [r7, #4]
 8014686:	4613      	mov	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	440b      	add	r3, r1
 8014690:	3318      	adds	r3, #24
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d02f      	beq.n	80146f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014698:	78fb      	ldrb	r3, [r7, #3]
 801469a:	f003 020f 	and.w	r2, r3, #15
 801469e:	6879      	ldr	r1, [r7, #4]
 80146a0:	4613      	mov	r3, r2
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	4413      	add	r3, r2
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	440b      	add	r3, r1
 80146aa:	3318      	adds	r3, #24
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	78fb      	ldrb	r3, [r7, #3]
 80146b0:	f003 010f 	and.w	r1, r3, #15
 80146b4:	68f8      	ldr	r0, [r7, #12]
 80146b6:	460b      	mov	r3, r1
 80146b8:	00db      	lsls	r3, r3, #3
 80146ba:	440b      	add	r3, r1
 80146bc:	009b      	lsls	r3, r3, #2
 80146be:	4403      	add	r3, r0
 80146c0:	3344      	adds	r3, #68	; 0x44
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80146c8:	fb01 f303 	mul.w	r3, r1, r3
 80146cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d112      	bne.n	80146f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80146d2:	78fb      	ldrb	r3, [r7, #3]
 80146d4:	f003 020f 	and.w	r2, r3, #15
 80146d8:	6879      	ldr	r1, [r7, #4]
 80146da:	4613      	mov	r3, r2
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	4413      	add	r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	440b      	add	r3, r1
 80146e4:	3318      	adds	r3, #24
 80146e6:	2200      	movs	r2, #0
 80146e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80146ea:	78f9      	ldrb	r1, [r7, #3]
 80146ec:	2300      	movs	r3, #0
 80146ee:	2200      	movs	r2, #0
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f002 f98a 	bl	8016a0a <USBD_LL_Transmit>
 80146f6:	e01f      	b.n	8014738 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	2200      	movs	r2, #0
 80146fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	33b0      	adds	r3, #176	; 0xb0
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	4413      	add	r3, r2
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	691b      	ldr	r3, [r3, #16]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d010      	beq.n	8014738 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801471c:	687a      	ldr	r2, [r7, #4]
 801471e:	33b0      	adds	r3, #176	; 0xb0
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	4413      	add	r3, r2
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	691b      	ldr	r3, [r3, #16]
 8014728:	68ba      	ldr	r2, [r7, #8]
 801472a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801472e:	68ba      	ldr	r2, [r7, #8]
 8014730:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014734:	78fa      	ldrb	r2, [r7, #3]
 8014736:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3710      	adds	r7, #16
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014742:	b580      	push	{r7, lr}
 8014744:	b084      	sub	sp, #16
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	460b      	mov	r3, r1
 801474c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	32b0      	adds	r2, #176	; 0xb0
 8014758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801475c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	32b0      	adds	r2, #176	; 0xb0
 8014768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d101      	bne.n	8014774 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014770:	2303      	movs	r3, #3
 8014772:	e01a      	b.n	80147aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014774:	78fb      	ldrb	r3, [r7, #3]
 8014776:	4619      	mov	r1, r3
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f002 f988 	bl	8016a8e <USBD_LL_GetRxDataSize>
 801477e:	4602      	mov	r2, r0
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801478c:	687a      	ldr	r2, [r7, #4]
 801478e:	33b0      	adds	r3, #176	; 0xb0
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	4413      	add	r3, r2
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801479e:	68fa      	ldr	r2, [r7, #12]
 80147a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80147a4:	4611      	mov	r1, r2
 80147a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80147a8:	2300      	movs	r3, #0
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3710      	adds	r7, #16
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}

080147b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80147b2:	b580      	push	{r7, lr}
 80147b4:	b084      	sub	sp, #16
 80147b6:	af00      	add	r7, sp, #0
 80147b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	32b0      	adds	r2, #176	; 0xb0
 80147c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d101      	bne.n	80147d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80147d0:	2303      	movs	r3, #3
 80147d2:	e025      	b.n	8014820 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	33b0      	adds	r3, #176	; 0xb0
 80147de:	009b      	lsls	r3, r3, #2
 80147e0:	4413      	add	r3, r2
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d01a      	beq.n	801481e <USBD_CDC_EP0_RxReady+0x6c>
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80147ee:	2bff      	cmp	r3, #255	; 0xff
 80147f0:	d015      	beq.n	801481e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	33b0      	adds	r3, #176	; 0xb0
 80147fc:	009b      	lsls	r3, r3, #2
 80147fe:	4413      	add	r3, r2
 8014800:	685b      	ldr	r3, [r3, #4]
 8014802:	689b      	ldr	r3, [r3, #8]
 8014804:	68fa      	ldr	r2, [r7, #12]
 8014806:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801480a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801480c:	68fa      	ldr	r2, [r7, #12]
 801480e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014812:	b292      	uxth	r2, r2
 8014814:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	22ff      	movs	r2, #255	; 0xff
 801481a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801481e:	2300      	movs	r3, #0
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b086      	sub	sp, #24
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014830:	2182      	movs	r1, #130	; 0x82
 8014832:	4818      	ldr	r0, [pc, #96]	; (8014894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014834:	f000 fd0f 	bl	8015256 <USBD_GetEpDesc>
 8014838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801483a:	2101      	movs	r1, #1
 801483c:	4815      	ldr	r0, [pc, #84]	; (8014894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801483e:	f000 fd0a 	bl	8015256 <USBD_GetEpDesc>
 8014842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014844:	2181      	movs	r1, #129	; 0x81
 8014846:	4813      	ldr	r0, [pc, #76]	; (8014894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014848:	f000 fd05 	bl	8015256 <USBD_GetEpDesc>
 801484c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d002      	beq.n	801485a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	2210      	movs	r2, #16
 8014858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d006      	beq.n	801486e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	2200      	movs	r2, #0
 8014864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014868:	711a      	strb	r2, [r3, #4]
 801486a:	2200      	movs	r2, #0
 801486c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d006      	beq.n	8014882 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2200      	movs	r2, #0
 8014878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801487c:	711a      	strb	r2, [r3, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2243      	movs	r2, #67	; 0x43
 8014886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014888:	4b02      	ldr	r3, [pc, #8]	; (8014894 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801488a:	4618      	mov	r0, r3
 801488c:	3718      	adds	r7, #24
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop
 8014894:	24000054 	.word	0x24000054

08014898 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b086      	sub	sp, #24
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80148a0:	2182      	movs	r1, #130	; 0x82
 80148a2:	4818      	ldr	r0, [pc, #96]	; (8014904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148a4:	f000 fcd7 	bl	8015256 <USBD_GetEpDesc>
 80148a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80148aa:	2101      	movs	r1, #1
 80148ac:	4815      	ldr	r0, [pc, #84]	; (8014904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148ae:	f000 fcd2 	bl	8015256 <USBD_GetEpDesc>
 80148b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80148b4:	2181      	movs	r1, #129	; 0x81
 80148b6:	4813      	ldr	r0, [pc, #76]	; (8014904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148b8:	f000 fccd 	bl	8015256 <USBD_GetEpDesc>
 80148bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d002      	beq.n	80148ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	2210      	movs	r2, #16
 80148c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d006      	beq.n	80148de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	2200      	movs	r2, #0
 80148d4:	711a      	strb	r2, [r3, #4]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f042 0202 	orr.w	r2, r2, #2
 80148dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d006      	beq.n	80148f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2200      	movs	r2, #0
 80148e8:	711a      	strb	r2, [r3, #4]
 80148ea:	2200      	movs	r2, #0
 80148ec:	f042 0202 	orr.w	r2, r2, #2
 80148f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2243      	movs	r2, #67	; 0x43
 80148f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80148f8:	4b02      	ldr	r3, [pc, #8]	; (8014904 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3718      	adds	r7, #24
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	24000054 	.word	0x24000054

08014908 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b086      	sub	sp, #24
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014910:	2182      	movs	r1, #130	; 0x82
 8014912:	4818      	ldr	r0, [pc, #96]	; (8014974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014914:	f000 fc9f 	bl	8015256 <USBD_GetEpDesc>
 8014918:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801491a:	2101      	movs	r1, #1
 801491c:	4815      	ldr	r0, [pc, #84]	; (8014974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801491e:	f000 fc9a 	bl	8015256 <USBD_GetEpDesc>
 8014922:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014924:	2181      	movs	r1, #129	; 0x81
 8014926:	4813      	ldr	r0, [pc, #76]	; (8014974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014928:	f000 fc95 	bl	8015256 <USBD_GetEpDesc>
 801492c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d002      	beq.n	801493a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	2210      	movs	r2, #16
 8014938:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d006      	beq.n	801494e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	2200      	movs	r2, #0
 8014944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014948:	711a      	strb	r2, [r3, #4]
 801494a:	2200      	movs	r2, #0
 801494c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d006      	beq.n	8014962 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	2200      	movs	r2, #0
 8014958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801495c:	711a      	strb	r2, [r3, #4]
 801495e:	2200      	movs	r2, #0
 8014960:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2243      	movs	r2, #67	; 0x43
 8014966:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014968:	4b02      	ldr	r3, [pc, #8]	; (8014974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801496a:	4618      	mov	r0, r3
 801496c:	3718      	adds	r7, #24
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}
 8014972:	bf00      	nop
 8014974:	24000054 	.word	0x24000054

08014978 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014978:	b480      	push	{r7}
 801497a:	b083      	sub	sp, #12
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	220a      	movs	r2, #10
 8014984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014986:	4b03      	ldr	r3, [pc, #12]	; (8014994 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014988:	4618      	mov	r0, r3
 801498a:	370c      	adds	r7, #12
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr
 8014994:	24000010 	.word	0x24000010

08014998 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014998:	b480      	push	{r7}
 801499a:	b083      	sub	sp, #12
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d101      	bne.n	80149ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80149a8:	2303      	movs	r3, #3
 80149aa:	e009      	b.n	80149c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	33b0      	adds	r3, #176	; 0xb0
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	4413      	add	r3, r2
 80149ba:	683a      	ldr	r2, [r7, #0]
 80149bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80149be:	2300      	movs	r3, #0
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr

080149cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80149cc:	b480      	push	{r7}
 80149ce:	b087      	sub	sp, #28
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	32b0      	adds	r2, #176	; 0xb0
 80149e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d101      	bne.n	80149f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80149ee:	2303      	movs	r3, #3
 80149f0:	e008      	b.n	8014a04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	68ba      	ldr	r2, [r7, #8]
 80149f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014a02:	2300      	movs	r3, #0
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	371c      	adds	r7, #28
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014a10:	b480      	push	{r7}
 8014a12:	b085      	sub	sp, #20
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
 8014a18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	32b0      	adds	r2, #176	; 0xb0
 8014a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d101      	bne.n	8014a34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014a30:	2303      	movs	r3, #3
 8014a32:	e004      	b.n	8014a3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	683a      	ldr	r2, [r7, #0]
 8014a38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014a3c:	2300      	movs	r3, #0
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3714      	adds	r7, #20
 8014a42:	46bd      	mov	sp, r7
 8014a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a48:	4770      	bx	lr
	...

08014a4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	32b0      	adds	r2, #176	; 0xb0
 8014a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	32b0      	adds	r2, #176	; 0xb0
 8014a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d101      	bne.n	8014a7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014a76:	2303      	movs	r3, #3
 8014a78:	e018      	b.n	8014aac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	7c1b      	ldrb	r3, [r3, #16]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d10a      	bne.n	8014a98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a82:	4b0c      	ldr	r3, [pc, #48]	; (8014ab4 <USBD_CDC_ReceivePacket+0x68>)
 8014a84:	7819      	ldrb	r1, [r3, #0]
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f001 ffdb 	bl	8016a4c <USBD_LL_PrepareReceive>
 8014a96:	e008      	b.n	8014aaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a98:	4b06      	ldr	r3, [pc, #24]	; (8014ab4 <USBD_CDC_ReceivePacket+0x68>)
 8014a9a:	7819      	ldrb	r1, [r3, #0]
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014aa2:	2340      	movs	r3, #64	; 0x40
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f001 ffd1 	bl	8016a4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014aaa:	2300      	movs	r3, #0
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3710      	adds	r7, #16
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	24000098 	.word	0x24000098

08014ab8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b086      	sub	sp, #24
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d101      	bne.n	8014ad0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014acc:	2303      	movs	r3, #3
 8014ace:	e01f      	b.n	8014b10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	2200      	movs	r2, #0
 8014adc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d003      	beq.n	8014af6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	68ba      	ldr	r2, [r7, #8]
 8014af2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2201      	movs	r2, #1
 8014afa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	79fa      	ldrb	r2, [r7, #7]
 8014b02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014b04:	68f8      	ldr	r0, [r7, #12]
 8014b06:	f001 fe45 	bl	8016794 <USBD_LL_Init>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3718      	adds	r7, #24
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b084      	sub	sp, #16
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b22:	2300      	movs	r3, #0
 8014b24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d101      	bne.n	8014b30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014b2c:	2303      	movs	r3, #3
 8014b2e:	e025      	b.n	8014b7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	683a      	ldr	r2, [r7, #0]
 8014b34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	32ae      	adds	r2, #174	; 0xae
 8014b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d00f      	beq.n	8014b6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	32ae      	adds	r2, #174	; 0xae
 8014b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b5c:	f107 020e 	add.w	r2, r7, #14
 8014b60:	4610      	mov	r0, r2
 8014b62:	4798      	blx	r3
 8014b64:	4602      	mov	r2, r0
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014b72:	1c5a      	adds	r2, r3, #1
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014b7a:	2300      	movs	r3, #0
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3710      	adds	r7, #16
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}

08014b84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f001 fe53 	bl	8016838 <USBD_LL_Start>
 8014b92:	4603      	mov	r3, r0
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3708      	adds	r7, #8
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b083      	sub	sp, #12
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ba4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	370c      	adds	r7, #12
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr

08014bb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b084      	sub	sp, #16
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
 8014bba:	460b      	mov	r3, r1
 8014bbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d009      	beq.n	8014be0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	78fa      	ldrb	r2, [r7, #3]
 8014bd6:	4611      	mov	r1, r2
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	4798      	blx	r3
 8014bdc:	4603      	mov	r3, r0
 8014bde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}

08014bea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b084      	sub	sp, #16
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	6078      	str	r0, [r7, #4]
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	78fa      	ldrb	r2, [r7, #3]
 8014c04:	4611      	mov	r1, r2
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	4798      	blx	r3
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d001      	beq.n	8014c14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014c10:	2303      	movs	r3, #3
 8014c12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}

08014c1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014c1e:	b580      	push	{r7, lr}
 8014c20:	b084      	sub	sp, #16
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
 8014c26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c2e:	6839      	ldr	r1, [r7, #0]
 8014c30:	4618      	mov	r0, r3
 8014c32:	f001 f90e 	bl	8015e52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	2201      	movs	r2, #1
 8014c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014c44:	461a      	mov	r2, r3
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014c52:	f003 031f 	and.w	r3, r3, #31
 8014c56:	2b02      	cmp	r3, #2
 8014c58:	d01a      	beq.n	8014c90 <USBD_LL_SetupStage+0x72>
 8014c5a:	2b02      	cmp	r3, #2
 8014c5c:	d822      	bhi.n	8014ca4 <USBD_LL_SetupStage+0x86>
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d002      	beq.n	8014c68 <USBD_LL_SetupStage+0x4a>
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d00a      	beq.n	8014c7c <USBD_LL_SetupStage+0x5e>
 8014c66:	e01d      	b.n	8014ca4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c6e:	4619      	mov	r1, r3
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f000 fb65 	bl	8015340 <USBD_StdDevReq>
 8014c76:	4603      	mov	r3, r0
 8014c78:	73fb      	strb	r3, [r7, #15]
      break;
 8014c7a:	e020      	b.n	8014cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c82:	4619      	mov	r1, r3
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f000 fbcd 	bl	8015424 <USBD_StdItfReq>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8014c8e:	e016      	b.n	8014cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c96:	4619      	mov	r1, r3
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f000 fc2f 	bl	80154fc <USBD_StdEPReq>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8014ca2:	e00c      	b.n	8014cbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014caa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014cae:	b2db      	uxtb	r3, r3
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f001 fe20 	bl	80168f8 <USBD_LL_StallEP>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	73fb      	strb	r3, [r7, #15]
      break;
 8014cbc:	bf00      	nop
  }

  return ret;
 8014cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3710      	adds	r7, #16
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b086      	sub	sp, #24
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	460b      	mov	r3, r1
 8014cd2:	607a      	str	r2, [r7, #4]
 8014cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014cda:	7afb      	ldrb	r3, [r7, #11]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d16e      	bne.n	8014dbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014ce6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014cee:	2b03      	cmp	r3, #3
 8014cf0:	f040 8098 	bne.w	8014e24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	689a      	ldr	r2, [r3, #8]
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	68db      	ldr	r3, [r3, #12]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d913      	bls.n	8014d28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	689a      	ldr	r2, [r3, #8]
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	68db      	ldr	r3, [r3, #12]
 8014d08:	1ad2      	subs	r2, r2, r3
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	68da      	ldr	r2, [r3, #12]
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	689b      	ldr	r3, [r3, #8]
 8014d16:	4293      	cmp	r3, r2
 8014d18:	bf28      	it	cs
 8014d1a:	4613      	movcs	r3, r2
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	68f8      	ldr	r0, [r7, #12]
 8014d22:	f001 f98a 	bl	801603a <USBD_CtlContinueRx>
 8014d26:	e07d      	b.n	8014e24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014d2e:	f003 031f 	and.w	r3, r3, #31
 8014d32:	2b02      	cmp	r3, #2
 8014d34:	d014      	beq.n	8014d60 <USBD_LL_DataOutStage+0x98>
 8014d36:	2b02      	cmp	r3, #2
 8014d38:	d81d      	bhi.n	8014d76 <USBD_LL_DataOutStage+0xae>
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d002      	beq.n	8014d44 <USBD_LL_DataOutStage+0x7c>
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d003      	beq.n	8014d4a <USBD_LL_DataOutStage+0x82>
 8014d42:	e018      	b.n	8014d76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014d44:	2300      	movs	r3, #0
 8014d46:	75bb      	strb	r3, [r7, #22]
            break;
 8014d48:	e018      	b.n	8014d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	4619      	mov	r1, r3
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f000 fa64 	bl	8015222 <USBD_CoreFindIF>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	75bb      	strb	r3, [r7, #22]
            break;
 8014d5e:	e00d      	b.n	8014d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	4619      	mov	r1, r3
 8014d6a:	68f8      	ldr	r0, [r7, #12]
 8014d6c:	f000 fa66 	bl	801523c <USBD_CoreFindEP>
 8014d70:	4603      	mov	r3, r0
 8014d72:	75bb      	strb	r3, [r7, #22]
            break;
 8014d74:	e002      	b.n	8014d7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014d76:	2300      	movs	r3, #0
 8014d78:	75bb      	strb	r3, [r7, #22]
            break;
 8014d7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014d7c:	7dbb      	ldrb	r3, [r7, #22]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d119      	bne.n	8014db6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	2b03      	cmp	r3, #3
 8014d8c:	d113      	bne.n	8014db6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014d8e:	7dba      	ldrb	r2, [r7, #22]
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	32ae      	adds	r2, #174	; 0xae
 8014d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d98:	691b      	ldr	r3, [r3, #16]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d00b      	beq.n	8014db6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014d9e:	7dba      	ldrb	r2, [r7, #22]
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014da6:	7dba      	ldrb	r2, [r7, #22]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	32ae      	adds	r2, #174	; 0xae
 8014dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014db0:	691b      	ldr	r3, [r3, #16]
 8014db2:	68f8      	ldr	r0, [r7, #12]
 8014db4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f001 f950 	bl	801605c <USBD_CtlSendStatus>
 8014dbc:	e032      	b.n	8014e24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014dbe:	7afb      	ldrb	r3, [r7, #11]
 8014dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dc4:	b2db      	uxtb	r3, r3
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	68f8      	ldr	r0, [r7, #12]
 8014dca:	f000 fa37 	bl	801523c <USBD_CoreFindEP>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014dd2:	7dbb      	ldrb	r3, [r7, #22]
 8014dd4:	2bff      	cmp	r3, #255	; 0xff
 8014dd6:	d025      	beq.n	8014e24 <USBD_LL_DataOutStage+0x15c>
 8014dd8:	7dbb      	ldrb	r3, [r7, #22]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d122      	bne.n	8014e24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	2b03      	cmp	r3, #3
 8014de8:	d117      	bne.n	8014e1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014dea:	7dba      	ldrb	r2, [r7, #22]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	32ae      	adds	r2, #174	; 0xae
 8014df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014df4:	699b      	ldr	r3, [r3, #24]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d00f      	beq.n	8014e1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014dfa:	7dba      	ldrb	r2, [r7, #22]
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014e02:	7dba      	ldrb	r2, [r7, #22]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	32ae      	adds	r2, #174	; 0xae
 8014e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e0c:	699b      	ldr	r3, [r3, #24]
 8014e0e:	7afa      	ldrb	r2, [r7, #11]
 8014e10:	4611      	mov	r1, r2
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	4798      	blx	r3
 8014e16:	4603      	mov	r3, r0
 8014e18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014e1a:	7dfb      	ldrb	r3, [r7, #23]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d001      	beq.n	8014e24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014e20:	7dfb      	ldrb	r3, [r7, #23]
 8014e22:	e000      	b.n	8014e26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014e24:	2300      	movs	r3, #0
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3718      	adds	r7, #24
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b086      	sub	sp, #24
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	60f8      	str	r0, [r7, #12]
 8014e36:	460b      	mov	r3, r1
 8014e38:	607a      	str	r2, [r7, #4]
 8014e3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014e3c:	7afb      	ldrb	r3, [r7, #11]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d16f      	bne.n	8014f22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	3314      	adds	r3, #20
 8014e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014e4e:	2b02      	cmp	r3, #2
 8014e50:	d15a      	bne.n	8014f08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014e52:	693b      	ldr	r3, [r7, #16]
 8014e54:	689a      	ldr	r2, [r3, #8]
 8014e56:	693b      	ldr	r3, [r7, #16]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d914      	bls.n	8014e88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014e5e:	693b      	ldr	r3, [r7, #16]
 8014e60:	689a      	ldr	r2, [r3, #8]
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	68db      	ldr	r3, [r3, #12]
 8014e66:	1ad2      	subs	r2, r2, r3
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	689b      	ldr	r3, [r3, #8]
 8014e70:	461a      	mov	r2, r3
 8014e72:	6879      	ldr	r1, [r7, #4]
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f001 f8b2 	bl	8015fde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	2100      	movs	r1, #0
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f001 fde3 	bl	8016a4c <USBD_LL_PrepareReceive>
 8014e86:	e03f      	b.n	8014f08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	68da      	ldr	r2, [r3, #12]
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	689b      	ldr	r3, [r3, #8]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d11c      	bne.n	8014ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	685a      	ldr	r2, [r3, #4]
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d316      	bcc.n	8014ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	685a      	ldr	r2, [r3, #4]
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d20f      	bcs.n	8014ece <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014eae:	2200      	movs	r2, #0
 8014eb0:	2100      	movs	r1, #0
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f001 f893 	bl	8015fde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	2100      	movs	r1, #0
 8014ec6:	68f8      	ldr	r0, [r7, #12]
 8014ec8:	f001 fdc0 	bl	8016a4c <USBD_LL_PrepareReceive>
 8014ecc:	e01c      	b.n	8014f08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	2b03      	cmp	r3, #3
 8014ed8:	d10f      	bne.n	8014efa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d009      	beq.n	8014efa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ef4:	68db      	ldr	r3, [r3, #12]
 8014ef6:	68f8      	ldr	r0, [r7, #12]
 8014ef8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014efa:	2180      	movs	r1, #128	; 0x80
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f001 fcfb 	bl	80168f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014f02:	68f8      	ldr	r0, [r7, #12]
 8014f04:	f001 f8bd 	bl	8016082 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d03a      	beq.n	8014f88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014f12:	68f8      	ldr	r0, [r7, #12]
 8014f14:	f7ff fe42 	bl	8014b9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014f20:	e032      	b.n	8014f88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014f22:	7afb      	ldrb	r3, [r7, #11]
 8014f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	68f8      	ldr	r0, [r7, #12]
 8014f2e:	f000 f985 	bl	801523c <USBD_CoreFindEP>
 8014f32:	4603      	mov	r3, r0
 8014f34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f36:	7dfb      	ldrb	r3, [r7, #23]
 8014f38:	2bff      	cmp	r3, #255	; 0xff
 8014f3a:	d025      	beq.n	8014f88 <USBD_LL_DataInStage+0x15a>
 8014f3c:	7dfb      	ldrb	r3, [r7, #23]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d122      	bne.n	8014f88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	2b03      	cmp	r3, #3
 8014f4c:	d11c      	bne.n	8014f88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014f4e:	7dfa      	ldrb	r2, [r7, #23]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	32ae      	adds	r2, #174	; 0xae
 8014f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f58:	695b      	ldr	r3, [r3, #20]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d014      	beq.n	8014f88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014f5e:	7dfa      	ldrb	r2, [r7, #23]
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014f66:	7dfa      	ldrb	r2, [r7, #23]
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	32ae      	adds	r2, #174	; 0xae
 8014f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f70:	695b      	ldr	r3, [r3, #20]
 8014f72:	7afa      	ldrb	r2, [r7, #11]
 8014f74:	4611      	mov	r1, r2
 8014f76:	68f8      	ldr	r0, [r7, #12]
 8014f78:	4798      	blx	r3
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014f7e:	7dbb      	ldrb	r3, [r7, #22]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d001      	beq.n	8014f88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014f84:	7dbb      	ldrb	r3, [r7, #22]
 8014f86:	e000      	b.n	8014f8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014f88:	2300      	movs	r3, #0
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3718      	adds	r7, #24
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014f92:	b580      	push	{r7, lr}
 8014f94:	b084      	sub	sp, #16
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2201      	movs	r2, #1
 8014fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d014      	beq.n	8014ff8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d00e      	beq.n	8014ff8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	6852      	ldr	r2, [r2, #4]
 8014fe6:	b2d2      	uxtb	r2, r2
 8014fe8:	4611      	mov	r1, r2
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	4798      	blx	r3
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d001      	beq.n	8014ff8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014ff4:	2303      	movs	r3, #3
 8014ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014ff8:	2340      	movs	r3, #64	; 0x40
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	2100      	movs	r1, #0
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f001 fc35 	bl	801686e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2201      	movs	r2, #1
 8015008:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2240      	movs	r2, #64	; 0x40
 8015010:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015014:	2340      	movs	r3, #64	; 0x40
 8015016:	2200      	movs	r2, #0
 8015018:	2180      	movs	r1, #128	; 0x80
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f001 fc27 	bl	801686e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2201      	movs	r2, #1
 8015024:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2240      	movs	r2, #64	; 0x40
 801502a:	621a      	str	r2, [r3, #32]

  return ret;
 801502c:	7bfb      	ldrb	r3, [r7, #15]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}

08015036 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015036:	b480      	push	{r7}
 8015038:	b083      	sub	sp, #12
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
 801503e:	460b      	mov	r3, r1
 8015040:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	78fa      	ldrb	r2, [r7, #3]
 8015046:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015048:	2300      	movs	r3, #0
}
 801504a:	4618      	mov	r0, r3
 801504c:	370c      	adds	r7, #12
 801504e:	46bd      	mov	sp, r7
 8015050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015054:	4770      	bx	lr

08015056 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015056:	b480      	push	{r7}
 8015058:	b083      	sub	sp, #12
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015064:	b2db      	uxtb	r3, r3
 8015066:	2b04      	cmp	r3, #4
 8015068:	d006      	beq.n	8015078 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015070:	b2da      	uxtb	r2, r3
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2204      	movs	r2, #4
 801507c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015080:	2300      	movs	r3, #0
}
 8015082:	4618      	mov	r0, r3
 8015084:	370c      	adds	r7, #12
 8015086:	46bd      	mov	sp, r7
 8015088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508c:	4770      	bx	lr

0801508e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801508e:	b480      	push	{r7}
 8015090:	b083      	sub	sp, #12
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801509c:	b2db      	uxtb	r3, r3
 801509e:	2b04      	cmp	r3, #4
 80150a0:	d106      	bne.n	80150b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80150a8:	b2da      	uxtb	r2, r3
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80150b0:	2300      	movs	r3, #0
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	370c      	adds	r7, #12
 80150b6:	46bd      	mov	sp, r7
 80150b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150bc:	4770      	bx	lr

080150be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80150be:	b580      	push	{r7, lr}
 80150c0:	b082      	sub	sp, #8
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150cc:	b2db      	uxtb	r3, r3
 80150ce:	2b03      	cmp	r3, #3
 80150d0:	d110      	bne.n	80150f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d00b      	beq.n	80150f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150e2:	69db      	ldr	r3, [r3, #28]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d005      	beq.n	80150f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150ee:	69db      	ldr	r3, [r3, #28]
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80150f4:	2300      	movs	r3, #0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b082      	sub	sp, #8
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
 8015106:	460b      	mov	r3, r1
 8015108:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	32ae      	adds	r2, #174	; 0xae
 8015114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d101      	bne.n	8015120 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801511c:	2303      	movs	r3, #3
 801511e:	e01c      	b.n	801515a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015126:	b2db      	uxtb	r3, r3
 8015128:	2b03      	cmp	r3, #3
 801512a:	d115      	bne.n	8015158 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	32ae      	adds	r2, #174	; 0xae
 8015136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801513a:	6a1b      	ldr	r3, [r3, #32]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d00b      	beq.n	8015158 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	32ae      	adds	r2, #174	; 0xae
 801514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801514e:	6a1b      	ldr	r3, [r3, #32]
 8015150:	78fa      	ldrb	r2, [r7, #3]
 8015152:	4611      	mov	r1, r2
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	3708      	adds	r7, #8
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015162:	b580      	push	{r7, lr}
 8015164:	b082      	sub	sp, #8
 8015166:	af00      	add	r7, sp, #0
 8015168:	6078      	str	r0, [r7, #4]
 801516a:	460b      	mov	r3, r1
 801516c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	32ae      	adds	r2, #174	; 0xae
 8015178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d101      	bne.n	8015184 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015180:	2303      	movs	r3, #3
 8015182:	e01c      	b.n	80151be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801518a:	b2db      	uxtb	r3, r3
 801518c:	2b03      	cmp	r3, #3
 801518e:	d115      	bne.n	80151bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	32ae      	adds	r2, #174	; 0xae
 801519a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d00b      	beq.n	80151bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	32ae      	adds	r2, #174	; 0xae
 80151ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b4:	78fa      	ldrb	r2, [r7, #3]
 80151b6:	4611      	mov	r1, r2
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80151bc:	2300      	movs	r3, #0
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}

080151c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80151c6:	b480      	push	{r7}
 80151c8:	b083      	sub	sp, #12
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80151ce:	2300      	movs	r3, #0
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	370c      	adds	r7, #12
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr

080151dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b084      	sub	sp, #16
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80151e4:	2300      	movs	r3, #0
 80151e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2201      	movs	r2, #1
 80151ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d00e      	beq.n	8015218 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	687a      	ldr	r2, [r7, #4]
 8015204:	6852      	ldr	r2, [r2, #4]
 8015206:	b2d2      	uxtb	r2, r2
 8015208:	4611      	mov	r1, r2
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	4798      	blx	r3
 801520e:	4603      	mov	r3, r0
 8015210:	2b00      	cmp	r3, #0
 8015212:	d001      	beq.n	8015218 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015214:	2303      	movs	r3, #3
 8015216:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015218:	7bfb      	ldrb	r3, [r7, #15]
}
 801521a:	4618      	mov	r0, r3
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}

08015222 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015222:	b480      	push	{r7}
 8015224:	b083      	sub	sp, #12
 8015226:	af00      	add	r7, sp, #0
 8015228:	6078      	str	r0, [r7, #4]
 801522a:	460b      	mov	r3, r1
 801522c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801522e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015230:	4618      	mov	r0, r3
 8015232:	370c      	adds	r7, #12
 8015234:	46bd      	mov	sp, r7
 8015236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523a:	4770      	bx	lr

0801523c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801523c:	b480      	push	{r7}
 801523e:	b083      	sub	sp, #12
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	460b      	mov	r3, r1
 8015246:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015248:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801524a:	4618      	mov	r0, r3
 801524c:	370c      	adds	r7, #12
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr

08015256 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015256:	b580      	push	{r7, lr}
 8015258:	b086      	sub	sp, #24
 801525a:	af00      	add	r7, sp, #0
 801525c:	6078      	str	r0, [r7, #4]
 801525e:	460b      	mov	r3, r1
 8015260:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801526a:	2300      	movs	r3, #0
 801526c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	885b      	ldrh	r3, [r3, #2]
 8015272:	b29a      	uxth	r2, r3
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	781b      	ldrb	r3, [r3, #0]
 8015278:	b29b      	uxth	r3, r3
 801527a:	429a      	cmp	r2, r3
 801527c:	d920      	bls.n	80152c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	781b      	ldrb	r3, [r3, #0]
 8015282:	b29b      	uxth	r3, r3
 8015284:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015286:	e013      	b.n	80152b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015288:	f107 030a 	add.w	r3, r7, #10
 801528c:	4619      	mov	r1, r3
 801528e:	6978      	ldr	r0, [r7, #20]
 8015290:	f000 f81b 	bl	80152ca <USBD_GetNextDesc>
 8015294:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	785b      	ldrb	r3, [r3, #1]
 801529a:	2b05      	cmp	r3, #5
 801529c:	d108      	bne.n	80152b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	789b      	ldrb	r3, [r3, #2]
 80152a6:	78fa      	ldrb	r2, [r7, #3]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d008      	beq.n	80152be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80152ac:	2300      	movs	r3, #0
 80152ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	885b      	ldrh	r3, [r3, #2]
 80152b4:	b29a      	uxth	r2, r3
 80152b6:	897b      	ldrh	r3, [r7, #10]
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d8e5      	bhi.n	8015288 <USBD_GetEpDesc+0x32>
 80152bc:	e000      	b.n	80152c0 <USBD_GetEpDesc+0x6a>
          break;
 80152be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80152c0:	693b      	ldr	r3, [r7, #16]
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3718      	adds	r7, #24
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}

080152ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80152ca:	b480      	push	{r7}
 80152cc:	b085      	sub	sp, #20
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
 80152d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	881a      	ldrh	r2, [r3, #0]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	4413      	add	r3, r2
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	461a      	mov	r2, r3
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	4413      	add	r3, r2
 80152f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80152f6:	68fb      	ldr	r3, [r7, #12]
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	3714      	adds	r7, #20
 80152fc:	46bd      	mov	sp, r7
 80152fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015302:	4770      	bx	lr

08015304 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015304:	b480      	push	{r7}
 8015306:	b087      	sub	sp, #28
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	3301      	adds	r3, #1
 801531a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015322:	8a3b      	ldrh	r3, [r7, #16]
 8015324:	021b      	lsls	r3, r3, #8
 8015326:	b21a      	sxth	r2, r3
 8015328:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801532c:	4313      	orrs	r3, r2
 801532e:	b21b      	sxth	r3, r3
 8015330:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015332:	89fb      	ldrh	r3, [r7, #14]
}
 8015334:	4618      	mov	r0, r3
 8015336:	371c      	adds	r7, #28
 8015338:	46bd      	mov	sp, r7
 801533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533e:	4770      	bx	lr

08015340 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801534a:	2300      	movs	r3, #0
 801534c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015356:	2b40      	cmp	r3, #64	; 0x40
 8015358:	d005      	beq.n	8015366 <USBD_StdDevReq+0x26>
 801535a:	2b40      	cmp	r3, #64	; 0x40
 801535c:	d857      	bhi.n	801540e <USBD_StdDevReq+0xce>
 801535e:	2b00      	cmp	r3, #0
 8015360:	d00f      	beq.n	8015382 <USBD_StdDevReq+0x42>
 8015362:	2b20      	cmp	r3, #32
 8015364:	d153      	bne.n	801540e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	32ae      	adds	r2, #174	; 0xae
 8015370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015374:	689b      	ldr	r3, [r3, #8]
 8015376:	6839      	ldr	r1, [r7, #0]
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	4798      	blx	r3
 801537c:	4603      	mov	r3, r0
 801537e:	73fb      	strb	r3, [r7, #15]
      break;
 8015380:	e04a      	b.n	8015418 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	785b      	ldrb	r3, [r3, #1]
 8015386:	2b09      	cmp	r3, #9
 8015388:	d83b      	bhi.n	8015402 <USBD_StdDevReq+0xc2>
 801538a:	a201      	add	r2, pc, #4	; (adr r2, 8015390 <USBD_StdDevReq+0x50>)
 801538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015390:	080153e5 	.word	0x080153e5
 8015394:	080153f9 	.word	0x080153f9
 8015398:	08015403 	.word	0x08015403
 801539c:	080153ef 	.word	0x080153ef
 80153a0:	08015403 	.word	0x08015403
 80153a4:	080153c3 	.word	0x080153c3
 80153a8:	080153b9 	.word	0x080153b9
 80153ac:	08015403 	.word	0x08015403
 80153b0:	080153db 	.word	0x080153db
 80153b4:	080153cd 	.word	0x080153cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80153b8:	6839      	ldr	r1, [r7, #0]
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f000 fa3c 	bl	8015838 <USBD_GetDescriptor>
          break;
 80153c0:	e024      	b.n	801540c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80153c2:	6839      	ldr	r1, [r7, #0]
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f000 fba1 	bl	8015b0c <USBD_SetAddress>
          break;
 80153ca:	e01f      	b.n	801540c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80153cc:	6839      	ldr	r1, [r7, #0]
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f000 fbe0 	bl	8015b94 <USBD_SetConfig>
 80153d4:	4603      	mov	r3, r0
 80153d6:	73fb      	strb	r3, [r7, #15]
          break;
 80153d8:	e018      	b.n	801540c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80153da:	6839      	ldr	r1, [r7, #0]
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f000 fc83 	bl	8015ce8 <USBD_GetConfig>
          break;
 80153e2:	e013      	b.n	801540c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80153e4:	6839      	ldr	r1, [r7, #0]
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f000 fcb4 	bl	8015d54 <USBD_GetStatus>
          break;
 80153ec:	e00e      	b.n	801540c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80153ee:	6839      	ldr	r1, [r7, #0]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f000 fce3 	bl	8015dbc <USBD_SetFeature>
          break;
 80153f6:	e009      	b.n	801540c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80153f8:	6839      	ldr	r1, [r7, #0]
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 fd07 	bl	8015e0e <USBD_ClrFeature>
          break;
 8015400:	e004      	b.n	801540c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015402:	6839      	ldr	r1, [r7, #0]
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f000 fd5e 	bl	8015ec6 <USBD_CtlError>
          break;
 801540a:	bf00      	nop
      }
      break;
 801540c:	e004      	b.n	8015418 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801540e:	6839      	ldr	r1, [r7, #0]
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f000 fd58 	bl	8015ec6 <USBD_CtlError>
      break;
 8015416:	bf00      	nop
  }

  return ret;
 8015418:	7bfb      	ldrb	r3, [r7, #15]
}
 801541a:	4618      	mov	r0, r3
 801541c:	3710      	adds	r7, #16
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop

08015424 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801542e:	2300      	movs	r3, #0
 8015430:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	781b      	ldrb	r3, [r3, #0]
 8015436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801543a:	2b40      	cmp	r3, #64	; 0x40
 801543c:	d005      	beq.n	801544a <USBD_StdItfReq+0x26>
 801543e:	2b40      	cmp	r3, #64	; 0x40
 8015440:	d852      	bhi.n	80154e8 <USBD_StdItfReq+0xc4>
 8015442:	2b00      	cmp	r3, #0
 8015444:	d001      	beq.n	801544a <USBD_StdItfReq+0x26>
 8015446:	2b20      	cmp	r3, #32
 8015448:	d14e      	bne.n	80154e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015450:	b2db      	uxtb	r3, r3
 8015452:	3b01      	subs	r3, #1
 8015454:	2b02      	cmp	r3, #2
 8015456:	d840      	bhi.n	80154da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	889b      	ldrh	r3, [r3, #4]
 801545c:	b2db      	uxtb	r3, r3
 801545e:	2b01      	cmp	r3, #1
 8015460:	d836      	bhi.n	80154d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	889b      	ldrh	r3, [r3, #4]
 8015466:	b2db      	uxtb	r3, r3
 8015468:	4619      	mov	r1, r3
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f7ff fed9 	bl	8015222 <USBD_CoreFindIF>
 8015470:	4603      	mov	r3, r0
 8015472:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015474:	7bbb      	ldrb	r3, [r7, #14]
 8015476:	2bff      	cmp	r3, #255	; 0xff
 8015478:	d01d      	beq.n	80154b6 <USBD_StdItfReq+0x92>
 801547a:	7bbb      	ldrb	r3, [r7, #14]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d11a      	bne.n	80154b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015480:	7bba      	ldrb	r2, [r7, #14]
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	32ae      	adds	r2, #174	; 0xae
 8015486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801548a:	689b      	ldr	r3, [r3, #8]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d00f      	beq.n	80154b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015490:	7bba      	ldrb	r2, [r7, #14]
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015498:	7bba      	ldrb	r2, [r7, #14]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	32ae      	adds	r2, #174	; 0xae
 801549e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154a2:	689b      	ldr	r3, [r3, #8]
 80154a4:	6839      	ldr	r1, [r7, #0]
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	4798      	blx	r3
 80154aa:	4603      	mov	r3, r0
 80154ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80154ae:	e004      	b.n	80154ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80154b0:	2303      	movs	r3, #3
 80154b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80154b4:	e001      	b.n	80154ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80154b6:	2303      	movs	r3, #3
 80154b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	88db      	ldrh	r3, [r3, #6]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d110      	bne.n	80154e4 <USBD_StdItfReq+0xc0>
 80154c2:	7bfb      	ldrb	r3, [r7, #15]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d10d      	bne.n	80154e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 fdc7 	bl	801605c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80154ce:	e009      	b.n	80154e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80154d0:	6839      	ldr	r1, [r7, #0]
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f000 fcf7 	bl	8015ec6 <USBD_CtlError>
          break;
 80154d8:	e004      	b.n	80154e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80154da:	6839      	ldr	r1, [r7, #0]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 fcf2 	bl	8015ec6 <USBD_CtlError>
          break;
 80154e2:	e000      	b.n	80154e6 <USBD_StdItfReq+0xc2>
          break;
 80154e4:	bf00      	nop
      }
      break;
 80154e6:	e004      	b.n	80154f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80154e8:	6839      	ldr	r1, [r7, #0]
 80154ea:	6878      	ldr	r0, [r7, #4]
 80154ec:	f000 fceb 	bl	8015ec6 <USBD_CtlError>
      break;
 80154f0:	bf00      	nop
  }

  return ret;
 80154f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3710      	adds	r7, #16
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015506:	2300      	movs	r3, #0
 8015508:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	889b      	ldrh	r3, [r3, #4]
 801550e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	781b      	ldrb	r3, [r3, #0]
 8015514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015518:	2b40      	cmp	r3, #64	; 0x40
 801551a:	d007      	beq.n	801552c <USBD_StdEPReq+0x30>
 801551c:	2b40      	cmp	r3, #64	; 0x40
 801551e:	f200 817f 	bhi.w	8015820 <USBD_StdEPReq+0x324>
 8015522:	2b00      	cmp	r3, #0
 8015524:	d02a      	beq.n	801557c <USBD_StdEPReq+0x80>
 8015526:	2b20      	cmp	r3, #32
 8015528:	f040 817a 	bne.w	8015820 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801552c:	7bbb      	ldrb	r3, [r7, #14]
 801552e:	4619      	mov	r1, r3
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7ff fe83 	bl	801523c <USBD_CoreFindEP>
 8015536:	4603      	mov	r3, r0
 8015538:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801553a:	7b7b      	ldrb	r3, [r7, #13]
 801553c:	2bff      	cmp	r3, #255	; 0xff
 801553e:	f000 8174 	beq.w	801582a <USBD_StdEPReq+0x32e>
 8015542:	7b7b      	ldrb	r3, [r7, #13]
 8015544:	2b00      	cmp	r3, #0
 8015546:	f040 8170 	bne.w	801582a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801554a:	7b7a      	ldrb	r2, [r7, #13]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015552:	7b7a      	ldrb	r2, [r7, #13]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	32ae      	adds	r2, #174	; 0xae
 8015558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801555c:	689b      	ldr	r3, [r3, #8]
 801555e:	2b00      	cmp	r3, #0
 8015560:	f000 8163 	beq.w	801582a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015564:	7b7a      	ldrb	r2, [r7, #13]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	32ae      	adds	r2, #174	; 0xae
 801556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801556e:	689b      	ldr	r3, [r3, #8]
 8015570:	6839      	ldr	r1, [r7, #0]
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	4798      	blx	r3
 8015576:	4603      	mov	r3, r0
 8015578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801557a:	e156      	b.n	801582a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	785b      	ldrb	r3, [r3, #1]
 8015580:	2b03      	cmp	r3, #3
 8015582:	d008      	beq.n	8015596 <USBD_StdEPReq+0x9a>
 8015584:	2b03      	cmp	r3, #3
 8015586:	f300 8145 	bgt.w	8015814 <USBD_StdEPReq+0x318>
 801558a:	2b00      	cmp	r3, #0
 801558c:	f000 809b 	beq.w	80156c6 <USBD_StdEPReq+0x1ca>
 8015590:	2b01      	cmp	r3, #1
 8015592:	d03c      	beq.n	801560e <USBD_StdEPReq+0x112>
 8015594:	e13e      	b.n	8015814 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801559c:	b2db      	uxtb	r3, r3
 801559e:	2b02      	cmp	r3, #2
 80155a0:	d002      	beq.n	80155a8 <USBD_StdEPReq+0xac>
 80155a2:	2b03      	cmp	r3, #3
 80155a4:	d016      	beq.n	80155d4 <USBD_StdEPReq+0xd8>
 80155a6:	e02c      	b.n	8015602 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80155a8:	7bbb      	ldrb	r3, [r7, #14]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d00d      	beq.n	80155ca <USBD_StdEPReq+0xce>
 80155ae:	7bbb      	ldrb	r3, [r7, #14]
 80155b0:	2b80      	cmp	r3, #128	; 0x80
 80155b2:	d00a      	beq.n	80155ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80155b4:	7bbb      	ldrb	r3, [r7, #14]
 80155b6:	4619      	mov	r1, r3
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f001 f99d 	bl	80168f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80155be:	2180      	movs	r1, #128	; 0x80
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f001 f999 	bl	80168f8 <USBD_LL_StallEP>
 80155c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80155c8:	e020      	b.n	801560c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80155ca:	6839      	ldr	r1, [r7, #0]
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f000 fc7a 	bl	8015ec6 <USBD_CtlError>
              break;
 80155d2:	e01b      	b.n	801560c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	885b      	ldrh	r3, [r3, #2]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d10e      	bne.n	80155fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80155dc:	7bbb      	ldrb	r3, [r7, #14]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d00b      	beq.n	80155fa <USBD_StdEPReq+0xfe>
 80155e2:	7bbb      	ldrb	r3, [r7, #14]
 80155e4:	2b80      	cmp	r3, #128	; 0x80
 80155e6:	d008      	beq.n	80155fa <USBD_StdEPReq+0xfe>
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	88db      	ldrh	r3, [r3, #6]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d104      	bne.n	80155fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80155f0:	7bbb      	ldrb	r3, [r7, #14]
 80155f2:	4619      	mov	r1, r3
 80155f4:	6878      	ldr	r0, [r7, #4]
 80155f6:	f001 f97f 	bl	80168f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f000 fd2e 	bl	801605c <USBD_CtlSendStatus>

              break;
 8015600:	e004      	b.n	801560c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015602:	6839      	ldr	r1, [r7, #0]
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f000 fc5e 	bl	8015ec6 <USBD_CtlError>
              break;
 801560a:	bf00      	nop
          }
          break;
 801560c:	e107      	b.n	801581e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015614:	b2db      	uxtb	r3, r3
 8015616:	2b02      	cmp	r3, #2
 8015618:	d002      	beq.n	8015620 <USBD_StdEPReq+0x124>
 801561a:	2b03      	cmp	r3, #3
 801561c:	d016      	beq.n	801564c <USBD_StdEPReq+0x150>
 801561e:	e04b      	b.n	80156b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015620:	7bbb      	ldrb	r3, [r7, #14]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d00d      	beq.n	8015642 <USBD_StdEPReq+0x146>
 8015626:	7bbb      	ldrb	r3, [r7, #14]
 8015628:	2b80      	cmp	r3, #128	; 0x80
 801562a:	d00a      	beq.n	8015642 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801562c:	7bbb      	ldrb	r3, [r7, #14]
 801562e:	4619      	mov	r1, r3
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f001 f961 	bl	80168f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015636:	2180      	movs	r1, #128	; 0x80
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f001 f95d 	bl	80168f8 <USBD_LL_StallEP>
 801563e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015640:	e040      	b.n	80156c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015642:	6839      	ldr	r1, [r7, #0]
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f000 fc3e 	bl	8015ec6 <USBD_CtlError>
              break;
 801564a:	e03b      	b.n	80156c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	885b      	ldrh	r3, [r3, #2]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d136      	bne.n	80156c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015654:	7bbb      	ldrb	r3, [r7, #14]
 8015656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801565a:	2b00      	cmp	r3, #0
 801565c:	d004      	beq.n	8015668 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801565e:	7bbb      	ldrb	r3, [r7, #14]
 8015660:	4619      	mov	r1, r3
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	f001 f967 	bl	8016936 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f000 fcf7 	bl	801605c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801566e:	7bbb      	ldrb	r3, [r7, #14]
 8015670:	4619      	mov	r1, r3
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f7ff fde2 	bl	801523c <USBD_CoreFindEP>
 8015678:	4603      	mov	r3, r0
 801567a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801567c:	7b7b      	ldrb	r3, [r7, #13]
 801567e:	2bff      	cmp	r3, #255	; 0xff
 8015680:	d01f      	beq.n	80156c2 <USBD_StdEPReq+0x1c6>
 8015682:	7b7b      	ldrb	r3, [r7, #13]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d11c      	bne.n	80156c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015688:	7b7a      	ldrb	r2, [r7, #13]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015690:	7b7a      	ldrb	r2, [r7, #13]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	32ae      	adds	r2, #174	; 0xae
 8015696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801569a:	689b      	ldr	r3, [r3, #8]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d010      	beq.n	80156c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80156a0:	7b7a      	ldrb	r2, [r7, #13]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	32ae      	adds	r2, #174	; 0xae
 80156a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156aa:	689b      	ldr	r3, [r3, #8]
 80156ac:	6839      	ldr	r1, [r7, #0]
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	4798      	blx	r3
 80156b2:	4603      	mov	r3, r0
 80156b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80156b6:	e004      	b.n	80156c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80156b8:	6839      	ldr	r1, [r7, #0]
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f000 fc03 	bl	8015ec6 <USBD_CtlError>
              break;
 80156c0:	e000      	b.n	80156c4 <USBD_StdEPReq+0x1c8>
              break;
 80156c2:	bf00      	nop
          }
          break;
 80156c4:	e0ab      	b.n	801581e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156cc:	b2db      	uxtb	r3, r3
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	d002      	beq.n	80156d8 <USBD_StdEPReq+0x1dc>
 80156d2:	2b03      	cmp	r3, #3
 80156d4:	d032      	beq.n	801573c <USBD_StdEPReq+0x240>
 80156d6:	e097      	b.n	8015808 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156d8:	7bbb      	ldrb	r3, [r7, #14]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d007      	beq.n	80156ee <USBD_StdEPReq+0x1f2>
 80156de:	7bbb      	ldrb	r3, [r7, #14]
 80156e0:	2b80      	cmp	r3, #128	; 0x80
 80156e2:	d004      	beq.n	80156ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80156e4:	6839      	ldr	r1, [r7, #0]
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f000 fbed 	bl	8015ec6 <USBD_CtlError>
                break;
 80156ec:	e091      	b.n	8015812 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	da0b      	bge.n	801570e <USBD_StdEPReq+0x212>
 80156f6:	7bbb      	ldrb	r3, [r7, #14]
 80156f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80156fc:	4613      	mov	r3, r2
 80156fe:	009b      	lsls	r3, r3, #2
 8015700:	4413      	add	r3, r2
 8015702:	009b      	lsls	r3, r3, #2
 8015704:	3310      	adds	r3, #16
 8015706:	687a      	ldr	r2, [r7, #4]
 8015708:	4413      	add	r3, r2
 801570a:	3304      	adds	r3, #4
 801570c:	e00b      	b.n	8015726 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801570e:	7bbb      	ldrb	r3, [r7, #14]
 8015710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015714:	4613      	mov	r3, r2
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	4413      	add	r3, r2
 801571a:	009b      	lsls	r3, r3, #2
 801571c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015720:	687a      	ldr	r2, [r7, #4]
 8015722:	4413      	add	r3, r2
 8015724:	3304      	adds	r3, #4
 8015726:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	2200      	movs	r2, #0
 801572c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	2202      	movs	r2, #2
 8015732:	4619      	mov	r1, r3
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f000 fc37 	bl	8015fa8 <USBD_CtlSendData>
              break;
 801573a:	e06a      	b.n	8015812 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801573c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015740:	2b00      	cmp	r3, #0
 8015742:	da11      	bge.n	8015768 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015744:	7bbb      	ldrb	r3, [r7, #14]
 8015746:	f003 020f 	and.w	r2, r3, #15
 801574a:	6879      	ldr	r1, [r7, #4]
 801574c:	4613      	mov	r3, r2
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	4413      	add	r3, r2
 8015752:	009b      	lsls	r3, r3, #2
 8015754:	440b      	add	r3, r1
 8015756:	3324      	adds	r3, #36	; 0x24
 8015758:	881b      	ldrh	r3, [r3, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d117      	bne.n	801578e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801575e:	6839      	ldr	r1, [r7, #0]
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f000 fbb0 	bl	8015ec6 <USBD_CtlError>
                  break;
 8015766:	e054      	b.n	8015812 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015768:	7bbb      	ldrb	r3, [r7, #14]
 801576a:	f003 020f 	and.w	r2, r3, #15
 801576e:	6879      	ldr	r1, [r7, #4]
 8015770:	4613      	mov	r3, r2
 8015772:	009b      	lsls	r3, r3, #2
 8015774:	4413      	add	r3, r2
 8015776:	009b      	lsls	r3, r3, #2
 8015778:	440b      	add	r3, r1
 801577a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801577e:	881b      	ldrh	r3, [r3, #0]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d104      	bne.n	801578e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015784:	6839      	ldr	r1, [r7, #0]
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f000 fb9d 	bl	8015ec6 <USBD_CtlError>
                  break;
 801578c:	e041      	b.n	8015812 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801578e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015792:	2b00      	cmp	r3, #0
 8015794:	da0b      	bge.n	80157ae <USBD_StdEPReq+0x2b2>
 8015796:	7bbb      	ldrb	r3, [r7, #14]
 8015798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801579c:	4613      	mov	r3, r2
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	4413      	add	r3, r2
 80157a2:	009b      	lsls	r3, r3, #2
 80157a4:	3310      	adds	r3, #16
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	4413      	add	r3, r2
 80157aa:	3304      	adds	r3, #4
 80157ac:	e00b      	b.n	80157c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80157ae:	7bbb      	ldrb	r3, [r7, #14]
 80157b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157b4:	4613      	mov	r3, r2
 80157b6:	009b      	lsls	r3, r3, #2
 80157b8:	4413      	add	r3, r2
 80157ba:	009b      	lsls	r3, r3, #2
 80157bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	4413      	add	r3, r2
 80157c4:	3304      	adds	r3, #4
 80157c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80157c8:	7bbb      	ldrb	r3, [r7, #14]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d002      	beq.n	80157d4 <USBD_StdEPReq+0x2d8>
 80157ce:	7bbb      	ldrb	r3, [r7, #14]
 80157d0:	2b80      	cmp	r3, #128	; 0x80
 80157d2:	d103      	bne.n	80157dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	2200      	movs	r2, #0
 80157d8:	601a      	str	r2, [r3, #0]
 80157da:	e00e      	b.n	80157fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80157dc:	7bbb      	ldrb	r3, [r7, #14]
 80157de:	4619      	mov	r1, r3
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f001 f8c7 	bl	8016974 <USBD_LL_IsStallEP>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d003      	beq.n	80157f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	2201      	movs	r2, #1
 80157f0:	601a      	str	r2, [r3, #0]
 80157f2:	e002      	b.n	80157fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	2200      	movs	r2, #0
 80157f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	2202      	movs	r2, #2
 80157fe:	4619      	mov	r1, r3
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f000 fbd1 	bl	8015fa8 <USBD_CtlSendData>
              break;
 8015806:	e004      	b.n	8015812 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015808:	6839      	ldr	r1, [r7, #0]
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f000 fb5b 	bl	8015ec6 <USBD_CtlError>
              break;
 8015810:	bf00      	nop
          }
          break;
 8015812:	e004      	b.n	801581e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015814:	6839      	ldr	r1, [r7, #0]
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 fb55 	bl	8015ec6 <USBD_CtlError>
          break;
 801581c:	bf00      	nop
      }
      break;
 801581e:	e005      	b.n	801582c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015820:	6839      	ldr	r1, [r7, #0]
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 fb4f 	bl	8015ec6 <USBD_CtlError>
      break;
 8015828:	e000      	b.n	801582c <USBD_StdEPReq+0x330>
      break;
 801582a:	bf00      	nop
  }

  return ret;
 801582c:	7bfb      	ldrb	r3, [r7, #15]
}
 801582e:	4618      	mov	r0, r3
 8015830:	3710      	adds	r7, #16
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}
	...

08015838 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015842:	2300      	movs	r3, #0
 8015844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015846:	2300      	movs	r3, #0
 8015848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801584a:	2300      	movs	r3, #0
 801584c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	885b      	ldrh	r3, [r3, #2]
 8015852:	0a1b      	lsrs	r3, r3, #8
 8015854:	b29b      	uxth	r3, r3
 8015856:	3b01      	subs	r3, #1
 8015858:	2b06      	cmp	r3, #6
 801585a:	f200 8128 	bhi.w	8015aae <USBD_GetDescriptor+0x276>
 801585e:	a201      	add	r2, pc, #4	; (adr r2, 8015864 <USBD_GetDescriptor+0x2c>)
 8015860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015864:	08015881 	.word	0x08015881
 8015868:	08015899 	.word	0x08015899
 801586c:	080158d9 	.word	0x080158d9
 8015870:	08015aaf 	.word	0x08015aaf
 8015874:	08015aaf 	.word	0x08015aaf
 8015878:	08015a4f 	.word	0x08015a4f
 801587c:	08015a7b 	.word	0x08015a7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	687a      	ldr	r2, [r7, #4]
 801588a:	7c12      	ldrb	r2, [r2, #16]
 801588c:	f107 0108 	add.w	r1, r7, #8
 8015890:	4610      	mov	r0, r2
 8015892:	4798      	blx	r3
 8015894:	60f8      	str	r0, [r7, #12]
      break;
 8015896:	e112      	b.n	8015abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	7c1b      	ldrb	r3, [r3, #16]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d10d      	bne.n	80158bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158a8:	f107 0208 	add.w	r2, r7, #8
 80158ac:	4610      	mov	r0, r2
 80158ae:	4798      	blx	r3
 80158b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	3301      	adds	r3, #1
 80158b6:	2202      	movs	r2, #2
 80158b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80158ba:	e100      	b.n	8015abe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158c4:	f107 0208 	add.w	r2, r7, #8
 80158c8:	4610      	mov	r0, r2
 80158ca:	4798      	blx	r3
 80158cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	3301      	adds	r3, #1
 80158d2:	2202      	movs	r2, #2
 80158d4:	701a      	strb	r2, [r3, #0]
      break;
 80158d6:	e0f2      	b.n	8015abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	885b      	ldrh	r3, [r3, #2]
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	2b05      	cmp	r3, #5
 80158e0:	f200 80ac 	bhi.w	8015a3c <USBD_GetDescriptor+0x204>
 80158e4:	a201      	add	r2, pc, #4	; (adr r2, 80158ec <USBD_GetDescriptor+0xb4>)
 80158e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158ea:	bf00      	nop
 80158ec:	08015905 	.word	0x08015905
 80158f0:	08015939 	.word	0x08015939
 80158f4:	0801596d 	.word	0x0801596d
 80158f8:	080159a1 	.word	0x080159a1
 80158fc:	080159d5 	.word	0x080159d5
 8015900:	08015a09 	.word	0x08015a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d00b      	beq.n	8015928 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015916:	685b      	ldr	r3, [r3, #4]
 8015918:	687a      	ldr	r2, [r7, #4]
 801591a:	7c12      	ldrb	r2, [r2, #16]
 801591c:	f107 0108 	add.w	r1, r7, #8
 8015920:	4610      	mov	r0, r2
 8015922:	4798      	blx	r3
 8015924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015926:	e091      	b.n	8015a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015928:	6839      	ldr	r1, [r7, #0]
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f000 facb 	bl	8015ec6 <USBD_CtlError>
            err++;
 8015930:	7afb      	ldrb	r3, [r7, #11]
 8015932:	3301      	adds	r3, #1
 8015934:	72fb      	strb	r3, [r7, #11]
          break;
 8015936:	e089      	b.n	8015a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801593e:	689b      	ldr	r3, [r3, #8]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d00b      	beq.n	801595c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801594a:	689b      	ldr	r3, [r3, #8]
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	7c12      	ldrb	r2, [r2, #16]
 8015950:	f107 0108 	add.w	r1, r7, #8
 8015954:	4610      	mov	r0, r2
 8015956:	4798      	blx	r3
 8015958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801595a:	e077      	b.n	8015a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801595c:	6839      	ldr	r1, [r7, #0]
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f000 fab1 	bl	8015ec6 <USBD_CtlError>
            err++;
 8015964:	7afb      	ldrb	r3, [r7, #11]
 8015966:	3301      	adds	r3, #1
 8015968:	72fb      	strb	r3, [r7, #11]
          break;
 801596a:	e06f      	b.n	8015a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015972:	68db      	ldr	r3, [r3, #12]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d00b      	beq.n	8015990 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801597e:	68db      	ldr	r3, [r3, #12]
 8015980:	687a      	ldr	r2, [r7, #4]
 8015982:	7c12      	ldrb	r2, [r2, #16]
 8015984:	f107 0108 	add.w	r1, r7, #8
 8015988:	4610      	mov	r0, r2
 801598a:	4798      	blx	r3
 801598c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801598e:	e05d      	b.n	8015a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015990:	6839      	ldr	r1, [r7, #0]
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 fa97 	bl	8015ec6 <USBD_CtlError>
            err++;
 8015998:	7afb      	ldrb	r3, [r7, #11]
 801599a:	3301      	adds	r3, #1
 801599c:	72fb      	strb	r3, [r7, #11]
          break;
 801599e:	e055      	b.n	8015a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159a6:	691b      	ldr	r3, [r3, #16]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00b      	beq.n	80159c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159b2:	691b      	ldr	r3, [r3, #16]
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	7c12      	ldrb	r2, [r2, #16]
 80159b8:	f107 0108 	add.w	r1, r7, #8
 80159bc:	4610      	mov	r0, r2
 80159be:	4798      	blx	r3
 80159c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159c2:	e043      	b.n	8015a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f000 fa7d 	bl	8015ec6 <USBD_CtlError>
            err++;
 80159cc:	7afb      	ldrb	r3, [r7, #11]
 80159ce:	3301      	adds	r3, #1
 80159d0:	72fb      	strb	r3, [r7, #11]
          break;
 80159d2:	e03b      	b.n	8015a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159da:	695b      	ldr	r3, [r3, #20]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d00b      	beq.n	80159f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159e6:	695b      	ldr	r3, [r3, #20]
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	7c12      	ldrb	r2, [r2, #16]
 80159ec:	f107 0108 	add.w	r1, r7, #8
 80159f0:	4610      	mov	r0, r2
 80159f2:	4798      	blx	r3
 80159f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159f6:	e029      	b.n	8015a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80159f8:	6839      	ldr	r1, [r7, #0]
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 fa63 	bl	8015ec6 <USBD_CtlError>
            err++;
 8015a00:	7afb      	ldrb	r3, [r7, #11]
 8015a02:	3301      	adds	r3, #1
 8015a04:	72fb      	strb	r3, [r7, #11]
          break;
 8015a06:	e021      	b.n	8015a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a0e:	699b      	ldr	r3, [r3, #24]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d00b      	beq.n	8015a2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a1a:	699b      	ldr	r3, [r3, #24]
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	7c12      	ldrb	r2, [r2, #16]
 8015a20:	f107 0108 	add.w	r1, r7, #8
 8015a24:	4610      	mov	r0, r2
 8015a26:	4798      	blx	r3
 8015a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a2a:	e00f      	b.n	8015a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a2c:	6839      	ldr	r1, [r7, #0]
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f000 fa49 	bl	8015ec6 <USBD_CtlError>
            err++;
 8015a34:	7afb      	ldrb	r3, [r7, #11]
 8015a36:	3301      	adds	r3, #1
 8015a38:	72fb      	strb	r3, [r7, #11]
          break;
 8015a3a:	e007      	b.n	8015a4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015a3c:	6839      	ldr	r1, [r7, #0]
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f000 fa41 	bl	8015ec6 <USBD_CtlError>
          err++;
 8015a44:	7afb      	ldrb	r3, [r7, #11]
 8015a46:	3301      	adds	r3, #1
 8015a48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015a4a:	bf00      	nop
      }
      break;
 8015a4c:	e037      	b.n	8015abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	7c1b      	ldrb	r3, [r3, #16]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d109      	bne.n	8015a6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a5e:	f107 0208 	add.w	r2, r7, #8
 8015a62:	4610      	mov	r0, r2
 8015a64:	4798      	blx	r3
 8015a66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a68:	e029      	b.n	8015abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015a6a:	6839      	ldr	r1, [r7, #0]
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f000 fa2a 	bl	8015ec6 <USBD_CtlError>
        err++;
 8015a72:	7afb      	ldrb	r3, [r7, #11]
 8015a74:	3301      	adds	r3, #1
 8015a76:	72fb      	strb	r3, [r7, #11]
      break;
 8015a78:	e021      	b.n	8015abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	7c1b      	ldrb	r3, [r3, #16]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d10d      	bne.n	8015a9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a8a:	f107 0208 	add.w	r2, r7, #8
 8015a8e:	4610      	mov	r0, r2
 8015a90:	4798      	blx	r3
 8015a92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	3301      	adds	r3, #1
 8015a98:	2207      	movs	r2, #7
 8015a9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a9c:	e00f      	b.n	8015abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015a9e:	6839      	ldr	r1, [r7, #0]
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f000 fa10 	bl	8015ec6 <USBD_CtlError>
        err++;
 8015aa6:	7afb      	ldrb	r3, [r7, #11]
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8015aac:	e007      	b.n	8015abe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015aae:	6839      	ldr	r1, [r7, #0]
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f000 fa08 	bl	8015ec6 <USBD_CtlError>
      err++;
 8015ab6:	7afb      	ldrb	r3, [r7, #11]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	72fb      	strb	r3, [r7, #11]
      break;
 8015abc:	bf00      	nop
  }

  if (err != 0U)
 8015abe:	7afb      	ldrb	r3, [r7, #11]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d11e      	bne.n	8015b02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	88db      	ldrh	r3, [r3, #6]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d016      	beq.n	8015afa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015acc:	893b      	ldrh	r3, [r7, #8]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d00e      	beq.n	8015af0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	88da      	ldrh	r2, [r3, #6]
 8015ad6:	893b      	ldrh	r3, [r7, #8]
 8015ad8:	4293      	cmp	r3, r2
 8015ada:	bf28      	it	cs
 8015adc:	4613      	movcs	r3, r2
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ae2:	893b      	ldrh	r3, [r7, #8]
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	68f9      	ldr	r1, [r7, #12]
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f000 fa5d 	bl	8015fa8 <USBD_CtlSendData>
 8015aee:	e009      	b.n	8015b04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015af0:	6839      	ldr	r1, [r7, #0]
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f000 f9e7 	bl	8015ec6 <USBD_CtlError>
 8015af8:	e004      	b.n	8015b04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f000 faae 	bl	801605c <USBD_CtlSendStatus>
 8015b00:	e000      	b.n	8015b04 <USBD_GetDescriptor+0x2cc>
    return;
 8015b02:	bf00      	nop
  }
}
 8015b04:	3710      	adds	r7, #16
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop

08015b0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b084      	sub	sp, #16
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
 8015b14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	889b      	ldrh	r3, [r3, #4]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d131      	bne.n	8015b82 <USBD_SetAddress+0x76>
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	88db      	ldrh	r3, [r3, #6]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d12d      	bne.n	8015b82 <USBD_SetAddress+0x76>
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	885b      	ldrh	r3, [r3, #2]
 8015b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8015b2c:	d829      	bhi.n	8015b82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	885b      	ldrh	r3, [r3, #2]
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	2b03      	cmp	r3, #3
 8015b44:	d104      	bne.n	8015b50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015b46:	6839      	ldr	r1, [r7, #0]
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f000 f9bc 	bl	8015ec6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b4e:	e01d      	b.n	8015b8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	7bfa      	ldrb	r2, [r7, #15]
 8015b54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015b58:	7bfb      	ldrb	r3, [r7, #15]
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 ff35 	bl	80169cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f000 fa7a 	bl	801605c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015b68:	7bfb      	ldrb	r3, [r7, #15]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d004      	beq.n	8015b78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2202      	movs	r2, #2
 8015b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b76:	e009      	b.n	8015b8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b80:	e004      	b.n	8015b8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015b82:	6839      	ldr	r1, [r7, #0]
 8015b84:	6878      	ldr	r0, [r7, #4]
 8015b86:	f000 f99e 	bl	8015ec6 <USBD_CtlError>
  }
}
 8015b8a:	bf00      	nop
 8015b8c:	bf00      	nop
 8015b8e:	3710      	adds	r7, #16
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	885b      	ldrh	r3, [r3, #2]
 8015ba6:	b2da      	uxtb	r2, r3
 8015ba8:	4b4e      	ldr	r3, [pc, #312]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015baa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015bac:	4b4d      	ldr	r3, [pc, #308]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d905      	bls.n	8015bc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015bb4:	6839      	ldr	r1, [r7, #0]
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f000 f985 	bl	8015ec6 <USBD_CtlError>
    return USBD_FAIL;
 8015bbc:	2303      	movs	r3, #3
 8015bbe:	e08c      	b.n	8015cda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	2b02      	cmp	r3, #2
 8015bca:	d002      	beq.n	8015bd2 <USBD_SetConfig+0x3e>
 8015bcc:	2b03      	cmp	r3, #3
 8015bce:	d029      	beq.n	8015c24 <USBD_SetConfig+0x90>
 8015bd0:	e075      	b.n	8015cbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015bd2:	4b44      	ldr	r3, [pc, #272]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d020      	beq.n	8015c1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015bda:	4b42      	ldr	r3, [pc, #264]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015bdc:	781b      	ldrb	r3, [r3, #0]
 8015bde:	461a      	mov	r2, r3
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015be4:	4b3f      	ldr	r3, [pc, #252]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	4619      	mov	r1, r3
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7fe ffe1 	bl	8014bb2 <USBD_SetClassConfig>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015bf4:	7bfb      	ldrb	r3, [r7, #15]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d008      	beq.n	8015c0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015bfa:	6839      	ldr	r1, [r7, #0]
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f000 f962 	bl	8015ec6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2202      	movs	r2, #2
 8015c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c0a:	e065      	b.n	8015cd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f000 fa25 	bl	801605c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2203      	movs	r2, #3
 8015c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015c1a:	e05d      	b.n	8015cd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fa1d 	bl	801605c <USBD_CtlSendStatus>
      break;
 8015c22:	e059      	b.n	8015cd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015c24:	4b2f      	ldr	r3, [pc, #188]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015c26:	781b      	ldrb	r3, [r3, #0]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d112      	bne.n	8015c52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2202      	movs	r2, #2
 8015c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015c34:	4b2b      	ldr	r3, [pc, #172]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	461a      	mov	r2, r3
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015c3e:	4b29      	ldr	r3, [pc, #164]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	4619      	mov	r1, r3
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f7fe ffd0 	bl	8014bea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	f000 fa06 	bl	801605c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c50:	e042      	b.n	8015cd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015c52:	4b24      	ldr	r3, [pc, #144]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	461a      	mov	r2, r3
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d02a      	beq.n	8015cb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	685b      	ldr	r3, [r3, #4]
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	4619      	mov	r1, r3
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f7fe ffbe 	bl	8014bea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015c6e:	4b1d      	ldr	r3, [pc, #116]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	461a      	mov	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015c78:	4b1a      	ldr	r3, [pc, #104]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	4619      	mov	r1, r3
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f7fe ff97 	bl	8014bb2 <USBD_SetClassConfig>
 8015c84:	4603      	mov	r3, r0
 8015c86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015c88:	7bfb      	ldrb	r3, [r7, #15]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d00f      	beq.n	8015cae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015c8e:	6839      	ldr	r1, [r7, #0]
 8015c90:	6878      	ldr	r0, [r7, #4]
 8015c92:	f000 f918 	bl	8015ec6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	6878      	ldr	r0, [r7, #4]
 8015ca0:	f7fe ffa3 	bl	8014bea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2202      	movs	r2, #2
 8015ca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015cac:	e014      	b.n	8015cd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f000 f9d4 	bl	801605c <USBD_CtlSendStatus>
      break;
 8015cb4:	e010      	b.n	8015cd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f000 f9d0 	bl	801605c <USBD_CtlSendStatus>
      break;
 8015cbc:	e00c      	b.n	8015cd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015cbe:	6839      	ldr	r1, [r7, #0]
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f000 f900 	bl	8015ec6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015cc6:	4b07      	ldr	r3, [pc, #28]	; (8015ce4 <USBD_SetConfig+0x150>)
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	4619      	mov	r1, r3
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f7fe ff8c 	bl	8014bea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015cd2:	2303      	movs	r3, #3
 8015cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8015cd6:	bf00      	nop
  }

  return ret;
 8015cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3710      	adds	r7, #16
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	240014a8 	.word	0x240014a8

08015ce8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	88db      	ldrh	r3, [r3, #6]
 8015cf6:	2b01      	cmp	r3, #1
 8015cf8:	d004      	beq.n	8015d04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015cfa:	6839      	ldr	r1, [r7, #0]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f000 f8e2 	bl	8015ec6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015d02:	e023      	b.n	8015d4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d0a:	b2db      	uxtb	r3, r3
 8015d0c:	2b02      	cmp	r3, #2
 8015d0e:	dc02      	bgt.n	8015d16 <USBD_GetConfig+0x2e>
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	dc03      	bgt.n	8015d1c <USBD_GetConfig+0x34>
 8015d14:	e015      	b.n	8015d42 <USBD_GetConfig+0x5a>
 8015d16:	2b03      	cmp	r3, #3
 8015d18:	d00b      	beq.n	8015d32 <USBD_GetConfig+0x4a>
 8015d1a:	e012      	b.n	8015d42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	3308      	adds	r3, #8
 8015d26:	2201      	movs	r2, #1
 8015d28:	4619      	mov	r1, r3
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f000 f93c 	bl	8015fa8 <USBD_CtlSendData>
        break;
 8015d30:	e00c      	b.n	8015d4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	3304      	adds	r3, #4
 8015d36:	2201      	movs	r2, #1
 8015d38:	4619      	mov	r1, r3
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f000 f934 	bl	8015fa8 <USBD_CtlSendData>
        break;
 8015d40:	e004      	b.n	8015d4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015d42:	6839      	ldr	r1, [r7, #0]
 8015d44:	6878      	ldr	r0, [r7, #4]
 8015d46:	f000 f8be 	bl	8015ec6 <USBD_CtlError>
        break;
 8015d4a:	bf00      	nop
}
 8015d4c:	bf00      	nop
 8015d4e:	3708      	adds	r7, #8
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}

08015d54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b082      	sub	sp, #8
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	3b01      	subs	r3, #1
 8015d68:	2b02      	cmp	r3, #2
 8015d6a:	d81e      	bhi.n	8015daa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	88db      	ldrh	r3, [r3, #6]
 8015d70:	2b02      	cmp	r3, #2
 8015d72:	d004      	beq.n	8015d7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015d74:	6839      	ldr	r1, [r7, #0]
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f000 f8a5 	bl	8015ec6 <USBD_CtlError>
        break;
 8015d7c:	e01a      	b.n	8015db4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	2201      	movs	r2, #1
 8015d82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d005      	beq.n	8015d9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	f043 0202 	orr.w	r2, r3, #2
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	330c      	adds	r3, #12
 8015d9e:	2202      	movs	r2, #2
 8015da0:	4619      	mov	r1, r3
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f000 f900 	bl	8015fa8 <USBD_CtlSendData>
      break;
 8015da8:	e004      	b.n	8015db4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015daa:	6839      	ldr	r1, [r7, #0]
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f000 f88a 	bl	8015ec6 <USBD_CtlError>
      break;
 8015db2:	bf00      	nop
  }
}
 8015db4:	bf00      	nop
 8015db6:	3708      	adds	r7, #8
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	885b      	ldrh	r3, [r3, #2]
 8015dca:	2b01      	cmp	r3, #1
 8015dcc:	d107      	bne.n	8015dde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f000 f940 	bl	801605c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015ddc:	e013      	b.n	8015e06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	885b      	ldrh	r3, [r3, #2]
 8015de2:	2b02      	cmp	r3, #2
 8015de4:	d10b      	bne.n	8015dfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	889b      	ldrh	r3, [r3, #4]
 8015dea:	0a1b      	lsrs	r3, r3, #8
 8015dec:	b29b      	uxth	r3, r3
 8015dee:	b2da      	uxtb	r2, r3
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f000 f930 	bl	801605c <USBD_CtlSendStatus>
}
 8015dfc:	e003      	b.n	8015e06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015dfe:	6839      	ldr	r1, [r7, #0]
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f000 f860 	bl	8015ec6 <USBD_CtlError>
}
 8015e06:	bf00      	nop
 8015e08:	3708      	adds	r7, #8
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e0e:	b580      	push	{r7, lr}
 8015e10:	b082      	sub	sp, #8
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
 8015e16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	3b01      	subs	r3, #1
 8015e22:	2b02      	cmp	r3, #2
 8015e24:	d80b      	bhi.n	8015e3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	885b      	ldrh	r3, [r3, #2]
 8015e2a:	2b01      	cmp	r3, #1
 8015e2c:	d10c      	bne.n	8015e48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2200      	movs	r2, #0
 8015e32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 f910 	bl	801605c <USBD_CtlSendStatus>
      }
      break;
 8015e3c:	e004      	b.n	8015e48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f000 f840 	bl	8015ec6 <USBD_CtlError>
      break;
 8015e46:	e000      	b.n	8015e4a <USBD_ClrFeature+0x3c>
      break;
 8015e48:	bf00      	nop
  }
}
 8015e4a:	bf00      	nop
 8015e4c:	3708      	adds	r7, #8
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b084      	sub	sp, #16
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
 8015e5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	781a      	ldrb	r2, [r3, #0]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	781a      	ldrb	r2, [r3, #0]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	3301      	adds	r3, #1
 8015e7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015e7c:	68f8      	ldr	r0, [r7, #12]
 8015e7e:	f7ff fa41 	bl	8015304 <SWAPBYTE>
 8015e82:	4603      	mov	r3, r0
 8015e84:	461a      	mov	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	3301      	adds	r3, #1
 8015e94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f7ff fa34 	bl	8015304 <SWAPBYTE>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	3301      	adds	r3, #1
 8015eae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015eb0:	68f8      	ldr	r0, [r7, #12]
 8015eb2:	f7ff fa27 	bl	8015304 <SWAPBYTE>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	461a      	mov	r2, r3
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	80da      	strh	r2, [r3, #6]
}
 8015ebe:	bf00      	nop
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}

08015ec6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b082      	sub	sp, #8
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
 8015ece:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ed0:	2180      	movs	r1, #128	; 0x80
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f000 fd10 	bl	80168f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015ed8:	2100      	movs	r1, #0
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f000 fd0c 	bl	80168f8 <USBD_LL_StallEP>
}
 8015ee0:	bf00      	nop
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}

08015ee8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b086      	sub	sp, #24
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	60f8      	str	r0, [r7, #12]
 8015ef0:	60b9      	str	r1, [r7, #8]
 8015ef2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d036      	beq.n	8015f6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015f02:	6938      	ldr	r0, [r7, #16]
 8015f04:	f000 f836 	bl	8015f74 <USBD_GetLen>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	3301      	adds	r3, #1
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	005b      	lsls	r3, r3, #1
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015f16:	7dfb      	ldrb	r3, [r7, #23]
 8015f18:	68ba      	ldr	r2, [r7, #8]
 8015f1a:	4413      	add	r3, r2
 8015f1c:	687a      	ldr	r2, [r7, #4]
 8015f1e:	7812      	ldrb	r2, [r2, #0]
 8015f20:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f22:	7dfb      	ldrb	r3, [r7, #23]
 8015f24:	3301      	adds	r3, #1
 8015f26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015f28:	7dfb      	ldrb	r3, [r7, #23]
 8015f2a:	68ba      	ldr	r2, [r7, #8]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	2203      	movs	r2, #3
 8015f30:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f32:	7dfb      	ldrb	r3, [r7, #23]
 8015f34:	3301      	adds	r3, #1
 8015f36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015f38:	e013      	b.n	8015f62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015f3a:	7dfb      	ldrb	r3, [r7, #23]
 8015f3c:	68ba      	ldr	r2, [r7, #8]
 8015f3e:	4413      	add	r3, r2
 8015f40:	693a      	ldr	r2, [r7, #16]
 8015f42:	7812      	ldrb	r2, [r2, #0]
 8015f44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	613b      	str	r3, [r7, #16]
    idx++;
 8015f4c:	7dfb      	ldrb	r3, [r7, #23]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015f52:	7dfb      	ldrb	r3, [r7, #23]
 8015f54:	68ba      	ldr	r2, [r7, #8]
 8015f56:	4413      	add	r3, r2
 8015f58:	2200      	movs	r2, #0
 8015f5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8015f5c:	7dfb      	ldrb	r3, [r7, #23]
 8015f5e:	3301      	adds	r3, #1
 8015f60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d1e7      	bne.n	8015f3a <USBD_GetString+0x52>
 8015f6a:	e000      	b.n	8015f6e <USBD_GetString+0x86>
    return;
 8015f6c:	bf00      	nop
  }
}
 8015f6e:	3718      	adds	r7, #24
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b085      	sub	sp, #20
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015f84:	e005      	b.n	8015f92 <USBD_GetLen+0x1e>
  {
    len++;
 8015f86:	7bfb      	ldrb	r3, [r7, #15]
 8015f88:	3301      	adds	r3, #1
 8015f8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d1f5      	bne.n	8015f86 <USBD_GetLen+0x12>
  }

  return len;
 8015f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3714      	adds	r7, #20
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	60b9      	str	r1, [r7, #8]
 8015fb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	2202      	movs	r2, #2
 8015fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	68ba      	ldr	r2, [r7, #8]
 8015fcc:	2100      	movs	r1, #0
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f000 fd1b 	bl	8016a0a <USBD_LL_Transmit>

  return USBD_OK;
 8015fd4:	2300      	movs	r3, #0
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3710      	adds	r7, #16
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}

08015fde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015fde:	b580      	push	{r7, lr}
 8015fe0:	b084      	sub	sp, #16
 8015fe2:	af00      	add	r7, sp, #0
 8015fe4:	60f8      	str	r0, [r7, #12]
 8015fe6:	60b9      	str	r1, [r7, #8]
 8015fe8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	68ba      	ldr	r2, [r7, #8]
 8015fee:	2100      	movs	r1, #0
 8015ff0:	68f8      	ldr	r0, [r7, #12]
 8015ff2:	f000 fd0a 	bl	8016a0a <USBD_LL_Transmit>

  return USBD_OK;
 8015ff6:	2300      	movs	r3, #0
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3710      	adds	r7, #16
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}

08016000 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	60f8      	str	r0, [r7, #12]
 8016008:	60b9      	str	r1, [r7, #8]
 801600a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2203      	movs	r2, #3
 8016010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	687a      	ldr	r2, [r7, #4]
 8016018:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	687a      	ldr	r2, [r7, #4]
 8016020:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	68ba      	ldr	r2, [r7, #8]
 8016028:	2100      	movs	r1, #0
 801602a:	68f8      	ldr	r0, [r7, #12]
 801602c:	f000 fd0e 	bl	8016a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016030:	2300      	movs	r3, #0
}
 8016032:	4618      	mov	r0, r3
 8016034:	3710      	adds	r7, #16
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}

0801603a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801603a:	b580      	push	{r7, lr}
 801603c:	b084      	sub	sp, #16
 801603e:	af00      	add	r7, sp, #0
 8016040:	60f8      	str	r0, [r7, #12]
 8016042:	60b9      	str	r1, [r7, #8]
 8016044:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	68ba      	ldr	r2, [r7, #8]
 801604a:	2100      	movs	r1, #0
 801604c:	68f8      	ldr	r0, [r7, #12]
 801604e:	f000 fcfd 	bl	8016a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016052:	2300      	movs	r3, #0
}
 8016054:	4618      	mov	r0, r3
 8016056:	3710      	adds	r7, #16
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}

0801605c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2204      	movs	r2, #4
 8016068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801606c:	2300      	movs	r3, #0
 801606e:	2200      	movs	r2, #0
 8016070:	2100      	movs	r1, #0
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f000 fcc9 	bl	8016a0a <USBD_LL_Transmit>

  return USBD_OK;
 8016078:	2300      	movs	r3, #0
}
 801607a:	4618      	mov	r0, r3
 801607c:	3708      	adds	r7, #8
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}

08016082 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016082:	b580      	push	{r7, lr}
 8016084:	b082      	sub	sp, #8
 8016086:	af00      	add	r7, sp, #0
 8016088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2205      	movs	r2, #5
 801608e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016092:	2300      	movs	r3, #0
 8016094:	2200      	movs	r2, #0
 8016096:	2100      	movs	r1, #0
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f000 fcd7 	bl	8016a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801609e:	2300      	movs	r3, #0
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80160a8:	b480      	push	{r7}
 80160aa:	b087      	sub	sp, #28
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	60b9      	str	r1, [r7, #8]
 80160b2:	4613      	mov	r3, r2
 80160b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80160b6:	2301      	movs	r3, #1
 80160b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80160ba:	2300      	movs	r3, #0
 80160bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80160be:	4b1f      	ldr	r3, [pc, #124]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160c0:	7a5b      	ldrb	r3, [r3, #9]
 80160c2:	b2db      	uxtb	r3, r3
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d131      	bne.n	801612c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80160c8:	4b1c      	ldr	r3, [pc, #112]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160ca:	7a5b      	ldrb	r3, [r3, #9]
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	461a      	mov	r2, r3
 80160d0:	4b1a      	ldr	r3, [pc, #104]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160d2:	2100      	movs	r1, #0
 80160d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80160d6:	4b19      	ldr	r3, [pc, #100]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160d8:	7a5b      	ldrb	r3, [r3, #9]
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	4a17      	ldr	r2, [pc, #92]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160de:	009b      	lsls	r3, r3, #2
 80160e0:	4413      	add	r3, r2
 80160e2:	68fa      	ldr	r2, [r7, #12]
 80160e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80160e6:	4b15      	ldr	r3, [pc, #84]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160e8:	7a5b      	ldrb	r3, [r3, #9]
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	461a      	mov	r2, r3
 80160ee:	4b13      	ldr	r3, [pc, #76]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160f0:	4413      	add	r3, r2
 80160f2:	79fa      	ldrb	r2, [r7, #7]
 80160f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80160f6:	4b11      	ldr	r3, [pc, #68]	; (801613c <FATFS_LinkDriverEx+0x94>)
 80160f8:	7a5b      	ldrb	r3, [r3, #9]
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	1c5a      	adds	r2, r3, #1
 80160fe:	b2d1      	uxtb	r1, r2
 8016100:	4a0e      	ldr	r2, [pc, #56]	; (801613c <FATFS_LinkDriverEx+0x94>)
 8016102:	7251      	strb	r1, [r2, #9]
 8016104:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016106:	7dbb      	ldrb	r3, [r7, #22]
 8016108:	3330      	adds	r3, #48	; 0x30
 801610a:	b2da      	uxtb	r2, r3
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	3301      	adds	r3, #1
 8016114:	223a      	movs	r2, #58	; 0x3a
 8016116:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	3302      	adds	r3, #2
 801611c:	222f      	movs	r2, #47	; 0x2f
 801611e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	3303      	adds	r3, #3
 8016124:	2200      	movs	r2, #0
 8016126:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016128:	2300      	movs	r3, #0
 801612a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801612c:	7dfb      	ldrb	r3, [r7, #23]
}
 801612e:	4618      	mov	r0, r3
 8016130:	371c      	adds	r7, #28
 8016132:	46bd      	mov	sp, r7
 8016134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016138:	4770      	bx	lr
 801613a:	bf00      	nop
 801613c:	240014ac 	.word	0x240014ac

08016140 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801614a:	2200      	movs	r2, #0
 801614c:	6839      	ldr	r1, [r7, #0]
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7ff ffaa 	bl	80160a8 <FATFS_LinkDriverEx>
 8016154:	4603      	mov	r3, r0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3708      	adds	r7, #8
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
	...

08016160 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016164:	2201      	movs	r2, #1
 8016166:	4913      	ldr	r1, [pc, #76]	; (80161b4 <MX_USB_DEVICE_Init+0x54>)
 8016168:	4813      	ldr	r0, [pc, #76]	; (80161b8 <MX_USB_DEVICE_Init+0x58>)
 801616a:	f7fe fca5 	bl	8014ab8 <USBD_Init>
 801616e:	4603      	mov	r3, r0
 8016170:	2b00      	cmp	r3, #0
 8016172:	d001      	beq.n	8016178 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016174:	f7ec fa6a 	bl	800264c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016178:	4910      	ldr	r1, [pc, #64]	; (80161bc <MX_USB_DEVICE_Init+0x5c>)
 801617a:	480f      	ldr	r0, [pc, #60]	; (80161b8 <MX_USB_DEVICE_Init+0x58>)
 801617c:	f7fe fccc 	bl	8014b18 <USBD_RegisterClass>
 8016180:	4603      	mov	r3, r0
 8016182:	2b00      	cmp	r3, #0
 8016184:	d001      	beq.n	801618a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016186:	f7ec fa61 	bl	800264c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801618a:	490d      	ldr	r1, [pc, #52]	; (80161c0 <MX_USB_DEVICE_Init+0x60>)
 801618c:	480a      	ldr	r0, [pc, #40]	; (80161b8 <MX_USB_DEVICE_Init+0x58>)
 801618e:	f7fe fc03 	bl	8014998 <USBD_CDC_RegisterInterface>
 8016192:	4603      	mov	r3, r0
 8016194:	2b00      	cmp	r3, #0
 8016196:	d001      	beq.n	801619c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016198:	f7ec fa58 	bl	800264c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801619c:	4806      	ldr	r0, [pc, #24]	; (80161b8 <MX_USB_DEVICE_Init+0x58>)
 801619e:	f7fe fcf1 	bl	8014b84 <USBD_Start>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d001      	beq.n	80161ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80161a8:	f7ec fa50 	bl	800264c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80161ac:	f7f3 f9a0 	bl	80094f0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80161b0:	bf00      	nop
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	240000b0 	.word	0x240000b0
 80161b8:	240014b8 	.word	0x240014b8
 80161bc:	2400001c 	.word	0x2400001c
 80161c0:	2400009c 	.word	0x2400009c

080161c4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80161c8:	2200      	movs	r2, #0
 80161ca:	4905      	ldr	r1, [pc, #20]	; (80161e0 <CDC_Init_HS+0x1c>)
 80161cc:	4805      	ldr	r0, [pc, #20]	; (80161e4 <CDC_Init_HS+0x20>)
 80161ce:	f7fe fbfd 	bl	80149cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80161d2:	4905      	ldr	r1, [pc, #20]	; (80161e8 <CDC_Init_HS+0x24>)
 80161d4:	4803      	ldr	r0, [pc, #12]	; (80161e4 <CDC_Init_HS+0x20>)
 80161d6:	f7fe fc1b 	bl	8014a10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80161da:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80161dc:	4618      	mov	r0, r3
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	24001f94 	.word	0x24001f94
 80161e4:	240014b8 	.word	0x240014b8
 80161e8:	24001794 	.word	0x24001794

080161ec <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80161ec:	b480      	push	{r7}
 80161ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80161f0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	46bd      	mov	sp, r7
 80161f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fa:	4770      	bx	lr

080161fc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b083      	sub	sp, #12
 8016200:	af00      	add	r7, sp, #0
 8016202:	4603      	mov	r3, r0
 8016204:	6039      	str	r1, [r7, #0]
 8016206:	71fb      	strb	r3, [r7, #7]
 8016208:	4613      	mov	r3, r2
 801620a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801620c:	79fb      	ldrb	r3, [r7, #7]
 801620e:	2b23      	cmp	r3, #35	; 0x23
 8016210:	d84a      	bhi.n	80162a8 <CDC_Control_HS+0xac>
 8016212:	a201      	add	r2, pc, #4	; (adr r2, 8016218 <CDC_Control_HS+0x1c>)
 8016214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016218:	080162a9 	.word	0x080162a9
 801621c:	080162a9 	.word	0x080162a9
 8016220:	080162a9 	.word	0x080162a9
 8016224:	080162a9 	.word	0x080162a9
 8016228:	080162a9 	.word	0x080162a9
 801622c:	080162a9 	.word	0x080162a9
 8016230:	080162a9 	.word	0x080162a9
 8016234:	080162a9 	.word	0x080162a9
 8016238:	080162a9 	.word	0x080162a9
 801623c:	080162a9 	.word	0x080162a9
 8016240:	080162a9 	.word	0x080162a9
 8016244:	080162a9 	.word	0x080162a9
 8016248:	080162a9 	.word	0x080162a9
 801624c:	080162a9 	.word	0x080162a9
 8016250:	080162a9 	.word	0x080162a9
 8016254:	080162a9 	.word	0x080162a9
 8016258:	080162a9 	.word	0x080162a9
 801625c:	080162a9 	.word	0x080162a9
 8016260:	080162a9 	.word	0x080162a9
 8016264:	080162a9 	.word	0x080162a9
 8016268:	080162a9 	.word	0x080162a9
 801626c:	080162a9 	.word	0x080162a9
 8016270:	080162a9 	.word	0x080162a9
 8016274:	080162a9 	.word	0x080162a9
 8016278:	080162a9 	.word	0x080162a9
 801627c:	080162a9 	.word	0x080162a9
 8016280:	080162a9 	.word	0x080162a9
 8016284:	080162a9 	.word	0x080162a9
 8016288:	080162a9 	.word	0x080162a9
 801628c:	080162a9 	.word	0x080162a9
 8016290:	080162a9 	.word	0x080162a9
 8016294:	080162a9 	.word	0x080162a9
 8016298:	080162a9 	.word	0x080162a9
 801629c:	080162a9 	.word	0x080162a9
 80162a0:	080162a9 	.word	0x080162a9
 80162a4:	080162a9 	.word	0x080162a9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80162a8:	bf00      	nop
  }

  return (USBD_OK);
 80162aa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	370c      	adds	r7, #12
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr

080162b8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
 80162c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80162c2:	6879      	ldr	r1, [r7, #4]
 80162c4:	4805      	ldr	r0, [pc, #20]	; (80162dc <CDC_Receive_HS+0x24>)
 80162c6:	f7fe fba3 	bl	8014a10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80162ca:	4804      	ldr	r0, [pc, #16]	; (80162dc <CDC_Receive_HS+0x24>)
 80162cc:	f7fe fbbe 	bl	8014a4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80162d0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3708      	adds	r7, #8
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
 80162da:	bf00      	nop
 80162dc:	240014b8 	.word	0x240014b8

080162e0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b087      	sub	sp, #28
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	4613      	mov	r3, r2
 80162ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80162ee:	2300      	movs	r3, #0
 80162f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80162f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	371c      	adds	r7, #28
 80162fa:	46bd      	mov	sp, r7
 80162fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016300:	4770      	bx	lr
	...

08016304 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016304:	b480      	push	{r7}
 8016306:	b083      	sub	sp, #12
 8016308:	af00      	add	r7, sp, #0
 801630a:	4603      	mov	r3, r0
 801630c:	6039      	str	r1, [r7, #0]
 801630e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	2212      	movs	r2, #18
 8016314:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016316:	4b03      	ldr	r3, [pc, #12]	; (8016324 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016318:	4618      	mov	r0, r3
 801631a:	370c      	adds	r7, #12
 801631c:	46bd      	mov	sp, r7
 801631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016322:	4770      	bx	lr
 8016324:	240000cc 	.word	0x240000cc

08016328 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016328:	b480      	push	{r7}
 801632a:	b083      	sub	sp, #12
 801632c:	af00      	add	r7, sp, #0
 801632e:	4603      	mov	r3, r0
 8016330:	6039      	str	r1, [r7, #0]
 8016332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016334:	683b      	ldr	r3, [r7, #0]
 8016336:	2204      	movs	r2, #4
 8016338:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801633a:	4b03      	ldr	r3, [pc, #12]	; (8016348 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801633c:	4618      	mov	r0, r3
 801633e:	370c      	adds	r7, #12
 8016340:	46bd      	mov	sp, r7
 8016342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016346:	4770      	bx	lr
 8016348:	240000e0 	.word	0x240000e0

0801634c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	4603      	mov	r3, r0
 8016354:	6039      	str	r1, [r7, #0]
 8016356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016358:	79fb      	ldrb	r3, [r7, #7]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d105      	bne.n	801636a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801635e:	683a      	ldr	r2, [r7, #0]
 8016360:	4907      	ldr	r1, [pc, #28]	; (8016380 <USBD_HS_ProductStrDescriptor+0x34>)
 8016362:	4808      	ldr	r0, [pc, #32]	; (8016384 <USBD_HS_ProductStrDescriptor+0x38>)
 8016364:	f7ff fdc0 	bl	8015ee8 <USBD_GetString>
 8016368:	e004      	b.n	8016374 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801636a:	683a      	ldr	r2, [r7, #0]
 801636c:	4904      	ldr	r1, [pc, #16]	; (8016380 <USBD_HS_ProductStrDescriptor+0x34>)
 801636e:	4805      	ldr	r0, [pc, #20]	; (8016384 <USBD_HS_ProductStrDescriptor+0x38>)
 8016370:	f7ff fdba 	bl	8015ee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016374:	4b02      	ldr	r3, [pc, #8]	; (8016380 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016376:	4618      	mov	r0, r3
 8016378:	3708      	adds	r7, #8
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	24002794 	.word	0x24002794
 8016384:	08017f20 	.word	0x08017f20

08016388 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b082      	sub	sp, #8
 801638c:	af00      	add	r7, sp, #0
 801638e:	4603      	mov	r3, r0
 8016390:	6039      	str	r1, [r7, #0]
 8016392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016394:	683a      	ldr	r2, [r7, #0]
 8016396:	4904      	ldr	r1, [pc, #16]	; (80163a8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016398:	4804      	ldr	r0, [pc, #16]	; (80163ac <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801639a:	f7ff fda5 	bl	8015ee8 <USBD_GetString>
  return USBD_StrDesc;
 801639e:	4b02      	ldr	r3, [pc, #8]	; (80163a8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	24002794 	.word	0x24002794
 80163ac:	08017f3c 	.word	0x08017f3c

080163b0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	4603      	mov	r3, r0
 80163b8:	6039      	str	r1, [r7, #0]
 80163ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	221a      	movs	r2, #26
 80163c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80163c2:	f000 f843 	bl	801644c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80163c6:	4b02      	ldr	r3, [pc, #8]	; (80163d0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3708      	adds	r7, #8
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	240000e4 	.word	0x240000e4

080163d4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b082      	sub	sp, #8
 80163d8:	af00      	add	r7, sp, #0
 80163da:	4603      	mov	r3, r0
 80163dc:	6039      	str	r1, [r7, #0]
 80163de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80163e0:	79fb      	ldrb	r3, [r7, #7]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d105      	bne.n	80163f2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80163e6:	683a      	ldr	r2, [r7, #0]
 80163e8:	4907      	ldr	r1, [pc, #28]	; (8016408 <USBD_HS_ConfigStrDescriptor+0x34>)
 80163ea:	4808      	ldr	r0, [pc, #32]	; (801640c <USBD_HS_ConfigStrDescriptor+0x38>)
 80163ec:	f7ff fd7c 	bl	8015ee8 <USBD_GetString>
 80163f0:	e004      	b.n	80163fc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80163f2:	683a      	ldr	r2, [r7, #0]
 80163f4:	4904      	ldr	r1, [pc, #16]	; (8016408 <USBD_HS_ConfigStrDescriptor+0x34>)
 80163f6:	4805      	ldr	r0, [pc, #20]	; (801640c <USBD_HS_ConfigStrDescriptor+0x38>)
 80163f8:	f7ff fd76 	bl	8015ee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80163fc:	4b02      	ldr	r3, [pc, #8]	; (8016408 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3708      	adds	r7, #8
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
 8016406:	bf00      	nop
 8016408:	24002794 	.word	0x24002794
 801640c:	08017f40 	.word	0x08017f40

08016410 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	4603      	mov	r3, r0
 8016418:	6039      	str	r1, [r7, #0]
 801641a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801641c:	79fb      	ldrb	r3, [r7, #7]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d105      	bne.n	801642e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016422:	683a      	ldr	r2, [r7, #0]
 8016424:	4907      	ldr	r1, [pc, #28]	; (8016444 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016426:	4808      	ldr	r0, [pc, #32]	; (8016448 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016428:	f7ff fd5e 	bl	8015ee8 <USBD_GetString>
 801642c:	e004      	b.n	8016438 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801642e:	683a      	ldr	r2, [r7, #0]
 8016430:	4904      	ldr	r1, [pc, #16]	; (8016444 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016432:	4805      	ldr	r0, [pc, #20]	; (8016448 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016434:	f7ff fd58 	bl	8015ee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016438:	4b02      	ldr	r3, [pc, #8]	; (8016444 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801643a:	4618      	mov	r0, r3
 801643c:	3708      	adds	r7, #8
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	24002794 	.word	0x24002794
 8016448:	08017f4c 	.word	0x08017f4c

0801644c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016452:	4b0f      	ldr	r3, [pc, #60]	; (8016490 <Get_SerialNum+0x44>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016458:	4b0e      	ldr	r3, [pc, #56]	; (8016494 <Get_SerialNum+0x48>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801645e:	4b0e      	ldr	r3, [pc, #56]	; (8016498 <Get_SerialNum+0x4c>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016464:	68fa      	ldr	r2, [r7, #12]
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	4413      	add	r3, r2
 801646a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d009      	beq.n	8016486 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016472:	2208      	movs	r2, #8
 8016474:	4909      	ldr	r1, [pc, #36]	; (801649c <Get_SerialNum+0x50>)
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f000 f814 	bl	80164a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801647c:	2204      	movs	r2, #4
 801647e:	4908      	ldr	r1, [pc, #32]	; (80164a0 <Get_SerialNum+0x54>)
 8016480:	68b8      	ldr	r0, [r7, #8]
 8016482:	f000 f80f 	bl	80164a4 <IntToUnicode>
  }
}
 8016486:	bf00      	nop
 8016488:	3710      	adds	r7, #16
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	1ff1e800 	.word	0x1ff1e800
 8016494:	1ff1e804 	.word	0x1ff1e804
 8016498:	1ff1e808 	.word	0x1ff1e808
 801649c:	240000e6 	.word	0x240000e6
 80164a0:	240000f6 	.word	0x240000f6

080164a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80164a4:	b480      	push	{r7}
 80164a6:	b087      	sub	sp, #28
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	60b9      	str	r1, [r7, #8]
 80164ae:	4613      	mov	r3, r2
 80164b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80164b6:	2300      	movs	r3, #0
 80164b8:	75fb      	strb	r3, [r7, #23]
 80164ba:	e027      	b.n	801650c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	0f1b      	lsrs	r3, r3, #28
 80164c0:	2b09      	cmp	r3, #9
 80164c2:	d80b      	bhi.n	80164dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	0f1b      	lsrs	r3, r3, #28
 80164c8:	b2da      	uxtb	r2, r3
 80164ca:	7dfb      	ldrb	r3, [r7, #23]
 80164cc:	005b      	lsls	r3, r3, #1
 80164ce:	4619      	mov	r1, r3
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	440b      	add	r3, r1
 80164d4:	3230      	adds	r2, #48	; 0x30
 80164d6:	b2d2      	uxtb	r2, r2
 80164d8:	701a      	strb	r2, [r3, #0]
 80164da:	e00a      	b.n	80164f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	0f1b      	lsrs	r3, r3, #28
 80164e0:	b2da      	uxtb	r2, r3
 80164e2:	7dfb      	ldrb	r3, [r7, #23]
 80164e4:	005b      	lsls	r3, r3, #1
 80164e6:	4619      	mov	r1, r3
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	440b      	add	r3, r1
 80164ec:	3237      	adds	r2, #55	; 0x37
 80164ee:	b2d2      	uxtb	r2, r2
 80164f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	011b      	lsls	r3, r3, #4
 80164f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80164f8:	7dfb      	ldrb	r3, [r7, #23]
 80164fa:	005b      	lsls	r3, r3, #1
 80164fc:	3301      	adds	r3, #1
 80164fe:	68ba      	ldr	r2, [r7, #8]
 8016500:	4413      	add	r3, r2
 8016502:	2200      	movs	r2, #0
 8016504:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016506:	7dfb      	ldrb	r3, [r7, #23]
 8016508:	3301      	adds	r3, #1
 801650a:	75fb      	strb	r3, [r7, #23]
 801650c:	7dfa      	ldrb	r2, [r7, #23]
 801650e:	79fb      	ldrb	r3, [r7, #7]
 8016510:	429a      	cmp	r2, r3
 8016512:	d3d3      	bcc.n	80164bc <IntToUnicode+0x18>
  }
}
 8016514:	bf00      	nop
 8016516:	bf00      	nop
 8016518:	371c      	adds	r7, #28
 801651a:	46bd      	mov	sp, r7
 801651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016520:	4770      	bx	lr
	...

08016524 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b0b2      	sub	sp, #200	; 0xc8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801652c:	f107 0310 	add.w	r3, r7, #16
 8016530:	22b8      	movs	r2, #184	; 0xb8
 8016532:	2100      	movs	r1, #0
 8016534:	4618      	mov	r0, r3
 8016536:	f000 fb39 	bl	8016bac <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	4a1a      	ldr	r2, [pc, #104]	; (80165a8 <HAL_PCD_MspInit+0x84>)
 8016540:	4293      	cmp	r3, r2
 8016542:	d12c      	bne.n	801659e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016544:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016548:	f04f 0300 	mov.w	r3, #0
 801654c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016550:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016558:	f107 0310 	add.w	r3, r7, #16
 801655c:	4618      	mov	r0, r3
 801655e:	f7f3 ffa7 	bl	800a4b0 <HAL_RCCEx_PeriphCLKConfig>
 8016562:	4603      	mov	r3, r0
 8016564:	2b00      	cmp	r3, #0
 8016566:	d001      	beq.n	801656c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016568:	f7ec f870 	bl	800264c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801656c:	f7f2 ffc0 	bl	80094f0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016570:	4b0e      	ldr	r3, [pc, #56]	; (80165ac <HAL_PCD_MspInit+0x88>)
 8016572:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016576:	4a0d      	ldr	r2, [pc, #52]	; (80165ac <HAL_PCD_MspInit+0x88>)
 8016578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801657c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016580:	4b0a      	ldr	r3, [pc, #40]	; (80165ac <HAL_PCD_MspInit+0x88>)
 8016582:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801658a:	60fb      	str	r3, [r7, #12]
 801658c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801658e:	2200      	movs	r2, #0
 8016590:	2100      	movs	r1, #0
 8016592:	204d      	movs	r0, #77	; 0x4d
 8016594:	f7ee fd49 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016598:	204d      	movs	r0, #77	; 0x4d
 801659a:	f7ee fd60 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801659e:	bf00      	nop
 80165a0:	37c8      	adds	r7, #200	; 0xc8
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	40040000 	.word	0x40040000
 80165ac:	58024400 	.word	0x58024400

080165b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80165c4:	4619      	mov	r1, r3
 80165c6:	4610      	mov	r0, r2
 80165c8:	f7fe fb29 	bl	8014c1e <USBD_LL_SetupStage>
}
 80165cc:	bf00      	nop
 80165ce:	3708      	adds	r7, #8
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	460b      	mov	r3, r1
 80165de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80165e6:	78fa      	ldrb	r2, [r7, #3]
 80165e8:	6879      	ldr	r1, [r7, #4]
 80165ea:	4613      	mov	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	4413      	add	r3, r2
 80165f0:	009b      	lsls	r3, r3, #2
 80165f2:	440b      	add	r3, r1
 80165f4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80165f8:	681a      	ldr	r2, [r3, #0]
 80165fa:	78fb      	ldrb	r3, [r7, #3]
 80165fc:	4619      	mov	r1, r3
 80165fe:	f7fe fb63 	bl	8014cc8 <USBD_LL_DataOutStage>
}
 8016602:	bf00      	nop
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b082      	sub	sp, #8
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	460b      	mov	r3, r1
 8016614:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801661c:	78fa      	ldrb	r2, [r7, #3]
 801661e:	6879      	ldr	r1, [r7, #4]
 8016620:	4613      	mov	r3, r2
 8016622:	00db      	lsls	r3, r3, #3
 8016624:	4413      	add	r3, r2
 8016626:	009b      	lsls	r3, r3, #2
 8016628:	440b      	add	r3, r1
 801662a:	3348      	adds	r3, #72	; 0x48
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	78fb      	ldrb	r3, [r7, #3]
 8016630:	4619      	mov	r1, r3
 8016632:	f7fe fbfc 	bl	8014e2e <USBD_LL_DataInStage>
}
 8016636:	bf00      	nop
 8016638:	3708      	adds	r7, #8
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}

0801663e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801663e:	b580      	push	{r7, lr}
 8016640:	b082      	sub	sp, #8
 8016642:	af00      	add	r7, sp, #0
 8016644:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801664c:	4618      	mov	r0, r3
 801664e:	f7fe fd36 	bl	80150be <USBD_LL_SOF>
}
 8016652:	bf00      	nop
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801665a:	b580      	push	{r7, lr}
 801665c:	b084      	sub	sp, #16
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016662:	2301      	movs	r3, #1
 8016664:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	691b      	ldr	r3, [r3, #16]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d102      	bne.n	8016674 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801666e:	2300      	movs	r3, #0
 8016670:	73fb      	strb	r3, [r7, #15]
 8016672:	e008      	b.n	8016686 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	691b      	ldr	r3, [r3, #16]
 8016678:	2b02      	cmp	r3, #2
 801667a:	d102      	bne.n	8016682 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801667c:	2301      	movs	r3, #1
 801667e:	73fb      	strb	r3, [r7, #15]
 8016680:	e001      	b.n	8016686 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016682:	f7eb ffe3 	bl	800264c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801668c:	7bfa      	ldrb	r2, [r7, #15]
 801668e:	4611      	mov	r1, r2
 8016690:	4618      	mov	r0, r3
 8016692:	f7fe fcd0 	bl	8015036 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801669c:	4618      	mov	r0, r3
 801669e:	f7fe fc78 	bl	8014f92 <USBD_LL_Reset>
}
 80166a2:	bf00      	nop
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
	...

080166ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fe fccb 	bl	8015056 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	687a      	ldr	r2, [r7, #4]
 80166cc:	6812      	ldr	r2, [r2, #0]
 80166ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80166d2:	f043 0301 	orr.w	r3, r3, #1
 80166d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6a1b      	ldr	r3, [r3, #32]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d005      	beq.n	80166ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80166e0:	4b04      	ldr	r3, [pc, #16]	; (80166f4 <HAL_PCD_SuspendCallback+0x48>)
 80166e2:	691b      	ldr	r3, [r3, #16]
 80166e4:	4a03      	ldr	r2, [pc, #12]	; (80166f4 <HAL_PCD_SuspendCallback+0x48>)
 80166e6:	f043 0306 	orr.w	r3, r3, #6
 80166ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80166ec:	bf00      	nop
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	e000ed00 	.word	0xe000ed00

080166f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016706:	4618      	mov	r0, r3
 8016708:	f7fe fcc1 	bl	801508e <USBD_LL_Resume>
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	460b      	mov	r3, r1
 801671e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016726:	78fa      	ldrb	r2, [r7, #3]
 8016728:	4611      	mov	r1, r2
 801672a:	4618      	mov	r0, r3
 801672c:	f7fe fd19 	bl	8015162 <USBD_LL_IsoOUTIncomplete>
}
 8016730:	bf00      	nop
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	460b      	mov	r3, r1
 8016742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801674a:	78fa      	ldrb	r2, [r7, #3]
 801674c:	4611      	mov	r1, r2
 801674e:	4618      	mov	r0, r3
 8016750:	f7fe fcd5 	bl	80150fe <USBD_LL_IsoINIncomplete>
}
 8016754:	bf00      	nop
 8016756:	3708      	adds	r7, #8
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}

0801675c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801676a:	4618      	mov	r0, r3
 801676c:	f7fe fd2b 	bl	80151c6 <USBD_LL_DevConnected>
}
 8016770:	bf00      	nop
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016786:	4618      	mov	r0, r3
 8016788:	f7fe fd28 	bl	80151dc <USBD_LL_DevDisconnected>
}
 801678c:	bf00      	nop
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	2b01      	cmp	r3, #1
 80167a2:	d140      	bne.n	8016826 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80167a4:	4a22      	ldr	r2, [pc, #136]	; (8016830 <USBD_LL_Init+0x9c>)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	4a20      	ldr	r2, [pc, #128]	; (8016830 <USBD_LL_Init+0x9c>)
 80167b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80167b4:	4b1e      	ldr	r3, [pc, #120]	; (8016830 <USBD_LL_Init+0x9c>)
 80167b6:	4a1f      	ldr	r2, [pc, #124]	; (8016834 <USBD_LL_Init+0xa0>)
 80167b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80167ba:	4b1d      	ldr	r3, [pc, #116]	; (8016830 <USBD_LL_Init+0x9c>)
 80167bc:	2209      	movs	r2, #9
 80167be:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80167c0:	4b1b      	ldr	r3, [pc, #108]	; (8016830 <USBD_LL_Init+0x9c>)
 80167c2:	2202      	movs	r2, #2
 80167c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80167c6:	4b1a      	ldr	r3, [pc, #104]	; (8016830 <USBD_LL_Init+0x9c>)
 80167c8:	2200      	movs	r2, #0
 80167ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80167cc:	4b18      	ldr	r3, [pc, #96]	; (8016830 <USBD_LL_Init+0x9c>)
 80167ce:	2202      	movs	r2, #2
 80167d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80167d2:	4b17      	ldr	r3, [pc, #92]	; (8016830 <USBD_LL_Init+0x9c>)
 80167d4:	2200      	movs	r2, #0
 80167d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80167d8:	4b15      	ldr	r3, [pc, #84]	; (8016830 <USBD_LL_Init+0x9c>)
 80167da:	2200      	movs	r2, #0
 80167dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80167de:	4b14      	ldr	r3, [pc, #80]	; (8016830 <USBD_LL_Init+0x9c>)
 80167e0:	2200      	movs	r2, #0
 80167e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80167e4:	4b12      	ldr	r3, [pc, #72]	; (8016830 <USBD_LL_Init+0x9c>)
 80167e6:	2200      	movs	r2, #0
 80167e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80167ea:	4b11      	ldr	r3, [pc, #68]	; (8016830 <USBD_LL_Init+0x9c>)
 80167ec:	2200      	movs	r2, #0
 80167ee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80167f0:	4b0f      	ldr	r3, [pc, #60]	; (8016830 <USBD_LL_Init+0x9c>)
 80167f2:	2200      	movs	r2, #0
 80167f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80167f6:	480e      	ldr	r0, [pc, #56]	; (8016830 <USBD_LL_Init+0x9c>)
 80167f8:	f7f1 fb87 	bl	8007f0a <HAL_PCD_Init>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d001      	beq.n	8016806 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016802:	f7eb ff23 	bl	800264c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016806:	f44f 7100 	mov.w	r1, #512	; 0x200
 801680a:	4809      	ldr	r0, [pc, #36]	; (8016830 <USBD_LL_Init+0x9c>)
 801680c:	f7f2 fdf5 	bl	80093fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016810:	2280      	movs	r2, #128	; 0x80
 8016812:	2100      	movs	r1, #0
 8016814:	4806      	ldr	r0, [pc, #24]	; (8016830 <USBD_LL_Init+0x9c>)
 8016816:	f7f2 fda9 	bl	800936c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801681a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801681e:	2101      	movs	r1, #1
 8016820:	4803      	ldr	r0, [pc, #12]	; (8016830 <USBD_LL_Init+0x9c>)
 8016822:	f7f2 fda3 	bl	800936c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016826:	2300      	movs	r3, #0
}
 8016828:	4618      	mov	r0, r3
 801682a:	3708      	adds	r7, #8
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}
 8016830:	24002994 	.word	0x24002994
 8016834:	40040000 	.word	0x40040000

08016838 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b084      	sub	sp, #16
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016840:	2300      	movs	r3, #0
 8016842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016844:	2300      	movs	r3, #0
 8016846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801684e:	4618      	mov	r0, r3
 8016850:	f7f1 fc7f 	bl	8008152 <HAL_PCD_Start>
 8016854:	4603      	mov	r3, r0
 8016856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016858:	7bfb      	ldrb	r3, [r7, #15]
 801685a:	4618      	mov	r0, r3
 801685c:	f000 f942 	bl	8016ae4 <USBD_Get_USB_Status>
 8016860:	4603      	mov	r3, r0
 8016862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016864:	7bbb      	ldrb	r3, [r7, #14]
}
 8016866:	4618      	mov	r0, r3
 8016868:	3710      	adds	r7, #16
 801686a:	46bd      	mov	sp, r7
 801686c:	bd80      	pop	{r7, pc}

0801686e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801686e:	b580      	push	{r7, lr}
 8016870:	b084      	sub	sp, #16
 8016872:	af00      	add	r7, sp, #0
 8016874:	6078      	str	r0, [r7, #4]
 8016876:	4608      	mov	r0, r1
 8016878:	4611      	mov	r1, r2
 801687a:	461a      	mov	r2, r3
 801687c:	4603      	mov	r3, r0
 801687e:	70fb      	strb	r3, [r7, #3]
 8016880:	460b      	mov	r3, r1
 8016882:	70bb      	strb	r3, [r7, #2]
 8016884:	4613      	mov	r3, r2
 8016886:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016888:	2300      	movs	r3, #0
 801688a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801688c:	2300      	movs	r3, #0
 801688e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016896:	78bb      	ldrb	r3, [r7, #2]
 8016898:	883a      	ldrh	r2, [r7, #0]
 801689a:	78f9      	ldrb	r1, [r7, #3]
 801689c:	f7f2 f97f 	bl	8008b9e <HAL_PCD_EP_Open>
 80168a0:	4603      	mov	r3, r0
 80168a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168a4:	7bfb      	ldrb	r3, [r7, #15]
 80168a6:	4618      	mov	r0, r3
 80168a8:	f000 f91c 	bl	8016ae4 <USBD_Get_USB_Status>
 80168ac:	4603      	mov	r3, r0
 80168ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3710      	adds	r7, #16
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}

080168ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168ba:	b580      	push	{r7, lr}
 80168bc:	b084      	sub	sp, #16
 80168be:	af00      	add	r7, sp, #0
 80168c0:	6078      	str	r0, [r7, #4]
 80168c2:	460b      	mov	r3, r1
 80168c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168c6:	2300      	movs	r3, #0
 80168c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168ca:	2300      	movs	r3, #0
 80168cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80168d4:	78fa      	ldrb	r2, [r7, #3]
 80168d6:	4611      	mov	r1, r2
 80168d8:	4618      	mov	r0, r3
 80168da:	f7f2 f9c8 	bl	8008c6e <HAL_PCD_EP_Close>
 80168de:	4603      	mov	r3, r0
 80168e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168e2:	7bfb      	ldrb	r3, [r7, #15]
 80168e4:	4618      	mov	r0, r3
 80168e6:	f000 f8fd 	bl	8016ae4 <USBD_Get_USB_Status>
 80168ea:	4603      	mov	r3, r0
 80168ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3710      	adds	r7, #16
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
 8016900:	460b      	mov	r3, r1
 8016902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016904:	2300      	movs	r3, #0
 8016906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016908:	2300      	movs	r3, #0
 801690a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016912:	78fa      	ldrb	r2, [r7, #3]
 8016914:	4611      	mov	r1, r2
 8016916:	4618      	mov	r0, r3
 8016918:	f7f2 fa82 	bl	8008e20 <HAL_PCD_EP_SetStall>
 801691c:	4603      	mov	r3, r0
 801691e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016920:	7bfb      	ldrb	r3, [r7, #15]
 8016922:	4618      	mov	r0, r3
 8016924:	f000 f8de 	bl	8016ae4 <USBD_Get_USB_Status>
 8016928:	4603      	mov	r3, r0
 801692a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801692c:	7bbb      	ldrb	r3, [r7, #14]
}
 801692e:	4618      	mov	r0, r3
 8016930:	3710      	adds	r7, #16
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016936:	b580      	push	{r7, lr}
 8016938:	b084      	sub	sp, #16
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
 801693e:	460b      	mov	r3, r1
 8016940:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016942:	2300      	movs	r3, #0
 8016944:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016946:	2300      	movs	r3, #0
 8016948:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016950:	78fa      	ldrb	r2, [r7, #3]
 8016952:	4611      	mov	r1, r2
 8016954:	4618      	mov	r0, r3
 8016956:	f7f2 fac7 	bl	8008ee8 <HAL_PCD_EP_ClrStall>
 801695a:	4603      	mov	r3, r0
 801695c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801695e:	7bfb      	ldrb	r3, [r7, #15]
 8016960:	4618      	mov	r0, r3
 8016962:	f000 f8bf 	bl	8016ae4 <USBD_Get_USB_Status>
 8016966:	4603      	mov	r3, r0
 8016968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801696a:	7bbb      	ldrb	r3, [r7, #14]
}
 801696c:	4618      	mov	r0, r3
 801696e:	3710      	adds	r7, #16
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016974:	b480      	push	{r7}
 8016976:	b085      	sub	sp, #20
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
 801697c:	460b      	mov	r3, r1
 801697e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016986:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801698c:	2b00      	cmp	r3, #0
 801698e:	da0b      	bge.n	80169a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016990:	78fb      	ldrb	r3, [r7, #3]
 8016992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016996:	68f9      	ldr	r1, [r7, #12]
 8016998:	4613      	mov	r3, r2
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	4413      	add	r3, r2
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	440b      	add	r3, r1
 80169a2:	333e      	adds	r3, #62	; 0x3e
 80169a4:	781b      	ldrb	r3, [r3, #0]
 80169a6:	e00b      	b.n	80169c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80169a8:	78fb      	ldrb	r3, [r7, #3]
 80169aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169ae:	68f9      	ldr	r1, [r7, #12]
 80169b0:	4613      	mov	r3, r2
 80169b2:	00db      	lsls	r3, r3, #3
 80169b4:	4413      	add	r3, r2
 80169b6:	009b      	lsls	r3, r3, #2
 80169b8:	440b      	add	r3, r1
 80169ba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80169be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	3714      	adds	r7, #20
 80169c4:	46bd      	mov	sp, r7
 80169c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ca:	4770      	bx	lr

080169cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b084      	sub	sp, #16
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
 80169d4:	460b      	mov	r3, r1
 80169d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169d8:	2300      	movs	r3, #0
 80169da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169dc:	2300      	movs	r3, #0
 80169de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80169e6:	78fa      	ldrb	r2, [r7, #3]
 80169e8:	4611      	mov	r1, r2
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7f2 f8b2 	bl	8008b54 <HAL_PCD_SetAddress>
 80169f0:	4603      	mov	r3, r0
 80169f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169f4:	7bfb      	ldrb	r3, [r7, #15]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f000 f874 	bl	8016ae4 <USBD_Get_USB_Status>
 80169fc:	4603      	mov	r3, r0
 80169fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3710      	adds	r7, #16
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016a0a:	b580      	push	{r7, lr}
 8016a0c:	b086      	sub	sp, #24
 8016a0e:	af00      	add	r7, sp, #0
 8016a10:	60f8      	str	r0, [r7, #12]
 8016a12:	607a      	str	r2, [r7, #4]
 8016a14:	603b      	str	r3, [r7, #0]
 8016a16:	460b      	mov	r3, r1
 8016a18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a28:	7af9      	ldrb	r1, [r7, #11]
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	687a      	ldr	r2, [r7, #4]
 8016a2e:	f7f2 f9bc 	bl	8008daa <HAL_PCD_EP_Transmit>
 8016a32:	4603      	mov	r3, r0
 8016a34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a36:	7dfb      	ldrb	r3, [r7, #23]
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f000 f853 	bl	8016ae4 <USBD_Get_USB_Status>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a42:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3718      	adds	r7, #24
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b086      	sub	sp, #24
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	607a      	str	r2, [r7, #4]
 8016a56:	603b      	str	r3, [r7, #0]
 8016a58:	460b      	mov	r3, r1
 8016a5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a60:	2300      	movs	r3, #0
 8016a62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a6a:	7af9      	ldrb	r1, [r7, #11]
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	687a      	ldr	r2, [r7, #4]
 8016a70:	f7f2 f947 	bl	8008d02 <HAL_PCD_EP_Receive>
 8016a74:	4603      	mov	r3, r0
 8016a76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a78:	7dfb      	ldrb	r3, [r7, #23]
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f000 f832 	bl	8016ae4 <USBD_Get_USB_Status>
 8016a80:	4603      	mov	r3, r0
 8016a82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a84:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3718      	adds	r7, #24
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a8e:	b580      	push	{r7, lr}
 8016a90:	b082      	sub	sp, #8
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
 8016a96:	460b      	mov	r3, r1
 8016a98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016aa0:	78fa      	ldrb	r2, [r7, #3]
 8016aa2:	4611      	mov	r1, r2
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7f2 f968 	bl	8008d7a <HAL_PCD_EP_GetRxCount>
 8016aaa:	4603      	mov	r3, r0
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	3708      	adds	r7, #8
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}

08016ab4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ab4:	b480      	push	{r7}
 8016ab6:	b083      	sub	sp, #12
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016abc:	4b03      	ldr	r3, [pc, #12]	; (8016acc <USBD_static_malloc+0x18>)
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	370c      	adds	r7, #12
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac8:	4770      	bx	lr
 8016aca:	bf00      	nop
 8016acc:	24002ea0 	.word	0x24002ea0

08016ad0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016ad0:	b480      	push	{r7}
 8016ad2:	b083      	sub	sp, #12
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016ad8:	bf00      	nop
 8016ada:	370c      	adds	r7, #12
 8016adc:	46bd      	mov	sp, r7
 8016ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae2:	4770      	bx	lr

08016ae4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016ae4:	b480      	push	{r7}
 8016ae6:	b085      	sub	sp, #20
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	4603      	mov	r3, r0
 8016aec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aee:	2300      	movs	r3, #0
 8016af0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016af2:	79fb      	ldrb	r3, [r7, #7]
 8016af4:	2b03      	cmp	r3, #3
 8016af6:	d817      	bhi.n	8016b28 <USBD_Get_USB_Status+0x44>
 8016af8:	a201      	add	r2, pc, #4	; (adr r2, 8016b00 <USBD_Get_USB_Status+0x1c>)
 8016afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016afe:	bf00      	nop
 8016b00:	08016b11 	.word	0x08016b11
 8016b04:	08016b17 	.word	0x08016b17
 8016b08:	08016b1d 	.word	0x08016b1d
 8016b0c:	08016b23 	.word	0x08016b23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016b10:	2300      	movs	r3, #0
 8016b12:	73fb      	strb	r3, [r7, #15]
    break;
 8016b14:	e00b      	b.n	8016b2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016b16:	2303      	movs	r3, #3
 8016b18:	73fb      	strb	r3, [r7, #15]
    break;
 8016b1a:	e008      	b.n	8016b2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8016b20:	e005      	b.n	8016b2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016b22:	2303      	movs	r3, #3
 8016b24:	73fb      	strb	r3, [r7, #15]
    break;
 8016b26:	e002      	b.n	8016b2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016b28:	2303      	movs	r3, #3
 8016b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8016b2c:	bf00      	nop
  }
  return usb_status;
 8016b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b30:	4618      	mov	r0, r3
 8016b32:	3714      	adds	r7, #20
 8016b34:	46bd      	mov	sp, r7
 8016b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3a:	4770      	bx	lr

08016b3c <__errno>:
 8016b3c:	4b01      	ldr	r3, [pc, #4]	; (8016b44 <__errno+0x8>)
 8016b3e:	6818      	ldr	r0, [r3, #0]
 8016b40:	4770      	bx	lr
 8016b42:	bf00      	nop
 8016b44:	24000100 	.word	0x24000100

08016b48 <__libc_init_array>:
 8016b48:	b570      	push	{r4, r5, r6, lr}
 8016b4a:	4d0d      	ldr	r5, [pc, #52]	; (8016b80 <__libc_init_array+0x38>)
 8016b4c:	4c0d      	ldr	r4, [pc, #52]	; (8016b84 <__libc_init_array+0x3c>)
 8016b4e:	1b64      	subs	r4, r4, r5
 8016b50:	10a4      	asrs	r4, r4, #2
 8016b52:	2600      	movs	r6, #0
 8016b54:	42a6      	cmp	r6, r4
 8016b56:	d109      	bne.n	8016b6c <__libc_init_array+0x24>
 8016b58:	4d0b      	ldr	r5, [pc, #44]	; (8016b88 <__libc_init_array+0x40>)
 8016b5a:	4c0c      	ldr	r4, [pc, #48]	; (8016b8c <__libc_init_array+0x44>)
 8016b5c:	f001 f94a 	bl	8017df4 <_init>
 8016b60:	1b64      	subs	r4, r4, r5
 8016b62:	10a4      	asrs	r4, r4, #2
 8016b64:	2600      	movs	r6, #0
 8016b66:	42a6      	cmp	r6, r4
 8016b68:	d105      	bne.n	8016b76 <__libc_init_array+0x2e>
 8016b6a:	bd70      	pop	{r4, r5, r6, pc}
 8016b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b70:	4798      	blx	r3
 8016b72:	3601      	adds	r6, #1
 8016b74:	e7ee      	b.n	8016b54 <__libc_init_array+0xc>
 8016b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b7a:	4798      	blx	r3
 8016b7c:	3601      	adds	r6, #1
 8016b7e:	e7f2      	b.n	8016b66 <__libc_init_array+0x1e>
 8016b80:	080181e4 	.word	0x080181e4
 8016b84:	080181e4 	.word	0x080181e4
 8016b88:	080181e4 	.word	0x080181e4
 8016b8c:	080181e8 	.word	0x080181e8

08016b90 <memcpy>:
 8016b90:	440a      	add	r2, r1
 8016b92:	4291      	cmp	r1, r2
 8016b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b98:	d100      	bne.n	8016b9c <memcpy+0xc>
 8016b9a:	4770      	bx	lr
 8016b9c:	b510      	push	{r4, lr}
 8016b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ba6:	4291      	cmp	r1, r2
 8016ba8:	d1f9      	bne.n	8016b9e <memcpy+0xe>
 8016baa:	bd10      	pop	{r4, pc}

08016bac <memset>:
 8016bac:	4402      	add	r2, r0
 8016bae:	4603      	mov	r3, r0
 8016bb0:	4293      	cmp	r3, r2
 8016bb2:	d100      	bne.n	8016bb6 <memset+0xa>
 8016bb4:	4770      	bx	lr
 8016bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8016bba:	e7f9      	b.n	8016bb0 <memset+0x4>

08016bbc <siprintf>:
 8016bbc:	b40e      	push	{r1, r2, r3}
 8016bbe:	b500      	push	{lr}
 8016bc0:	b09c      	sub	sp, #112	; 0x70
 8016bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8016bc4:	9002      	str	r0, [sp, #8]
 8016bc6:	9006      	str	r0, [sp, #24]
 8016bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016bcc:	4809      	ldr	r0, [pc, #36]	; (8016bf4 <siprintf+0x38>)
 8016bce:	9107      	str	r1, [sp, #28]
 8016bd0:	9104      	str	r1, [sp, #16]
 8016bd2:	4909      	ldr	r1, [pc, #36]	; (8016bf8 <siprintf+0x3c>)
 8016bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bd8:	9105      	str	r1, [sp, #20]
 8016bda:	6800      	ldr	r0, [r0, #0]
 8016bdc:	9301      	str	r3, [sp, #4]
 8016bde:	a902      	add	r1, sp, #8
 8016be0:	f000 f896 	bl	8016d10 <_svfiprintf_r>
 8016be4:	9b02      	ldr	r3, [sp, #8]
 8016be6:	2200      	movs	r2, #0
 8016be8:	701a      	strb	r2, [r3, #0]
 8016bea:	b01c      	add	sp, #112	; 0x70
 8016bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8016bf0:	b003      	add	sp, #12
 8016bf2:	4770      	bx	lr
 8016bf4:	24000100 	.word	0x24000100
 8016bf8:	ffff0208 	.word	0xffff0208

08016bfc <siscanf>:
 8016bfc:	b40e      	push	{r1, r2, r3}
 8016bfe:	b510      	push	{r4, lr}
 8016c00:	b09f      	sub	sp, #124	; 0x7c
 8016c02:	ac21      	add	r4, sp, #132	; 0x84
 8016c04:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016c08:	f854 2b04 	ldr.w	r2, [r4], #4
 8016c0c:	9201      	str	r2, [sp, #4]
 8016c0e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016c12:	9004      	str	r0, [sp, #16]
 8016c14:	9008      	str	r0, [sp, #32]
 8016c16:	f7e9 fb85 	bl	8000324 <strlen>
 8016c1a:	4b0c      	ldr	r3, [pc, #48]	; (8016c4c <siscanf+0x50>)
 8016c1c:	9005      	str	r0, [sp, #20]
 8016c1e:	9009      	str	r0, [sp, #36]	; 0x24
 8016c20:	930d      	str	r3, [sp, #52]	; 0x34
 8016c22:	480b      	ldr	r0, [pc, #44]	; (8016c50 <siscanf+0x54>)
 8016c24:	9a01      	ldr	r2, [sp, #4]
 8016c26:	6800      	ldr	r0, [r0, #0]
 8016c28:	9403      	str	r4, [sp, #12]
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	9311      	str	r3, [sp, #68]	; 0x44
 8016c2e:	9316      	str	r3, [sp, #88]	; 0x58
 8016c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016c38:	a904      	add	r1, sp, #16
 8016c3a:	4623      	mov	r3, r4
 8016c3c:	f000 f9c2 	bl	8016fc4 <__ssvfiscanf_r>
 8016c40:	b01f      	add	sp, #124	; 0x7c
 8016c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c46:	b003      	add	sp, #12
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop
 8016c4c:	08016c55 	.word	0x08016c55
 8016c50:	24000100 	.word	0x24000100

08016c54 <__seofread>:
 8016c54:	2000      	movs	r0, #0
 8016c56:	4770      	bx	lr

08016c58 <__ssputs_r>:
 8016c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c5c:	688e      	ldr	r6, [r1, #8]
 8016c5e:	429e      	cmp	r6, r3
 8016c60:	4682      	mov	sl, r0
 8016c62:	460c      	mov	r4, r1
 8016c64:	4690      	mov	r8, r2
 8016c66:	461f      	mov	r7, r3
 8016c68:	d838      	bhi.n	8016cdc <__ssputs_r+0x84>
 8016c6a:	898a      	ldrh	r2, [r1, #12]
 8016c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016c70:	d032      	beq.n	8016cd8 <__ssputs_r+0x80>
 8016c72:	6825      	ldr	r5, [r4, #0]
 8016c74:	6909      	ldr	r1, [r1, #16]
 8016c76:	eba5 0901 	sub.w	r9, r5, r1
 8016c7a:	6965      	ldr	r5, [r4, #20]
 8016c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016c84:	3301      	adds	r3, #1
 8016c86:	444b      	add	r3, r9
 8016c88:	106d      	asrs	r5, r5, #1
 8016c8a:	429d      	cmp	r5, r3
 8016c8c:	bf38      	it	cc
 8016c8e:	461d      	movcc	r5, r3
 8016c90:	0553      	lsls	r3, r2, #21
 8016c92:	d531      	bpl.n	8016cf8 <__ssputs_r+0xa0>
 8016c94:	4629      	mov	r1, r5
 8016c96:	f000 ffe5 	bl	8017c64 <_malloc_r>
 8016c9a:	4606      	mov	r6, r0
 8016c9c:	b950      	cbnz	r0, 8016cb4 <__ssputs_r+0x5c>
 8016c9e:	230c      	movs	r3, #12
 8016ca0:	f8ca 3000 	str.w	r3, [sl]
 8016ca4:	89a3      	ldrh	r3, [r4, #12]
 8016ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016caa:	81a3      	strh	r3, [r4, #12]
 8016cac:	f04f 30ff 	mov.w	r0, #4294967295
 8016cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cb4:	6921      	ldr	r1, [r4, #16]
 8016cb6:	464a      	mov	r2, r9
 8016cb8:	f7ff ff6a 	bl	8016b90 <memcpy>
 8016cbc:	89a3      	ldrh	r3, [r4, #12]
 8016cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cc6:	81a3      	strh	r3, [r4, #12]
 8016cc8:	6126      	str	r6, [r4, #16]
 8016cca:	6165      	str	r5, [r4, #20]
 8016ccc:	444e      	add	r6, r9
 8016cce:	eba5 0509 	sub.w	r5, r5, r9
 8016cd2:	6026      	str	r6, [r4, #0]
 8016cd4:	60a5      	str	r5, [r4, #8]
 8016cd6:	463e      	mov	r6, r7
 8016cd8:	42be      	cmp	r6, r7
 8016cda:	d900      	bls.n	8016cde <__ssputs_r+0x86>
 8016cdc:	463e      	mov	r6, r7
 8016cde:	6820      	ldr	r0, [r4, #0]
 8016ce0:	4632      	mov	r2, r6
 8016ce2:	4641      	mov	r1, r8
 8016ce4:	f000 ff38 	bl	8017b58 <memmove>
 8016ce8:	68a3      	ldr	r3, [r4, #8]
 8016cea:	1b9b      	subs	r3, r3, r6
 8016cec:	60a3      	str	r3, [r4, #8]
 8016cee:	6823      	ldr	r3, [r4, #0]
 8016cf0:	4433      	add	r3, r6
 8016cf2:	6023      	str	r3, [r4, #0]
 8016cf4:	2000      	movs	r0, #0
 8016cf6:	e7db      	b.n	8016cb0 <__ssputs_r+0x58>
 8016cf8:	462a      	mov	r2, r5
 8016cfa:	f001 f827 	bl	8017d4c <_realloc_r>
 8016cfe:	4606      	mov	r6, r0
 8016d00:	2800      	cmp	r0, #0
 8016d02:	d1e1      	bne.n	8016cc8 <__ssputs_r+0x70>
 8016d04:	6921      	ldr	r1, [r4, #16]
 8016d06:	4650      	mov	r0, sl
 8016d08:	f000 ff40 	bl	8017b8c <_free_r>
 8016d0c:	e7c7      	b.n	8016c9e <__ssputs_r+0x46>
	...

08016d10 <_svfiprintf_r>:
 8016d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d14:	4698      	mov	r8, r3
 8016d16:	898b      	ldrh	r3, [r1, #12]
 8016d18:	061b      	lsls	r3, r3, #24
 8016d1a:	b09d      	sub	sp, #116	; 0x74
 8016d1c:	4607      	mov	r7, r0
 8016d1e:	460d      	mov	r5, r1
 8016d20:	4614      	mov	r4, r2
 8016d22:	d50e      	bpl.n	8016d42 <_svfiprintf_r+0x32>
 8016d24:	690b      	ldr	r3, [r1, #16]
 8016d26:	b963      	cbnz	r3, 8016d42 <_svfiprintf_r+0x32>
 8016d28:	2140      	movs	r1, #64	; 0x40
 8016d2a:	f000 ff9b 	bl	8017c64 <_malloc_r>
 8016d2e:	6028      	str	r0, [r5, #0]
 8016d30:	6128      	str	r0, [r5, #16]
 8016d32:	b920      	cbnz	r0, 8016d3e <_svfiprintf_r+0x2e>
 8016d34:	230c      	movs	r3, #12
 8016d36:	603b      	str	r3, [r7, #0]
 8016d38:	f04f 30ff 	mov.w	r0, #4294967295
 8016d3c:	e0d1      	b.n	8016ee2 <_svfiprintf_r+0x1d2>
 8016d3e:	2340      	movs	r3, #64	; 0x40
 8016d40:	616b      	str	r3, [r5, #20]
 8016d42:	2300      	movs	r3, #0
 8016d44:	9309      	str	r3, [sp, #36]	; 0x24
 8016d46:	2320      	movs	r3, #32
 8016d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d50:	2330      	movs	r3, #48	; 0x30
 8016d52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016efc <_svfiprintf_r+0x1ec>
 8016d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d5a:	f04f 0901 	mov.w	r9, #1
 8016d5e:	4623      	mov	r3, r4
 8016d60:	469a      	mov	sl, r3
 8016d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d66:	b10a      	cbz	r2, 8016d6c <_svfiprintf_r+0x5c>
 8016d68:	2a25      	cmp	r2, #37	; 0x25
 8016d6a:	d1f9      	bne.n	8016d60 <_svfiprintf_r+0x50>
 8016d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8016d70:	d00b      	beq.n	8016d8a <_svfiprintf_r+0x7a>
 8016d72:	465b      	mov	r3, fp
 8016d74:	4622      	mov	r2, r4
 8016d76:	4629      	mov	r1, r5
 8016d78:	4638      	mov	r0, r7
 8016d7a:	f7ff ff6d 	bl	8016c58 <__ssputs_r>
 8016d7e:	3001      	adds	r0, #1
 8016d80:	f000 80aa 	beq.w	8016ed8 <_svfiprintf_r+0x1c8>
 8016d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d86:	445a      	add	r2, fp
 8016d88:	9209      	str	r2, [sp, #36]	; 0x24
 8016d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	f000 80a2 	beq.w	8016ed8 <_svfiprintf_r+0x1c8>
 8016d94:	2300      	movs	r3, #0
 8016d96:	f04f 32ff 	mov.w	r2, #4294967295
 8016d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d9e:	f10a 0a01 	add.w	sl, sl, #1
 8016da2:	9304      	str	r3, [sp, #16]
 8016da4:	9307      	str	r3, [sp, #28]
 8016da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016daa:	931a      	str	r3, [sp, #104]	; 0x68
 8016dac:	4654      	mov	r4, sl
 8016dae:	2205      	movs	r2, #5
 8016db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016db4:	4851      	ldr	r0, [pc, #324]	; (8016efc <_svfiprintf_r+0x1ec>)
 8016db6:	f7e9 fac3 	bl	8000340 <memchr>
 8016dba:	9a04      	ldr	r2, [sp, #16]
 8016dbc:	b9d8      	cbnz	r0, 8016df6 <_svfiprintf_r+0xe6>
 8016dbe:	06d0      	lsls	r0, r2, #27
 8016dc0:	bf44      	itt	mi
 8016dc2:	2320      	movmi	r3, #32
 8016dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016dc8:	0711      	lsls	r1, r2, #28
 8016dca:	bf44      	itt	mi
 8016dcc:	232b      	movmi	r3, #43	; 0x2b
 8016dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8016dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8016dd8:	d015      	beq.n	8016e06 <_svfiprintf_r+0xf6>
 8016dda:	9a07      	ldr	r2, [sp, #28]
 8016ddc:	4654      	mov	r4, sl
 8016dde:	2000      	movs	r0, #0
 8016de0:	f04f 0c0a 	mov.w	ip, #10
 8016de4:	4621      	mov	r1, r4
 8016de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016dea:	3b30      	subs	r3, #48	; 0x30
 8016dec:	2b09      	cmp	r3, #9
 8016dee:	d94e      	bls.n	8016e8e <_svfiprintf_r+0x17e>
 8016df0:	b1b0      	cbz	r0, 8016e20 <_svfiprintf_r+0x110>
 8016df2:	9207      	str	r2, [sp, #28]
 8016df4:	e014      	b.n	8016e20 <_svfiprintf_r+0x110>
 8016df6:	eba0 0308 	sub.w	r3, r0, r8
 8016dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8016dfe:	4313      	orrs	r3, r2
 8016e00:	9304      	str	r3, [sp, #16]
 8016e02:	46a2      	mov	sl, r4
 8016e04:	e7d2      	b.n	8016dac <_svfiprintf_r+0x9c>
 8016e06:	9b03      	ldr	r3, [sp, #12]
 8016e08:	1d19      	adds	r1, r3, #4
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	9103      	str	r1, [sp, #12]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	bfbb      	ittet	lt
 8016e12:	425b      	neglt	r3, r3
 8016e14:	f042 0202 	orrlt.w	r2, r2, #2
 8016e18:	9307      	strge	r3, [sp, #28]
 8016e1a:	9307      	strlt	r3, [sp, #28]
 8016e1c:	bfb8      	it	lt
 8016e1e:	9204      	strlt	r2, [sp, #16]
 8016e20:	7823      	ldrb	r3, [r4, #0]
 8016e22:	2b2e      	cmp	r3, #46	; 0x2e
 8016e24:	d10c      	bne.n	8016e40 <_svfiprintf_r+0x130>
 8016e26:	7863      	ldrb	r3, [r4, #1]
 8016e28:	2b2a      	cmp	r3, #42	; 0x2a
 8016e2a:	d135      	bne.n	8016e98 <_svfiprintf_r+0x188>
 8016e2c:	9b03      	ldr	r3, [sp, #12]
 8016e2e:	1d1a      	adds	r2, r3, #4
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	9203      	str	r2, [sp, #12]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	bfb8      	it	lt
 8016e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e3c:	3402      	adds	r4, #2
 8016e3e:	9305      	str	r3, [sp, #20]
 8016e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016f0c <_svfiprintf_r+0x1fc>
 8016e44:	7821      	ldrb	r1, [r4, #0]
 8016e46:	2203      	movs	r2, #3
 8016e48:	4650      	mov	r0, sl
 8016e4a:	f7e9 fa79 	bl	8000340 <memchr>
 8016e4e:	b140      	cbz	r0, 8016e62 <_svfiprintf_r+0x152>
 8016e50:	2340      	movs	r3, #64	; 0x40
 8016e52:	eba0 000a 	sub.w	r0, r0, sl
 8016e56:	fa03 f000 	lsl.w	r0, r3, r0
 8016e5a:	9b04      	ldr	r3, [sp, #16]
 8016e5c:	4303      	orrs	r3, r0
 8016e5e:	3401      	adds	r4, #1
 8016e60:	9304      	str	r3, [sp, #16]
 8016e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e66:	4826      	ldr	r0, [pc, #152]	; (8016f00 <_svfiprintf_r+0x1f0>)
 8016e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e6c:	2206      	movs	r2, #6
 8016e6e:	f7e9 fa67 	bl	8000340 <memchr>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d038      	beq.n	8016ee8 <_svfiprintf_r+0x1d8>
 8016e76:	4b23      	ldr	r3, [pc, #140]	; (8016f04 <_svfiprintf_r+0x1f4>)
 8016e78:	bb1b      	cbnz	r3, 8016ec2 <_svfiprintf_r+0x1b2>
 8016e7a:	9b03      	ldr	r3, [sp, #12]
 8016e7c:	3307      	adds	r3, #7
 8016e7e:	f023 0307 	bic.w	r3, r3, #7
 8016e82:	3308      	adds	r3, #8
 8016e84:	9303      	str	r3, [sp, #12]
 8016e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e88:	4433      	add	r3, r6
 8016e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8016e8c:	e767      	b.n	8016d5e <_svfiprintf_r+0x4e>
 8016e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e92:	460c      	mov	r4, r1
 8016e94:	2001      	movs	r0, #1
 8016e96:	e7a5      	b.n	8016de4 <_svfiprintf_r+0xd4>
 8016e98:	2300      	movs	r3, #0
 8016e9a:	3401      	adds	r4, #1
 8016e9c:	9305      	str	r3, [sp, #20]
 8016e9e:	4619      	mov	r1, r3
 8016ea0:	f04f 0c0a 	mov.w	ip, #10
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016eaa:	3a30      	subs	r2, #48	; 0x30
 8016eac:	2a09      	cmp	r2, #9
 8016eae:	d903      	bls.n	8016eb8 <_svfiprintf_r+0x1a8>
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d0c5      	beq.n	8016e40 <_svfiprintf_r+0x130>
 8016eb4:	9105      	str	r1, [sp, #20]
 8016eb6:	e7c3      	b.n	8016e40 <_svfiprintf_r+0x130>
 8016eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	e7f0      	b.n	8016ea4 <_svfiprintf_r+0x194>
 8016ec2:	ab03      	add	r3, sp, #12
 8016ec4:	9300      	str	r3, [sp, #0]
 8016ec6:	462a      	mov	r2, r5
 8016ec8:	4b0f      	ldr	r3, [pc, #60]	; (8016f08 <_svfiprintf_r+0x1f8>)
 8016eca:	a904      	add	r1, sp, #16
 8016ecc:	4638      	mov	r0, r7
 8016ece:	f3af 8000 	nop.w
 8016ed2:	1c42      	adds	r2, r0, #1
 8016ed4:	4606      	mov	r6, r0
 8016ed6:	d1d6      	bne.n	8016e86 <_svfiprintf_r+0x176>
 8016ed8:	89ab      	ldrh	r3, [r5, #12]
 8016eda:	065b      	lsls	r3, r3, #25
 8016edc:	f53f af2c 	bmi.w	8016d38 <_svfiprintf_r+0x28>
 8016ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ee2:	b01d      	add	sp, #116	; 0x74
 8016ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee8:	ab03      	add	r3, sp, #12
 8016eea:	9300      	str	r3, [sp, #0]
 8016eec:	462a      	mov	r2, r5
 8016eee:	4b06      	ldr	r3, [pc, #24]	; (8016f08 <_svfiprintf_r+0x1f8>)
 8016ef0:	a904      	add	r1, sp, #16
 8016ef2:	4638      	mov	r0, r7
 8016ef4:	f000 fa4c 	bl	8017390 <_printf_i>
 8016ef8:	e7eb      	b.n	8016ed2 <_svfiprintf_r+0x1c2>
 8016efa:	bf00      	nop
 8016efc:	0801802c 	.word	0x0801802c
 8016f00:	08018036 	.word	0x08018036
 8016f04:	00000000 	.word	0x00000000
 8016f08:	08016c59 	.word	0x08016c59
 8016f0c:	08018032 	.word	0x08018032

08016f10 <_sungetc_r>:
 8016f10:	b538      	push	{r3, r4, r5, lr}
 8016f12:	1c4b      	adds	r3, r1, #1
 8016f14:	4614      	mov	r4, r2
 8016f16:	d103      	bne.n	8016f20 <_sungetc_r+0x10>
 8016f18:	f04f 35ff 	mov.w	r5, #4294967295
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	bd38      	pop	{r3, r4, r5, pc}
 8016f20:	8993      	ldrh	r3, [r2, #12]
 8016f22:	f023 0320 	bic.w	r3, r3, #32
 8016f26:	8193      	strh	r3, [r2, #12]
 8016f28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f2a:	6852      	ldr	r2, [r2, #4]
 8016f2c:	b2cd      	uxtb	r5, r1
 8016f2e:	b18b      	cbz	r3, 8016f54 <_sungetc_r+0x44>
 8016f30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016f32:	4293      	cmp	r3, r2
 8016f34:	dd08      	ble.n	8016f48 <_sungetc_r+0x38>
 8016f36:	6823      	ldr	r3, [r4, #0]
 8016f38:	1e5a      	subs	r2, r3, #1
 8016f3a:	6022      	str	r2, [r4, #0]
 8016f3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016f40:	6863      	ldr	r3, [r4, #4]
 8016f42:	3301      	adds	r3, #1
 8016f44:	6063      	str	r3, [r4, #4]
 8016f46:	e7e9      	b.n	8016f1c <_sungetc_r+0xc>
 8016f48:	4621      	mov	r1, r4
 8016f4a:	f000 fdc9 	bl	8017ae0 <__submore>
 8016f4e:	2800      	cmp	r0, #0
 8016f50:	d0f1      	beq.n	8016f36 <_sungetc_r+0x26>
 8016f52:	e7e1      	b.n	8016f18 <_sungetc_r+0x8>
 8016f54:	6921      	ldr	r1, [r4, #16]
 8016f56:	6823      	ldr	r3, [r4, #0]
 8016f58:	b151      	cbz	r1, 8016f70 <_sungetc_r+0x60>
 8016f5a:	4299      	cmp	r1, r3
 8016f5c:	d208      	bcs.n	8016f70 <_sungetc_r+0x60>
 8016f5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016f62:	42a9      	cmp	r1, r5
 8016f64:	d104      	bne.n	8016f70 <_sungetc_r+0x60>
 8016f66:	3b01      	subs	r3, #1
 8016f68:	3201      	adds	r2, #1
 8016f6a:	6023      	str	r3, [r4, #0]
 8016f6c:	6062      	str	r2, [r4, #4]
 8016f6e:	e7d5      	b.n	8016f1c <_sungetc_r+0xc>
 8016f70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f78:	6363      	str	r3, [r4, #52]	; 0x34
 8016f7a:	2303      	movs	r3, #3
 8016f7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8016f7e:	4623      	mov	r3, r4
 8016f80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016f84:	6023      	str	r3, [r4, #0]
 8016f86:	2301      	movs	r3, #1
 8016f88:	e7dc      	b.n	8016f44 <_sungetc_r+0x34>

08016f8a <__ssrefill_r>:
 8016f8a:	b510      	push	{r4, lr}
 8016f8c:	460c      	mov	r4, r1
 8016f8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016f90:	b169      	cbz	r1, 8016fae <__ssrefill_r+0x24>
 8016f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f96:	4299      	cmp	r1, r3
 8016f98:	d001      	beq.n	8016f9e <__ssrefill_r+0x14>
 8016f9a:	f000 fdf7 	bl	8017b8c <_free_r>
 8016f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016fa0:	6063      	str	r3, [r4, #4]
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8016fa6:	b113      	cbz	r3, 8016fae <__ssrefill_r+0x24>
 8016fa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016faa:	6023      	str	r3, [r4, #0]
 8016fac:	bd10      	pop	{r4, pc}
 8016fae:	6923      	ldr	r3, [r4, #16]
 8016fb0:	6023      	str	r3, [r4, #0]
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	6063      	str	r3, [r4, #4]
 8016fb6:	89a3      	ldrh	r3, [r4, #12]
 8016fb8:	f043 0320 	orr.w	r3, r3, #32
 8016fbc:	81a3      	strh	r3, [r4, #12]
 8016fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8016fc2:	e7f3      	b.n	8016fac <__ssrefill_r+0x22>

08016fc4 <__ssvfiscanf_r>:
 8016fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fc8:	460c      	mov	r4, r1
 8016fca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016fce:	2100      	movs	r1, #0
 8016fd0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016fd4:	49a6      	ldr	r1, [pc, #664]	; (8017270 <__ssvfiscanf_r+0x2ac>)
 8016fd6:	91a0      	str	r1, [sp, #640]	; 0x280
 8016fd8:	f10d 0804 	add.w	r8, sp, #4
 8016fdc:	49a5      	ldr	r1, [pc, #660]	; (8017274 <__ssvfiscanf_r+0x2b0>)
 8016fde:	4fa6      	ldr	r7, [pc, #664]	; (8017278 <__ssvfiscanf_r+0x2b4>)
 8016fe0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801727c <__ssvfiscanf_r+0x2b8>
 8016fe4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016fe8:	4606      	mov	r6, r0
 8016fea:	91a1      	str	r1, [sp, #644]	; 0x284
 8016fec:	9300      	str	r3, [sp, #0]
 8016fee:	7813      	ldrb	r3, [r2, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	f000 815a 	beq.w	80172aa <__ssvfiscanf_r+0x2e6>
 8016ff6:	5dd9      	ldrb	r1, [r3, r7]
 8016ff8:	f011 0108 	ands.w	r1, r1, #8
 8016ffc:	f102 0501 	add.w	r5, r2, #1
 8017000:	d019      	beq.n	8017036 <__ssvfiscanf_r+0x72>
 8017002:	6863      	ldr	r3, [r4, #4]
 8017004:	2b00      	cmp	r3, #0
 8017006:	dd0f      	ble.n	8017028 <__ssvfiscanf_r+0x64>
 8017008:	6823      	ldr	r3, [r4, #0]
 801700a:	781a      	ldrb	r2, [r3, #0]
 801700c:	5cba      	ldrb	r2, [r7, r2]
 801700e:	0712      	lsls	r2, r2, #28
 8017010:	d401      	bmi.n	8017016 <__ssvfiscanf_r+0x52>
 8017012:	462a      	mov	r2, r5
 8017014:	e7eb      	b.n	8016fee <__ssvfiscanf_r+0x2a>
 8017016:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017018:	3201      	adds	r2, #1
 801701a:	9245      	str	r2, [sp, #276]	; 0x114
 801701c:	6862      	ldr	r2, [r4, #4]
 801701e:	3301      	adds	r3, #1
 8017020:	3a01      	subs	r2, #1
 8017022:	6062      	str	r2, [r4, #4]
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	e7ec      	b.n	8017002 <__ssvfiscanf_r+0x3e>
 8017028:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801702a:	4621      	mov	r1, r4
 801702c:	4630      	mov	r0, r6
 801702e:	4798      	blx	r3
 8017030:	2800      	cmp	r0, #0
 8017032:	d0e9      	beq.n	8017008 <__ssvfiscanf_r+0x44>
 8017034:	e7ed      	b.n	8017012 <__ssvfiscanf_r+0x4e>
 8017036:	2b25      	cmp	r3, #37	; 0x25
 8017038:	d012      	beq.n	8017060 <__ssvfiscanf_r+0x9c>
 801703a:	469a      	mov	sl, r3
 801703c:	6863      	ldr	r3, [r4, #4]
 801703e:	2b00      	cmp	r3, #0
 8017040:	f340 8091 	ble.w	8017166 <__ssvfiscanf_r+0x1a2>
 8017044:	6822      	ldr	r2, [r4, #0]
 8017046:	7813      	ldrb	r3, [r2, #0]
 8017048:	4553      	cmp	r3, sl
 801704a:	f040 812e 	bne.w	80172aa <__ssvfiscanf_r+0x2e6>
 801704e:	6863      	ldr	r3, [r4, #4]
 8017050:	3b01      	subs	r3, #1
 8017052:	6063      	str	r3, [r4, #4]
 8017054:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017056:	3201      	adds	r2, #1
 8017058:	3301      	adds	r3, #1
 801705a:	6022      	str	r2, [r4, #0]
 801705c:	9345      	str	r3, [sp, #276]	; 0x114
 801705e:	e7d8      	b.n	8017012 <__ssvfiscanf_r+0x4e>
 8017060:	9141      	str	r1, [sp, #260]	; 0x104
 8017062:	9143      	str	r1, [sp, #268]	; 0x10c
 8017064:	7853      	ldrb	r3, [r2, #1]
 8017066:	2b2a      	cmp	r3, #42	; 0x2a
 8017068:	bf02      	ittt	eq
 801706a:	2310      	moveq	r3, #16
 801706c:	1c95      	addeq	r5, r2, #2
 801706e:	9341      	streq	r3, [sp, #260]	; 0x104
 8017070:	220a      	movs	r2, #10
 8017072:	46aa      	mov	sl, r5
 8017074:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017078:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801707c:	2b09      	cmp	r3, #9
 801707e:	d91d      	bls.n	80170bc <__ssvfiscanf_r+0xf8>
 8017080:	487e      	ldr	r0, [pc, #504]	; (801727c <__ssvfiscanf_r+0x2b8>)
 8017082:	2203      	movs	r2, #3
 8017084:	f7e9 f95c 	bl	8000340 <memchr>
 8017088:	b140      	cbz	r0, 801709c <__ssvfiscanf_r+0xd8>
 801708a:	2301      	movs	r3, #1
 801708c:	eba0 0009 	sub.w	r0, r0, r9
 8017090:	fa03 f000 	lsl.w	r0, r3, r0
 8017094:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017096:	4318      	orrs	r0, r3
 8017098:	9041      	str	r0, [sp, #260]	; 0x104
 801709a:	4655      	mov	r5, sl
 801709c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80170a0:	2b78      	cmp	r3, #120	; 0x78
 80170a2:	d806      	bhi.n	80170b2 <__ssvfiscanf_r+0xee>
 80170a4:	2b57      	cmp	r3, #87	; 0x57
 80170a6:	d810      	bhi.n	80170ca <__ssvfiscanf_r+0x106>
 80170a8:	2b25      	cmp	r3, #37	; 0x25
 80170aa:	d0c6      	beq.n	801703a <__ssvfiscanf_r+0x76>
 80170ac:	d856      	bhi.n	801715c <__ssvfiscanf_r+0x198>
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d064      	beq.n	801717c <__ssvfiscanf_r+0x1b8>
 80170b2:	2303      	movs	r3, #3
 80170b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80170b6:	230a      	movs	r3, #10
 80170b8:	9342      	str	r3, [sp, #264]	; 0x108
 80170ba:	e071      	b.n	80171a0 <__ssvfiscanf_r+0x1dc>
 80170bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80170be:	fb02 1103 	mla	r1, r2, r3, r1
 80170c2:	3930      	subs	r1, #48	; 0x30
 80170c4:	9143      	str	r1, [sp, #268]	; 0x10c
 80170c6:	4655      	mov	r5, sl
 80170c8:	e7d3      	b.n	8017072 <__ssvfiscanf_r+0xae>
 80170ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80170ce:	2a20      	cmp	r2, #32
 80170d0:	d8ef      	bhi.n	80170b2 <__ssvfiscanf_r+0xee>
 80170d2:	a101      	add	r1, pc, #4	; (adr r1, 80170d8 <__ssvfiscanf_r+0x114>)
 80170d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80170d8:	0801718b 	.word	0x0801718b
 80170dc:	080170b3 	.word	0x080170b3
 80170e0:	080170b3 	.word	0x080170b3
 80170e4:	080171e9 	.word	0x080171e9
 80170e8:	080170b3 	.word	0x080170b3
 80170ec:	080170b3 	.word	0x080170b3
 80170f0:	080170b3 	.word	0x080170b3
 80170f4:	080170b3 	.word	0x080170b3
 80170f8:	080170b3 	.word	0x080170b3
 80170fc:	080170b3 	.word	0x080170b3
 8017100:	080170b3 	.word	0x080170b3
 8017104:	080171ff 	.word	0x080171ff
 8017108:	080171d5 	.word	0x080171d5
 801710c:	08017163 	.word	0x08017163
 8017110:	08017163 	.word	0x08017163
 8017114:	08017163 	.word	0x08017163
 8017118:	080170b3 	.word	0x080170b3
 801711c:	080171d9 	.word	0x080171d9
 8017120:	080170b3 	.word	0x080170b3
 8017124:	080170b3 	.word	0x080170b3
 8017128:	080170b3 	.word	0x080170b3
 801712c:	080170b3 	.word	0x080170b3
 8017130:	0801720f 	.word	0x0801720f
 8017134:	080171e1 	.word	0x080171e1
 8017138:	08017183 	.word	0x08017183
 801713c:	080170b3 	.word	0x080170b3
 8017140:	080170b3 	.word	0x080170b3
 8017144:	0801720b 	.word	0x0801720b
 8017148:	080170b3 	.word	0x080170b3
 801714c:	080171d5 	.word	0x080171d5
 8017150:	080170b3 	.word	0x080170b3
 8017154:	080170b3 	.word	0x080170b3
 8017158:	0801718b 	.word	0x0801718b
 801715c:	3b45      	subs	r3, #69	; 0x45
 801715e:	2b02      	cmp	r3, #2
 8017160:	d8a7      	bhi.n	80170b2 <__ssvfiscanf_r+0xee>
 8017162:	2305      	movs	r3, #5
 8017164:	e01b      	b.n	801719e <__ssvfiscanf_r+0x1da>
 8017166:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017168:	4621      	mov	r1, r4
 801716a:	4630      	mov	r0, r6
 801716c:	4798      	blx	r3
 801716e:	2800      	cmp	r0, #0
 8017170:	f43f af68 	beq.w	8017044 <__ssvfiscanf_r+0x80>
 8017174:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017176:	2800      	cmp	r0, #0
 8017178:	f040 808d 	bne.w	8017296 <__ssvfiscanf_r+0x2d2>
 801717c:	f04f 30ff 	mov.w	r0, #4294967295
 8017180:	e08f      	b.n	80172a2 <__ssvfiscanf_r+0x2de>
 8017182:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017184:	f042 0220 	orr.w	r2, r2, #32
 8017188:	9241      	str	r2, [sp, #260]	; 0x104
 801718a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801718c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017190:	9241      	str	r2, [sp, #260]	; 0x104
 8017192:	2210      	movs	r2, #16
 8017194:	2b6f      	cmp	r3, #111	; 0x6f
 8017196:	9242      	str	r2, [sp, #264]	; 0x108
 8017198:	bf34      	ite	cc
 801719a:	2303      	movcc	r3, #3
 801719c:	2304      	movcs	r3, #4
 801719e:	9347      	str	r3, [sp, #284]	; 0x11c
 80171a0:	6863      	ldr	r3, [r4, #4]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	dd42      	ble.n	801722c <__ssvfiscanf_r+0x268>
 80171a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171a8:	0659      	lsls	r1, r3, #25
 80171aa:	d404      	bmi.n	80171b6 <__ssvfiscanf_r+0x1f2>
 80171ac:	6823      	ldr	r3, [r4, #0]
 80171ae:	781a      	ldrb	r2, [r3, #0]
 80171b0:	5cba      	ldrb	r2, [r7, r2]
 80171b2:	0712      	lsls	r2, r2, #28
 80171b4:	d441      	bmi.n	801723a <__ssvfiscanf_r+0x276>
 80171b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80171b8:	2b02      	cmp	r3, #2
 80171ba:	dc50      	bgt.n	801725e <__ssvfiscanf_r+0x29a>
 80171bc:	466b      	mov	r3, sp
 80171be:	4622      	mov	r2, r4
 80171c0:	a941      	add	r1, sp, #260	; 0x104
 80171c2:	4630      	mov	r0, r6
 80171c4:	f000 fa0a 	bl	80175dc <_scanf_chars>
 80171c8:	2801      	cmp	r0, #1
 80171ca:	d06e      	beq.n	80172aa <__ssvfiscanf_r+0x2e6>
 80171cc:	2802      	cmp	r0, #2
 80171ce:	f47f af20 	bne.w	8017012 <__ssvfiscanf_r+0x4e>
 80171d2:	e7cf      	b.n	8017174 <__ssvfiscanf_r+0x1b0>
 80171d4:	220a      	movs	r2, #10
 80171d6:	e7dd      	b.n	8017194 <__ssvfiscanf_r+0x1d0>
 80171d8:	2300      	movs	r3, #0
 80171da:	9342      	str	r3, [sp, #264]	; 0x108
 80171dc:	2303      	movs	r3, #3
 80171de:	e7de      	b.n	801719e <__ssvfiscanf_r+0x1da>
 80171e0:	2308      	movs	r3, #8
 80171e2:	9342      	str	r3, [sp, #264]	; 0x108
 80171e4:	2304      	movs	r3, #4
 80171e6:	e7da      	b.n	801719e <__ssvfiscanf_r+0x1da>
 80171e8:	4629      	mov	r1, r5
 80171ea:	4640      	mov	r0, r8
 80171ec:	f000 fb48 	bl	8017880 <__sccl>
 80171f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171f6:	9341      	str	r3, [sp, #260]	; 0x104
 80171f8:	4605      	mov	r5, r0
 80171fa:	2301      	movs	r3, #1
 80171fc:	e7cf      	b.n	801719e <__ssvfiscanf_r+0x1da>
 80171fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017204:	9341      	str	r3, [sp, #260]	; 0x104
 8017206:	2300      	movs	r3, #0
 8017208:	e7c9      	b.n	801719e <__ssvfiscanf_r+0x1da>
 801720a:	2302      	movs	r3, #2
 801720c:	e7c7      	b.n	801719e <__ssvfiscanf_r+0x1da>
 801720e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017210:	06c3      	lsls	r3, r0, #27
 8017212:	f53f aefe 	bmi.w	8017012 <__ssvfiscanf_r+0x4e>
 8017216:	9b00      	ldr	r3, [sp, #0]
 8017218:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801721a:	1d19      	adds	r1, r3, #4
 801721c:	9100      	str	r1, [sp, #0]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	f010 0f01 	tst.w	r0, #1
 8017224:	bf14      	ite	ne
 8017226:	801a      	strhne	r2, [r3, #0]
 8017228:	601a      	streq	r2, [r3, #0]
 801722a:	e6f2      	b.n	8017012 <__ssvfiscanf_r+0x4e>
 801722c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801722e:	4621      	mov	r1, r4
 8017230:	4630      	mov	r0, r6
 8017232:	4798      	blx	r3
 8017234:	2800      	cmp	r0, #0
 8017236:	d0b6      	beq.n	80171a6 <__ssvfiscanf_r+0x1e2>
 8017238:	e79c      	b.n	8017174 <__ssvfiscanf_r+0x1b0>
 801723a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801723c:	3201      	adds	r2, #1
 801723e:	9245      	str	r2, [sp, #276]	; 0x114
 8017240:	6862      	ldr	r2, [r4, #4]
 8017242:	3a01      	subs	r2, #1
 8017244:	2a00      	cmp	r2, #0
 8017246:	6062      	str	r2, [r4, #4]
 8017248:	dd02      	ble.n	8017250 <__ssvfiscanf_r+0x28c>
 801724a:	3301      	adds	r3, #1
 801724c:	6023      	str	r3, [r4, #0]
 801724e:	e7ad      	b.n	80171ac <__ssvfiscanf_r+0x1e8>
 8017250:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017252:	4621      	mov	r1, r4
 8017254:	4630      	mov	r0, r6
 8017256:	4798      	blx	r3
 8017258:	2800      	cmp	r0, #0
 801725a:	d0a7      	beq.n	80171ac <__ssvfiscanf_r+0x1e8>
 801725c:	e78a      	b.n	8017174 <__ssvfiscanf_r+0x1b0>
 801725e:	2b04      	cmp	r3, #4
 8017260:	dc0e      	bgt.n	8017280 <__ssvfiscanf_r+0x2bc>
 8017262:	466b      	mov	r3, sp
 8017264:	4622      	mov	r2, r4
 8017266:	a941      	add	r1, sp, #260	; 0x104
 8017268:	4630      	mov	r0, r6
 801726a:	f000 fa11 	bl	8017690 <_scanf_i>
 801726e:	e7ab      	b.n	80171c8 <__ssvfiscanf_r+0x204>
 8017270:	08016f11 	.word	0x08016f11
 8017274:	08016f8b 	.word	0x08016f8b
 8017278:	0801807b 	.word	0x0801807b
 801727c:	08018032 	.word	0x08018032
 8017280:	4b0b      	ldr	r3, [pc, #44]	; (80172b0 <__ssvfiscanf_r+0x2ec>)
 8017282:	2b00      	cmp	r3, #0
 8017284:	f43f aec5 	beq.w	8017012 <__ssvfiscanf_r+0x4e>
 8017288:	466b      	mov	r3, sp
 801728a:	4622      	mov	r2, r4
 801728c:	a941      	add	r1, sp, #260	; 0x104
 801728e:	4630      	mov	r0, r6
 8017290:	f3af 8000 	nop.w
 8017294:	e798      	b.n	80171c8 <__ssvfiscanf_r+0x204>
 8017296:	89a3      	ldrh	r3, [r4, #12]
 8017298:	f013 0f40 	tst.w	r3, #64	; 0x40
 801729c:	bf18      	it	ne
 801729e:	f04f 30ff 	movne.w	r0, #4294967295
 80172a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80172a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172ac:	e7f9      	b.n	80172a2 <__ssvfiscanf_r+0x2de>
 80172ae:	bf00      	nop
 80172b0:	00000000 	.word	0x00000000

080172b4 <_printf_common>:
 80172b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172b8:	4616      	mov	r6, r2
 80172ba:	4699      	mov	r9, r3
 80172bc:	688a      	ldr	r2, [r1, #8]
 80172be:	690b      	ldr	r3, [r1, #16]
 80172c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80172c4:	4293      	cmp	r3, r2
 80172c6:	bfb8      	it	lt
 80172c8:	4613      	movlt	r3, r2
 80172ca:	6033      	str	r3, [r6, #0]
 80172cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80172d0:	4607      	mov	r7, r0
 80172d2:	460c      	mov	r4, r1
 80172d4:	b10a      	cbz	r2, 80172da <_printf_common+0x26>
 80172d6:	3301      	adds	r3, #1
 80172d8:	6033      	str	r3, [r6, #0]
 80172da:	6823      	ldr	r3, [r4, #0]
 80172dc:	0699      	lsls	r1, r3, #26
 80172de:	bf42      	ittt	mi
 80172e0:	6833      	ldrmi	r3, [r6, #0]
 80172e2:	3302      	addmi	r3, #2
 80172e4:	6033      	strmi	r3, [r6, #0]
 80172e6:	6825      	ldr	r5, [r4, #0]
 80172e8:	f015 0506 	ands.w	r5, r5, #6
 80172ec:	d106      	bne.n	80172fc <_printf_common+0x48>
 80172ee:	f104 0a19 	add.w	sl, r4, #25
 80172f2:	68e3      	ldr	r3, [r4, #12]
 80172f4:	6832      	ldr	r2, [r6, #0]
 80172f6:	1a9b      	subs	r3, r3, r2
 80172f8:	42ab      	cmp	r3, r5
 80172fa:	dc26      	bgt.n	801734a <_printf_common+0x96>
 80172fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017300:	1e13      	subs	r3, r2, #0
 8017302:	6822      	ldr	r2, [r4, #0]
 8017304:	bf18      	it	ne
 8017306:	2301      	movne	r3, #1
 8017308:	0692      	lsls	r2, r2, #26
 801730a:	d42b      	bmi.n	8017364 <_printf_common+0xb0>
 801730c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017310:	4649      	mov	r1, r9
 8017312:	4638      	mov	r0, r7
 8017314:	47c0      	blx	r8
 8017316:	3001      	adds	r0, #1
 8017318:	d01e      	beq.n	8017358 <_printf_common+0xa4>
 801731a:	6823      	ldr	r3, [r4, #0]
 801731c:	68e5      	ldr	r5, [r4, #12]
 801731e:	6832      	ldr	r2, [r6, #0]
 8017320:	f003 0306 	and.w	r3, r3, #6
 8017324:	2b04      	cmp	r3, #4
 8017326:	bf08      	it	eq
 8017328:	1aad      	subeq	r5, r5, r2
 801732a:	68a3      	ldr	r3, [r4, #8]
 801732c:	6922      	ldr	r2, [r4, #16]
 801732e:	bf0c      	ite	eq
 8017330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017334:	2500      	movne	r5, #0
 8017336:	4293      	cmp	r3, r2
 8017338:	bfc4      	itt	gt
 801733a:	1a9b      	subgt	r3, r3, r2
 801733c:	18ed      	addgt	r5, r5, r3
 801733e:	2600      	movs	r6, #0
 8017340:	341a      	adds	r4, #26
 8017342:	42b5      	cmp	r5, r6
 8017344:	d11a      	bne.n	801737c <_printf_common+0xc8>
 8017346:	2000      	movs	r0, #0
 8017348:	e008      	b.n	801735c <_printf_common+0xa8>
 801734a:	2301      	movs	r3, #1
 801734c:	4652      	mov	r2, sl
 801734e:	4649      	mov	r1, r9
 8017350:	4638      	mov	r0, r7
 8017352:	47c0      	blx	r8
 8017354:	3001      	adds	r0, #1
 8017356:	d103      	bne.n	8017360 <_printf_common+0xac>
 8017358:	f04f 30ff 	mov.w	r0, #4294967295
 801735c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017360:	3501      	adds	r5, #1
 8017362:	e7c6      	b.n	80172f2 <_printf_common+0x3e>
 8017364:	18e1      	adds	r1, r4, r3
 8017366:	1c5a      	adds	r2, r3, #1
 8017368:	2030      	movs	r0, #48	; 0x30
 801736a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801736e:	4422      	add	r2, r4
 8017370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017378:	3302      	adds	r3, #2
 801737a:	e7c7      	b.n	801730c <_printf_common+0x58>
 801737c:	2301      	movs	r3, #1
 801737e:	4622      	mov	r2, r4
 8017380:	4649      	mov	r1, r9
 8017382:	4638      	mov	r0, r7
 8017384:	47c0      	blx	r8
 8017386:	3001      	adds	r0, #1
 8017388:	d0e6      	beq.n	8017358 <_printf_common+0xa4>
 801738a:	3601      	adds	r6, #1
 801738c:	e7d9      	b.n	8017342 <_printf_common+0x8e>
	...

08017390 <_printf_i>:
 8017390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017394:	7e0f      	ldrb	r7, [r1, #24]
 8017396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017398:	2f78      	cmp	r7, #120	; 0x78
 801739a:	4691      	mov	r9, r2
 801739c:	4680      	mov	r8, r0
 801739e:	460c      	mov	r4, r1
 80173a0:	469a      	mov	sl, r3
 80173a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80173a6:	d807      	bhi.n	80173b8 <_printf_i+0x28>
 80173a8:	2f62      	cmp	r7, #98	; 0x62
 80173aa:	d80a      	bhi.n	80173c2 <_printf_i+0x32>
 80173ac:	2f00      	cmp	r7, #0
 80173ae:	f000 80d8 	beq.w	8017562 <_printf_i+0x1d2>
 80173b2:	2f58      	cmp	r7, #88	; 0x58
 80173b4:	f000 80a3 	beq.w	80174fe <_printf_i+0x16e>
 80173b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80173c0:	e03a      	b.n	8017438 <_printf_i+0xa8>
 80173c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80173c6:	2b15      	cmp	r3, #21
 80173c8:	d8f6      	bhi.n	80173b8 <_printf_i+0x28>
 80173ca:	a101      	add	r1, pc, #4	; (adr r1, 80173d0 <_printf_i+0x40>)
 80173cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80173d0:	08017429 	.word	0x08017429
 80173d4:	0801743d 	.word	0x0801743d
 80173d8:	080173b9 	.word	0x080173b9
 80173dc:	080173b9 	.word	0x080173b9
 80173e0:	080173b9 	.word	0x080173b9
 80173e4:	080173b9 	.word	0x080173b9
 80173e8:	0801743d 	.word	0x0801743d
 80173ec:	080173b9 	.word	0x080173b9
 80173f0:	080173b9 	.word	0x080173b9
 80173f4:	080173b9 	.word	0x080173b9
 80173f8:	080173b9 	.word	0x080173b9
 80173fc:	08017549 	.word	0x08017549
 8017400:	0801746d 	.word	0x0801746d
 8017404:	0801752b 	.word	0x0801752b
 8017408:	080173b9 	.word	0x080173b9
 801740c:	080173b9 	.word	0x080173b9
 8017410:	0801756b 	.word	0x0801756b
 8017414:	080173b9 	.word	0x080173b9
 8017418:	0801746d 	.word	0x0801746d
 801741c:	080173b9 	.word	0x080173b9
 8017420:	080173b9 	.word	0x080173b9
 8017424:	08017533 	.word	0x08017533
 8017428:	682b      	ldr	r3, [r5, #0]
 801742a:	1d1a      	adds	r2, r3, #4
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	602a      	str	r2, [r5, #0]
 8017430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017438:	2301      	movs	r3, #1
 801743a:	e0a3      	b.n	8017584 <_printf_i+0x1f4>
 801743c:	6820      	ldr	r0, [r4, #0]
 801743e:	6829      	ldr	r1, [r5, #0]
 8017440:	0606      	lsls	r6, r0, #24
 8017442:	f101 0304 	add.w	r3, r1, #4
 8017446:	d50a      	bpl.n	801745e <_printf_i+0xce>
 8017448:	680e      	ldr	r6, [r1, #0]
 801744a:	602b      	str	r3, [r5, #0]
 801744c:	2e00      	cmp	r6, #0
 801744e:	da03      	bge.n	8017458 <_printf_i+0xc8>
 8017450:	232d      	movs	r3, #45	; 0x2d
 8017452:	4276      	negs	r6, r6
 8017454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017458:	485e      	ldr	r0, [pc, #376]	; (80175d4 <_printf_i+0x244>)
 801745a:	230a      	movs	r3, #10
 801745c:	e019      	b.n	8017492 <_printf_i+0x102>
 801745e:	680e      	ldr	r6, [r1, #0]
 8017460:	602b      	str	r3, [r5, #0]
 8017462:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017466:	bf18      	it	ne
 8017468:	b236      	sxthne	r6, r6
 801746a:	e7ef      	b.n	801744c <_printf_i+0xbc>
 801746c:	682b      	ldr	r3, [r5, #0]
 801746e:	6820      	ldr	r0, [r4, #0]
 8017470:	1d19      	adds	r1, r3, #4
 8017472:	6029      	str	r1, [r5, #0]
 8017474:	0601      	lsls	r1, r0, #24
 8017476:	d501      	bpl.n	801747c <_printf_i+0xec>
 8017478:	681e      	ldr	r6, [r3, #0]
 801747a:	e002      	b.n	8017482 <_printf_i+0xf2>
 801747c:	0646      	lsls	r6, r0, #25
 801747e:	d5fb      	bpl.n	8017478 <_printf_i+0xe8>
 8017480:	881e      	ldrh	r6, [r3, #0]
 8017482:	4854      	ldr	r0, [pc, #336]	; (80175d4 <_printf_i+0x244>)
 8017484:	2f6f      	cmp	r7, #111	; 0x6f
 8017486:	bf0c      	ite	eq
 8017488:	2308      	moveq	r3, #8
 801748a:	230a      	movne	r3, #10
 801748c:	2100      	movs	r1, #0
 801748e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017492:	6865      	ldr	r5, [r4, #4]
 8017494:	60a5      	str	r5, [r4, #8]
 8017496:	2d00      	cmp	r5, #0
 8017498:	bfa2      	ittt	ge
 801749a:	6821      	ldrge	r1, [r4, #0]
 801749c:	f021 0104 	bicge.w	r1, r1, #4
 80174a0:	6021      	strge	r1, [r4, #0]
 80174a2:	b90e      	cbnz	r6, 80174a8 <_printf_i+0x118>
 80174a4:	2d00      	cmp	r5, #0
 80174a6:	d04d      	beq.n	8017544 <_printf_i+0x1b4>
 80174a8:	4615      	mov	r5, r2
 80174aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80174ae:	fb03 6711 	mls	r7, r3, r1, r6
 80174b2:	5dc7      	ldrb	r7, [r0, r7]
 80174b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80174b8:	4637      	mov	r7, r6
 80174ba:	42bb      	cmp	r3, r7
 80174bc:	460e      	mov	r6, r1
 80174be:	d9f4      	bls.n	80174aa <_printf_i+0x11a>
 80174c0:	2b08      	cmp	r3, #8
 80174c2:	d10b      	bne.n	80174dc <_printf_i+0x14c>
 80174c4:	6823      	ldr	r3, [r4, #0]
 80174c6:	07de      	lsls	r6, r3, #31
 80174c8:	d508      	bpl.n	80174dc <_printf_i+0x14c>
 80174ca:	6923      	ldr	r3, [r4, #16]
 80174cc:	6861      	ldr	r1, [r4, #4]
 80174ce:	4299      	cmp	r1, r3
 80174d0:	bfde      	ittt	le
 80174d2:	2330      	movle	r3, #48	; 0x30
 80174d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80174d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80174dc:	1b52      	subs	r2, r2, r5
 80174de:	6122      	str	r2, [r4, #16]
 80174e0:	f8cd a000 	str.w	sl, [sp]
 80174e4:	464b      	mov	r3, r9
 80174e6:	aa03      	add	r2, sp, #12
 80174e8:	4621      	mov	r1, r4
 80174ea:	4640      	mov	r0, r8
 80174ec:	f7ff fee2 	bl	80172b4 <_printf_common>
 80174f0:	3001      	adds	r0, #1
 80174f2:	d14c      	bne.n	801758e <_printf_i+0x1fe>
 80174f4:	f04f 30ff 	mov.w	r0, #4294967295
 80174f8:	b004      	add	sp, #16
 80174fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174fe:	4835      	ldr	r0, [pc, #212]	; (80175d4 <_printf_i+0x244>)
 8017500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017504:	6829      	ldr	r1, [r5, #0]
 8017506:	6823      	ldr	r3, [r4, #0]
 8017508:	f851 6b04 	ldr.w	r6, [r1], #4
 801750c:	6029      	str	r1, [r5, #0]
 801750e:	061d      	lsls	r5, r3, #24
 8017510:	d514      	bpl.n	801753c <_printf_i+0x1ac>
 8017512:	07df      	lsls	r7, r3, #31
 8017514:	bf44      	itt	mi
 8017516:	f043 0320 	orrmi.w	r3, r3, #32
 801751a:	6023      	strmi	r3, [r4, #0]
 801751c:	b91e      	cbnz	r6, 8017526 <_printf_i+0x196>
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	f023 0320 	bic.w	r3, r3, #32
 8017524:	6023      	str	r3, [r4, #0]
 8017526:	2310      	movs	r3, #16
 8017528:	e7b0      	b.n	801748c <_printf_i+0xfc>
 801752a:	6823      	ldr	r3, [r4, #0]
 801752c:	f043 0320 	orr.w	r3, r3, #32
 8017530:	6023      	str	r3, [r4, #0]
 8017532:	2378      	movs	r3, #120	; 0x78
 8017534:	4828      	ldr	r0, [pc, #160]	; (80175d8 <_printf_i+0x248>)
 8017536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801753a:	e7e3      	b.n	8017504 <_printf_i+0x174>
 801753c:	0659      	lsls	r1, r3, #25
 801753e:	bf48      	it	mi
 8017540:	b2b6      	uxthmi	r6, r6
 8017542:	e7e6      	b.n	8017512 <_printf_i+0x182>
 8017544:	4615      	mov	r5, r2
 8017546:	e7bb      	b.n	80174c0 <_printf_i+0x130>
 8017548:	682b      	ldr	r3, [r5, #0]
 801754a:	6826      	ldr	r6, [r4, #0]
 801754c:	6961      	ldr	r1, [r4, #20]
 801754e:	1d18      	adds	r0, r3, #4
 8017550:	6028      	str	r0, [r5, #0]
 8017552:	0635      	lsls	r5, r6, #24
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	d501      	bpl.n	801755c <_printf_i+0x1cc>
 8017558:	6019      	str	r1, [r3, #0]
 801755a:	e002      	b.n	8017562 <_printf_i+0x1d2>
 801755c:	0670      	lsls	r0, r6, #25
 801755e:	d5fb      	bpl.n	8017558 <_printf_i+0x1c8>
 8017560:	8019      	strh	r1, [r3, #0]
 8017562:	2300      	movs	r3, #0
 8017564:	6123      	str	r3, [r4, #16]
 8017566:	4615      	mov	r5, r2
 8017568:	e7ba      	b.n	80174e0 <_printf_i+0x150>
 801756a:	682b      	ldr	r3, [r5, #0]
 801756c:	1d1a      	adds	r2, r3, #4
 801756e:	602a      	str	r2, [r5, #0]
 8017570:	681d      	ldr	r5, [r3, #0]
 8017572:	6862      	ldr	r2, [r4, #4]
 8017574:	2100      	movs	r1, #0
 8017576:	4628      	mov	r0, r5
 8017578:	f7e8 fee2 	bl	8000340 <memchr>
 801757c:	b108      	cbz	r0, 8017582 <_printf_i+0x1f2>
 801757e:	1b40      	subs	r0, r0, r5
 8017580:	6060      	str	r0, [r4, #4]
 8017582:	6863      	ldr	r3, [r4, #4]
 8017584:	6123      	str	r3, [r4, #16]
 8017586:	2300      	movs	r3, #0
 8017588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801758c:	e7a8      	b.n	80174e0 <_printf_i+0x150>
 801758e:	6923      	ldr	r3, [r4, #16]
 8017590:	462a      	mov	r2, r5
 8017592:	4649      	mov	r1, r9
 8017594:	4640      	mov	r0, r8
 8017596:	47d0      	blx	sl
 8017598:	3001      	adds	r0, #1
 801759a:	d0ab      	beq.n	80174f4 <_printf_i+0x164>
 801759c:	6823      	ldr	r3, [r4, #0]
 801759e:	079b      	lsls	r3, r3, #30
 80175a0:	d413      	bmi.n	80175ca <_printf_i+0x23a>
 80175a2:	68e0      	ldr	r0, [r4, #12]
 80175a4:	9b03      	ldr	r3, [sp, #12]
 80175a6:	4298      	cmp	r0, r3
 80175a8:	bfb8      	it	lt
 80175aa:	4618      	movlt	r0, r3
 80175ac:	e7a4      	b.n	80174f8 <_printf_i+0x168>
 80175ae:	2301      	movs	r3, #1
 80175b0:	4632      	mov	r2, r6
 80175b2:	4649      	mov	r1, r9
 80175b4:	4640      	mov	r0, r8
 80175b6:	47d0      	blx	sl
 80175b8:	3001      	adds	r0, #1
 80175ba:	d09b      	beq.n	80174f4 <_printf_i+0x164>
 80175bc:	3501      	adds	r5, #1
 80175be:	68e3      	ldr	r3, [r4, #12]
 80175c0:	9903      	ldr	r1, [sp, #12]
 80175c2:	1a5b      	subs	r3, r3, r1
 80175c4:	42ab      	cmp	r3, r5
 80175c6:	dcf2      	bgt.n	80175ae <_printf_i+0x21e>
 80175c8:	e7eb      	b.n	80175a2 <_printf_i+0x212>
 80175ca:	2500      	movs	r5, #0
 80175cc:	f104 0619 	add.w	r6, r4, #25
 80175d0:	e7f5      	b.n	80175be <_printf_i+0x22e>
 80175d2:	bf00      	nop
 80175d4:	0801803d 	.word	0x0801803d
 80175d8:	0801804e 	.word	0x0801804e

080175dc <_scanf_chars>:
 80175dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175e0:	4615      	mov	r5, r2
 80175e2:	688a      	ldr	r2, [r1, #8]
 80175e4:	4680      	mov	r8, r0
 80175e6:	460c      	mov	r4, r1
 80175e8:	b932      	cbnz	r2, 80175f8 <_scanf_chars+0x1c>
 80175ea:	698a      	ldr	r2, [r1, #24]
 80175ec:	2a00      	cmp	r2, #0
 80175ee:	bf0c      	ite	eq
 80175f0:	2201      	moveq	r2, #1
 80175f2:	f04f 32ff 	movne.w	r2, #4294967295
 80175f6:	608a      	str	r2, [r1, #8]
 80175f8:	6822      	ldr	r2, [r4, #0]
 80175fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801768c <_scanf_chars+0xb0>
 80175fe:	06d1      	lsls	r1, r2, #27
 8017600:	bf5f      	itttt	pl
 8017602:	681a      	ldrpl	r2, [r3, #0]
 8017604:	1d11      	addpl	r1, r2, #4
 8017606:	6019      	strpl	r1, [r3, #0]
 8017608:	6816      	ldrpl	r6, [r2, #0]
 801760a:	2700      	movs	r7, #0
 801760c:	69a0      	ldr	r0, [r4, #24]
 801760e:	b188      	cbz	r0, 8017634 <_scanf_chars+0x58>
 8017610:	2801      	cmp	r0, #1
 8017612:	d107      	bne.n	8017624 <_scanf_chars+0x48>
 8017614:	682a      	ldr	r2, [r5, #0]
 8017616:	7811      	ldrb	r1, [r2, #0]
 8017618:	6962      	ldr	r2, [r4, #20]
 801761a:	5c52      	ldrb	r2, [r2, r1]
 801761c:	b952      	cbnz	r2, 8017634 <_scanf_chars+0x58>
 801761e:	2f00      	cmp	r7, #0
 8017620:	d031      	beq.n	8017686 <_scanf_chars+0xaa>
 8017622:	e022      	b.n	801766a <_scanf_chars+0x8e>
 8017624:	2802      	cmp	r0, #2
 8017626:	d120      	bne.n	801766a <_scanf_chars+0x8e>
 8017628:	682b      	ldr	r3, [r5, #0]
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8017630:	071b      	lsls	r3, r3, #28
 8017632:	d41a      	bmi.n	801766a <_scanf_chars+0x8e>
 8017634:	6823      	ldr	r3, [r4, #0]
 8017636:	06da      	lsls	r2, r3, #27
 8017638:	bf5e      	ittt	pl
 801763a:	682b      	ldrpl	r3, [r5, #0]
 801763c:	781b      	ldrbpl	r3, [r3, #0]
 801763e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017642:	682a      	ldr	r2, [r5, #0]
 8017644:	686b      	ldr	r3, [r5, #4]
 8017646:	3201      	adds	r2, #1
 8017648:	602a      	str	r2, [r5, #0]
 801764a:	68a2      	ldr	r2, [r4, #8]
 801764c:	3b01      	subs	r3, #1
 801764e:	3a01      	subs	r2, #1
 8017650:	606b      	str	r3, [r5, #4]
 8017652:	3701      	adds	r7, #1
 8017654:	60a2      	str	r2, [r4, #8]
 8017656:	b142      	cbz	r2, 801766a <_scanf_chars+0x8e>
 8017658:	2b00      	cmp	r3, #0
 801765a:	dcd7      	bgt.n	801760c <_scanf_chars+0x30>
 801765c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017660:	4629      	mov	r1, r5
 8017662:	4640      	mov	r0, r8
 8017664:	4798      	blx	r3
 8017666:	2800      	cmp	r0, #0
 8017668:	d0d0      	beq.n	801760c <_scanf_chars+0x30>
 801766a:	6823      	ldr	r3, [r4, #0]
 801766c:	f013 0310 	ands.w	r3, r3, #16
 8017670:	d105      	bne.n	801767e <_scanf_chars+0xa2>
 8017672:	68e2      	ldr	r2, [r4, #12]
 8017674:	3201      	adds	r2, #1
 8017676:	60e2      	str	r2, [r4, #12]
 8017678:	69a2      	ldr	r2, [r4, #24]
 801767a:	b102      	cbz	r2, 801767e <_scanf_chars+0xa2>
 801767c:	7033      	strb	r3, [r6, #0]
 801767e:	6923      	ldr	r3, [r4, #16]
 8017680:	443b      	add	r3, r7
 8017682:	6123      	str	r3, [r4, #16]
 8017684:	2000      	movs	r0, #0
 8017686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801768a:	bf00      	nop
 801768c:	0801807b 	.word	0x0801807b

08017690 <_scanf_i>:
 8017690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017694:	4698      	mov	r8, r3
 8017696:	4b76      	ldr	r3, [pc, #472]	; (8017870 <_scanf_i+0x1e0>)
 8017698:	460c      	mov	r4, r1
 801769a:	4682      	mov	sl, r0
 801769c:	4616      	mov	r6, r2
 801769e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80176a2:	b087      	sub	sp, #28
 80176a4:	ab03      	add	r3, sp, #12
 80176a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80176aa:	4b72      	ldr	r3, [pc, #456]	; (8017874 <_scanf_i+0x1e4>)
 80176ac:	69a1      	ldr	r1, [r4, #24]
 80176ae:	4a72      	ldr	r2, [pc, #456]	; (8017878 <_scanf_i+0x1e8>)
 80176b0:	2903      	cmp	r1, #3
 80176b2:	bf18      	it	ne
 80176b4:	461a      	movne	r2, r3
 80176b6:	68a3      	ldr	r3, [r4, #8]
 80176b8:	9201      	str	r2, [sp, #4]
 80176ba:	1e5a      	subs	r2, r3, #1
 80176bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80176c0:	bf88      	it	hi
 80176c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80176c6:	4627      	mov	r7, r4
 80176c8:	bf82      	ittt	hi
 80176ca:	eb03 0905 	addhi.w	r9, r3, r5
 80176ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 80176d2:	60a3      	strhi	r3, [r4, #8]
 80176d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80176d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80176dc:	bf98      	it	ls
 80176de:	f04f 0900 	movls.w	r9, #0
 80176e2:	6023      	str	r3, [r4, #0]
 80176e4:	463d      	mov	r5, r7
 80176e6:	f04f 0b00 	mov.w	fp, #0
 80176ea:	6831      	ldr	r1, [r6, #0]
 80176ec:	ab03      	add	r3, sp, #12
 80176ee:	7809      	ldrb	r1, [r1, #0]
 80176f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80176f4:	2202      	movs	r2, #2
 80176f6:	f7e8 fe23 	bl	8000340 <memchr>
 80176fa:	b328      	cbz	r0, 8017748 <_scanf_i+0xb8>
 80176fc:	f1bb 0f01 	cmp.w	fp, #1
 8017700:	d159      	bne.n	80177b6 <_scanf_i+0x126>
 8017702:	6862      	ldr	r2, [r4, #4]
 8017704:	b92a      	cbnz	r2, 8017712 <_scanf_i+0x82>
 8017706:	6822      	ldr	r2, [r4, #0]
 8017708:	2308      	movs	r3, #8
 801770a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801770e:	6063      	str	r3, [r4, #4]
 8017710:	6022      	str	r2, [r4, #0]
 8017712:	6822      	ldr	r2, [r4, #0]
 8017714:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017718:	6022      	str	r2, [r4, #0]
 801771a:	68a2      	ldr	r2, [r4, #8]
 801771c:	1e51      	subs	r1, r2, #1
 801771e:	60a1      	str	r1, [r4, #8]
 8017720:	b192      	cbz	r2, 8017748 <_scanf_i+0xb8>
 8017722:	6832      	ldr	r2, [r6, #0]
 8017724:	1c51      	adds	r1, r2, #1
 8017726:	6031      	str	r1, [r6, #0]
 8017728:	7812      	ldrb	r2, [r2, #0]
 801772a:	f805 2b01 	strb.w	r2, [r5], #1
 801772e:	6872      	ldr	r2, [r6, #4]
 8017730:	3a01      	subs	r2, #1
 8017732:	2a00      	cmp	r2, #0
 8017734:	6072      	str	r2, [r6, #4]
 8017736:	dc07      	bgt.n	8017748 <_scanf_i+0xb8>
 8017738:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801773c:	4631      	mov	r1, r6
 801773e:	4650      	mov	r0, sl
 8017740:	4790      	blx	r2
 8017742:	2800      	cmp	r0, #0
 8017744:	f040 8085 	bne.w	8017852 <_scanf_i+0x1c2>
 8017748:	f10b 0b01 	add.w	fp, fp, #1
 801774c:	f1bb 0f03 	cmp.w	fp, #3
 8017750:	d1cb      	bne.n	80176ea <_scanf_i+0x5a>
 8017752:	6863      	ldr	r3, [r4, #4]
 8017754:	b90b      	cbnz	r3, 801775a <_scanf_i+0xca>
 8017756:	230a      	movs	r3, #10
 8017758:	6063      	str	r3, [r4, #4]
 801775a:	6863      	ldr	r3, [r4, #4]
 801775c:	4947      	ldr	r1, [pc, #284]	; (801787c <_scanf_i+0x1ec>)
 801775e:	6960      	ldr	r0, [r4, #20]
 8017760:	1ac9      	subs	r1, r1, r3
 8017762:	f000 f88d 	bl	8017880 <__sccl>
 8017766:	f04f 0b00 	mov.w	fp, #0
 801776a:	68a3      	ldr	r3, [r4, #8]
 801776c:	6822      	ldr	r2, [r4, #0]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d03d      	beq.n	80177ee <_scanf_i+0x15e>
 8017772:	6831      	ldr	r1, [r6, #0]
 8017774:	6960      	ldr	r0, [r4, #20]
 8017776:	f891 c000 	ldrb.w	ip, [r1]
 801777a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801777e:	2800      	cmp	r0, #0
 8017780:	d035      	beq.n	80177ee <_scanf_i+0x15e>
 8017782:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017786:	d124      	bne.n	80177d2 <_scanf_i+0x142>
 8017788:	0510      	lsls	r0, r2, #20
 801778a:	d522      	bpl.n	80177d2 <_scanf_i+0x142>
 801778c:	f10b 0b01 	add.w	fp, fp, #1
 8017790:	f1b9 0f00 	cmp.w	r9, #0
 8017794:	d003      	beq.n	801779e <_scanf_i+0x10e>
 8017796:	3301      	adds	r3, #1
 8017798:	f109 39ff 	add.w	r9, r9, #4294967295
 801779c:	60a3      	str	r3, [r4, #8]
 801779e:	6873      	ldr	r3, [r6, #4]
 80177a0:	3b01      	subs	r3, #1
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	6073      	str	r3, [r6, #4]
 80177a6:	dd1b      	ble.n	80177e0 <_scanf_i+0x150>
 80177a8:	6833      	ldr	r3, [r6, #0]
 80177aa:	3301      	adds	r3, #1
 80177ac:	6033      	str	r3, [r6, #0]
 80177ae:	68a3      	ldr	r3, [r4, #8]
 80177b0:	3b01      	subs	r3, #1
 80177b2:	60a3      	str	r3, [r4, #8]
 80177b4:	e7d9      	b.n	801776a <_scanf_i+0xda>
 80177b6:	f1bb 0f02 	cmp.w	fp, #2
 80177ba:	d1ae      	bne.n	801771a <_scanf_i+0x8a>
 80177bc:	6822      	ldr	r2, [r4, #0]
 80177be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80177c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80177c6:	d1bf      	bne.n	8017748 <_scanf_i+0xb8>
 80177c8:	2310      	movs	r3, #16
 80177ca:	6063      	str	r3, [r4, #4]
 80177cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80177d0:	e7a2      	b.n	8017718 <_scanf_i+0x88>
 80177d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80177d6:	6022      	str	r2, [r4, #0]
 80177d8:	780b      	ldrb	r3, [r1, #0]
 80177da:	f805 3b01 	strb.w	r3, [r5], #1
 80177de:	e7de      	b.n	801779e <_scanf_i+0x10e>
 80177e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80177e4:	4631      	mov	r1, r6
 80177e6:	4650      	mov	r0, sl
 80177e8:	4798      	blx	r3
 80177ea:	2800      	cmp	r0, #0
 80177ec:	d0df      	beq.n	80177ae <_scanf_i+0x11e>
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	05db      	lsls	r3, r3, #23
 80177f2:	d50d      	bpl.n	8017810 <_scanf_i+0x180>
 80177f4:	42bd      	cmp	r5, r7
 80177f6:	d909      	bls.n	801780c <_scanf_i+0x17c>
 80177f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80177fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017800:	4632      	mov	r2, r6
 8017802:	4650      	mov	r0, sl
 8017804:	4798      	blx	r3
 8017806:	f105 39ff 	add.w	r9, r5, #4294967295
 801780a:	464d      	mov	r5, r9
 801780c:	42bd      	cmp	r5, r7
 801780e:	d02d      	beq.n	801786c <_scanf_i+0x1dc>
 8017810:	6822      	ldr	r2, [r4, #0]
 8017812:	f012 0210 	ands.w	r2, r2, #16
 8017816:	d113      	bne.n	8017840 <_scanf_i+0x1b0>
 8017818:	702a      	strb	r2, [r5, #0]
 801781a:	6863      	ldr	r3, [r4, #4]
 801781c:	9e01      	ldr	r6, [sp, #4]
 801781e:	4639      	mov	r1, r7
 8017820:	4650      	mov	r0, sl
 8017822:	47b0      	blx	r6
 8017824:	6821      	ldr	r1, [r4, #0]
 8017826:	f8d8 3000 	ldr.w	r3, [r8]
 801782a:	f011 0f20 	tst.w	r1, #32
 801782e:	d013      	beq.n	8017858 <_scanf_i+0x1c8>
 8017830:	1d1a      	adds	r2, r3, #4
 8017832:	f8c8 2000 	str.w	r2, [r8]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	6018      	str	r0, [r3, #0]
 801783a:	68e3      	ldr	r3, [r4, #12]
 801783c:	3301      	adds	r3, #1
 801783e:	60e3      	str	r3, [r4, #12]
 8017840:	1bed      	subs	r5, r5, r7
 8017842:	44ab      	add	fp, r5
 8017844:	6925      	ldr	r5, [r4, #16]
 8017846:	445d      	add	r5, fp
 8017848:	6125      	str	r5, [r4, #16]
 801784a:	2000      	movs	r0, #0
 801784c:	b007      	add	sp, #28
 801784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017852:	f04f 0b00 	mov.w	fp, #0
 8017856:	e7ca      	b.n	80177ee <_scanf_i+0x15e>
 8017858:	1d1a      	adds	r2, r3, #4
 801785a:	f8c8 2000 	str.w	r2, [r8]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	f011 0f01 	tst.w	r1, #1
 8017864:	bf14      	ite	ne
 8017866:	8018      	strhne	r0, [r3, #0]
 8017868:	6018      	streq	r0, [r3, #0]
 801786a:	e7e6      	b.n	801783a <_scanf_i+0x1aa>
 801786c:	2001      	movs	r0, #1
 801786e:	e7ed      	b.n	801784c <_scanf_i+0x1bc>
 8017870:	08017f5c 	.word	0x08017f5c
 8017874:	08017add 	.word	0x08017add
 8017878:	080179f5 	.word	0x080179f5
 801787c:	08018078 	.word	0x08018078

08017880 <__sccl>:
 8017880:	b570      	push	{r4, r5, r6, lr}
 8017882:	780b      	ldrb	r3, [r1, #0]
 8017884:	4604      	mov	r4, r0
 8017886:	2b5e      	cmp	r3, #94	; 0x5e
 8017888:	bf0b      	itete	eq
 801788a:	784b      	ldrbeq	r3, [r1, #1]
 801788c:	1c48      	addne	r0, r1, #1
 801788e:	1c88      	addeq	r0, r1, #2
 8017890:	2200      	movne	r2, #0
 8017892:	bf08      	it	eq
 8017894:	2201      	moveq	r2, #1
 8017896:	1e61      	subs	r1, r4, #1
 8017898:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801789c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80178a0:	42a9      	cmp	r1, r5
 80178a2:	d1fb      	bne.n	801789c <__sccl+0x1c>
 80178a4:	b90b      	cbnz	r3, 80178aa <__sccl+0x2a>
 80178a6:	3801      	subs	r0, #1
 80178a8:	bd70      	pop	{r4, r5, r6, pc}
 80178aa:	f082 0201 	eor.w	r2, r2, #1
 80178ae:	54e2      	strb	r2, [r4, r3]
 80178b0:	4605      	mov	r5, r0
 80178b2:	4628      	mov	r0, r5
 80178b4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80178b8:	292d      	cmp	r1, #45	; 0x2d
 80178ba:	d006      	beq.n	80178ca <__sccl+0x4a>
 80178bc:	295d      	cmp	r1, #93	; 0x5d
 80178be:	d0f3      	beq.n	80178a8 <__sccl+0x28>
 80178c0:	b909      	cbnz	r1, 80178c6 <__sccl+0x46>
 80178c2:	4628      	mov	r0, r5
 80178c4:	e7f0      	b.n	80178a8 <__sccl+0x28>
 80178c6:	460b      	mov	r3, r1
 80178c8:	e7f1      	b.n	80178ae <__sccl+0x2e>
 80178ca:	786e      	ldrb	r6, [r5, #1]
 80178cc:	2e5d      	cmp	r6, #93	; 0x5d
 80178ce:	d0fa      	beq.n	80178c6 <__sccl+0x46>
 80178d0:	42b3      	cmp	r3, r6
 80178d2:	dcf8      	bgt.n	80178c6 <__sccl+0x46>
 80178d4:	3502      	adds	r5, #2
 80178d6:	4619      	mov	r1, r3
 80178d8:	3101      	adds	r1, #1
 80178da:	428e      	cmp	r6, r1
 80178dc:	5462      	strb	r2, [r4, r1]
 80178de:	dcfb      	bgt.n	80178d8 <__sccl+0x58>
 80178e0:	1af1      	subs	r1, r6, r3
 80178e2:	3901      	subs	r1, #1
 80178e4:	1c58      	adds	r0, r3, #1
 80178e6:	42b3      	cmp	r3, r6
 80178e8:	bfa8      	it	ge
 80178ea:	2100      	movge	r1, #0
 80178ec:	1843      	adds	r3, r0, r1
 80178ee:	e7e0      	b.n	80178b2 <__sccl+0x32>

080178f0 <_strtol_l.constprop.0>:
 80178f0:	2b01      	cmp	r3, #1
 80178f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178f6:	d001      	beq.n	80178fc <_strtol_l.constprop.0+0xc>
 80178f8:	2b24      	cmp	r3, #36	; 0x24
 80178fa:	d906      	bls.n	801790a <_strtol_l.constprop.0+0x1a>
 80178fc:	f7ff f91e 	bl	8016b3c <__errno>
 8017900:	2316      	movs	r3, #22
 8017902:	6003      	str	r3, [r0, #0]
 8017904:	2000      	movs	r0, #0
 8017906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801790a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80179f0 <_strtol_l.constprop.0+0x100>
 801790e:	460d      	mov	r5, r1
 8017910:	462e      	mov	r6, r5
 8017912:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017916:	f814 700c 	ldrb.w	r7, [r4, ip]
 801791a:	f017 0708 	ands.w	r7, r7, #8
 801791e:	d1f7      	bne.n	8017910 <_strtol_l.constprop.0+0x20>
 8017920:	2c2d      	cmp	r4, #45	; 0x2d
 8017922:	d132      	bne.n	801798a <_strtol_l.constprop.0+0x9a>
 8017924:	782c      	ldrb	r4, [r5, #0]
 8017926:	2701      	movs	r7, #1
 8017928:	1cb5      	adds	r5, r6, #2
 801792a:	2b00      	cmp	r3, #0
 801792c:	d05b      	beq.n	80179e6 <_strtol_l.constprop.0+0xf6>
 801792e:	2b10      	cmp	r3, #16
 8017930:	d109      	bne.n	8017946 <_strtol_l.constprop.0+0x56>
 8017932:	2c30      	cmp	r4, #48	; 0x30
 8017934:	d107      	bne.n	8017946 <_strtol_l.constprop.0+0x56>
 8017936:	782c      	ldrb	r4, [r5, #0]
 8017938:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801793c:	2c58      	cmp	r4, #88	; 0x58
 801793e:	d14d      	bne.n	80179dc <_strtol_l.constprop.0+0xec>
 8017940:	786c      	ldrb	r4, [r5, #1]
 8017942:	2310      	movs	r3, #16
 8017944:	3502      	adds	r5, #2
 8017946:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801794a:	f108 38ff 	add.w	r8, r8, #4294967295
 801794e:	f04f 0c00 	mov.w	ip, #0
 8017952:	fbb8 f9f3 	udiv	r9, r8, r3
 8017956:	4666      	mov	r6, ip
 8017958:	fb03 8a19 	mls	sl, r3, r9, r8
 801795c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017960:	f1be 0f09 	cmp.w	lr, #9
 8017964:	d816      	bhi.n	8017994 <_strtol_l.constprop.0+0xa4>
 8017966:	4674      	mov	r4, lr
 8017968:	42a3      	cmp	r3, r4
 801796a:	dd24      	ble.n	80179b6 <_strtol_l.constprop.0+0xc6>
 801796c:	f1bc 0f00 	cmp.w	ip, #0
 8017970:	db1e      	blt.n	80179b0 <_strtol_l.constprop.0+0xc0>
 8017972:	45b1      	cmp	r9, r6
 8017974:	d31c      	bcc.n	80179b0 <_strtol_l.constprop.0+0xc0>
 8017976:	d101      	bne.n	801797c <_strtol_l.constprop.0+0x8c>
 8017978:	45a2      	cmp	sl, r4
 801797a:	db19      	blt.n	80179b0 <_strtol_l.constprop.0+0xc0>
 801797c:	fb06 4603 	mla	r6, r6, r3, r4
 8017980:	f04f 0c01 	mov.w	ip, #1
 8017984:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017988:	e7e8      	b.n	801795c <_strtol_l.constprop.0+0x6c>
 801798a:	2c2b      	cmp	r4, #43	; 0x2b
 801798c:	bf04      	itt	eq
 801798e:	782c      	ldrbeq	r4, [r5, #0]
 8017990:	1cb5      	addeq	r5, r6, #2
 8017992:	e7ca      	b.n	801792a <_strtol_l.constprop.0+0x3a>
 8017994:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017998:	f1be 0f19 	cmp.w	lr, #25
 801799c:	d801      	bhi.n	80179a2 <_strtol_l.constprop.0+0xb2>
 801799e:	3c37      	subs	r4, #55	; 0x37
 80179a0:	e7e2      	b.n	8017968 <_strtol_l.constprop.0+0x78>
 80179a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80179a6:	f1be 0f19 	cmp.w	lr, #25
 80179aa:	d804      	bhi.n	80179b6 <_strtol_l.constprop.0+0xc6>
 80179ac:	3c57      	subs	r4, #87	; 0x57
 80179ae:	e7db      	b.n	8017968 <_strtol_l.constprop.0+0x78>
 80179b0:	f04f 3cff 	mov.w	ip, #4294967295
 80179b4:	e7e6      	b.n	8017984 <_strtol_l.constprop.0+0x94>
 80179b6:	f1bc 0f00 	cmp.w	ip, #0
 80179ba:	da05      	bge.n	80179c8 <_strtol_l.constprop.0+0xd8>
 80179bc:	2322      	movs	r3, #34	; 0x22
 80179be:	6003      	str	r3, [r0, #0]
 80179c0:	4646      	mov	r6, r8
 80179c2:	b942      	cbnz	r2, 80179d6 <_strtol_l.constprop.0+0xe6>
 80179c4:	4630      	mov	r0, r6
 80179c6:	e79e      	b.n	8017906 <_strtol_l.constprop.0+0x16>
 80179c8:	b107      	cbz	r7, 80179cc <_strtol_l.constprop.0+0xdc>
 80179ca:	4276      	negs	r6, r6
 80179cc:	2a00      	cmp	r2, #0
 80179ce:	d0f9      	beq.n	80179c4 <_strtol_l.constprop.0+0xd4>
 80179d0:	f1bc 0f00 	cmp.w	ip, #0
 80179d4:	d000      	beq.n	80179d8 <_strtol_l.constprop.0+0xe8>
 80179d6:	1e69      	subs	r1, r5, #1
 80179d8:	6011      	str	r1, [r2, #0]
 80179da:	e7f3      	b.n	80179c4 <_strtol_l.constprop.0+0xd4>
 80179dc:	2430      	movs	r4, #48	; 0x30
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d1b1      	bne.n	8017946 <_strtol_l.constprop.0+0x56>
 80179e2:	2308      	movs	r3, #8
 80179e4:	e7af      	b.n	8017946 <_strtol_l.constprop.0+0x56>
 80179e6:	2c30      	cmp	r4, #48	; 0x30
 80179e8:	d0a5      	beq.n	8017936 <_strtol_l.constprop.0+0x46>
 80179ea:	230a      	movs	r3, #10
 80179ec:	e7ab      	b.n	8017946 <_strtol_l.constprop.0+0x56>
 80179ee:	bf00      	nop
 80179f0:	0801807b 	.word	0x0801807b

080179f4 <_strtol_r>:
 80179f4:	f7ff bf7c 	b.w	80178f0 <_strtol_l.constprop.0>

080179f8 <_strtoul_l.constprop.0>:
 80179f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179fc:	4f36      	ldr	r7, [pc, #216]	; (8017ad8 <_strtoul_l.constprop.0+0xe0>)
 80179fe:	4686      	mov	lr, r0
 8017a00:	460d      	mov	r5, r1
 8017a02:	4628      	mov	r0, r5
 8017a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a08:	5de6      	ldrb	r6, [r4, r7]
 8017a0a:	f016 0608 	ands.w	r6, r6, #8
 8017a0e:	d1f8      	bne.n	8017a02 <_strtoul_l.constprop.0+0xa>
 8017a10:	2c2d      	cmp	r4, #45	; 0x2d
 8017a12:	d12f      	bne.n	8017a74 <_strtoul_l.constprop.0+0x7c>
 8017a14:	782c      	ldrb	r4, [r5, #0]
 8017a16:	2601      	movs	r6, #1
 8017a18:	1c85      	adds	r5, r0, #2
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d057      	beq.n	8017ace <_strtoul_l.constprop.0+0xd6>
 8017a1e:	2b10      	cmp	r3, #16
 8017a20:	d109      	bne.n	8017a36 <_strtoul_l.constprop.0+0x3e>
 8017a22:	2c30      	cmp	r4, #48	; 0x30
 8017a24:	d107      	bne.n	8017a36 <_strtoul_l.constprop.0+0x3e>
 8017a26:	7828      	ldrb	r0, [r5, #0]
 8017a28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017a2c:	2858      	cmp	r0, #88	; 0x58
 8017a2e:	d149      	bne.n	8017ac4 <_strtoul_l.constprop.0+0xcc>
 8017a30:	786c      	ldrb	r4, [r5, #1]
 8017a32:	2310      	movs	r3, #16
 8017a34:	3502      	adds	r5, #2
 8017a36:	f04f 38ff 	mov.w	r8, #4294967295
 8017a3a:	2700      	movs	r7, #0
 8017a3c:	fbb8 f8f3 	udiv	r8, r8, r3
 8017a40:	fb03 f908 	mul.w	r9, r3, r8
 8017a44:	ea6f 0909 	mvn.w	r9, r9
 8017a48:	4638      	mov	r0, r7
 8017a4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017a4e:	f1bc 0f09 	cmp.w	ip, #9
 8017a52:	d814      	bhi.n	8017a7e <_strtoul_l.constprop.0+0x86>
 8017a54:	4664      	mov	r4, ip
 8017a56:	42a3      	cmp	r3, r4
 8017a58:	dd22      	ble.n	8017aa0 <_strtoul_l.constprop.0+0xa8>
 8017a5a:	2f00      	cmp	r7, #0
 8017a5c:	db1d      	blt.n	8017a9a <_strtoul_l.constprop.0+0xa2>
 8017a5e:	4580      	cmp	r8, r0
 8017a60:	d31b      	bcc.n	8017a9a <_strtoul_l.constprop.0+0xa2>
 8017a62:	d101      	bne.n	8017a68 <_strtoul_l.constprop.0+0x70>
 8017a64:	45a1      	cmp	r9, r4
 8017a66:	db18      	blt.n	8017a9a <_strtoul_l.constprop.0+0xa2>
 8017a68:	fb00 4003 	mla	r0, r0, r3, r4
 8017a6c:	2701      	movs	r7, #1
 8017a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a72:	e7ea      	b.n	8017a4a <_strtoul_l.constprop.0+0x52>
 8017a74:	2c2b      	cmp	r4, #43	; 0x2b
 8017a76:	bf04      	itt	eq
 8017a78:	782c      	ldrbeq	r4, [r5, #0]
 8017a7a:	1c85      	addeq	r5, r0, #2
 8017a7c:	e7cd      	b.n	8017a1a <_strtoul_l.constprop.0+0x22>
 8017a7e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017a82:	f1bc 0f19 	cmp.w	ip, #25
 8017a86:	d801      	bhi.n	8017a8c <_strtoul_l.constprop.0+0x94>
 8017a88:	3c37      	subs	r4, #55	; 0x37
 8017a8a:	e7e4      	b.n	8017a56 <_strtoul_l.constprop.0+0x5e>
 8017a8c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017a90:	f1bc 0f19 	cmp.w	ip, #25
 8017a94:	d804      	bhi.n	8017aa0 <_strtoul_l.constprop.0+0xa8>
 8017a96:	3c57      	subs	r4, #87	; 0x57
 8017a98:	e7dd      	b.n	8017a56 <_strtoul_l.constprop.0+0x5e>
 8017a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8017a9e:	e7e6      	b.n	8017a6e <_strtoul_l.constprop.0+0x76>
 8017aa0:	2f00      	cmp	r7, #0
 8017aa2:	da07      	bge.n	8017ab4 <_strtoul_l.constprop.0+0xbc>
 8017aa4:	2322      	movs	r3, #34	; 0x22
 8017aa6:	f8ce 3000 	str.w	r3, [lr]
 8017aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8017aae:	b932      	cbnz	r2, 8017abe <_strtoul_l.constprop.0+0xc6>
 8017ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ab4:	b106      	cbz	r6, 8017ab8 <_strtoul_l.constprop.0+0xc0>
 8017ab6:	4240      	negs	r0, r0
 8017ab8:	2a00      	cmp	r2, #0
 8017aba:	d0f9      	beq.n	8017ab0 <_strtoul_l.constprop.0+0xb8>
 8017abc:	b107      	cbz	r7, 8017ac0 <_strtoul_l.constprop.0+0xc8>
 8017abe:	1e69      	subs	r1, r5, #1
 8017ac0:	6011      	str	r1, [r2, #0]
 8017ac2:	e7f5      	b.n	8017ab0 <_strtoul_l.constprop.0+0xb8>
 8017ac4:	2430      	movs	r4, #48	; 0x30
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d1b5      	bne.n	8017a36 <_strtoul_l.constprop.0+0x3e>
 8017aca:	2308      	movs	r3, #8
 8017acc:	e7b3      	b.n	8017a36 <_strtoul_l.constprop.0+0x3e>
 8017ace:	2c30      	cmp	r4, #48	; 0x30
 8017ad0:	d0a9      	beq.n	8017a26 <_strtoul_l.constprop.0+0x2e>
 8017ad2:	230a      	movs	r3, #10
 8017ad4:	e7af      	b.n	8017a36 <_strtoul_l.constprop.0+0x3e>
 8017ad6:	bf00      	nop
 8017ad8:	0801807b 	.word	0x0801807b

08017adc <_strtoul_r>:
 8017adc:	f7ff bf8c 	b.w	80179f8 <_strtoul_l.constprop.0>

08017ae0 <__submore>:
 8017ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae4:	460c      	mov	r4, r1
 8017ae6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017aec:	4299      	cmp	r1, r3
 8017aee:	d11d      	bne.n	8017b2c <__submore+0x4c>
 8017af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017af4:	f000 f8b6 	bl	8017c64 <_malloc_r>
 8017af8:	b918      	cbnz	r0, 8017b02 <__submore+0x22>
 8017afa:	f04f 30ff 	mov.w	r0, #4294967295
 8017afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b06:	63a3      	str	r3, [r4, #56]	; 0x38
 8017b08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8017b0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017b12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017b16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017b1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017b1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017b22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017b26:	6020      	str	r0, [r4, #0]
 8017b28:	2000      	movs	r0, #0
 8017b2a:	e7e8      	b.n	8017afe <__submore+0x1e>
 8017b2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017b2e:	0077      	lsls	r7, r6, #1
 8017b30:	463a      	mov	r2, r7
 8017b32:	f000 f90b 	bl	8017d4c <_realloc_r>
 8017b36:	4605      	mov	r5, r0
 8017b38:	2800      	cmp	r0, #0
 8017b3a:	d0de      	beq.n	8017afa <__submore+0x1a>
 8017b3c:	eb00 0806 	add.w	r8, r0, r6
 8017b40:	4601      	mov	r1, r0
 8017b42:	4632      	mov	r2, r6
 8017b44:	4640      	mov	r0, r8
 8017b46:	f7ff f823 	bl	8016b90 <memcpy>
 8017b4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017b4e:	f8c4 8000 	str.w	r8, [r4]
 8017b52:	e7e9      	b.n	8017b28 <__submore+0x48>

08017b54 <__retarget_lock_acquire_recursive>:
 8017b54:	4770      	bx	lr

08017b56 <__retarget_lock_release_recursive>:
 8017b56:	4770      	bx	lr

08017b58 <memmove>:
 8017b58:	4288      	cmp	r0, r1
 8017b5a:	b510      	push	{r4, lr}
 8017b5c:	eb01 0402 	add.w	r4, r1, r2
 8017b60:	d902      	bls.n	8017b68 <memmove+0x10>
 8017b62:	4284      	cmp	r4, r0
 8017b64:	4623      	mov	r3, r4
 8017b66:	d807      	bhi.n	8017b78 <memmove+0x20>
 8017b68:	1e43      	subs	r3, r0, #1
 8017b6a:	42a1      	cmp	r1, r4
 8017b6c:	d008      	beq.n	8017b80 <memmove+0x28>
 8017b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b76:	e7f8      	b.n	8017b6a <memmove+0x12>
 8017b78:	4402      	add	r2, r0
 8017b7a:	4601      	mov	r1, r0
 8017b7c:	428a      	cmp	r2, r1
 8017b7e:	d100      	bne.n	8017b82 <memmove+0x2a>
 8017b80:	bd10      	pop	{r4, pc}
 8017b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b8a:	e7f7      	b.n	8017b7c <memmove+0x24>

08017b8c <_free_r>:
 8017b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b8e:	2900      	cmp	r1, #0
 8017b90:	d044      	beq.n	8017c1c <_free_r+0x90>
 8017b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b96:	9001      	str	r0, [sp, #4]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8017b9e:	bfb8      	it	lt
 8017ba0:	18e4      	addlt	r4, r4, r3
 8017ba2:	f000 f913 	bl	8017dcc <__malloc_lock>
 8017ba6:	4a1e      	ldr	r2, [pc, #120]	; (8017c20 <_free_r+0x94>)
 8017ba8:	9801      	ldr	r0, [sp, #4]
 8017baa:	6813      	ldr	r3, [r2, #0]
 8017bac:	b933      	cbnz	r3, 8017bbc <_free_r+0x30>
 8017bae:	6063      	str	r3, [r4, #4]
 8017bb0:	6014      	str	r4, [r2, #0]
 8017bb2:	b003      	add	sp, #12
 8017bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bb8:	f000 b90e 	b.w	8017dd8 <__malloc_unlock>
 8017bbc:	42a3      	cmp	r3, r4
 8017bbe:	d908      	bls.n	8017bd2 <_free_r+0x46>
 8017bc0:	6825      	ldr	r5, [r4, #0]
 8017bc2:	1961      	adds	r1, r4, r5
 8017bc4:	428b      	cmp	r3, r1
 8017bc6:	bf01      	itttt	eq
 8017bc8:	6819      	ldreq	r1, [r3, #0]
 8017bca:	685b      	ldreq	r3, [r3, #4]
 8017bcc:	1949      	addeq	r1, r1, r5
 8017bce:	6021      	streq	r1, [r4, #0]
 8017bd0:	e7ed      	b.n	8017bae <_free_r+0x22>
 8017bd2:	461a      	mov	r2, r3
 8017bd4:	685b      	ldr	r3, [r3, #4]
 8017bd6:	b10b      	cbz	r3, 8017bdc <_free_r+0x50>
 8017bd8:	42a3      	cmp	r3, r4
 8017bda:	d9fa      	bls.n	8017bd2 <_free_r+0x46>
 8017bdc:	6811      	ldr	r1, [r2, #0]
 8017bde:	1855      	adds	r5, r2, r1
 8017be0:	42a5      	cmp	r5, r4
 8017be2:	d10b      	bne.n	8017bfc <_free_r+0x70>
 8017be4:	6824      	ldr	r4, [r4, #0]
 8017be6:	4421      	add	r1, r4
 8017be8:	1854      	adds	r4, r2, r1
 8017bea:	42a3      	cmp	r3, r4
 8017bec:	6011      	str	r1, [r2, #0]
 8017bee:	d1e0      	bne.n	8017bb2 <_free_r+0x26>
 8017bf0:	681c      	ldr	r4, [r3, #0]
 8017bf2:	685b      	ldr	r3, [r3, #4]
 8017bf4:	6053      	str	r3, [r2, #4]
 8017bf6:	4421      	add	r1, r4
 8017bf8:	6011      	str	r1, [r2, #0]
 8017bfa:	e7da      	b.n	8017bb2 <_free_r+0x26>
 8017bfc:	d902      	bls.n	8017c04 <_free_r+0x78>
 8017bfe:	230c      	movs	r3, #12
 8017c00:	6003      	str	r3, [r0, #0]
 8017c02:	e7d6      	b.n	8017bb2 <_free_r+0x26>
 8017c04:	6825      	ldr	r5, [r4, #0]
 8017c06:	1961      	adds	r1, r4, r5
 8017c08:	428b      	cmp	r3, r1
 8017c0a:	bf04      	itt	eq
 8017c0c:	6819      	ldreq	r1, [r3, #0]
 8017c0e:	685b      	ldreq	r3, [r3, #4]
 8017c10:	6063      	str	r3, [r4, #4]
 8017c12:	bf04      	itt	eq
 8017c14:	1949      	addeq	r1, r1, r5
 8017c16:	6021      	streq	r1, [r4, #0]
 8017c18:	6054      	str	r4, [r2, #4]
 8017c1a:	e7ca      	b.n	8017bb2 <_free_r+0x26>
 8017c1c:	b003      	add	sp, #12
 8017c1e:	bd30      	pop	{r4, r5, pc}
 8017c20:	240030c8 	.word	0x240030c8

08017c24 <sbrk_aligned>:
 8017c24:	b570      	push	{r4, r5, r6, lr}
 8017c26:	4e0e      	ldr	r6, [pc, #56]	; (8017c60 <sbrk_aligned+0x3c>)
 8017c28:	460c      	mov	r4, r1
 8017c2a:	6831      	ldr	r1, [r6, #0]
 8017c2c:	4605      	mov	r5, r0
 8017c2e:	b911      	cbnz	r1, 8017c36 <sbrk_aligned+0x12>
 8017c30:	f000 f8bc 	bl	8017dac <_sbrk_r>
 8017c34:	6030      	str	r0, [r6, #0]
 8017c36:	4621      	mov	r1, r4
 8017c38:	4628      	mov	r0, r5
 8017c3a:	f000 f8b7 	bl	8017dac <_sbrk_r>
 8017c3e:	1c43      	adds	r3, r0, #1
 8017c40:	d00a      	beq.n	8017c58 <sbrk_aligned+0x34>
 8017c42:	1cc4      	adds	r4, r0, #3
 8017c44:	f024 0403 	bic.w	r4, r4, #3
 8017c48:	42a0      	cmp	r0, r4
 8017c4a:	d007      	beq.n	8017c5c <sbrk_aligned+0x38>
 8017c4c:	1a21      	subs	r1, r4, r0
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f000 f8ac 	bl	8017dac <_sbrk_r>
 8017c54:	3001      	adds	r0, #1
 8017c56:	d101      	bne.n	8017c5c <sbrk_aligned+0x38>
 8017c58:	f04f 34ff 	mov.w	r4, #4294967295
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	bd70      	pop	{r4, r5, r6, pc}
 8017c60:	240030cc 	.word	0x240030cc

08017c64 <_malloc_r>:
 8017c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c68:	1ccd      	adds	r5, r1, #3
 8017c6a:	f025 0503 	bic.w	r5, r5, #3
 8017c6e:	3508      	adds	r5, #8
 8017c70:	2d0c      	cmp	r5, #12
 8017c72:	bf38      	it	cc
 8017c74:	250c      	movcc	r5, #12
 8017c76:	2d00      	cmp	r5, #0
 8017c78:	4607      	mov	r7, r0
 8017c7a:	db01      	blt.n	8017c80 <_malloc_r+0x1c>
 8017c7c:	42a9      	cmp	r1, r5
 8017c7e:	d905      	bls.n	8017c8c <_malloc_r+0x28>
 8017c80:	230c      	movs	r3, #12
 8017c82:	603b      	str	r3, [r7, #0]
 8017c84:	2600      	movs	r6, #0
 8017c86:	4630      	mov	r0, r6
 8017c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c8c:	4e2e      	ldr	r6, [pc, #184]	; (8017d48 <_malloc_r+0xe4>)
 8017c8e:	f000 f89d 	bl	8017dcc <__malloc_lock>
 8017c92:	6833      	ldr	r3, [r6, #0]
 8017c94:	461c      	mov	r4, r3
 8017c96:	bb34      	cbnz	r4, 8017ce6 <_malloc_r+0x82>
 8017c98:	4629      	mov	r1, r5
 8017c9a:	4638      	mov	r0, r7
 8017c9c:	f7ff ffc2 	bl	8017c24 <sbrk_aligned>
 8017ca0:	1c43      	adds	r3, r0, #1
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	d14d      	bne.n	8017d42 <_malloc_r+0xde>
 8017ca6:	6834      	ldr	r4, [r6, #0]
 8017ca8:	4626      	mov	r6, r4
 8017caa:	2e00      	cmp	r6, #0
 8017cac:	d140      	bne.n	8017d30 <_malloc_r+0xcc>
 8017cae:	6823      	ldr	r3, [r4, #0]
 8017cb0:	4631      	mov	r1, r6
 8017cb2:	4638      	mov	r0, r7
 8017cb4:	eb04 0803 	add.w	r8, r4, r3
 8017cb8:	f000 f878 	bl	8017dac <_sbrk_r>
 8017cbc:	4580      	cmp	r8, r0
 8017cbe:	d13a      	bne.n	8017d36 <_malloc_r+0xd2>
 8017cc0:	6821      	ldr	r1, [r4, #0]
 8017cc2:	3503      	adds	r5, #3
 8017cc4:	1a6d      	subs	r5, r5, r1
 8017cc6:	f025 0503 	bic.w	r5, r5, #3
 8017cca:	3508      	adds	r5, #8
 8017ccc:	2d0c      	cmp	r5, #12
 8017cce:	bf38      	it	cc
 8017cd0:	250c      	movcc	r5, #12
 8017cd2:	4629      	mov	r1, r5
 8017cd4:	4638      	mov	r0, r7
 8017cd6:	f7ff ffa5 	bl	8017c24 <sbrk_aligned>
 8017cda:	3001      	adds	r0, #1
 8017cdc:	d02b      	beq.n	8017d36 <_malloc_r+0xd2>
 8017cde:	6823      	ldr	r3, [r4, #0]
 8017ce0:	442b      	add	r3, r5
 8017ce2:	6023      	str	r3, [r4, #0]
 8017ce4:	e00e      	b.n	8017d04 <_malloc_r+0xa0>
 8017ce6:	6822      	ldr	r2, [r4, #0]
 8017ce8:	1b52      	subs	r2, r2, r5
 8017cea:	d41e      	bmi.n	8017d2a <_malloc_r+0xc6>
 8017cec:	2a0b      	cmp	r2, #11
 8017cee:	d916      	bls.n	8017d1e <_malloc_r+0xba>
 8017cf0:	1961      	adds	r1, r4, r5
 8017cf2:	42a3      	cmp	r3, r4
 8017cf4:	6025      	str	r5, [r4, #0]
 8017cf6:	bf18      	it	ne
 8017cf8:	6059      	strne	r1, [r3, #4]
 8017cfa:	6863      	ldr	r3, [r4, #4]
 8017cfc:	bf08      	it	eq
 8017cfe:	6031      	streq	r1, [r6, #0]
 8017d00:	5162      	str	r2, [r4, r5]
 8017d02:	604b      	str	r3, [r1, #4]
 8017d04:	4638      	mov	r0, r7
 8017d06:	f104 060b 	add.w	r6, r4, #11
 8017d0a:	f000 f865 	bl	8017dd8 <__malloc_unlock>
 8017d0e:	f026 0607 	bic.w	r6, r6, #7
 8017d12:	1d23      	adds	r3, r4, #4
 8017d14:	1af2      	subs	r2, r6, r3
 8017d16:	d0b6      	beq.n	8017c86 <_malloc_r+0x22>
 8017d18:	1b9b      	subs	r3, r3, r6
 8017d1a:	50a3      	str	r3, [r4, r2]
 8017d1c:	e7b3      	b.n	8017c86 <_malloc_r+0x22>
 8017d1e:	6862      	ldr	r2, [r4, #4]
 8017d20:	42a3      	cmp	r3, r4
 8017d22:	bf0c      	ite	eq
 8017d24:	6032      	streq	r2, [r6, #0]
 8017d26:	605a      	strne	r2, [r3, #4]
 8017d28:	e7ec      	b.n	8017d04 <_malloc_r+0xa0>
 8017d2a:	4623      	mov	r3, r4
 8017d2c:	6864      	ldr	r4, [r4, #4]
 8017d2e:	e7b2      	b.n	8017c96 <_malloc_r+0x32>
 8017d30:	4634      	mov	r4, r6
 8017d32:	6876      	ldr	r6, [r6, #4]
 8017d34:	e7b9      	b.n	8017caa <_malloc_r+0x46>
 8017d36:	230c      	movs	r3, #12
 8017d38:	603b      	str	r3, [r7, #0]
 8017d3a:	4638      	mov	r0, r7
 8017d3c:	f000 f84c 	bl	8017dd8 <__malloc_unlock>
 8017d40:	e7a1      	b.n	8017c86 <_malloc_r+0x22>
 8017d42:	6025      	str	r5, [r4, #0]
 8017d44:	e7de      	b.n	8017d04 <_malloc_r+0xa0>
 8017d46:	bf00      	nop
 8017d48:	240030c8 	.word	0x240030c8

08017d4c <_realloc_r>:
 8017d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d50:	4680      	mov	r8, r0
 8017d52:	4614      	mov	r4, r2
 8017d54:	460e      	mov	r6, r1
 8017d56:	b921      	cbnz	r1, 8017d62 <_realloc_r+0x16>
 8017d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d5c:	4611      	mov	r1, r2
 8017d5e:	f7ff bf81 	b.w	8017c64 <_malloc_r>
 8017d62:	b92a      	cbnz	r2, 8017d70 <_realloc_r+0x24>
 8017d64:	f7ff ff12 	bl	8017b8c <_free_r>
 8017d68:	4625      	mov	r5, r4
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d70:	f000 f838 	bl	8017de4 <_malloc_usable_size_r>
 8017d74:	4284      	cmp	r4, r0
 8017d76:	4607      	mov	r7, r0
 8017d78:	d802      	bhi.n	8017d80 <_realloc_r+0x34>
 8017d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d7e:	d812      	bhi.n	8017da6 <_realloc_r+0x5a>
 8017d80:	4621      	mov	r1, r4
 8017d82:	4640      	mov	r0, r8
 8017d84:	f7ff ff6e 	bl	8017c64 <_malloc_r>
 8017d88:	4605      	mov	r5, r0
 8017d8a:	2800      	cmp	r0, #0
 8017d8c:	d0ed      	beq.n	8017d6a <_realloc_r+0x1e>
 8017d8e:	42bc      	cmp	r4, r7
 8017d90:	4622      	mov	r2, r4
 8017d92:	4631      	mov	r1, r6
 8017d94:	bf28      	it	cs
 8017d96:	463a      	movcs	r2, r7
 8017d98:	f7fe fefa 	bl	8016b90 <memcpy>
 8017d9c:	4631      	mov	r1, r6
 8017d9e:	4640      	mov	r0, r8
 8017da0:	f7ff fef4 	bl	8017b8c <_free_r>
 8017da4:	e7e1      	b.n	8017d6a <_realloc_r+0x1e>
 8017da6:	4635      	mov	r5, r6
 8017da8:	e7df      	b.n	8017d6a <_realloc_r+0x1e>
	...

08017dac <_sbrk_r>:
 8017dac:	b538      	push	{r3, r4, r5, lr}
 8017dae:	4d06      	ldr	r5, [pc, #24]	; (8017dc8 <_sbrk_r+0x1c>)
 8017db0:	2300      	movs	r3, #0
 8017db2:	4604      	mov	r4, r0
 8017db4:	4608      	mov	r0, r1
 8017db6:	602b      	str	r3, [r5, #0]
 8017db8:	f7eb fb48 	bl	800344c <_sbrk>
 8017dbc:	1c43      	adds	r3, r0, #1
 8017dbe:	d102      	bne.n	8017dc6 <_sbrk_r+0x1a>
 8017dc0:	682b      	ldr	r3, [r5, #0]
 8017dc2:	b103      	cbz	r3, 8017dc6 <_sbrk_r+0x1a>
 8017dc4:	6023      	str	r3, [r4, #0]
 8017dc6:	bd38      	pop	{r3, r4, r5, pc}
 8017dc8:	240030c0 	.word	0x240030c0

08017dcc <__malloc_lock>:
 8017dcc:	4801      	ldr	r0, [pc, #4]	; (8017dd4 <__malloc_lock+0x8>)
 8017dce:	f7ff bec1 	b.w	8017b54 <__retarget_lock_acquire_recursive>
 8017dd2:	bf00      	nop
 8017dd4:	240030c4 	.word	0x240030c4

08017dd8 <__malloc_unlock>:
 8017dd8:	4801      	ldr	r0, [pc, #4]	; (8017de0 <__malloc_unlock+0x8>)
 8017dda:	f7ff bebc 	b.w	8017b56 <__retarget_lock_release_recursive>
 8017dde:	bf00      	nop
 8017de0:	240030c4 	.word	0x240030c4

08017de4 <_malloc_usable_size_r>:
 8017de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017de8:	1f18      	subs	r0, r3, #4
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	bfbc      	itt	lt
 8017dee:	580b      	ldrlt	r3, [r1, r0]
 8017df0:	18c0      	addlt	r0, r0, r3
 8017df2:	4770      	bx	lr

08017df4 <_init>:
 8017df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017df6:	bf00      	nop
 8017df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dfa:	bc08      	pop	{r3}
 8017dfc:	469e      	mov	lr, r3
 8017dfe:	4770      	bx	lr

08017e00 <_fini>:
 8017e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e02:	bf00      	nop
 8017e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e06:	bc08      	pop	{r3}
 8017e08:	469e      	mov	lr, r3
 8017e0a:	4770      	bx	lr
