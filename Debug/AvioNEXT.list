
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018364  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08018634  08018634  00028634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018a1c  08018a1c  00028a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018a24  08018a24  00028a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018a28  08018a28  00028a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  08018a2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003208  24000154  08018b80  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2400335c  08018b80  0003335c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   000360c8  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000063ec  00000000  00000000  0006628d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b90  00000000  00000000  0006c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021c9  00000000  00000000  0006f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e6f3  00000000  00000000  000713d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003bf4c  00000000  00000000  000afacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e424  00000000  00000000  000eba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c580  00000000  00000000  00269e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  002763bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801861c 	.word	0x0801861c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	0801861c 	.word	0x0801861c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fd16 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fb50 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fb4a 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fd04 	bl	8008124 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fd8 	.word	0x24000fd8

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fcec 	bl	8008124 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fb26 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fd1b 	bl	800f19c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fcd9 	bl	8008124 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fd8 	.word	0x24000fd8

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fcc2 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e fafc 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e faf6 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fcb0 	bl	8008124 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fd8 	.word	0x24000fd8

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018808 	.word	0x08018808
 8000c30:	24000b54 	.word	0x24000b54
 8000c34:	24000274 	.word	0x24000274
 8000c38:	2400053c 	.word	0x2400053c
 8000c3c:	24000804 	.word	0x24000804
 8000c40:	240009ac 	.word	0x240009ac
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e feb4 	bl	800fa24 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e feae 	bl	800fa24 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fea8 	bl	800fa24 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fea2 	bl	800fa24 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018808 	.word	0x08018808
 8000cec:	240009ac 	.word	0x240009ac
 8000cf0:	24000274 	.word	0x24000274
 8000cf4:	240011cc 	.word	0x240011cc
 8000cf8:	2400053c 	.word	0x2400053c
 8000cfc:	240010e8 	.word	0x240010e8
 8000d00:	24000804 	.word	0x24000804
 8000d04:	24001134 	.word	0x24001134

08000d08 <LoRA_Read_Register>:
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
	}
	return -1;
}

uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 fa03 	bl	8008124 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00e f83d 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e fa32 	bl	800f19c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f9f0 	bl	8008124 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001060 	.word	0x24001060

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f9d3 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00e f80d 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00e f807 	bl	800eda4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f9c1 	bl	8008124 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001060 	.word	0x24001060

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f8eb 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f8e5 	bl	8008124 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f9ed 	bl	8017350 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fd8d 	bl	8016aa8 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	08018640 	.word	0x08018640
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b0c4      	sub	sp, #272	; 0x110
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010c2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 80010c4:	f7ff febc 	bl	8000e40 <LoRA_idle>

	char debug[MAX_PAYLOAD_LENGHT];
	if(recv_packet(debug, MAX_PAYLOAD_LENGHT)) {
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	21fa      	movs	r1, #250	; 0xfa
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f8dc 	bl	800128c <recv_packet>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d022      	beq.n	8001120 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 80010da:	2064      	movs	r0, #100	; 0x64
 80010dc:	f002 fd70 	bl	8003bc0 <HAL_Delay>
		strcat(debug, " was thrown away");
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f91d 	bl	8000324 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4413      	add	r3, r2
 80010f4:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <LoRA_sendPacket+0x10c>)
 80010f6:	461d      	mov	r5, r3
 80010f8:	4614      	mov	r4, r2
 80010fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fc:	6028      	str	r0, [r5, #0]
 80010fe:	6069      	str	r1, [r5, #4]
 8001100:	60aa      	str	r2, [r5, #8]
 8001102:	60eb      	str	r3, [r5, #12]
 8001104:	7823      	ldrb	r3, [r4, #0]
 8001106:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f909 	bl	8000324 <strlen>
 8001112:	4602      	mov	r2, r0
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f015 fcc4 	bl	8016aa8 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001120:	2012      	movs	r0, #18
 8001122:	f7ff fdf1 	bl	8000d08 <LoRA_Read_Register>
 8001126:	4603      	mov	r3, r0
 8001128:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 800112c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <LoRA_sendPacket+0x90>
 8001138:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	2b00      	cmp	r3, #0
 8001142:	d033      	beq.n	80011ac <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8001144:	f7ff ff4e 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800114e:	e011      	b.n	8001174 <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8001150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001154:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001158:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fdf7 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 800116a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800116e:	3301      	adds	r3, #1
 8001170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001174:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001178:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f7ff f8d1 	bl	8000324 <strlen>
 8001182:	4602      	mov	r2, r0
 8001184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001188:	429a      	cmp	r2, r3
 800118a:	d8e1      	bhi.n	8001150 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800118c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001190:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f7ff f8c5 	bl	8000324 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	2022      	movs	r0, #34	; 0x22
 80011a2:	f7ff fdd9 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 80011a6:	f7ff ff2b 	bl	8001000 <LoRA_endPacket>
 80011aa:	e004      	b.n	80011b6 <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80011ac:	2185      	movs	r1, #133	; 0x85
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fdd2 	bl	8000d58 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	08018644 	.word	0x08018644

080011c4 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4827      	ldr	r0, [pc, #156]	; (8001270 <disarm+0xac>)
 80011d2:	f006 ffa7 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2104      	movs	r1, #4
 80011da:	4825      	ldr	r0, [pc, #148]	; (8001270 <disarm+0xac>)
 80011dc:	f006 ffa2 	bl	8008124 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2102      	movs	r1, #2
 80011e4:	4823      	ldr	r0, [pc, #140]	; (8001274 <disarm+0xb0>)
 80011e6:	f006 ff9d 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4821      	ldr	r0, [pc, #132]	; (8001278 <disarm+0xb4>)
 80011f2:	f006 ff97 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <disarm+0xb4>)
 80011fe:	f006 ff91 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <disarm+0xb4>)
 800120a:	f006 ff8b 	bl	8008124 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	481a      	ldr	r0, [pc, #104]	; (800127c <disarm+0xb8>)
 8001214:	f006 ff86 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <disarm+0xbc>)
 8001220:	f006 ff80 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <disarm+0xbc>)
 800122c:	f006 ff7a 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <disarm+0xbc>)
 8001238:	f006 ff74 	bl	8008124 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <disarm+0xc0>)
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <disarm+0xc0>)
 8001244:	2200      	movs	r2, #0
 8001246:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <disarm+0xc0>)
 800124a:	2200      	movs	r2, #0
 800124c:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 800124e:	f7ff fba3 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <disarm+0xc4>)
 8001256:	461a      	mov	r2, r3
 8001258:	460b      	mov	r3, r1
 800125a:	cb03      	ldmia	r3!, {r0, r1}
 800125c:	6010      	str	r0, [r2, #0]
 800125e:	6051      	str	r1, [r2, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	7213      	strb	r3, [r2, #8]
  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	58020000 	.word	0x58020000
 8001274:	58020400 	.word	0x58020400
 8001278:	58021400 	.word	0x58021400
 800127c:	58021800 	.word	0x58021800
 8001280:	58021000 	.word	0x58021000
 8001284:	24000b54 	.word	0x24000b54
 8001288:	08018658 	.word	0x08018658

0800128c <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8001296:	f7ff fecc 	bl	8001032 <LoRA_parsePacket>
 800129a:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dc01      	bgt.n	80012a8 <recv_packet+0x1c>
  {
    return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e01c      	b.n	80012e2 <recv_packet+0x56>
  }
  if(packet_length){
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d018      	beq.n	80012e0 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e00a      	b.n	80012ca <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	18d4      	adds	r4, r2, r3
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff fd24 	bl	8000d08 <LoRA_Read_Register>
 80012c0:	4603      	mov	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dbf0      	blt.n	80012b4 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	e000      	b.n	80012e2 <recv_packet+0x56>
  }
  else{
    return 0;
 80012e0:	2300      	movs	r3, #0
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}

080012ea <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80012ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	466b      	mov	r3, sp
 80012f6:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f813 	bl	8000324 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29b      	uxth	r3, r3
 8001302:	3301      	adds	r3, #1
 8001304:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 8001306:	8a79      	ldrh	r1, [r7, #18]
 8001308:	460b      	mov	r3, r1
 800130a:	3b01      	subs	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	b28b      	uxth	r3, r1
 8001310:	2200      	movs	r2, #0
 8001312:	4698      	mov	r8, r3
 8001314:	4691      	mov	r9, r2
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800132a:	b28b      	uxth	r3, r1
 800132c:	2200      	movs	r2, #0
 800132e:	461c      	mov	r4, r3
 8001330:	4615      	mov	r5, r2
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	00eb      	lsls	r3, r5, #3
 800133c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001340:	00e2      	lsls	r2, r4, #3
 8001342:	460b      	mov	r3, r1
 8001344:	3307      	adds	r3, #7
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	ebad 0d03 	sub.w	sp, sp, r3
 800134e:	466b      	mov	r3, sp
 8001350:	3300      	adds	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001354:	f002 fc28 	bl	8003ba8 <HAL_GetTick>
 8001358:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff feaa 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001360:	8a7b      	ldrh	r3, [r7, #18]
 8001362:	4619      	mov	r1, r3
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff ff91 	bl	800128c <recv_packet>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f7fe ffcc 	bl	8000310 <strcmp>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d011      	beq.n	80013a2 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fe98 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 8001384:	f002 fc10 	bl	8003ba8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001392:	d9e5      	bls.n	8001360 <reliable_send_packet+0x76>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			LoRA_sendPacket(LoRA_data);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fe8d 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800139a:	f002 fc05 	bl	8003ba8 <HAL_GetTick>
 800139e:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 80013a0:	e7de      	b.n	8001360 <reliable_send_packet+0x76>
				break;
 80013a2:	bf00      	nop
 80013a4:	46b5      	mov	sp, r6
		}
	}
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013b0 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <usbReceiveHandle+0x38>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00c      	beq.n	80013de <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4909      	ldr	r1, [pc, #36]	; (80013ec <usbReceiveHandle+0x3c>)
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f016 f84b 	bl	8017464 <memcpy>
		output[temp] = '\0';
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <usbReceiveHandle+0x38>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	}
	return temp;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24000270 	.word	0x24000270
 80013ec:	24000170 	.word	0x24000170

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80013f8:	4bdd      	ldr	r3, [pc, #884]	; (8001770 <main+0x380>)
 80013fa:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001408:	c403      	stmia	r4!, {r0, r1}
 800140a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f002 fb46 	bl	8003a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 fb7c 	bl	8001b0c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001414:	f000 fbf2 	bl	8001bfc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f001 f990 	bl	800273c <MX_GPIO_Init>
  MX_DMA_Init();
 800141c:	f001 f92e 	bl	800267c <MX_DMA_Init>
  MX_SPI3_Init();
 8001420:	f000 fe88 	bl	8002134 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001424:	f000 fd02 	bl	8001e2c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001428:	f001 f8dc 	bl	80025e4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800142c:	f000 fc18 	bl	8001c60 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001430:	f000 ff92 	bl	8002358 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001434:	f000 fc8c 	bl	8001d50 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001438:	f000 fe26 	bl	8002088 <MX_SPI2_Init>
  MX_I2C2_Init();
 800143c:	f000 fd5a 	bl	8001ef4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001440:	f000 fece 	bl	80021e0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001444:	f001 f804 	bl	8002450 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001448:	f000 ff22 	bl	8002290 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800144c:	f015 fa56 	bl	80168fc <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001450:	f000 fdc4 	bl	8001fdc <MX_SPI1_Init>
  MX_UART4_Init();
 8001454:	f001 f87a 	bl	800254c <MX_UART4_Init>
  MX_FATFS_Init();
 8001458:	f012 ffba 	bl	80143d0 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800145c:	f000 fda0 	bl	8001fa0 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001460:	f001 f850 	bl	8002504 <MX_TIM13_Init>
  MX_RNG_Init();
 8001464:	f000 fd86 	bl	8001f74 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001468:	2332      	movs	r3, #50	; 0x32
 800146a:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 800146e:	a3be      	add	r3, pc, #760	; (adr r3, 8001768 <main+0x378>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 8001478:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 8001488:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4bb8      	ldr	r3, [pc, #736]	; (8001774 <main+0x384>)
 8001492:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 8001496:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a2:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80014aa:	213c      	movs	r1, #60	; 0x3c
 80014ac:	2010      	movs	r0, #16
 80014ae:	f7ff f969 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80014b2:	2130      	movs	r1, #48	; 0x30
 80014b4:	2011      	movs	r0, #17
 80014b6:	f7ff f965 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80014ba:	2104      	movs	r1, #4
 80014bc:	2013      	movs	r0, #19
 80014be:	f7ff f961 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 80014c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014c6:	f002 fb7b 	bl	8003bc0 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80014ca:	21bf      	movs	r1, #191	; 0xbf
 80014cc:	201c      	movs	r0, #28
 80014ce:	f7ff f905 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 80014d2:	2002      	movs	r0, #2
 80014d4:	f002 fb74 	bl	8003bc0 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80014d8:	2158      	movs	r1, #88	; 0x58
 80014da:	201b      	movs	r0, #27
 80014dc:	f7ff f8fe 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80014e0:	21d8      	movs	r1, #216	; 0xd8
 80014e2:	201b      	movs	r0, #27
 80014e4:	f7ff f8fa 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 80014f0:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8001500:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 800150a:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001514:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 800151c:	e02e      	b.n	800157c <main+0x18c>
		calOmegaX += LG2_Get_Gyro_X();
 800151e:	f7ff f959 	bl	80007d4 <LG2_Get_Gyro_X>
 8001522:	eeb0 7a40 	vmov.f32	s14, s0
 8001526:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001532:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001536:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 800153a:	f7ff f97b 	bl	8000834 <LG2_Get_Gyro_Y>
 800153e:	eeb0 7a40 	vmov.f32	s14, s0
 8001542:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001552:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 8001556:	f7ff f99f 	bl	8000898 <LG2_Get_Gyro_Z>
 800155a:	eeb0 7a40 	vmov.f32	s14, s0
 800155e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800156e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8001572:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 800157c:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001580:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001584:	dbcb      	blt.n	800151e <main+0x12e>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001586:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001778 <main+0x388>
 8001592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001596:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800159a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 800159e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015a2:	ed93 7a00 	vldr	s14, [r3]
 80015a6:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001778 <main+0x388>
 80015aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ae:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015b2:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 80015b6:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8001778 <main+0x388>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015ca:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2101      	movs	r1, #1
 80015d2:	486a      	ldr	r0, [pc, #424]	; (800177c <main+0x38c>)
 80015d4:	f006 fda6 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015d8:	20c8      	movs	r0, #200	; 0xc8
 80015da:	f002 faf1 	bl	8003bc0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2101      	movs	r1, #1
 80015e2:	4866      	ldr	r0, [pc, #408]	; (800177c <main+0x38c>)
 80015e4:	f006 fd9e 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015e8:	20c8      	movs	r0, #200	; 0xc8
 80015ea:	f002 fae9 	bl	8003bc0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2101      	movs	r1, #1
 80015f2:	4862      	ldr	r0, [pc, #392]	; (800177c <main+0x38c>)
 80015f4:	f006 fd96 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015f8:	20c8      	movs	r0, #200	; 0xc8
 80015fa:	f002 fae1 	bl	8003bc0 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80015fe:	2201      	movs	r2, #1
 8001600:	2104      	movs	r1, #4
 8001602:	485f      	ldr	r0, [pc, #380]	; (8001780 <main+0x390>)
 8001604:	f006 fd8e 	bl	8008124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	2108      	movs	r1, #8
 800160c:	485c      	ldr	r0, [pc, #368]	; (8001780 <main+0x390>)
 800160e:	f006 fd89 	bl	8008124 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001612:	2100      	movs	r1, #0
 8001614:	485b      	ldr	r0, [pc, #364]	; (8001784 <main+0x394>)
 8001616:	f00e f8e9 	bl	800f7ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800161a:	2104      	movs	r1, #4
 800161c:	4859      	ldr	r0, [pc, #356]	; (8001784 <main+0x394>)
 800161e:	f00e f8e5 	bl	800f7ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001622:	2108      	movs	r1, #8
 8001624:	4857      	ldr	r0, [pc, #348]	; (8001784 <main+0x394>)
 8001626:	f00e f8e1 	bl	800f7ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800162a:	210c      	movs	r1, #12
 800162c:	4855      	ldr	r0, [pc, #340]	; (8001784 <main+0x394>)
 800162e:	f00e f8dd 	bl	800f7ec <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001632:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8001788 <main+0x398>
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff f966 	bl	8000908 <setServo>
    setServo(2, 180);
 800163c:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800178c <main+0x39c>
 8001640:	2002      	movs	r0, #2
 8001642:	f7ff f961 	bl	8000908 <setServo>
    setServo(3, 0);
 8001646:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001790 <main+0x3a0>
 800164a:	2003      	movs	r0, #3
 800164c:	f7ff f95c 	bl	8000908 <setServo>
    setServo(4, 45);
 8001650:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001794 <main+0x3a4>
 8001654:	2004      	movs	r0, #4
 8001656:	f7ff f957 	bl	8000908 <setServo>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 800166c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001670:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 800167e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001682:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	3304      	adds	r3, #4
 800168c:	22f6      	movs	r2, #246	; 0xf6
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f015 feab 	bl	80173ec <memset>
  char command[MAX_PAYLOAD_LENGHT];
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT] = "";
 8001696:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800169a:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	3304      	adds	r3, #4
 80016a4:	22f6      	movs	r2, #246	; 0xf6
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f015 fe9f 	bl	80173ec <memset>
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 80016b4:	2332      	movs	r3, #50	; 0x32
 80016b6:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 80016c0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80016c4:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 80016c8:	4b33      	ldr	r3, [pc, #204]	; (8001798 <main+0x3a8>)
 80016ca:	4634      	mov	r4, r6
 80016cc:	461d      	mov	r5, r3
 80016ce:	6828      	ldr	r0, [r5, #0]
 80016d0:	6869      	ldr	r1, [r5, #4]
 80016d2:	68aa      	ldr	r2, [r5, #8]
 80016d4:	68eb      	ldr	r3, [r5, #12]
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	7c2b      	ldrb	r3, [r5, #16]
 80016da:	7023      	strb	r3, [r4, #0]
 80016dc:	f106 0311 	add.w	r3, r6, #17
 80016e0:	2221      	movs	r2, #33	; 0x21
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f015 fe81 	bl	80173ec <memset>
  uint32_t previousTime = HAL_GetTick();
 80016ea:	f002 fa5d 	bl	8003ba8 <HAL_GetTick>
 80016ee:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 80016f2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fd64 	bl	80011c4 <disarm>
  LoRA_begin(868000000);
 80016fc:	4827      	ldr	r0, [pc, #156]	; (800179c <main+0x3ac>)
 80016fe:	f7ff fc1d 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 8001702:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001706:	4926      	ldr	r1, [pc, #152]	; (80017a0 <main+0x3b0>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe01 	bl	8000310 <strcmp>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 808b 	bne.w	800182c <main+0x43c>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001716:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800171a:	21fa      	movs	r1, #250	; 0xfa
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fdb5 	bl	800128c <recv_packet>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 81be 	beq.w	8001aa6 <main+0x6b6>
      {
    	have_recieved_anything = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 8001730:	f002 fa3a 	bl	8003ba8 <HAL_GetTick>
 8001734:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001738:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800173c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001740:	4918      	ldr	r1, [pc, #96]	; (80017a4 <main+0x3b4>)
 8001742:	4618      	mov	r0, r3
 8001744:	f015 fe24 	bl	8017390 <siscanf>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d12c      	bne.n	80017a8 <main+0x3b8>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 800174e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <main+0x3a8>)
 8001754:	461c      	mov	r4, r3
 8001756:	4615      	mov	r5, r2
 8001758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	7023      	strb	r3, [r4, #0]
 8001760:	e1a1      	b.n	8001aa6 <main+0x6b6>
 8001762:	bf00      	nop
 8001764:	f3af 8000 	nop.w
 8001768:	d2f1a9fc 	.word	0xd2f1a9fc
 800176c:	3f50624d 	.word	0x3f50624d
 8001770:	08018754 	.word	0x08018754
 8001774:	3ff00000 	.word	0x3ff00000
 8001778:	43fa0000 	.word	0x43fa0000
 800177c:	58020c00 	.word	0x58020c00
 8001780:	58021800 	.word	0x58021800
 8001784:	24001180 	.word	0x24001180
 8001788:	42b40000 	.word	0x42b40000
 800178c:	43340000 	.word	0x43340000
 8001790:	00000000 	.word	0x00000000
 8001794:	42340000 	.word	0x42340000
 8001798:	080186c0 	.word	0x080186c0
 800179c:	33bca100 	.word	0x33bca100
 80017a0:	080186a4 	.word	0x080186a4
 80017a4:	080186b8 	.word	0x080186b8
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 80017a8:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80017ac:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017b0:	49c8      	ldr	r1, [pc, #800]	; (8001ad4 <main+0x6e4>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f015 fdec 	bl	8017390 <siscanf>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10b      	bne.n	80017d6 <main+0x3e6>
        {
          strcpy(communication_state,"SENDING STREAM");
 80017be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017c2:	4ac5      	ldr	r2, [pc, #788]	; (8001ad8 <main+0x6e8>)
 80017c4:	461c      	mov	r4, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ca:	c407      	stmia	r4!, {r0, r1, r2}
 80017cc:	8023      	strh	r3, [r4, #0]
 80017ce:	3402      	adds	r4, #2
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	7023      	strb	r3, [r4, #0]
 80017d4:	e167      	b.n	8001aa6 <main+0x6b6>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 80017d6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80017da:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd95 	bl	8000310 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <main+0x408>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 80017ec:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fc5f 	bl	80010b4 <LoRA_sendPacket>
 80017f6:	e156      	b.n	8001aa6 <main+0x6b6>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 80017f8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80017fc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f015 fe26 	bl	8017454 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 8001808:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fc51 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          /*char debug[250];
          sprintf(debug, "new packet: %s\n", recieved_packet);*/
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001812:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd84 	bl	8000324 <strlen>
 800181c:	4602      	mov	r2, r0
 800181e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f015 f93f 	bl	8016aa8 <CDC_Transmit_HS>
 800182a:	e13c      	b.n	8001aa6 <main+0x6b6>

        }
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 800182c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001830:	49aa      	ldr	r1, [pc, #680]	; (8001adc <main+0x6ec>)
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fd6c 	bl	8000310 <strcmp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d14a      	bne.n	80018d4 <main+0x4e4>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800183e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001842:	21fa      	movs	r1, #250	; 0xfa
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fd21 	bl	800128c <recv_packet>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d025      	beq.n	800189c <main+0x4ac>
      {
        previousTime = HAL_GetTick();
 8001850:	f002 f9aa 	bl	8003ba8 <HAL_GetTick>
 8001854:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001858:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800185c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001860:	499f      	ldr	r1, [pc, #636]	; (8001ae0 <main+0x6f0>)
 8001862:	4618      	mov	r0, r3
 8001864:	f015 fd94 	bl	8017390 <siscanf>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d109      	bne.n	8001882 <main+0x492>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 800186e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001872:	4a9c      	ldr	r2, [pc, #624]	; (8001ae4 <main+0x6f4>)
 8001874:	461c      	mov	r4, r3
 8001876:	4615      	mov	r5, r2
 8001878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	7023      	strb	r3, [r4, #0]
 8001880:	e111      	b.n	8001aa6 <main+0x6b6>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001882:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd4c 	bl	8000324 <strlen>
 800188c:	4602      	mov	r2, r0
 800188e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f015 f907 	bl	8016aa8 <CDC_Transmit_HS>
 800189a:	e104      	b.n	8001aa6 <main+0x6b6>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 800189c:	f002 f984 	bl	8003ba8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ac:	f240 80fb 	bls.w	8001aa6 <main+0x6b6>
      {
        previousTime = HAL_GetTick();
 80018b0:	f002 f97a 	bl	8003ba8 <HAL_GetTick>
 80018b4:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 80018b8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018bc:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80018c0:	4984      	ldr	r1, [pc, #528]	; (8001ad4 <main+0x6e4>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f015 fd44 	bl	8017350 <siprintf>
        LoRA_sendPacket(sendMessage);
 80018c8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fbf1 	bl	80010b4 <LoRA_sendPacket>
 80018d2:	e0e8      	b.n	8001aa6 <main+0x6b6>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 80018d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018d8:	497f      	ldr	r1, [pc, #508]	; (8001ad8 <main+0x6e8>)
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fd18 	bl	8000310 <strcmp>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d121      	bne.n	800192a <main+0x53a>
    {
      if(max_packet_count == 0)
 80018e6:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80018ea:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10e      	bne.n	8001912 <main+0x522>
      {
        strcpy(communication_state,"TRANSITIONING");
 80018f4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018f8:	4a7b      	ldr	r2, [pc, #492]	; (8001ae8 <main+0x6f8>)
 80018fa:	461c      	mov	r4, r3
 80018fc:	4613      	mov	r3, r2
 80018fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001900:	c407      	stmia	r4!, {r0, r1, r2}
 8001902:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 800190a:	4878      	ldr	r0, [pc, #480]	; (8001aec <main+0x6fc>)
 800190c:	f7ff fbd2 	bl	80010b4 <LoRA_sendPacket>
 8001910:	e0c9      	b.n	8001aa6 <main+0x6b6>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001912:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001916:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001922:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e0bd      	b.n	8001aa6 <main+0x6b6>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 800192a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800192e:	496d      	ldr	r1, [pc, #436]	; (8001ae4 <main+0x6f4>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fced 	bl	8000310 <strcmp>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d166      	bne.n	8001a0a <main+0x61a>
    {
    	reliable_send_packet("*");
 800193c:	486c      	ldr	r0, [pc, #432]	; (8001af0 <main+0x700>)
 800193e:	f7ff fcd4 	bl	80012ea <reliable_send_packet>
    	sprintf(response_packet, "\nState of other board: %s\n> ", state);
 8001942:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001946:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800194a:	496a      	ldr	r1, [pc, #424]	; (8001af4 <main+0x704>)
 800194c:	4618      	mov	r0, r3
 800194e:	f015 fcff 	bl	8017350 <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 8001952:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fce4 	bl	8000324 <strlen>
 800195c:	4602      	mov	r2, r0
 800195e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f015 f89f 	bl	8016aa8 <CDC_Transmit_HS>
	  	//CDC_Transmit_HS("", strlen("> "));
    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 800196a:	bf00      	nop
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fd1e 	bl	80013b0 <usbReceiveHandle>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f8      	beq.n	800196c <main+0x57c>
    	{}

      reliable_send_packet(input);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fcb4 	bl	80012ea <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "%s\n", input);
 8001982:	1d3a      	adds	r2, r7, #4
 8001984:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001988:	495b      	ldr	r1, [pc, #364]	; (8001af8 <main+0x708>)
 800198a:	4618      	mov	r0, r3
 800198c:	f015 fce0 	bl	8017350 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001990:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fcc5 	bl	8000324 <strlen>
 800199a:	4602      	mov	r2, r0
 800199c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f015 f880 	bl	8016aa8 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4954      	ldr	r1, [pc, #336]	; (8001afc <main+0x70c>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fcaf 	bl	8000310 <strcmp>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d116      	bne.n	80019e6 <main+0x5f6>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 80019b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019bc:	4a47      	ldr	r2, [pc, #284]	; (8001adc <main+0x6ec>)
 80019be:	461c      	mov	r4, r3
 80019c0:	4615      	mov	r5, r2
 80019c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c6:	682b      	ldr	r3, [r5, #0]
 80019c8:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 80019ca:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019ce:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80019d2:	4940      	ldr	r1, [pc, #256]	; (8001ad4 <main+0x6e4>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f015 fcbb 	bl	8017350 <siprintf>
        LoRA_sendPacket(sendMessage);
 80019da:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb68 	bl	80010b4 <LoRA_sendPacket>
 80019e4:	e05f      	b.n	8001aa6 <main+0x6b6>
      }
      else
      {
        strcpy(communication_state,"TRANSITIONING");
 80019e6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019ea:	4a3f      	ldr	r2, [pc, #252]	; (8001ae8 <main+0x6f8>)
 80019ec:	461c      	mov	r4, r3
 80019ee:	4613      	mov	r3, r2
 80019f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f2:	c407      	stmia	r4!, {r0, r1, r2}
 80019f4:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 80019fc:	2064      	movs	r0, #100	; 0x64
 80019fe:	f002 f8df 	bl	8003bc0 <HAL_Delay>
        LoRA_sendPacket("$");
 8001a02:	483a      	ldr	r0, [pc, #232]	; (8001aec <main+0x6fc>)
 8001a04:	f7ff fb56 	bl	80010b4 <LoRA_sendPacket>
 8001a08:	e04d      	b.n	8001aa6 <main+0x6b6>
      }
    }
    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 8001a0a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a0e:	4936      	ldr	r1, [pc, #216]	; (8001ae8 <main+0x6f8>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fc7d 	bl	8000310 <strcmp>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d144      	bne.n	8001aa6 <main+0x6b6>
    {

        if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001a1c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a20:	21fa      	movs	r1, #250	; 0xfa
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fc32 	bl	800128c <recv_packet>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02b      	beq.n	8001a86 <main+0x696>
        {
          CDC_Transmit_HS("transitioning\n", strlen("transitioning\n"));
 8001a2e:	210e      	movs	r1, #14
 8001a30:	4833      	ldr	r0, [pc, #204]	; (8001b00 <main+0x710>)
 8001a32:	f015 f839 	bl	8016aa8 <CDC_Transmit_HS>
          previousTime = HAL_GetTick();
 8001a36:	f002 f8b7 	bl	8003ba8 <HAL_GetTick>
 8001a3a:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
          if(strcmp(recieved_packet, "*")==0)
 8001a3e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a42:	492b      	ldr	r1, [pc, #172]	; (8001af0 <main+0x700>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fc63 	bl	8000310 <strcmp>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d12a      	bne.n	8001aa6 <main+0x6b6>
          {
        	strcpy(previous_packet, recieved_packet);
 8001a50:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8001a54:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f015 fcfa 	bl	8017454 <strcpy>
        	strcpy(communication_state, "RECEIVING RELIABLE");
 8001a60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <main+0x714>)
 8001a66:	461c      	mov	r4, r3
 8001a68:	4615      	mov	r5, r2
 8001a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6e:	682b      	ldr	r3, [r5, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	8022      	strh	r2, [r4, #0]
 8001a74:	3402      	adds	r4, #2
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	7023      	strb	r3, [r4, #0]
            LoRA_sendPacket(recieved_packet);
 8001a7a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fb18 	bl	80010b4 <LoRA_sendPacket>
 8001a84:	e00f      	b.n	8001aa6 <main+0x6b6>
          }
        }
        else if (HAL_GetTick()-previousTime > 300)
 8001a86:	f002 f88f 	bl	8003ba8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a96:	d906      	bls.n	8001aa6 <main+0x6b6>
        {
          previousTime = HAL_GetTick();
 8001a98:	f002 f886 	bl	8003ba8 <HAL_GetTick>
 8001a9c:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
		  LoRA_sendPacket("$");
 8001aa0:	4812      	ldr	r0, [pc, #72]	; (8001aec <main+0x6fc>)
 8001aa2:	f7ff fb07 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001aa6:	f002 f87f 	bl	8003ba8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aba:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001b08 <main+0x718>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001ac6:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001aca:	f002 f86d 	bl	8003ba8 <HAL_GetTick>
 8001ace:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001ad2:	e616      	b.n	8001702 <main+0x312>
 8001ad4:	080186d4 	.word	0x080186d4
 8001ad8:	080186dc 	.word	0x080186dc
 8001adc:	080186ec 	.word	0x080186ec
 8001ae0:	080186b8 	.word	0x080186b8
 8001ae4:	080186c0 	.word	0x080186c0
 8001ae8:	08018700 	.word	0x08018700
 8001aec:	08018710 	.word	0x08018710
 8001af0:	08018714 	.word	0x08018714
 8001af4:	08018718 	.word	0x08018718
 8001af8:	08018738 	.word	0x08018738
 8001afc:	0801873c 	.word	0x0801873c
 8001b00:	08018744 	.word	0x08018744
 8001b04:	080186a4 	.word	0x080186a4
 8001b08:	447a0000 	.word	0x447a0000

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b09c      	sub	sp, #112	; 0x70
 8001b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b16:	224c      	movs	r2, #76	; 0x4c
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f015 fc66 	bl	80173ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2220      	movs	r2, #32
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f015 fc60 	bl	80173ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f007 ff0d 	bl	800994c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <SystemClock_Config+0xec>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <SystemClock_Config+0xec>)
 8001b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <SystemClock_Config+0xec>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b52:	bf00      	nop
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <SystemClock_Config+0xec>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b60:	d1f8      	bne.n	8001b54 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001b62:	2322      	movs	r3, #34	; 0x22
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001b6a:	2340      	movs	r3, #64	; 0x40
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b72:	2302      	movs	r3, #2
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b76:	2300      	movs	r3, #0
 8001b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b7e:	230c      	movs	r3, #12
 8001b80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001b86:	230c      	movs	r3, #12
 8001b88:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b8e:	230c      	movs	r3, #12
 8001b90:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f007 ff1e 	bl	80099e0 <HAL_RCC_OscConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001baa:	f000 ff31 	bl	8002a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bae:	233f      	movs	r3, #63	; 0x3f
 8001bb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001bc2:	2340      	movs	r3, #64	; 0x40
 8001bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001bcc:	2340      	movs	r3, #64	; 0x40
 8001bce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f008 fadd 	bl	800a194 <HAL_RCC_ClockConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001be0:	f000 ff16 	bl	8002a10 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001be4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001be8:	2100      	movs	r1, #0
 8001bea:	2000      	movs	r0, #0
 8001bec:	f008 fc88 	bl	800a500 <HAL_RCC_MCOConfig>
}
 8001bf0:	bf00      	nop
 8001bf2:	3770      	adds	r7, #112	; 0x70
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	58024800 	.word	0x58024800

08001bfc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0ae      	sub	sp, #184	; 0xb8
 8001c00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	22b8      	movs	r2, #184	; 0xb8
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f015 fbef 	bl	80173ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001c0e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001c1e:	230c      	movs	r3, #12
 8001c20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001c22:	2304      	movs	r3, #4
 8001c24:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c2e:	23c0      	movs	r3, #192	; 0xc0
 8001c30:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c46:	463b      	mov	r3, r7
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f008 fe99 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001c54:	f000 fedc 	bl	8002a10 <Error_Handler>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	37b8      	adds	r7, #184	; 0xb8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c72:	463b      	mov	r3, r7
 8001c74:	2224      	movs	r2, #36	; 0x24
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f015 fbb7 	bl	80173ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001c80:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <MX_ADC1_Init+0xe8>)
 8001c82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001c86:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cde:	4819      	ldr	r0, [pc, #100]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001ce0:	f002 f9ee 	bl	80040c0 <HAL_ADC_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001cea:	f000 fe91 	bl	8002a10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4812      	ldr	r0, [pc, #72]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001cfa:	f003 fa29 	bl	8005150 <HAL_ADCEx_MultiModeConfigChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001d04:	f000 fe84 	bl	8002a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <MX_ADC1_Init+0xec>)
 8001d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001d10:	2303      	movs	r3, #3
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d14:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_ADC1_Init+0xe4>)
 8001d2e:	f002 fbcf 	bl	80044d0 <HAL_ADC_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001d38:	f000 fe6a 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	3730      	adds	r7, #48	; 0x30
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	24000bfc 	.word	0x24000bfc
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	2a000400 	.word	0x2a000400

08001d50 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f015 fb45 	bl	80173ec <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d64:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <MX_ADC3_Init+0xd4>)
 8001d66:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d6a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001d6e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d72:	2208      	movs	r2, #8
 8001d74:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d84:	2204      	movs	r2, #4
 8001d86:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001dd6:	4812      	ldr	r0, [pc, #72]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001dd8:	f002 f972 	bl	80040c0 <HAL_ADC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001de2:	f000 fe15 	bl	8002a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <MX_ADC3_Init+0xd8>)
 8001de8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dea:	2306      	movs	r3, #6
 8001dec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001df2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001df6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_ADC3_Init+0xd0>)
 8001e0a:	f002 fb61 	bl	80044d0 <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001e14:	f000 fdfc 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	24000c6c 	.word	0x24000c6c
 8001e24:	58026000 	.word	0x58026000
 8001e28:	04300002 	.word	0x04300002

08001e2c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e32:	4a2f      	ldr	r2, [pc, #188]	; (8001ef0 <MX_FDCAN3_Init+0xc4>)
 8001e34:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001e4e:	4b27      	ldr	r3, [pc, #156]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e56:	2210      	movs	r2, #16
 8001e58:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001eaa:	2204      	movs	r2, #4
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_FDCAN3_Init+0xc0>)
 8001eda:	f005 fbff 	bl	80076dc <HAL_FDCAN_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001ee4:	f000 fd94 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	24000dcc 	.word	0x24000dcc
 8001ef0:	4000d400 	.word	0x4000d400

08001ef4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <MX_I2C2_Init+0x78>)
 8001efc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <MX_I2C2_Init+0x7c>)
 8001f02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f2e:	480e      	ldr	r0, [pc, #56]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f30:	f006 f912 	bl	8008158 <HAL_I2C_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001f3a:	f000 fd69 	bl	8002a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f42:	f006 f9b3 	bl	80082ac <HAL_I2CEx_ConfigAnalogFilter>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f4c:	f000 fd60 	bl	8002a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f54:	f006 f9f5 	bl	8008342 <HAL_I2CEx_ConfigDigitalFilter>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f5e:	f000 fd57 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	24000e6c 	.word	0x24000e6c
 8001f6c:	40005800 	.word	0x40005800
 8001f70:	20303e5d 	.word	0x20303e5d

08001f74 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <MX_RNG_Init+0x24>)
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <MX_RNG_Init+0x28>)
 8001f7c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_RNG_Init+0x24>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_RNG_Init+0x24>)
 8001f86:	f00b f8e1 	bl	800d14c <HAL_RNG_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001f90:	f000 fd3e 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	24000ec0 	.word	0x24000ec0
 8001f9c:	48021800 	.word	0x48021800

08001fa0 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_SDMMC2_SD_Init+0x34>)
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <MX_SDMMC2_SD_Init+0x38>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <MX_SDMMC2_SD_Init+0x34>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_SDMMC2_SD_Init+0x34>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <MX_SDMMC2_SD_Init+0x34>)
 8001fb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fbc:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <MX_SDMMC2_SD_Init+0x34>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <MX_SDMMC2_SD_Init+0x34>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	24000ed4 	.word	0x24000ed4
 8001fd8:	48022400 	.word	0x48022400

08001fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <MX_SPI1_Init+0xa4>)
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <MX_SPI1_Init+0xa8>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <MX_SPI1_Init+0xa4>)
 8001fe8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <MX_SPI1_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MX_SPI1_Init+0xa4>)
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <MX_SPI1_Init+0xa4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002008:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800200c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002010:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002014:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_SPI1_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <MX_SPI1_Init+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <MX_SPI1_Init+0xa4>)
 800203e:	2200      	movs	r2, #0
 8002040:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002044:	2200      	movs	r2, #0
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <MX_SPI1_Init+0xa4>)
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002050:	2200      	movs	r2, #0
 8002052:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002056:	2200      	movs	r2, #0
 8002058:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_SPI1_Init+0xa4>)
 800205c:	2200      	movs	r2, #0
 800205e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002062:	2200      	movs	r2, #0
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_SPI1_Init+0xa4>)
 8002068:	2200      	movs	r2, #0
 800206a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_SPI1_Init+0xa4>)
 800206e:	f00c fd75 	bl	800eb5c <HAL_SPI_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002078:	f000 fcca 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	24000f50 	.word	0x24000f50
 8002084:	40013000 	.word	0x40013000

08002088 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <MX_SPI2_Init+0xa4>)
 800208e:	4a28      	ldr	r2, [pc, #160]	; (8002130 <MX_SPI2_Init+0xa8>)
 8002090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <MX_SPI2_Init+0xa4>)
 8002094:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <MX_SPI2_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <MX_SPI2_Init+0xa4>)
 80020a2:	2207      	movs	r2, #7
 80020a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <MX_SPI2_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <MX_SPI2_Init+0xa4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <MX_SPI2_Init+0xa4>)
 80020b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <MX_SPI2_Init+0xa4>)
 80020bc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MX_SPI2_Init+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_SPI2_Init+0xa4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <MX_SPI2_Init+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <MX_SPI2_Init+0xa4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <MX_SPI2_Init+0xa4>)
 80020dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <MX_SPI2_Init+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_SPI2_Init+0xa4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <MX_SPI2_Init+0xa4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <MX_SPI2_Init+0xa4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_SPI2_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <MX_SPI2_Init+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_SPI2_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <MX_SPI2_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_SPI2_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <MX_SPI2_Init+0xa4>)
 800211a:	f00c fd1f 	bl	800eb5c <HAL_SPI_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002124:	f000 fc74 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	24000fd8 	.word	0x24000fd8
 8002130:	40003800 	.word	0x40003800

08002134 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <MX_SPI3_Init+0xa4>)
 800213a:	4a28      	ldr	r2, [pc, #160]	; (80021dc <MX_SPI3_Init+0xa8>)
 800213c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002140:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002144:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_SPI3_Init+0xa4>)
 800214e:	2207      	movs	r2, #7
 8002150:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_SPI3_Init+0xa4>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002160:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002164:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002168:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800216c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <MX_SPI3_Init+0xa4>)
 800217c:	2200      	movs	r2, #0
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002182:	2200      	movs	r2, #0
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002190:	2200      	movs	r2, #0
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_SPI3_Init+0xa4>)
 8002196:	2200      	movs	r2, #0
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <MX_SPI3_Init+0xa4>)
 800219c:	2200      	movs	r2, #0
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <MX_SPI3_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_SPI3_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <MX_SPI3_Init+0xa4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <MX_SPI3_Init+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <MX_SPI3_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_SPI3_Init+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <MX_SPI3_Init+0xa4>)
 80021c6:	f00c fcc9 	bl	800eb5c <HAL_SPI_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80021d0:	f000 fc1e 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	24001060 	.word	0x24001060
 80021dc:	40003c00 	.word	0x40003c00

080021e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
 8002200:	615a      	str	r2, [r3, #20]
 8002202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <MX_TIM2_Init+0xac>)
 8002206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_TIM2_Init+0xac>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <MX_TIM2_Init+0xac>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_TIM2_Init+0xac>)
 800221a:	225a      	movs	r2, #90	; 0x5a
 800221c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <MX_TIM2_Init+0xac>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <MX_TIM2_Init+0xac>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800222a:	4818      	ldr	r0, [pc, #96]	; (800228c <MX_TIM2_Init+0xac>)
 800222c:	f00d fa86 	bl	800f73c <HAL_TIM_PWM_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002236:	f000 fbeb 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	4619      	mov	r1, r3
 8002248:	4810      	ldr	r0, [pc, #64]	; (800228c <MX_TIM2_Init+0xac>)
 800224a:	f00e fd0d 	bl	8010c68 <HAL_TIMEx_MasterConfigSynchronization>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002254:	f000 fbdc 	bl	8002a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002258:	2360      	movs	r3, #96	; 0x60
 800225a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	2208      	movs	r2, #8
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <MX_TIM2_Init+0xac>)
 8002270:	f00d ff2c 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800227a:	f000 fbc9 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800227e:	4803      	ldr	r0, [pc, #12]	; (800228c <MX_TIM2_Init+0xac>)
 8002280:	f001 f91e 	bl	80034c0 <HAL_TIM_MspPostInit>

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	240010e8 	.word	0x240010e8

08002290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a2:	463b      	mov	r3, r7
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	615a      	str	r2, [r3, #20]
 80022b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022b6:	4a27      	ldr	r2, [pc, #156]	; (8002354 <MX_TIM3_Init+0xc4>)
 80022b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022c8:	225a      	movs	r2, #90	; 0x5a
 80022ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022d8:	481d      	ldr	r0, [pc, #116]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022da:	f00d fa2f 	bl	800f73c <HAL_TIM_PWM_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022e4:	f000 fb94 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4816      	ldr	r0, [pc, #88]	; (8002350 <MX_TIM3_Init+0xc0>)
 80022f8:	f00e fcb6 	bl	8010c68 <HAL_TIMEx_MasterConfigSynchronization>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002302:	f000 fb85 	bl	8002a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002306:	2360      	movs	r3, #96	; 0x60
 8002308:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002316:	463b      	mov	r3, r7
 8002318:	2200      	movs	r2, #0
 800231a:	4619      	mov	r1, r3
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <MX_TIM3_Init+0xc0>)
 800231e:	f00d fed5 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002328:	f000 fb72 	bl	8002a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	2204      	movs	r2, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4807      	ldr	r0, [pc, #28]	; (8002350 <MX_TIM3_Init+0xc0>)
 8002334:	f00d feca 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800233e:	f000 fb67 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002342:	4803      	ldr	r0, [pc, #12]	; (8002350 <MX_TIM3_Init+0xc0>)
 8002344:	f001 f8bc 	bl	80034c0 <HAL_TIM_MspPostInit>

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	24001134 	.word	0x24001134
 8002354:	40000400 	.word	0x40000400

08002358 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800236a:	463b      	mov	r3, r7
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
 8002378:	615a      	str	r2, [r3, #20]
 800237a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800237c:	4b32      	ldr	r3, [pc, #200]	; (8002448 <MX_TIM4_Init+0xf0>)
 800237e:	4a33      	ldr	r2, [pc, #204]	; (800244c <MX_TIM4_Init+0xf4>)
 8002380:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <MX_TIM4_Init+0xf0>)
 8002384:	221c      	movs	r2, #28
 8002386:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <MX_TIM4_Init+0xf0>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <MX_TIM4_Init+0xf0>)
 8002390:	f242 720f 	movw	r2, #9999	; 0x270f
 8002394:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002396:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <MX_TIM4_Init+0xf0>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <MX_TIM4_Init+0xf0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023a2:	4829      	ldr	r0, [pc, #164]	; (8002448 <MX_TIM4_Init+0xf0>)
 80023a4:	f00d f9ca 	bl	800f73c <HAL_TIM_PWM_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80023ae:	f000 fb2f 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4821      	ldr	r0, [pc, #132]	; (8002448 <MX_TIM4_Init+0xf0>)
 80023c2:	f00e fc51 	bl	8010c68 <HAL_TIMEx_MasterConfigSynchronization>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80023cc:	f000 fb20 	bl	8002a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d0:	2360      	movs	r3, #96	; 0x60
 80023d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	2200      	movs	r2, #0
 80023e4:	4619      	mov	r1, r3
 80023e6:	4818      	ldr	r0, [pc, #96]	; (8002448 <MX_TIM4_Init+0xf0>)
 80023e8:	f00d fe70 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80023f2:	f000 fb0d 	bl	8002a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023f6:	463b      	mov	r3, r7
 80023f8:	2204      	movs	r2, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4812      	ldr	r0, [pc, #72]	; (8002448 <MX_TIM4_Init+0xf0>)
 80023fe:	f00d fe65 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002408:	f000 fb02 	bl	8002a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	2208      	movs	r2, #8
 8002410:	4619      	mov	r1, r3
 8002412:	480d      	ldr	r0, [pc, #52]	; (8002448 <MX_TIM4_Init+0xf0>)
 8002414:	f00d fe5a 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800241e:	f000 faf7 	bl	8002a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	220c      	movs	r2, #12
 8002426:	4619      	mov	r1, r3
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <MX_TIM4_Init+0xf0>)
 800242a:	f00d fe4f 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002434:	f000 faec 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <MX_TIM4_Init+0xf0>)
 800243a:	f001 f841 	bl	80034c0 <HAL_TIM_MspPostInit>

}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	24001180 	.word	0x24001180
 800244c:	40000800 	.word	0x40000800

08002450 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002462:	463b      	mov	r3, r7
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	615a      	str	r2, [r3, #20]
 8002472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <MX_TIM5_Init+0xac>)
 8002476:	4a22      	ldr	r2, [pc, #136]	; (8002500 <MX_TIM5_Init+0xb0>)
 8002478:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <MX_TIM5_Init+0xac>)
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <MX_TIM5_Init+0xac>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <MX_TIM5_Init+0xac>)
 8002488:	225a      	movs	r2, #90	; 0x5a
 800248a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <MX_TIM5_Init+0xac>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <MX_TIM5_Init+0xac>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002498:	4818      	ldr	r0, [pc, #96]	; (80024fc <MX_TIM5_Init+0xac>)
 800249a:	f00d f94f 	bl	800f73c <HAL_TIM_PWM_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80024a4:	f000 fab4 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	4811      	ldr	r0, [pc, #68]	; (80024fc <MX_TIM5_Init+0xac>)
 80024b8:	f00e fbd6 	bl	8010c68 <HAL_TIMEx_MasterConfigSynchronization>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80024c2:	f000 faa5 	bl	8002a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c6:	2360      	movs	r3, #96	; 0x60
 80024c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	220c      	movs	r2, #12
 80024da:	4619      	mov	r1, r3
 80024dc:	4807      	ldr	r0, [pc, #28]	; (80024fc <MX_TIM5_Init+0xac>)
 80024de:	f00d fdf5 	bl	80100cc <HAL_TIM_PWM_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80024e8:	f000 fa92 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <MX_TIM5_Init+0xac>)
 80024ee:	f000 ffe7 	bl	80034c0 <HAL_TIM_MspPostInit>

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	240011cc 	.word	0x240011cc
 8002500:	40000c00 	.word	0x40000c00

08002504 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_TIM13_Init+0x40>)
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <MX_TIM13_Init+0x44>)
 800250c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <MX_TIM13_Init+0x40>)
 8002510:	225f      	movs	r2, #95	; 0x5f
 8002512:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_TIM13_Init+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <MX_TIM13_Init+0x40>)
 800251c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002520:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_TIM13_Init+0x40>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_TIM13_Init+0x40>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_TIM13_Init+0x40>)
 8002530:	f00d f8ad 	bl	800f68e <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800253a:	f000 fa69 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	24001218 	.word	0x24001218
 8002548:	40001c00 	.word	0x40001c00

0800254c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <MX_UART4_Init+0x90>)
 8002552:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <MX_UART4_Init+0x94>)
 8002554:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <MX_UART4_Init+0x90>)
 8002558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800255c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <MX_UART4_Init+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <MX_UART4_Init+0x90>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <MX_UART4_Init+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <MX_UART4_Init+0x90>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <MX_UART4_Init+0x90>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <MX_UART4_Init+0x90>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <MX_UART4_Init+0x90>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MX_UART4_Init+0x90>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <MX_UART4_Init+0x90>)
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002594:	4811      	ldr	r0, [pc, #68]	; (80025dc <MX_UART4_Init+0x90>)
 8002596:	f00e fc21 	bl	8010ddc <HAL_UART_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025a0:	f000 fa36 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025a4:	2100      	movs	r1, #0
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <MX_UART4_Init+0x90>)
 80025a8:	f00f fd27 	bl	8011ffa <HAL_UARTEx_SetTxFifoThreshold>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025b2:	f000 fa2d 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b6:	2100      	movs	r1, #0
 80025b8:	4808      	ldr	r0, [pc, #32]	; (80025dc <MX_UART4_Init+0x90>)
 80025ba:	f00f fd5c 	bl	8012076 <HAL_UARTEx_SetRxFifoThreshold>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80025c4:	f000 fa24 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_UART4_Init+0x90>)
 80025ca:	f00f fcdd 	bl	8011f88 <HAL_UARTEx_DisableFifoMode>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025d4:	f000 fa1c 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	240014bc 	.word	0x240014bc
 80025e0:	40004c00 	.word	0x40004c00

080025e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <MX_USART6_UART_Init+0x90>)
 80025ea:	4a23      	ldr	r2, [pc, #140]	; (8002678 <MX_USART6_UART_Init+0x94>)
 80025ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <MX_USART6_UART_Init+0x90>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_USART6_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <MX_USART6_UART_Init+0x90>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <MX_USART6_UART_Init+0x90>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <MX_USART6_UART_Init+0x90>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002628:	2200      	movs	r2, #0
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800262c:	4811      	ldr	r0, [pc, #68]	; (8002674 <MX_USART6_UART_Init+0x90>)
 800262e:	f00e fbd5 	bl	8010ddc <HAL_UART_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002638:	f000 f9ea 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800263c:	2100      	movs	r1, #0
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002640:	f00f fcdb 	bl	8011ffa <HAL_UARTEx_SetTxFifoThreshold>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800264a:	f000 f9e1 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800264e:	2100      	movs	r1, #0
 8002650:	4808      	ldr	r0, [pc, #32]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002652:	f00f fd10 	bl	8012076 <HAL_UARTEx_SetRxFifoThreshold>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800265c:	f000 f9d8 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <MX_USART6_UART_Init+0x90>)
 8002662:	f00f fc91 	bl	8011f88 <HAL_UARTEx_DisableFifoMode>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800266c:	f000 f9d0 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	24001550 	.word	0x24001550
 8002678:	40011400 	.word	0x40011400

0800267c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <MX_DMA_Init+0xbc>)
 8002684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002688:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <MX_DMA_Init+0xbc>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <MX_DMA_Init+0xbc>)
 8002694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <MX_DMA_Init+0xbc>)
 80026a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <MX_DMA_Init+0xbc>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <MX_DMA_Init+0xbc>)
 80026b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	200b      	movs	r0, #11
 80026c4:	f002 ff01 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026c8:	200b      	movs	r0, #11
 80026ca:	f002 ff18 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	200c      	movs	r0, #12
 80026d4:	f002 fef9 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026d8:	200c      	movs	r0, #12
 80026da:	f002 ff10 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	200d      	movs	r0, #13
 80026e4:	f002 fef1 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026e8:	200d      	movs	r0, #13
 80026ea:	f002 ff08 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	200e      	movs	r0, #14
 80026f4:	f002 fee9 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80026f8:	200e      	movs	r0, #14
 80026fa:	f002 ff00 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	200f      	movs	r0, #15
 8002704:	f002 fee1 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002708:	200f      	movs	r0, #15
 800270a:	f002 fef8 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	2010      	movs	r0, #16
 8002714:	f002 fed9 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002718:	2010      	movs	r0, #16
 800271a:	f002 fef0 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2100      	movs	r1, #0
 8002722:	2046      	movs	r0, #70	; 0x46
 8002724:	f002 fed1 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002728:	2046      	movs	r0, #70	; 0x46
 800272a:	f002 fee8 	bl	80054fe <HAL_NVIC_EnableIRQ>

}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	58024400 	.word	0x58024400

0800273c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08c      	sub	sp, #48	; 0x30
 8002740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002742:	f107 031c 	add.w	r3, r7, #28
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002752:	4ba7      	ldr	r3, [pc, #668]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002758:	4aa5      	ldr	r2, [pc, #660]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 800275a:	f043 0310 	orr.w	r3, r3, #16
 800275e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002762:	4ba3      	ldr	r3, [pc, #652]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002770:	4b9f      	ldr	r3, [pc, #636]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002776:	4a9e      	ldr	r2, [pc, #632]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002778:	f043 0320 	orr.w	r3, r3, #32
 800277c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002780:	4b9b      	ldr	r3, [pc, #620]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	4b98      	ldr	r3, [pc, #608]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002794:	4a96      	ldr	r2, [pc, #600]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279e:	4b94      	ldr	r3, [pc, #592]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	4b90      	ldr	r3, [pc, #576]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	4a8f      	ldr	r2, [pc, #572]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027bc:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d0:	4a87      	ldr	r2, [pc, #540]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027da:	4b85      	ldr	r3, [pc, #532]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e8:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	4a80      	ldr	r2, [pc, #512]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f8:	4b7d      	ldr	r3, [pc, #500]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 80027fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002806:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002816:	4b76      	ldr	r3, [pc, #472]	; (80029f0 <MX_GPIO_Init+0x2b4>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002824:	2200      	movs	r2, #0
 8002826:	f241 5104 	movw	r1, #5380	; 0x1504
 800282a:	4872      	ldr	r0, [pc, #456]	; (80029f4 <MX_GPIO_Init+0x2b8>)
 800282c:	f005 fc7a 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002830:	2200      	movs	r2, #0
 8002832:	f248 0106 	movw	r1, #32774	; 0x8006
 8002836:	4870      	ldr	r0, [pc, #448]	; (80029f8 <MX_GPIO_Init+0x2bc>)
 8002838:	f005 fc74 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	2130      	movs	r1, #48	; 0x30
 8002840:	486e      	ldr	r0, [pc, #440]	; (80029fc <MX_GPIO_Init+0x2c0>)
 8002842:	f005 fc6f 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	2103      	movs	r1, #3
 800284a:	486d      	ldr	r0, [pc, #436]	; (8002a00 <MX_GPIO_Init+0x2c4>)
 800284c:	f005 fc6a 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002850:	2200      	movs	r2, #0
 8002852:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002856:	486b      	ldr	r0, [pc, #428]	; (8002a04 <MX_GPIO_Init+0x2c8>)
 8002858:	f005 fc64 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800285c:	2200      	movs	r2, #0
 800285e:	210e      	movs	r1, #14
 8002860:	4869      	ldr	r0, [pc, #420]	; (8002a08 <MX_GPIO_Init+0x2cc>)
 8002862:	f005 fc5f 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002866:	2201      	movs	r2, #1
 8002868:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800286c:	4867      	ldr	r0, [pc, #412]	; (8002a0c <MX_GPIO_Init+0x2d0>)
 800286e:	f005 fc59 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	2101      	movs	r1, #1
 8002876:	4865      	ldr	r0, [pc, #404]	; (8002a0c <MX_GPIO_Init+0x2d0>)
 8002878:	f005 fc54 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800287c:	f241 5304 	movw	r3, #5380	; 0x1504
 8002880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002882:	2301      	movs	r3, #1
 8002884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4857      	ldr	r0, [pc, #348]	; (80029f4 <MX_GPIO_Init+0x2b8>)
 8002896:	f005 fa85 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800289a:	f248 0306 	movw	r3, #32774	; 0x8006
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	4619      	mov	r1, r3
 80028b2:	4851      	ldr	r0, [pc, #324]	; (80029f8 <MX_GPIO_Init+0x2bc>)
 80028b4:	f005 fa76 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028b8:	2330      	movs	r3, #48	; 0x30
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	484b      	ldr	r0, [pc, #300]	; (80029fc <MX_GPIO_Init+0x2c0>)
 80028d0:	f005 fa68 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 80028d4:	2303      	movs	r3, #3
 80028d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d8:	2301      	movs	r3, #1
 80028da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4845      	ldr	r0, [pc, #276]	; (8002a00 <MX_GPIO_Init+0x2c4>)
 80028ec:	f005 fa5a 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80028f0:	2304      	movs	r3, #4
 80028f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	483f      	ldr	r0, [pc, #252]	; (8002a00 <MX_GPIO_Init+0x2c4>)
 8002904:	f005 fa4e 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002908:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 800290c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	4838      	ldr	r0, [pc, #224]	; (8002a04 <MX_GPIO_Init+0x2c8>)
 8002922:	f005 fa3f 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002926:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800292a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002930:	2301      	movs	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4619      	mov	r1, r3
 800293a:	4832      	ldr	r0, [pc, #200]	; (8002a04 <MX_GPIO_Init+0x2c8>)
 800293c:	f005 fa32 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002940:	2301      	movs	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002948:	2301      	movs	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	482d      	ldr	r0, [pc, #180]	; (8002a08 <MX_GPIO_Init+0x2cc>)
 8002954:	f005 fa26 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002958:	230e      	movs	r3, #14
 800295a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	2301      	movs	r3, #1
 800295e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	4619      	mov	r1, r3
 800296e:	4826      	ldr	r0, [pc, #152]	; (8002a08 <MX_GPIO_Init+0x2cc>)
 8002970:	f005 fa18 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002974:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297e:	2301      	movs	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	481a      	ldr	r0, [pc, #104]	; (80029f4 <MX_GPIO_Init+0x2b8>)
 800298a:	f005 fa0b 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 800298e:	f240 7301 	movw	r3, #1793	; 0x701
 8002992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	2301      	movs	r3, #1
 8002996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	4819      	ldr	r0, [pc, #100]	; (8002a0c <MX_GPIO_Init+0x2d0>)
 80029a8:	f005 f9fc 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80029ac:	2310      	movs	r3, #16
 80029ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	4812      	ldr	r0, [pc, #72]	; (8002a08 <MX_GPIO_Init+0x2cc>)
 80029c0:	f005 f9f0 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <MX_GPIO_Init+0x2bc>)
 80029e2:	f005 f9df 	bl	8007da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029e6:	bf00      	nop
 80029e8:	3730      	adds	r7, #48	; 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58021000 	.word	0x58021000
 80029f8:	58020000 	.word	0x58020000
 80029fc:	58020800 	.word	0x58020800
 8002a00:	58020400 	.word	0x58020400
 8002a04:	58021400 	.word	0x58021400
 8002a08:	58021800 	.word	0x58021800
 8002a0c:	58020c00 	.word	0x58020c00

08002a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a14:	b672      	cpsid	i
}
 8002a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a18:	e7fe      	b.n	8002a18 <Error_Handler+0x8>
	...

08002a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_MspInit+0x30>)
 8002a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <HAL_MspInit+0x30>)
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_MspInit+0x30>)
 8002a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	58024400 	.word	0x58024400

08002a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5d      	ldr	r2, [pc, #372]	; (8002be4 <HAL_ADC_MspInit+0x194>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d159      	bne.n	8002b26 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a72:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a78:	4a5b      	ldr	r2, [pc, #364]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002a7a:	f043 0320 	orr.w	r3, r3, #32
 8002a7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a82:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a90:	4b55      	ldr	r3, [pc, #340]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a96:	4a54      	ldr	r2, [pc, #336]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa0:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	484a      	ldr	r0, [pc, #296]	; (8002bec <HAL_ADC_MspInit+0x19c>)
 8002ac2:	f005 f96f 	bl	8007da4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002ac8:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <HAL_ADC_MspInit+0x1a4>)
 8002aca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002ace:	2209      	movs	r2, #9
 8002ad0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad8:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ade:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ae6:	4b42      	ldr	r3, [pc, #264]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aee:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002af0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002afc:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b02:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b08:	4839      	ldr	r0, [pc, #228]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002b0a:	f002 fd13 	bl	8005534 <HAL_DMA_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002b14:	f7ff ff7c 	bl	8002a10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b1e:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_ADC_MspInit+0x1a0>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002b24:	e059      	b.n	8002bda <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a33      	ldr	r2, [pc, #204]	; (8002bf8 <HAL_ADC_MspInit+0x1a8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d154      	bne.n	8002bda <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b36:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b54:	4a24      	ldr	r2, [pc, #144]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b5e:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <HAL_ADC_MspInit+0x198>)
 8002b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002b6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b70:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b74:	f001 f848 	bl	8003c08 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002b7a:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <HAL_ADC_MspInit+0x1b0>)
 8002b7c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002b80:	2273      	movs	r2, #115	; 0x73
 8002b82:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b96:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b9e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ba0:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bae:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bb6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002bbe:	480f      	ldr	r0, [pc, #60]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002bc0:	f002 fcb8 	bl	8005534 <HAL_DMA_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002bca:	f7ff ff21 	bl	8002a10 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bd4:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_ADC_MspInit+0x1ac>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bda:	bf00      	nop
 8002bdc:	3730      	adds	r7, #48	; 0x30
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40022000 	.word	0x40022000
 8002be8:	58024400 	.word	0x58024400
 8002bec:	58020800 	.word	0x58020800
 8002bf0:	24000cdc 	.word	0x24000cdc
 8002bf4:	40020088 	.word	0x40020088
 8002bf8:	58026000 	.word	0x58026000
 8002bfc:	24000d54 	.word	0x24000d54
 8002c00:	400204b8 	.word	0x400204b8

08002c04 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0b8      	sub	sp, #224	; 0xe0
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	22b8      	movs	r2, #184	; 0xb8
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f014 fbe1 	bl	80173ec <memset>
  if(hfdcan->Instance==FDCAN3)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_FDCAN_MspInit+0xc4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d145      	bne.n	8002cc0 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002c40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c44:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f007 fe98 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002c56:	f7ff fedb 	bl	8002a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_FDCAN_MspInit+0xc8>)
 8002c5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_FDCAN_MspInit+0xc8>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_FDCAN_MspInit+0xc8>)
 8002c6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_FDCAN_MspInit+0xc8>)
 8002c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <HAL_FDCAN_MspInit+0xc8>)
 8002c80:	f043 0320 	orr.w	r3, r3, #32
 8002c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_FDCAN_MspInit+0xc8>)
 8002c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c96:	23c0      	movs	r3, #192	; 0xc0
 8002c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <HAL_FDCAN_MspInit+0xcc>)
 8002cbc:	f005 f872 	bl	8007da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	37e0      	adds	r7, #224	; 0xe0
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	4000d400 	.word	0x4000d400
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	58021400 	.word	0x58021400

08002cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b0b8      	sub	sp, #224	; 0xe0
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	22b8      	movs	r2, #184	; 0xb8
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f014 fb79 	bl	80173ec <memset>
  if(hi2c->Instance==I2C2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <HAL_I2C_MspInit+0xd4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d14d      	bne.n	8002da0 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d04:	f04f 0208 	mov.w	r2, #8
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f007 fe30 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002d26:	f7ff fe73 	bl	8002a10 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_I2C_MspInit+0xd8>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_I2C_MspInit+0xd8>)
 8002d32:	f043 0320 	orr.w	r3, r3, #32
 8002d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_I2C_MspInit+0xd8>)
 8002d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d4e:	2312      	movs	r3, #18
 8002d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d60:	2304      	movs	r3, #4
 8002d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4810      	ldr	r0, [pc, #64]	; (8002db0 <HAL_I2C_MspInit+0xdc>)
 8002d6e:	f005 f819 	bl	8007da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_I2C_MspInit+0xd8>)
 8002d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d78:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <HAL_I2C_MspInit+0xd8>)
 8002d7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_I2C_MspInit+0xd8>)
 8002d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2101      	movs	r1, #1
 8002d94:	2021      	movs	r0, #33	; 0x21
 8002d96:	f002 fb98 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002d9a:	2021      	movs	r0, #33	; 0x21
 8002d9c:	f002 fbaf 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002da0:	bf00      	nop
 8002da2:	37e0      	adds	r7, #224	; 0xe0
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40005800 	.word	0x40005800
 8002dac:	58024400 	.word	0x58024400
 8002db0:	58021400 	.word	0x58021400

08002db4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b0b2      	sub	sp, #200	; 0xc8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	22b8      	movs	r2, #184	; 0xb8
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f014 fb11 	bl	80173ec <memset>
  if(hrng->Instance==RNG)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <HAL_RNG_MspInit+0x6c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d121      	bne.n	8002e18 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f007 fdc8 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002df6:	f7ff fe0b 	bl	8002a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RNG_MspInit+0x70>)
 8002dfc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e00:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_RNG_MspInit+0x70>)
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RNG_MspInit+0x70>)
 8002e0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002e18:	bf00      	nop
 8002e1a:	37c8      	adds	r7, #200	; 0xc8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	48021800 	.word	0x48021800
 8002e24:	58024400 	.word	0x58024400

08002e28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b0ba      	sub	sp, #232	; 0xe8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e40:	f107 0318 	add.w	r3, r7, #24
 8002e44:	22b8      	movs	r2, #184	; 0xb8
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f014 facf 	bl	80173ec <memset>
  if(hsd->Instance==SDMMC2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5d      	ldr	r2, [pc, #372]	; (8002fc8 <HAL_SD_MspInit+0x1a0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f040 80b3 	bne.w	8002fc0 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e6a:	f107 0318 	add.w	r3, r7, #24
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f007 fd86 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002e7a:	f7ff fdc9 	bl	8002a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002e7e:	4b53      	ldr	r3, [pc, #332]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002e80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e84:	4a51      	ldr	r2, [pc, #324]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e8e:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002e90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea2:	4a4a      	ldr	r2, [pc, #296]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eac:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eba:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec0:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eca:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <HAL_SD_MspInit+0x1a4>)
 8002ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ed8:	2340      	movs	r3, #64	; 0x40
 8002eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002ef0:	230b      	movs	r3, #11
 8002ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4834      	ldr	r0, [pc, #208]	; (8002fd0 <HAL_SD_MspInit+0x1a8>)
 8002efe:	f004 ff51 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	2303      	movs	r3, #3
 8002f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002f1a:	230b      	movs	r3, #11
 8002f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f24:	4619      	mov	r1, r3
 8002f26:	482a      	ldr	r0, [pc, #168]	; (8002fd0 <HAL_SD_MspInit+0x1a8>)
 8002f28:	f004 ff3c 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002f46:	230b      	movs	r3, #11
 8002f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4820      	ldr	r0, [pc, #128]	; (8002fd4 <HAL_SD_MspInit+0x1ac>)
 8002f54:	f004 ff26 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002f72:	230b      	movs	r3, #11
 8002f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4815      	ldr	r0, [pc, #84]	; (8002fd4 <HAL_SD_MspInit+0x1ac>)
 8002f80:	f004 ff10 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002f9e:	230a      	movs	r3, #10
 8002fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	480a      	ldr	r0, [pc, #40]	; (8002fd4 <HAL_SD_MspInit+0x1ac>)
 8002fac:	f004 fefa 	bl	8007da4 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	207c      	movs	r0, #124	; 0x7c
 8002fb6:	f002 fa88 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002fba:	207c      	movs	r0, #124	; 0x7c
 8002fbc:	f002 fa9f 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	37e8      	adds	r7, #232	; 0xe8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	48022400 	.word	0x48022400
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	58020c00 	.word	0x58020c00
 8002fd4:	58021800 	.word	0x58021800

08002fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	; 0x38
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <HAL_SPI_MspInit+0x15c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12e      	bne.n	8003058 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ffa:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8002ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003000:	4a4d      	ldr	r2, [pc, #308]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8003002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003006:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_SPI_MspInit+0x160>)
 800300c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003014:	623b      	str	r3, [r7, #32]
 8003016:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003018:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_SPI_MspInit+0x160>)
 800301a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301e:	4a46      	ldr	r2, [pc, #280]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003028:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_SPI_MspInit+0x160>)
 800302a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003036:	23e0      	movs	r3, #224	; 0xe0
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003046:	2305      	movs	r3, #5
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800304e:	4619      	mov	r1, r3
 8003050:	483a      	ldr	r0, [pc, #232]	; (800313c <HAL_SPI_MspInit+0x164>)
 8003052:	f004 fea7 	bl	8007da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003056:	e068      	b.n	800312a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_SPI_MspInit+0x168>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d12f      	bne.n	80030c2 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003062:	4b35      	ldr	r3, [pc, #212]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8003064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003068:	4a33      	ldr	r2, [pc, #204]	; (8003138 <HAL_SPI_MspInit+0x160>)
 800306a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8003074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8003082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_SPI_MspInit+0x160>)
 8003092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800309e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ac:	2300      	movs	r3, #0
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030b0:	2305      	movs	r3, #5
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b8:	4619      	mov	r1, r3
 80030ba:	4822      	ldr	r0, [pc, #136]	; (8003144 <HAL_SPI_MspInit+0x16c>)
 80030bc:	f004 fe72 	bl	8007da4 <HAL_GPIO_Init>
}
 80030c0:	e033      	b.n	800312a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_SPI_MspInit+0x170>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d12e      	bne.n	800312a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_SPI_MspInit+0x160>)
 80030ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030d2:	4a19      	ldr	r2, [pc, #100]	; (8003138 <HAL_SPI_MspInit+0x160>)
 80030d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_SPI_MspInit+0x160>)
 80030de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_SPI_MspInit+0x160>)
 80030ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_SPI_MspInit+0x160>)
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_SPI_MspInit+0x160>)
 80030fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003108:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	2300      	movs	r3, #0
 8003118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800311a:	2306      	movs	r3, #6
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003122:	4619      	mov	r1, r3
 8003124:	4809      	ldr	r0, [pc, #36]	; (800314c <HAL_SPI_MspInit+0x174>)
 8003126:	f004 fe3d 	bl	8007da4 <HAL_GPIO_Init>
}
 800312a:	bf00      	nop
 800312c:	3738      	adds	r7, #56	; 0x38
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40013000 	.word	0x40013000
 8003138:	58024400 	.word	0x58024400
 800313c:	58020000 	.word	0x58020000
 8003140:	40003800 	.word	0x40003800
 8003144:	58020400 	.word	0x58020400
 8003148:	40003c00 	.word	0x40003c00
 800314c:	58020800 	.word	0x58020800

08003150 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	; 0x30
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 031c 	add.w	r3, r7, #28
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d15d      	bne.n	800322e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003172:	4b8e      	ldr	r3, [pc, #568]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003178:	4a8c      	ldr	r2, [pc, #560]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003182:	4b8a      	ldr	r3, [pc, #552]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003190:	4b86      	ldr	r3, [pc, #536]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	4a85      	ldr	r2, [pc, #532]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a0:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031be:	2301      	movs	r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4619      	mov	r1, r3
 80031c8:	4879      	ldr	r0, [pc, #484]	; (80033b0 <HAL_TIM_PWM_MspInit+0x260>)
 80031ca:	f004 fdeb 	bl	8007da4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80031ce:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 80031d0:	4a79      	ldr	r2, [pc, #484]	; (80033b8 <HAL_TIM_PWM_MspInit+0x268>)
 80031d2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80031d4:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 80031d6:	2214      	movs	r2, #20
 80031d8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e0:	4b74      	ldr	r3, [pc, #464]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80031e6:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 80031e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ec:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ee:	4b71      	ldr	r3, [pc, #452]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 80031f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031f4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031f6:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 80031f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80031fe:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003200:	2200      	movs	r2, #0
 8003202:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003204:	4b6b      	ldr	r3, [pc, #428]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003206:	2200      	movs	r2, #0
 8003208:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 800320c:	2200      	movs	r2, #0
 800320e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003210:	4868      	ldr	r0, [pc, #416]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003212:	f002 f98f 	bl	8005534 <HAL_DMA_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 800321c:	f7ff fbf8 	bl	8002a10 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a64      	ldr	r2, [pc, #400]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
 8003226:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800322c:	e119      	b.n	8003462 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a62      	ldr	r2, [pc, #392]	; (80033bc <HAL_TIM_PWM_MspInit+0x26c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d16d      	bne.n	8003314 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003238:	4b5c      	ldr	r3, [pc, #368]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 800323a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800323e:	4a5b      	ldr	r2, [pc, #364]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003248:	4b58      	ldr	r3, [pc, #352]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 800324a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003256:	4b5a      	ldr	r3, [pc, #360]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003258:	4a5a      	ldr	r2, [pc, #360]	; (80033c4 <HAL_TIM_PWM_MspInit+0x274>)
 800325a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800325c:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 800325e:	2218      	movs	r2, #24
 8003260:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003262:	4b57      	ldr	r3, [pc, #348]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003264:	2240      	movs	r2, #64	; 0x40
 8003266:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003268:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003274:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003276:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800327c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800327e:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003280:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003284:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003288:	2200      	movs	r2, #0
 800328a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 800328e:	2200      	movs	r2, #0
 8003290:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003292:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003294:	2200      	movs	r2, #0
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003298:	4849      	ldr	r0, [pc, #292]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 800329a:	f002 f94b 	bl	8005534 <HAL_DMA_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80032a4:	f7ff fbb4 	bl	8002a10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a45      	ldr	r2, [pc, #276]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
 80032ae:	4a44      	ldr	r2, [pc, #272]	; (80033c0 <HAL_TIM_PWM_MspInit+0x270>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80032b4:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032b6:	4a45      	ldr	r2, [pc, #276]	; (80033cc <HAL_TIM_PWM_MspInit+0x27c>)
 80032b8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80032ba:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032bc:	2217      	movs	r2, #23
 80032be:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032c0:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c6:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032d4:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032da:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032dc:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032e2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80032ea:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f0:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80032f6:	4834      	ldr	r0, [pc, #208]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 80032f8:	f002 f91c 	bl	8005534 <HAL_DMA_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003302:	f7ff fb85 	bl	8002a10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 800330a:	625a      	str	r2, [r3, #36]	; 0x24
 800330c:	4a2e      	ldr	r2, [pc, #184]	; (80033c8 <HAL_TIM_PWM_MspInit+0x278>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003312:	e0a6      	b.n	8003462 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <HAL_TIM_PWM_MspInit+0x280>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d15e      	bne.n	80033dc <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 800333e:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <HAL_TIM_PWM_MspInit+0x288>)
 8003340:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003344:	221f      	movs	r2, #31
 8003346:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 800334a:	2240      	movs	r2, #64	; 0x40
 800334c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800334e:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800335a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 800335e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003362:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800336a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003374:	2200      	movs	r2, #0
 8003376:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 800337a:	2200      	movs	r2, #0
 800337c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800337e:	4815      	ldr	r0, [pc, #84]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003380:	f002 f8d8 	bl	8005534 <HAL_DMA_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800338a:	f7ff fb41 	bl	8002a10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	2100      	movs	r1, #0
 800339e:	201e      	movs	r0, #30
 80033a0:	f002 f893 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033a4:	201e      	movs	r0, #30
 80033a6:	f002 f8aa 	bl	80054fe <HAL_NVIC_EnableIRQ>
}
 80033aa:	e05a      	b.n	8003462 <HAL_TIM_PWM_MspInit+0x312>
 80033ac:	58024400 	.word	0x58024400
 80033b0:	58020000 	.word	0x58020000
 80033b4:	24001264 	.word	0x24001264
 80033b8:	40020028 	.word	0x40020028
 80033bc:	40000400 	.word	0x40000400
 80033c0:	240012dc 	.word	0x240012dc
 80033c4:	40020058 	.word	0x40020058
 80033c8:	24001354 	.word	0x24001354
 80033cc:	40020070 	.word	0x40020070
 80033d0:	40000800 	.word	0x40000800
 80033d4:	240013cc 	.word	0x240013cc
 80033d8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_TIM_PWM_MspInit+0x31c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d13d      	bne.n	8003462 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_TIM_PWM_MspInit+0x320>)
 80033e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ec:	4a20      	ldr	r2, [pc, #128]	; (8003470 <HAL_TIM_PWM_MspInit+0x320>)
 80033ee:	f043 0308 	orr.w	r3, r3, #8
 80033f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_TIM_PWM_MspInit+0x320>)
 80033f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_TIM_PWM_MspInit+0x328>)
 8003408:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 800340c:	223a      	movs	r2, #58	; 0x3a
 800340e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003410:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003416:	4b17      	ldr	r3, [pc, #92]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 8003418:	2200      	movs	r2, #0
 800341a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800341c:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 800341e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003422:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 8003426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800342a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 800342e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003432:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003446:	480b      	ldr	r0, [pc, #44]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 8003448:	f002 f874 	bl	8005534 <HAL_DMA_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003452:	f7ff fadd 	bl	8002a10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a06      	ldr	r2, [pc, #24]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
 800345c:	4a05      	ldr	r2, [pc, #20]	; (8003474 <HAL_TIM_PWM_MspInit+0x324>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003462:	bf00      	nop
 8003464:	3730      	adds	r7, #48	; 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40000c00 	.word	0x40000c00
 8003470:	58024400 	.word	0x58024400
 8003474:	24001444 	.word	0x24001444
 8003478:	40020040 	.word	0x40020040

0800347c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_TIM_Base_MspInit+0x3c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_TIM_Base_MspInit+0x40>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003494:	4a09      	ldr	r2, [pc, #36]	; (80034bc <HAL_TIM_Base_MspInit+0x40>)
 8003496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_TIM_Base_MspInit+0x40>)
 80034a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40001c00 	.word	0x40001c00
 80034bc:	58024400 	.word	0x58024400

080034c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d120      	bne.n	8003524 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 80034e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e8:	4a50      	ldr	r2, [pc, #320]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f2:	4b4e      	ldr	r3, [pc, #312]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 80034f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800350a:	2302      	movs	r3, #2
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003512:	2301      	movs	r3, #1
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003516:	f107 031c 	add.w	r3, r7, #28
 800351a:	4619      	mov	r1, r3
 800351c:	4844      	ldr	r0, [pc, #272]	; (8003630 <HAL_TIM_MspPostInit+0x170>)
 800351e:	f004 fc41 	bl	8007da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003522:	e07f      	b.n	8003624 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a42      	ldr	r2, [pc, #264]	; (8003634 <HAL_TIM_MspPostInit+0x174>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d11f      	bne.n	800356e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352e:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 8003530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003534:	4a3d      	ldr	r2, [pc, #244]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 8003540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800354c:	2330      	movs	r3, #48	; 0x30
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003554:	2302      	movs	r3, #2
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	2300      	movs	r3, #0
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800355c:	2302      	movs	r3, #2
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 031c 	add.w	r3, r7, #28
 8003564:	4619      	mov	r1, r3
 8003566:	4832      	ldr	r0, [pc, #200]	; (8003630 <HAL_TIM_MspPostInit+0x170>)
 8003568:	f004 fc1c 	bl	8007da4 <HAL_GPIO_Init>
}
 800356c:	e05a      	b.n	8003624 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a31      	ldr	r2, [pc, #196]	; (8003638 <HAL_TIM_MspPostInit+0x178>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d131      	bne.n	80035dc <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003578:	4b2c      	ldr	r3, [pc, #176]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 800357a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800357e:	4a2b      	ldr	r2, [pc, #172]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 8003580:	f043 0308 	orr.w	r3, r3, #8
 8003584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 800358a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003596:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800359a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035a8:	2302      	movs	r3, #2
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ac:	f107 031c 	add.w	r3, r7, #28
 80035b0:	4619      	mov	r1, r3
 80035b2:	4822      	ldr	r0, [pc, #136]	; (800363c <HAL_TIM_MspPostInit+0x17c>)
 80035b4:	f004 fbf6 	bl	8007da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80035b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035c2:	2302      	movs	r3, #2
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035ca:	2302      	movs	r3, #2
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	4619      	mov	r1, r3
 80035d4:	4819      	ldr	r0, [pc, #100]	; (800363c <HAL_TIM_MspPostInit+0x17c>)
 80035d6:	f004 fbe5 	bl	8007da4 <HAL_GPIO_Init>
}
 80035da:	e023      	b.n	8003624 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_TIM_MspPostInit+0x180>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d11e      	bne.n	8003624 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ec:	4a0f      	ldr	r2, [pc, #60]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_TIM_MspPostInit+0x16c>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003604:	2308      	movs	r3, #8
 8003606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800360c:	2302      	movs	r3, #2
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003610:	2300      	movs	r3, #0
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003614:	2302      	movs	r3, #2
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	4809      	ldr	r0, [pc, #36]	; (8003644 <HAL_TIM_MspPostInit+0x184>)
 8003620:	f004 fbc0 	bl	8007da4 <HAL_GPIO_Init>
}
 8003624:	bf00      	nop
 8003626:	3730      	adds	r7, #48	; 0x30
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	58024400 	.word	0x58024400
 8003630:	58020400 	.word	0x58020400
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	58020c00 	.word	0x58020c00
 8003640:	40000c00 	.word	0x40000c00
 8003644:	58020000 	.word	0x58020000

08003648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0ba      	sub	sp, #232	; 0xe8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003660:	f107 0318 	add.w	r3, r7, #24
 8003664:	22b8      	movs	r2, #184	; 0xb8
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f013 febf 	bl	80173ec <memset>
  if(huart->Instance==UART4)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <HAL_UART_MspInit+0x160>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d147      	bne.n	8003708 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003678:	f04f 0202 	mov.w	r2, #2
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800368a:	f107 0318 	add.w	r3, r7, #24
 800368e:	4618      	mov	r0, r3
 8003690:	f007 f976 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800369a:	f7ff f9b9 	bl	8002a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800369e:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_UART_MspInit+0x164>)
 80036a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036a4:	4a41      	ldr	r2, [pc, #260]	; (80037ac <HAL_UART_MspInit+0x164>)
 80036a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036ae:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <HAL_UART_MspInit+0x164>)
 80036b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036bc:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <HAL_UART_MspInit+0x164>)
 80036be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c2:	4a3a      	ldr	r2, [pc, #232]	; (80037ac <HAL_UART_MspInit+0x164>)
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_UART_MspInit+0x164>)
 80036ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036f4:	2308      	movs	r3, #8
 80036f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036fe:	4619      	mov	r1, r3
 8003700:	482b      	ldr	r0, [pc, #172]	; (80037b0 <HAL_UART_MspInit+0x168>)
 8003702:	f004 fb4f 	bl	8007da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003706:	e04a      	b.n	800379e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <HAL_UART_MspInit+0x16c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d145      	bne.n	800379e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003712:	f04f 0201 	mov.w	r2, #1
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003724:	f107 0318 	add.w	r3, r7, #24
 8003728:	4618      	mov	r0, r3
 800372a:	f007 f929 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003734:	f7ff f96c 	bl	8002a10 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <HAL_UART_MspInit+0x164>)
 800373a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800373e:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <HAL_UART_MspInit+0x164>)
 8003740:	f043 0320 	orr.w	r3, r3, #32
 8003744:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003748:	4b18      	ldr	r3, [pc, #96]	; (80037ac <HAL_UART_MspInit+0x164>)
 800374a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <HAL_UART_MspInit+0x164>)
 8003758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <HAL_UART_MspInit+0x164>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_UART_MspInit+0x164>)
 8003768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003774:	23c0      	movs	r3, #192	; 0xc0
 8003776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800378c:	2307      	movs	r3, #7
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003792:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003796:	4619      	mov	r1, r3
 8003798:	4807      	ldr	r0, [pc, #28]	; (80037b8 <HAL_UART_MspInit+0x170>)
 800379a:	f004 fb03 	bl	8007da4 <HAL_GPIO_Init>
}
 800379e:	bf00      	nop
 80037a0:	37e8      	adds	r7, #232	; 0xe8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40004c00 	.word	0x40004c00
 80037ac:	58024400 	.word	0x58024400
 80037b0:	58020400 	.word	0x58020400
 80037b4:	40011400 	.word	0x40011400
 80037b8:	58020800 	.word	0x58020800

080037bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037c0:	e7fe      	b.n	80037c0 <NMI_Handler+0x4>

080037c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037c6:	e7fe      	b.n	80037c6 <HardFault_Handler+0x4>

080037c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037cc:	e7fe      	b.n	80037cc <MemManage_Handler+0x4>

080037ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037d2:	e7fe      	b.n	80037d2 <BusFault_Handler+0x4>

080037d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037d8:	e7fe      	b.n	80037d8 <UsageFault_Handler+0x4>

080037da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037da:	b480      	push	{r7}
 80037dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003808:	f000 f9ba 	bl	8003b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}

08003810 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <DMA1_Stream0_IRQHandler+0x10>)
 8003816:	f002 fc4f 	bl	80060b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	240013cc 	.word	0x240013cc

08003824 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <DMA1_Stream1_IRQHandler+0x10>)
 800382a:	f002 fc45 	bl	80060b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	24001264 	.word	0x24001264

08003838 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <DMA1_Stream2_IRQHandler+0x10>)
 800383e:	f002 fc3b 	bl	80060b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	24001444 	.word	0x24001444

0800384c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <DMA1_Stream3_IRQHandler+0x10>)
 8003852:	f002 fc31 	bl	80060b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	240012dc 	.word	0x240012dc

08003860 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <DMA1_Stream4_IRQHandler+0x10>)
 8003866:	f002 fc27 	bl	80060b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	24001354 	.word	0x24001354

08003874 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <DMA1_Stream5_IRQHandler+0x10>)
 800387a:	f002 fc1d 	bl	80060b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	24000cdc 	.word	0x24000cdc

08003888 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <TIM4_IRQHandler+0x10>)
 800388e:	f00c fafd 	bl	800fe8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	24001180 	.word	0x24001180

0800389c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <I2C2_EV_IRQHandler+0x10>)
 80038a2:	f004 fce9 	bl	8008278 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	24000e6c 	.word	0x24000e6c

080038b0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA2_Stream7_IRQHandler+0x10>)
 80038b6:	f002 fbff 	bl	80060b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	24000d54 	.word	0x24000d54

080038c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <OTG_HS_IRQHandler+0x10>)
 80038ca:	f004 fedf 	bl	800868c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	24002ae8 	.word	0x24002ae8

080038d8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <SDMMC2_IRQHandler+0x10>)
 80038de:	f009 ff49 	bl	800d774 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	24000ed4 	.word	0x24000ed4

080038ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <_sbrk+0x5c>)
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <_sbrk+0x60>)
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <_sbrk+0x64>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <_sbrk+0x64>)
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <_sbrk+0x68>)
 800390c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <_sbrk+0x64>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d207      	bcs.n	800392c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800391c:	f013 fd6e 	bl	80173fc <__errno>
 8003920:	4603      	mov	r3, r0
 8003922:	220c      	movs	r2, #12
 8003924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	e009      	b.n	8003940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <_sbrk+0x64>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <_sbrk+0x64>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <_sbrk+0x64>)
 800393c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800393e:	68fb      	ldr	r3, [r7, #12]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	24050000 	.word	0x24050000
 800394c:	00000800 	.word	0x00000800
 8003950:	240015e4 	.word	0x240015e4
 8003954:	24003360 	.word	0x24003360

08003958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <SystemInit+0xd0>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	4a31      	ldr	r2, [pc, #196]	; (8003a28 <SystemInit+0xd0>)
 8003964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800396c:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <SystemInit+0xd4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	2b06      	cmp	r3, #6
 8003976:	d807      	bhi.n	8003988 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003978:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <SystemInit+0xd4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 030f 	bic.w	r3, r3, #15
 8003980:	4a2a      	ldr	r2, [pc, #168]	; (8003a2c <SystemInit+0xd4>)
 8003982:	f043 0307 	orr.w	r3, r3, #7
 8003986:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003988:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <SystemInit+0xd8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a28      	ldr	r2, [pc, #160]	; (8003a30 <SystemInit+0xd8>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003994:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <SystemInit+0xd8>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800399a:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <SystemInit+0xd8>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4924      	ldr	r1, [pc, #144]	; (8003a30 <SystemInit+0xd8>)
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <SystemInit+0xdc>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <SystemInit+0xd4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <SystemInit+0xd4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 030f 	bic.w	r3, r3, #15
 80039ba:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <SystemInit+0xd4>)
 80039bc:	f043 0307 	orr.w	r3, r3, #7
 80039c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <SystemInit+0xd8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <SystemInit+0xd8>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <SystemInit+0xd8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <SystemInit+0xd8>)
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <SystemInit+0xe0>)
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <SystemInit+0xd8>)
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <SystemInit+0xe4>)
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <SystemInit+0xd8>)
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <SystemInit+0xe8>)
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <SystemInit+0xd8>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <SystemInit+0xd8>)
 80039ee:	4a14      	ldr	r2, [pc, #80]	; (8003a40 <SystemInit+0xe8>)
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <SystemInit+0xd8>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <SystemInit+0xd8>)
 80039fa:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <SystemInit+0xe8>)
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <SystemInit+0xd8>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <SystemInit+0xd8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <SystemInit+0xd8>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <SystemInit+0xd8>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <SystemInit+0xec>)
 8003a18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000ed00 	.word	0xe000ed00
 8003a2c:	52002000 	.word	0x52002000
 8003a30:	58024400 	.word	0x58024400
 8003a34:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a38:	02020200 	.word	0x02020200
 8003a3c:	01ff0000 	.word	0x01ff0000
 8003a40:	01010280 	.word	0x01010280
 8003a44:	52004000 	.word	0x52004000

08003a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a4c:	f7ff ff84 	bl	8003958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a50:	480c      	ldr	r0, [pc, #48]	; (8003a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a52:	490d      	ldr	r1, [pc, #52]	; (8003a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a58:	e002      	b.n	8003a60 <LoopCopyDataInit>

08003a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a5e:	3304      	adds	r3, #4

08003a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a64:	d3f9      	bcc.n	8003a5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a68:	4c0a      	ldr	r4, [pc, #40]	; (8003a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a6c:	e001      	b.n	8003a72 <LoopFillZerobss>

08003a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a70:	3204      	adds	r2, #4

08003a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a74:	d3fb      	bcc.n	8003a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a76:	f013 fcc7 	bl	8017408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a7a:	f7fd fcb9 	bl	80013f0 <main>
  bx  lr
 8003a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a80:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003a84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a88:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8003a8c:	08018a2c 	.word	0x08018a2c
  ldr r2, =_sbss
 8003a90:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8003a94:	2400335c 	.word	0x2400335c

08003a98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a98:	e7fe      	b.n	8003a98 <ADC3_IRQHandler>
	...

08003a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa2:	2003      	movs	r0, #3
 8003aa4:	f001 fd06 	bl	80054b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003aa8:	f006 fd94 	bl	800a5d4 <HAL_RCC_GetSysClockFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_Init+0x68>)
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	4913      	ldr	r1, [pc, #76]	; (8003b08 <HAL_Init+0x6c>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <HAL_Init+0x68>)
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <HAL_Init+0x6c>)
 8003ad0:	5cd3      	ldrb	r3, [r2, r3]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <HAL_Init+0x70>)
 8003ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <HAL_Init+0x74>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ae6:	200f      	movs	r0, #15
 8003ae8:	f000 f814 	bl	8003b14 <HAL_InitTick>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e002      	b.n	8003afc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003af6:	f7fe ff91 	bl	8002a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	58024400 	.word	0x58024400
 8003b08:	08018878 	.word	0x08018878
 8003b0c:	24000004 	.word	0x24000004
 8003b10:	24000000 	.word	0x24000000

08003b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_InitTick+0x60>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e021      	b.n	8003b6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_InitTick+0x64>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_InitTick+0x60>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fceb 	bl	800551a <HAL_SYSTICK_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e00e      	b.n	8003b6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b0f      	cmp	r3, #15
 8003b52:	d80a      	bhi.n	8003b6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b54:	2200      	movs	r2, #0
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f001 fcb5 	bl	80054ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b60:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <HAL_InitTick+0x68>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	2400000c 	.word	0x2400000c
 8003b78:	24000000 	.word	0x24000000
 8003b7c:	24000008 	.word	0x24000008

08003b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_IncTick+0x20>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2400000c 	.word	0x2400000c
 8003ba4:	240015e8 	.word	0x240015e8

08003ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_GetTick+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	240015e8 	.word	0x240015e8

08003bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7ff ffee 	bl	8003ba8 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d005      	beq.n	8003be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_Delay+0x44>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003be6:	bf00      	nop
 8003be8:	f7ff ffde 	bl	8003ba8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d8f7      	bhi.n	8003be8 <HAL_Delay+0x28>
  {
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2400000c 	.word	0x2400000c

08003c08 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	4904      	ldr	r1, [pc, #16]	; (8003c30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	604b      	str	r3, [r1, #4]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	58000400 	.word	0x58000400

08003c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3360      	adds	r3, #96	; 0x60
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <LL_ADC_SetOffset+0x60>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10b      	bne.n	8003cd8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003cd6:	e00b      	b.n	8003cf0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	431a      	orrs	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	58026000 	.word	0x58026000

08003d00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3360      	adds	r3, #96	; 0x60
 8003d0e:	461a      	mov	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	611a      	str	r2, [r3, #16]
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3360      	adds	r3, #96	; 0x60
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	601a      	str	r2, [r3, #0]
  }
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	58026000 	.word	0x58026000

08003da4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <LL_ADC_SetOffsetSaturation+0x40>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10e      	bne.n	8003dd6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3360      	adds	r3, #96	; 0x60
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	58026000 	.word	0x58026000

08003de8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <LL_ADC_SetOffsetSign+0x40>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10e      	bne.n	8003e1a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3360      	adds	r3, #96	; 0x60
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	58026000 	.word	0x58026000

08003e2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3360      	adds	r3, #96	; 0x60
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <LL_ADC_SetOffsetState+0x50>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d108      	bne.n	8003e60 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003e5e:	e007      	b.n	8003e70 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	601a      	str	r2, [r3, #0]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	58026000 	.word	0x58026000

08003e80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3330      	adds	r3, #48	; 0x30
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	4413      	add	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	211f      	movs	r1, #31
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0e9b      	lsrs	r3, r3, #26
 8003eb8:	f003 011f 	and.w	r1, r3, #31
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	0e5b      	lsrs	r3, r3, #25
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	4413      	add	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	0d1b      	lsrs	r3, r3, #20
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2107      	movs	r1, #7
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	0d1b      	lsrs	r3, r3, #20
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d115      	bne.n	8003f70 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f50:	43db      	mvns	r3, r3
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f003 0318 	and.w	r3, r3, #24
 8003f5a:	4914      	ldr	r1, [pc, #80]	; (8003fac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003f5c:	40d9      	lsrs	r1, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	400b      	ands	r3, r1
 8003f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003f6e:	e014      	b.n	8003f9a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0318 	and.w	r3, r3, #24
 8003f86:	4909      	ldr	r1, [pc, #36]	; (8003fac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003f88:	40d9      	lsrs	r1, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	400b      	ands	r3, r1
 8003f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	58026000 	.word	0x58026000
 8003fac:	000fffff 	.word	0x000fffff

08003fb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6093      	str	r3, [r2, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	5fffffc0 	.word	0x5fffffc0

08003fd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe8:	d101      	bne.n	8003fee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <LL_ADC_EnableInternalRegulator+0x24>)
 800400a:	4013      	ands	r3, r2
 800400c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	6fffffc0 	.word	0x6fffffc0

08004024 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004038:	d101      	bne.n	800403e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <LL_ADC_IsEnabled+0x18>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <LL_ADC_IsEnabled+0x1a>
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d101      	bne.n	800408a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d101      	bne.n	80040b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e1ee      	b.n	80044b8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fe fcb1 	bl	8002a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff67 	bl	8003fd4 <LL_ADC_IsDeepPowerDownEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff4d 	bl	8003fb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff82 	bl	8004024 <LL_ADC_IsInternalRegulatorEnabled>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff66 	bl	8003ffc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004130:	4b8e      	ldr	r3, [pc, #568]	; (800436c <HAL_ADC_Init+0x2ac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	4a8e      	ldr	r2, [pc, #568]	; (8004370 <HAL_ADC_Init+0x2b0>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	3301      	adds	r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004142:	e002      	b.n	800414a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff65 	bl	8004024 <LL_ADC_IsInternalRegulatorEnabled>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	f043 0210 	orr.w	r2, r3, #16
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff76 	bl	8004072 <LL_ADC_REG_IsConversionOngoing>
 8004186:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8188 	bne.w	80044a6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8184 	bne.w	80044a6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff4a 	bl	800404c <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d136      	bne.n	800422c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6c      	ldr	r2, [pc, #432]	; (8004374 <HAL_ADC_Init+0x2b4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_ADC_Init+0x112>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6a      	ldr	r2, [pc, #424]	; (8004378 <HAL_ADC_Init+0x2b8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10e      	bne.n	80041f0 <HAL_ADC_Init+0x130>
 80041d2:	4868      	ldr	r0, [pc, #416]	; (8004374 <HAL_ADC_Init+0x2b4>)
 80041d4:	f7ff ff3a 	bl	800404c <LL_ADC_IsEnabled>
 80041d8:	4604      	mov	r4, r0
 80041da:	4867      	ldr	r0, [pc, #412]	; (8004378 <HAL_ADC_Init+0x2b8>)
 80041dc:	f7ff ff36 	bl	800404c <LL_ADC_IsEnabled>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4323      	orrs	r3, r4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e008      	b.n	8004202 <HAL_ADC_Init+0x142>
 80041f0:	4862      	ldr	r0, [pc, #392]	; (800437c <HAL_ADC_Init+0x2bc>)
 80041f2:	f7ff ff2b 	bl	800404c <LL_ADC_IsEnabled>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a5a      	ldr	r2, [pc, #360]	; (8004374 <HAL_ADC_Init+0x2b4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_ADC_Init+0x15a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a58      	ldr	r2, [pc, #352]	; (8004378 <HAL_ADC_Init+0x2b8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_ADC_Init+0x15e>
 800421a:	4a59      	ldr	r2, [pc, #356]	; (8004380 <HAL_ADC_Init+0x2c0>)
 800421c:	e000      	b.n	8004220 <HAL_ADC_Init+0x160>
 800421e:	4a59      	ldr	r2, [pc, #356]	; (8004384 <HAL_ADC_Init+0x2c4>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7ff fd04 	bl	8003c34 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_ADC_Init+0x2bc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d129      	bne.n	800428a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7e5b      	ldrb	r3, [r3, #25]
 800423a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004240:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004246:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d013      	beq.n	8004278 <HAL_ADC_Init+0x1b8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d00d      	beq.n	8004274 <HAL_ADC_Init+0x1b4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b1c      	cmp	r3, #28
 800425e:	d007      	beq.n	8004270 <HAL_ADC_Init+0x1b0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b18      	cmp	r3, #24
 8004266:	d101      	bne.n	800426c <HAL_ADC_Init+0x1ac>
 8004268:	2318      	movs	r3, #24
 800426a:	e006      	b.n	800427a <HAL_ADC_Init+0x1ba>
 800426c:	2300      	movs	r3, #0
 800426e:	e004      	b.n	800427a <HAL_ADC_Init+0x1ba>
 8004270:	2310      	movs	r3, #16
 8004272:	e002      	b.n	800427a <HAL_ADC_Init+0x1ba>
 8004274:	2308      	movs	r3, #8
 8004276:	e000      	b.n	800427a <HAL_ADC_Init+0x1ba>
 8004278:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800427a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004282:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e00e      	b.n	80042a8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7e5b      	ldrb	r3, [r3, #25]
 800428e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004294:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800429a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d106      	bne.n	80042c0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	3b01      	subs	r3, #1
 80042b8:	045b      	lsls	r3, r3, #17
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a26      	ldr	r2, [pc, #152]	; (800437c <HAL_ADC_Init+0x2bc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d115      	bne.n	8004312 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_ADC_Init+0x2c8>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	430b      	orrs	r3, r1
 80042f8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	611a      	str	r2, [r3, #16]
 8004310:	e009      	b.n	8004326 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <HAL_ADC_Init+0x2cc>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fea1 	bl	8004072 <LL_ADC_REG_IsConversionOngoing>
 8004330:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff feae 	bl	8004098 <LL_ADC_INJ_IsConversionOngoing>
 800433c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 808e 	bne.w	8004462 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 808a 	bne.w	8004462 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a0a      	ldr	r2, [pc, #40]	; (800437c <HAL_ADC_Init+0x2bc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d11b      	bne.n	8004390 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7e1b      	ldrb	r3, [r3, #24]
 800435c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004364:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e018      	b.n	800439e <HAL_ADC_Init+0x2de>
 800436c:	24000000 	.word	0x24000000
 8004370:	053e2d63 	.word	0x053e2d63
 8004374:	40022000 	.word	0x40022000
 8004378:	40022100 	.word	0x40022100
 800437c:	58026000 	.word	0x58026000
 8004380:	40022300 	.word	0x40022300
 8004384:	58026300 	.word	0x58026300
 8004388:	fff04007 	.word	0xfff04007
 800438c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	7e1b      	ldrb	r3, [r3, #24]
 8004394:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b46      	ldr	r3, [pc, #280]	; (80044c0 <HAL_ADC_Init+0x400>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	69b9      	ldr	r1, [r7, #24]
 80043ae:	430b      	orrs	r3, r1
 80043b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d137      	bne.n	800442c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3f      	ldr	r2, [pc, #252]	; (80044c4 <HAL_ADC_Init+0x404>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d116      	bne.n	80043fa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <HAL_ADC_Init+0x408>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80043ea:	430a      	orrs	r2, r1
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	611a      	str	r2, [r3, #16]
 80043f8:	e020      	b.n	800443c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	4b32      	ldr	r3, [pc, #200]	; (80044cc <HAL_ADC_Init+0x40c>)
 8004402:	4013      	ands	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004408:	3a01      	subs	r2, #1
 800440a:	0411      	lsls	r1, r2, #16
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800441c:	430a      	orrs	r2, r1
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	611a      	str	r2, [r3, #16]
 800442a:	e007      	b.n	800443c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <HAL_ADC_Init+0x404>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d002      	beq.n	8004462 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fd63 	bl	8004f28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10c      	bne.n	8004484 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	f023 010f 	bic.w	r1, r3, #15
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
 8004482:	e007      	b.n	8004494 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 020f 	bic.w	r2, r2, #15
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004498:	f023 0303 	bic.w	r3, r3, #3
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60
 80044a4:	e007      	b.n	80044b6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	f043 0210 	orr.w	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3724      	adds	r7, #36	; 0x24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd90      	pop	{r4, r7, pc}
 80044c0:	ffffbffc 	.word	0xffffbffc
 80044c4:	58026000 	.word	0x58026000
 80044c8:	fc00f81f 	.word	0xfc00f81f
 80044cc:	fc00f81e 	.word	0xfc00f81e

080044d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b0b9      	sub	sp, #228	; 0xe4
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ea:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4aa9      	ldr	r2, [pc, #676]	; (8004798 <HAL_ADC_ConfigChannel+0x2c8>)
 80044f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x34>
 80044fe:	2302      	movs	r3, #2
 8004500:	f000 bcfa 	b.w	8004ef8 <HAL_ADC_ConfigChannel+0xa28>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fdae 	bl	8004072 <LL_ADC_REG_IsConversionOngoing>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	f040 84de 	bne.w	8004eda <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a9e      	ldr	r2, [pc, #632]	; (800479c <HAL_ADC_ConfigChannel+0x2cc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d033      	beq.n	8004590 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x76>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	e01d      	b.n	8004582 <HAL_ADC_ConfigChannel+0xb2>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800455a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800455e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800456a:	2320      	movs	r3, #32
 800456c:	e004      	b.n	8004578 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800456e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004572:	fab3 f383 	clz	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2201      	movs	r2, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	69d1      	ldr	r1, [r2, #28]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	430b      	orrs	r3, r1
 800458e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	f7ff fc6f 	bl	8003e80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fd63 	bl	8004072 <LL_ADC_REG_IsConversionOngoing>
 80045ac:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fd6f 	bl	8004098 <LL_ADC_INJ_IsConversionOngoing>
 80045ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 8270 	bne.w	8004aa8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 826b 	bne.w	8004aa8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7ff fc7a 	bl	8003ed8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a6c      	ldr	r2, [pc, #432]	; (800479c <HAL_ADC_ConfigChannel+0x2cc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10d      	bne.n	800460a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004608:	e032      	b.n	8004670 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800460a:	4b65      	ldr	r3, [pc, #404]	; (80047a0 <HAL_ADC_ConfigChannel+0x2d0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004616:	d10b      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x160>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	089b      	lsrs	r3, r3, #2
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	e01d      	b.n	800466c <HAL_ADC_ConfigChannel+0x19c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x186>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	e00a      	b.n	800466c <HAL_ADC_ConfigChannel+0x19c>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d048      	beq.n	800470a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6919      	ldr	r1, [r3, #16]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004688:	f7ff fb08 	bl	8003c9c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_ADC_ConfigChannel+0x2cc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d119      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6919      	ldr	r1, [r3, #16]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f7ff fba0 	bl	8003de8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6919      	ldr	r1, [r3, #16]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x1f0>
 80046ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046be:	e000      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x1f2>
 80046c0:	2300      	movs	r3, #0
 80046c2:	461a      	mov	r2, r3
 80046c4:	f7ff fb6e 	bl	8003da4 <LL_ADC_SetOffsetSaturation>
 80046c8:	e1ee      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d102      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x212>
 80046dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046e0:	e000      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x214>
 80046e2:	2300      	movs	r3, #0
 80046e4:	461a      	mov	r2, r3
 80046e6:	f7ff fb3b 	bl	8003d60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6919      	ldr	r1, [r3, #16]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	7e1b      	ldrb	r3, [r3, #24]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d102      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x230>
 80046fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046fe:	e000      	b.n	8004702 <HAL_ADC_ConfigChannel+0x232>
 8004700:	2300      	movs	r3, #0
 8004702:	461a      	mov	r2, r3
 8004704:	f7ff fb12 	bl	8003d2c <LL_ADC_SetDataRightShift>
 8004708:	e1ce      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_ADC_ConfigChannel+0x2cc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	f040 8181 	bne.w	8004a18 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff faef 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x272>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fae4 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	f003 021f 	and.w	r2, r3, #31
 8004740:	e01e      	b.n	8004780 <HAL_ADC_ConfigChannel+0x2b0>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fad9 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004768:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e004      	b.n	800477e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004774:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x2d4>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	e01e      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x306>
 8004798:	47ff0000 	.word	0x47ff0000
 800479c:	58026000 	.word	0x58026000
 80047a0:	5c001000 	.word	0x5c001000
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80047b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80047c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e004      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80047cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047d0:	fab3 f383 	clz	r3, r3
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d106      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fb22 	bl	8003e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fa86 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x344>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2101      	movs	r1, #1
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fa7b 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	0e9b      	lsrs	r3, r3, #26
 800480e:	f003 021f 	and.w	r2, r3, #31
 8004812:	e01e      	b.n	8004852 <HAL_ADC_ConfigChannel+0x382>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fa70 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 8004820:	4603      	mov	r3, r0
 8004822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800483a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004842:	2320      	movs	r3, #32
 8004844:	e004      	b.n	8004850 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800485a:	2b00      	cmp	r3, #0
 800485c:	d105      	bne.n	800486a <HAL_ADC_ConfigChannel+0x39a>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	0e9b      	lsrs	r3, r3, #26
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	e018      	b.n	800489c <HAL_ADC_ConfigChannel+0x3cc>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800487e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e004      	b.n	800489c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	429a      	cmp	r2, r3
 800489e:	d106      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fabf 	bl	8003e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fa23 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <HAL_ADC_ConfigChannel+0x40a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fa18 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 80048d0:	4603      	mov	r3, r0
 80048d2:	0e9b      	lsrs	r3, r3, #26
 80048d4:	f003 021f 	and.w	r2, r3, #31
 80048d8:	e01e      	b.n	8004918 <HAL_ADC_ConfigChannel+0x448>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2102      	movs	r1, #2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fa0d 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80048f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004908:	2320      	movs	r3, #32
 800490a:	e004      	b.n	8004916 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800490c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x460>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	e014      	b.n	800495a <HAL_ADC_ConfigChannel+0x48a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004938:	fa93 f3a3 	rbit	r3, r3
 800493c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800493e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800494c:	2320      	movs	r3, #32
 800494e:	e004      	b.n	800495a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004954:	fab3 f383 	clz	r3, r3
 8004958:	b2db      	uxtb	r3, r3
 800495a:	429a      	cmp	r2, r3
 800495c:	d106      	bne.n	800496c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fa60 	bl	8003e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2103      	movs	r1, #3
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff f9c4 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 8004978:	4603      	mov	r3, r0
 800497a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x4c8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2103      	movs	r1, #3
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff f9b9 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 800498e:	4603      	mov	r3, r0
 8004990:	0e9b      	lsrs	r3, r3, #26
 8004992:	f003 021f 	and.w	r2, r3, #31
 8004996:	e017      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x4f8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2103      	movs	r1, #3
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f9ae 	bl	8003d00 <LL_ADC_GetOffsetChannel>
 80049a4:	4603      	mov	r3, r0
 80049a6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80049b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80049b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e003      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80049be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x510>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0e9b      	lsrs	r3, r3, #26
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	e011      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x534>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80049ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049f0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80049f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e003      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80049fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d14f      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2103      	movs	r1, #3
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fa0b 	bl	8003e2c <LL_ADC_SetOffsetState>
 8004a16:	e047      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	069b      	lsls	r3, r3, #26
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	069b      	lsls	r3, r3, #26
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d107      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a5e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	069b      	lsls	r3, r3, #26
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d107      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a82:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	069b      	lsls	r3, r3, #26
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d107      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004aa6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff facd 	bl	800404c <LL_ADC_IsEnabled>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 8219 	bne.w	8004eec <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f7ff fa32 	bl	8003f30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4aa1      	ldr	r2, [pc, #644]	; (8004d58 <HAL_ADC_ConfigChannel+0x888>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	f040 812e 	bne.w	8004d34 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x630>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	0e9b      	lsrs	r3, r3, #26
 8004aee:	3301      	adds	r3, #1
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2b09      	cmp	r3, #9
 8004af6:	bf94      	ite	ls
 8004af8:	2301      	movls	r3, #1
 8004afa:	2300      	movhi	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e019      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x664>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004b18:	2320      	movs	r3, #32
 8004b1a:	e003      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	fab3 f383 	clz	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2b09      	cmp	r3, #9
 8004b2c:	bf94      	ite	ls
 8004b2e:	2301      	movls	r3, #1
 8004b30:	2300      	movhi	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d079      	beq.n	8004c2c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d107      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x684>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e9b      	lsrs	r3, r3, #26
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	069b      	lsls	r3, r3, #26
 8004b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b52:	e015      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x6b0>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5c:	fa93 f3a3 	rbit	r3, r3
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b64:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	e003      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	069b      	lsls	r3, r3, #26
 8004b7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x6d0>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	0e9b      	lsrs	r3, r3, #26
 8004b92:	3301      	adds	r3, #1
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	e017      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x700>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e003      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd0:	ea42 0103 	orr.w	r1, r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x726>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	0e9b      	lsrs	r3, r3, #26
 8004be6:	3301      	adds	r3, #1
 8004be8:	f003 021f 	and.w	r2, r3, #31
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	051b      	lsls	r3, r3, #20
 8004bf4:	e018      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x758>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004c0e:	2320      	movs	r3, #32
 8004c10:	e003      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f003 021f 	and.w	r2, r3, #31
 8004c20:	4613      	mov	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	e07e      	b.n	8004d2a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x778>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	3301      	adds	r3, #1
 8004c40:	069b      	lsls	r3, r3, #26
 8004c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c46:	e015      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x7a4>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004c60:	2320      	movs	r3, #32
 8004c62:	e003      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	fab3 f383 	clz	r3, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	069b      	lsls	r3, r3, #26
 8004c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x7c4>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	0e9b      	lsrs	r3, r3, #26
 8004c86:	3301      	adds	r3, #1
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	e017      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x7f4>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	fa93 f3a3 	rbit	r3, r3
 8004ca0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004cac:	2320      	movs	r3, #32
 8004cae:	e003      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	ea42 0103 	orr.w	r1, r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x820>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	0e9b      	lsrs	r3, r3, #26
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f003 021f 	and.w	r2, r3, #31
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3b1e      	subs	r3, #30
 8004ce8:	051b      	lsls	r3, r3, #20
 8004cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cee:	e01b      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x858>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	60fb      	str	r3, [r7, #12]
  return result;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004d08:	2320      	movs	r3, #32
 8004d0a:	e003      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f003 021f 	and.w	r2, r3, #31
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4413      	add	r3, r2
 8004d20:	3b1e      	subs	r3, #30
 8004d22:	051b      	lsls	r3, r3, #20
 8004d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	6892      	ldr	r2, [r2, #8]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f7ff f8d2 	bl	8003ed8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f280 80d7 	bge.w	8004eec <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <HAL_ADC_ConfigChannel+0x88c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_ADC_ConfigChannel+0x882>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <HAL_ADC_ConfigChannel+0x890>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10a      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x898>
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_ADC_ConfigChannel+0x894>)
 8004d54:	e009      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x89a>
 8004d56:	bf00      	nop
 8004d58:	47ff0000 	.word	0x47ff0000
 8004d5c:	40022000 	.word	0x40022000
 8004d60:	40022100 	.word	0x40022100
 8004d64:	40022300 	.word	0x40022300
 8004d68:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <HAL_ADC_ConfigChannel+0xa30>)
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe ff88 	bl	8003c80 <LL_ADC_GetCommonPathInternalCh>
 8004d70:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a62      	ldr	r2, [pc, #392]	; (8004f04 <HAL_ADC_ConfigChannel+0xa34>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_ADC_ConfigChannel+0x8b8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a61      	ldr	r2, [pc, #388]	; (8004f08 <HAL_ADC_ConfigChannel+0xa38>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10e      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x8d6>
 8004d88:	485e      	ldr	r0, [pc, #376]	; (8004f04 <HAL_ADC_ConfigChannel+0xa34>)
 8004d8a:	f7ff f95f 	bl	800404c <LL_ADC_IsEnabled>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	485d      	ldr	r0, [pc, #372]	; (8004f08 <HAL_ADC_ConfigChannel+0xa38>)
 8004d92:	f7ff f95b 	bl	800404c <LL_ADC_IsEnabled>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4323      	orrs	r3, r4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	2300      	movne	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	e008      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x8e8>
 8004da6:	4859      	ldr	r0, [pc, #356]	; (8004f0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004da8:	f7ff f950 	bl	800404c <LL_ADC_IsEnabled>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8084 	beq.w	8004ec6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a53      	ldr	r2, [pc, #332]	; (8004f10 <HAL_ADC_ConfigChannel+0xa40>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d132      	bne.n	8004e2e <HAL_ADC_ConfigChannel+0x95e>
 8004dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d12c      	bne.n	8004e2e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a4c      	ldr	r2, [pc, #304]	; (8004f0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	f040 8086 	bne.w	8004eec <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a47      	ldr	r2, [pc, #284]	; (8004f04 <HAL_ADC_ConfigChannel+0xa34>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_ADC_ConfigChannel+0x924>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a46      	ldr	r2, [pc, #280]	; (8004f08 <HAL_ADC_ConfigChannel+0xa38>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x928>
 8004df4:	4a47      	ldr	r2, [pc, #284]	; (8004f14 <HAL_ADC_ConfigChannel+0xa44>)
 8004df6:	e000      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x92a>
 8004df8:	4a41      	ldr	r2, [pc, #260]	; (8004f00 <HAL_ADC_ConfigChannel+0xa30>)
 8004dfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7fe ff28 	bl	8003c5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e0a:	4b43      	ldr	r3, [pc, #268]	; (8004f18 <HAL_ADC_ConfigChannel+0xa48>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	4a42      	ldr	r2, [pc, #264]	; (8004f1c <HAL_ADC_ConfigChannel+0xa4c>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	3301      	adds	r3, #1
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e1e:	e002      	b.n	8004e26 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f9      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e2c:	e05e      	b.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a3b      	ldr	r2, [pc, #236]	; (8004f20 <HAL_ADC_ConfigChannel+0xa50>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d120      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x9aa>
 8004e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11a      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a30      	ldr	r2, [pc, #192]	; (8004f0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d14e      	bne.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <HAL_ADC_ConfigChannel+0xa34>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <HAL_ADC_ConfigChannel+0x992>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <HAL_ADC_ConfigChannel+0xa38>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d101      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x996>
 8004e62:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <HAL_ADC_ConfigChannel+0xa44>)
 8004e64:	e000      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x998>
 8004e66:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <HAL_ADC_ConfigChannel+0xa30>)
 8004e68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7fe fef1 	bl	8003c5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e78:	e038      	b.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <HAL_ADC_ConfigChannel+0xa54>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d133      	bne.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
 8004e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d12d      	bne.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d128      	bne.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <HAL_ADC_ConfigChannel+0xa34>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_ADC_ConfigChannel+0x9de>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <HAL_ADC_ConfigChannel+0xa38>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x9e2>
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_ADC_ConfigChannel+0xa44>)
 8004eb0:	e000      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x9e4>
 8004eb2:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <HAL_ADC_ConfigChannel+0xa30>)
 8004eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7fe fecb 	bl	8003c5a <LL_ADC_SetCommonPathInternalCh>
 8004ec4:	e012      	b.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004ed8:	e008      	b.n	8004eec <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	f043 0220 	orr.w	r2, r3, #32
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ef4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	37e4      	adds	r7, #228	; 0xe4
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd90      	pop	{r4, r7, pc}
 8004f00:	58026300 	.word	0x58026300
 8004f04:	40022000 	.word	0x40022000
 8004f08:	40022100 	.word	0x40022100
 8004f0c:	58026000 	.word	0x58026000
 8004f10:	c7520000 	.word	0xc7520000
 8004f14:	40022300 	.word	0x40022300
 8004f18:	24000000 	.word	0x24000000
 8004f1c:	053e2d63 	.word	0x053e2d63
 8004f20:	c3210000 	.word	0xc3210000
 8004f24:	cb840000 	.word	0xcb840000

08004f28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a6c      	ldr	r2, [pc, #432]	; (80050e8 <ADC_ConfigureBoostMode+0x1c0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <ADC_ConfigureBoostMode+0x1c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a6b      	ldr	r2, [pc, #428]	; (80050ec <ADC_ConfigureBoostMode+0x1c4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d109      	bne.n	8004f58 <ADC_ConfigureBoostMode+0x30>
 8004f44:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <ADC_ConfigureBoostMode+0x1c8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e008      	b.n	8004f6a <ADC_ConfigureBoostMode+0x42>
 8004f58:	4b66      	ldr	r3, [pc, #408]	; (80050f4 <ADC_ConfigureBoostMode+0x1cc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f6e:	f005 fcab 	bl	800a8c8 <HAL_RCC_GetHCLKFreq>
 8004f72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f7c:	d010      	beq.n	8004fa0 <ADC_ConfigureBoostMode+0x78>
 8004f7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f82:	d873      	bhi.n	800506c <ADC_ConfigureBoostMode+0x144>
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d002      	beq.n	8004f90 <ADC_ConfigureBoostMode+0x68>
 8004f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f8e:	d16d      	bne.n	800506c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	60fb      	str	r3, [r7, #12]
        break;
 8004f9e:	e068      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	60fb      	str	r3, [r7, #12]
        break;
 8004fa6:	e064      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004fa8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	f006 fe86 	bl	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fb4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004fbe:	d051      	beq.n	8005064 <ADC_ConfigureBoostMode+0x13c>
 8004fc0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004fc4:	d854      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 8004fc6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004fca:	d047      	beq.n	800505c <ADC_ConfigureBoostMode+0x134>
 8004fcc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004fd0:	d84e      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 8004fd2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fd6:	d03d      	beq.n	8005054 <ADC_ConfigureBoostMode+0x12c>
 8004fd8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fdc:	d848      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 8004fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fe2:	d033      	beq.n	800504c <ADC_ConfigureBoostMode+0x124>
 8004fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fe8:	d842      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 8004fea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fee:	d029      	beq.n	8005044 <ADC_ConfigureBoostMode+0x11c>
 8004ff0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ff4:	d83c      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 8004ff6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ffa:	d01a      	beq.n	8005032 <ADC_ConfigureBoostMode+0x10a>
 8004ffc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005000:	d836      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 8005002:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005006:	d014      	beq.n	8005032 <ADC_ConfigureBoostMode+0x10a>
 8005008:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800500c:	d830      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d00e      	beq.n	8005032 <ADC_ConfigureBoostMode+0x10a>
 8005014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005018:	d82a      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 800501a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800501e:	d008      	beq.n	8005032 <ADC_ConfigureBoostMode+0x10a>
 8005020:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005024:	d824      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x148>
 8005026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800502a:	d002      	beq.n	8005032 <ADC_ConfigureBoostMode+0x10a>
 800502c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005030:	d11e      	bne.n	8005070 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	0c9b      	lsrs	r3, r3, #18
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	60fb      	str	r3, [r7, #12]
        break;
 8005042:	e016      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	60fb      	str	r3, [r7, #12]
        break;
 800504a:	e012      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	60fb      	str	r3, [r7, #12]
        break;
 8005052:	e00e      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	60fb      	str	r3, [r7, #12]
        break;
 800505a:	e00a      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	09db      	lsrs	r3, r3, #7
 8005060:	60fb      	str	r3, [r7, #12]
        break;
 8005062:	e006      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	60fb      	str	r3, [r7, #12]
        break;
 800506a:	e002      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
        break;
 800506c:	bf00      	nop
 800506e:	e000      	b.n	8005072 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005070:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <ADC_ConfigureBoostMode+0x1d0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d808      	bhi.n	8005092 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800508e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005090:	e025      	b.n	80050de <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <ADC_ConfigureBoostMode+0x1d4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d80a      	bhi.n	80050b0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ac:	609a      	str	r2, [r3, #8]
}
 80050ae:	e016      	b.n	80050de <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <ADC_ConfigureBoostMode+0x1d8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d80a      	bhi.n	80050ce <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	e007      	b.n	80050de <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80050dc:	609a      	str	r2, [r3, #8]
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40022000 	.word	0x40022000
 80050ec:	40022100 	.word	0x40022100
 80050f0:	40022300 	.word	0x40022300
 80050f4:	58026300 	.word	0x58026300
 80050f8:	005f5e10 	.word	0x005f5e10
 80050fc:	00bebc20 	.word	0x00bebc20
 8005100:	017d7840 	.word	0x017d7840

08005104 <LL_ADC_IsEnabled>:
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <LL_ADC_IsEnabled+0x18>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <LL_ADC_IsEnabled+0x1a>
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_ADC_REG_IsConversionOngoing>:
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d101      	bne.n	8005142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b0a3      	sub	sp, #140	; 0x8c
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800516a:	2302      	movs	r3, #2
 800516c:	e0c1      	b.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800517a:	2300      	movs	r3, #0
 800517c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a5e      	ldr	r2, [pc, #376]	; (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d102      	bne.n	800518e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005188:	4b5d      	ldr	r3, [pc, #372]	; (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e001      	b.n	8005192 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0a0      	b.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ffb9 	bl	800512a <LL_ADC_REG_IsConversionOngoing>
 80051b8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ffb2 	bl	800512a <LL_ADC_REG_IsConversionOngoing>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 8081 	bne.w	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80051ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d17c      	bne.n	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a48      	ldr	r2, [pc, #288]	; (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a46      	ldr	r2, [pc, #280]	; (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80051ea:	4b46      	ldr	r3, [pc, #280]	; (8005304 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051ec:	e000      	b.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80051ee:	4b46      	ldr	r3, [pc, #280]	; (8005308 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051f0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d039      	beq.n	800526e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80051fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	431a      	orrs	r2, r3
 8005208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800520a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a39      	ldr	r2, [pc, #228]	; (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10e      	bne.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005220:	4836      	ldr	r0, [pc, #216]	; (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005222:	f7ff ff6f 	bl	8005104 <LL_ADC_IsEnabled>
 8005226:	4604      	mov	r4, r0
 8005228:	4835      	ldr	r0, [pc, #212]	; (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800522a:	f7ff ff6b 	bl	8005104 <LL_ADC_IsEnabled>
 800522e:	4603      	mov	r3, r0
 8005230:	4323      	orrs	r3, r4
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e008      	b.n	8005250 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800523e:	4833      	ldr	r0, [pc, #204]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005240:	f7ff ff60 	bl	8005104 <LL_ADC_IsEnabled>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d047      	beq.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	4b2d      	ldr	r3, [pc, #180]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800525a:	4013      	ands	r3, r2
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	6811      	ldr	r1, [r2, #0]
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	6892      	ldr	r2, [r2, #8]
 8005264:	430a      	orrs	r2, r1
 8005266:	431a      	orrs	r2, r3
 8005268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800526a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800526c:	e03a      	b.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800526e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005278:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d10e      	bne.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800528e:	481b      	ldr	r0, [pc, #108]	; (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005290:	f7ff ff38 	bl	8005104 <LL_ADC_IsEnabled>
 8005294:	4604      	mov	r4, r0
 8005296:	481a      	ldr	r0, [pc, #104]	; (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005298:	f7ff ff34 	bl	8005104 <LL_ADC_IsEnabled>
 800529c:	4603      	mov	r3, r0
 800529e:	4323      	orrs	r3, r4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e008      	b.n	80052be <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80052ac:	4817      	ldr	r0, [pc, #92]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80052ae:	f7ff ff29 	bl	8005104 <LL_ADC_IsEnabled>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80052cc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052ce:	e009      	b.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80052e2:	e000      	b.n	80052e6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80052ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	378c      	adds	r7, #140	; 0x8c
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd90      	pop	{r4, r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40022000 	.word	0x40022000
 8005300:	40022100 	.word	0x40022100
 8005304:	40022300 	.word	0x40022300
 8005308:	58026300 	.word	0x58026300
 800530c:	58026000 	.word	0x58026000
 8005310:	fffff0e0 	.word	0xfffff0e0

08005314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <__NVIC_SetPriorityGrouping+0x40>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005330:	4013      	ands	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <__NVIC_SetPriorityGrouping+0x44>)
 800533e:	4313      	orrs	r3, r2
 8005340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005342:	4a04      	ldr	r2, [pc, #16]	; (8005354 <__NVIC_SetPriorityGrouping+0x40>)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	60d3      	str	r3, [r2, #12]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	e000ed00 	.word	0xe000ed00
 8005358:	05fa0000 	.word	0x05fa0000

0800535c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <__NVIC_GetPriorityGrouping+0x18>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	f003 0307 	and.w	r3, r3, #7
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005386:	2b00      	cmp	r3, #0
 8005388:	db0b      	blt.n	80053a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	4907      	ldr	r1, [pc, #28]	; (80053b0 <__NVIC_EnableIRQ+0x38>)
 8005392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2001      	movs	r0, #1
 800539a:	fa00 f202 	lsl.w	r2, r0, r2
 800539e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e100 	.word	0xe000e100

080053b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	6039      	str	r1, [r7, #0]
 80053be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db0a      	blt.n	80053de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	490c      	ldr	r1, [pc, #48]	; (8005400 <__NVIC_SetPriority+0x4c>)
 80053ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d2:	0112      	lsls	r2, r2, #4
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	440b      	add	r3, r1
 80053d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053dc:	e00a      	b.n	80053f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	4908      	ldr	r1, [pc, #32]	; (8005404 <__NVIC_SetPriority+0x50>)
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	3b04      	subs	r3, #4
 80053ec:	0112      	lsls	r2, r2, #4
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	440b      	add	r3, r1
 80053f2:	761a      	strb	r2, [r3, #24]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	e000e100 	.word	0xe000e100
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f1c3 0307 	rsb	r3, r3, #7
 8005422:	2b04      	cmp	r3, #4
 8005424:	bf28      	it	cs
 8005426:	2304      	movcs	r3, #4
 8005428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3304      	adds	r3, #4
 800542e:	2b06      	cmp	r3, #6
 8005430:	d902      	bls.n	8005438 <NVIC_EncodePriority+0x30>
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3b03      	subs	r3, #3
 8005436:	e000      	b.n	800543a <NVIC_EncodePriority+0x32>
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43da      	mvns	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	401a      	ands	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005450:	f04f 31ff 	mov.w	r1, #4294967295
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	43d9      	mvns	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005460:	4313      	orrs	r3, r2
         );
}
 8005462:	4618      	mov	r0, r3
 8005464:	3724      	adds	r7, #36	; 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005480:	d301      	bcc.n	8005486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005482:	2301      	movs	r3, #1
 8005484:	e00f      	b.n	80054a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005486:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <SysTick_Config+0x40>)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3b01      	subs	r3, #1
 800548c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800548e:	210f      	movs	r1, #15
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	f7ff ff8e 	bl	80053b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <SysTick_Config+0x40>)
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800549e:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <SysTick_Config+0x40>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000e010 	.word	0xe000e010

080054b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff29 	bl	8005314 <__NVIC_SetPriorityGrouping>
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054d8:	f7ff ff40 	bl	800535c <__NVIC_GetPriorityGrouping>
 80054dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7ff ff90 	bl	8005408 <NVIC_EncodePriority>
 80054e8:	4602      	mov	r2, r0
 80054ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff ff5f 	bl	80053b4 <__NVIC_SetPriority>
}
 80054f6:	bf00      	nop
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	4603      	mov	r3, r0
 8005506:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ff33 	bl	8005378 <__NVIC_EnableIRQ>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff ffa4 	bl	8005470 <SysTick_Config>
 8005528:	4603      	mov	r3, r0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800553c:	f7fe fb34 	bl	8003ba8 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e312      	b.n	8005b72 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a66      	ldr	r2, [pc, #408]	; (80056ec <HAL_DMA_Init+0x1b8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d04a      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_DMA_Init+0x1bc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d045      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a63      	ldr	r2, [pc, #396]	; (80056f4 <HAL_DMA_Init+0x1c0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d040      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a62      	ldr	r2, [pc, #392]	; (80056f8 <HAL_DMA_Init+0x1c4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d03b      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a60      	ldr	r2, [pc, #384]	; (80056fc <HAL_DMA_Init+0x1c8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d036      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a5f      	ldr	r2, [pc, #380]	; (8005700 <HAL_DMA_Init+0x1cc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d031      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a5d      	ldr	r2, [pc, #372]	; (8005704 <HAL_DMA_Init+0x1d0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02c      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a5c      	ldr	r2, [pc, #368]	; (8005708 <HAL_DMA_Init+0x1d4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d027      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a5a      	ldr	r2, [pc, #360]	; (800570c <HAL_DMA_Init+0x1d8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a59      	ldr	r2, [pc, #356]	; (8005710 <HAL_DMA_Init+0x1dc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d01d      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a57      	ldr	r2, [pc, #348]	; (8005714 <HAL_DMA_Init+0x1e0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a56      	ldr	r2, [pc, #344]	; (8005718 <HAL_DMA_Init+0x1e4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a54      	ldr	r2, [pc, #336]	; (800571c <HAL_DMA_Init+0x1e8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a53      	ldr	r2, [pc, #332]	; (8005720 <HAL_DMA_Init+0x1ec>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a51      	ldr	r2, [pc, #324]	; (8005724 <HAL_DMA_Init+0x1f0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_DMA_Init+0xb8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a50      	ldr	r2, [pc, #320]	; (8005728 <HAL_DMA_Init+0x1f4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d101      	bne.n	80055f0 <HAL_DMA_Init+0xbc>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_DMA_Init+0xbe>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 813c 	beq.w	8005870 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a37      	ldr	r2, [pc, #220]	; (80056ec <HAL_DMA_Init+0x1b8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d04a      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a36      	ldr	r2, [pc, #216]	; (80056f0 <HAL_DMA_Init+0x1bc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d045      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a34      	ldr	r2, [pc, #208]	; (80056f4 <HAL_DMA_Init+0x1c0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d040      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a33      	ldr	r2, [pc, #204]	; (80056f8 <HAL_DMA_Init+0x1c4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d03b      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a31      	ldr	r2, [pc, #196]	; (80056fc <HAL_DMA_Init+0x1c8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d036      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a30      	ldr	r2, [pc, #192]	; (8005700 <HAL_DMA_Init+0x1cc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d031      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <HAL_DMA_Init+0x1d0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d02c      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <HAL_DMA_Init+0x1d4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d027      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2b      	ldr	r2, [pc, #172]	; (800570c <HAL_DMA_Init+0x1d8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d022      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a2a      	ldr	r2, [pc, #168]	; (8005710 <HAL_DMA_Init+0x1dc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d01d      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a28      	ldr	r2, [pc, #160]	; (8005714 <HAL_DMA_Init+0x1e0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d018      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a27      	ldr	r2, [pc, #156]	; (8005718 <HAL_DMA_Init+0x1e4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d013      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <HAL_DMA_Init+0x1e8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00e      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a24      	ldr	r2, [pc, #144]	; (8005720 <HAL_DMA_Init+0x1ec>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d009      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a22      	ldr	r2, [pc, #136]	; (8005724 <HAL_DMA_Init+0x1f0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_DMA_Init+0x174>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a21      	ldr	r2, [pc, #132]	; (8005728 <HAL_DMA_Init+0x1f4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d108      	bne.n	80056ba <HAL_DMA_Init+0x186>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	e007      	b.n	80056ca <HAL_DMA_Init+0x196>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056ca:	e02f      	b.n	800572c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056cc:	f7fe fa6c 	bl	8003ba8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	d928      	bls.n	800572c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2203      	movs	r2, #3
 80056e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e242      	b.n	8005b72 <HAL_DMA_Init+0x63e>
 80056ec:	40020010 	.word	0x40020010
 80056f0:	40020028 	.word	0x40020028
 80056f4:	40020040 	.word	0x40020040
 80056f8:	40020058 	.word	0x40020058
 80056fc:	40020070 	.word	0x40020070
 8005700:	40020088 	.word	0x40020088
 8005704:	400200a0 	.word	0x400200a0
 8005708:	400200b8 	.word	0x400200b8
 800570c:	40020410 	.word	0x40020410
 8005710:	40020428 	.word	0x40020428
 8005714:	40020440 	.word	0x40020440
 8005718:	40020458 	.word	0x40020458
 800571c:	40020470 	.word	0x40020470
 8005720:	40020488 	.word	0x40020488
 8005724:	400204a0 	.word	0x400204a0
 8005728:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1c8      	bne.n	80056cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4b83      	ldr	r3, [pc, #524]	; (8005954 <HAL_DMA_Init+0x420>)
 8005746:	4013      	ands	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005752:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800575e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800576a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b04      	cmp	r3, #4
 800577e:	d107      	bne.n	8005790 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	4313      	orrs	r3, r2
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b28      	cmp	r3, #40	; 0x28
 8005796:	d903      	bls.n	80057a0 <HAL_DMA_Init+0x26c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b2e      	cmp	r3, #46	; 0x2e
 800579e:	d91f      	bls.n	80057e0 <HAL_DMA_Init+0x2ac>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b3e      	cmp	r3, #62	; 0x3e
 80057a6:	d903      	bls.n	80057b0 <HAL_DMA_Init+0x27c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b42      	cmp	r3, #66	; 0x42
 80057ae:	d917      	bls.n	80057e0 <HAL_DMA_Init+0x2ac>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b46      	cmp	r3, #70	; 0x46
 80057b6:	d903      	bls.n	80057c0 <HAL_DMA_Init+0x28c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b48      	cmp	r3, #72	; 0x48
 80057be:	d90f      	bls.n	80057e0 <HAL_DMA_Init+0x2ac>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b4e      	cmp	r3, #78	; 0x4e
 80057c6:	d903      	bls.n	80057d0 <HAL_DMA_Init+0x29c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b52      	cmp	r3, #82	; 0x52
 80057ce:	d907      	bls.n	80057e0 <HAL_DMA_Init+0x2ac>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b73      	cmp	r3, #115	; 0x73
 80057d6:	d905      	bls.n	80057e4 <HAL_DMA_Init+0x2b0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b77      	cmp	r3, #119	; 0x77
 80057de:	d801      	bhi.n	80057e4 <HAL_DMA_Init+0x2b0>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <HAL_DMA_Init+0x2b2>
 80057e4:	2300      	movs	r3, #0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	2b04      	cmp	r3, #4
 800581a:	d117      	bne.n	800584c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 fdca 	bl	80073c8 <DMA_CheckFifoParam>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e192      	b.n	8005b72 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fd05 	bl	8007264 <DMA_CalcBaseAndBitshift>
 800585a:	4603      	mov	r3, r0
 800585c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	223f      	movs	r2, #63	; 0x3f
 8005868:	409a      	lsls	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	609a      	str	r2, [r3, #8]
 800586e:	e0c8      	b.n	8005a02 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a38      	ldr	r2, [pc, #224]	; (8005958 <HAL_DMA_Init+0x424>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d022      	beq.n	80058c0 <HAL_DMA_Init+0x38c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a37      	ldr	r2, [pc, #220]	; (800595c <HAL_DMA_Init+0x428>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d01d      	beq.n	80058c0 <HAL_DMA_Init+0x38c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a35      	ldr	r2, [pc, #212]	; (8005960 <HAL_DMA_Init+0x42c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_DMA_Init+0x38c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a34      	ldr	r2, [pc, #208]	; (8005964 <HAL_DMA_Init+0x430>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_DMA_Init+0x38c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a32      	ldr	r2, [pc, #200]	; (8005968 <HAL_DMA_Init+0x434>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_DMA_Init+0x38c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a31      	ldr	r2, [pc, #196]	; (800596c <HAL_DMA_Init+0x438>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_DMA_Init+0x38c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <HAL_DMA_Init+0x43c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_DMA_Init+0x38c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2e      	ldr	r2, [pc, #184]	; (8005974 <HAL_DMA_Init+0x440>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d101      	bne.n	80058c4 <HAL_DMA_Init+0x390>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_DMA_Init+0x392>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8092 	beq.w	80059f0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a21      	ldr	r2, [pc, #132]	; (8005958 <HAL_DMA_Init+0x424>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d021      	beq.n	800591a <HAL_DMA_Init+0x3e6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <HAL_DMA_Init+0x428>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d01c      	beq.n	800591a <HAL_DMA_Init+0x3e6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <HAL_DMA_Init+0x42c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d017      	beq.n	800591a <HAL_DMA_Init+0x3e6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <HAL_DMA_Init+0x430>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d012      	beq.n	800591a <HAL_DMA_Init+0x3e6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <HAL_DMA_Init+0x434>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00d      	beq.n	800591a <HAL_DMA_Init+0x3e6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1a      	ldr	r2, [pc, #104]	; (800596c <HAL_DMA_Init+0x438>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d008      	beq.n	800591a <HAL_DMA_Init+0x3e6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a18      	ldr	r2, [pc, #96]	; (8005970 <HAL_DMA_Init+0x43c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <HAL_DMA_Init+0x3e6>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a17      	ldr	r2, [pc, #92]	; (8005974 <HAL_DMA_Init+0x440>)
 8005918:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4b10      	ldr	r3, [pc, #64]	; (8005978 <HAL_DMA_Init+0x444>)
 8005936:	4013      	ands	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d01c      	beq.n	800597c <HAL_DMA_Init+0x448>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d102      	bne.n	8005950 <HAL_DMA_Init+0x41c>
 800594a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800594e:	e016      	b.n	800597e <HAL_DMA_Init+0x44a>
 8005950:	2300      	movs	r3, #0
 8005952:	e014      	b.n	800597e <HAL_DMA_Init+0x44a>
 8005954:	fe10803f 	.word	0xfe10803f
 8005958:	58025408 	.word	0x58025408
 800595c:	5802541c 	.word	0x5802541c
 8005960:	58025430 	.word	0x58025430
 8005964:	58025444 	.word	0x58025444
 8005968:	58025458 	.word	0x58025458
 800596c:	5802546c 	.word	0x5802546c
 8005970:	58025480 	.word	0x58025480
 8005974:	58025494 	.word	0x58025494
 8005978:	fffe000f 	.word	0xfffe000f
 800597c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68d2      	ldr	r2, [r2, #12]
 8005982:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800598c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800599c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b6e      	ldr	r3, [pc, #440]	; (8005b7c <HAL_DMA_Init+0x648>)
 80059c4:	4413      	add	r3, r2
 80059c6:	4a6e      	ldr	r2, [pc, #440]	; (8005b80 <HAL_DMA_Init+0x64c>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	009a      	lsls	r2, r3, #2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 fc45 	bl	8007264 <DMA_CalcBaseAndBitshift>
 80059da:	4603      	mov	r3, r0
 80059dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2201      	movs	r2, #1
 80059e8:	409a      	lsls	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	e008      	b.n	8005a02 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2240      	movs	r2, #64	; 0x40
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2203      	movs	r2, #3
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0b7      	b.n	8005b72 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5f      	ldr	r2, [pc, #380]	; (8005b84 <HAL_DMA_Init+0x650>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d072      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a5d      	ldr	r2, [pc, #372]	; (8005b88 <HAL_DMA_Init+0x654>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d06d      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a5c      	ldr	r2, [pc, #368]	; (8005b8c <HAL_DMA_Init+0x658>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d068      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5a      	ldr	r2, [pc, #360]	; (8005b90 <HAL_DMA_Init+0x65c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d063      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a59      	ldr	r2, [pc, #356]	; (8005b94 <HAL_DMA_Init+0x660>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d05e      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a57      	ldr	r2, [pc, #348]	; (8005b98 <HAL_DMA_Init+0x664>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d059      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a56      	ldr	r2, [pc, #344]	; (8005b9c <HAL_DMA_Init+0x668>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d054      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a54      	ldr	r2, [pc, #336]	; (8005ba0 <HAL_DMA_Init+0x66c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d04f      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a53      	ldr	r2, [pc, #332]	; (8005ba4 <HAL_DMA_Init+0x670>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d04a      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a51      	ldr	r2, [pc, #324]	; (8005ba8 <HAL_DMA_Init+0x674>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d045      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a50      	ldr	r2, [pc, #320]	; (8005bac <HAL_DMA_Init+0x678>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d040      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a4e      	ldr	r2, [pc, #312]	; (8005bb0 <HAL_DMA_Init+0x67c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d03b      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a4d      	ldr	r2, [pc, #308]	; (8005bb4 <HAL_DMA_Init+0x680>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d036      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a4b      	ldr	r2, [pc, #300]	; (8005bb8 <HAL_DMA_Init+0x684>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d031      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a4a      	ldr	r2, [pc, #296]	; (8005bbc <HAL_DMA_Init+0x688>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d02c      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a48      	ldr	r2, [pc, #288]	; (8005bc0 <HAL_DMA_Init+0x68c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d027      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a47      	ldr	r2, [pc, #284]	; (8005bc4 <HAL_DMA_Init+0x690>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d022      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a45      	ldr	r2, [pc, #276]	; (8005bc8 <HAL_DMA_Init+0x694>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01d      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a44      	ldr	r2, [pc, #272]	; (8005bcc <HAL_DMA_Init+0x698>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d018      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a42      	ldr	r2, [pc, #264]	; (8005bd0 <HAL_DMA_Init+0x69c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a41      	ldr	r2, [pc, #260]	; (8005bd4 <HAL_DMA_Init+0x6a0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a3f      	ldr	r2, [pc, #252]	; (8005bd8 <HAL_DMA_Init+0x6a4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a3e      	ldr	r2, [pc, #248]	; (8005bdc <HAL_DMA_Init+0x6a8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_DMA_Init+0x5be>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3c      	ldr	r2, [pc, #240]	; (8005be0 <HAL_DMA_Init+0x6ac>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d101      	bne.n	8005af6 <HAL_DMA_Init+0x5c2>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <HAL_DMA_Init+0x5c4>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d032      	beq.n	8005b62 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fcdf 	bl	80074c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d102      	bne.n	8005b10 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d010      	beq.n	8005b50 <HAL_DMA_Init+0x61c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d80c      	bhi.n	8005b50 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 fd5c 	bl	80075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	e008      	b.n	8005b62 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	a7fdabf8 	.word	0xa7fdabf8
 8005b80:	cccccccd 	.word	0xcccccccd
 8005b84:	40020010 	.word	0x40020010
 8005b88:	40020028 	.word	0x40020028
 8005b8c:	40020040 	.word	0x40020040
 8005b90:	40020058 	.word	0x40020058
 8005b94:	40020070 	.word	0x40020070
 8005b98:	40020088 	.word	0x40020088
 8005b9c:	400200a0 	.word	0x400200a0
 8005ba0:	400200b8 	.word	0x400200b8
 8005ba4:	40020410 	.word	0x40020410
 8005ba8:	40020428 	.word	0x40020428
 8005bac:	40020440 	.word	0x40020440
 8005bb0:	40020458 	.word	0x40020458
 8005bb4:	40020470 	.word	0x40020470
 8005bb8:	40020488 	.word	0x40020488
 8005bbc:	400204a0 	.word	0x400204a0
 8005bc0:	400204b8 	.word	0x400204b8
 8005bc4:	58025408 	.word	0x58025408
 8005bc8:	5802541c 	.word	0x5802541c
 8005bcc:	58025430 	.word	0x58025430
 8005bd0:	58025444 	.word	0x58025444
 8005bd4:	58025458 	.word	0x58025458
 8005bd8:	5802546c 	.word	0x5802546c
 8005bdc:	58025480 	.word	0x58025480
 8005be0:	58025494 	.word	0x58025494

08005be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e226      	b.n	800604e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_DMA_Start_IT+0x2a>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e21f      	b.n	800604e <HAL_DMA_Start_IT+0x46a>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	f040 820a 	bne.w	8006038 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a68      	ldr	r2, [pc, #416]	; (8005dd8 <HAL_DMA_Start_IT+0x1f4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d04a      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a66      	ldr	r2, [pc, #408]	; (8005ddc <HAL_DMA_Start_IT+0x1f8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d045      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a65      	ldr	r2, [pc, #404]	; (8005de0 <HAL_DMA_Start_IT+0x1fc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d040      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a63      	ldr	r2, [pc, #396]	; (8005de4 <HAL_DMA_Start_IT+0x200>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d03b      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a62      	ldr	r2, [pc, #392]	; (8005de8 <HAL_DMA_Start_IT+0x204>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d036      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a60      	ldr	r2, [pc, #384]	; (8005dec <HAL_DMA_Start_IT+0x208>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d031      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5f      	ldr	r2, [pc, #380]	; (8005df0 <HAL_DMA_Start_IT+0x20c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d02c      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5d      	ldr	r2, [pc, #372]	; (8005df4 <HAL_DMA_Start_IT+0x210>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d027      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a5c      	ldr	r2, [pc, #368]	; (8005df8 <HAL_DMA_Start_IT+0x214>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d022      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a5a      	ldr	r2, [pc, #360]	; (8005dfc <HAL_DMA_Start_IT+0x218>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01d      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a59      	ldr	r2, [pc, #356]	; (8005e00 <HAL_DMA_Start_IT+0x21c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d018      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a57      	ldr	r2, [pc, #348]	; (8005e04 <HAL_DMA_Start_IT+0x220>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a56      	ldr	r2, [pc, #344]	; (8005e08 <HAL_DMA_Start_IT+0x224>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a54      	ldr	r2, [pc, #336]	; (8005e0c <HAL_DMA_Start_IT+0x228>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a53      	ldr	r2, [pc, #332]	; (8005e10 <HAL_DMA_Start_IT+0x22c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_DMA_Start_IT+0xee>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a51      	ldr	r2, [pc, #324]	; (8005e14 <HAL_DMA_Start_IT+0x230>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d108      	bne.n	8005ce4 <HAL_DMA_Start_IT+0x100>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e007      	b.n	8005cf4 <HAL_DMA_Start_IT+0x110>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f001 f906 	bl	8006f0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a34      	ldr	r2, [pc, #208]	; (8005dd8 <HAL_DMA_Start_IT+0x1f4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d04a      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a33      	ldr	r2, [pc, #204]	; (8005ddc <HAL_DMA_Start_IT+0x1f8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d045      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a31      	ldr	r2, [pc, #196]	; (8005de0 <HAL_DMA_Start_IT+0x1fc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d040      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a30      	ldr	r2, [pc, #192]	; (8005de4 <HAL_DMA_Start_IT+0x200>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d03b      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	; (8005de8 <HAL_DMA_Start_IT+0x204>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d036      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2d      	ldr	r2, [pc, #180]	; (8005dec <HAL_DMA_Start_IT+0x208>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d031      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <HAL_DMA_Start_IT+0x20c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d02c      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <HAL_DMA_Start_IT+0x210>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d027      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <HAL_DMA_Start_IT+0x214>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d022      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <HAL_DMA_Start_IT+0x218>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d01d      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <HAL_DMA_Start_IT+0x21c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d018      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a24      	ldr	r2, [pc, #144]	; (8005e04 <HAL_DMA_Start_IT+0x220>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <HAL_DMA_Start_IT+0x224>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00e      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a21      	ldr	r2, [pc, #132]	; (8005e0c <HAL_DMA_Start_IT+0x228>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d009      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <HAL_DMA_Start_IT+0x22c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <HAL_DMA_Start_IT+0x1bc>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <HAL_DMA_Start_IT+0x230>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d101      	bne.n	8005da4 <HAL_DMA_Start_IT+0x1c0>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <HAL_DMA_Start_IT+0x1c2>
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 021e 	bic.w	r2, r3, #30
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0216 	orr.w	r2, r2, #22
 8005dbc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d03e      	beq.n	8005e44 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0208 	orr.w	r2, r2, #8
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e035      	b.n	8005e44 <HAL_DMA_Start_IT+0x260>
 8005dd8:	40020010 	.word	0x40020010
 8005ddc:	40020028 	.word	0x40020028
 8005de0:	40020040 	.word	0x40020040
 8005de4:	40020058 	.word	0x40020058
 8005de8:	40020070 	.word	0x40020070
 8005dec:	40020088 	.word	0x40020088
 8005df0:	400200a0 	.word	0x400200a0
 8005df4:	400200b8 	.word	0x400200b8
 8005df8:	40020410 	.word	0x40020410
 8005dfc:	40020428 	.word	0x40020428
 8005e00:	40020440 	.word	0x40020440
 8005e04:	40020458 	.word	0x40020458
 8005e08:	40020470 	.word	0x40020470
 8005e0c:	40020488 	.word	0x40020488
 8005e10:	400204a0 	.word	0x400204a0
 8005e14:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 020e 	bic.w	r2, r3, #14
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 020a 	orr.w	r2, r2, #10
 8005e2a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0204 	orr.w	r2, r2, #4
 8005e42:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a83      	ldr	r2, [pc, #524]	; (8006058 <HAL_DMA_Start_IT+0x474>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d072      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a82      	ldr	r2, [pc, #520]	; (800605c <HAL_DMA_Start_IT+0x478>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d06d      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a80      	ldr	r2, [pc, #512]	; (8006060 <HAL_DMA_Start_IT+0x47c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d068      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7f      	ldr	r2, [pc, #508]	; (8006064 <HAL_DMA_Start_IT+0x480>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d063      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a7d      	ldr	r2, [pc, #500]	; (8006068 <HAL_DMA_Start_IT+0x484>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d05e      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a7c      	ldr	r2, [pc, #496]	; (800606c <HAL_DMA_Start_IT+0x488>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d059      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a7a      	ldr	r2, [pc, #488]	; (8006070 <HAL_DMA_Start_IT+0x48c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d054      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a79      	ldr	r2, [pc, #484]	; (8006074 <HAL_DMA_Start_IT+0x490>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d04f      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a77      	ldr	r2, [pc, #476]	; (8006078 <HAL_DMA_Start_IT+0x494>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d04a      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a76      	ldr	r2, [pc, #472]	; (800607c <HAL_DMA_Start_IT+0x498>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d045      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a74      	ldr	r2, [pc, #464]	; (8006080 <HAL_DMA_Start_IT+0x49c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d040      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a73      	ldr	r2, [pc, #460]	; (8006084 <HAL_DMA_Start_IT+0x4a0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d03b      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a71      	ldr	r2, [pc, #452]	; (8006088 <HAL_DMA_Start_IT+0x4a4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d036      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a70      	ldr	r2, [pc, #448]	; (800608c <HAL_DMA_Start_IT+0x4a8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d031      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6e      	ldr	r2, [pc, #440]	; (8006090 <HAL_DMA_Start_IT+0x4ac>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02c      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6d      	ldr	r2, [pc, #436]	; (8006094 <HAL_DMA_Start_IT+0x4b0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d027      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a6b      	ldr	r2, [pc, #428]	; (8006098 <HAL_DMA_Start_IT+0x4b4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d022      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6a      	ldr	r2, [pc, #424]	; (800609c <HAL_DMA_Start_IT+0x4b8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d01d      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a68      	ldr	r2, [pc, #416]	; (80060a0 <HAL_DMA_Start_IT+0x4bc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d018      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a67      	ldr	r2, [pc, #412]	; (80060a4 <HAL_DMA_Start_IT+0x4c0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a65      	ldr	r2, [pc, #404]	; (80060a8 <HAL_DMA_Start_IT+0x4c4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00e      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a64      	ldr	r2, [pc, #400]	; (80060ac <HAL_DMA_Start_IT+0x4c8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d009      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a62      	ldr	r2, [pc, #392]	; (80060b0 <HAL_DMA_Start_IT+0x4cc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_DMA_Start_IT+0x350>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a61      	ldr	r2, [pc, #388]	; (80060b4 <HAL_DMA_Start_IT+0x4d0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d101      	bne.n	8005f38 <HAL_DMA_Start_IT+0x354>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <HAL_DMA_Start_IT+0x356>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01a      	beq.n	8005f74 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f5a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f72:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a37      	ldr	r2, [pc, #220]	; (8006058 <HAL_DMA_Start_IT+0x474>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d04a      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a36      	ldr	r2, [pc, #216]	; (800605c <HAL_DMA_Start_IT+0x478>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d045      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a34      	ldr	r2, [pc, #208]	; (8006060 <HAL_DMA_Start_IT+0x47c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d040      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a33      	ldr	r2, [pc, #204]	; (8006064 <HAL_DMA_Start_IT+0x480>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d03b      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a31      	ldr	r2, [pc, #196]	; (8006068 <HAL_DMA_Start_IT+0x484>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d036      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a30      	ldr	r2, [pc, #192]	; (800606c <HAL_DMA_Start_IT+0x488>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d031      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2e      	ldr	r2, [pc, #184]	; (8006070 <HAL_DMA_Start_IT+0x48c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d02c      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <HAL_DMA_Start_IT+0x490>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d027      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2b      	ldr	r2, [pc, #172]	; (8006078 <HAL_DMA_Start_IT+0x494>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d022      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <HAL_DMA_Start_IT+0x498>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d01d      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <HAL_DMA_Start_IT+0x49c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d018      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a27      	ldr	r2, [pc, #156]	; (8006084 <HAL_DMA_Start_IT+0x4a0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a25      	ldr	r2, [pc, #148]	; (8006088 <HAL_DMA_Start_IT+0x4a4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00e      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a24      	ldr	r2, [pc, #144]	; (800608c <HAL_DMA_Start_IT+0x4a8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a22      	ldr	r2, [pc, #136]	; (8006090 <HAL_DMA_Start_IT+0x4ac>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_DMA_Start_IT+0x430>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a21      	ldr	r2, [pc, #132]	; (8006094 <HAL_DMA_Start_IT+0x4b0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d108      	bne.n	8006026 <HAL_DMA_Start_IT+0x442>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e012      	b.n	800604c <HAL_DMA_Start_IT+0x468>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0201 	orr.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e009      	b.n	800604c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40020010 	.word	0x40020010
 800605c:	40020028 	.word	0x40020028
 8006060:	40020040 	.word	0x40020040
 8006064:	40020058 	.word	0x40020058
 8006068:	40020070 	.word	0x40020070
 800606c:	40020088 	.word	0x40020088
 8006070:	400200a0 	.word	0x400200a0
 8006074:	400200b8 	.word	0x400200b8
 8006078:	40020410 	.word	0x40020410
 800607c:	40020428 	.word	0x40020428
 8006080:	40020440 	.word	0x40020440
 8006084:	40020458 	.word	0x40020458
 8006088:	40020470 	.word	0x40020470
 800608c:	40020488 	.word	0x40020488
 8006090:	400204a0 	.word	0x400204a0
 8006094:	400204b8 	.word	0x400204b8
 8006098:	58025408 	.word	0x58025408
 800609c:	5802541c 	.word	0x5802541c
 80060a0:	58025430 	.word	0x58025430
 80060a4:	58025444 	.word	0x58025444
 80060a8:	58025458 	.word	0x58025458
 80060ac:	5802546c 	.word	0x5802546c
 80060b0:	58025480 	.word	0x58025480
 80060b4:	58025494 	.word	0x58025494

080060b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060c4:	4b67      	ldr	r3, [pc, #412]	; (8006264 <HAL_DMA_IRQHandler+0x1ac>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a67      	ldr	r2, [pc, #412]	; (8006268 <HAL_DMA_IRQHandler+0x1b0>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	0a9b      	lsrs	r3, r3, #10
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a5f      	ldr	r2, [pc, #380]	; (800626c <HAL_DMA_IRQHandler+0x1b4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d04a      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5d      	ldr	r2, [pc, #372]	; (8006270 <HAL_DMA_IRQHandler+0x1b8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d045      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a5c      	ldr	r2, [pc, #368]	; (8006274 <HAL_DMA_IRQHandler+0x1bc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d040      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5a      	ldr	r2, [pc, #360]	; (8006278 <HAL_DMA_IRQHandler+0x1c0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d03b      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a59      	ldr	r2, [pc, #356]	; (800627c <HAL_DMA_IRQHandler+0x1c4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d036      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a57      	ldr	r2, [pc, #348]	; (8006280 <HAL_DMA_IRQHandler+0x1c8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a56      	ldr	r2, [pc, #344]	; (8006284 <HAL_DMA_IRQHandler+0x1cc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d02c      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a54      	ldr	r2, [pc, #336]	; (8006288 <HAL_DMA_IRQHandler+0x1d0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d027      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a53      	ldr	r2, [pc, #332]	; (800628c <HAL_DMA_IRQHandler+0x1d4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a51      	ldr	r2, [pc, #324]	; (8006290 <HAL_DMA_IRQHandler+0x1d8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01d      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a50      	ldr	r2, [pc, #320]	; (8006294 <HAL_DMA_IRQHandler+0x1dc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a4e      	ldr	r2, [pc, #312]	; (8006298 <HAL_DMA_IRQHandler+0x1e0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a4d      	ldr	r2, [pc, #308]	; (800629c <HAL_DMA_IRQHandler+0x1e4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a4b      	ldr	r2, [pc, #300]	; (80062a0 <HAL_DMA_IRQHandler+0x1e8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a4a      	ldr	r2, [pc, #296]	; (80062a4 <HAL_DMA_IRQHandler+0x1ec>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_DMA_IRQHandler+0xd2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a48      	ldr	r2, [pc, #288]	; (80062a8 <HAL_DMA_IRQHandler+0x1f0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d101      	bne.n	800618e <HAL_DMA_IRQHandler+0xd6>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_DMA_IRQHandler+0xd8>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 842b 	beq.w	80069ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2208      	movs	r2, #8
 80061a0:	409a      	lsls	r2, r3
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80a2 	beq.w	80062f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a2e      	ldr	r2, [pc, #184]	; (800626c <HAL_DMA_IRQHandler+0x1b4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d04a      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <HAL_DMA_IRQHandler+0x1b8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d045      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a2b      	ldr	r2, [pc, #172]	; (8006274 <HAL_DMA_IRQHandler+0x1bc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d040      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2a      	ldr	r2, [pc, #168]	; (8006278 <HAL_DMA_IRQHandler+0x1c0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d03b      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a28      	ldr	r2, [pc, #160]	; (800627c <HAL_DMA_IRQHandler+0x1c4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d036      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a27      	ldr	r2, [pc, #156]	; (8006280 <HAL_DMA_IRQHandler+0x1c8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d031      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a25      	ldr	r2, [pc, #148]	; (8006284 <HAL_DMA_IRQHandler+0x1cc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d02c      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a24      	ldr	r2, [pc, #144]	; (8006288 <HAL_DMA_IRQHandler+0x1d0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d027      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a22      	ldr	r2, [pc, #136]	; (800628c <HAL_DMA_IRQHandler+0x1d4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a21      	ldr	r2, [pc, #132]	; (8006290 <HAL_DMA_IRQHandler+0x1d8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d01d      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <HAL_DMA_IRQHandler+0x1dc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <HAL_DMA_IRQHandler+0x1e0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1c      	ldr	r2, [pc, #112]	; (800629c <HAL_DMA_IRQHandler+0x1e4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_DMA_IRQHandler+0x1e8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <HAL_DMA_IRQHandler+0x1ec>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_DMA_IRQHandler+0x194>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_DMA_IRQHandler+0x1f0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d12f      	bne.n	80062ac <HAL_DMA_IRQHandler+0x1f4>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e02e      	b.n	80062c0 <HAL_DMA_IRQHandler+0x208>
 8006262:	bf00      	nop
 8006264:	24000000 	.word	0x24000000
 8006268:	1b4e81b5 	.word	0x1b4e81b5
 800626c:	40020010 	.word	0x40020010
 8006270:	40020028 	.word	0x40020028
 8006274:	40020040 	.word	0x40020040
 8006278:	40020058 	.word	0x40020058
 800627c:	40020070 	.word	0x40020070
 8006280:	40020088 	.word	0x40020088
 8006284:	400200a0 	.word	0x400200a0
 8006288:	400200b8 	.word	0x400200b8
 800628c:	40020410 	.word	0x40020410
 8006290:	40020428 	.word	0x40020428
 8006294:	40020440 	.word	0x40020440
 8006298:	40020458 	.word	0x40020458
 800629c:	40020470 	.word	0x40020470
 80062a0:	40020488 	.word	0x40020488
 80062a4:	400204a0 	.word	0x400204a0
 80062a8:	400204b8 	.word	0x400204b8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d015      	beq.n	80062f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0204 	bic.w	r2, r2, #4
 80062d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2208      	movs	r2, #8
 80062de:	409a      	lsls	r2, r3
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e8:	f043 0201 	orr.w	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	fa22 f303 	lsr.w	r3, r2, r3
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d06e      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a69      	ldr	r2, [pc, #420]	; (80064b0 <HAL_DMA_IRQHandler+0x3f8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d04a      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a67      	ldr	r2, [pc, #412]	; (80064b4 <HAL_DMA_IRQHandler+0x3fc>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d045      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a66      	ldr	r2, [pc, #408]	; (80064b8 <HAL_DMA_IRQHandler+0x400>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d040      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a64      	ldr	r2, [pc, #400]	; (80064bc <HAL_DMA_IRQHandler+0x404>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d03b      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a63      	ldr	r2, [pc, #396]	; (80064c0 <HAL_DMA_IRQHandler+0x408>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d036      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a61      	ldr	r2, [pc, #388]	; (80064c4 <HAL_DMA_IRQHandler+0x40c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d031      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a60      	ldr	r2, [pc, #384]	; (80064c8 <HAL_DMA_IRQHandler+0x410>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d02c      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a5e      	ldr	r2, [pc, #376]	; (80064cc <HAL_DMA_IRQHandler+0x414>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d027      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a5d      	ldr	r2, [pc, #372]	; (80064d0 <HAL_DMA_IRQHandler+0x418>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d022      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5b      	ldr	r2, [pc, #364]	; (80064d4 <HAL_DMA_IRQHandler+0x41c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01d      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a5a      	ldr	r2, [pc, #360]	; (80064d8 <HAL_DMA_IRQHandler+0x420>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a58      	ldr	r2, [pc, #352]	; (80064dc <HAL_DMA_IRQHandler+0x424>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d013      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a57      	ldr	r2, [pc, #348]	; (80064e0 <HAL_DMA_IRQHandler+0x428>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a55      	ldr	r2, [pc, #340]	; (80064e4 <HAL_DMA_IRQHandler+0x42c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a54      	ldr	r2, [pc, #336]	; (80064e8 <HAL_DMA_IRQHandler+0x430>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2ee>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a52      	ldr	r2, [pc, #328]	; (80064ec <HAL_DMA_IRQHandler+0x434>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d10a      	bne.n	80063bc <HAL_DMA_IRQHandler+0x304>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf14      	ite	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	2300      	moveq	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e003      	b.n	80063c4 <HAL_DMA_IRQHandler+0x30c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00d      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063dc:	f043 0202 	orr.w	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	2204      	movs	r2, #4
 80063ee:	409a      	lsls	r2, r3
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 808f 	beq.w	8006518 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <HAL_DMA_IRQHandler+0x3f8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <HAL_DMA_IRQHandler+0x3fc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a29      	ldr	r2, [pc, #164]	; (80064b8 <HAL_DMA_IRQHandler+0x400>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a27      	ldr	r2, [pc, #156]	; (80064bc <HAL_DMA_IRQHandler+0x404>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <HAL_DMA_IRQHandler+0x408>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a24      	ldr	r2, [pc, #144]	; (80064c4 <HAL_DMA_IRQHandler+0x40c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a23      	ldr	r2, [pc, #140]	; (80064c8 <HAL_DMA_IRQHandler+0x410>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a21      	ldr	r2, [pc, #132]	; (80064cc <HAL_DMA_IRQHandler+0x414>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a20      	ldr	r2, [pc, #128]	; (80064d0 <HAL_DMA_IRQHandler+0x418>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <HAL_DMA_IRQHandler+0x41c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <HAL_DMA_IRQHandler+0x420>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <HAL_DMA_IRQHandler+0x424>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <HAL_DMA_IRQHandler+0x428>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a18      	ldr	r2, [pc, #96]	; (80064e4 <HAL_DMA_IRQHandler+0x42c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <HAL_DMA_IRQHandler+0x430>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_IRQHandler+0x3e2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a15      	ldr	r2, [pc, #84]	; (80064ec <HAL_DMA_IRQHandler+0x434>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d12a      	bne.n	80064f0 <HAL_DMA_IRQHandler+0x438>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bf14      	ite	ne
 80064a8:	2301      	movne	r3, #1
 80064aa:	2300      	moveq	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	e023      	b.n	80064f8 <HAL_DMA_IRQHandler+0x440>
 80064b0:	40020010 	.word	0x40020010
 80064b4:	40020028 	.word	0x40020028
 80064b8:	40020040 	.word	0x40020040
 80064bc:	40020058 	.word	0x40020058
 80064c0:	40020070 	.word	0x40020070
 80064c4:	40020088 	.word	0x40020088
 80064c8:	400200a0 	.word	0x400200a0
 80064cc:	400200b8 	.word	0x400200b8
 80064d0:	40020410 	.word	0x40020410
 80064d4:	40020428 	.word	0x40020428
 80064d8:	40020440 	.word	0x40020440
 80064dc:	40020458 	.word	0x40020458
 80064e0:	40020470 	.word	0x40020470
 80064e4:	40020488 	.word	0x40020488
 80064e8:	400204a0 	.word	0x400204a0
 80064ec:	400204b8 	.word	0x400204b8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2204      	movs	r2, #4
 8006506:	409a      	lsls	r2, r3
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	f043 0204 	orr.w	r2, r3, #4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2210      	movs	r2, #16
 8006522:	409a      	lsls	r2, r3
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80a6 	beq.w	800667a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a85      	ldr	r2, [pc, #532]	; (8006748 <HAL_DMA_IRQHandler+0x690>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d04a      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a83      	ldr	r2, [pc, #524]	; (800674c <HAL_DMA_IRQHandler+0x694>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d045      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a82      	ldr	r2, [pc, #520]	; (8006750 <HAL_DMA_IRQHandler+0x698>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d040      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a80      	ldr	r2, [pc, #512]	; (8006754 <HAL_DMA_IRQHandler+0x69c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d03b      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7f      	ldr	r2, [pc, #508]	; (8006758 <HAL_DMA_IRQHandler+0x6a0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d036      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a7d      	ldr	r2, [pc, #500]	; (800675c <HAL_DMA_IRQHandler+0x6a4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d031      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7c      	ldr	r2, [pc, #496]	; (8006760 <HAL_DMA_IRQHandler+0x6a8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d02c      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a7a      	ldr	r2, [pc, #488]	; (8006764 <HAL_DMA_IRQHandler+0x6ac>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d027      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a79      	ldr	r2, [pc, #484]	; (8006768 <HAL_DMA_IRQHandler+0x6b0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d022      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a77      	ldr	r2, [pc, #476]	; (800676c <HAL_DMA_IRQHandler+0x6b4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a76      	ldr	r2, [pc, #472]	; (8006770 <HAL_DMA_IRQHandler+0x6b8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a74      	ldr	r2, [pc, #464]	; (8006774 <HAL_DMA_IRQHandler+0x6bc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a73      	ldr	r2, [pc, #460]	; (8006778 <HAL_DMA_IRQHandler+0x6c0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a71      	ldr	r2, [pc, #452]	; (800677c <HAL_DMA_IRQHandler+0x6c4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a70      	ldr	r2, [pc, #448]	; (8006780 <HAL_DMA_IRQHandler+0x6c8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_DMA_IRQHandler+0x516>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a6e      	ldr	r2, [pc, #440]	; (8006784 <HAL_DMA_IRQHandler+0x6cc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d10a      	bne.n	80065e4 <HAL_DMA_IRQHandler+0x52c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	e009      	b.n	80065f8 <HAL_DMA_IRQHandler+0x540>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bf14      	ite	ne
 80065f2:	2301      	movne	r3, #1
 80065f4:	2300      	moveq	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d03e      	beq.n	800667a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2210      	movs	r2, #16
 8006606:	409a      	lsls	r2, r3
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d018      	beq.n	800664c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d108      	bne.n	800663a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d024      	beq.n	800667a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
 8006638:	e01f      	b.n	800667a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01b      	beq.n	800667a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
 800664a:	e016      	b.n	800667a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0208 	bic.w	r2, r2, #8
 8006668:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2220      	movs	r2, #32
 8006684:	409a      	lsls	r2, r3
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	4013      	ands	r3, r2
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8110 	beq.w	80068b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a2c      	ldr	r2, [pc, #176]	; (8006748 <HAL_DMA_IRQHandler+0x690>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d04a      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2b      	ldr	r2, [pc, #172]	; (800674c <HAL_DMA_IRQHandler+0x694>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d045      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a29      	ldr	r2, [pc, #164]	; (8006750 <HAL_DMA_IRQHandler+0x698>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d040      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a28      	ldr	r2, [pc, #160]	; (8006754 <HAL_DMA_IRQHandler+0x69c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d03b      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a26      	ldr	r2, [pc, #152]	; (8006758 <HAL_DMA_IRQHandler+0x6a0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d036      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a25      	ldr	r2, [pc, #148]	; (800675c <HAL_DMA_IRQHandler+0x6a4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d031      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a23      	ldr	r2, [pc, #140]	; (8006760 <HAL_DMA_IRQHandler+0x6a8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d02c      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a22      	ldr	r2, [pc, #136]	; (8006764 <HAL_DMA_IRQHandler+0x6ac>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d027      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a20      	ldr	r2, [pc, #128]	; (8006768 <HAL_DMA_IRQHandler+0x6b0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d022      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1f      	ldr	r2, [pc, #124]	; (800676c <HAL_DMA_IRQHandler+0x6b4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d01d      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <HAL_DMA_IRQHandler+0x6b8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d018      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1c      	ldr	r2, [pc, #112]	; (8006774 <HAL_DMA_IRQHandler+0x6bc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <HAL_DMA_IRQHandler+0x6c0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a19      	ldr	r2, [pc, #100]	; (800677c <HAL_DMA_IRQHandler+0x6c4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a17      	ldr	r2, [pc, #92]	; (8006780 <HAL_DMA_IRQHandler+0x6c8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_DMA_IRQHandler+0x678>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a16      	ldr	r2, [pc, #88]	; (8006784 <HAL_DMA_IRQHandler+0x6cc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d12b      	bne.n	8006788 <HAL_DMA_IRQHandler+0x6d0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	bf14      	ite	ne
 800673e:	2301      	movne	r3, #1
 8006740:	2300      	moveq	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	e02a      	b.n	800679c <HAL_DMA_IRQHandler+0x6e4>
 8006746:	bf00      	nop
 8006748:	40020010 	.word	0x40020010
 800674c:	40020028 	.word	0x40020028
 8006750:	40020040 	.word	0x40020040
 8006754:	40020058 	.word	0x40020058
 8006758:	40020070 	.word	0x40020070
 800675c:	40020088 	.word	0x40020088
 8006760:	400200a0 	.word	0x400200a0
 8006764:	400200b8 	.word	0x400200b8
 8006768:	40020410 	.word	0x40020410
 800676c:	40020428 	.word	0x40020428
 8006770:	40020440 	.word	0x40020440
 8006774:	40020458 	.word	0x40020458
 8006778:	40020470 	.word	0x40020470
 800677c:	40020488 	.word	0x40020488
 8006780:	400204a0 	.word	0x400204a0
 8006784:	400204b8 	.word	0x400204b8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8087 	beq.w	80068b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2220      	movs	r2, #32
 80067ac:	409a      	lsls	r2, r3
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d139      	bne.n	8006832 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0216 	bic.w	r2, r2, #22
 80067cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <HAL_DMA_IRQHandler+0x736>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0208 	bic.w	r2, r2, #8
 80067fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	223f      	movs	r2, #63	; 0x3f
 8006808:	409a      	lsls	r2, r3
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 834a 	beq.w	8006ebc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
          }
          return;
 8006830:	e344      	b.n	8006ebc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d018      	beq.n	8006872 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d108      	bne.n	8006860 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	2b00      	cmp	r3, #0
 8006854:	d02c      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
 800685e:	e027      	b.n	80068b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d023      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
 8006870:	e01e      	b.n	80068b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10f      	bne.n	80068a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0210 	bic.w	r2, r2, #16
 800688e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8306 	beq.w	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 8088 	beq.w	80069d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2204      	movs	r2, #4
 80068cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a7a      	ldr	r2, [pc, #488]	; (8006ac0 <HAL_DMA_IRQHandler+0xa08>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d04a      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a79      	ldr	r2, [pc, #484]	; (8006ac4 <HAL_DMA_IRQHandler+0xa0c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d045      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a77      	ldr	r2, [pc, #476]	; (8006ac8 <HAL_DMA_IRQHandler+0xa10>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d040      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a76      	ldr	r2, [pc, #472]	; (8006acc <HAL_DMA_IRQHandler+0xa14>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d03b      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a74      	ldr	r2, [pc, #464]	; (8006ad0 <HAL_DMA_IRQHandler+0xa18>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d036      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a73      	ldr	r2, [pc, #460]	; (8006ad4 <HAL_DMA_IRQHandler+0xa1c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d031      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a71      	ldr	r2, [pc, #452]	; (8006ad8 <HAL_DMA_IRQHandler+0xa20>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d02c      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a70      	ldr	r2, [pc, #448]	; (8006adc <HAL_DMA_IRQHandler+0xa24>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d027      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a6e      	ldr	r2, [pc, #440]	; (8006ae0 <HAL_DMA_IRQHandler+0xa28>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a6d      	ldr	r2, [pc, #436]	; (8006ae4 <HAL_DMA_IRQHandler+0xa2c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01d      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6b      	ldr	r2, [pc, #428]	; (8006ae8 <HAL_DMA_IRQHandler+0xa30>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6a      	ldr	r2, [pc, #424]	; (8006aec <HAL_DMA_IRQHandler+0xa34>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a68      	ldr	r2, [pc, #416]	; (8006af0 <HAL_DMA_IRQHandler+0xa38>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a67      	ldr	r2, [pc, #412]	; (8006af4 <HAL_DMA_IRQHandler+0xa3c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a65      	ldr	r2, [pc, #404]	; (8006af8 <HAL_DMA_IRQHandler+0xa40>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_DMA_IRQHandler+0x8b8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a64      	ldr	r2, [pc, #400]	; (8006afc <HAL_DMA_IRQHandler+0xa44>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d108      	bne.n	8006982 <HAL_DMA_IRQHandler+0x8ca>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0201 	bic.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e007      	b.n	8006992 <HAL_DMA_IRQHandler+0x8da>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699a:	429a      	cmp	r2, r3
 800699c:	d307      	bcc.n	80069ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f2      	bne.n	8006992 <HAL_DMA_IRQHandler+0x8da>
 80069ac:	e000      	b.n	80069b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2203      	movs	r2, #3
 80069c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069c6:	e003      	b.n	80069d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8272 	beq.w	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
 80069ea:	e26c      	b.n	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a43      	ldr	r2, [pc, #268]	; (8006b00 <HAL_DMA_IRQHandler+0xa48>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d022      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x984>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a42      	ldr	r2, [pc, #264]	; (8006b04 <HAL_DMA_IRQHandler+0xa4c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01d      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x984>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a40      	ldr	r2, [pc, #256]	; (8006b08 <HAL_DMA_IRQHandler+0xa50>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x984>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a3f      	ldr	r2, [pc, #252]	; (8006b0c <HAL_DMA_IRQHandler+0xa54>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x984>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a3d      	ldr	r2, [pc, #244]	; (8006b10 <HAL_DMA_IRQHandler+0xa58>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x984>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a3c      	ldr	r2, [pc, #240]	; (8006b14 <HAL_DMA_IRQHandler+0xa5c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x984>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a3a      	ldr	r2, [pc, #232]	; (8006b18 <HAL_DMA_IRQHandler+0xa60>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x984>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a39      	ldr	r2, [pc, #228]	; (8006b1c <HAL_DMA_IRQHandler+0xa64>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d101      	bne.n	8006a40 <HAL_DMA_IRQHandler+0x988>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <HAL_DMA_IRQHandler+0x98a>
 8006a40:	2300      	movs	r3, #0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 823f 	beq.w	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2204      	movs	r2, #4
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80cd 	beq.w	8006c00 <HAL_DMA_IRQHandler+0xb48>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 80c7 	beq.w	8006c00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d049      	beq.n	8006b20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 8210 	beq.w	8006ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aa8:	e20a      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8206 	beq.w	8006ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006abc:	e200      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xe08>
 8006abe:	bf00      	nop
 8006ac0:	40020010 	.word	0x40020010
 8006ac4:	40020028 	.word	0x40020028
 8006ac8:	40020040 	.word	0x40020040
 8006acc:	40020058 	.word	0x40020058
 8006ad0:	40020070 	.word	0x40020070
 8006ad4:	40020088 	.word	0x40020088
 8006ad8:	400200a0 	.word	0x400200a0
 8006adc:	400200b8 	.word	0x400200b8
 8006ae0:	40020410 	.word	0x40020410
 8006ae4:	40020428 	.word	0x40020428
 8006ae8:	40020440 	.word	0x40020440
 8006aec:	40020458 	.word	0x40020458
 8006af0:	40020470 	.word	0x40020470
 8006af4:	40020488 	.word	0x40020488
 8006af8:	400204a0 	.word	0x400204a0
 8006afc:	400204b8 	.word	0x400204b8
 8006b00:	58025408 	.word	0x58025408
 8006b04:	5802541c 	.word	0x5802541c
 8006b08:	58025430 	.word	0x58025430
 8006b0c:	58025444 	.word	0x58025444
 8006b10:	58025458 	.word	0x58025458
 8006b14:	5802546c 	.word	0x5802546c
 8006b18:	58025480 	.word	0x58025480
 8006b1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d160      	bne.n	8006bec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a7f      	ldr	r2, [pc, #508]	; (8006d2c <HAL_DMA_IRQHandler+0xc74>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d04a      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a7d      	ldr	r2, [pc, #500]	; (8006d30 <HAL_DMA_IRQHandler+0xc78>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d045      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7c      	ldr	r2, [pc, #496]	; (8006d34 <HAL_DMA_IRQHandler+0xc7c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d040      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7a      	ldr	r2, [pc, #488]	; (8006d38 <HAL_DMA_IRQHandler+0xc80>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d03b      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a79      	ldr	r2, [pc, #484]	; (8006d3c <HAL_DMA_IRQHandler+0xc84>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d036      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a77      	ldr	r2, [pc, #476]	; (8006d40 <HAL_DMA_IRQHandler+0xc88>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d031      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a76      	ldr	r2, [pc, #472]	; (8006d44 <HAL_DMA_IRQHandler+0xc8c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d02c      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a74      	ldr	r2, [pc, #464]	; (8006d48 <HAL_DMA_IRQHandler+0xc90>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d027      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a73      	ldr	r2, [pc, #460]	; (8006d4c <HAL_DMA_IRQHandler+0xc94>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d022      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a71      	ldr	r2, [pc, #452]	; (8006d50 <HAL_DMA_IRQHandler+0xc98>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01d      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a70      	ldr	r2, [pc, #448]	; (8006d54 <HAL_DMA_IRQHandler+0xc9c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d018      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a6e      	ldr	r2, [pc, #440]	; (8006d58 <HAL_DMA_IRQHandler+0xca0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a6d      	ldr	r2, [pc, #436]	; (8006d5c <HAL_DMA_IRQHandler+0xca4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00e      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6b      	ldr	r2, [pc, #428]	; (8006d60 <HAL_DMA_IRQHandler+0xca8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6a      	ldr	r2, [pc, #424]	; (8006d64 <HAL_DMA_IRQHandler+0xcac>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_DMA_IRQHandler+0xb12>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a68      	ldr	r2, [pc, #416]	; (8006d68 <HAL_DMA_IRQHandler+0xcb0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d108      	bne.n	8006bdc <HAL_DMA_IRQHandler+0xb24>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0208 	bic.w	r2, r2, #8
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e007      	b.n	8006bec <HAL_DMA_IRQHandler+0xb34>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0204 	bic.w	r2, r2, #4
 8006bea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8165 	beq.w	8006ec0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfe:	e15f      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	2202      	movs	r2, #2
 8006c0a:	409a      	lsls	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80c5 	beq.w	8006da0 <HAL_DMA_IRQHandler+0xce8>
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80bf 	beq.w	8006da0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	409a      	lsls	r2, r3
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d018      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 813a 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c58:	e134      	b.n	8006ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8130 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c6c:	e12a      	b.n	8006ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f040 8089 	bne.w	8006d8c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2b      	ldr	r2, [pc, #172]	; (8006d2c <HAL_DMA_IRQHandler+0xc74>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d04a      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a29      	ldr	r2, [pc, #164]	; (8006d30 <HAL_DMA_IRQHandler+0xc78>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d045      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a28      	ldr	r2, [pc, #160]	; (8006d34 <HAL_DMA_IRQHandler+0xc7c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d040      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <HAL_DMA_IRQHandler+0xc80>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d03b      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <HAL_DMA_IRQHandler+0xc84>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d036      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <HAL_DMA_IRQHandler+0xc88>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d031      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a22      	ldr	r2, [pc, #136]	; (8006d44 <HAL_DMA_IRQHandler+0xc8c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d02c      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a20      	ldr	r2, [pc, #128]	; (8006d48 <HAL_DMA_IRQHandler+0xc90>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d027      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_DMA_IRQHandler+0xc94>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d022      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <HAL_DMA_IRQHandler+0xc98>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d01d      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_DMA_IRQHandler+0xc9c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d018      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1a      	ldr	r2, [pc, #104]	; (8006d58 <HAL_DMA_IRQHandler+0xca0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_DMA_IRQHandler+0xca4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00e      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <HAL_DMA_IRQHandler+0xca8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d009      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <HAL_DMA_IRQHandler+0xcac>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xc62>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <HAL_DMA_IRQHandler+0xcb0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d128      	bne.n	8006d6c <HAL_DMA_IRQHandler+0xcb4>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0214 	bic.w	r2, r2, #20
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e027      	b.n	8006d7c <HAL_DMA_IRQHandler+0xcc4>
 8006d2c:	40020010 	.word	0x40020010
 8006d30:	40020028 	.word	0x40020028
 8006d34:	40020040 	.word	0x40020040
 8006d38:	40020058 	.word	0x40020058
 8006d3c:	40020070 	.word	0x40020070
 8006d40:	40020088 	.word	0x40020088
 8006d44:	400200a0 	.word	0x400200a0
 8006d48:	400200b8 	.word	0x400200b8
 8006d4c:	40020410 	.word	0x40020410
 8006d50:	40020428 	.word	0x40020428
 8006d54:	40020440 	.word	0x40020440
 8006d58:	40020458 	.word	0x40020458
 8006d5c:	40020470 	.word	0x40020470
 8006d60:	40020488 	.word	0x40020488
 8006d64:	400204a0 	.word	0x400204a0
 8006d68:	400204b8 	.word	0x400204b8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 020a 	bic.w	r2, r2, #10
 8006d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8097 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d9e:	e091      	b.n	8006ec4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	2208      	movs	r2, #8
 8006daa:	409a      	lsls	r2, r3
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8088 	beq.w	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8082 	beq.w	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a41      	ldr	r2, [pc, #260]	; (8006ecc <HAL_DMA_IRQHandler+0xe14>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d04a      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a3f      	ldr	r2, [pc, #252]	; (8006ed0 <HAL_DMA_IRQHandler+0xe18>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d045      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a3e      	ldr	r2, [pc, #248]	; (8006ed4 <HAL_DMA_IRQHandler+0xe1c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d040      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a3c      	ldr	r2, [pc, #240]	; (8006ed8 <HAL_DMA_IRQHandler+0xe20>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d03b      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3b      	ldr	r2, [pc, #236]	; (8006edc <HAL_DMA_IRQHandler+0xe24>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d036      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a39      	ldr	r2, [pc, #228]	; (8006ee0 <HAL_DMA_IRQHandler+0xe28>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d031      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a38      	ldr	r2, [pc, #224]	; (8006ee4 <HAL_DMA_IRQHandler+0xe2c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d02c      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a36      	ldr	r2, [pc, #216]	; (8006ee8 <HAL_DMA_IRQHandler+0xe30>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d027      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a35      	ldr	r2, [pc, #212]	; (8006eec <HAL_DMA_IRQHandler+0xe34>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d022      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a33      	ldr	r2, [pc, #204]	; (8006ef0 <HAL_DMA_IRQHandler+0xe38>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01d      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a32      	ldr	r2, [pc, #200]	; (8006ef4 <HAL_DMA_IRQHandler+0xe3c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d018      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a30      	ldr	r2, [pc, #192]	; (8006ef8 <HAL_DMA_IRQHandler+0xe40>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a2f      	ldr	r2, [pc, #188]	; (8006efc <HAL_DMA_IRQHandler+0xe44>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a2d      	ldr	r2, [pc, #180]	; (8006f00 <HAL_DMA_IRQHandler+0xe48>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d009      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a2c      	ldr	r2, [pc, #176]	; (8006f04 <HAL_DMA_IRQHandler+0xe4c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_DMA_IRQHandler+0xdaa>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a2a      	ldr	r2, [pc, #168]	; (8006f08 <HAL_DMA_IRQHandler+0xe50>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d108      	bne.n	8006e74 <HAL_DMA_IRQHandler+0xdbc>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 021c 	bic.w	r2, r2, #28
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e007      	b.n	8006e84 <HAL_DMA_IRQHandler+0xdcc>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 020e 	bic.w	r2, r2, #14
 8006e82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	e004      	b.n	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ebc:	bf00      	nop
 8006ebe:	e002      	b.n	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ec6:	3728      	adds	r7, #40	; 0x28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	40020010 	.word	0x40020010
 8006ed0:	40020028 	.word	0x40020028
 8006ed4:	40020040 	.word	0x40020040
 8006ed8:	40020058 	.word	0x40020058
 8006edc:	40020070 	.word	0x40020070
 8006ee0:	40020088 	.word	0x40020088
 8006ee4:	400200a0 	.word	0x400200a0
 8006ee8:	400200b8 	.word	0x400200b8
 8006eec:	40020410 	.word	0x40020410
 8006ef0:	40020428 	.word	0x40020428
 8006ef4:	40020440 	.word	0x40020440
 8006ef8:	40020458 	.word	0x40020458
 8006efc:	40020470 	.word	0x40020470
 8006f00:	40020488 	.word	0x40020488
 8006f04:	400204a0 	.word	0x400204a0
 8006f08:	400204b8 	.word	0x400204b8

08006f0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a7f      	ldr	r2, [pc, #508]	; (8007128 <DMA_SetConfig+0x21c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d072      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a7d      	ldr	r2, [pc, #500]	; (800712c <DMA_SetConfig+0x220>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d06d      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a7c      	ldr	r2, [pc, #496]	; (8007130 <DMA_SetConfig+0x224>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d068      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a7a      	ldr	r2, [pc, #488]	; (8007134 <DMA_SetConfig+0x228>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d063      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a79      	ldr	r2, [pc, #484]	; (8007138 <DMA_SetConfig+0x22c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d05e      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a77      	ldr	r2, [pc, #476]	; (800713c <DMA_SetConfig+0x230>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d059      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a76      	ldr	r2, [pc, #472]	; (8007140 <DMA_SetConfig+0x234>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d054      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a74      	ldr	r2, [pc, #464]	; (8007144 <DMA_SetConfig+0x238>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d04f      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a73      	ldr	r2, [pc, #460]	; (8007148 <DMA_SetConfig+0x23c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d04a      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a71      	ldr	r2, [pc, #452]	; (800714c <DMA_SetConfig+0x240>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d045      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a70      	ldr	r2, [pc, #448]	; (8007150 <DMA_SetConfig+0x244>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d040      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a6e      	ldr	r2, [pc, #440]	; (8007154 <DMA_SetConfig+0x248>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d03b      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a6d      	ldr	r2, [pc, #436]	; (8007158 <DMA_SetConfig+0x24c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d036      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6b      	ldr	r2, [pc, #428]	; (800715c <DMA_SetConfig+0x250>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d031      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a6a      	ldr	r2, [pc, #424]	; (8007160 <DMA_SetConfig+0x254>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d02c      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a68      	ldr	r2, [pc, #416]	; (8007164 <DMA_SetConfig+0x258>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d027      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a67      	ldr	r2, [pc, #412]	; (8007168 <DMA_SetConfig+0x25c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d022      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a65      	ldr	r2, [pc, #404]	; (800716c <DMA_SetConfig+0x260>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01d      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a64      	ldr	r2, [pc, #400]	; (8007170 <DMA_SetConfig+0x264>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d018      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a62      	ldr	r2, [pc, #392]	; (8007174 <DMA_SetConfig+0x268>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d013      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a61      	ldr	r2, [pc, #388]	; (8007178 <DMA_SetConfig+0x26c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00e      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a5f      	ldr	r2, [pc, #380]	; (800717c <DMA_SetConfig+0x270>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d009      	beq.n	8007016 <DMA_SetConfig+0x10a>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a5e      	ldr	r2, [pc, #376]	; (8007180 <DMA_SetConfig+0x274>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d004      	beq.n	8007016 <DMA_SetConfig+0x10a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a5c      	ldr	r2, [pc, #368]	; (8007184 <DMA_SetConfig+0x278>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d101      	bne.n	800701a <DMA_SetConfig+0x10e>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <DMA_SetConfig+0x110>
 800701a:	2300      	movs	r3, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00d      	beq.n	800703c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007028:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800703a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a39      	ldr	r2, [pc, #228]	; (8007128 <DMA_SetConfig+0x21c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d04a      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a38      	ldr	r2, [pc, #224]	; (800712c <DMA_SetConfig+0x220>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d045      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a36      	ldr	r2, [pc, #216]	; (8007130 <DMA_SetConfig+0x224>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d040      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a35      	ldr	r2, [pc, #212]	; (8007134 <DMA_SetConfig+0x228>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d03b      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a33      	ldr	r2, [pc, #204]	; (8007138 <DMA_SetConfig+0x22c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d036      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a32      	ldr	r2, [pc, #200]	; (800713c <DMA_SetConfig+0x230>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d031      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a30      	ldr	r2, [pc, #192]	; (8007140 <DMA_SetConfig+0x234>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d02c      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a2f      	ldr	r2, [pc, #188]	; (8007144 <DMA_SetConfig+0x238>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d027      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a2d      	ldr	r2, [pc, #180]	; (8007148 <DMA_SetConfig+0x23c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d022      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a2c      	ldr	r2, [pc, #176]	; (800714c <DMA_SetConfig+0x240>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d01d      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <DMA_SetConfig+0x244>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d018      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a29      	ldr	r2, [pc, #164]	; (8007154 <DMA_SetConfig+0x248>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a27      	ldr	r2, [pc, #156]	; (8007158 <DMA_SetConfig+0x24c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00e      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a26      	ldr	r2, [pc, #152]	; (800715c <DMA_SetConfig+0x250>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a24      	ldr	r2, [pc, #144]	; (8007160 <DMA_SetConfig+0x254>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <DMA_SetConfig+0x1d0>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a23      	ldr	r2, [pc, #140]	; (8007164 <DMA_SetConfig+0x258>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d101      	bne.n	80070e0 <DMA_SetConfig+0x1d4>
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <DMA_SetConfig+0x1d6>
 80070e0:	2300      	movs	r3, #0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d059      	beq.n	800719a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	223f      	movs	r2, #63	; 0x3f
 80070f0:	409a      	lsls	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007104:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d138      	bne.n	8007188 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007126:	e086      	b.n	8007236 <DMA_SetConfig+0x32a>
 8007128:	40020010 	.word	0x40020010
 800712c:	40020028 	.word	0x40020028
 8007130:	40020040 	.word	0x40020040
 8007134:	40020058 	.word	0x40020058
 8007138:	40020070 	.word	0x40020070
 800713c:	40020088 	.word	0x40020088
 8007140:	400200a0 	.word	0x400200a0
 8007144:	400200b8 	.word	0x400200b8
 8007148:	40020410 	.word	0x40020410
 800714c:	40020428 	.word	0x40020428
 8007150:	40020440 	.word	0x40020440
 8007154:	40020458 	.word	0x40020458
 8007158:	40020470 	.word	0x40020470
 800715c:	40020488 	.word	0x40020488
 8007160:	400204a0 	.word	0x400204a0
 8007164:	400204b8 	.word	0x400204b8
 8007168:	58025408 	.word	0x58025408
 800716c:	5802541c 	.word	0x5802541c
 8007170:	58025430 	.word	0x58025430
 8007174:	58025444 	.word	0x58025444
 8007178:	58025458 	.word	0x58025458
 800717c:	5802546c 	.word	0x5802546c
 8007180:	58025480 	.word	0x58025480
 8007184:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	60da      	str	r2, [r3, #12]
}
 8007198:	e04d      	b.n	8007236 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a29      	ldr	r2, [pc, #164]	; (8007244 <DMA_SetConfig+0x338>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d022      	beq.n	80071ea <DMA_SetConfig+0x2de>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a27      	ldr	r2, [pc, #156]	; (8007248 <DMA_SetConfig+0x33c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d01d      	beq.n	80071ea <DMA_SetConfig+0x2de>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a26      	ldr	r2, [pc, #152]	; (800724c <DMA_SetConfig+0x340>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d018      	beq.n	80071ea <DMA_SetConfig+0x2de>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a24      	ldr	r2, [pc, #144]	; (8007250 <DMA_SetConfig+0x344>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <DMA_SetConfig+0x2de>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a23      	ldr	r2, [pc, #140]	; (8007254 <DMA_SetConfig+0x348>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00e      	beq.n	80071ea <DMA_SetConfig+0x2de>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a21      	ldr	r2, [pc, #132]	; (8007258 <DMA_SetConfig+0x34c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d009      	beq.n	80071ea <DMA_SetConfig+0x2de>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a20      	ldr	r2, [pc, #128]	; (800725c <DMA_SetConfig+0x350>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <DMA_SetConfig+0x2de>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <DMA_SetConfig+0x354>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <DMA_SetConfig+0x2e2>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <DMA_SetConfig+0x2e4>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d020      	beq.n	8007236 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	2201      	movs	r2, #1
 80071fe:	409a      	lsls	r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b40      	cmp	r3, #64	; 0x40
 8007212:	d108      	bne.n	8007226 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	60da      	str	r2, [r3, #12]
}
 8007224:	e007      	b.n	8007236 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	60da      	str	r2, [r3, #12]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	58025408 	.word	0x58025408
 8007248:	5802541c 	.word	0x5802541c
 800724c:	58025430 	.word	0x58025430
 8007250:	58025444 	.word	0x58025444
 8007254:	58025458 	.word	0x58025458
 8007258:	5802546c 	.word	0x5802546c
 800725c:	58025480 	.word	0x58025480
 8007260:	58025494 	.word	0x58025494

08007264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a42      	ldr	r2, [pc, #264]	; (800737c <DMA_CalcBaseAndBitshift+0x118>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d04a      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a41      	ldr	r2, [pc, #260]	; (8007380 <DMA_CalcBaseAndBitshift+0x11c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d045      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a3f      	ldr	r2, [pc, #252]	; (8007384 <DMA_CalcBaseAndBitshift+0x120>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d040      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a3e      	ldr	r2, [pc, #248]	; (8007388 <DMA_CalcBaseAndBitshift+0x124>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d03b      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a3c      	ldr	r2, [pc, #240]	; (800738c <DMA_CalcBaseAndBitshift+0x128>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d036      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a3b      	ldr	r2, [pc, #236]	; (8007390 <DMA_CalcBaseAndBitshift+0x12c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d031      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a39      	ldr	r2, [pc, #228]	; (8007394 <DMA_CalcBaseAndBitshift+0x130>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d02c      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a38      	ldr	r2, [pc, #224]	; (8007398 <DMA_CalcBaseAndBitshift+0x134>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d027      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a36      	ldr	r2, [pc, #216]	; (800739c <DMA_CalcBaseAndBitshift+0x138>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d022      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a35      	ldr	r2, [pc, #212]	; (80073a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d01d      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a33      	ldr	r2, [pc, #204]	; (80073a4 <DMA_CalcBaseAndBitshift+0x140>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d018      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a32      	ldr	r2, [pc, #200]	; (80073a8 <DMA_CalcBaseAndBitshift+0x144>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d013      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a30      	ldr	r2, [pc, #192]	; (80073ac <DMA_CalcBaseAndBitshift+0x148>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00e      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2f      	ldr	r2, [pc, #188]	; (80073b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d009      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2d      	ldr	r2, [pc, #180]	; (80073b4 <DMA_CalcBaseAndBitshift+0x150>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d004      	beq.n	800730c <DMA_CalcBaseAndBitshift+0xa8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a2c      	ldr	r2, [pc, #176]	; (80073b8 <DMA_CalcBaseAndBitshift+0x154>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d101      	bne.n	8007310 <DMA_CalcBaseAndBitshift+0xac>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <DMA_CalcBaseAndBitshift+0xae>
 8007310:	2300      	movs	r3, #0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d024      	beq.n	8007360 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	3b10      	subs	r3, #16
 800731e:	4a27      	ldr	r2, [pc, #156]	; (80073bc <DMA_CalcBaseAndBitshift+0x158>)
 8007320:	fba2 2303 	umull	r2, r3, r2, r3
 8007324:	091b      	lsrs	r3, r3, #4
 8007326:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007330:	5cd3      	ldrb	r3, [r2, r3]
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b03      	cmp	r3, #3
 800733c:	d908      	bls.n	8007350 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	4b1f      	ldr	r3, [pc, #124]	; (80073c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007346:	4013      	ands	r3, r2
 8007348:	1d1a      	adds	r2, r3, #4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	659a      	str	r2, [r3, #88]	; 0x58
 800734e:	e00d      	b.n	800736c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	4b1b      	ldr	r3, [pc, #108]	; (80073c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007358:	4013      	ands	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6593      	str	r3, [r2, #88]	; 0x58
 800735e:	e005      	b.n	800736c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40020010 	.word	0x40020010
 8007380:	40020028 	.word	0x40020028
 8007384:	40020040 	.word	0x40020040
 8007388:	40020058 	.word	0x40020058
 800738c:	40020070 	.word	0x40020070
 8007390:	40020088 	.word	0x40020088
 8007394:	400200a0 	.word	0x400200a0
 8007398:	400200b8 	.word	0x400200b8
 800739c:	40020410 	.word	0x40020410
 80073a0:	40020428 	.word	0x40020428
 80073a4:	40020440 	.word	0x40020440
 80073a8:	40020458 	.word	0x40020458
 80073ac:	40020470 	.word	0x40020470
 80073b0:	40020488 	.word	0x40020488
 80073b4:	400204a0 	.word	0x400204a0
 80073b8:	400204b8 	.word	0x400204b8
 80073bc:	aaaaaaab 	.word	0xaaaaaaab
 80073c0:	08018888 	.word	0x08018888
 80073c4:	fffffc00 	.word	0xfffffc00

080073c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d120      	bne.n	800741e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d858      	bhi.n	8007496 <DMA_CheckFifoParam+0xce>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <DMA_CheckFifoParam+0x24>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	080073fd 	.word	0x080073fd
 80073f0:	0800740f 	.word	0x0800740f
 80073f4:	080073fd 	.word	0x080073fd
 80073f8:	08007497 	.word	0x08007497
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d048      	beq.n	800749a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800740c:	e045      	b.n	800749a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007416:	d142      	bne.n	800749e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800741c:	e03f      	b.n	800749e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007426:	d123      	bne.n	8007470 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	2b03      	cmp	r3, #3
 800742e:	d838      	bhi.n	80074a2 <DMA_CheckFifoParam+0xda>
 8007430:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <DMA_CheckFifoParam+0x70>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	08007449 	.word	0x08007449
 800743c:	0800744f 	.word	0x0800744f
 8007440:	08007449 	.word	0x08007449
 8007444:	08007461 	.word	0x08007461
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
        break;
 800744c:	e030      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d025      	beq.n	80074a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800745e:	e022      	b.n	80074a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007468:	d11f      	bne.n	80074aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800746e:	e01c      	b.n	80074aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	2b02      	cmp	r3, #2
 8007476:	d902      	bls.n	800747e <DMA_CheckFifoParam+0xb6>
 8007478:	2b03      	cmp	r3, #3
 800747a:	d003      	beq.n	8007484 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800747c:	e018      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
        break;
 8007482:	e015      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00e      	beq.n	80074ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
    break;
 8007494:	e00b      	b.n	80074ae <DMA_CheckFifoParam+0xe6>
        break;
 8007496:	bf00      	nop
 8007498:	e00a      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
        break;
 800749a:	bf00      	nop
 800749c:	e008      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
        break;
 800749e:	bf00      	nop
 80074a0:	e006      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
        break;
 80074a2:	bf00      	nop
 80074a4:	e004      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
        break;
 80074a6:	bf00      	nop
 80074a8:	e002      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
        break;
 80074aa:	bf00      	nop
 80074ac:	e000      	b.n	80074b0 <DMA_CheckFifoParam+0xe8>
    break;
 80074ae:	bf00      	nop
    }
  }

  return status;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop

080074c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a38      	ldr	r2, [pc, #224]	; (80075b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d022      	beq.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a36      	ldr	r2, [pc, #216]	; (80075b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d01d      	beq.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a35      	ldr	r2, [pc, #212]	; (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d018      	beq.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a33      	ldr	r2, [pc, #204]	; (80075c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d013      	beq.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a32      	ldr	r2, [pc, #200]	; (80075c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00e      	beq.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a30      	ldr	r2, [pc, #192]	; (80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d009      	beq.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a2f      	ldr	r2, [pc, #188]	; (80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d004      	beq.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a2d      	ldr	r2, [pc, #180]	; (80075d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d101      	bne.n	8007522 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01a      	beq.n	800755e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	3b08      	subs	r3, #8
 8007530:	4a28      	ldr	r2, [pc, #160]	; (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007532:	fba2 2303 	umull	r2, r3, r2, r3
 8007536:	091b      	lsrs	r3, r3, #4
 8007538:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4b26      	ldr	r3, [pc, #152]	; (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a24      	ldr	r2, [pc, #144]	; (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800754c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 031f 	and.w	r3, r3, #31
 8007554:	2201      	movs	r2, #1
 8007556:	409a      	lsls	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800755c:	e024      	b.n	80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	3b10      	subs	r3, #16
 8007566:	4a1e      	ldr	r2, [pc, #120]	; (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007568:	fba2 2303 	umull	r2, r3, r2, r3
 800756c:	091b      	lsrs	r3, r3, #4
 800756e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d806      	bhi.n	8007586 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d902      	bls.n	8007586 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3308      	adds	r3, #8
 8007584:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4b18      	ldr	r3, [pc, #96]	; (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007598:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2201      	movs	r2, #1
 80075a2:	409a      	lsls	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	58025408 	.word	0x58025408
 80075b8:	5802541c 	.word	0x5802541c
 80075bc:	58025430 	.word	0x58025430
 80075c0:	58025444 	.word	0x58025444
 80075c4:	58025458 	.word	0x58025458
 80075c8:	5802546c 	.word	0x5802546c
 80075cc:	58025480 	.word	0x58025480
 80075d0:	58025494 	.word	0x58025494
 80075d4:	cccccccd 	.word	0xcccccccd
 80075d8:	16009600 	.word	0x16009600
 80075dc:	58025880 	.word	0x58025880
 80075e0:	aaaaaaab 	.word	0xaaaaaaab
 80075e4:	400204b8 	.word	0x400204b8
 80075e8:	4002040f 	.word	0x4002040f
 80075ec:	10008200 	.word	0x10008200
 80075f0:	40020880 	.word	0x40020880

080075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d04a      	beq.n	80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d847      	bhi.n	80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a25      	ldr	r2, [pc, #148]	; (80076ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d022      	beq.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a24      	ldr	r2, [pc, #144]	; (80076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d01d      	beq.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d018      	beq.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a21      	ldr	r2, [pc, #132]	; (80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d013      	beq.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00e      	beq.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d009      	beq.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d004      	beq.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d101      	bne.n	8007664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007664:	2300      	movs	r3, #0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4b17      	ldr	r3, [pc, #92]	; (80076cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800767c:	671a      	str	r2, [r3, #112]	; 0x70
 800767e:	e009      	b.n	8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	461a      	mov	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a11      	ldr	r2, [pc, #68]	; (80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007692:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3b01      	subs	r3, #1
 8007698:	2201      	movs	r2, #1
 800769a:	409a      	lsls	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	58025408 	.word	0x58025408
 80076b0:	5802541c 	.word	0x5802541c
 80076b4:	58025430 	.word	0x58025430
 80076b8:	58025444 	.word	0x58025444
 80076bc:	58025458 	.word	0x58025458
 80076c0:	5802546c 	.word	0x5802546c
 80076c4:	58025480 	.word	0x58025480
 80076c8:	58025494 	.word	0x58025494
 80076cc:	1600963f 	.word	0x1600963f
 80076d0:	58025940 	.word	0x58025940
 80076d4:	1000823f 	.word	0x1000823f
 80076d8:	40020940 	.word	0x40020940

080076dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b098      	sub	sp, #96	; 0x60
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80076e4:	4a84      	ldr	r2, [pc, #528]	; (80078f8 <HAL_FDCAN_Init+0x21c>)
 80076e6:	f107 030c 	add.w	r3, r7, #12
 80076ea:	4611      	mov	r1, r2
 80076ec:	224c      	movs	r2, #76	; 0x4c
 80076ee:	4618      	mov	r0, r3
 80076f0:	f00f feb8 	bl	8017464 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e1c6      	b.n	8007a8c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a7e      	ldr	r2, [pc, #504]	; (80078fc <HAL_FDCAN_Init+0x220>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d106      	bne.n	8007716 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fb fa6a 	bl	8002c04 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0210 	bic.w	r2, r2, #16
 800773e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007740:	f7fc fa32 	bl	8003ba8 <HAL_GetTick>
 8007744:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007746:	e014      	b.n	8007772 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007748:	f7fc fa2e 	bl	8003ba8 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b0a      	cmp	r3, #10
 8007754:	d90d      	bls.n	8007772 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800775c:	f043 0201 	orr.w	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2203      	movs	r2, #3
 800776a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e18c      	b.n	8007a8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d0e3      	beq.n	8007748 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0201 	orr.w	r2, r2, #1
 800778e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007790:	f7fc fa0a 	bl	8003ba8 <HAL_GetTick>
 8007794:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007796:	e014      	b.n	80077c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007798:	f7fc fa06 	bl	8003ba8 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b0a      	cmp	r3, #10
 80077a4:	d90d      	bls.n	80077c2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077ac:	f043 0201 	orr.w	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2203      	movs	r2, #3
 80077ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e164      	b.n	8007a8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0e3      	beq.n	8007798 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0202 	orr.w	r2, r2, #2
 80077de:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7c1b      	ldrb	r3, [r3, #16]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d108      	bne.n	80077fa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f6:	619a      	str	r2, [r3, #24]
 80077f8:	e007      	b.n	800780a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007808:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7c5b      	ldrb	r3, [r3, #17]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d108      	bne.n	8007824 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007820:	619a      	str	r2, [r3, #24]
 8007822:	e007      	b.n	8007834 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007832:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7c9b      	ldrb	r3, [r3, #18]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d108      	bne.n	800784e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800784a:	619a      	str	r2, [r3, #24]
 800784c:	e007      	b.n	800785e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699a      	ldr	r2, [r3, #24]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800785c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699a      	ldr	r2, [r3, #24]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007882:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0210 	bic.w	r2, r2, #16
 8007892:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d108      	bne.n	80078ae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0204 	orr.w	r2, r2, #4
 80078aa:	619a      	str	r2, [r3, #24]
 80078ac:	e030      	b.n	8007910 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d02c      	beq.n	8007910 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d020      	beq.n	8007900 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0210 	orr.w	r2, r2, #16
 80078dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d114      	bne.n	8007910 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699a      	ldr	r2, [r3, #24]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0220 	orr.w	r2, r2, #32
 80078f4:	619a      	str	r2, [r3, #24]
 80078f6:	e00b      	b.n	8007910 <HAL_FDCAN_Init+0x234>
 80078f8:	08018774 	.word	0x08018774
 80078fc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0220 	orr.w	r2, r2, #32
 800790e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	3b01      	subs	r3, #1
 8007916:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	3b01      	subs	r3, #1
 800791e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007920:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007928:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	3b01      	subs	r3, #1
 8007932:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007938:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800793a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007944:	d115      	bne.n	8007972 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	3b01      	subs	r3, #1
 8007952:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007954:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	3b01      	subs	r3, #1
 800795c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800795e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	3b01      	subs	r3, #1
 8007968:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800796e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007970:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007998:	4413      	add	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d011      	beq.n	80079c2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80079a6:	f023 0107 	bic.w	r1, r3, #7
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	3360      	adds	r3, #96	; 0x60
 80079b2:	443b      	add	r3, r7
 80079b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d011      	beq.n	80079ee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80079d2:	f023 0107 	bic.w	r1, r3, #7
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	3360      	adds	r3, #96	; 0x60
 80079de:	443b      	add	r3, r7
 80079e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d012      	beq.n	8007a1c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80079fe:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	3360      	adds	r3, #96	; 0x60
 8007a0a:	443b      	add	r3, r7
 8007a0c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a10:	011a      	lsls	r2, r3, #4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d012      	beq.n	8007a4a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007a2c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	3360      	adds	r3, #96	; 0x60
 8007a38:	443b      	add	r3, r7
 8007a3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a3e:	021a      	lsls	r2, r3, #8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a11      	ldr	r2, [pc, #68]	; (8007a94 <HAL_FDCAN_Init+0x3b8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d107      	bne.n	8007a64 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f022 0203 	bic.w	r2, r2, #3
 8007a62:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f80b 	bl	8007a98 <FDCAN_CalcultateRamBlockAddresses>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007a88:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3760      	adds	r7, #96	; 0x60
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	4000a000 	.word	0x4000a000

08007a98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007aae:	4ba7      	ldr	r3, [pc, #668]	; (8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	0091      	lsls	r1, r2, #2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	430b      	orrs	r3, r1
 8007abc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	041a      	lsls	r2, r3, #16
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007aee:	4b97      	ldr	r3, [pc, #604]	; (8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	0091      	lsls	r1, r2, #2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	430b      	orrs	r3, r1
 8007afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b08:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b10:	041a      	lsls	r2, r3, #16
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007b30:	4b86      	ldr	r3, [pc, #536]	; (8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	0091      	lsls	r1, r2, #2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b4a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	041a      	lsls	r2, r3, #16
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007b78:	4b74      	ldr	r3, [pc, #464]	; (8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	0091      	lsls	r1, r2, #2
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6812      	ldr	r2, [r2, #0]
 8007b84:	430b      	orrs	r3, r1
 8007b86:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b92:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9a:	041a      	lsls	r2, r3, #16
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007bc0:	4b62      	ldr	r3, [pc, #392]	; (8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	0091      	lsls	r1, r2, #2
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6812      	ldr	r2, [r2, #0]
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007bec:	4b57      	ldr	r3, [pc, #348]	; (8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	0091      	lsls	r1, r2, #2
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c06:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0e:	041a      	lsls	r2, r3, #16
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	4413      	add	r3, r2
 8007c24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007c2e:	4b47      	ldr	r3, [pc, #284]	; (8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	0091      	lsls	r1, r2, #2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	430b      	orrs	r3, r1
 8007c3c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c48:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c50:	041a      	lsls	r2, r3, #16
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c64:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6c:	061a      	lsls	r2, r3, #24
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c7c:	4b34      	ldr	r3, [pc, #208]	; (8007d50 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007c7e:	4413      	add	r3, r2
 8007c80:	009a      	lsls	r2, r3, #2
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	441a      	add	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007cb2:	fb01 f303 	mul.w	r3, r1, r3
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007cca:	fb01 f303 	mul.w	r3, r1, r3
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	441a      	add	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	441a      	add	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007d12:	fb01 f303 	mul.w	r3, r1, r3
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007d2e:	fb01 f303 	mul.w	r3, r1, r3
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	441a      	add	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d42:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d915      	bls.n	8007d74 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007d48:	e006      	b.n	8007d58 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007d4a:	bf00      	nop
 8007d4c:	ffff0003 	.word	0xffff0003
 8007d50:	10002b00 	.word	0x10002b00
 8007d54:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d5e:	f043 0220 	orr.w	r2, r3, #32
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e010      	b.n	8007d96 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	e005      	b.n	8007d88 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3304      	adds	r3, #4
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d3f3      	bcc.n	8007d7c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop

08007da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b089      	sub	sp, #36	; 0x24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007db2:	4b86      	ldr	r3, [pc, #536]	; (8007fcc <HAL_GPIO_Init+0x228>)
 8007db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007db6:	e18c      	b.n	80080d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 817e 	beq.w	80080cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d005      	beq.n	8007de8 <HAL_GPIO_Init+0x44>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d130      	bne.n	8007e4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	2203      	movs	r2, #3
 8007df4:	fa02 f303 	lsl.w	r3, r2, r3
 8007df8:	43db      	mvns	r3, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e1e:	2201      	movs	r2, #1
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	43db      	mvns	r3, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	091b      	lsrs	r3, r3, #4
 8007e34:	f003 0201 	and.w	r2, r3, #1
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d017      	beq.n	8007e86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	2203      	movs	r2, #3
 8007e62:	fa02 f303 	lsl.w	r3, r2, r3
 8007e66:	43db      	mvns	r3, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d123      	bne.n	8007eda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	08da      	lsrs	r2, r3, #3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3208      	adds	r2, #8
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	220f      	movs	r2, #15
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691a      	ldr	r2, [r3, #16]
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	08da      	lsrs	r2, r3, #3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3208      	adds	r2, #8
 8007ed4:	69b9      	ldr	r1, [r7, #24]
 8007ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f003 0203 	and.w	r2, r3, #3
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 80d8 	beq.w	80080cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f1c:	4b2c      	ldr	r3, [pc, #176]	; (8007fd0 <HAL_GPIO_Init+0x22c>)
 8007f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f22:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <HAL_GPIO_Init+0x22c>)
 8007f24:	f043 0302 	orr.w	r3, r3, #2
 8007f28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f2c:	4b28      	ldr	r3, [pc, #160]	; (8007fd0 <HAL_GPIO_Init+0x22c>)
 8007f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f3a:	4a26      	ldr	r2, [pc, #152]	; (8007fd4 <HAL_GPIO_Init+0x230>)
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	089b      	lsrs	r3, r3, #2
 8007f40:	3302      	adds	r3, #2
 8007f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	220f      	movs	r2, #15
 8007f52:	fa02 f303 	lsl.w	r3, r2, r3
 8007f56:	43db      	mvns	r3, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1d      	ldr	r2, [pc, #116]	; (8007fd8 <HAL_GPIO_Init+0x234>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d04a      	beq.n	8007ffc <HAL_GPIO_Init+0x258>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1c      	ldr	r2, [pc, #112]	; (8007fdc <HAL_GPIO_Init+0x238>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d02b      	beq.n	8007fc6 <HAL_GPIO_Init+0x222>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <HAL_GPIO_Init+0x23c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d025      	beq.n	8007fc2 <HAL_GPIO_Init+0x21e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a1a      	ldr	r2, [pc, #104]	; (8007fe4 <HAL_GPIO_Init+0x240>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d01f      	beq.n	8007fbe <HAL_GPIO_Init+0x21a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a19      	ldr	r2, [pc, #100]	; (8007fe8 <HAL_GPIO_Init+0x244>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d019      	beq.n	8007fba <HAL_GPIO_Init+0x216>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a18      	ldr	r2, [pc, #96]	; (8007fec <HAL_GPIO_Init+0x248>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d013      	beq.n	8007fb6 <HAL_GPIO_Init+0x212>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a17      	ldr	r2, [pc, #92]	; (8007ff0 <HAL_GPIO_Init+0x24c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00d      	beq.n	8007fb2 <HAL_GPIO_Init+0x20e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a16      	ldr	r2, [pc, #88]	; (8007ff4 <HAL_GPIO_Init+0x250>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d007      	beq.n	8007fae <HAL_GPIO_Init+0x20a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <HAL_GPIO_Init+0x254>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d101      	bne.n	8007faa <HAL_GPIO_Init+0x206>
 8007fa6:	2309      	movs	r3, #9
 8007fa8:	e029      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007faa:	230a      	movs	r3, #10
 8007fac:	e027      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fae:	2307      	movs	r3, #7
 8007fb0:	e025      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fb2:	2306      	movs	r3, #6
 8007fb4:	e023      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fb6:	2305      	movs	r3, #5
 8007fb8:	e021      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fba:	2304      	movs	r3, #4
 8007fbc:	e01f      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e01d      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e01b      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e019      	b.n	8007ffe <HAL_GPIO_Init+0x25a>
 8007fca:	bf00      	nop
 8007fcc:	58000080 	.word	0x58000080
 8007fd0:	58024400 	.word	0x58024400
 8007fd4:	58000400 	.word	0x58000400
 8007fd8:	58020000 	.word	0x58020000
 8007fdc:	58020400 	.word	0x58020400
 8007fe0:	58020800 	.word	0x58020800
 8007fe4:	58020c00 	.word	0x58020c00
 8007fe8:	58021000 	.word	0x58021000
 8007fec:	58021400 	.word	0x58021400
 8007ff0:	58021800 	.word	0x58021800
 8007ff4:	58021c00 	.word	0x58021c00
 8007ff8:	58022400 	.word	0x58022400
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	f002 0203 	and.w	r2, r2, #3
 8008004:	0092      	lsls	r2, r2, #2
 8008006:	4093      	lsls	r3, r2
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	4313      	orrs	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800800e:	4938      	ldr	r1, [pc, #224]	; (80080f0 <HAL_GPIO_Init+0x34c>)
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	089b      	lsrs	r3, r3, #2
 8008014:	3302      	adds	r3, #2
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800801c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	43db      	mvns	r3, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4013      	ands	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4313      	orrs	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800804a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	43db      	mvns	r3, r3
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	4013      	ands	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	43db      	mvns	r3, r3
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	4013      	ands	r3, r2
 8008086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	43db      	mvns	r3, r3
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	4013      	ands	r3, r2
 80080b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	3301      	adds	r3, #1
 80080d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f47f ae6b 	bne.w	8007db8 <HAL_GPIO_Init+0x14>
  }
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	3724      	adds	r7, #36	; 0x24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	58000400 	.word	0x58000400

080080f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	887b      	ldrh	r3, [r7, #2]
 8008106:	4013      	ands	r3, r2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
 8008110:	e001      	b.n	8008116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	807b      	strh	r3, [r7, #2]
 8008130:	4613      	mov	r3, r2
 8008132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008134:	787b      	ldrb	r3, [r7, #1]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800813a:	887a      	ldrh	r2, [r7, #2]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008140:	e003      	b.n	800814a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008142:	887b      	ldrh	r3, [r7, #2]
 8008144:	041a      	lsls	r2, r3, #16
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	619a      	str	r2, [r3, #24]
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e07f      	b.n	800826a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fa fda8 	bl	8002cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d107      	bne.n	80081d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689a      	ldr	r2, [r3, #8]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ce:	609a      	str	r2, [r3, #8]
 80081d0:	e006      	b.n	80081e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80081de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d104      	bne.n	80081f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6859      	ldr	r1, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4b1d      	ldr	r3, [pc, #116]	; (8008274 <HAL_I2C_Init+0x11c>)
 80081fe:	430b      	orrs	r3, r1
 8008200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69d9      	ldr	r1, [r3, #28]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a1a      	ldr	r2, [r3, #32]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	02008000 	.word	0x02008000

08008278 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
  }
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d138      	bne.n	8008334 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e032      	b.n	8008336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2224      	movs	r2, #36	; 0x24
 80082dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0201 	bic.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6819      	ldr	r1, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	e000      	b.n	8008336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008334:	2302      	movs	r3, #2
  }
}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b20      	cmp	r3, #32
 8008356:	d139      	bne.n	80083cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008362:	2302      	movs	r3, #2
 8008364:	e033      	b.n	80083ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2224      	movs	r2, #36	; 0x24
 8008372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0201 	bic.w	r2, r2, #1
 8008384:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008394:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0201 	orr.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e000      	b.n	80083ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80083cc:	2302      	movs	r3, #2
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80083da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083dc:	b08f      	sub	sp, #60	; 0x3c
 80083de:	af0a      	add	r7, sp, #40	; 0x28
 80083e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e116      	b.n	800861a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f00e fc96 	bl	8016d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2203      	movs	r2, #3
 8008410:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4618      	mov	r0, r3
 800842c:	f00a fd9b 	bl	8012f66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	603b      	str	r3, [r7, #0]
 8008436:	687e      	ldr	r6, [r7, #4]
 8008438:	466d      	mov	r5, sp
 800843a:	f106 0410 	add.w	r4, r6, #16
 800843e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800844a:	e885 0003 	stmia.w	r5, {r0, r1}
 800844e:	1d33      	adds	r3, r6, #4
 8008450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008452:	6838      	ldr	r0, [r7, #0]
 8008454:	f00a fc66 	bl	8012d24 <USB_CoreInit>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2202      	movs	r2, #2
 8008462:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e0d7      	b.n	800861a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2100      	movs	r1, #0
 8008470:	4618      	mov	r0, r3
 8008472:	f00a fd89 	bl	8012f88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
 800847a:	e04a      	b.n	8008512 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800847c:	7bfa      	ldrb	r2, [r7, #15]
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4613      	mov	r3, r2
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	333d      	adds	r3, #61	; 0x3d
 800848c:	2201      	movs	r2, #1
 800848e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008490:	7bfa      	ldrb	r2, [r7, #15]
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	333c      	adds	r3, #60	; 0x3c
 80084a0:	7bfa      	ldrb	r2, [r7, #15]
 80084a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80084a4:	7bfa      	ldrb	r2, [r7, #15]
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	b298      	uxth	r0, r3
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	3356      	adds	r3, #86	; 0x56
 80084b8:	4602      	mov	r2, r0
 80084ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80084bc:	7bfa      	ldrb	r2, [r7, #15]
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	3340      	adds	r3, #64	; 0x40
 80084cc:	2200      	movs	r2, #0
 80084ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80084d0:	7bfa      	ldrb	r2, [r7, #15]
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	4613      	mov	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	3344      	adds	r3, #68	; 0x44
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80084e4:	7bfa      	ldrb	r2, [r7, #15]
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	3348      	adds	r3, #72	; 0x48
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	334c      	adds	r3, #76	; 0x4c
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	3301      	adds	r3, #1
 8008510:	73fb      	strb	r3, [r7, #15]
 8008512:	7bfa      	ldrb	r2, [r7, #15]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	429a      	cmp	r2, r3
 800851a:	d3af      	bcc.n	800847c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
 8008520:	e044      	b.n	80085ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008522:	7bfa      	ldrb	r2, [r7, #15]
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008534:	2200      	movs	r2, #0
 8008536:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008538:	7bfa      	ldrb	r2, [r7, #15]
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4613      	mov	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800854a:	7bfa      	ldrb	r2, [r7, #15]
 800854c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800854e:	7bfa      	ldrb	r2, [r7, #15]
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008564:	7bfa      	ldrb	r2, [r7, #15]
 8008566:	6879      	ldr	r1, [r7, #4]
 8008568:	4613      	mov	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800857a:	7bfa      	ldrb	r2, [r7, #15]
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008590:	7bfa      	ldrb	r2, [r7, #15]
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	4613      	mov	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	3301      	adds	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]
 80085ac:	7bfa      	ldrb	r2, [r7, #15]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d3b5      	bcc.n	8008522 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	687e      	ldr	r6, [r7, #4]
 80085be:	466d      	mov	r5, sp
 80085c0:	f106 0410 	add.w	r4, r6, #16
 80085c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80085d4:	1d33      	adds	r3, r6, #4
 80085d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085d8:	6838      	ldr	r0, [r7, #0]
 80085da:	f00a fd21 	bl	8013020 <USB_DevInit>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e014      	b.n	800861a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b01      	cmp	r3, #1
 8008606:	d102      	bne.n	800860e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f96f 	bl	80098ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f00b fd63 	bl	80140de <USB_DevDisconnect>

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008622 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_PCD_Start+0x1c>
 800863a:	2302      	movs	r3, #2
 800863c:	e022      	b.n	8008684 <HAL_PCD_Start+0x62>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008656:	2b01      	cmp	r3, #1
 8008658:	d105      	bne.n	8008666 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f00a fc6a 	bl	8012f44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f00b fd11 	bl	801409c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800868c:	b590      	push	{r4, r7, lr}
 800868e:	b08d      	sub	sp, #52	; 0x34
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f00b fdcf 	bl	8014246 <USB_GetMode>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f040 84b7 	bne.w	800901e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f00b fd33 	bl	8014120 <USB_ReadInterrupts>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 84ad 	beq.w	800901c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	0a1b      	lsrs	r3, r3, #8
 80086cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f00b fd20 	bl	8014120 <USB_ReadInterrupts>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d107      	bne.n	80086fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	695a      	ldr	r2, [r3, #20]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f002 0202 	and.w	r2, r2, #2
 80086f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f00b fd0e 	bl	8014120 <USB_ReadInterrupts>
 8008704:	4603      	mov	r3, r0
 8008706:	f003 0310 	and.w	r3, r3, #16
 800870a:	2b10      	cmp	r3, #16
 800870c:	d161      	bne.n	80087d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0210 	bic.w	r2, r2, #16
 800871c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	f003 020f 	and.w	r2, r3, #15
 800872a:	4613      	mov	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	0c5b      	lsrs	r3, r3, #17
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	2b02      	cmp	r3, #2
 8008748:	d124      	bne.n	8008794 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008750:	4013      	ands	r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d035      	beq.n	80087c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	091b      	lsrs	r3, r3, #4
 800875e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008764:	b29b      	uxth	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	6a38      	ldr	r0, [r7, #32]
 800876a:	f00b fb45 	bl	8013df8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800877a:	441a      	add	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	695a      	ldr	r2, [r3, #20]
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800878c:	441a      	add	r2, r3
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	615a      	str	r2, [r3, #20]
 8008792:	e016      	b.n	80087c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	0c5b      	lsrs	r3, r3, #17
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	2b06      	cmp	r3, #6
 800879e:	d110      	bne.n	80087c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087a6:	2208      	movs	r2, #8
 80087a8:	4619      	mov	r1, r3
 80087aa:	6a38      	ldr	r0, [r7, #32]
 80087ac:	f00b fb24 	bl	8013df8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	695a      	ldr	r2, [r3, #20]
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	091b      	lsrs	r3, r3, #4
 80087b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087bc:	441a      	add	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0210 	orr.w	r2, r2, #16
 80087d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00b fca2 	bl	8014120 <USB_ReadInterrupts>
 80087dc:	4603      	mov	r3, r0
 80087de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087e6:	f040 80a7 	bne.w	8008938 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f00b fca7 	bl	8014146 <USB_ReadDevAllOutEpInterrupt>
 80087f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80087fa:	e099      	b.n	8008930 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 808e 	beq.w	8008924 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	4611      	mov	r1, r2
 8008812:	4618      	mov	r0, r3
 8008814:	f00b fccb 	bl	80141ae <USB_ReadDevOutEPInterrupt>
 8008818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00c      	beq.n	800883e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	461a      	mov	r2, r3
 8008832:	2301      	movs	r3, #1
 8008834:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fed1 	bl	80095e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f003 0308 	and.w	r3, r3, #8
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00c      	beq.n	8008862 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008854:	461a      	mov	r2, r3
 8008856:	2308      	movs	r3, #8
 8008858:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800885a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 ffa7 	bl	80097b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008878:	461a      	mov	r2, r3
 800887a:	2310      	movs	r3, #16
 800887c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d030      	beq.n	80088ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008890:	2b80      	cmp	r3, #128	; 0x80
 8008892:	d109      	bne.n	80088a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80088a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088aa:	4613      	mov	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	4413      	add	r3, r2
 80088ba:	3304      	adds	r3, #4
 80088bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	78db      	ldrb	r3, [r3, #3]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d108      	bne.n	80088d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f00e fb28 	bl	8016f28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	461a      	mov	r2, r3
 80088e6:	2302      	movs	r3, #2
 80088e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	461a      	mov	r2, r3
 8008902:	2320      	movs	r3, #32
 8008904:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	461a      	mov	r2, r3
 800891e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008922:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	3301      	adds	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	085b      	lsrs	r3, r3, #1
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	f47f af62 	bne.w	80087fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f00b fbef 	bl	8014120 <USB_ReadInterrupts>
 8008942:	4603      	mov	r3, r0
 8008944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800894c:	f040 80db 	bne.w	8008b06 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f00b fc10 	bl	801417a <USB_ReadDevAllInEpInterrupt>
 800895a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008960:	e0cd      	b.n	8008afe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 80c2 	beq.w	8008af2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008974:	b2d2      	uxtb	r2, r2
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f00b fc36 	bl	80141ea <USB_ReadDevInEPInterrupt>
 800897e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d057      	beq.n	8008a3a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	2201      	movs	r2, #1
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	43db      	mvns	r3, r3
 80089a4:	69f9      	ldr	r1, [r7, #28]
 80089a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089aa:	4013      	ands	r3, r2
 80089ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ba:	461a      	mov	r2, r3
 80089bc:	2301      	movs	r3, #1
 80089be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d132      	bne.n	8008a2e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089cc:	4613      	mov	r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	3348      	adds	r3, #72	; 0x48
 80089d8:	6819      	ldr	r1, [r3, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089de:	4613      	mov	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4403      	add	r3, r0
 80089e8:	3344      	adds	r3, #68	; 0x44
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4419      	add	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	4613      	mov	r3, r2
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4403      	add	r3, r0
 80089fc:	3348      	adds	r3, #72	; 0x48
 80089fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d113      	bne.n	8008a2e <HAL_PCD_IRQHandler+0x3a2>
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	334c      	adds	r3, #76	; 0x4c
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d108      	bne.n	8008a2e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a26:	461a      	mov	r2, r3
 8008a28:	2101      	movs	r1, #1
 8008a2a:	f00b fc3f 	bl	80142ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f00e f9f2 	bl	8016e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d008      	beq.n	8008a56 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a50:	461a      	mov	r2, r3
 8008a52:	2308      	movs	r3, #8
 8008a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	2310      	movs	r3, #16
 8008a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d008      	beq.n	8008a8e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	461a      	mov	r2, r3
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d023      	beq.n	8008ae0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a9a:	6a38      	ldr	r0, [r7, #32]
 8008a9c:	f00a fc1e 	bl	80132dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	3338      	adds	r3, #56	; 0x38
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	78db      	ldrb	r3, [r3, #3]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d108      	bne.n	8008ace <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f00e fa3f 	bl	8016f4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ada:	461a      	mov	r2, r3
 8008adc:	2302      	movs	r3, #2
 8008ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fcea 	bl	80094c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	3301      	adds	r3, #1
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f47f af2e 	bne.w	8008962 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f00b fb08 	bl	8014120 <USB_ReadInterrupts>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b1a:	d122      	bne.n	8008b62 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b2a:	f023 0301 	bic.w	r3, r3, #1
 8008b2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d108      	bne.n	8008b4c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008b42:	2100      	movs	r1, #0
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fef5 	bl	8009934 <HAL_PCDEx_LPM_Callback>
 8008b4a:	e002      	b.n	8008b52 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f00e f9dd 	bl	8016f0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f00b fada 	bl	8014120 <USB_ReadInterrupts>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b76:	d112      	bne.n	8008b9e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d102      	bne.n	8008b8e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f00e f999 	bl	8016ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f00b fabc 	bl	8014120 <USB_ReadInterrupts>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bb2:	d121      	bne.n	8008bf8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695a      	ldr	r2, [r3, #20]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008bc2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d111      	bne.n	8008bf2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bdc:	089b      	lsrs	r3, r3, #2
 8008bde:	f003 020f 	and.w	r2, r3, #15
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008be8:	2101      	movs	r1, #1
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fea2 	bl	8009934 <HAL_PCDEx_LPM_Callback>
 8008bf0:	e002      	b.n	8008bf8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f00e f964 	bl	8016ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f00b fa8f 	bl	8014120 <USB_ReadInterrupts>
 8008c02:	4603      	mov	r3, r0
 8008c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0c:	f040 80b7 	bne.w	8008d7e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c1e:	f023 0301 	bic.w	r3, r3, #1
 8008c22:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2110      	movs	r1, #16
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f00a fb56 	bl	80132dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c30:	2300      	movs	r3, #0
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c34:	e046      	b.n	8008cc4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c42:	461a      	mov	r2, r3
 8008c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c48:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c5a:	0151      	lsls	r1, r2, #5
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	440a      	add	r2, r1
 8008c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c76:	461a      	mov	r2, r3
 8008c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d3b3      	bcc.n	8008c36 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cdc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ce0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d016      	beq.n	8008d18 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfa:	f043 030b 	orr.w	r3, r3, #11
 8008cfe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0a:	69fa      	ldr	r2, [r7, #28]
 8008d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d10:	f043 030b 	orr.w	r3, r3, #11
 8008d14:	6453      	str	r3, [r2, #68]	; 0x44
 8008d16:	e015      	b.n	8008d44 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1e:	695a      	ldr	r2, [r3, #20]
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d26:	4619      	mov	r1, r3
 8008d28:	f242 032b 	movw	r3, #8235	; 0x202b
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d3e:	f043 030b 	orr.w	r3, r3, #11
 8008d42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f00b fa9f 	bl	80142ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695a      	ldr	r2, [r3, #20]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f00b f9cc 	bl	8014120 <USB_ReadInterrupts>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d92:	d124      	bne.n	8008dde <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f00b fa63 	bl	8014264 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f00a fb17 	bl	80133d6 <USB_GetDevSpeed>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681c      	ldr	r4, [r3, #0]
 8008db4:	f001 fd88 	bl	800a8c8 <HAL_RCC_GetHCLKFreq>
 8008db8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f00a f81c 	bl	8012e00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f00e f850 	bl	8016e6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695a      	ldr	r2, [r3, #20]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f00b f99c 	bl	8014120 <USB_ReadInterrupts>
 8008de8:	4603      	mov	r3, r0
 8008dea:	f003 0308 	and.w	r3, r3, #8
 8008dee:	2b08      	cmp	r3, #8
 8008df0:	d10a      	bne.n	8008e08 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f00e f82d 	bl	8016e52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695a      	ldr	r2, [r3, #20]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f002 0208 	and.w	r2, r2, #8
 8008e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f00b f987 	bl	8014120 <USB_ReadInterrupts>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e18:	2b80      	cmp	r3, #128	; 0x80
 8008e1a:	d122      	bne.n	8008e62 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e28:	2301      	movs	r3, #1
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2c:	e014      	b.n	8008e58 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e32:	4613      	mov	r3, r2
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d105      	bne.n	8008e52 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fb09 	bl	8009464 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	3301      	adds	r3, #1
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d3e5      	bcc.n	8008e2e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f00b f95a 	bl	8014120 <USB_ReadInterrupts>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e76:	d13b      	bne.n	8008ef0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e78:	2301      	movs	r3, #1
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7c:	e02b      	b.n	8008ed6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e92:	4613      	mov	r3, r2
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3340      	adds	r3, #64	; 0x40
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d115      	bne.n	8008ed0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008ea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	da12      	bge.n	8008ed0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eae:	4613      	mov	r3, r2
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	333f      	adds	r3, #63	; 0x3f
 8008eba:	2201      	movs	r2, #1
 8008ebc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 faca 	bl	8009464 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d3ce      	bcc.n	8008e7e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695a      	ldr	r2, [r3, #20]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f00b f913 	bl	8014120 <USB_ReadInterrupts>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f04:	d155      	bne.n	8008fb2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f06:	2301      	movs	r3, #1
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0a:	e045      	b.n	8008f98 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f1c:	6879      	ldr	r1, [r7, #4]
 8008f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f20:	4613      	mov	r3, r2
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d12e      	bne.n	8008f92 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008f34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da2b      	bge.n	8008f92 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008f46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d121      	bne.n	8008f92 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f52:	4613      	mov	r3, r2
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008f60:	2201      	movs	r2, #1
 8008f62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f8e:	6053      	str	r3, [r2, #4]
            break;
 8008f90:	e007      	b.n	8008fa2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	3301      	adds	r3, #1
 8008f96:	627b      	str	r3, [r7, #36]	; 0x24
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d3b4      	bcc.n	8008f0c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695a      	ldr	r2, [r3, #20]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f00b f8b2 	bl	8014120 <USB_ReadInterrupts>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc6:	d10a      	bne.n	8008fde <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f00d ffd1 	bl	8016f70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695a      	ldr	r2, [r3, #20]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f00b f89c 	bl	8014120 <USB_ReadInterrupts>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d115      	bne.n	800901e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f00d ffc1 	bl	8016f8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6859      	ldr	r1, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
 800901a:	e000      	b.n	800901e <HAL_PCD_IRQHandler+0x992>
      return;
 800901c:	bf00      	nop
    }
  }
}
 800901e:	3734      	adds	r7, #52	; 0x34
 8009020:	46bd      	mov	sp, r7
 8009022:	bd90      	pop	{r4, r7, pc}

08009024 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_PCD_SetAddress+0x1a>
 800903a:	2302      	movs	r3, #2
 800903c:	e013      	b.n	8009066 <HAL_PCD_SetAddress+0x42>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f00a fffa 	bl	8014050 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	4608      	mov	r0, r1
 8009078:	4611      	mov	r1, r2
 800907a:	461a      	mov	r2, r3
 800907c:	4603      	mov	r3, r0
 800907e:	70fb      	strb	r3, [r7, #3]
 8009080:	460b      	mov	r3, r1
 8009082:	803b      	strh	r3, [r7, #0]
 8009084:	4613      	mov	r3, r2
 8009086:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800908c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009090:	2b00      	cmp	r3, #0
 8009092:	da0f      	bge.n	80090b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	f003 020f 	and.w	r2, r3, #15
 800909a:	4613      	mov	r3, r2
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	3338      	adds	r3, #56	; 0x38
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	3304      	adds	r3, #4
 80090aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	705a      	strb	r2, [r3, #1]
 80090b2:	e00f      	b.n	80090d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	f003 020f 	and.w	r2, r3, #15
 80090ba:	4613      	mov	r3, r2
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	4413      	add	r3, r2
 80090ca:	3304      	adds	r3, #4
 80090cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80090e0:	883a      	ldrh	r2, [r7, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	78ba      	ldrb	r2, [r7, #2]
 80090ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80090fe:	78bb      	ldrb	r3, [r7, #2]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d102      	bne.n	800910a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_PCD_EP_Open+0xaa>
 8009114:	2302      	movs	r3, #2
 8009116:	e00e      	b.n	8009136 <HAL_PCD_EP_Open+0xc8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	4618      	mov	r0, r3
 8009128:	f00a f97a 	bl	8013420 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009134:	7afb      	ldrb	r3, [r7, #11]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800914a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800914e:	2b00      	cmp	r3, #0
 8009150:	da0f      	bge.n	8009172 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	f003 020f 	and.w	r2, r3, #15
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	3338      	adds	r3, #56	; 0x38
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	3304      	adds	r3, #4
 8009168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	705a      	strb	r2, [r3, #1]
 8009170:	e00f      	b.n	8009192 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	f003 020f 	and.w	r2, r3, #15
 8009178:	4613      	mov	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4413      	add	r3, r2
 8009188:	3304      	adds	r3, #4
 800918a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	b2da      	uxtb	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_PCD_EP_Close+0x6e>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e00e      	b.n	80091ca <HAL_PCD_EP_Close+0x8c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68f9      	ldr	r1, [r7, #12]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f00a f9b8 	bl	8013530 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	460b      	mov	r3, r1
 80091e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	4613      	mov	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	3304      	adds	r3, #4
 80091fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2200      	movs	r2, #0
 800920c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2200      	movs	r2, #0
 8009212:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	b2da      	uxtb	r2, r3
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d102      	bne.n	800922e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	461a      	mov	r2, r3
 800923a:	6979      	ldr	r1, [r7, #20]
 800923c:	f00a fa54 	bl	80136e8 <USB_EPStartXfer>

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	f003 020f 	and.w	r2, r3, #15
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800926c:	681b      	ldr	r3, [r3, #0]
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
 8009286:	460b      	mov	r3, r1
 8009288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800928a:	7afb      	ldrb	r3, [r7, #11]
 800928c:	f003 020f 	and.w	r2, r3, #15
 8009290:	4613      	mov	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	3338      	adds	r3, #56	; 0x38
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	3304      	adds	r3, #4
 80092a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2200      	movs	r2, #0
 80092b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2201      	movs	r2, #1
 80092b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d102      	bne.n	80092d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	461a      	mov	r2, r3
 80092e0:	6979      	ldr	r1, [r7, #20]
 80092e2:	f00a fa01 	bl	80136e8 <USB_EPStartXfer>

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3718      	adds	r7, #24
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	f003 020f 	and.w	r2, r3, #15
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	429a      	cmp	r2, r3
 8009308:	d901      	bls.n	800930e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e050      	b.n	80093b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800930e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009312:	2b00      	cmp	r3, #0
 8009314:	da0f      	bge.n	8009336 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	f003 020f 	and.w	r2, r3, #15
 800931c:	4613      	mov	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	3338      	adds	r3, #56	; 0x38
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	3304      	adds	r3, #4
 800932c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	705a      	strb	r2, [r3, #1]
 8009334:	e00d      	b.n	8009352 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4613      	mov	r3, r2
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	4413      	add	r3, r2
 8009348:	3304      	adds	r3, #4
 800934a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	b2da      	uxtb	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <HAL_PCD_EP_SetStall+0x82>
 800936e:	2302      	movs	r3, #2
 8009370:	e01e      	b.n	80093b0 <HAL_PCD_EP_SetStall+0xc0>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	4618      	mov	r0, r3
 8009382:	f00a fd91 	bl	8013ea8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	b2d9      	uxtb	r1, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093a0:	461a      	mov	r2, r3
 80093a2:	f00a ff83 	bl	80142ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	f003 020f 	and.w	r2, r3, #15
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d901      	bls.n	80093d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e042      	b.n	800945c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80093d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	da0f      	bge.n	80093fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	f003 020f 	and.w	r2, r3, #15
 80093e4:	4613      	mov	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	3338      	adds	r3, #56	; 0x38
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	3304      	adds	r3, #4
 80093f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2201      	movs	r2, #1
 80093fa:	705a      	strb	r2, [r3, #1]
 80093fc:	e00f      	b.n	800941e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	f003 020f 	and.w	r2, r3, #15
 8009404:	4613      	mov	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	4413      	add	r3, r2
 8009414:	3304      	adds	r3, #4
 8009416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	b2da      	uxtb	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_PCD_EP_ClrStall+0x86>
 800943a:	2302      	movs	r3, #2
 800943c:	e00e      	b.n	800945c <HAL_PCD_EP_ClrStall+0xa4>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	4618      	mov	r0, r3
 800944e:	f00a fd99 	bl	8013f84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009474:	2b00      	cmp	r3, #0
 8009476:	da0c      	bge.n	8009492 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	f003 020f 	and.w	r2, r3, #15
 800947e:	4613      	mov	r3, r2
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	3338      	adds	r3, #56	; 0x38
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	4413      	add	r3, r2
 800948c:	3304      	adds	r3, #4
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	e00c      	b.n	80094ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009492:	78fb      	ldrb	r3, [r7, #3]
 8009494:	f003 020f 	and.w	r2, r3, #15
 8009498:	4613      	mov	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	4413      	add	r3, r2
 80094a8:	3304      	adds	r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68f9      	ldr	r1, [r7, #12]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f00a fbb8 	bl	8013c28 <USB_EPStopXfer>
 80094b8:	4603      	mov	r3, r0
 80094ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80094bc:	7afb      	ldrb	r3, [r7, #11]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b08a      	sub	sp, #40	; 0x28
 80094ca:	af02      	add	r7, sp, #8
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	4613      	mov	r3, r2
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	3338      	adds	r3, #56	; 0x38
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	4413      	add	r3, r2
 80094ea:	3304      	adds	r3, #4
 80094ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	695a      	ldr	r2, [r3, #20]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d901      	bls.n	80094fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e06c      	b.n	80095d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	691a      	ldr	r2, [r3, #16]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	429a      	cmp	r2, r3
 8009512:	d902      	bls.n	800951a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	3303      	adds	r3, #3
 800951e:	089b      	lsrs	r3, r3, #2
 8009520:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009522:	e02b      	b.n	800957c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	429a      	cmp	r2, r3
 8009538:	d902      	bls.n	8009540 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	3303      	adds	r3, #3
 8009544:	089b      	lsrs	r3, r3, #2
 8009546:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	68d9      	ldr	r1, [r3, #12]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	b2da      	uxtb	r2, r3
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009558:	b2db      	uxtb	r3, r3
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	4603      	mov	r3, r0
 800955e:	6978      	ldr	r0, [r7, #20]
 8009560:	f00a fc0c 	bl	8013d7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	441a      	add	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	695a      	ldr	r2, [r3, #20]
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	441a      	add	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	429a      	cmp	r2, r3
 8009590:	d809      	bhi.n	80095a6 <PCD_WriteEmptyTxFifo+0xe0>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	695a      	ldr	r2, [r3, #20]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800959a:	429a      	cmp	r2, r3
 800959c:	d203      	bcs.n	80095a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1be      	bne.n	8009524 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d811      	bhi.n	80095d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	2201      	movs	r2, #1
 80095ba:	fa02 f303 	lsl.w	r3, r2, r3
 80095be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	43db      	mvns	r3, r3
 80095cc:	6939      	ldr	r1, [r7, #16]
 80095ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d2:	4013      	ands	r3, r2
 80095d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	333c      	adds	r3, #60	; 0x3c
 80095f8:	3304      	adds	r3, #4
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d17b      	bne.n	800970e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	f003 0308 	and.w	r3, r3, #8
 800961c:	2b00      	cmp	r3, #0
 800961e:	d015      	beq.n	800964c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	4a61      	ldr	r2, [pc, #388]	; (80097a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009624:	4293      	cmp	r3, r2
 8009626:	f240 80b9 	bls.w	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 80b3 	beq.w	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	461a      	mov	r2, r3
 8009644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009648:	6093      	str	r3, [r2, #8]
 800964a:	e0a7      	b.n	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	461a      	mov	r2, r3
 8009664:	2320      	movs	r3, #32
 8009666:	6093      	str	r3, [r2, #8]
 8009668:	e098      	b.n	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009670:	2b00      	cmp	r3, #0
 8009672:	f040 8093 	bne.w	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	4a4b      	ldr	r2, [pc, #300]	; (80097a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d90f      	bls.n	800969e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00a      	beq.n	800969e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009694:	461a      	mov	r2, r3
 8009696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800969a:	6093      	str	r3, [r2, #8]
 800969c:	e07e      	b.n	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4413      	add	r3, r2
 80096b0:	3304      	adds	r3, #4
 80096b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a1a      	ldr	r2, [r3, #32]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	0159      	lsls	r1, r3, #5
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	440b      	add	r3, r1
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d114      	bne.n	8009700 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d109      	bne.n	80096f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096e8:	461a      	mov	r2, r3
 80096ea:	2101      	movs	r1, #1
 80096ec:	f00a fdde 	bl	80142ac <USB_EP0_OutStart>
 80096f0:	e006      	b.n	8009700 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	441a      	add	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f00d fb6e 	bl	8016de8 <HAL_PCD_DataOutStageCallback>
 800970c:	e046      	b.n	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	4a26      	ldr	r2, [pc, #152]	; (80097ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d124      	bne.n	8009760 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972c:	461a      	mov	r2, r3
 800972e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009732:	6093      	str	r3, [r2, #8]
 8009734:	e032      	b.n	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f003 0320 	and.w	r3, r3, #32
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974c:	461a      	mov	r2, r3
 800974e:	2320      	movs	r3, #32
 8009750:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f00d fb45 	bl	8016de8 <HAL_PCD_DataOutStageCallback>
 800975e:	e01d      	b.n	800979c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d114      	bne.n	8009790 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	4613      	mov	r3, r2
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d108      	bne.n	8009790 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009788:	461a      	mov	r2, r3
 800978a:	2100      	movs	r1, #0
 800978c:	f00a fd8e 	bl	80142ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f00d fb26 	bl	8016de8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	4f54300a 	.word	0x4f54300a
 80097ac:	4f54310a 	.word	0x4f54310a

080097b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	333c      	adds	r3, #60	; 0x3c
 80097c8:	3304      	adds	r3, #4
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4a15      	ldr	r2, [pc, #84]	; (8009838 <PCD_EP_OutSetupPacket_int+0x88>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d90e      	bls.n	8009804 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d009      	beq.n	8009804 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	461a      	mov	r2, r3
 80097fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009802:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f00d fadd 	bl	8016dc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4a0a      	ldr	r2, [pc, #40]	; (8009838 <PCD_EP_OutSetupPacket_int+0x88>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d90c      	bls.n	800982c <PCD_EP_OutSetupPacket_int+0x7c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d108      	bne.n	800982c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009824:	461a      	mov	r2, r3
 8009826:	2101      	movs	r1, #1
 8009828:	f00a fd40 	bl	80142ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	4f54300a 	.word	0x4f54300a

0800983c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
 8009848:	4613      	mov	r3, r2
 800984a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009852:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d107      	bne.n	800986a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800985a:	883b      	ldrh	r3, [r7, #0]
 800985c:	0419      	lsls	r1, r3, #16
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	430a      	orrs	r2, r1
 8009866:	629a      	str	r2, [r3, #40]	; 0x28
 8009868:	e028      	b.n	80098bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	4413      	add	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
 800987c:	e00d      	b.n	800989a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	3340      	adds	r3, #64	; 0x40
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	0c1b      	lsrs	r3, r3, #16
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	4413      	add	r3, r2
 8009892:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	3301      	adds	r3, #1
 8009898:	73fb      	strb	r3, [r7, #15]
 800989a:	7bfa      	ldrb	r2, [r7, #15]
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	3b01      	subs	r3, #1
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d3ec      	bcc.n	800987e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80098a4:	883b      	ldrh	r3, [r7, #0]
 80098a6:	0418      	lsls	r0, r3, #16
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6819      	ldr	r1, [r3, #0]
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	4302      	orrs	r2, r0
 80098b4:	3340      	adds	r3, #64	; 0x40
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	460b      	mov	r3, r1
 80098d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	887a      	ldrh	r2, [r7, #2]
 80098dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800991a:	4b05      	ldr	r3, [pc, #20]	; (8009930 <HAL_PCDEx_ActivateLPM+0x44>)
 800991c:	4313      	orrs	r3, r2
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	10000003 	.word	0x10000003

08009934 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009954:	4b19      	ldr	r3, [pc, #100]	; (80099bc <HAL_PWREx_ConfigSupply+0x70>)
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	2b04      	cmp	r3, #4
 800995e:	d00a      	beq.n	8009976 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009960:	4b16      	ldr	r3, [pc, #88]	; (80099bc <HAL_PWREx_ConfigSupply+0x70>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0307 	and.w	r3, r3, #7
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	429a      	cmp	r2, r3
 800996c:	d001      	beq.n	8009972 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e01f      	b.n	80099b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	e01d      	b.n	80099b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009976:	4b11      	ldr	r3, [pc, #68]	; (80099bc <HAL_PWREx_ConfigSupply+0x70>)
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f023 0207 	bic.w	r2, r3, #7
 800997e:	490f      	ldr	r1, [pc, #60]	; (80099bc <HAL_PWREx_ConfigSupply+0x70>)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4313      	orrs	r3, r2
 8009984:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009986:	f7fa f90f 	bl	8003ba8 <HAL_GetTick>
 800998a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800998c:	e009      	b.n	80099a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800998e:	f7fa f90b 	bl	8003ba8 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800999c:	d901      	bls.n	80099a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e007      	b.n	80099b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099a2:	4b06      	ldr	r3, [pc, #24]	; (80099bc <HAL_PWREx_ConfigSupply+0x70>)
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ae:	d1ee      	bne.n	800998e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	58024800 	.word	0x58024800

080099c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	4a04      	ldr	r2, [pc, #16]	; (80099dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80099ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099ce:	60d3      	str	r3, [r2, #12]
}
 80099d0:	bf00      	nop
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	58024800 	.word	0x58024800

080099e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08c      	sub	sp, #48	; 0x30
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e3c8      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 8087 	beq.w	8009b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a00:	4b88      	ldr	r3, [pc, #544]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a0a:	4b86      	ldr	r3, [pc, #536]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a12:	2b10      	cmp	r3, #16
 8009a14:	d007      	beq.n	8009a26 <HAL_RCC_OscConfig+0x46>
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	2b18      	cmp	r3, #24
 8009a1a:	d110      	bne.n	8009a3e <HAL_RCC_OscConfig+0x5e>
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d10b      	bne.n	8009a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a26:	4b7f      	ldr	r3, [pc, #508]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d06c      	beq.n	8009b0c <HAL_RCC_OscConfig+0x12c>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d168      	bne.n	8009b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e3a2      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a46:	d106      	bne.n	8009a56 <HAL_RCC_OscConfig+0x76>
 8009a48:	4b76      	ldr	r3, [pc, #472]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a75      	ldr	r2, [pc, #468]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	e02e      	b.n	8009ab4 <HAL_RCC_OscConfig+0xd4>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10c      	bne.n	8009a78 <HAL_RCC_OscConfig+0x98>
 8009a5e:	4b71      	ldr	r3, [pc, #452]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a70      	ldr	r2, [pc, #448]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	4b6e      	ldr	r3, [pc, #440]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a6d      	ldr	r2, [pc, #436]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	e01d      	b.n	8009ab4 <HAL_RCC_OscConfig+0xd4>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a80:	d10c      	bne.n	8009a9c <HAL_RCC_OscConfig+0xbc>
 8009a82:	4b68      	ldr	r3, [pc, #416]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a67      	ldr	r2, [pc, #412]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4b65      	ldr	r3, [pc, #404]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a64      	ldr	r2, [pc, #400]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	e00b      	b.n	8009ab4 <HAL_RCC_OscConfig+0xd4>
 8009a9c:	4b61      	ldr	r3, [pc, #388]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a60      	ldr	r2, [pc, #384]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	4b5e      	ldr	r3, [pc, #376]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a5d      	ldr	r2, [pc, #372]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d013      	beq.n	8009ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009abc:	f7fa f874 	bl	8003ba8 <HAL_GetTick>
 8009ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ac4:	f7fa f870 	bl	8003ba8 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b64      	cmp	r3, #100	; 0x64
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e356      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ad6:	4b53      	ldr	r3, [pc, #332]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0f0      	beq.n	8009ac4 <HAL_RCC_OscConfig+0xe4>
 8009ae2:	e014      	b.n	8009b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae4:	f7fa f860 	bl	8003ba8 <HAL_GetTick>
 8009ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009aea:	e008      	b.n	8009afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009aec:	f7fa f85c 	bl	8003ba8 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b64      	cmp	r3, #100	; 0x64
 8009af8:	d901      	bls.n	8009afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e342      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009afe:	4b49      	ldr	r3, [pc, #292]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1f0      	bne.n	8009aec <HAL_RCC_OscConfig+0x10c>
 8009b0a:	e000      	b.n	8009b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0302 	and.w	r3, r3, #2
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 808c 	beq.w	8009c34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b1c:	4b41      	ldr	r3, [pc, #260]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b26:	4b3f      	ldr	r3, [pc, #252]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d007      	beq.n	8009b42 <HAL_RCC_OscConfig+0x162>
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	2b18      	cmp	r3, #24
 8009b36:	d137      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x1c8>
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	f003 0303 	and.w	r3, r3, #3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d132      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b42:	4b38      	ldr	r3, [pc, #224]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0304 	and.w	r3, r3, #4
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d005      	beq.n	8009b5a <HAL_RCC_OscConfig+0x17a>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e314      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b5a:	4b32      	ldr	r3, [pc, #200]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f023 0219 	bic.w	r2, r3, #25
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	492f      	ldr	r1, [pc, #188]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b6c:	f7fa f81c 	bl	8003ba8 <HAL_GetTick>
 8009b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b72:	e008      	b.n	8009b86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b74:	f7fa f818 	bl	8003ba8 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d901      	bls.n	8009b86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e2fe      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b86:	4b27      	ldr	r3, [pc, #156]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0f0      	beq.n	8009b74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b92:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	061b      	lsls	r3, r3, #24
 8009ba0:	4920      	ldr	r1, [pc, #128]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ba6:	e045      	b.n	8009c34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d026      	beq.n	8009bfe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bb0:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f023 0219 	bic.w	r2, r3, #25
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	4919      	ldr	r1, [pc, #100]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc2:	f7f9 fff1 	bl	8003ba8 <HAL_GetTick>
 8009bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bc8:	e008      	b.n	8009bdc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bca:	f7f9 ffed 	bl	8003ba8 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e2d3      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bdc:	4b11      	ldr	r3, [pc, #68]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0f0      	beq.n	8009bca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be8:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	061b      	lsls	r3, r3, #24
 8009bf6:	490b      	ldr	r1, [pc, #44]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	604b      	str	r3, [r1, #4]
 8009bfc:	e01a      	b.n	8009c34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bfe:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a08      	ldr	r2, [pc, #32]	; (8009c24 <HAL_RCC_OscConfig+0x244>)
 8009c04:	f023 0301 	bic.w	r3, r3, #1
 8009c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0a:	f7f9 ffcd 	bl	8003ba8 <HAL_GetTick>
 8009c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c10:	e00a      	b.n	8009c28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c12:	f7f9 ffc9 	bl	8003ba8 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d903      	bls.n	8009c28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e2af      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
 8009c24:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c28:	4b96      	ldr	r3, [pc, #600]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1ee      	bne.n	8009c12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d06a      	beq.n	8009d16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c40:	4b90      	ldr	r3, [pc, #576]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c4a:	4b8e      	ldr	r3, [pc, #568]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2b08      	cmp	r3, #8
 8009c54:	d007      	beq.n	8009c66 <HAL_RCC_OscConfig+0x286>
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	2b18      	cmp	r3, #24
 8009c5a:	d11b      	bne.n	8009c94 <HAL_RCC_OscConfig+0x2b4>
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d116      	bne.n	8009c94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c66:	4b87      	ldr	r3, [pc, #540]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <HAL_RCC_OscConfig+0x29e>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	2b80      	cmp	r3, #128	; 0x80
 8009c78:	d001      	beq.n	8009c7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e282      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c7e:	4b81      	ldr	r3, [pc, #516]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	061b      	lsls	r3, r3, #24
 8009c8c:	497d      	ldr	r1, [pc, #500]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c92:	e040      	b.n	8009d16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d023      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c9c:	4b79      	ldr	r3, [pc, #484]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a78      	ldr	r2, [pc, #480]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca8:	f7f9 ff7e 	bl	8003ba8 <HAL_GetTick>
 8009cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cae:	e008      	b.n	8009cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cb0:	f7f9 ff7a 	bl	8003ba8 <HAL_GetTick>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d901      	bls.n	8009cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e260      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cc2:	4b70      	ldr	r3, [pc, #448]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0f0      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cce:	4b6d      	ldr	r3, [pc, #436]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	061b      	lsls	r3, r3, #24
 8009cdc:	4969      	ldr	r1, [pc, #420]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60cb      	str	r3, [r1, #12]
 8009ce2:	e018      	b.n	8009d16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ce4:	4b67      	ldr	r3, [pc, #412]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a66      	ldr	r2, [pc, #408]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf0:	f7f9 ff5a 	bl	8003ba8 <HAL_GetTick>
 8009cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cf6:	e008      	b.n	8009d0a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cf8:	f7f9 ff56 	bl	8003ba8 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e23c      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d0a:	4b5e      	ldr	r3, [pc, #376]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1f0      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0308 	and.w	r3, r3, #8
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d036      	beq.n	8009d90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d019      	beq.n	8009d5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d2a:	4b56      	ldr	r3, [pc, #344]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d2e:	4a55      	ldr	r2, [pc, #340]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009d30:	f043 0301 	orr.w	r3, r3, #1
 8009d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d36:	f7f9 ff37 	bl	8003ba8 <HAL_GetTick>
 8009d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d3e:	f7f9 ff33 	bl	8003ba8 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e219      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d50:	4b4c      	ldr	r3, [pc, #304]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0f0      	beq.n	8009d3e <HAL_RCC_OscConfig+0x35e>
 8009d5c:	e018      	b.n	8009d90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d5e:	4b49      	ldr	r3, [pc, #292]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d62:	4a48      	ldr	r2, [pc, #288]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009d64:	f023 0301 	bic.w	r3, r3, #1
 8009d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d6a:	f7f9 ff1d 	bl	8003ba8 <HAL_GetTick>
 8009d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d70:	e008      	b.n	8009d84 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d72:	f7f9 ff19 	bl	8003ba8 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d901      	bls.n	8009d84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e1ff      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d84:	4b3f      	ldr	r3, [pc, #252]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1f0      	bne.n	8009d72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0320 	and.w	r3, r3, #32
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d036      	beq.n	8009e0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d019      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009da4:	4b37      	ldr	r3, [pc, #220]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a36      	ldr	r2, [pc, #216]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009daa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009db0:	f7f9 fefa 	bl	8003ba8 <HAL_GetTick>
 8009db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009db6:	e008      	b.n	8009dca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009db8:	f7f9 fef6 	bl	8003ba8 <HAL_GetTick>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e1dc      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009dca:	4b2e      	ldr	r3, [pc, #184]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0f0      	beq.n	8009db8 <HAL_RCC_OscConfig+0x3d8>
 8009dd6:	e018      	b.n	8009e0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009dd8:	4b2a      	ldr	r3, [pc, #168]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a29      	ldr	r2, [pc, #164]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009de4:	f7f9 fee0 	bl	8003ba8 <HAL_GetTick>
 8009de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dea:	e008      	b.n	8009dfe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dec:	f7f9 fedc 	bl	8003ba8 <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d901      	bls.n	8009dfe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e1c2      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dfe:	4b21      	ldr	r3, [pc, #132]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1f0      	bne.n	8009dec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8086 	beq.w	8009f24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e18:	4b1b      	ldr	r3, [pc, #108]	; (8009e88 <HAL_RCC_OscConfig+0x4a8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a1a      	ldr	r2, [pc, #104]	; (8009e88 <HAL_RCC_OscConfig+0x4a8>)
 8009e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e24:	f7f9 fec0 	bl	8003ba8 <HAL_GetTick>
 8009e28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e2a:	e008      	b.n	8009e3e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e2c:	f7f9 febc 	bl	8003ba8 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	2b64      	cmp	r3, #100	; 0x64
 8009e38:	d901      	bls.n	8009e3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e1a2      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e3e:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <HAL_RCC_OscConfig+0x4a8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0f0      	beq.n	8009e2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d106      	bne.n	8009e60 <HAL_RCC_OscConfig+0x480>
 8009e52:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e56:	4a0b      	ldr	r2, [pc, #44]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009e58:	f043 0301 	orr.w	r3, r3, #1
 8009e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e5e:	e032      	b.n	8009ec6 <HAL_RCC_OscConfig+0x4e6>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d111      	bne.n	8009e8c <HAL_RCC_OscConfig+0x4ac>
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6c:	4a05      	ldr	r2, [pc, #20]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009e6e:	f023 0301 	bic.w	r3, r3, #1
 8009e72:	6713      	str	r3, [r2, #112]	; 0x70
 8009e74:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e78:	4a02      	ldr	r2, [pc, #8]	; (8009e84 <HAL_RCC_OscConfig+0x4a4>)
 8009e7a:	f023 0304 	bic.w	r3, r3, #4
 8009e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e80:	e021      	b.n	8009ec6 <HAL_RCC_OscConfig+0x4e6>
 8009e82:	bf00      	nop
 8009e84:	58024400 	.word	0x58024400
 8009e88:	58024800 	.word	0x58024800
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	2b05      	cmp	r3, #5
 8009e92:	d10c      	bne.n	8009eae <HAL_RCC_OscConfig+0x4ce>
 8009e94:	4b83      	ldr	r3, [pc, #524]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e98:	4a82      	ldr	r2, [pc, #520]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009e9a:	f043 0304 	orr.w	r3, r3, #4
 8009e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009ea0:	4b80      	ldr	r3, [pc, #512]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea4:	4a7f      	ldr	r2, [pc, #508]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009ea6:	f043 0301 	orr.w	r3, r3, #1
 8009eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8009eac:	e00b      	b.n	8009ec6 <HAL_RCC_OscConfig+0x4e6>
 8009eae:	4b7d      	ldr	r3, [pc, #500]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb2:	4a7c      	ldr	r2, [pc, #496]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009eb4:	f023 0301 	bic.w	r3, r3, #1
 8009eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8009eba:	4b7a      	ldr	r3, [pc, #488]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebe:	4a79      	ldr	r2, [pc, #484]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009ec0:	f023 0304 	bic.w	r3, r3, #4
 8009ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d015      	beq.n	8009efa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ece:	f7f9 fe6b 	bl	8003ba8 <HAL_GetTick>
 8009ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ed4:	e00a      	b.n	8009eec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ed6:	f7f9 fe67 	bl	8003ba8 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d901      	bls.n	8009eec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e14b      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009eec:	4b6d      	ldr	r3, [pc, #436]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0ee      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x4f6>
 8009ef8:	e014      	b.n	8009f24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009efa:	f7f9 fe55 	bl	8003ba8 <HAL_GetTick>
 8009efe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f00:	e00a      	b.n	8009f18 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f02:	f7f9 fe51 	bl	8003ba8 <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d901      	bls.n	8009f18 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e135      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f18:	4b62      	ldr	r3, [pc, #392]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1ee      	bne.n	8009f02 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 812a 	beq.w	800a182 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f2e:	4b5d      	ldr	r3, [pc, #372]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f36:	2b18      	cmp	r3, #24
 8009f38:	f000 80ba 	beq.w	800a0b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	f040 8095 	bne.w	800a070 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f46:	4b57      	ldr	r3, [pc, #348]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a56      	ldr	r2, [pc, #344]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f52:	f7f9 fe29 	bl	8003ba8 <HAL_GetTick>
 8009f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f58:	e008      	b.n	8009f6c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f5a:	f7f9 fe25 	bl	8003ba8 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e10b      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f6c:	4b4d      	ldr	r3, [pc, #308]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1f0      	bne.n	8009f5a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f78:	4b4a      	ldr	r3, [pc, #296]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f7c:	4b4a      	ldr	r3, [pc, #296]	; (800a0a8 <HAL_RCC_OscConfig+0x6c8>)
 8009f7e:	4013      	ands	r3, r2
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f88:	0112      	lsls	r2, r2, #4
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	4945      	ldr	r1, [pc, #276]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	628b      	str	r3, [r1, #40]	; 0x28
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	3b01      	subs	r3, #1
 8009f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	025b      	lsls	r3, r3, #9
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	3b01      	subs	r3, #1
 8009fae:	041b      	lsls	r3, r3, #16
 8009fb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fc2:	4938      	ldr	r1, [pc, #224]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009fc8:	4b36      	ldr	r3, [pc, #216]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	4a35      	ldr	r2, [pc, #212]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009fce:	f023 0301 	bic.w	r3, r3, #1
 8009fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009fd4:	4b33      	ldr	r3, [pc, #204]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fd8:	4b34      	ldr	r3, [pc, #208]	; (800a0ac <HAL_RCC_OscConfig+0x6cc>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009fe0:	00d2      	lsls	r2, r2, #3
 8009fe2:	4930      	ldr	r1, [pc, #192]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009fe8:	4b2e      	ldr	r3, [pc, #184]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fec:	f023 020c 	bic.w	r2, r3, #12
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	492b      	ldr	r1, [pc, #172]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ffa:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 8009ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffe:	f023 0202 	bic.w	r2, r3, #2
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	4927      	ldr	r1, [pc, #156]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a00c:	4b25      	ldr	r3, [pc, #148]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	4a24      	ldr	r2, [pc, #144]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a018:	4b22      	ldr	r3, [pc, #136]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	4a21      	ldr	r2, [pc, #132]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a01e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a024:	4b1f      	ldr	r3, [pc, #124]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	4a1e      	ldr	r2, [pc, #120]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a02a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a02e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a030:	4b1c      	ldr	r3, [pc, #112]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	4a1b      	ldr	r2, [pc, #108]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a036:	f043 0301 	orr.w	r3, r3, #1
 800a03a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a03c:	4b19      	ldr	r3, [pc, #100]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a18      	ldr	r2, [pc, #96]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a048:	f7f9 fdae 	bl	8003ba8 <HAL_GetTick>
 800a04c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a04e:	e008      	b.n	800a062 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a050:	f7f9 fdaa 	bl	8003ba8 <HAL_GetTick>
 800a054:	4602      	mov	r2, r0
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d901      	bls.n	800a062 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a05e:	2303      	movs	r3, #3
 800a060:	e090      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a062:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d0f0      	beq.n	800a050 <HAL_RCC_OscConfig+0x670>
 800a06e:	e088      	b.n	800a182 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a070:	4b0c      	ldr	r3, [pc, #48]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a0b      	ldr	r2, [pc, #44]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a07a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a07c:	f7f9 fd94 	bl	8003ba8 <HAL_GetTick>
 800a080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a082:	e008      	b.n	800a096 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a084:	f7f9 fd90 	bl	8003ba8 <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d901      	bls.n	800a096 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e076      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a096:	4b03      	ldr	r3, [pc, #12]	; (800a0a4 <HAL_RCC_OscConfig+0x6c4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1f0      	bne.n	800a084 <HAL_RCC_OscConfig+0x6a4>
 800a0a2:	e06e      	b.n	800a182 <HAL_RCC_OscConfig+0x7a2>
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	fffffc0c 	.word	0xfffffc0c
 800a0ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a0b0:	4b36      	ldr	r3, [pc, #216]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a0b6:	4b35      	ldr	r3, [pc, #212]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d031      	beq.n	800a128 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f003 0203 	and.w	r2, r3, #3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d12a      	bne.n	800a128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d122      	bne.n	800a128 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d11a      	bne.n	800a128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a100:	429a      	cmp	r2, r3
 800a102:	d111      	bne.n	800a128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	0c1b      	lsrs	r3, r3, #16
 800a108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a112:	429a      	cmp	r2, r3
 800a114:	d108      	bne.n	800a128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	0e1b      	lsrs	r3, r3, #24
 800a11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a124:	429a      	cmp	r2, r3
 800a126:	d001      	beq.n	800a12c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e02b      	b.n	800a184 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a12c:	4b17      	ldr	r3, [pc, #92]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a130:	08db      	lsrs	r3, r3, #3
 800a132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a136:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d01f      	beq.n	800a182 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	4a11      	ldr	r2, [pc, #68]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a148:	f023 0301 	bic.w	r3, r3, #1
 800a14c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a14e:	f7f9 fd2b 	bl	8003ba8 <HAL_GetTick>
 800a152:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a154:	bf00      	nop
 800a156:	f7f9 fd27 	bl	8003ba8 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	4293      	cmp	r3, r2
 800a160:	d0f9      	beq.n	800a156 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a166:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <HAL_RCC_OscConfig+0x7b0>)
 800a168:	4013      	ands	r3, r2
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a16e:	00d2      	lsls	r2, r2, #3
 800a170:	4906      	ldr	r1, [pc, #24]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a172:	4313      	orrs	r3, r2
 800a174:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	4a04      	ldr	r2, [pc, #16]	; (800a18c <HAL_RCC_OscConfig+0x7ac>)
 800a17c:	f043 0301 	orr.w	r3, r3, #1
 800a180:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3730      	adds	r7, #48	; 0x30
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	58024400 	.word	0x58024400
 800a190:	ffff0007 	.word	0xffff0007

0800a194 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e19c      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1a8:	4b8a      	ldr	r3, [pc, #552]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 030f 	and.w	r3, r3, #15
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d910      	bls.n	800a1d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b6:	4b87      	ldr	r3, [pc, #540]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f023 020f 	bic.w	r2, r3, #15
 800a1be:	4985      	ldr	r1, [pc, #532]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1c6:	4b83      	ldr	r3, [pc, #524]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d001      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e184      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d010      	beq.n	800a206 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	4b7b      	ldr	r3, [pc, #492]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d908      	bls.n	800a206 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1f4:	4b78      	ldr	r3, [pc, #480]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	4975      	ldr	r1, [pc, #468]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a202:	4313      	orrs	r3, r2
 800a204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0308 	and.w	r3, r3, #8
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d010      	beq.n	800a234 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	4b70      	ldr	r3, [pc, #448]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a21e:	429a      	cmp	r2, r3
 800a220:	d908      	bls.n	800a234 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a222:	4b6d      	ldr	r3, [pc, #436]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	496a      	ldr	r1, [pc, #424]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a230:	4313      	orrs	r3, r2
 800a232:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0310 	and.w	r3, r3, #16
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d010      	beq.n	800a262 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	699a      	ldr	r2, [r3, #24]
 800a244:	4b64      	ldr	r3, [pc, #400]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d908      	bls.n	800a262 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a250:	4b61      	ldr	r3, [pc, #388]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	495e      	ldr	r1, [pc, #376]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d010      	beq.n	800a290 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69da      	ldr	r2, [r3, #28]
 800a272:	4b59      	ldr	r3, [pc, #356]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d908      	bls.n	800a290 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a27e:	4b56      	ldr	r3, [pc, #344]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	4953      	ldr	r1, [pc, #332]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0302 	and.w	r3, r3, #2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d010      	beq.n	800a2be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	4b4d      	ldr	r3, [pc, #308]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d908      	bls.n	800a2be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2ac:	4b4a      	ldr	r3, [pc, #296]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	f023 020f 	bic.w	r2, r3, #15
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	4947      	ldr	r1, [pc, #284]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d055      	beq.n	800a376 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a2ca:	4b43      	ldr	r3, [pc, #268]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	4940      	ldr	r1, [pc, #256]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d107      	bne.n	800a2f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2e4:	4b3c      	ldr	r3, [pc, #240]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d121      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e0f6      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d107      	bne.n	800a30c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2fc:	4b36      	ldr	r3, [pc, #216]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d115      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e0ea      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d107      	bne.n	800a324 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a314:	4b30      	ldr	r3, [pc, #192]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e0de      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a324:	4b2c      	ldr	r3, [pc, #176]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e0d6      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a334:	4b28      	ldr	r3, [pc, #160]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f023 0207 	bic.w	r2, r3, #7
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4925      	ldr	r1, [pc, #148]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a342:	4313      	orrs	r3, r2
 800a344:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a346:	f7f9 fc2f 	bl	8003ba8 <HAL_GetTick>
 800a34a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a34c:	e00a      	b.n	800a364 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a34e:	f7f9 fc2b 	bl	8003ba8 <HAL_GetTick>
 800a352:	4602      	mov	r2, r0
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	f241 3288 	movw	r2, #5000	; 0x1388
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d901      	bls.n	800a364 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e0be      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a364:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	429a      	cmp	r2, r3
 800a374:	d1eb      	bne.n	800a34e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d010      	beq.n	800a3a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	4b14      	ldr	r3, [pc, #80]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	429a      	cmp	r2, r3
 800a390:	d208      	bcs.n	800a3a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a392:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	f023 020f 	bic.w	r2, r3, #15
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	490e      	ldr	r1, [pc, #56]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3a4:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d214      	bcs.n	800a3dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3b2:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f023 020f 	bic.w	r2, r3, #15
 800a3ba:	4906      	ldr	r1, [pc, #24]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3c2:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d005      	beq.n	800a3dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e086      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
 800a3d4:	52002000 	.word	0x52002000
 800a3d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d010      	beq.n	800a40a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	4b3f      	ldr	r3, [pc, #252]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d208      	bcs.n	800a40a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3f8:	4b3c      	ldr	r3, [pc, #240]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	4939      	ldr	r1, [pc, #228]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a406:	4313      	orrs	r3, r2
 800a408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d010      	beq.n	800a438 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695a      	ldr	r2, [r3, #20]
 800a41a:	4b34      	ldr	r3, [pc, #208]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a422:	429a      	cmp	r2, r3
 800a424:	d208      	bcs.n	800a438 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a426:	4b31      	ldr	r3, [pc, #196]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	492e      	ldr	r1, [pc, #184]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a434:	4313      	orrs	r3, r2
 800a436:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0310 	and.w	r3, r3, #16
 800a440:	2b00      	cmp	r3, #0
 800a442:	d010      	beq.n	800a466 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699a      	ldr	r2, [r3, #24]
 800a448:	4b28      	ldr	r3, [pc, #160]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a450:	429a      	cmp	r2, r3
 800a452:	d208      	bcs.n	800a466 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a454:	4b25      	ldr	r3, [pc, #148]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	4922      	ldr	r1, [pc, #136]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a462:	4313      	orrs	r3, r2
 800a464:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0320 	and.w	r3, r3, #32
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d010      	beq.n	800a494 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69da      	ldr	r2, [r3, #28]
 800a476:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a47e:	429a      	cmp	r2, r3
 800a480:	d208      	bcs.n	800a494 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a482:	4b1a      	ldr	r3, [pc, #104]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	4917      	ldr	r1, [pc, #92]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a490:	4313      	orrs	r3, r2
 800a492:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a494:	f000 f89e 	bl	800a5d4 <HAL_RCC_GetSysClockFreq>
 800a498:	4602      	mov	r2, r0
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	0a1b      	lsrs	r3, r3, #8
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	4912      	ldr	r1, [pc, #72]	; (800a4f0 <HAL_RCC_ClockConfig+0x35c>)
 800a4a6:	5ccb      	ldrb	r3, [r1, r3]
 800a4a8:	f003 031f 	and.w	r3, r3, #31
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	f003 030f 	and.w	r3, r3, #15
 800a4ba:	4a0d      	ldr	r2, [pc, #52]	; (800a4f0 <HAL_RCC_ClockConfig+0x35c>)
 800a4bc:	5cd3      	ldrb	r3, [r2, r3]
 800a4be:	f003 031f 	and.w	r3, r3, #31
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c8:	4a0a      	ldr	r2, [pc, #40]	; (800a4f4 <HAL_RCC_ClockConfig+0x360>)
 800a4ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4cc:	4a0a      	ldr	r2, [pc, #40]	; (800a4f8 <HAL_RCC_ClockConfig+0x364>)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <HAL_RCC_ClockConfig+0x368>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7f9 fb1c 	bl	8003b14 <HAL_InitTick>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3718      	adds	r7, #24
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	08018878 	.word	0x08018878
 800a4f4:	24000004 	.word	0x24000004
 800a4f8:	24000000 	.word	0x24000000
 800a4fc:	24000008 	.word	0x24000008

0800a500 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08c      	sub	sp, #48	; 0x30
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d12a      	bne.n	800a568 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a512:	4b2d      	ldr	r3, [pc, #180]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a518:	4a2b      	ldr	r2, [pc, #172]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a51a:	f043 0301 	orr.w	r3, r3, #1
 800a51e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a522:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	61bb      	str	r3, [r7, #24]
 800a52e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a530:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a536:	2302      	movs	r3, #2
 800a538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a53a:	2303      	movs	r3, #3
 800a53c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a542:	2300      	movs	r3, #0
 800a544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a546:	f107 031c 	add.w	r3, r7, #28
 800a54a:	4619      	mov	r1, r3
 800a54c:	481f      	ldr	r0, [pc, #124]	; (800a5cc <HAL_RCC_MCOConfig+0xcc>)
 800a54e:	f7fd fc29 	bl	8007da4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a552:	4b1d      	ldr	r3, [pc, #116]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a55a:	68b9      	ldr	r1, [r7, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	430b      	orrs	r3, r1
 800a560:	4919      	ldr	r1, [pc, #100]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a562:	4313      	orrs	r3, r2
 800a564:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a566:	e02a      	b.n	800a5be <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a568:	4b17      	ldr	r3, [pc, #92]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a56a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a56e:	4a16      	ldr	r2, [pc, #88]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a570:	f043 0304 	orr.w	r3, r3, #4
 800a574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a578:	4b13      	ldr	r3, [pc, #76]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a57a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	617b      	str	r3, [r7, #20]
 800a584:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a58a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a58c:	2302      	movs	r3, #2
 800a58e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a590:	2303      	movs	r3, #3
 800a592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a594:	2300      	movs	r3, #0
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a598:	2300      	movs	r3, #0
 800a59a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a59c:	f107 031c 	add.w	r3, r7, #28
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	480b      	ldr	r0, [pc, #44]	; (800a5d0 <HAL_RCC_MCOConfig+0xd0>)
 800a5a4:	f7fd fbfe 	bl	8007da4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a5a8:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	01d9      	lsls	r1, r3, #7
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	430b      	orrs	r3, r1
 800a5b8:	4903      	ldr	r1, [pc, #12]	; (800a5c8 <HAL_RCC_MCOConfig+0xc8>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	610b      	str	r3, [r1, #16]
}
 800a5be:	bf00      	nop
 800a5c0:	3730      	adds	r7, #48	; 0x30
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	58020000 	.word	0x58020000
 800a5d0:	58020800 	.word	0x58020800

0800a5d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b089      	sub	sp, #36	; 0x24
 800a5d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5da:	4bb3      	ldr	r3, [pc, #716]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5e2:	2b18      	cmp	r3, #24
 800a5e4:	f200 8155 	bhi.w	800a892 <HAL_RCC_GetSysClockFreq+0x2be>
 800a5e8:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ee:	bf00      	nop
 800a5f0:	0800a655 	.word	0x0800a655
 800a5f4:	0800a893 	.word	0x0800a893
 800a5f8:	0800a893 	.word	0x0800a893
 800a5fc:	0800a893 	.word	0x0800a893
 800a600:	0800a893 	.word	0x0800a893
 800a604:	0800a893 	.word	0x0800a893
 800a608:	0800a893 	.word	0x0800a893
 800a60c:	0800a893 	.word	0x0800a893
 800a610:	0800a67b 	.word	0x0800a67b
 800a614:	0800a893 	.word	0x0800a893
 800a618:	0800a893 	.word	0x0800a893
 800a61c:	0800a893 	.word	0x0800a893
 800a620:	0800a893 	.word	0x0800a893
 800a624:	0800a893 	.word	0x0800a893
 800a628:	0800a893 	.word	0x0800a893
 800a62c:	0800a893 	.word	0x0800a893
 800a630:	0800a681 	.word	0x0800a681
 800a634:	0800a893 	.word	0x0800a893
 800a638:	0800a893 	.word	0x0800a893
 800a63c:	0800a893 	.word	0x0800a893
 800a640:	0800a893 	.word	0x0800a893
 800a644:	0800a893 	.word	0x0800a893
 800a648:	0800a893 	.word	0x0800a893
 800a64c:	0800a893 	.word	0x0800a893
 800a650:	0800a687 	.word	0x0800a687
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a654:	4b94      	ldr	r3, [pc, #592]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0320 	and.w	r3, r3, #32
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d009      	beq.n	800a674 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a660:	4b91      	ldr	r3, [pc, #580]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	08db      	lsrs	r3, r3, #3
 800a666:	f003 0303 	and.w	r3, r3, #3
 800a66a:	4a90      	ldr	r2, [pc, #576]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a66c:	fa22 f303 	lsr.w	r3, r2, r3
 800a670:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a672:	e111      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a674:	4b8d      	ldr	r3, [pc, #564]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a676:	61bb      	str	r3, [r7, #24]
      break;
 800a678:	e10e      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a67a:	4b8d      	ldr	r3, [pc, #564]	; (800a8b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a67c:	61bb      	str	r3, [r7, #24]
      break;
 800a67e:	e10b      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a680:	4b8c      	ldr	r3, [pc, #560]	; (800a8b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a682:	61bb      	str	r3, [r7, #24]
      break;
 800a684:	e108      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a686:	4b88      	ldr	r3, [pc, #544]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a690:	4b85      	ldr	r3, [pc, #532]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a694:	091b      	lsrs	r3, r3, #4
 800a696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a69a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a69c:	4b82      	ldr	r3, [pc, #520]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6a6:	4b80      	ldr	r3, [pc, #512]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6aa:	08db      	lsrs	r3, r3, #3
 800a6ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	fb02 f303 	mul.w	r3, r2, r3
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 80e1 	beq.w	800a88c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	f000 8083 	beq.w	800a7d8 <HAL_RCC_GetSysClockFreq+0x204>
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	f200 80a1 	bhi.w	800a81c <HAL_RCC_GetSysClockFreq+0x248>
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <HAL_RCC_GetSysClockFreq+0x114>
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d056      	beq.n	800a794 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a6e6:	e099      	b.n	800a81c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6e8:	4b6f      	ldr	r3, [pc, #444]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0320 	and.w	r3, r3, #32
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d02d      	beq.n	800a750 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6f4:	4b6c      	ldr	r3, [pc, #432]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	08db      	lsrs	r3, r3, #3
 800a6fa:	f003 0303 	and.w	r3, r3, #3
 800a6fe:	4a6b      	ldr	r2, [pc, #428]	; (800a8ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a700:	fa22 f303 	lsr.w	r3, r2, r3
 800a704:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	ee07 3a90 	vmov	s15, r3
 800a70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a71e:	4b62      	ldr	r3, [pc, #392]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a72e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a732:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a8b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a74e:	e087      	b.n	800a860 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a8bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800a75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a762:	4b51      	ldr	r3, [pc, #324]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a772:	ed97 6a02 	vldr	s12, [r7, #8]
 800a776:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a8b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a78e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a792:	e065      	b.n	800a860 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a8c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a6:	4b40      	ldr	r3, [pc, #256]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a8b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7d6:	e043      	b.n	800a860 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a8c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ea:	4b2f      	ldr	r3, [pc, #188]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a8b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a81a:	e021      	b.n	800a860 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a826:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a8c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a82e:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a842:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a8b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a85e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a860:	4b11      	ldr	r3, [pc, #68]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a864:	0a5b      	lsrs	r3, r3, #9
 800a866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86a:	3301      	adds	r3, #1
 800a86c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a878:	edd7 6a07 	vldr	s13, [r7, #28]
 800a87c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a884:	ee17 3a90 	vmov	r3, s15
 800a888:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a88a:	e005      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	61bb      	str	r3, [r7, #24]
      break;
 800a890:	e002      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a894:	61bb      	str	r3, [r7, #24]
      break;
 800a896:	bf00      	nop
  }

  return sysclockfreq;
 800a898:	69bb      	ldr	r3, [r7, #24]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3724      	adds	r7, #36	; 0x24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	58024400 	.word	0x58024400
 800a8ac:	03d09000 	.word	0x03d09000
 800a8b0:	003d0900 	.word	0x003d0900
 800a8b4:	02faf080 	.word	0x02faf080
 800a8b8:	46000000 	.word	0x46000000
 800a8bc:	4c742400 	.word	0x4c742400
 800a8c0:	4a742400 	.word	0x4a742400
 800a8c4:	4c3ebc20 	.word	0x4c3ebc20

0800a8c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a8ce:	f7ff fe81 	bl	800a5d4 <HAL_RCC_GetSysClockFreq>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	4b10      	ldr	r3, [pc, #64]	; (800a918 <HAL_RCC_GetHCLKFreq+0x50>)
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	0a1b      	lsrs	r3, r3, #8
 800a8da:	f003 030f 	and.w	r3, r3, #15
 800a8de:	490f      	ldr	r1, [pc, #60]	; (800a91c <HAL_RCC_GetHCLKFreq+0x54>)
 800a8e0:	5ccb      	ldrb	r3, [r1, r3]
 800a8e2:	f003 031f 	and.w	r3, r3, #31
 800a8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <HAL_RCC_GetHCLKFreq+0x50>)
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	f003 030f 	and.w	r3, r3, #15
 800a8f4:	4a09      	ldr	r2, [pc, #36]	; (800a91c <HAL_RCC_GetHCLKFreq+0x54>)
 800a8f6:	5cd3      	ldrb	r3, [r2, r3]
 800a8f8:	f003 031f 	and.w	r3, r3, #31
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a902:	4a07      	ldr	r2, [pc, #28]	; (800a920 <HAL_RCC_GetHCLKFreq+0x58>)
 800a904:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a906:	4a07      	ldr	r2, [pc, #28]	; (800a924 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a90c:	4b04      	ldr	r3, [pc, #16]	; (800a920 <HAL_RCC_GetHCLKFreq+0x58>)
 800a90e:	681b      	ldr	r3, [r3, #0]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	58024400 	.word	0x58024400
 800a91c:	08018878 	.word	0x08018878
 800a920:	24000004 	.word	0x24000004
 800a924:	24000000 	.word	0x24000000

0800a928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a92c:	f7ff ffcc 	bl	800a8c8 <HAL_RCC_GetHCLKFreq>
 800a930:	4602      	mov	r2, r0
 800a932:	4b06      	ldr	r3, [pc, #24]	; (800a94c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	091b      	lsrs	r3, r3, #4
 800a938:	f003 0307 	and.w	r3, r3, #7
 800a93c:	4904      	ldr	r1, [pc, #16]	; (800a950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a93e:	5ccb      	ldrb	r3, [r1, r3]
 800a940:	f003 031f 	and.w	r3, r3, #31
 800a944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a948:	4618      	mov	r0, r3
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	58024400 	.word	0x58024400
 800a950:	08018878 	.word	0x08018878

0800a954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a958:	f7ff ffb6 	bl	800a8c8 <HAL_RCC_GetHCLKFreq>
 800a95c:	4602      	mov	r2, r0
 800a95e:	4b06      	ldr	r3, [pc, #24]	; (800a978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	0a1b      	lsrs	r3, r3, #8
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	4904      	ldr	r1, [pc, #16]	; (800a97c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a96a:	5ccb      	ldrb	r3, [r1, r3]
 800a96c:	f003 031f 	and.w	r3, r3, #31
 800a970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a974:	4618      	mov	r0, r3
 800a976:	bd80      	pop	{r7, pc}
 800a978:	58024400 	.word	0x58024400
 800a97c:	08018878 	.word	0x08018878

0800a980 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a984:	b0c6      	sub	sp, #280	; 0x118
 800a986:	af00      	add	r7, sp, #0
 800a988:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a98c:	2300      	movs	r3, #0
 800a98e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a992:	2300      	movs	r3, #0
 800a994:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a9a4:	2500      	movs	r5, #0
 800a9a6:	ea54 0305 	orrs.w	r3, r4, r5
 800a9aa:	d049      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9b6:	d02f      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a9b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9bc:	d828      	bhi.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c2:	d01a      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a9c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c8:	d822      	bhi.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a9ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9d2:	d007      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a9d4:	e01c      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d6:	4bab      	ldr	r3, [pc, #684]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9da:	4aaa      	ldr	r2, [pc, #680]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9e2:	e01a      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	2102      	movs	r1, #2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f002 fa49 	bl	800ce84 <RCCEx_PLL2_Config>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9f8:	e00f      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fe:	3328      	adds	r3, #40	; 0x28
 800aa00:	2102      	movs	r1, #2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f002 faf0 	bl	800cfe8 <RCCEx_PLL3_Config>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa0e:	e004      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa16:	e000      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aa18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10a      	bne.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa22:	4b98      	ldr	r3, [pc, #608]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa30:	4a94      	ldr	r2, [pc, #592]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa32:	430b      	orrs	r3, r1
 800aa34:	6513      	str	r3, [r2, #80]	; 0x50
 800aa36:	e003      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aa4c:	f04f 0900 	mov.w	r9, #0
 800aa50:	ea58 0309 	orrs.w	r3, r8, r9
 800aa54:	d047      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d82a      	bhi.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aa60:	a201      	add	r2, pc, #4	; (adr r2, 800aa68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa66:	bf00      	nop
 800aa68:	0800aa7d 	.word	0x0800aa7d
 800aa6c:	0800aa8b 	.word	0x0800aa8b
 800aa70:	0800aaa1 	.word	0x0800aaa1
 800aa74:	0800aabf 	.word	0x0800aabf
 800aa78:	0800aabf 	.word	0x0800aabf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa7c:	4b81      	ldr	r3, [pc, #516]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	4a80      	ldr	r2, [pc, #512]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa88:	e01a      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8e:	3308      	adds	r3, #8
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f002 f9f6 	bl	800ce84 <RCCEx_PLL2_Config>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa9e:	e00f      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa4:	3328      	adds	r3, #40	; 0x28
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f002 fa9d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aab4:	e004      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aabc:	e000      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aabe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aac8:	4b6e      	ldr	r3, [pc, #440]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aacc:	f023 0107 	bic.w	r1, r3, #7
 800aad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad6:	4a6b      	ldr	r2, [pc, #428]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aad8:	430b      	orrs	r3, r1
 800aada:	6513      	str	r3, [r2, #80]	; 0x50
 800aadc:	e003      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aade:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aae2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800aaf2:	f04f 0b00 	mov.w	fp, #0
 800aaf6:	ea5a 030b 	orrs.w	r3, sl, fp
 800aafa:	d05b      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab04:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ab08:	d03b      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ab0a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ab0e:	d834      	bhi.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ab10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab14:	d037      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ab16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab1a:	d82e      	bhi.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ab1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab20:	d033      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ab22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab26:	d828      	bhi.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ab28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab2c:	d01a      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ab2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab32:	d822      	bhi.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ab38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab3c:	d007      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ab3e:	e01c      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab40:	4b50      	ldr	r3, [pc, #320]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	4a4f      	ldr	r2, [pc, #316]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab4c:	e01e      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab52:	3308      	adds	r3, #8
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f002 f994 	bl	800ce84 <RCCEx_PLL2_Config>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab62:	e013      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab68:	3328      	adds	r3, #40	; 0x28
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f002 fa3b 	bl	800cfe8 <RCCEx_PLL3_Config>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab78:	e008      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab80:	e004      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab82:	bf00      	nop
 800ab84:	e002      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab86:	bf00      	nop
 800ab88:	e000      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab94:	4b3b      	ldr	r3, [pc, #236]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab98:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ab9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aba4:	4a37      	ldr	r2, [pc, #220]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aba6:	430b      	orrs	r3, r1
 800aba8:	6593      	str	r3, [r2, #88]	; 0x58
 800abaa:	e003      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800abc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800abc4:	2300      	movs	r3, #0
 800abc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800abca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800abce:	460b      	mov	r3, r1
 800abd0:	4313      	orrs	r3, r2
 800abd2:	d05d      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800abd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abdc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800abe0:	d03b      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800abe2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800abe6:	d834      	bhi.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800abe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abec:	d037      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800abee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abf2:	d82e      	bhi.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800abf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abf8:	d033      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800abfa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abfe:	d828      	bhi.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ac00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac04:	d01a      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ac06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac0a:	d822      	bhi.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ac10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac14:	d007      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ac16:	e01c      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac18:	4b1a      	ldr	r3, [pc, #104]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	4a19      	ldr	r2, [pc, #100]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac24:	e01e      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f002 f928 	bl	800ce84 <RCCEx_PLL2_Config>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac3a:	e013      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac40:	3328      	adds	r3, #40	; 0x28
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f002 f9cf 	bl	800cfe8 <RCCEx_PLL3_Config>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac50:	e008      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac58:	e004      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ac5a:	bf00      	nop
 800ac5c:	e002      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ac5e:	bf00      	nop
 800ac60:	e000      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ac62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10d      	bne.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac6c:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac70:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ac74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac7c:	4a01      	ldr	r2, [pc, #4]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	6593      	str	r3, [r2, #88]	; 0x58
 800ac82:	e005      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ac84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ac90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ac9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aca0:	2300      	movs	r3, #0
 800aca2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aca6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800acaa:	460b      	mov	r3, r1
 800acac:	4313      	orrs	r3, r2
 800acae:	d03a      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800acb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb6:	2b30      	cmp	r3, #48	; 0x30
 800acb8:	d01f      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800acba:	2b30      	cmp	r3, #48	; 0x30
 800acbc:	d819      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800acbe:	2b20      	cmp	r3, #32
 800acc0:	d00c      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800acc2:	2b20      	cmp	r3, #32
 800acc4:	d815      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d019      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800acca:	2b10      	cmp	r3, #16
 800accc:	d111      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acce:	4baa      	ldr	r3, [pc, #680]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd2:	4aa9      	ldr	r2, [pc, #676]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800acda:	e011      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace0:	3308      	adds	r3, #8
 800ace2:	2102      	movs	r1, #2
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 f8cd 	bl	800ce84 <RCCEx_PLL2_Config>
 800acea:	4603      	mov	r3, r0
 800acec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800acf0:	e006      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acf8:	e002      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800acfa:	bf00      	nop
 800acfc:	e000      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800acfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ad08:	4b9b      	ldr	r3, [pc, #620]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad0c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad16:	4a98      	ldr	r2, [pc, #608]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad18:	430b      	orrs	r3, r1
 800ad1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad1c:	e003      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ad26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ad32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad36:	2300      	movs	r3, #0
 800ad38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ad40:	460b      	mov	r3, r1
 800ad42:	4313      	orrs	r3, r2
 800ad44:	d051      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad50:	d035      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ad52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad56:	d82e      	bhi.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad5c:	d031      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ad5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad62:	d828      	bhi.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad68:	d01a      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ad6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad6e:	d822      	bhi.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d003      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ad74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad78:	d007      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ad7a:	e01c      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad7c:	4b7e      	ldr	r3, [pc, #504]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	4a7d      	ldr	r2, [pc, #500]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad88:	e01c      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8e:	3308      	adds	r3, #8
 800ad90:	2100      	movs	r1, #0
 800ad92:	4618      	mov	r0, r3
 800ad94:	f002 f876 	bl	800ce84 <RCCEx_PLL2_Config>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad9e:	e011      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada4:	3328      	adds	r3, #40	; 0x28
 800ada6:	2100      	movs	r1, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f002 f91d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800adae:	4603      	mov	r3, r0
 800adb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800adb4:	e006      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adbc:	e002      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800adbe:	bf00      	nop
 800adc0:	e000      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800adc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800adcc:	4b6a      	ldr	r3, [pc, #424]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800add4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adda:	4a67      	ldr	r2, [pc, #412]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800addc:	430b      	orrs	r3, r1
 800adde:	6513      	str	r3, [r2, #80]	; 0x50
 800ade0:	e003      	b.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800adea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800adf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adfa:	2300      	movs	r3, #0
 800adfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4313      	orrs	r3, r2
 800ae08:	d053      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae14:	d033      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ae16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae1a:	d82c      	bhi.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ae1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae20:	d02f      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ae22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae26:	d826      	bhi.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ae28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae2c:	d02b      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ae2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae32:	d820      	bhi.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ae34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae38:	d012      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ae3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae3e:	d81a      	bhi.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d022      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ae44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae48:	d115      	bne.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4e:	3308      	adds	r3, #8
 800ae50:	2101      	movs	r1, #1
 800ae52:	4618      	mov	r0, r3
 800ae54:	f002 f816 	bl	800ce84 <RCCEx_PLL2_Config>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae5e:	e015      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	3328      	adds	r3, #40	; 0x28
 800ae66:	2101      	movs	r1, #1
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f002 f8bd 	bl	800cfe8 <RCCEx_PLL3_Config>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae74:	e00a      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae7c:	e006      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae7e:	bf00      	nop
 800ae80:	e004      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae82:	bf00      	nop
 800ae84:	e002      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae86:	bf00      	nop
 800ae88:	e000      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae94:	4b38      	ldr	r3, [pc, #224]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ae9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aea2:	4a35      	ldr	r2, [pc, #212]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aea4:	430b      	orrs	r3, r1
 800aea6:	6513      	str	r3, [r2, #80]	; 0x50
 800aea8:	e003      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aeb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800aebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aec2:	2300      	movs	r3, #0
 800aec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aec8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aecc:	460b      	mov	r3, r1
 800aece:	4313      	orrs	r3, r2
 800aed0:	d058      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aeda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aede:	d033      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aee4:	d82c      	bhi.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeea:	d02f      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aeec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef0:	d826      	bhi.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aef6:	d02b      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aef8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aefc:	d820      	bhi.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aefe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af02:	d012      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800af04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af08:	d81a      	bhi.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d022      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800af0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af12:	d115      	bne.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af18:	3308      	adds	r3, #8
 800af1a:	2101      	movs	r1, #1
 800af1c:	4618      	mov	r0, r3
 800af1e:	f001 ffb1 	bl	800ce84 <RCCEx_PLL2_Config>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af28:	e015      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2e:	3328      	adds	r3, #40	; 0x28
 800af30:	2101      	movs	r1, #1
 800af32:	4618      	mov	r0, r3
 800af34:	f002 f858 	bl	800cfe8 <RCCEx_PLL3_Config>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af3e:	e00a      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af46:	e006      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af48:	bf00      	nop
 800af4a:	e004      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af4c:	bf00      	nop
 800af4e:	e002      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af50:	bf00      	nop
 800af52:	e000      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800af54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10e      	bne.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af5e:	4b06      	ldr	r3, [pc, #24]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800af66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af6e:	4a02      	ldr	r2, [pc, #8]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af70:	430b      	orrs	r3, r1
 800af72:	6593      	str	r3, [r2, #88]	; 0x58
 800af74:	e006      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800af76:	bf00      	nop
 800af78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800af90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af94:	2300      	movs	r3, #0
 800af96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4313      	orrs	r3, r2
 800afa2:	d037      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800afa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afae:	d00e      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800afb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb4:	d816      	bhi.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d018      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800afba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afbe:	d111      	bne.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afc0:	4bc4      	ldr	r3, [pc, #784]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	4ac3      	ldr	r2, [pc, #780]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800afcc:	e00f      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd2:	3308      	adds	r3, #8
 800afd4:	2101      	movs	r1, #1
 800afd6:	4618      	mov	r0, r3
 800afd8:	f001 ff54 	bl	800ce84 <RCCEx_PLL2_Config>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800afe2:	e004      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afea:	e000      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800afec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aff6:	4bb7      	ldr	r3, [pc, #732]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b004:	4ab3      	ldr	r2, [pc, #716]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b006:	430b      	orrs	r3, r1
 800b008:	6513      	str	r3, [r2, #80]	; 0x50
 800b00a:	e003      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b00c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b010:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b024:	2300      	movs	r3, #0
 800b026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b02a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b02e:	460b      	mov	r3, r1
 800b030:	4313      	orrs	r3, r2
 800b032:	d039      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d81c      	bhi.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b081 	.word	0x0800b081
 800b048:	0800b055 	.word	0x0800b055
 800b04c:	0800b063 	.word	0x0800b063
 800b050:	0800b081 	.word	0x0800b081
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b054:	4b9f      	ldr	r3, [pc, #636]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	4a9e      	ldr	r2, [pc, #632]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b05e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b060:	e00f      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b066:	3308      	adds	r3, #8
 800b068:	2102      	movs	r1, #2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f001 ff0a 	bl	800ce84 <RCCEx_PLL2_Config>
 800b070:	4603      	mov	r3, r0
 800b072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b076:	e004      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b07e:	e000      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b080:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10a      	bne.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b08a:	4b92      	ldr	r3, [pc, #584]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b08c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b08e:	f023 0103 	bic.w	r1, r3, #3
 800b092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b098:	4a8e      	ldr	r2, [pc, #568]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b09a:	430b      	orrs	r3, r1
 800b09c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b09e:	e003      	b.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b0b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	f000 8099 	beq.w	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0ca:	4b83      	ldr	r3, [pc, #524]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a82      	ldr	r2, [pc, #520]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b0d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0d6:	f7f8 fd67 	bl	8003ba8 <HAL_GetTick>
 800b0da:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0de:	e00b      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0e0:	f7f8 fd62 	bl	8003ba8 <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	2b64      	cmp	r3, #100	; 0x64
 800b0ee:	d903      	bls.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0f6:	e005      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0f8:	4b77      	ldr	r3, [pc, #476]	; (800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0ed      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d173      	bne.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b10c:	4b71      	ldr	r3, [pc, #452]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b10e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b118:	4053      	eors	r3, r2
 800b11a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d015      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b122:	4b6c      	ldr	r3, [pc, #432]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b12a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b12e:	4b69      	ldr	r3, [pc, #420]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b132:	4a68      	ldr	r2, [pc, #416]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b138:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b13a:	4b66      	ldr	r3, [pc, #408]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13e:	4a65      	ldr	r2, [pc, #404]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b144:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b146:	4a63      	ldr	r2, [pc, #396]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b14c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b15a:	d118      	bne.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b15c:	f7f8 fd24 	bl	8003ba8 <HAL_GetTick>
 800b160:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b164:	e00d      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b166:	f7f8 fd1f 	bl	8003ba8 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b170:	1ad2      	subs	r2, r2, r3
 800b172:	f241 3388 	movw	r3, #5000	; 0x1388
 800b176:	429a      	cmp	r2, r3
 800b178:	d903      	bls.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b180:	e005      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b182:	4b54      	ldr	r3, [pc, #336]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d0eb      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b18e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b192:	2b00      	cmp	r3, #0
 800b194:	d129      	bne.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b19e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1a6:	d10e      	bne.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b1a8:	4b4a      	ldr	r3, [pc, #296]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1b8:	091a      	lsrs	r2, r3, #4
 800b1ba:	4b48      	ldr	r3, [pc, #288]	; (800b2dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b1bc:	4013      	ands	r3, r2
 800b1be:	4a45      	ldr	r2, [pc, #276]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1c0:	430b      	orrs	r3, r1
 800b1c2:	6113      	str	r3, [r2, #16]
 800b1c4:	e005      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b1c6:	4b43      	ldr	r3, [pc, #268]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	4a42      	ldr	r2, [pc, #264]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b1d0:	6113      	str	r3, [r2, #16]
 800b1d2:	4b40      	ldr	r3, [pc, #256]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1e2:	4a3c      	ldr	r2, [pc, #240]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b1e8:	e008      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b1ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b1f2:	e003      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f002 0301 	and.w	r3, r2, #1
 800b208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b20c:	2300      	movs	r3, #0
 800b20e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b212:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b216:	460b      	mov	r3, r1
 800b218:	4313      	orrs	r3, r2
 800b21a:	f000 808f 	beq.w	800b33c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b224:	2b28      	cmp	r3, #40	; 0x28
 800b226:	d871      	bhi.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b228:	a201      	add	r2, pc, #4	; (adr r2, 800b230 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22e:	bf00      	nop
 800b230:	0800b315 	.word	0x0800b315
 800b234:	0800b30d 	.word	0x0800b30d
 800b238:	0800b30d 	.word	0x0800b30d
 800b23c:	0800b30d 	.word	0x0800b30d
 800b240:	0800b30d 	.word	0x0800b30d
 800b244:	0800b30d 	.word	0x0800b30d
 800b248:	0800b30d 	.word	0x0800b30d
 800b24c:	0800b30d 	.word	0x0800b30d
 800b250:	0800b2e1 	.word	0x0800b2e1
 800b254:	0800b30d 	.word	0x0800b30d
 800b258:	0800b30d 	.word	0x0800b30d
 800b25c:	0800b30d 	.word	0x0800b30d
 800b260:	0800b30d 	.word	0x0800b30d
 800b264:	0800b30d 	.word	0x0800b30d
 800b268:	0800b30d 	.word	0x0800b30d
 800b26c:	0800b30d 	.word	0x0800b30d
 800b270:	0800b2f7 	.word	0x0800b2f7
 800b274:	0800b30d 	.word	0x0800b30d
 800b278:	0800b30d 	.word	0x0800b30d
 800b27c:	0800b30d 	.word	0x0800b30d
 800b280:	0800b30d 	.word	0x0800b30d
 800b284:	0800b30d 	.word	0x0800b30d
 800b288:	0800b30d 	.word	0x0800b30d
 800b28c:	0800b30d 	.word	0x0800b30d
 800b290:	0800b315 	.word	0x0800b315
 800b294:	0800b30d 	.word	0x0800b30d
 800b298:	0800b30d 	.word	0x0800b30d
 800b29c:	0800b30d 	.word	0x0800b30d
 800b2a0:	0800b30d 	.word	0x0800b30d
 800b2a4:	0800b30d 	.word	0x0800b30d
 800b2a8:	0800b30d 	.word	0x0800b30d
 800b2ac:	0800b30d 	.word	0x0800b30d
 800b2b0:	0800b315 	.word	0x0800b315
 800b2b4:	0800b30d 	.word	0x0800b30d
 800b2b8:	0800b30d 	.word	0x0800b30d
 800b2bc:	0800b30d 	.word	0x0800b30d
 800b2c0:	0800b30d 	.word	0x0800b30d
 800b2c4:	0800b30d 	.word	0x0800b30d
 800b2c8:	0800b30d 	.word	0x0800b30d
 800b2cc:	0800b30d 	.word	0x0800b30d
 800b2d0:	0800b315 	.word	0x0800b315
 800b2d4:	58024400 	.word	0x58024400
 800b2d8:	58024800 	.word	0x58024800
 800b2dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f001 fdcb 	bl	800ce84 <RCCEx_PLL2_Config>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b2f4:	e00f      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2fa:	3328      	adds	r3, #40	; 0x28
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	4618      	mov	r0, r3
 800b300:	f001 fe72 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b304:	4603      	mov	r3, r0
 800b306:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b30a:	e004      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b312:	e000      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b314:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b316:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10a      	bne.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b31e:	4bbf      	ldr	r3, [pc, #764]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b322:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b32c:	4abb      	ldr	r2, [pc, #748]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b32e:	430b      	orrs	r3, r1
 800b330:	6553      	str	r3, [r2, #84]	; 0x54
 800b332:	e003      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b338:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	f002 0302 	and.w	r3, r2, #2
 800b348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b34c:	2300      	movs	r3, #0
 800b34e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b352:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b356:	460b      	mov	r3, r1
 800b358:	4313      	orrs	r3, r2
 800b35a:	d041      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b362:	2b05      	cmp	r3, #5
 800b364:	d824      	bhi.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b3b9 	.word	0x0800b3b9
 800b370:	0800b385 	.word	0x0800b385
 800b374:	0800b39b 	.word	0x0800b39b
 800b378:	0800b3b9 	.word	0x0800b3b9
 800b37c:	0800b3b9 	.word	0x0800b3b9
 800b380:	0800b3b9 	.word	0x0800b3b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b388:	3308      	adds	r3, #8
 800b38a:	2101      	movs	r1, #1
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 fd79 	bl	800ce84 <RCCEx_PLL2_Config>
 800b392:	4603      	mov	r3, r0
 800b394:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b398:	e00f      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39e:	3328      	adds	r3, #40	; 0x28
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f001 fe20 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b3ae:	e004      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3b6:	e000      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10a      	bne.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b3c2:	4b96      	ldr	r3, [pc, #600]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c6:	f023 0107 	bic.w	r1, r3, #7
 800b3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3d0:	4a92      	ldr	r2, [pc, #584]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3d2:	430b      	orrs	r3, r1
 800b3d4:	6553      	str	r3, [r2, #84]	; 0x54
 800b3d6:	e003      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	f002 0304 	and.w	r3, r2, #4
 800b3ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	d044      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b408:	2b05      	cmp	r3, #5
 800b40a:	d825      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b40c:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b412:	bf00      	nop
 800b414:	0800b461 	.word	0x0800b461
 800b418:	0800b42d 	.word	0x0800b42d
 800b41c:	0800b443 	.word	0x0800b443
 800b420:	0800b461 	.word	0x0800b461
 800b424:	0800b461 	.word	0x0800b461
 800b428:	0800b461 	.word	0x0800b461
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b430:	3308      	adds	r3, #8
 800b432:	2101      	movs	r1, #1
 800b434:	4618      	mov	r0, r3
 800b436:	f001 fd25 	bl	800ce84 <RCCEx_PLL2_Config>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b440:	e00f      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b446:	3328      	adds	r3, #40	; 0x28
 800b448:	2101      	movs	r1, #1
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 fdcc 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b456:	e004      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b45e:	e000      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b460:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b462:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b46a:	4b6c      	ldr	r3, [pc, #432]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46e:	f023 0107 	bic.w	r1, r3, #7
 800b472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b47a:	4a68      	ldr	r2, [pc, #416]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b47c:	430b      	orrs	r3, r1
 800b47e:	6593      	str	r3, [r2, #88]	; 0x58
 800b480:	e003      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b482:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b486:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	f002 0320 	and.w	r3, r2, #32
 800b496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b49a:	2300      	movs	r3, #0
 800b49c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	d055      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4b6:	d033      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b4b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4bc:	d82c      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c2:	d02f      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c8:	d826      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b4ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4ce:	d02b      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b4d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4d4:	d820      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4da:	d012      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e0:	d81a      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d022      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b4e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ea:	d115      	bne.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f001 fcc5 	bl	800ce84 <RCCEx_PLL2_Config>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b500:	e015      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b506:	3328      	adds	r3, #40	; 0x28
 800b508:	2102      	movs	r1, #2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 fd6c 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b516:	e00a      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b51e:	e006      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b520:	bf00      	nop
 800b522:	e004      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b524:	bf00      	nop
 800b526:	e002      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b528:	bf00      	nop
 800b52a:	e000      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b52c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b52e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10b      	bne.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b536:	4b39      	ldr	r3, [pc, #228]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b546:	4a35      	ldr	r2, [pc, #212]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b548:	430b      	orrs	r3, r1
 800b54a:	6553      	str	r3, [r2, #84]	; 0x54
 800b54c:	e003      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b552:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b566:	2300      	movs	r3, #0
 800b568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b56c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b570:	460b      	mov	r3, r1
 800b572:	4313      	orrs	r3, r2
 800b574:	d058      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b57e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b582:	d033      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b584:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b588:	d82c      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b58a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b58e:	d02f      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b594:	d826      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b59a:	d02b      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b59c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5a0:	d820      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b5a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5a6:	d012      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b5a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5ac:	d81a      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d022      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b5b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5b6:	d115      	bne.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5bc:	3308      	adds	r3, #8
 800b5be:	2100      	movs	r1, #0
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f001 fc5f 	bl	800ce84 <RCCEx_PLL2_Config>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5cc:	e015      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d2:	3328      	adds	r3, #40	; 0x28
 800b5d4:	2102      	movs	r1, #2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f001 fd06 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5e2:	e00a      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5ea:	e006      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5ec:	bf00      	nop
 800b5ee:	e004      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5f0:	bf00      	nop
 800b5f2:	e002      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5f4:	bf00      	nop
 800b5f6:	e000      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b5f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10e      	bne.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b602:	4b06      	ldr	r3, [pc, #24]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b606:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b612:	4a02      	ldr	r2, [pc, #8]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b614:	430b      	orrs	r3, r1
 800b616:	6593      	str	r3, [r2, #88]	; 0x58
 800b618:	e006      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b61a:	bf00      	nop
 800b61c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b620:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b624:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b638:	2300      	movs	r3, #0
 800b63a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b63e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b642:	460b      	mov	r3, r1
 800b644:	4313      	orrs	r3, r2
 800b646:	d055      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b650:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b654:	d033      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b656:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b65a:	d82c      	bhi.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b65c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b660:	d02f      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b666:	d826      	bhi.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b668:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b66c:	d02b      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b66e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b672:	d820      	bhi.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b678:	d012      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b67a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b67e:	d81a      	bhi.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b680:	2b00      	cmp	r3, #0
 800b682:	d022      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b688:	d115      	bne.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68e:	3308      	adds	r3, #8
 800b690:	2100      	movs	r1, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f001 fbf6 	bl	800ce84 <RCCEx_PLL2_Config>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b69e:	e015      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a4:	3328      	adds	r3, #40	; 0x28
 800b6a6:	2102      	movs	r1, #2
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 fc9d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b6b4:	e00a      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6bc:	e006      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b6be:	bf00      	nop
 800b6c0:	e004      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b6c2:	bf00      	nop
 800b6c4:	e002      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b6c6:	bf00      	nop
 800b6c8:	e000      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b6ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10b      	bne.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b6d4:	4ba0      	ldr	r3, [pc, #640]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6e4:	4a9c      	ldr	r2, [pc, #624]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b6ea:	e003      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f002 0308 	and.w	r3, r2, #8
 800b700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b704:	2300      	movs	r3, #0
 800b706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b70a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b70e:	460b      	mov	r3, r1
 800b710:	4313      	orrs	r3, r2
 800b712:	d01e      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b71c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b720:	d10c      	bne.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b726:	3328      	adds	r3, #40	; 0x28
 800b728:	2102      	movs	r1, #2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f001 fc5c 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b73c:	4b86      	ldr	r3, [pc, #536]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b73e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b74c:	4a82      	ldr	r2, [pc, #520]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b74e:	430b      	orrs	r3, r1
 800b750:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75a:	f002 0310 	and.w	r3, r2, #16
 800b75e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b762:	2300      	movs	r3, #0
 800b764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b768:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b76c:	460b      	mov	r3, r1
 800b76e:	4313      	orrs	r3, r2
 800b770:	d01e      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b77a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b77e:	d10c      	bne.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b784:	3328      	adds	r3, #40	; 0x28
 800b786:	2102      	movs	r1, #2
 800b788:	4618      	mov	r0, r3
 800b78a:	f001 fc2d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b79a:	4b6f      	ldr	r3, [pc, #444]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7aa:	4a6b      	ldr	r2, [pc, #428]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b7bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b7be:	2300      	movs	r3, #0
 800b7c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	d03e      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7d8:	d022      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b7da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7de:	d81b      	bhi.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d003      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e8:	d00b      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b7ea:	e015      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f001 fb45 	bl	800ce84 <RCCEx_PLL2_Config>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b800:	e00f      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b806:	3328      	adds	r3, #40	; 0x28
 800b808:	2102      	movs	r1, #2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f001 fbec 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b810:	4603      	mov	r3, r0
 800b812:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b816:	e004      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b81e:	e000      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b820:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b822:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10b      	bne.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b82a:	4b4b      	ldr	r3, [pc, #300]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b82e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b83a:	4a47      	ldr	r2, [pc, #284]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b83c:	430b      	orrs	r3, r1
 800b83e:	6593      	str	r3, [r2, #88]	; 0x58
 800b840:	e003      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b842:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b846:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b856:	673b      	str	r3, [r7, #112]	; 0x70
 800b858:	2300      	movs	r3, #0
 800b85a:	677b      	str	r3, [r7, #116]	; 0x74
 800b85c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b860:	460b      	mov	r3, r1
 800b862:	4313      	orrs	r3, r2
 800b864:	d03b      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b86e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b872:	d01f      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b878:	d818      	bhi.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b87a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b87e:	d003      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b884:	d007      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b886:	e011      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b888:	4b33      	ldr	r3, [pc, #204]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	4a32      	ldr	r2, [pc, #200]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b88e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b894:	e00f      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	3328      	adds	r3, #40	; 0x28
 800b89c:	2101      	movs	r1, #1
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f001 fba2 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b8aa:	e004      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8b2:	e000      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b8b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10b      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b8be:	4b26      	ldr	r3, [pc, #152]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ce:	4a22      	ldr	r2, [pc, #136]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8d0:	430b      	orrs	r3, r1
 800b8d2:	6553      	str	r3, [r2, #84]	; 0x54
 800b8d4:	e003      	b.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b8ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	d034      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b908:	d007      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b90a:	e011      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b90c:	4b12      	ldr	r3, [pc, #72]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	4a11      	ldr	r2, [pc, #68]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b918:	e00e      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91e:	3308      	adds	r3, #8
 800b920:	2102      	movs	r1, #2
 800b922:	4618      	mov	r0, r3
 800b924:	f001 faae 	bl	800ce84 <RCCEx_PLL2_Config>
 800b928:	4603      	mov	r3, r0
 800b92a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b92e:	e003      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b936:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b938:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10d      	bne.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b940:	4b05      	ldr	r3, [pc, #20]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b94e:	4a02      	ldr	r2, [pc, #8]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b950:	430b      	orrs	r3, r1
 800b952:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b954:	e006      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b956:	bf00      	nop
 800b958:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b970:	663b      	str	r3, [r7, #96]	; 0x60
 800b972:	2300      	movs	r3, #0
 800b974:	667b      	str	r3, [r7, #100]	; 0x64
 800b976:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b97a:	460b      	mov	r3, r1
 800b97c:	4313      	orrs	r3, r2
 800b97e:	d00c      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	3328      	adds	r3, #40	; 0x28
 800b986:	2102      	movs	r1, #2
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 fb2d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b9a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	d036      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9c0:	d018      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b9c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9c6:	d811      	bhi.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9cc:	d014      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b9ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d2:	d80b      	bhi.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d011      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b9d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9dc:	d106      	bne.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9de:	4bb7      	ldr	r3, [pc, #732]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	4ab6      	ldr	r2, [pc, #728]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b9ea:	e008      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9f2:	e004      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b9f4:	bf00      	nop
 800b9f6:	e002      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b9f8:	bf00      	nop
 800b9fa:	e000      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b9fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba06:	4bad      	ldr	r3, [pc, #692]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ba0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba14:	4aa9      	ldr	r2, [pc, #676]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba16:	430b      	orrs	r3, r1
 800ba18:	6553      	str	r3, [r2, #84]	; 0x54
 800ba1a:	e003      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ba30:	653b      	str	r3, [r7, #80]	; 0x50
 800ba32:	2300      	movs	r3, #0
 800ba34:	657b      	str	r3, [r7, #84]	; 0x54
 800ba36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	d009      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba40:	4b9e      	ldr	r3, [pc, #632]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba4e:	4a9b      	ldr	r2, [pc, #620]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba50:	430b      	orrs	r3, r1
 800ba52:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ba60:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba62:	2300      	movs	r3, #0
 800ba64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	d009      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba70:	4b92      	ldr	r3, [pc, #584]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba74:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ba78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba7e:	4a8f      	ldr	r2, [pc, #572]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba80:	430b      	orrs	r3, r1
 800ba82:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ba90:	643b      	str	r3, [r7, #64]	; 0x40
 800ba92:	2300      	movs	r3, #0
 800ba94:	647b      	str	r3, [r7, #68]	; 0x44
 800ba96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d00e      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800baa0:	4b86      	ldr	r3, [pc, #536]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	4a85      	ldr	r2, [pc, #532]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800baa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800baaa:	6113      	str	r3, [r2, #16]
 800baac:	4b83      	ldr	r3, [pc, #524]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800baae:	6919      	ldr	r1, [r3, #16]
 800bab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bab8:	4a80      	ldr	r2, [pc, #512]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800baba:	430b      	orrs	r3, r1
 800babc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800babe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800baca:	63bb      	str	r3, [r7, #56]	; 0x38
 800bacc:	2300      	movs	r3, #0
 800bace:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bad0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bad4:	460b      	mov	r3, r1
 800bad6:	4313      	orrs	r3, r2
 800bad8:	d009      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bada:	4b78      	ldr	r3, [pc, #480]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800badc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bade:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae8:	4a74      	ldr	r2, [pc, #464]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800baea:	430b      	orrs	r3, r1
 800baec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800baee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bafa:	633b      	str	r3, [r7, #48]	; 0x30
 800bafc:	2300      	movs	r3, #0
 800bafe:	637b      	str	r3, [r7, #52]	; 0x34
 800bb00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bb04:	460b      	mov	r3, r1
 800bb06:	4313      	orrs	r3, r2
 800bb08:	d00a      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb0a:	4b6c      	ldr	r3, [pc, #432]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb1a:	4a68      	ldr	r2, [pc, #416]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb1c:	430b      	orrs	r3, r1
 800bb1e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	2100      	movs	r1, #0
 800bb2a:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bb36:	460b      	mov	r3, r1
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	d011      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb40:	3308      	adds	r3, #8
 800bb42:	2100      	movs	r1, #0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f001 f99d 	bl	800ce84 <RCCEx_PLL2_Config>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	2100      	movs	r1, #0
 800bb6a:	6239      	str	r1, [r7, #32]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	627b      	str	r3, [r7, #36]	; 0x24
 800bb72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bb76:	460b      	mov	r3, r1
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	d011      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb80:	3308      	adds	r3, #8
 800bb82:	2101      	movs	r1, #1
 800bb84:	4618      	mov	r0, r3
 800bb86:	f001 f97d 	bl	800ce84 <RCCEx_PLL2_Config>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	2100      	movs	r1, #0
 800bbaa:	61b9      	str	r1, [r7, #24]
 800bbac:	f003 0304 	and.w	r3, r3, #4
 800bbb0:	61fb      	str	r3, [r7, #28]
 800bbb2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	d011      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	2102      	movs	r1, #2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f001 f95d 	bl	800ce84 <RCCEx_PLL2_Config>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bbd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	2100      	movs	r1, #0
 800bbea:	6139      	str	r1, [r7, #16]
 800bbec:	f003 0308 	and.w	r3, r3, #8
 800bbf0:	617b      	str	r3, [r7, #20]
 800bbf2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	d011      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc00:	3328      	adds	r3, #40	; 0x28
 800bc02:	2100      	movs	r1, #0
 800bc04:	4618      	mov	r0, r3
 800bc06:	f001 f9ef 	bl	800cfe8 <RCCEx_PLL3_Config>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bc10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	2100      	movs	r1, #0
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	f003 0310 	and.w	r3, r3, #16
 800bc30:	60fb      	str	r3, [r7, #12]
 800bc32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc36:	460b      	mov	r3, r1
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	d011      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc40:	3328      	adds	r3, #40	; 0x28
 800bc42:	2101      	movs	r1, #1
 800bc44:	4618      	mov	r0, r3
 800bc46:	f001 f9cf 	bl	800cfe8 <RCCEx_PLL3_Config>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d003      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	2100      	movs	r1, #0
 800bc6a:	6039      	str	r1, [r7, #0]
 800bc6c:	f003 0320 	and.w	r3, r3, #32
 800bc70:	607b      	str	r3, [r7, #4]
 800bc72:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc76:	460b      	mov	r3, r1
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	d011      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc80:	3328      	adds	r3, #40	; 0x28
 800bc82:	2102      	movs	r1, #2
 800bc84:	4618      	mov	r0, r3
 800bc86:	f001 f9af 	bl	800cfe8 <RCCEx_PLL3_Config>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d003      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bca0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	e000      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcba:	bf00      	nop
 800bcbc:	58024400 	.word	0x58024400

0800bcc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b090      	sub	sp, #64	; 0x40
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bcca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bcd2:	430b      	orrs	r3, r1
 800bcd4:	f040 8094 	bne.w	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bcd8:	4b9b      	ldr	r3, [pc, #620]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcdc:	f003 0307 	and.w	r3, r3, #7
 800bce0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	f200 8087 	bhi.w	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd05 	.word	0x0800bd05
 800bcf4:	0800bd2d 	.word	0x0800bd2d
 800bcf8:	0800bd55 	.word	0x0800bd55
 800bcfc:	0800bdf1 	.word	0x0800bdf1
 800bd00:	0800bd7d 	.word	0x0800bd7d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd04:	4b90      	ldr	r3, [pc, #576]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd10:	d108      	bne.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 ff62 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd20:	f000 bc93 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd28:	f000 bc8f 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd2c:	4b86      	ldr	r3, [pc, #536]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd38:	d108      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3a:	f107 0318 	add.w	r3, r7, #24
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 fca6 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd48:	f000 bc7f 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd50:	f000 bc7b 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd54:	4b7c      	ldr	r3, [pc, #496]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd60:	d108      	bne.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd62:	f107 030c 	add.w	r3, r7, #12
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 fde6 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd70:	f000 bc6b 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd78:	f000 bc67 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd7c:	4b72      	ldr	r3, [pc, #456]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd86:	4b70      	ldr	r3, [pc, #448]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d10c      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd98:	4b6b      	ldr	r3, [pc, #428]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	08db      	lsrs	r3, r3, #3
 800bd9e:	f003 0303 	and.w	r3, r3, #3
 800bda2:	4a6a      	ldr	r2, [pc, #424]	; (800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bda4:	fa22 f303 	lsr.w	r3, r2, r3
 800bda8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdaa:	e01f      	b.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdac:	4b66      	ldr	r3, [pc, #408]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdb8:	d106      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdc0:	d102      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdc2:	4b63      	ldr	r3, [pc, #396]	; (800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc6:	e011      	b.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdc8:	4b5f      	ldr	r3, [pc, #380]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdd4:	d106      	bne.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bddc:	d102      	bne.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdde:	4b5d      	ldr	r3, [pc, #372]	; (800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde2:	e003      	b.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bde8:	f000 bc2f 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdec:	f000 bc2d 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdf0:	4b59      	ldr	r3, [pc, #356]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf4:	f000 bc29 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdfc:	f000 bc25 	b.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be04:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800be08:	430b      	orrs	r3, r1
 800be0a:	f040 80a7 	bne.w	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800be0e:	4b4e      	ldr	r3, [pc, #312]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be12:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800be16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be1e:	d054      	beq.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be26:	f200 808b 	bhi.w	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be30:	f000 8083 	beq.w	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be3a:	f200 8081 	bhi.w	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be44:	d02f      	beq.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be4c:	d878      	bhi.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800be4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be50:	2b00      	cmp	r3, #0
 800be52:	d004      	beq.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be5a:	d012      	beq.n	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800be5c:	e070      	b.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be5e:	4b3a      	ldr	r3, [pc, #232]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be6a:	d107      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be70:	4618      	mov	r0, r3
 800be72:	f000 feb5 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be7a:	e3e6      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be80:	e3e3      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be82:	4b31      	ldr	r3, [pc, #196]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be8e:	d107      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be90:	f107 0318 	add.w	r3, r7, #24
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fbfb 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be9e:	e3d4      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bea4:	e3d1      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bea6:	4b28      	ldr	r3, [pc, #160]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb2:	d107      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb4:	f107 030c 	add.w	r3, r7, #12
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fd3d 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bec2:	e3c2      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec8:	e3bf      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800beca:	4b1f      	ldr	r3, [pc, #124]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800becc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bed2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bed4:	4b1c      	ldr	r3, [pc, #112]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0304 	and.w	r3, r3, #4
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d10c      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d109      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bee6:	4b18      	ldr	r3, [pc, #96]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	08db      	lsrs	r3, r3, #3
 800beec:	f003 0303 	and.w	r3, r3, #3
 800bef0:	4a16      	ldr	r2, [pc, #88]	; (800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bef2:	fa22 f303 	lsr.w	r3, r2, r3
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bef8:	e01e      	b.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800befa:	4b13      	ldr	r3, [pc, #76]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf06:	d106      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf0e:	d102      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf10:	4b0f      	ldr	r3, [pc, #60]	; (800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf14:	e010      	b.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf16:	4b0c      	ldr	r3, [pc, #48]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf22:	d106      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf2a:	d102      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf2c:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf30:	e002      	b.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf36:	e388      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf38:	e387      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf3a:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf3e:	e384      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf44:	e381      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf46:	bf00      	nop
 800bf48:	58024400 	.word	0x58024400
 800bf4c:	03d09000 	.word	0x03d09000
 800bf50:	003d0900 	.word	0x003d0900
 800bf54:	02faf080 	.word	0x02faf080
 800bf58:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bf5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf60:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bf64:	430b      	orrs	r3, r1
 800bf66:	f040 809c 	bne.w	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bf6a:	4b9e      	ldr	r3, [pc, #632]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf6e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bf72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf7a:	d054      	beq.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf82:	f200 808b 	bhi.w	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf8c:	f000 8083 	beq.w	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf96:	f200 8081 	bhi.w	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfa0:	d02f      	beq.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfa8:	d878      	bhi.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d004      	beq.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfb6:	d012      	beq.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bfb8:	e070      	b.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfba:	4b8a      	ldr	r3, [pc, #552]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfc6:	d107      	bne.n	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 fe07 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfd6:	e338      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfdc:	e335      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfde:	4b81      	ldr	r3, [pc, #516]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfea:	d107      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfec:	f107 0318 	add.w	r3, r7, #24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fb4d 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bffa:	e326      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c000:	e323      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c002:	4b78      	ldr	r3, [pc, #480]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c00e:	d107      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c010:	f107 030c 	add.w	r3, r7, #12
 800c014:	4618      	mov	r0, r3
 800c016:	f000 fc8f 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c01e:	e314      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c020:	2300      	movs	r3, #0
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c024:	e311      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c026:	4b6f      	ldr	r3, [pc, #444]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c02a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c02e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c030:	4b6c      	ldr	r3, [pc, #432]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 0304 	and.w	r3, r3, #4
 800c038:	2b04      	cmp	r3, #4
 800c03a:	d10c      	bne.n	800c056 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d109      	bne.n	800c056 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c042:	4b68      	ldr	r3, [pc, #416]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	08db      	lsrs	r3, r3, #3
 800c048:	f003 0303 	and.w	r3, r3, #3
 800c04c:	4a66      	ldr	r2, [pc, #408]	; (800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c04e:	fa22 f303 	lsr.w	r3, r2, r3
 800c052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c054:	e01e      	b.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c056:	4b63      	ldr	r3, [pc, #396]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c062:	d106      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c06a:	d102      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c06c:	4b5f      	ldr	r3, [pc, #380]	; (800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c070:	e010      	b.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c072:	4b5c      	ldr	r3, [pc, #368]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c07a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c07e:	d106      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c086:	d102      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c088:	4b59      	ldr	r3, [pc, #356]	; (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c08c:	e002      	b.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c08e:	2300      	movs	r3, #0
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c092:	e2da      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c094:	e2d9      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c096:	4b57      	ldr	r3, [pc, #348]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c09a:	e2d6      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a0:	e2d3      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0a6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c0aa:	430b      	orrs	r3, r1
 800c0ac:	f040 80a7 	bne.w	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c0b0:	4b4c      	ldr	r3, [pc, #304]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c0b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0c0:	d055      	beq.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0c8:	f200 8096 	bhi.w	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0d2:	f000 8084 	beq.w	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0dc:	f200 808c 	bhi.w	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e6:	d030      	beq.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ee:	f200 8083 	bhi.w	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d004      	beq.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fe:	d012      	beq.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c100:	e07a      	b.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c102:	4b38      	ldr	r3, [pc, #224]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c10a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c10e:	d107      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c114:	4618      	mov	r0, r3
 800c116:	f000 fd63 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c11e:	e294      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c124:	e291      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c126:	4b2f      	ldr	r3, [pc, #188]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c12e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c132:	d107      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c134:	f107 0318 	add.w	r3, r7, #24
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 faa9 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c142:	e282      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c148:	e27f      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c14a:	4b26      	ldr	r3, [pc, #152]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c156:	d107      	bne.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c158:	f107 030c 	add.w	r3, r7, #12
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 fbeb 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c166:	e270      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16c:	e26d      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c16e:	4b1d      	ldr	r3, [pc, #116]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c176:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c178:	4b1a      	ldr	r3, [pc, #104]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	2b04      	cmp	r3, #4
 800c182:	d10c      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c186:	2b00      	cmp	r3, #0
 800c188:	d109      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c18a:	4b16      	ldr	r3, [pc, #88]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	08db      	lsrs	r3, r3, #3
 800c190:	f003 0303 	and.w	r3, r3, #3
 800c194:	4a14      	ldr	r2, [pc, #80]	; (800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c196:	fa22 f303 	lsr.w	r3, r2, r3
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c19c:	e01e      	b.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c19e:	4b11      	ldr	r3, [pc, #68]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1aa:	d106      	bne.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1b2:	d102      	bne.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1b4:	4b0d      	ldr	r3, [pc, #52]	; (800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1b8:	e010      	b.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1ba:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1c6:	d106      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ce:	d102      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1d0:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d4:	e002      	b.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1da:	e236      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1dc:	e235      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1de:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e2:	e232      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1e4:	58024400 	.word	0x58024400
 800c1e8:	03d09000 	.word	0x03d09000
 800c1ec:	003d0900 	.word	0x003d0900
 800c1f0:	02faf080 	.word	0x02faf080
 800c1f4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1fc:	e225      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c202:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c206:	430b      	orrs	r3, r1
 800c208:	f040 8085 	bne.w	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c20c:	4b9c      	ldr	r3, [pc, #624]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c210:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c214:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c21c:	d06b      	beq.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c224:	d874      	bhi.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c22c:	d056      	beq.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c234:	d86c      	bhi.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c23c:	d03b      	beq.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c244:	d864      	bhi.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c24c:	d021      	beq.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c254:	d85c      	bhi.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d004      	beq.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c262:	d004      	beq.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c264:	e054      	b.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c266:	f7fe fb5f 	bl	800a928 <HAL_RCC_GetPCLK1Freq>
 800c26a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c26c:	e1ed      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c26e:	4b84      	ldr	r3, [pc, #528]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c27a:	d107      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c27c:	f107 0318 	add.w	r3, r7, #24
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fa05 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c28a:	e1de      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c290:	e1db      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c292:	4b7b      	ldr	r3, [pc, #492]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c29a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c29e:	d107      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2a0:	f107 030c 	add.w	r3, r7, #12
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 fb47 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ae:	e1cc      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b4:	e1c9      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2b6:	4b72      	ldr	r3, [pc, #456]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 0304 	and.w	r3, r3, #4
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	d109      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2c2:	4b6f      	ldr	r3, [pc, #444]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	08db      	lsrs	r3, r3, #3
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	4a6d      	ldr	r2, [pc, #436]	; (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d4:	e1b9      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2da:	e1b6      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c2dc:	4b68      	ldr	r3, [pc, #416]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e8:	d102      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c2ea:	4b67      	ldr	r3, [pc, #412]	; (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ee:	e1ac      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f4:	e1a9      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c2f6:	4b62      	ldr	r3, [pc, #392]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c302:	d102      	bne.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c304:	4b61      	ldr	r3, [pc, #388]	; (800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c308:	e19f      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30e:	e19c      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c314:	e199      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c31a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c31e:	430b      	orrs	r3, r1
 800c320:	d173      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c322:	4b57      	ldr	r3, [pc, #348]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c326:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c32a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c332:	d02f      	beq.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c33a:	d863      	bhi.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d004      	beq.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c348:	d012      	beq.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c34a:	e05b      	b.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c34c:	4b4c      	ldr	r3, [pc, #304]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c358:	d107      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c35a:	f107 0318 	add.w	r3, r7, #24
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 f996 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c368:	e16f      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c36e:	e16c      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c370:	4b43      	ldr	r3, [pc, #268]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c37c:	d107      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c37e:	f107 030c 	add.w	r3, r7, #12
 800c382:	4618      	mov	r0, r3
 800c384:	f000 fad8 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c38c:	e15d      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c392:	e15a      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c394:	4b3a      	ldr	r3, [pc, #232]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c39c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c39e:	4b38      	ldr	r3, [pc, #224]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0304 	and.w	r3, r3, #4
 800c3a6:	2b04      	cmp	r3, #4
 800c3a8:	d10c      	bne.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d109      	bne.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3b0:	4b33      	ldr	r3, [pc, #204]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	08db      	lsrs	r3, r3, #3
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	4a32      	ldr	r2, [pc, #200]	; (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c2:	e01e      	b.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3c4:	4b2e      	ldr	r3, [pc, #184]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3d0:	d106      	bne.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3d8:	d102      	bne.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3da:	4b2b      	ldr	r3, [pc, #172]	; (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3de:	e010      	b.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3e0:	4b27      	ldr	r3, [pc, #156]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3ec:	d106      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3f4:	d102      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3f6:	4b25      	ldr	r3, [pc, #148]	; (800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3fa:	e002      	b.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c400:	e123      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c402:	e122      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c408:	e11f      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c40e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c412:	430b      	orrs	r3, r1
 800c414:	d13c      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c416:	4b1a      	ldr	r3, [pc, #104]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c41a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c41e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	2b00      	cmp	r3, #0
 800c424:	d004      	beq.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c42c:	d012      	beq.n	800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c42e:	e023      	b.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c430:	4b13      	ldr	r3, [pc, #76]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c43c:	d107      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c43e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c442:	4618      	mov	r0, r3
 800c444:	f000 fbcc 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c44c:	e0fd      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c452:	e0fa      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c454:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c45c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c460:	d107      	bne.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c462:	f107 0318 	add.w	r3, r7, #24
 800c466:	4618      	mov	r0, r3
 800c468:	f000 f912 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c46c:	6a3b      	ldr	r3, [r7, #32]
 800c46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c470:	e0eb      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c476:	e0e8      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47c:	e0e5      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c47e:	bf00      	nop
 800c480:	58024400 	.word	0x58024400
 800c484:	03d09000 	.word	0x03d09000
 800c488:	003d0900 	.word	0x003d0900
 800c48c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c490:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c494:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c498:	430b      	orrs	r3, r1
 800c49a:	f040 8085 	bne.w	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c49e:	4b6d      	ldr	r3, [pc, #436]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c4a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4ae:	d06b      	beq.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4b6:	d874      	bhi.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4be:	d056      	beq.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4c6:	d86c      	bhi.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4ce:	d03b      	beq.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4d6:	d864      	bhi.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4de:	d021      	beq.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e6:	d85c      	bhi.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d004      	beq.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4f4:	d004      	beq.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c4f6:	e054      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c4f8:	f000 f8b4 	bl	800c664 <HAL_RCCEx_GetD3PCLK1Freq>
 800c4fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4fe:	e0a4      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c500:	4b54      	ldr	r3, [pc, #336]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c50c:	d107      	bne.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c50e:	f107 0318 	add.w	r3, r7, #24
 800c512:	4618      	mov	r0, r3
 800c514:	f000 f8bc 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51c:	e095      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c522:	e092      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c524:	4b4b      	ldr	r3, [pc, #300]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c52c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c530:	d107      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c532:	f107 030c 	add.w	r3, r7, #12
 800c536:	4618      	mov	r0, r3
 800c538:	f000 f9fe 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c540:	e083      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c546:	e080      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c548:	4b42      	ldr	r3, [pc, #264]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b04      	cmp	r3, #4
 800c552:	d109      	bne.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c554:	4b3f      	ldr	r3, [pc, #252]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	08db      	lsrs	r3, r3, #3
 800c55a:	f003 0303 	and.w	r3, r3, #3
 800c55e:	4a3e      	ldr	r2, [pc, #248]	; (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c560:	fa22 f303 	lsr.w	r3, r2, r3
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c566:	e070      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e06d      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c56e:	4b39      	ldr	r3, [pc, #228]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c57a:	d102      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c57c:	4b37      	ldr	r3, [pc, #220]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c580:	e063      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c586:	e060      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c588:	4b32      	ldr	r3, [pc, #200]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c594:	d102      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c596:	4b32      	ldr	r3, [pc, #200]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c59a:	e056      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a0:	e053      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a6:	e050      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c5a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ac:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	d148      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c5b4:	4b27      	ldr	r3, [pc, #156]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5c4:	d02a      	beq.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5cc:	d838      	bhi.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5da:	d00d      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c5dc:	e030      	b.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5de:	4b1d      	ldr	r3, [pc, #116]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ea:	d102      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c5ec:	4b1c      	ldr	r3, [pc, #112]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f0:	e02b      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f6:	e028      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5f8:	4b16      	ldr	r3, [pc, #88]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c604:	d107      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 fae8 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c614:	e019      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61a:	e016      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c61c:	4b0d      	ldr	r3, [pc, #52]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c628:	d107      	bne.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c62a:	f107 0318 	add.w	r3, r7, #24
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 f82e 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c638:	e007      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63e:	e004      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c644:	e001      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3740      	adds	r7, #64	; 0x40
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	58024400 	.word	0x58024400
 800c658:	03d09000 	.word	0x03d09000
 800c65c:	003d0900 	.word	0x003d0900
 800c660:	02faf080 	.word	0x02faf080

0800c664 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c668:	f7fe f92e 	bl	800a8c8 <HAL_RCC_GetHCLKFreq>
 800c66c:	4602      	mov	r2, r0
 800c66e:	4b06      	ldr	r3, [pc, #24]	; (800c688 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	091b      	lsrs	r3, r3, #4
 800c674:	f003 0307 	and.w	r3, r3, #7
 800c678:	4904      	ldr	r1, [pc, #16]	; (800c68c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c67a:	5ccb      	ldrb	r3, [r1, r3]
 800c67c:	f003 031f 	and.w	r3, r3, #31
 800c680:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c684:	4618      	mov	r0, r3
 800c686:	bd80      	pop	{r7, pc}
 800c688:	58024400 	.word	0x58024400
 800c68c:	08018878 	.word	0x08018878

0800c690 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c690:	b480      	push	{r7}
 800c692:	b089      	sub	sp, #36	; 0x24
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c698:	4ba1      	ldr	r3, [pc, #644]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69c:	f003 0303 	and.w	r3, r3, #3
 800c6a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c6a2:	4b9f      	ldr	r3, [pc, #636]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a6:	0b1b      	lsrs	r3, r3, #12
 800c6a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c6ae:	4b9c      	ldr	r3, [pc, #624]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b2:	091b      	lsrs	r3, r3, #4
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c6ba:	4b99      	ldr	r3, [pc, #612]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6be:	08db      	lsrs	r3, r3, #3
 800c6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 8111 	beq.w	800c900 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	f000 8083 	beq.w	800c7ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	f200 80a1 	bhi.w	800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d056      	beq.n	800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c6fa:	e099      	b.n	800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6fc:	4b88      	ldr	r3, [pc, #544]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 0320 	and.w	r3, r3, #32
 800c704:	2b00      	cmp	r3, #0
 800c706:	d02d      	beq.n	800c764 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c708:	4b85      	ldr	r3, [pc, #532]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	08db      	lsrs	r3, r3, #3
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	4a84      	ldr	r2, [pc, #528]	; (800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c714:	fa22 f303 	lsr.w	r3, r2, r3
 800c718:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	ee07 3a90 	vmov	s15, r3
 800c720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c732:	4b7b      	ldr	r3, [pc, #492]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73a:	ee07 3a90 	vmov	s15, r3
 800c73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c742:	ed97 6a03 	vldr	s12, [r7, #12]
 800c746:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c75e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c762:	e087      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	ee07 3a90 	vmov	s15, r3
 800c76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c776:	4b6a      	ldr	r3, [pc, #424]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c77e:	ee07 3a90 	vmov	s15, r3
 800c782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c786:	ed97 6a03 	vldr	s12, [r7, #12]
 800c78a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7a6:	e065      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	ee07 3a90 	vmov	s15, r3
 800c7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ba:	4b59      	ldr	r3, [pc, #356]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	ee07 3a90 	vmov	s15, r3
 800c7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7ea:	e043      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7fe:	4b48      	ldr	r3, [pc, #288]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c806:	ee07 3a90 	vmov	s15, r3
 800c80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c812:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c82e:	e021      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c842:	4b37      	ldr	r3, [pc, #220]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c852:	ed97 6a03 	vldr	s12, [r7, #12]
 800c856:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c872:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c874:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c878:	0a5b      	lsrs	r3, r3, #9
 800c87a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c88a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c88e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c89a:	ee17 2a90 	vmov	r2, s15
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c8a2:	4b1f      	ldr	r3, [pc, #124]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a6:	0c1b      	lsrs	r3, r3, #16
 800c8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ac:	ee07 3a90 	vmov	s15, r3
 800c8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8c8:	ee17 2a90 	vmov	r2, s15
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c8d0:	4b13      	ldr	r3, [pc, #76]	; (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d4:	0e1b      	lsrs	r3, r3, #24
 800c8d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8da:	ee07 3a90 	vmov	s15, r3
 800c8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f6:	ee17 2a90 	vmov	r2, s15
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c8fe:	e008      	b.n	800c912 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	609a      	str	r2, [r3, #8]
}
 800c912:	bf00      	nop
 800c914:	3724      	adds	r7, #36	; 0x24
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	58024400 	.word	0x58024400
 800c924:	03d09000 	.word	0x03d09000
 800c928:	46000000 	.word	0x46000000
 800c92c:	4c742400 	.word	0x4c742400
 800c930:	4a742400 	.word	0x4a742400
 800c934:	4c3ebc20 	.word	0x4c3ebc20

0800c938 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c938:	b480      	push	{r7}
 800c93a:	b089      	sub	sp, #36	; 0x24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c940:	4ba1      	ldr	r3, [pc, #644]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c944:	f003 0303 	and.w	r3, r3, #3
 800c948:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c94a:	4b9f      	ldr	r3, [pc, #636]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94e:	0d1b      	lsrs	r3, r3, #20
 800c950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c954:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c956:	4b9c      	ldr	r3, [pc, #624]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c95a:	0a1b      	lsrs	r3, r3, #8
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c962:	4b99      	ldr	r3, [pc, #612]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c966:	08db      	lsrs	r3, r3, #3
 800c968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	fb02 f303 	mul.w	r3, r2, r3
 800c972:	ee07 3a90 	vmov	s15, r3
 800c976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 8111 	beq.w	800cba8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	f000 8083 	beq.w	800ca94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	2b02      	cmp	r3, #2
 800c992:	f200 80a1 	bhi.w	800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d056      	beq.n	800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c9a2:	e099      	b.n	800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9a4:	4b88      	ldr	r3, [pc, #544]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0320 	and.w	r3, r3, #32
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d02d      	beq.n	800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9b0:	4b85      	ldr	r3, [pc, #532]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	08db      	lsrs	r3, r3, #3
 800c9b6:	f003 0303 	and.w	r3, r3, #3
 800c9ba:	4a84      	ldr	r2, [pc, #528]	; (800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	ee07 3a90 	vmov	s15, r3
 800c9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9da:	4b7b      	ldr	r3, [pc, #492]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e2:	ee07 3a90 	vmov	s15, r3
 800c9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca0a:	e087      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	ee07 3a90 	vmov	s15, r3
 800ca12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca1e:	4b6a      	ldr	r3, [pc, #424]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca26:	ee07 3a90 	vmov	s15, r3
 800ca2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca32:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca4e:	e065      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	ee07 3a90 	vmov	s15, r3
 800ca56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca62:	4b59      	ldr	r3, [pc, #356]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca6a:	ee07 3a90 	vmov	s15, r3
 800ca6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca76:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca92:	e043      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800caa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caa6:	4b48      	ldr	r3, [pc, #288]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caae:	ee07 3a90 	vmov	s15, r3
 800cab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cad6:	e021      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caea:	4b37      	ldr	r3, [pc, #220]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cafe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb1c:	4b2a      	ldr	r3, [pc, #168]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb20:	0a5b      	lsrs	r3, r3, #9
 800cb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb36:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb42:	ee17 2a90 	vmov	r2, s15
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cb4a:	4b1f      	ldr	r3, [pc, #124]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4e:	0c1b      	lsrs	r3, r3, #16
 800cb50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb54:	ee07 3a90 	vmov	s15, r3
 800cb58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb64:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb70:	ee17 2a90 	vmov	r2, s15
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb78:	4b13      	ldr	r3, [pc, #76]	; (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7c:	0e1b      	lsrs	r3, r3, #24
 800cb7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb82:	ee07 3a90 	vmov	s15, r3
 800cb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb92:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb9e:	ee17 2a90 	vmov	r2, s15
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cba6:	e008      	b.n	800cbba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	609a      	str	r2, [r3, #8]
}
 800cbba:	bf00      	nop
 800cbbc:	3724      	adds	r7, #36	; 0x24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	58024400 	.word	0x58024400
 800cbcc:	03d09000 	.word	0x03d09000
 800cbd0:	46000000 	.word	0x46000000
 800cbd4:	4c742400 	.word	0x4c742400
 800cbd8:	4a742400 	.word	0x4a742400
 800cbdc:	4c3ebc20 	.word	0x4c3ebc20

0800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b089      	sub	sp, #36	; 0x24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbe8:	4ba0      	ldr	r3, [pc, #640]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cbf2:	4b9e      	ldr	r3, [pc, #632]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf6:	091b      	lsrs	r3, r3, #4
 800cbf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbfc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cbfe:	4b9b      	ldr	r3, [pc, #620]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc08:	4b98      	ldr	r3, [pc, #608]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc0c:	08db      	lsrs	r3, r3, #3
 800cc0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	fb02 f303 	mul.w	r3, r2, r3
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 8111 	beq.w	800ce4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	f000 8083 	beq.w	800cd3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	f200 80a1 	bhi.w	800cd7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d003      	beq.n	800cc4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d056      	beq.n	800ccf6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cc48:	e099      	b.n	800cd7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc4a:	4b88      	ldr	r3, [pc, #544]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0320 	and.w	r3, r3, #32
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d02d      	beq.n	800ccb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc56:	4b85      	ldr	r3, [pc, #532]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	08db      	lsrs	r3, r3, #3
 800cc5c:	f003 0303 	and.w	r3, r3, #3
 800cc60:	4a83      	ldr	r2, [pc, #524]	; (800ce70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cc62:	fa22 f303 	lsr.w	r3, r2, r3
 800cc66:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc80:	4b7a      	ldr	r3, [pc, #488]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc88:	ee07 3a90 	vmov	s15, r3
 800cc8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc90:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc94:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccb0:	e087      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	ee07 3a90 	vmov	s15, r3
 800ccb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccbc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ccc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccc4:	4b69      	ldr	r3, [pc, #420]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cccc:	ee07 3a90 	vmov	s15, r3
 800ccd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccd4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccd8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccf4:	e065      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	ee07 3a90 	vmov	s15, r3
 800ccfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ce7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cd04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd08:	4b58      	ldr	r3, [pc, #352]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd10:	ee07 3a90 	vmov	s15, r3
 800cd14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd18:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd38:	e043      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	ee07 3a90 	vmov	s15, r3
 800cd40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ce80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cd48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd4c:	4b47      	ldr	r3, [pc, #284]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd54:	ee07 3a90 	vmov	s15, r3
 800cd58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd60:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd7c:	e021      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd88:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd90:	4b36      	ldr	r3, [pc, #216]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd98:	ee07 3a90 	vmov	s15, r3
 800cd9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cda0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cda4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cda8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdc0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cdc2:	4b2a      	ldr	r3, [pc, #168]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc6:	0a5b      	lsrs	r3, r3, #9
 800cdc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdcc:	ee07 3a90 	vmov	s15, r3
 800cdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cddc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cde0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cde4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde8:	ee17 2a90 	vmov	r2, s15
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cdf0:	4b1e      	ldr	r3, [pc, #120]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf4:	0c1b      	lsrs	r3, r3, #16
 800cdf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce16:	ee17 2a90 	vmov	r2, s15
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ce1e:	4b13      	ldr	r3, [pc, #76]	; (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce22:	0e1b      	lsrs	r3, r3, #24
 800ce24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce28:	ee07 3a90 	vmov	s15, r3
 800ce2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce44:	ee17 2a90 	vmov	r2, s15
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ce4c:	e008      	b.n	800ce60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	609a      	str	r2, [r3, #8]
}
 800ce60:	bf00      	nop
 800ce62:	3724      	adds	r7, #36	; 0x24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	58024400 	.word	0x58024400
 800ce70:	03d09000 	.word	0x03d09000
 800ce74:	46000000 	.word	0x46000000
 800ce78:	4c742400 	.word	0x4c742400
 800ce7c:	4a742400 	.word	0x4a742400
 800ce80:	4c3ebc20 	.word	0x4c3ebc20

0800ce84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce92:	4b53      	ldr	r3, [pc, #332]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800ce94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce96:	f003 0303 	and.w	r3, r3, #3
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d101      	bne.n	800cea2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e099      	b.n	800cfd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cea2:	4b4f      	ldr	r3, [pc, #316]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a4e      	ldr	r2, [pc, #312]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cea8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ceac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceae:	f7f6 fe7b 	bl	8003ba8 <HAL_GetTick>
 800ceb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ceb4:	e008      	b.n	800cec8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ceb6:	f7f6 fe77 	bl	8003ba8 <HAL_GetTick>
 800ceba:	4602      	mov	r2, r0
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d901      	bls.n	800cec8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e086      	b.n	800cfd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cec8:	4b45      	ldr	r3, [pc, #276]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1f0      	bne.n	800ceb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ced4:	4b42      	ldr	r3, [pc, #264]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800ced6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	031b      	lsls	r3, r3, #12
 800cee2:	493f      	ldr	r1, [pc, #252]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cee4:	4313      	orrs	r3, r2
 800cee6:	628b      	str	r3, [r1, #40]	; 0x28
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	025b      	lsls	r3, r3, #9
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	431a      	orrs	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	041b      	lsls	r3, r3, #16
 800cf06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf0a:	431a      	orrs	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	061b      	lsls	r3, r3, #24
 800cf14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf18:	4931      	ldr	r1, [pc, #196]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf1e:	4b30      	ldr	r3, [pc, #192]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	492d      	ldr	r1, [pc, #180]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf30:	4b2b      	ldr	r3, [pc, #172]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	f023 0220 	bic.w	r2, r3, #32
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	699b      	ldr	r3, [r3, #24]
 800cf3c:	4928      	ldr	r1, [pc, #160]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf42:	4b27      	ldr	r3, [pc, #156]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	4a26      	ldr	r2, [pc, #152]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf48:	f023 0310 	bic.w	r3, r3, #16
 800cf4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf4e:	4b24      	ldr	r3, [pc, #144]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf52:	4b24      	ldr	r3, [pc, #144]	; (800cfe4 <RCCEx_PLL2_Config+0x160>)
 800cf54:	4013      	ands	r3, r2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	69d2      	ldr	r2, [r2, #28]
 800cf5a:	00d2      	lsls	r2, r2, #3
 800cf5c:	4920      	ldr	r1, [pc, #128]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf62:	4b1f      	ldr	r3, [pc, #124]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf66:	4a1e      	ldr	r2, [pc, #120]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf68:	f043 0310 	orr.w	r3, r3, #16
 800cf6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d106      	bne.n	800cf82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf74:	4b1a      	ldr	r3, [pc, #104]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	4a19      	ldr	r2, [pc, #100]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf80:	e00f      	b.n	800cfa2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d106      	bne.n	800cf96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf88:	4b15      	ldr	r3, [pc, #84]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8c:	4a14      	ldr	r2, [pc, #80]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf94:	e005      	b.n	800cfa2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf96:	4b12      	ldr	r3, [pc, #72]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9a:	4a11      	ldr	r2, [pc, #68]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a0e      	ldr	r2, [pc, #56]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cfa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cfac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfae:	f7f6 fdfb 	bl	8003ba8 <HAL_GetTick>
 800cfb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfb4:	e008      	b.n	800cfc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cfb6:	f7f6 fdf7 	bl	8003ba8 <HAL_GetTick>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d901      	bls.n	800cfc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e006      	b.n	800cfd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfc8:	4b05      	ldr	r3, [pc, #20]	; (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d0f0      	beq.n	800cfb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	58024400 	.word	0x58024400
 800cfe4:	ffff0007 	.word	0xffff0007

0800cfe8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cff6:	4b53      	ldr	r3, [pc, #332]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	f003 0303 	and.w	r3, r3, #3
 800cffe:	2b03      	cmp	r3, #3
 800d000:	d101      	bne.n	800d006 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e099      	b.n	800d13a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d006:	4b4f      	ldr	r3, [pc, #316]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a4e      	ldr	r2, [pc, #312]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d00c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d012:	f7f6 fdc9 	bl	8003ba8 <HAL_GetTick>
 800d016:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d018:	e008      	b.n	800d02c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d01a:	f7f6 fdc5 	bl	8003ba8 <HAL_GetTick>
 800d01e:	4602      	mov	r2, r0
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	1ad3      	subs	r3, r2, r3
 800d024:	2b02      	cmp	r3, #2
 800d026:	d901      	bls.n	800d02c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e086      	b.n	800d13a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d02c:	4b45      	ldr	r3, [pc, #276]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1f0      	bne.n	800d01a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d038:	4b42      	ldr	r3, [pc, #264]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	051b      	lsls	r3, r3, #20
 800d046:	493f      	ldr	r1, [pc, #252]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d048:	4313      	orrs	r3, r2
 800d04a:	628b      	str	r3, [r1, #40]	; 0x28
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	3b01      	subs	r3, #1
 800d052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	025b      	lsls	r3, r3, #9
 800d05e:	b29b      	uxth	r3, r3
 800d060:	431a      	orrs	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	3b01      	subs	r3, #1
 800d068:	041b      	lsls	r3, r3, #16
 800d06a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d06e:	431a      	orrs	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	3b01      	subs	r3, #1
 800d076:	061b      	lsls	r3, r3, #24
 800d078:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d07c:	4931      	ldr	r1, [pc, #196]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d082:	4b30      	ldr	r3, [pc, #192]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d086:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	492d      	ldr	r1, [pc, #180]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d090:	4313      	orrs	r3, r2
 800d092:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d094:	4b2b      	ldr	r3, [pc, #172]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d098:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	4928      	ldr	r1, [pc, #160]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d0a6:	4b27      	ldr	r3, [pc, #156]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0aa:	4a26      	ldr	r2, [pc, #152]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d0b2:	4b24      	ldr	r3, [pc, #144]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0b6:	4b24      	ldr	r3, [pc, #144]	; (800d148 <RCCEx_PLL3_Config+0x160>)
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	69d2      	ldr	r2, [r2, #28]
 800d0be:	00d2      	lsls	r2, r2, #3
 800d0c0:	4920      	ldr	r1, [pc, #128]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d0c6:	4b1f      	ldr	r3, [pc, #124]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ca:	4a1e      	ldr	r2, [pc, #120]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d106      	bne.n	800d0e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d0d8:	4b1a      	ldr	r3, [pc, #104]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0dc:	4a19      	ldr	r2, [pc, #100]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0e4:	e00f      	b.n	800d106 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d106      	bne.n	800d0fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0ec:	4b15      	ldr	r3, [pc, #84]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	4a14      	ldr	r2, [pc, #80]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0f8:	e005      	b.n	800d106 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0fa:	4b12      	ldr	r3, [pc, #72]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fe:	4a11      	ldr	r2, [pc, #68]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d104:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d106:	4b0f      	ldr	r3, [pc, #60]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a0e      	ldr	r2, [pc, #56]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d10c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d112:	f7f6 fd49 	bl	8003ba8 <HAL_GetTick>
 800d116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d118:	e008      	b.n	800d12c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d11a:	f7f6 fd45 	bl	8003ba8 <HAL_GetTick>
 800d11e:	4602      	mov	r2, r0
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	2b02      	cmp	r3, #2
 800d126:	d901      	bls.n	800d12c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	e006      	b.n	800d13a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d12c:	4b05      	ldr	r3, [pc, #20]	; (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d0f0      	beq.n	800d11a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d138:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	58024400 	.word	0x58024400
 800d148:	ffff0007 	.word	0xffff0007

0800d14c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e092      	b.n	800d284 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7a5b      	ldrb	r3, [r3, #9]
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	d105      	bne.n	800d174 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7f5 fe20 	bl	8002db4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2202      	movs	r2, #2
 800d178:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f022 0204 	bic.w	r2, r2, #4
 800d188:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4b3e      	ldr	r3, [pc, #248]	; (800d28c <HAL_RNG_Init+0x140>)
 800d192:	4013      	ands	r3, r2
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	6852      	ldr	r2, [r2, #4]
 800d198:	431a      	orrs	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d1a2:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a39      	ldr	r2, [pc, #228]	; (800d290 <HAL_RNG_Init+0x144>)
 800d1aa:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f247 2274 	movw	r2, #29300	; 0x7274
 800d1b4:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d1c4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d1c6:	f7f6 fcef 	bl	8003ba8 <HAL_GetTick>
 800d1ca:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d1cc:	e016      	b.n	800d1fc <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d1ce:	f7f6 fceb 	bl	8003ba8 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d90f      	bls.n	800d1fc <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ea:	d107      	bne.n	800d1fc <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2202      	movs	r2, #2
 800d1f6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e043      	b.n	800d284 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d20a:	d0e0      	beq.n	800d1ce <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f042 0204 	orr.w	r2, r2, #4
 800d21a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d226:	2b40      	cmp	r3, #64	; 0x40
 800d228:	d104      	bne.n	800d234 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2204      	movs	r2, #4
 800d22e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	e027      	b.n	800d284 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d234:	f7f6 fcb8 	bl	8003ba8 <HAL_GetTick>
 800d238:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d23a:	e015      	b.n	800d268 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d23c:	f7f6 fcb4 	bl	8003ba8 <HAL_GetTick>
 800d240:	4602      	mov	r2, r0
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	2b02      	cmp	r3, #2
 800d248:	d90e      	bls.n	800d268 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	f003 0304 	and.w	r3, r3, #4
 800d254:	2b04      	cmp	r3, #4
 800d256:	d107      	bne.n	800d268 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2204      	movs	r2, #4
 800d25c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2202      	movs	r2, #2
 800d262:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	e00d      	b.n	800d284 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	f003 0304 	and.w	r3, r3, #4
 800d272:	2b04      	cmp	r3, #4
 800d274:	d0e2      	beq.n	800d23c <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2201      	movs	r2, #1
 800d27a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d282:	2300      	movs	r3, #0
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	bfffffdf 	.word	0xbfffffdf
 800d290:	17590abc 	.word	0x17590abc

0800d294 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e075      	b.n	800d392 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d105      	bne.n	800d2be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7f5 fdb5 	bl	8002e28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2204      	movs	r2, #4
 800d2c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f868 	bl	800d39c <HAL_SD_InitCard>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e05d      	b.n	800d392 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d2d6:	f107 0308 	add.w	r3, r7, #8
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fdaf 	bl	800de40 <HAL_SD_GetCardStatus>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e052      	b.n	800d392 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d2ec:	7e3b      	ldrb	r3, [r7, #24]
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d2f2:	7e7b      	ldrb	r3, [r7, #25]
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d10a      	bne.n	800d316 <HAL_SD_Init+0x82>
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	2b00      	cmp	r3, #0
 800d304:	d102      	bne.n	800d30c <HAL_SD_Init+0x78>
 800d306:	6a3b      	ldr	r3, [r7, #32]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d004      	beq.n	800d316 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d312:	659a      	str	r2, [r3, #88]	; 0x58
 800d314:	e00b      	b.n	800d32e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d104      	bne.n	800d328 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d324:	659a      	str	r2, [r3, #88]	; 0x58
 800d326:	e002      	b.n	800d32e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fe6d 	bl	800e014 <HAL_SD_ConfigWideBusOperation>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	e026      	b.n	800d392 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d344:	f7f6 fc30 	bl	8003ba8 <HAL_GetTick>
 800d348:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d34a:	e011      	b.n	800d370 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d34c:	f7f6 fc2c 	bl	8003ba8 <HAL_GetTick>
 800d350:	4602      	mov	r2, r0
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35a:	d109      	bne.n	800d370 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d362:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e010      	b.n	800d392 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 ff61 	bl	800e238 <HAL_SD_GetCardState>
 800d376:	4603      	mov	r3, r0
 800d378:	2b04      	cmp	r3, #4
 800d37a:	d1e7      	bne.n	800d34c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3728      	adds	r7, #40	; 0x28
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d39c:	b590      	push	{r4, r7, lr}
 800d39e:	b08d      	sub	sp, #52	; 0x34
 800d3a0:	af02      	add	r7, sp, #8
 800d3a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d3b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d3b8:	f04f 0100 	mov.w	r1, #0
 800d3bc:	f7fe fc80 	bl	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3c0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d109      	bne.n	800d3dc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d3d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e070      	b.n	800d4be <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	0a1b      	lsrs	r3, r3, #8
 800d3e0:	4a39      	ldr	r2, [pc, #228]	; (800d4c8 <HAL_SD_InitCard+0x12c>)
 800d3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e6:	091b      	lsrs	r3, r3, #4
 800d3e8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681c      	ldr	r4, [r3, #0]
 800d3ee:	466a      	mov	r2, sp
 800d3f0:	f107 0318 	add.w	r3, r7, #24
 800d3f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d3f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800d3fc:	f107 030c 	add.w	r3, r7, #12
 800d400:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d402:	4620      	mov	r0, r4
 800d404:	f004 fec4 	bl	8012190 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f004 ff07 	bl	8012220 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d005      	beq.n	800d424 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	005b      	lsls	r3, r3, #1
 800d41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d422:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d426:	2b00      	cmp	r3, #0
 800d428:	d007      	beq.n	800d43a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d42a:	4a28      	ldr	r2, [pc, #160]	; (800d4cc <HAL_SD_InitCard+0x130>)
 800d42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d432:	3301      	adds	r3, #1
 800d434:	4618      	mov	r0, r3
 800d436:	f7f6 fbc3 	bl	8003bc0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 ffea 	bl	800e414 <SD_PowerON>
 800d440:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00b      	beq.n	800d460 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d454:	6a3b      	ldr	r3, [r7, #32]
 800d456:	431a      	orrs	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	e02e      	b.n	800d4be <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 ff09 	bl	800e278 <SD_InitCard>
 800d466:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d468:	6a3b      	ldr	r3, [r7, #32]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00b      	beq.n	800d486 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d47a:	6a3b      	ldr	r3, [r7, #32]
 800d47c:	431a      	orrs	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	e01b      	b.n	800d4be <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d48e:	4618      	mov	r0, r3
 800d490:	f004 ff5c 	bl	801234c <SDMMC_CmdBlockLength>
 800d494:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d496:	6a3b      	ldr	r3, [r7, #32]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00f      	beq.n	800d4bc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0b      	ldr	r2, [pc, #44]	; (800d4d0 <HAL_SD_InitCard+0x134>)
 800d4a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	431a      	orrs	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e000      	b.n	800d4be <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	372c      	adds	r7, #44	; 0x2c
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd90      	pop	{r4, r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	014f8b59 	.word	0x014f8b59
 800d4cc:	00012110 	.word	0x00012110
 800d4d0:	1fe00fff 	.word	0x1fe00fff

0800d4d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	; 0x30
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d107      	bne.n	800d4fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e08d      	b.n	800d618 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b01      	cmp	r3, #1
 800d506:	f040 8086 	bne.w	800d616 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	441a      	add	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d907      	bls.n	800d52e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d522:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e074      	b.n	800d618 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2203      	movs	r2, #3
 800d532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2200      	movs	r2, #0
 800d53c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	025a      	lsls	r2, r3, #9
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	2b01      	cmp	r3, #1
 800d552:	d002      	beq.n	800d55a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	025b      	lsls	r3, r3, #9
 800d558:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d55a:	f04f 33ff 	mov.w	r3, #4294967295
 800d55e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	025b      	lsls	r3, r3, #9
 800d564:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d566:	2390      	movs	r3, #144	; 0x90
 800d568:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d56a:	2302      	movs	r3, #2
 800d56c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d56e:	2300      	movs	r3, #0
 800d570:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d572:	2300      	movs	r3, #0
 800d574:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f107 0210 	add.w	r2, r7, #16
 800d57e:	4611      	mov	r1, r2
 800d580:	4618      	mov	r0, r3
 800d582:	f004 feb7 	bl	80122f4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68da      	ldr	r2, [r3, #12]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d594:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d90a      	bls.n	800d5c2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2282      	movs	r2, #130	; 0x82
 800d5b0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f004 ff0d 	bl	80123d8 <SDMMC_CmdReadMultiBlock>
 800d5be:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d5c0:	e009      	b.n	800d5d6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2281      	movs	r2, #129	; 0x81
 800d5c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f004 fedf 	bl	8012392 <SDMMC_CmdReadSingleBlock>
 800d5d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d012      	beq.n	800d602 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a0f      	ldr	r2, [pc, #60]	; (800d620 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e00a      	b.n	800d618 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d610:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	e000      	b.n	800d618 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d616:	2302      	movs	r3, #2
  }
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3730      	adds	r7, #48	; 0x30
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	1fe00fff 	.word	0x1fe00fff

0800d624 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08c      	sub	sp, #48	; 0x30
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
 800d630:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d107      	bne.n	800d64c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d640:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d648:	2301      	movs	r3, #1
 800d64a:	e08d      	b.n	800d768 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d652:	b2db      	uxtb	r3, r3
 800d654:	2b01      	cmp	r3, #1
 800d656:	f040 8086 	bne.w	800d766 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	441a      	add	r2, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d907      	bls.n	800d67e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d672:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e074      	b.n	800d768 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2203      	movs	r2, #3
 800d682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2200      	movs	r2, #0
 800d68c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	025a      	lsls	r2, r3, #9
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d002      	beq.n	800d6aa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	025b      	lsls	r3, r3, #9
 800d6a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	025b      	lsls	r3, r3, #9
 800d6b4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d6b6:	2390      	movs	r3, #144	; 0x90
 800d6b8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f107 0210 	add.w	r2, r7, #16
 800d6ce:	4611      	mov	r1, r2
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f004 fe0f 	bl	80122f4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68da      	ldr	r2, [r3, #12]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6e4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d90a      	bls.n	800d712 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	22a0      	movs	r2, #160	; 0xa0
 800d700:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d708:	4618      	mov	r0, r3
 800d70a:	f004 feab 	bl	8012464 <SDMMC_CmdWriteMultiBlock>
 800d70e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d710:	e009      	b.n	800d726 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2290      	movs	r2, #144	; 0x90
 800d716:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d71e:	4618      	mov	r0, r3
 800d720:	f004 fe7d 	bl	801241e <SDMMC_CmdWriteSingleBlock>
 800d724:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d012      	beq.n	800d752 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a0f      	ldr	r2, [pc, #60]	; (800d770 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d732:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	431a      	orrs	r2, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e00a      	b.n	800d768 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d760:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d762:	2300      	movs	r3, #0
 800d764:	e000      	b.n	800d768 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d766:	2302      	movs	r3, #2
  }
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3730      	adds	r7, #48	; 0x30
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	1fe00fff 	.word	0x1fe00fff

0800d774 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d780:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d008      	beq.n	800d7a2 <HAL_SD_IRQHandler+0x2e>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f003 0308 	and.w	r3, r3, #8
 800d796:	2b00      	cmp	r3, #0
 800d798:	d003      	beq.n	800d7a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f001 f926 	bl	800e9ec <SD_Read_IT>
 800d7a0:	e19a      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f000 80ac 	beq.w	800d90a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	4b59      	ldr	r3, [pc, #356]	; (800d92c <HAL_SD_IRQHandler+0x1b8>)
 800d7c8:	400b      	ands	r3, r1
 800d7ca:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7da:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68da      	ldr	r2, [r3, #12]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7ea:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f003 0308 	and.w	r3, r3, #8
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d038      	beq.n	800d868 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f003 0302 	and.w	r3, r3, #2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d104      	bne.n	800d80a <HAL_SD_IRQHandler+0x96>
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f003 0320 	and.w	r3, r3, #32
 800d806:	2b00      	cmp	r3, #0
 800d808:	d011      	beq.n	800d82e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4618      	mov	r0, r3
 800d810:	f004 fe4c 	bl	80124ac <SDMMC_CmdStopTransfer>
 800d814:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d008      	beq.n	800d82e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	431a      	orrs	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f95b 	bl	800dae4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a3f      	ldr	r2, [pc, #252]	; (800d930 <HAL_SD_IRQHandler+0x1bc>)
 800d834:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d104      	bne.n	800d858 <HAL_SD_IRQHandler+0xe4>
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f003 0302 	and.w	r3, r3, #2
 800d854:	2b00      	cmp	r3, #0
 800d856:	d003      	beq.n	800d860 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f006 fe4d 	bl	80144f8 <HAL_SD_RxCpltCallback>
 800d85e:	e13b      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f006 fe3f 	bl	80144e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d866:	e137      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 8132 	beq.w	800dad8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2200      	movs	r2, #0
 800d87a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2200      	movs	r2, #0
 800d882:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2200      	movs	r2, #0
 800d88a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f003 0302 	and.w	r3, r3, #2
 800d892:	2b00      	cmp	r3, #0
 800d894:	d104      	bne.n	800d8a0 <HAL_SD_IRQHandler+0x12c>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f003 0320 	and.w	r3, r3, #32
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d011      	beq.n	800d8c4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f004 fe01 	bl	80124ac <SDMMC_CmdStopTransfer>
 800d8aa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d008      	beq.n	800d8c4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 f910 	bl	800dae4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f003 0310 	and.w	r3, r3, #16
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <HAL_SD_IRQHandler+0x172>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f003 0320 	and.w	r3, r3, #32
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f006 fdfc 	bl	80144e4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d105      	bne.n	800d902 <HAL_SD_IRQHandler+0x18e>
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f003 0302 	and.w	r3, r3, #2
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 80eb 	beq.w	800dad8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f006 fdf8 	bl	80144f8 <HAL_SD_RxCpltCallback>
}
 800d908:	e0e6      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00d      	beq.n	800d934 <HAL_SD_IRQHandler+0x1c0>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f003 0308 	and.w	r3, r3, #8
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d008      	beq.n	800d934 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f001 f8a8 	bl	800ea78 <SD_Write_IT>
 800d928:	e0d6      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
 800d92a:	bf00      	nop
 800d92c:	ffff3ec5 	.word	0xffff3ec5
 800d930:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 809d 	beq.w	800da7e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d94a:	f003 0302 	and.w	r3, r3, #2
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d005      	beq.n	800d95e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d956:	f043 0202 	orr.w	r2, r3, #2
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d964:	f003 0308 	and.w	r3, r3, #8
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d005      	beq.n	800d978 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d970:	f043 0208 	orr.w	r2, r3, #8
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d97e:	f003 0320 	and.w	r3, r3, #32
 800d982:	2b00      	cmp	r3, #0
 800d984:	d005      	beq.n	800d992 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98a:	f043 0220 	orr.w	r2, r3, #32
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d998:	f003 0310 	and.w	r3, r3, #16
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a4:	f043 0210 	orr.w	r2, r3, #16
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a4b      	ldr	r2, [pc, #300]	; (800dae0 <HAL_SD_IRQHandler+0x36c>)
 800d9b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d9c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68da      	ldr	r2, [r3, #12]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9d2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d9e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68da      	ldr	r2, [r3, #12]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d9f2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f004 fd57 	bl	80124ac <SDMMC_CmdStopTransfer>
 800d9fe:	4602      	mov	r2, r0
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da04:	431a      	orrs	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68da      	ldr	r2, [r3, #12]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da18:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da22:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f003 0308 	and.w	r3, r3, #8
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f851 	bl	800dae4 <HAL_SD_ErrorCallback>
}
 800da42:	e049      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d044      	beq.n	800dad8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da52:	2b00      	cmp	r3, #0
 800da54:	d040      	beq.n	800dad8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800da64:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2200      	movs	r2, #0
 800da6c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f834 	bl	800dae4 <HAL_SD_ErrorCallback>
}
 800da7c:	e02c      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d025      	beq.n	800dad8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da94:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10c      	bne.n	800dabe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f003 0320 	and.w	r3, r3, #32
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d003      	beq.n	800dab6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f001 f84a 	bl	800eb48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dab4:	e010      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f001 f832 	bl	800eb20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dabc:	e00c      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f003 0320 	and.w	r3, r3, #32
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d003      	beq.n	800dad0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f001 f833 	bl	800eb34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dace:	e003      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f001 f81b 	bl	800eb0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dad6:	e7ff      	b.n	800dad8 <HAL_SD_IRQHandler+0x364>
 800dad8:	bf00      	nop
 800dada:	3710      	adds	r7, #16
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	18000f3a 	.word	0x18000f3a

0800dae4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800daec:	bf00      	nop
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db06:	0f9b      	lsrs	r3, r3, #30
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db12:	0e9b      	lsrs	r3, r3, #26
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 030f 	and.w	r3, r3, #15
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db24:	0e1b      	lsrs	r3, r3, #24
 800db26:	b2db      	uxtb	r3, r3
 800db28:	f003 0303 	and.w	r3, r3, #3
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db36:	0c1b      	lsrs	r3, r3, #16
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db42:	0a1b      	lsrs	r3, r3, #8
 800db44:	b2da      	uxtb	r2, r3
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db58:	0d1b      	lsrs	r3, r3, #20
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db64:	0c1b      	lsrs	r3, r3, #16
 800db66:	b2db      	uxtb	r3, r3
 800db68:	f003 030f 	and.w	r3, r3, #15
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db76:	0bdb      	lsrs	r3, r3, #15
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db88:	0b9b      	lsrs	r3, r3, #14
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	f003 0301 	and.w	r3, r3, #1
 800db90:	b2da      	uxtb	r2, r3
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db9a:	0b5b      	lsrs	r3, r3, #13
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbac:	0b1b      	lsrs	r3, r3, #12
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	f003 0301 	and.w	r3, r3, #1
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d163      	bne.n	800dc90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbcc:	009a      	lsls	r2, r3, #2
 800dbce:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dbd2:	4013      	ands	r3, r2
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800dbd8:	0f92      	lsrs	r2, r2, #30
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbe4:	0edb      	lsrs	r3, r3, #27
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	f003 0307 	and.w	r3, r3, #7
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbf6:	0e1b      	lsrs	r3, r3, #24
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 0307 	and.w	r3, r3, #7
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc08:	0d5b      	lsrs	r3, r3, #21
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	f003 0307 	and.w	r3, r3, #7
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc1a:	0c9b      	lsrs	r3, r3, #18
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 0307 	and.w	r3, r3, #7
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc2c:	0bdb      	lsrs	r3, r3, #15
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	f003 0307 	and.w	r3, r3, #7
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	691b      	ldr	r3, [r3, #16]
 800dc3e:	1c5a      	adds	r2, r3, #1
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	7e1b      	ldrb	r3, [r3, #24]
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 0307 	and.w	r3, r3, #7
 800dc4e:	3302      	adds	r3, #2
 800dc50:	2201      	movs	r2, #1
 800dc52:	fa02 f303 	lsl.w	r3, r2, r3
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dc5a:	fb03 f202 	mul.w	r2, r3, r2
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	7a1b      	ldrb	r3, [r3, #8]
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	f003 030f 	and.w	r3, r3, #15
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	409a      	lsls	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800dc7c:	0a52      	lsrs	r2, r2, #9
 800dc7e:	fb03 f202 	mul.w	r2, r3, r2
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc8c:	655a      	str	r2, [r3, #84]	; 0x54
 800dc8e:	e031      	b.n	800dcf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d11d      	bne.n	800dcd4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dca6:	0c1b      	lsrs	r3, r3, #16
 800dca8:	431a      	orrs	r2, r3
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	029a      	lsls	r2, r3, #10
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcc8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	655a      	str	r2, [r3, #84]	; 0x54
 800dcd2:	e00f      	b.n	800dcf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a58      	ldr	r2, [pc, #352]	; (800de3c <HAL_SD_GetCardCSD+0x344>)
 800dcda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e09d      	b.n	800de30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcf8:	0b9b      	lsrs	r3, r3, #14
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd0a:	09db      	lsrs	r3, r3, #7
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd2c:	0fdb      	lsrs	r3, r3, #31
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd38:	0f5b      	lsrs	r3, r3, #29
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	f003 0303 	and.w	r3, r3, #3
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd4a:	0e9b      	lsrs	r3, r3, #26
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	f003 0307 	and.w	r3, r3, #7
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd5c:	0d9b      	lsrs	r3, r3, #22
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	f003 030f 	and.w	r3, r3, #15
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd6e:	0d5b      	lsrs	r3, r3, #21
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	f003 0301 	and.w	r3, r3, #1
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd8a:	0c1b      	lsrs	r3, r3, #16
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	f003 0301 	and.w	r3, r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd9e:	0bdb      	lsrs	r3, r3, #15
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	f003 0301 	and.w	r3, r3, #1
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddb2:	0b9b      	lsrs	r3, r3, #14
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	f003 0301 	and.w	r3, r3, #1
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddc6:	0b5b      	lsrs	r3, r3, #13
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddda:	0b1b      	lsrs	r3, r3, #12
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	f003 0301 	and.w	r3, r3, #1
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddee:	0a9b      	lsrs	r3, r3, #10
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	f003 0303 	and.w	r3, r3, #3
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de02:	0a1b      	lsrs	r3, r3, #8
 800de04:	b2db      	uxtb	r3, r3
 800de06:	f003 0303 	and.w	r3, r3, #3
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de16:	085b      	lsrs	r3, r3, #1
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	2201      	movs	r2, #1
 800de2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	1fe00fff 	.word	0x1fe00fff

0800de40 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b094      	sub	sp, #80	; 0x50
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b03      	cmp	r3, #3
 800de5a:	d101      	bne.n	800de60 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800de5c:	2301      	movs	r3, #1
 800de5e:	e0a7      	b.n	800dfb0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800de60:	f107 0308 	add.w	r3, r7, #8
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fb62 	bl	800e530 <SD_SendSDStatus>
 800de6c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800de6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de70:	2b00      	cmp	r3, #0
 800de72:	d011      	beq.n	800de98 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a4f      	ldr	r2, [pc, #316]	; (800dfb8 <HAL_SD_GetCardStatus+0x178>)
 800de7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de82:	431a      	orrs	r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800de90:	2301      	movs	r3, #1
 800de92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800de96:	e070      	b.n	800df7a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	099b      	lsrs	r3, r3, #6
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	f003 0303 	and.w	r3, r3, #3
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	095b      	lsrs	r3, r3, #5
 800deac:	b2db      	uxtb	r3, r3
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	0a1b      	lsrs	r3, r3, #8
 800debc:	b29b      	uxth	r3, r3
 800debe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	0e1b      	lsrs	r3, r3, #24
 800dec8:	b29b      	uxth	r3, r3
 800deca:	4313      	orrs	r3, r2
 800decc:	b29a      	uxth	r2, r3
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	061a      	lsls	r2, r3, #24
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	021b      	lsls	r3, r3, #8
 800deda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dede:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	0a1b      	lsrs	r3, r3, #8
 800dee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dee8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	0e1b      	lsrs	r3, r3, #24
 800deee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	b2da      	uxtb	r2, r3
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	0a1b      	lsrs	r3, r3, #8
 800df00:	b2da      	uxtb	r2, r3
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	0d1b      	lsrs	r3, r3, #20
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	f003 030f 	and.w	r3, r3, #15
 800df10:	b2da      	uxtb	r2, r3
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	0c1b      	lsrs	r3, r3, #16
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800df20:	b29a      	uxth	r2, r3
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	b29b      	uxth	r3, r3
 800df26:	b2db      	uxtb	r3, r3
 800df28:	b29b      	uxth	r3, r3
 800df2a:	4313      	orrs	r3, r2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	0a9b      	lsrs	r3, r3, #10
 800df36:	b2db      	uxtb	r3, r3
 800df38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	0a1b      	lsrs	r3, r3, #8
 800df46:	b2db      	uxtb	r3, r3
 800df48:	f003 0303 	and.w	r3, r3, #3
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	091b      	lsrs	r3, r3, #4
 800df56:	b2db      	uxtb	r3, r3
 800df58:	f003 030f 	and.w	r3, r3, #15
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	f003 030f 	and.w	r3, r3, #15
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	0e1b      	lsrs	r3, r3, #24
 800df74:	b2da      	uxtb	r2, r3
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df82:	4618      	mov	r0, r3
 800df84:	f004 f9e2 	bl	801234c <SDMMC_CmdBlockLength>
 800df88:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800df8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00d      	beq.n	800dfac <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a08      	ldr	r2, [pc, #32]	; (800dfb8 <HAL_SD_GetCardStatus+0x178>)
 800df96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df9c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dfac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3750      	adds	r7, #80	; 0x50
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	1fe00fff 	.word	0x1fe00fff

0800dfbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e014:	b590      	push	{r4, r7, lr}
 800e016:	b08d      	sub	sp, #52	; 0x34
 800e018:	af02      	add	r7, sp, #8
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2203      	movs	r2, #3
 800e028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e030:	2b03      	cmp	r3, #3
 800e032:	d02e      	beq.n	800e092 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e03a:	d106      	bne.n	800e04a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	635a      	str	r2, [r3, #52]	; 0x34
 800e048:	e029      	b.n	800e09e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e050:	d10a      	bne.n	800e068 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fb64 	bl	800e720 <SD_WideBus_Enable>
 800e058:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	431a      	orrs	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	635a      	str	r2, [r3, #52]	; 0x34
 800e066:	e01a      	b.n	800e09e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10a      	bne.n	800e084 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fba1 	bl	800e7b6 <SD_WideBus_Disable>
 800e074:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	431a      	orrs	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	635a      	str	r2, [r3, #52]	; 0x34
 800e082:	e00c      	b.n	800e09e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e088:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	635a      	str	r2, [r3, #52]	; 0x34
 800e090:	e005      	b.n	800e09e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d007      	beq.n	800e0b6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a5f      	ldr	r2, [pc, #380]	; (800e228 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e0ac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0b4:	e096      	b.n	800e1e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e0b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e0ba:	f04f 0100 	mov.w	r1, #0
 800e0be:	f7fd fdff 	bl	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e0c2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f000 8083 	beq.w	800e1d2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	695a      	ldr	r2, [r3, #20]
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	4950      	ldr	r1, [pc, #320]	; (800e22c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e0ea:	fba1 1303 	umull	r1, r3, r1, r3
 800e0ee:	0e1b      	lsrs	r3, r3, #24
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d303      	bcc.n	800e0fc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	695b      	ldr	r3, [r3, #20]
 800e0f8:	61bb      	str	r3, [r7, #24]
 800e0fa:	e05a      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e104:	d103      	bne.n	800e10e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	695b      	ldr	r3, [r3, #20]
 800e10a:	61bb      	str	r3, [r7, #24]
 800e10c:	e051      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e116:	d126      	bne.n	800e166 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10e      	bne.n	800e13e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	4a43      	ldr	r2, [pc, #268]	; (800e230 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d906      	bls.n	800e136 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	4a40      	ldr	r2, [pc, #256]	; (800e22c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e12c:	fba2 2303 	umull	r2, r3, r2, r3
 800e130:	0e5b      	lsrs	r3, r3, #25
 800e132:	61bb      	str	r3, [r7, #24]
 800e134:	e03d      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695b      	ldr	r3, [r3, #20]
 800e13a:	61bb      	str	r3, [r7, #24]
 800e13c:	e039      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	69fa      	ldr	r2, [r7, #28]
 800e146:	fbb2 f3f3 	udiv	r3, r2, r3
 800e14a:	4a39      	ldr	r2, [pc, #228]	; (800e230 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d906      	bls.n	800e15e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	4a36      	ldr	r2, [pc, #216]	; (800e22c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e154:	fba2 2303 	umull	r2, r3, r2, r3
 800e158:	0e5b      	lsrs	r3, r3, #25
 800e15a:	61bb      	str	r3, [r7, #24]
 800e15c:	e029      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	695b      	ldr	r3, [r3, #20]
 800e162:	61bb      	str	r3, [r7, #24]
 800e164:	e025      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	695b      	ldr	r3, [r3, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10e      	bne.n	800e18c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	4a30      	ldr	r2, [pc, #192]	; (800e234 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d906      	bls.n	800e184 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	4a2c      	ldr	r2, [pc, #176]	; (800e22c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e17a:	fba2 2303 	umull	r2, r3, r2, r3
 800e17e:	0e1b      	lsrs	r3, r3, #24
 800e180:	61bb      	str	r3, [r7, #24]
 800e182:	e016      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	61bb      	str	r3, [r7, #24]
 800e18a:	e012      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	695b      	ldr	r3, [r3, #20]
 800e190:	005b      	lsls	r3, r3, #1
 800e192:	69fa      	ldr	r2, [r7, #28]
 800e194:	fbb2 f3f3 	udiv	r3, r2, r3
 800e198:	4a26      	ldr	r2, [pc, #152]	; (800e234 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d906      	bls.n	800e1ac <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	4a22      	ldr	r2, [pc, #136]	; (800e22c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a6:	0e1b      	lsrs	r3, r3, #24
 800e1a8:	61bb      	str	r3, [r7, #24]
 800e1aa:	e002      	b.n	800e1b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	695b      	ldr	r3, [r3, #20]
 800e1b0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681c      	ldr	r4, [r3, #0]
 800e1b6:	466a      	mov	r2, sp
 800e1b8:	f107 0314 	add.w	r3, r7, #20
 800e1bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1c0:	e882 0003 	stmia.w	r2, {r0, r1}
 800e1c4:	f107 0308 	add.w	r3, r7, #8
 800e1c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f003 ffe0 	bl	8012190 <SDMMC_Init>
 800e1d0:	e008      	b.n	800e1e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f004 f8ad 	bl	801234c <SDMMC_CmdBlockLength>
 800e1f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00c      	beq.n	800e214 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a0a      	ldr	r2, [pc, #40]	; (800e228 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e200:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	431a      	orrs	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2201      	movs	r2, #1
 800e218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e220:	4618      	mov	r0, r3
 800e222:	372c      	adds	r7, #44	; 0x2c
 800e224:	46bd      	mov	sp, r7
 800e226:	bd90      	pop	{r4, r7, pc}
 800e228:	1fe00fff 	.word	0x1fe00fff
 800e22c:	55e63b89 	.word	0x55e63b89
 800e230:	02faf080 	.word	0x02faf080
 800e234:	017d7840 	.word	0x017d7840

0800e238 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b086      	sub	sp, #24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e244:	f107 030c 	add.w	r3, r7, #12
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fa40 	bl	800e6d0 <SD_SendStatus>
 800e250:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d005      	beq.n	800e264 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	431a      	orrs	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	0a5b      	lsrs	r3, r3, #9
 800e268:	f003 030f 	and.w	r3, r3, #15
 800e26c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e26e:	693b      	ldr	r3, [r7, #16]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b090      	sub	sp, #64	; 0x40
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e280:	2300      	movs	r3, #0
 800e282:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e284:	f7f5 fc90 	bl	8003ba8 <HAL_GetTick>
 800e288:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4618      	mov	r0, r3
 800e290:	f003 ffd7 	bl	8012242 <SDMMC_GetPowerState>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d102      	bne.n	800e2a0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e29a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e29e:	e0b5      	b.n	800e40c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a4:	2b03      	cmp	r3, #3
 800e2a6:	d02e      	beq.n	800e306 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f004 fa22 	bl	80126f6 <SDMMC_CmdSendCID>
 800e2b2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <SD_InitCard+0x46>
    {
      return errorstate;
 800e2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2bc:	e0a6      	b.n	800e40c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f004 f802 	bl	80122ce <SDMMC_GetResponse>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2104      	movs	r1, #4
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f003 fff9 	bl	80122ce <SDMMC_GetResponse>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2108      	movs	r1, #8
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f003 fff0 	bl	80122ce <SDMMC_GetResponse>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	210c      	movs	r1, #12
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f003 ffe7 	bl	80122ce <SDMMC_GetResponse>
 800e300:	4602      	mov	r2, r0
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d01d      	beq.n	800e34a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e30e:	e019      	b.n	800e344 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f107 020a 	add.w	r2, r7, #10
 800e318:	4611      	mov	r1, r2
 800e31a:	4618      	mov	r0, r3
 800e31c:	f004 fa2a 	bl	8012774 <SDMMC_CmdSetRelAdd>
 800e320:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	2b00      	cmp	r3, #0
 800e326:	d001      	beq.n	800e32c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32a:	e06f      	b.n	800e40c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e32c:	f7f5 fc3c 	bl	8003ba8 <HAL_GetTick>
 800e330:	4602      	mov	r2, r0
 800e332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	f241 3287 	movw	r2, #4999	; 0x1387
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d902      	bls.n	800e344 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e33e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e342:	e063      	b.n	800e40c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e344:	897b      	ldrh	r3, [r7, #10]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d0e2      	beq.n	800e310 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d036      	beq.n	800e3c0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e352:	897b      	ldrh	r3, [r7, #10]
 800e354:	461a      	mov	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e362:	041b      	lsls	r3, r3, #16
 800e364:	4619      	mov	r1, r3
 800e366:	4610      	mov	r0, r2
 800e368:	f004 f9e4 	bl	8012734 <SDMMC_CmdSendCSD>
 800e36c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e370:	2b00      	cmp	r3, #0
 800e372:	d001      	beq.n	800e378 <SD_InitCard+0x100>
    {
      return errorstate;
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	e049      	b.n	800e40c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2100      	movs	r1, #0
 800e37e:	4618      	mov	r0, r3
 800e380:	f003 ffa5 	bl	80122ce <SDMMC_GetResponse>
 800e384:	4602      	mov	r2, r0
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2104      	movs	r1, #4
 800e390:	4618      	mov	r0, r3
 800e392:	f003 ff9c 	bl	80122ce <SDMMC_GetResponse>
 800e396:	4602      	mov	r2, r0
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2108      	movs	r1, #8
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f003 ff93 	bl	80122ce <SDMMC_GetResponse>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	210c      	movs	r1, #12
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f003 ff8a 	bl	80122ce <SDMMC_GetResponse>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2104      	movs	r1, #4
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f003 ff81 	bl	80122ce <SDMMC_GetResponse>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	0d1a      	lsrs	r2, r3, #20
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e3d4:	f107 030c 	add.w	r3, r7, #12
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff fb8c 	bl	800daf8 <HAL_SD_GetCardCSD>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d002      	beq.n	800e3ec <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e3ea:	e00f      	b.n	800e40c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3f4:	041b      	lsls	r3, r3, #16
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	f004 f893 	bl	8012524 <SDMMC_CmdSelDesel>
 800e3fe:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <SD_InitCard+0x192>
  {
    return errorstate;
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	e000      	b.n	800e40c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3740      	adds	r7, #64	; 0x40
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e41c:	2300      	movs	r3, #0
 800e41e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e420:	2300      	movs	r3, #0
 800e422:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e424:	2300      	movs	r3, #0
 800e426:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f004 f89c 	bl	801256a <SDMMC_CmdGoIdleState>
 800e432:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d001      	beq.n	800e43e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	e072      	b.n	800e524 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4618      	mov	r0, r3
 800e444:	f004 f8af 	bl	80125a6 <SDMMC_CmdOperCond>
 800e448:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e450:	d10d      	bne.n	800e46e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f004 f884 	bl	801256a <SDMMC_CmdGoIdleState>
 800e462:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d004      	beq.n	800e474 <SD_PowerON+0x60>
    {
      return errorstate;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	e05a      	b.n	800e524 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2201      	movs	r2, #1
 800e472:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d137      	bne.n	800e4ec <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2100      	movs	r1, #0
 800e482:	4618      	mov	r0, r3
 800e484:	f004 f8af 	bl	80125e6 <SDMMC_CmdAppCommand>
 800e488:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d02d      	beq.n	800e4ec <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e490:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e494:	e046      	b.n	800e524 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2100      	movs	r1, #0
 800e49c:	4618      	mov	r0, r3
 800e49e:	f004 f8a2 	bl	80125e6 <SDMMC_CmdAppCommand>
 800e4a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <SD_PowerON+0x9a>
    {
      return errorstate;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	e03a      	b.n	800e524 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	491e      	ldr	r1, [pc, #120]	; (800e52c <SD_PowerON+0x118>)
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f004 f8b9 	bl	801262c <SDMMC_CmdAppOperCommand>
 800e4ba:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e4c6:	e02d      	b.n	800e524 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f003 fefd 	bl	80122ce <SDMMC_GetResponse>
 800e4d4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	0fdb      	lsrs	r3, r3, #31
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d101      	bne.n	800e4e2 <SD_PowerON+0xce>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e000      	b.n	800e4e4 <SD_PowerON+0xd0>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	613b      	str	r3, [r7, #16]

    count++;
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d802      	bhi.n	800e4fc <SD_PowerON+0xe8>
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d0cc      	beq.n	800e496 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e502:	4293      	cmp	r3, r2
 800e504:	d902      	bls.n	800e50c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e50a:	e00b      	b.n	800e524 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2201      	movs	r2, #1
 800e520:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3718      	adds	r7, #24
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	c1100000 	.word	0xc1100000

0800e530 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08c      	sub	sp, #48	; 0x30
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e53a:	f7f5 fb35 	bl	8003ba8 <HAL_GetTick>
 800e53e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2100      	movs	r1, #0
 800e54a:	4618      	mov	r0, r3
 800e54c:	f003 febf 	bl	80122ce <SDMMC_GetResponse>
 800e550:	4603      	mov	r3, r0
 800e552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e55a:	d102      	bne.n	800e562 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e55c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e560:	e0b0      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2140      	movs	r1, #64	; 0x40
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 feef 	bl	801234c <SDMMC_CmdBlockLength>
 800e56e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e570:	6a3b      	ldr	r3, [r7, #32]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d005      	beq.n	800e582 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e57e:	6a3b      	ldr	r3, [r7, #32]
 800e580:	e0a0      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58a:	041b      	lsls	r3, r3, #16
 800e58c:	4619      	mov	r1, r3
 800e58e:	4610      	mov	r0, r2
 800e590:	f004 f829 	bl	80125e6 <SDMMC_CmdAppCommand>
 800e594:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d005      	beq.n	800e5a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e5a4:	6a3b      	ldr	r3, [r7, #32]
 800e5a6:	e08d      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e5ae:	2340      	movs	r3, #64	; 0x40
 800e5b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e5b2:	2360      	movs	r3, #96	; 0x60
 800e5b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f107 0208 	add.w	r2, r7, #8
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f003 fe91 	bl	80122f4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f004 f911 	bl	80127fe <SDMMC_CmdStatusRegister>
 800e5dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5de:	6a3b      	ldr	r3, [r7, #32]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d02b      	beq.n	800e63c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e5ec:	6a3b      	ldr	r3, [r7, #32]
 800e5ee:	e069      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d013      	beq.n	800e626 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e5fe:	2300      	movs	r3, #0
 800e600:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e602:	e00d      	b.n	800e620 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4618      	mov	r0, r3
 800e60a:	f003 fdeb 	bl	80121e4 <SDMMC_ReadFIFO>
 800e60e:	4602      	mov	r2, r0
 800e610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e612:	601a      	str	r2, [r3, #0]
        pData++;
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	3304      	adds	r3, #4
 800e618:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61c:	3301      	adds	r3, #1
 800e61e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	2b07      	cmp	r3, #7
 800e624:	d9ee      	bls.n	800e604 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e626:	f7f5 fabf 	bl	8003ba8 <HAL_GetTick>
 800e62a:	4602      	mov	r2, r0
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e634:	d102      	bne.n	800e63c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e636:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e63a:	e043      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e642:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e646:	2b00      	cmp	r3, #0
 800e648:	d0d2      	beq.n	800e5f0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e650:	f003 0308 	and.w	r3, r3, #8
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e658:	2308      	movs	r3, #8
 800e65a:	e033      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e662:	f003 0302 	and.w	r3, r3, #2
 800e666:	2b00      	cmp	r3, #0
 800e668:	d001      	beq.n	800e66e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e66a:	2302      	movs	r3, #2
 800e66c:	e02a      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e674:	f003 0320 	and.w	r3, r3, #32
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d017      	beq.n	800e6ac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e67c:	2320      	movs	r3, #32
 800e67e:	e021      	b.n	800e6c4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4618      	mov	r0, r3
 800e686:	f003 fdad 	bl	80121e4 <SDMMC_ReadFIFO>
 800e68a:	4602      	mov	r2, r0
 800e68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68e:	601a      	str	r2, [r3, #0]
    pData++;
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	3304      	adds	r3, #4
 800e694:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e696:	f7f5 fa87 	bl	8003ba8 <HAL_GetTick>
 800e69a:	4602      	mov	r2, r0
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a4:	d102      	bne.n	800e6ac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e6a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6aa:	e00b      	b.n	800e6c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1e2      	bne.n	800e680 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4a03      	ldr	r2, [pc, #12]	; (800e6cc <SD_SendSDStatus+0x19c>)
 800e6c0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3730      	adds	r7, #48	; 0x30
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	18000f3a 	.word	0x18000f3a

0800e6d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d102      	bne.n	800e6e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e6e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e6e4:	e018      	b.n	800e718 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ee:	041b      	lsls	r3, r3, #16
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	f004 f860 	bl	80127b8 <SDMMC_CmdSendStatus>
 800e6f8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	e009      	b.n	800e718 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2100      	movs	r1, #0
 800e70a:	4618      	mov	r0, r3
 800e70c:	f003 fddf 	bl	80122ce <SDMMC_GetResponse>
 800e710:	4602      	mov	r2, r0
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e728:	2300      	movs	r3, #0
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	2300      	movs	r3, #0
 800e72e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2100      	movs	r1, #0
 800e736:	4618      	mov	r0, r3
 800e738:	f003 fdc9 	bl	80122ce <SDMMC_GetResponse>
 800e73c:	4603      	mov	r3, r0
 800e73e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e746:	d102      	bne.n	800e74e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e74c:	e02f      	b.n	800e7ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e74e:	f107 030c 	add.w	r3, r7, #12
 800e752:	4619      	mov	r1, r3
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f879 	bl	800e84c <SD_FindSCR>
 800e75a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	e023      	b.n	800e7ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01c      	beq.n	800e7aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e778:	041b      	lsls	r3, r3, #16
 800e77a:	4619      	mov	r1, r3
 800e77c:	4610      	mov	r0, r2
 800e77e:	f003 ff32 	bl	80125e6 <SDMMC_CmdAppCommand>
 800e782:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	e00f      	b.n	800e7ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2102      	movs	r1, #2
 800e794:	4618      	mov	r0, r3
 800e796:	f003 ff69 	bl	801266c <SDMMC_CmdBusWidth>
 800e79a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	e003      	b.n	800e7ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e001      	b.n	800e7ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e7aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3718      	adds	r7, #24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b086      	sub	sp, #24
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60fb      	str	r3, [r7, #12]
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f003 fd7e 	bl	80122ce <SDMMC_GetResponse>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e7dc:	d102      	bne.n	800e7e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e7de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7e2:	e02f      	b.n	800e844 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e7e4:	f107 030c 	add.w	r3, r7, #12
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f82e 	bl	800e84c <SD_FindSCR>
 800e7f0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	e023      	b.n	800e844 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e802:	2b00      	cmp	r3, #0
 800e804:	d01c      	beq.n	800e840 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e80e:	041b      	lsls	r3, r3, #16
 800e810:	4619      	mov	r1, r3
 800e812:	4610      	mov	r0, r2
 800e814:	f003 fee7 	bl	80125e6 <SDMMC_CmdAppCommand>
 800e818:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d001      	beq.n	800e824 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	e00f      	b.n	800e844 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2100      	movs	r1, #0
 800e82a:	4618      	mov	r0, r3
 800e82c:	f003 ff1e 	bl	801266c <SDMMC_CmdBusWidth>
 800e830:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	e003      	b.n	800e844 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e83c:	2300      	movs	r3, #0
 800e83e:	e001      	b.n	800e844 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e840:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08e      	sub	sp, #56	; 0x38
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e856:	f7f5 f9a7 	bl	8003ba8 <HAL_GetTick>
 800e85a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e85c:	2300      	movs	r3, #0
 800e85e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e860:	2300      	movs	r3, #0
 800e862:	60bb      	str	r3, [r7, #8]
 800e864:	2300      	movs	r3, #0
 800e866:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2108      	movs	r1, #8
 800e872:	4618      	mov	r0, r3
 800e874:	f003 fd6a 	bl	801234c <SDMMC_CmdBlockLength>
 800e878:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	e0ad      	b.n	800e9e0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e88c:	041b      	lsls	r3, r3, #16
 800e88e:	4619      	mov	r1, r3
 800e890:	4610      	mov	r0, r2
 800e892:	f003 fea8 	bl	80125e6 <SDMMC_CmdAppCommand>
 800e896:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	e09e      	b.n	800e9e0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e8a8:	2308      	movs	r3, #8
 800e8aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e8ac:	2330      	movs	r3, #48	; 0x30
 800e8ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f107 0210 	add.w	r2, r7, #16
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f003 fd14 	bl	80122f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f003 feee 	bl	80126b2 <SDMMC_CmdSendSCR>
 800e8d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d027      	beq.n	800e92e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	e07e      	b.n	800e9e0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d113      	bne.n	800e918 <SD_FindSCR+0xcc>
 800e8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d110      	bne.n	800e918 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f003 fc72 	bl	80121e4 <SDMMC_ReadFIFO>
 800e900:	4603      	mov	r3, r0
 800e902:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4618      	mov	r0, r3
 800e90a:	f003 fc6b 	bl	80121e4 <SDMMC_ReadFIFO>
 800e90e:	4603      	mov	r3, r0
 800e910:	60fb      	str	r3, [r7, #12]
      index++;
 800e912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e914:	3301      	adds	r3, #1
 800e916:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e918:	f7f5 f946 	bl	8003ba8 <HAL_GetTick>
 800e91c:	4602      	mov	r2, r0
 800e91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e926:	d102      	bne.n	800e92e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e928:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e92c:	e058      	b.n	800e9e0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e934:	f240 532a 	movw	r3, #1322	; 0x52a
 800e938:	4013      	ands	r3, r2
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d0d1      	beq.n	800e8e2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e944:	f003 0308 	and.w	r3, r3, #8
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d005      	beq.n	800e958 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2208      	movs	r2, #8
 800e952:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e954:	2308      	movs	r3, #8
 800e956:	e043      	b.n	800e9e0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e95e:	f003 0302 	and.w	r3, r3, #2
 800e962:	2b00      	cmp	r3, #0
 800e964:	d005      	beq.n	800e972 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2202      	movs	r2, #2
 800e96c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e96e:	2302      	movs	r3, #2
 800e970:	e036      	b.n	800e9e0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e978:	f003 0320 	and.w	r3, r3, #32
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d005      	beq.n	800e98c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2220      	movs	r2, #32
 800e986:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e988:	2320      	movs	r3, #32
 800e98a:	e029      	b.n	800e9e0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a15      	ldr	r2, [pc, #84]	; (800e9e8 <SD_FindSCR+0x19c>)
 800e992:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	061a      	lsls	r2, r3, #24
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	021b      	lsls	r3, r3, #8
 800e99c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e9a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	0a1b      	lsrs	r3, r3, #8
 800e9a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e9aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	0e1b      	lsrs	r3, r3, #24
 800e9b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b4:	601a      	str	r2, [r3, #0]
    scr++;
 800e9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	061a      	lsls	r2, r3, #24
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	021b      	lsls	r3, r3, #8
 800e9c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e9c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	0a1b      	lsrs	r3, r3, #8
 800e9ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e9d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	0e1b      	lsrs	r3, r3, #24
 800e9d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3738      	adds	r7, #56	; 0x38
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	18000f3a 	.word	0x18000f3a

0800e9ec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fe:	2b1f      	cmp	r3, #31
 800ea00:	d936      	bls.n	800ea70 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ea02:	2300      	movs	r3, #0
 800ea04:	617b      	str	r3, [r7, #20]
 800ea06:	e027      	b.n	800ea58 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f003 fbe9 	bl	80121e4 <SDMMC_ReadFIFO>
 800ea12:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	0a1b      	lsrs	r3, r3, #8
 800ea26:	b2da      	uxtb	r2, r3
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	0c1b      	lsrs	r3, r3, #16
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	0e1b      	lsrs	r3, r3, #24
 800ea46:	b2da      	uxtb	r2, r3
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	3301      	adds	r3, #1
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2b07      	cmp	r3, #7
 800ea5c:	d9d4      	bls.n	800ea08 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	693a      	ldr	r2, [r7, #16]
 800ea62:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea68:	f1a3 0220 	sub.w	r2, r3, #32
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ea70:	bf00      	nop
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b086      	sub	sp, #24
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	69db      	ldr	r3, [r3, #28]
 800ea84:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a1b      	ldr	r3, [r3, #32]
 800ea8a:	2b1f      	cmp	r3, #31
 800ea8c:	d93a      	bls.n	800eb04 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ea8e:	2300      	movs	r3, #0
 800ea90:	617b      	str	r3, [r7, #20]
 800ea92:	e02b      	b.n	800eaec <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	021a      	lsls	r2, r3, #8
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	3301      	adds	r3, #1
 800eab0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	041a      	lsls	r2, r3, #16
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	4313      	orrs	r3, r2
 800eabc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	3301      	adds	r3, #1
 800eac2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	061a      	lsls	r2, r3, #24
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	4313      	orrs	r3, r2
 800eace:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	3301      	adds	r3, #1
 800ead4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f107 020c 	add.w	r2, r7, #12
 800eade:	4611      	mov	r1, r2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f003 fb8c 	bl	80121fe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	3301      	adds	r3, #1
 800eaea:	617b      	str	r3, [r7, #20]
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2b07      	cmp	r3, #7
 800eaf0:	d9d0      	bls.n	800ea94 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a1b      	ldr	r3, [r3, #32]
 800eafc:	f1a3 0220 	sub.w	r2, r3, #32
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	621a      	str	r2, [r3, #32]
  }
}
 800eb04:	bf00      	nop
 800eb06:	3718      	adds	r7, #24
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eb14:	bf00      	nop
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eb50:	bf00      	nop
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e10f      	b.n	800ed8e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a87      	ldr	r2, [pc, #540]	; (800ed98 <HAL_SPI_Init+0x23c>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d00f      	beq.n	800eb9e <HAL_SPI_Init+0x42>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a86      	ldr	r2, [pc, #536]	; (800ed9c <HAL_SPI_Init+0x240>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d00a      	beq.n	800eb9e <HAL_SPI_Init+0x42>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a84      	ldr	r2, [pc, #528]	; (800eda0 <HAL_SPI_Init+0x244>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d005      	beq.n	800eb9e <HAL_SPI_Init+0x42>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	2b0f      	cmp	r3, #15
 800eb98:	d901      	bls.n	800eb9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e0f7      	b.n	800ed8e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 fd5a 	bl	800f658 <SPI_GetPacketSize>
 800eba4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a7b      	ldr	r2, [pc, #492]	; (800ed98 <HAL_SPI_Init+0x23c>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d00c      	beq.n	800ebca <HAL_SPI_Init+0x6e>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a79      	ldr	r2, [pc, #484]	; (800ed9c <HAL_SPI_Init+0x240>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d007      	beq.n	800ebca <HAL_SPI_Init+0x6e>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4a78      	ldr	r2, [pc, #480]	; (800eda0 <HAL_SPI_Init+0x244>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d002      	beq.n	800ebca <HAL_SPI_Init+0x6e>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b08      	cmp	r3, #8
 800ebc8:	d811      	bhi.n	800ebee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ebce:	4a72      	ldr	r2, [pc, #456]	; (800ed98 <HAL_SPI_Init+0x23c>)
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d009      	beq.n	800ebe8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a70      	ldr	r2, [pc, #448]	; (800ed9c <HAL_SPI_Init+0x240>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d004      	beq.n	800ebe8 <HAL_SPI_Init+0x8c>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4a6f      	ldr	r2, [pc, #444]	; (800eda0 <HAL_SPI_Init+0x244>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d104      	bne.n	800ebf2 <HAL_SPI_Init+0x96>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b10      	cmp	r3, #16
 800ebec:	d901      	bls.n	800ebf2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e0cd      	b.n	800ed8e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d106      	bne.n	800ec0c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7f4 f9e6 	bl	8002fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2202      	movs	r2, #2
 800ec10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f022 0201 	bic.w	r2, r2, #1
 800ec22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ec2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	699b      	ldr	r3, [r3, #24]
 800ec34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ec38:	d119      	bne.n	800ec6e <HAL_SPI_Init+0x112>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec42:	d103      	bne.n	800ec4c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d008      	beq.n	800ec5e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d10c      	bne.n	800ec6e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ec58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec5c:	d107      	bne.n	800ec6e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ec6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00f      	beq.n	800ec9a <HAL_SPI_Init+0x13e>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	2b06      	cmp	r3, #6
 800ec80:	d90b      	bls.n	800ec9a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	430a      	orrs	r2, r1
 800ec96:	601a      	str	r2, [r3, #0]
 800ec98:	e007      	b.n	800ecaa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eca8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	69da      	ldr	r2, [r3, #28]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb2:	431a      	orrs	r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	431a      	orrs	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecbc:	ea42 0103 	orr.w	r1, r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	68da      	ldr	r2, [r3, #12]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	430a      	orrs	r2, r1
 800ecca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd4:	431a      	orrs	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecda:	431a      	orrs	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	699b      	ldr	r3, [r3, #24]
 800ece0:	431a      	orrs	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	431a      	orrs	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	695b      	ldr	r3, [r3, #20]
 800ecec:	431a      	orrs	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a1b      	ldr	r3, [r3, #32]
 800ecf2:	431a      	orrs	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	431a      	orrs	r2, r3
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecfe:	431a      	orrs	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	431a      	orrs	r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed0a:	ea42 0103 	orr.w	r1, r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	430a      	orrs	r2, r1
 800ed18:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d113      	bne.n	800ed4a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f022 0201 	bic.w	r2, r2, #1
 800ed58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d00a      	beq.n	800ed7c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	430a      	orrs	r2, r1
 800ed7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	40013000 	.word	0x40013000
 800ed9c:	40003800 	.word	0x40003800
 800eda0:	40003c00 	.word	0x40003c00

0800eda4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b08a      	sub	sp, #40	; 0x28
 800eda8:	af02      	add	r7, sp, #8
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	603b      	str	r3, [r7, #0]
 800edb0:	4613      	mov	r3, r2
 800edb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	3320      	adds	r3, #32
 800edba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d101      	bne.n	800edce <HAL_SPI_Transmit+0x2a>
 800edca:	2302      	movs	r3, #2
 800edcc:	e1e1      	b.n	800f192 <HAL_SPI_Transmit+0x3ee>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2201      	movs	r2, #1
 800edd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800edd6:	f7f4 fee7 	bl	8003ba8 <HAL_GetTick>
 800edda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d007      	beq.n	800edf8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ede8:	2302      	movs	r3, #2
 800edea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800edf4:	7efb      	ldrb	r3, [r7, #27]
 800edf6:	e1cc      	b.n	800f192 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <HAL_SPI_Transmit+0x60>
 800edfe:	88fb      	ldrh	r3, [r7, #6]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d107      	bne.n	800ee14 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ee04:	2301      	movs	r3, #1
 800ee06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee10:	7efb      	ldrb	r3, [r7, #27]
 800ee12:	e1be      	b.n	800f192 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2203      	movs	r2, #3
 800ee18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	68ba      	ldr	r2, [r7, #8]
 800ee28:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	88fa      	ldrh	r2, [r7, #6]
 800ee2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	88fa      	ldrh	r2, [r7, #6]
 800ee36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ee64:	d108      	bne.n	800ee78 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	e009      	b.n	800ee8c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ee8a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	4b96      	ldr	r3, [pc, #600]	; (800f0ec <HAL_SPI_Transmit+0x348>)
 800ee94:	4013      	ands	r3, r2
 800ee96:	88f9      	ldrh	r1, [r7, #6]
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	6812      	ldr	r2, [r2, #0]
 800ee9c:	430b      	orrs	r3, r1
 800ee9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f042 0201 	orr.w	r2, r2, #1
 800eeae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eeb8:	d107      	bne.n	800eeca <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eec8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	2b0f      	cmp	r3, #15
 800eed0:	d947      	bls.n	800ef62 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eed2:	e03f      	b.n	800ef54 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	f003 0302 	and.w	r3, r3, #2
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d114      	bne.n	800ef0c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	6812      	ldr	r2, [r2, #0]
 800eeec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eef2:	1d1a      	adds	r2, r3, #4
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	3b01      	subs	r3, #1
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ef0a:	e023      	b.n	800ef54 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef0c:	f7f4 fe4c 	bl	8003ba8 <HAL_GetTick>
 800ef10:	4602      	mov	r2, r0
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d803      	bhi.n	800ef24 <HAL_SPI_Transmit+0x180>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef22:	d102      	bne.n	800ef2a <HAL_SPI_Transmit+0x186>
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d114      	bne.n	800ef54 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f000 fac6 	bl	800f4bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ef50:	2303      	movs	r3, #3
 800ef52:	e11e      	b.n	800f192 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1b9      	bne.n	800eed4 <HAL_SPI_Transmit+0x130>
 800ef60:	e0f1      	b.n	800f146 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	2b07      	cmp	r3, #7
 800ef68:	f240 80e6 	bls.w	800f138 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ef6c:	e05d      	b.n	800f02a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	f003 0302 	and.w	r3, r3, #2
 800ef78:	2b02      	cmp	r3, #2
 800ef7a:	d132      	bne.n	800efe2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d918      	bls.n	800efba <HAL_SPI_Transmit+0x216>
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d014      	beq.n	800efba <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	6812      	ldr	r2, [r2, #0]
 800ef9a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800efa0:	1d1a      	adds	r2, r3, #4
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efac:	b29b      	uxth	r3, r3
 800efae:	3b02      	subs	r3, #2
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800efb8:	e037      	b.n	800f02a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800efbe:	881a      	ldrh	r2, [r3, #0]
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800efc8:	1c9a      	adds	r2, r3, #2
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	3b01      	subs	r3, #1
 800efd8:	b29a      	uxth	r2, r3
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800efe0:	e023      	b.n	800f02a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efe2:	f7f4 fde1 	bl	8003ba8 <HAL_GetTick>
 800efe6:	4602      	mov	r2, r0
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	683a      	ldr	r2, [r7, #0]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d803      	bhi.n	800effa <HAL_SPI_Transmit+0x256>
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff8:	d102      	bne.n	800f000 <HAL_SPI_Transmit+0x25c>
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d114      	bne.n	800f02a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f000 fa5b 	bl	800f4bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2200      	movs	r2, #0
 800f00a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f014:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2201      	movs	r2, #1
 800f022:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f026:	2303      	movs	r3, #3
 800f028:	e0b3      	b.n	800f192 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f030:	b29b      	uxth	r3, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	d19b      	bne.n	800ef6e <HAL_SPI_Transmit+0x1ca>
 800f036:	e086      	b.n	800f146 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	695b      	ldr	r3, [r3, #20]
 800f03e:	f003 0302 	and.w	r3, r3, #2
 800f042:	2b02      	cmp	r3, #2
 800f044:	d154      	bne.n	800f0f0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d918      	bls.n	800f084 <HAL_SPI_Transmit+0x2e0>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f056:	2b40      	cmp	r3, #64	; 0x40
 800f058:	d914      	bls.n	800f084 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6812      	ldr	r2, [r2, #0]
 800f064:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f06a:	1d1a      	adds	r2, r3, #4
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f076:	b29b      	uxth	r3, r3
 800f078:	3b04      	subs	r3, #4
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f082:	e059      	b.n	800f138 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d917      	bls.n	800f0c0 <HAL_SPI_Transmit+0x31c>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f094:	2b00      	cmp	r3, #0
 800f096:	d013      	beq.n	800f0c0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f09c:	881a      	ldrh	r2, [r3, #0]
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0a6:	1c9a      	adds	r2, r3, #2
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	3b02      	subs	r3, #2
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f0be:	e03b      	b.n	800f138 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	3320      	adds	r3, #32
 800f0ca:	7812      	ldrb	r2, [r2, #0]
 800f0cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0d2:	1c5a      	adds	r2, r3, #1
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f0ea:	e025      	b.n	800f138 <HAL_SPI_Transmit+0x394>
 800f0ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0f0:	f7f4 fd5a 	bl	8003ba8 <HAL_GetTick>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	683a      	ldr	r2, [r7, #0]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d803      	bhi.n	800f108 <HAL_SPI_Transmit+0x364>
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f106:	d102      	bne.n	800f10e <HAL_SPI_Transmit+0x36a>
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d114      	bne.n	800f138 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f000 f9d4 	bl	800f4bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f134:	2303      	movs	r3, #3
 800f136:	e02c      	b.n	800f192 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f13e:	b29b      	uxth	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	f47f af79 	bne.w	800f038 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	9300      	str	r3, [sp, #0]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2200      	movs	r2, #0
 800f14e:	2108      	movs	r1, #8
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f000 fa53 	bl	800f5fc <SPI_WaitOnFlagUntilTimeout>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d007      	beq.n	800f16c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f162:	f043 0220 	orr.w	r2, r3, #32
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 f9a5 	bl	800f4bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2201      	movs	r2, #1
 800f17e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	e000      	b.n	800f192 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f190:	7efb      	ldrb	r3, [r7, #27]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3720      	adds	r7, #32
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop

0800f19c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	3330      	adds	r3, #48	; 0x30
 800f1b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d101      	bne.n	800f1c6 <HAL_SPI_Receive+0x2a>
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	e173      	b.n	800f4ae <HAL_SPI_Receive+0x312>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f1ce:	f7f4 fceb 	bl	8003ba8 <HAL_GetTick>
 800f1d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d007      	beq.n	800f1f0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f1e0:	2302      	movs	r3, #2
 800f1e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f1ec:	7ffb      	ldrb	r3, [r7, #31]
 800f1ee:	e15e      	b.n	800f4ae <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <HAL_SPI_Receive+0x60>
 800f1f6:	88fb      	ldrh	r3, [r7, #6]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d107      	bne.n	800f20c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f208:	7ffb      	ldrb	r3, [r7, #31]
 800f20a:	e150      	b.n	800f4ae <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2204      	movs	r2, #4
 800f210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2200      	movs	r2, #0
 800f218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	88fa      	ldrh	r2, [r7, #6]
 800f226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	88fa      	ldrh	r2, [r7, #6]
 800f22e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2200      	movs	r2, #0
 800f236:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2200      	movs	r2, #0
 800f23c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2200      	movs	r2, #0
 800f244:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f25c:	d108      	bne.n	800f270 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	e009      	b.n	800f284 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f282:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	685a      	ldr	r2, [r3, #4]
 800f28a:	4b8b      	ldr	r3, [pc, #556]	; (800f4b8 <HAL_SPI_Receive+0x31c>)
 800f28c:	4013      	ands	r3, r2
 800f28e:	88f9      	ldrh	r1, [r7, #6]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	6812      	ldr	r2, [r2, #0]
 800f294:	430b      	orrs	r3, r1
 800f296:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f042 0201 	orr.w	r2, r2, #1
 800f2a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f2b0:	d107      	bne.n	800f2c2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	2b0f      	cmp	r3, #15
 800f2c8:	d948      	bls.n	800f35c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f2ca:	e040      	b.n	800f34e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	695a      	ldr	r2, [r3, #20]
 800f2d2:	f248 0308 	movw	r3, #32776	; 0x8008
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d014      	beq.n	800f306 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f2e6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2ec:	1d1a      	adds	r2, r3, #4
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f304:	e023      	b.n	800f34e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f306:	f7f4 fc4f 	bl	8003ba8 <HAL_GetTick>
 800f30a:	4602      	mov	r2, r0
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	683a      	ldr	r2, [r7, #0]
 800f312:	429a      	cmp	r2, r3
 800f314:	d803      	bhi.n	800f31e <HAL_SPI_Receive+0x182>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31c:	d102      	bne.n	800f324 <HAL_SPI_Receive+0x188>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d114      	bne.n	800f34e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 f8c9 	bl	800f4bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2200      	movs	r2, #0
 800f32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f338:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2201      	movs	r2, #1
 800f346:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e0af      	b.n	800f4ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f354:	b29b      	uxth	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1b8      	bne.n	800f2cc <HAL_SPI_Receive+0x130>
 800f35a:	e095      	b.n	800f488 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	2b07      	cmp	r3, #7
 800f362:	f240 808b 	bls.w	800f47c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f366:	e03f      	b.n	800f3e8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	695b      	ldr	r3, [r3, #20]
 800f36e:	f003 0301 	and.w	r3, r3, #1
 800f372:	2b01      	cmp	r3, #1
 800f374:	d114      	bne.n	800f3a0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f37a:	69ba      	ldr	r2, [r7, #24]
 800f37c:	8812      	ldrh	r2, [r2, #0]
 800f37e:	b292      	uxth	r2, r2
 800f380:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f386:	1c9a      	adds	r2, r3, #2
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f392:	b29b      	uxth	r3, r3
 800f394:	3b01      	subs	r3, #1
 800f396:	b29a      	uxth	r2, r3
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f39e:	e023      	b.n	800f3e8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3a0:	f7f4 fc02 	bl	8003ba8 <HAL_GetTick>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d803      	bhi.n	800f3b8 <HAL_SPI_Receive+0x21c>
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b6:	d102      	bne.n	800f3be <HAL_SPI_Receive+0x222>
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d114      	bne.n	800f3e8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f000 f87c 	bl	800f4bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f3e4:	2303      	movs	r3, #3
 800f3e6:	e062      	b.n	800f4ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1b9      	bne.n	800f368 <HAL_SPI_Receive+0x1cc>
 800f3f4:	e048      	b.n	800f488 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	695b      	ldr	r3, [r3, #20]
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	2b01      	cmp	r3, #1
 800f402:	d117      	bne.n	800f434 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f410:	7812      	ldrb	r2, [r2, #0]
 800f412:	b2d2      	uxtb	r2, r2
 800f414:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f426:	b29b      	uxth	r3, r3
 800f428:	3b01      	subs	r3, #1
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f432:	e023      	b.n	800f47c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f434:	f7f4 fbb8 	bl	8003ba8 <HAL_GetTick>
 800f438:	4602      	mov	r2, r0
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	429a      	cmp	r2, r3
 800f442:	d803      	bhi.n	800f44c <HAL_SPI_Receive+0x2b0>
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44a:	d102      	bne.n	800f452 <HAL_SPI_Receive+0x2b6>
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d114      	bne.n	800f47c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f000 f832 	bl	800f4bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2200      	movs	r2, #0
 800f45c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f466:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f478:	2303      	movs	r3, #3
 800f47a:	e018      	b.n	800f4ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f482:	b29b      	uxth	r3, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1b6      	bne.n	800f3f6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f000 f817 	bl	800f4bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2201      	movs	r2, #1
 800f49a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e000      	b.n	800f4ae <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f4ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3720      	adds	r7, #32
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	ffff0000 	.word	0xffff0000

0800f4bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b085      	sub	sp, #20
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	695b      	ldr	r3, [r3, #20]
 800f4ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	699a      	ldr	r2, [r3, #24]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f042 0208 	orr.w	r2, r2, #8
 800f4da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	699a      	ldr	r2, [r3, #24]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f042 0210 	orr.w	r2, r2, #16
 800f4ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f022 0201 	bic.w	r2, r2, #1
 800f4fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	6919      	ldr	r1, [r3, #16]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	4b3c      	ldr	r3, [pc, #240]	; (800f5f8 <SPI_CloseTransfer+0x13c>)
 800f508:	400b      	ands	r3, r1
 800f50a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	689a      	ldr	r2, [r3, #8]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f51a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f522:	b2db      	uxtb	r3, r3
 800f524:	2b04      	cmp	r3, #4
 800f526:	d014      	beq.n	800f552 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f003 0320 	and.w	r3, r3, #32
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00f      	beq.n	800f552 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f538:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	699a      	ldr	r2, [r3, #24]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f042 0220 	orr.w	r2, r2, #32
 800f550:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	2b03      	cmp	r3, #3
 800f55c:	d014      	beq.n	800f588 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00f      	beq.n	800f588 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f56e:	f043 0204 	orr.w	r2, r3, #4
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	699a      	ldr	r2, [r3, #24]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f586:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d00f      	beq.n	800f5b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f598:	f043 0201 	orr.w	r2, r3, #1
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	699a      	ldr	r2, [r3, #24]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00f      	beq.n	800f5dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5c2:	f043 0208 	orr.w	r2, r3, #8
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	699a      	ldr	r2, [r3, #24]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f5da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f5ec:	bf00      	nop
 800f5ee:	3714      	adds	r7, #20
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr
 800f5f8:	fffffc90 	.word	0xfffffc90

0800f5fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	603b      	str	r3, [r7, #0]
 800f608:	4613      	mov	r3, r2
 800f60a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f60c:	e010      	b.n	800f630 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f60e:	f7f4 facb 	bl	8003ba8 <HAL_GetTick>
 800f612:	4602      	mov	r2, r0
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	1ad3      	subs	r3, r2, r3
 800f618:	683a      	ldr	r2, [r7, #0]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d803      	bhi.n	800f626 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f624:	d102      	bne.n	800f62c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d101      	bne.n	800f630 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f62c:	2303      	movs	r3, #3
 800f62e:	e00f      	b.n	800f650 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	695a      	ldr	r2, [r3, #20]
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	4013      	ands	r3, r2
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	bf0c      	ite	eq
 800f640:	2301      	moveq	r3, #1
 800f642:	2300      	movne	r3, #0
 800f644:	b2db      	uxtb	r3, r3
 800f646:	461a      	mov	r2, r3
 800f648:	79fb      	ldrb	r3, [r7, #7]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d0df      	beq.n	800f60e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3710      	adds	r7, #16
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f664:	095b      	lsrs	r3, r3, #5
 800f666:	3301      	adds	r3, #1
 800f668:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	3301      	adds	r3, #1
 800f670:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	3307      	adds	r3, #7
 800f676:	08db      	lsrs	r3, r3, #3
 800f678:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d101      	bne.n	800f6a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f69c:	2301      	movs	r3, #1
 800f69e:	e049      	b.n	800f734 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d106      	bne.n	800f6ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7f3 fee1 	bl	800347c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2202      	movs	r2, #2
 800f6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	f000 ff29 	bl	8010524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2201      	movs	r2, #1
 800f70e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2201      	movs	r2, #1
 800f716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2201      	movs	r2, #1
 800f71e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2201      	movs	r2, #1
 800f726:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2201      	movs	r2, #1
 800f72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f732:	2300      	movs	r3, #0
}
 800f734:	4618      	mov	r0, r3
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d101      	bne.n	800f74e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	e049      	b.n	800f7e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f754:	b2db      	uxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7f3 fcf4 	bl	8003150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2202      	movs	r2, #2
 800f76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	3304      	adds	r3, #4
 800f778:	4619      	mov	r1, r3
 800f77a:	4610      	mov	r0, r2
 800f77c:	f000 fed2 	bl	8010524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2201      	movs	r2, #1
 800f79c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3708      	adds	r7, #8
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
	...

0800f7ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d109      	bne.n	800f810 <HAL_TIM_PWM_Start+0x24>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b01      	cmp	r3, #1
 800f806:	bf14      	ite	ne
 800f808:	2301      	movne	r3, #1
 800f80a:	2300      	moveq	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	e03c      	b.n	800f88a <HAL_TIM_PWM_Start+0x9e>
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	2b04      	cmp	r3, #4
 800f814:	d109      	bne.n	800f82a <HAL_TIM_PWM_Start+0x3e>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b01      	cmp	r3, #1
 800f820:	bf14      	ite	ne
 800f822:	2301      	movne	r3, #1
 800f824:	2300      	moveq	r3, #0
 800f826:	b2db      	uxtb	r3, r3
 800f828:	e02f      	b.n	800f88a <HAL_TIM_PWM_Start+0x9e>
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	2b08      	cmp	r3, #8
 800f82e:	d109      	bne.n	800f844 <HAL_TIM_PWM_Start+0x58>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b01      	cmp	r3, #1
 800f83a:	bf14      	ite	ne
 800f83c:	2301      	movne	r3, #1
 800f83e:	2300      	moveq	r3, #0
 800f840:	b2db      	uxtb	r3, r3
 800f842:	e022      	b.n	800f88a <HAL_TIM_PWM_Start+0x9e>
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	2b0c      	cmp	r3, #12
 800f848:	d109      	bne.n	800f85e <HAL_TIM_PWM_Start+0x72>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b01      	cmp	r3, #1
 800f854:	bf14      	ite	ne
 800f856:	2301      	movne	r3, #1
 800f858:	2300      	moveq	r3, #0
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	e015      	b.n	800f88a <HAL_TIM_PWM_Start+0x9e>
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	2b10      	cmp	r3, #16
 800f862:	d109      	bne.n	800f878 <HAL_TIM_PWM_Start+0x8c>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	bf14      	ite	ne
 800f870:	2301      	movne	r3, #1
 800f872:	2300      	moveq	r3, #0
 800f874:	b2db      	uxtb	r3, r3
 800f876:	e008      	b.n	800f88a <HAL_TIM_PWM_Start+0x9e>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	2b01      	cmp	r3, #1
 800f882:	bf14      	ite	ne
 800f884:	2301      	movne	r3, #1
 800f886:	2300      	moveq	r3, #0
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	e0ab      	b.n	800f9ea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d104      	bne.n	800f8a2 <HAL_TIM_PWM_Start+0xb6>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2202      	movs	r2, #2
 800f89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f8a0:	e023      	b.n	800f8ea <HAL_TIM_PWM_Start+0xfe>
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	2b04      	cmp	r3, #4
 800f8a6:	d104      	bne.n	800f8b2 <HAL_TIM_PWM_Start+0xc6>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f8b0:	e01b      	b.n	800f8ea <HAL_TIM_PWM_Start+0xfe>
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	2b08      	cmp	r3, #8
 800f8b6:	d104      	bne.n	800f8c2 <HAL_TIM_PWM_Start+0xd6>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2202      	movs	r2, #2
 800f8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f8c0:	e013      	b.n	800f8ea <HAL_TIM_PWM_Start+0xfe>
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b0c      	cmp	r3, #12
 800f8c6:	d104      	bne.n	800f8d2 <HAL_TIM_PWM_Start+0xe6>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f8d0:	e00b      	b.n	800f8ea <HAL_TIM_PWM_Start+0xfe>
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	2b10      	cmp	r3, #16
 800f8d6:	d104      	bne.n	800f8e2 <HAL_TIM_PWM_Start+0xf6>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2202      	movs	r2, #2
 800f8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8e0:	e003      	b.n	800f8ea <HAL_TIM_PWM_Start+0xfe>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2202      	movs	r2, #2
 800f8e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f001 f992 	bl	8010c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4a3d      	ldr	r2, [pc, #244]	; (800f9f4 <HAL_TIM_PWM_Start+0x208>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d013      	beq.n	800f92a <HAL_TIM_PWM_Start+0x13e>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a3c      	ldr	r2, [pc, #240]	; (800f9f8 <HAL_TIM_PWM_Start+0x20c>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d00e      	beq.n	800f92a <HAL_TIM_PWM_Start+0x13e>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a3a      	ldr	r2, [pc, #232]	; (800f9fc <HAL_TIM_PWM_Start+0x210>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d009      	beq.n	800f92a <HAL_TIM_PWM_Start+0x13e>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a39      	ldr	r2, [pc, #228]	; (800fa00 <HAL_TIM_PWM_Start+0x214>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d004      	beq.n	800f92a <HAL_TIM_PWM_Start+0x13e>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a37      	ldr	r2, [pc, #220]	; (800fa04 <HAL_TIM_PWM_Start+0x218>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d101      	bne.n	800f92e <HAL_TIM_PWM_Start+0x142>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <HAL_TIM_PWM_Start+0x144>
 800f92e:	2300      	movs	r3, #0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d007      	beq.n	800f944 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f942:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a2a      	ldr	r2, [pc, #168]	; (800f9f4 <HAL_TIM_PWM_Start+0x208>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d02c      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f956:	d027      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a2a      	ldr	r2, [pc, #168]	; (800fa08 <HAL_TIM_PWM_Start+0x21c>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d022      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a29      	ldr	r2, [pc, #164]	; (800fa0c <HAL_TIM_PWM_Start+0x220>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d01d      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a27      	ldr	r2, [pc, #156]	; (800fa10 <HAL_TIM_PWM_Start+0x224>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d018      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4a1f      	ldr	r2, [pc, #124]	; (800f9f8 <HAL_TIM_PWM_Start+0x20c>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d013      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a23      	ldr	r2, [pc, #140]	; (800fa14 <HAL_TIM_PWM_Start+0x228>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d00e      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4a1b      	ldr	r2, [pc, #108]	; (800f9fc <HAL_TIM_PWM_Start+0x210>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d009      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4a1f      	ldr	r2, [pc, #124]	; (800fa18 <HAL_TIM_PWM_Start+0x22c>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d004      	beq.n	800f9a8 <HAL_TIM_PWM_Start+0x1bc>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a1e      	ldr	r2, [pc, #120]	; (800fa1c <HAL_TIM_PWM_Start+0x230>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d115      	bne.n	800f9d4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	689a      	ldr	r2, [r3, #8]
 800f9ae:	4b1c      	ldr	r3, [pc, #112]	; (800fa20 <HAL_TIM_PWM_Start+0x234>)
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2b06      	cmp	r3, #6
 800f9b8:	d015      	beq.n	800f9e6 <HAL_TIM_PWM_Start+0x1fa>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9c0:	d011      	beq.n	800f9e6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f042 0201 	orr.w	r2, r2, #1
 800f9d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9d2:	e008      	b.n	800f9e6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f042 0201 	orr.w	r2, r2, #1
 800f9e2:	601a      	str	r2, [r3, #0]
 800f9e4:	e000      	b.n	800f9e8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	40010000 	.word	0x40010000
 800f9f8:	40010400 	.word	0x40010400
 800f9fc:	40014000 	.word	0x40014000
 800fa00:	40014400 	.word	0x40014400
 800fa04:	40014800 	.word	0x40014800
 800fa08:	40000400 	.word	0x40000400
 800fa0c:	40000800 	.word	0x40000800
 800fa10:	40000c00 	.word	0x40000c00
 800fa14:	40001800 	.word	0x40001800
 800fa18:	4000e000 	.word	0x4000e000
 800fa1c:	4000e400 	.word	0x4000e400
 800fa20:	00010007 	.word	0x00010007

0800fa24 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d109      	bne.n	800fa50 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	bf0c      	ite	eq
 800fa48:	2301      	moveq	r3, #1
 800fa4a:	2300      	movne	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	e03c      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0xa6>
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2b04      	cmp	r3, #4
 800fa54:	d109      	bne.n	800fa6a <HAL_TIM_PWM_Start_DMA+0x46>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	2b02      	cmp	r3, #2
 800fa60:	bf0c      	ite	eq
 800fa62:	2301      	moveq	r3, #1
 800fa64:	2300      	movne	r3, #0
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	e02f      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0xa6>
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	2b08      	cmp	r3, #8
 800fa6e:	d109      	bne.n	800fa84 <HAL_TIM_PWM_Start_DMA+0x60>
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	bf0c      	ite	eq
 800fa7c:	2301      	moveq	r3, #1
 800fa7e:	2300      	movne	r3, #0
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	e022      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0xa6>
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	2b0c      	cmp	r3, #12
 800fa88:	d109      	bne.n	800fa9e <HAL_TIM_PWM_Start_DMA+0x7a>
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	bf0c      	ite	eq
 800fa96:	2301      	moveq	r3, #1
 800fa98:	2300      	movne	r3, #0
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	e015      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0xa6>
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	2b10      	cmp	r3, #16
 800faa2:	d109      	bne.n	800fab8 <HAL_TIM_PWM_Start_DMA+0x94>
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	2b02      	cmp	r3, #2
 800faae:	bf0c      	ite	eq
 800fab0:	2301      	moveq	r3, #1
 800fab2:	2300      	movne	r3, #0
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	e008      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0xa6>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	bf0c      	ite	eq
 800fac4:	2301      	moveq	r3, #1
 800fac6:	2300      	movne	r3, #0
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	d001      	beq.n	800fad2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800face:	2302      	movs	r3, #2
 800fad0:	e1ba      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d109      	bne.n	800faec <HAL_TIM_PWM_Start_DMA+0xc8>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	bf0c      	ite	eq
 800fae4:	2301      	moveq	r3, #1
 800fae6:	2300      	movne	r3, #0
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	e03c      	b.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x142>
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	2b04      	cmp	r3, #4
 800faf0:	d109      	bne.n	800fb06 <HAL_TIM_PWM_Start_DMA+0xe2>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	bf0c      	ite	eq
 800fafe:	2301      	moveq	r3, #1
 800fb00:	2300      	movne	r3, #0
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	e02f      	b.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x142>
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	2b08      	cmp	r3, #8
 800fb0a:	d109      	bne.n	800fb20 <HAL_TIM_PWM_Start_DMA+0xfc>
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	bf0c      	ite	eq
 800fb18:	2301      	moveq	r3, #1
 800fb1a:	2300      	movne	r3, #0
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	e022      	b.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x142>
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2b0c      	cmp	r3, #12
 800fb24:	d109      	bne.n	800fb3a <HAL_TIM_PWM_Start_DMA+0x116>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	bf0c      	ite	eq
 800fb32:	2301      	moveq	r3, #1
 800fb34:	2300      	movne	r3, #0
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	e015      	b.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x142>
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	2b10      	cmp	r3, #16
 800fb3e:	d109      	bne.n	800fb54 <HAL_TIM_PWM_Start_DMA+0x130>
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	bf0c      	ite	eq
 800fb4c:	2301      	moveq	r3, #1
 800fb4e:	2300      	movne	r3, #0
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	e008      	b.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x142>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	bf0c      	ite	eq
 800fb60:	2301      	moveq	r3, #1
 800fb62:	2300      	movne	r3, #0
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d034      	beq.n	800fbd4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d002      	beq.n	800fb76 <HAL_TIM_PWM_Start_DMA+0x152>
 800fb70:	887b      	ldrh	r3, [r7, #2]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d101      	bne.n	800fb7a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800fb76:	2301      	movs	r3, #1
 800fb78:	e166      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d104      	bne.n	800fb8a <HAL_TIM_PWM_Start_DMA+0x166>
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2202      	movs	r2, #2
 800fb84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb88:	e026      	b.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2b04      	cmp	r3, #4
 800fb8e:	d104      	bne.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x176>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2202      	movs	r2, #2
 800fb94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb98:	e01e      	b.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2b08      	cmp	r3, #8
 800fb9e:	d104      	bne.n	800fbaa <HAL_TIM_PWM_Start_DMA+0x186>
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2202      	movs	r2, #2
 800fba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fba8:	e016      	b.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	2b0c      	cmp	r3, #12
 800fbae:	d104      	bne.n	800fbba <HAL_TIM_PWM_Start_DMA+0x196>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbb8:	e00e      	b.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	2b10      	cmp	r3, #16
 800fbbe:	d104      	bne.n	800fbca <HAL_TIM_PWM_Start_DMA+0x1a6>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2202      	movs	r2, #2
 800fbc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbc8:	e006      	b.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2202      	movs	r2, #2
 800fbce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbd2:	e001      	b.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	e137      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	2b0c      	cmp	r3, #12
 800fbdc:	f200 80ae 	bhi.w	800fd3c <HAL_TIM_PWM_Start_DMA+0x318>
 800fbe0:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800fbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe6:	bf00      	nop
 800fbe8:	0800fc1d 	.word	0x0800fc1d
 800fbec:	0800fd3d 	.word	0x0800fd3d
 800fbf0:	0800fd3d 	.word	0x0800fd3d
 800fbf4:	0800fd3d 	.word	0x0800fd3d
 800fbf8:	0800fc65 	.word	0x0800fc65
 800fbfc:	0800fd3d 	.word	0x0800fd3d
 800fc00:	0800fd3d 	.word	0x0800fd3d
 800fc04:	0800fd3d 	.word	0x0800fd3d
 800fc08:	0800fcad 	.word	0x0800fcad
 800fc0c:	0800fd3d 	.word	0x0800fd3d
 800fc10:	0800fd3d 	.word	0x0800fd3d
 800fc14:	0800fd3d 	.word	0x0800fd3d
 800fc18:	0800fcf5 	.word	0x0800fcf5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc20:	4a8b      	ldr	r2, [pc, #556]	; (800fe50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fc22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc28:	4a8a      	ldr	r2, [pc, #552]	; (800fe54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fc2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc30:	4a89      	ldr	r2, [pc, #548]	; (800fe58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fc32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fc38:	6879      	ldr	r1, [r7, #4]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	3334      	adds	r3, #52	; 0x34
 800fc40:	461a      	mov	r2, r3
 800fc42:	887b      	ldrh	r3, [r7, #2]
 800fc44:	f7f5 ffce 	bl	8005be4 <HAL_DMA_Start_IT>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d001      	beq.n	800fc52 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e0fa      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	68da      	ldr	r2, [r3, #12]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc60:	60da      	str	r2, [r3, #12]
      break;
 800fc62:	e06e      	b.n	800fd42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc68:	4a79      	ldr	r2, [pc, #484]	; (800fe50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fc6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc70:	4a78      	ldr	r2, [pc, #480]	; (800fe54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fc72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc78:	4a77      	ldr	r2, [pc, #476]	; (800fe58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fc7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fc80:	6879      	ldr	r1, [r7, #4]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	3338      	adds	r3, #56	; 0x38
 800fc88:	461a      	mov	r2, r3
 800fc8a:	887b      	ldrh	r3, [r7, #2]
 800fc8c:	f7f5 ffaa 	bl	8005be4 <HAL_DMA_Start_IT>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d001      	beq.n	800fc9a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fc96:	2301      	movs	r3, #1
 800fc98:	e0d6      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68da      	ldr	r2, [r3, #12]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fca8:	60da      	str	r2, [r3, #12]
      break;
 800fcaa:	e04a      	b.n	800fd42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb0:	4a67      	ldr	r2, [pc, #412]	; (800fe50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fcb2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb8:	4a66      	ldr	r2, [pc, #408]	; (800fe54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fcba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	4a65      	ldr	r2, [pc, #404]	; (800fe58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fcc2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fcc8:	6879      	ldr	r1, [r7, #4]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	333c      	adds	r3, #60	; 0x3c
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	887b      	ldrh	r3, [r7, #2]
 800fcd4:	f7f5 ff86 	bl	8005be4 <HAL_DMA_Start_IT>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fcde:	2301      	movs	r3, #1
 800fce0:	e0b2      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68da      	ldr	r2, [r3, #12]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fcf0:	60da      	str	r2, [r3, #12]
      break;
 800fcf2:	e026      	b.n	800fd42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcf8:	4a55      	ldr	r2, [pc, #340]	; (800fe50 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fcfa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd00:	4a54      	ldr	r2, [pc, #336]	; (800fe54 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fd02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd08:	4a53      	ldr	r2, [pc, #332]	; (800fe58 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fd0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fd10:	6879      	ldr	r1, [r7, #4]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	3340      	adds	r3, #64	; 0x40
 800fd18:	461a      	mov	r2, r3
 800fd1a:	887b      	ldrh	r3, [r7, #2]
 800fd1c:	f7f5 ff62 	bl	8005be4 <HAL_DMA_Start_IT>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e08e      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	68da      	ldr	r2, [r3, #12]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fd38:	60da      	str	r2, [r3, #12]
      break;
 800fd3a:	e002      	b.n	800fd42 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	75fb      	strb	r3, [r7, #23]
      break;
 800fd40:	bf00      	nop
  }

  if (status == HAL_OK)
 800fd42:	7dfb      	ldrb	r3, [r7, #23]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d17e      	bne.n	800fe46 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	68b9      	ldr	r1, [r7, #8]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f000 ff63 	bl	8010c1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a40      	ldr	r2, [pc, #256]	; (800fe5c <HAL_TIM_PWM_Start_DMA+0x438>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d013      	beq.n	800fd88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a3e      	ldr	r2, [pc, #248]	; (800fe60 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d00e      	beq.n	800fd88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a3d      	ldr	r2, [pc, #244]	; (800fe64 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d009      	beq.n	800fd88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a3b      	ldr	r2, [pc, #236]	; (800fe68 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d004      	beq.n	800fd88 <HAL_TIM_PWM_Start_DMA+0x364>
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a3a      	ldr	r2, [pc, #232]	; (800fe6c <HAL_TIM_PWM_Start_DMA+0x448>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d101      	bne.n	800fd8c <HAL_TIM_PWM_Start_DMA+0x368>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e000      	b.n	800fd8e <HAL_TIM_PWM_Start_DMA+0x36a>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d007      	beq.n	800fda2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fda0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4a2d      	ldr	r2, [pc, #180]	; (800fe5c <HAL_TIM_PWM_Start_DMA+0x438>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d02c      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdb4:	d027      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a2d      	ldr	r2, [pc, #180]	; (800fe70 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d022      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a2b      	ldr	r2, [pc, #172]	; (800fe74 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d01d      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a2a      	ldr	r2, [pc, #168]	; (800fe78 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d018      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a21      	ldr	r2, [pc, #132]	; (800fe60 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d013      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a26      	ldr	r2, [pc, #152]	; (800fe7c <HAL_TIM_PWM_Start_DMA+0x458>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d00e      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a1d      	ldr	r2, [pc, #116]	; (800fe64 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d009      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a22      	ldr	r2, [pc, #136]	; (800fe80 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d004      	beq.n	800fe06 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a20      	ldr	r2, [pc, #128]	; (800fe84 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d115      	bne.n	800fe32 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	689a      	ldr	r2, [r3, #8]
 800fe0c:	4b1e      	ldr	r3, [pc, #120]	; (800fe88 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fe0e:	4013      	ands	r3, r2
 800fe10:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	2b06      	cmp	r3, #6
 800fe16:	d015      	beq.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x420>
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe1e:	d011      	beq.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f042 0201 	orr.w	r2, r2, #1
 800fe2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe30:	e008      	b.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f042 0201 	orr.w	r2, r2, #1
 800fe40:	601a      	str	r2, [r3, #0]
 800fe42:	e000      	b.n	800fe46 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe44:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fe46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3718      	adds	r7, #24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	08010413 	.word	0x08010413
 800fe54:	080104bb 	.word	0x080104bb
 800fe58:	08010381 	.word	0x08010381
 800fe5c:	40010000 	.word	0x40010000
 800fe60:	40010400 	.word	0x40010400
 800fe64:	40014000 	.word	0x40014000
 800fe68:	40014400 	.word	0x40014400
 800fe6c:	40014800 	.word	0x40014800
 800fe70:	40000400 	.word	0x40000400
 800fe74:	40000800 	.word	0x40000800
 800fe78:	40000c00 	.word	0x40000c00
 800fe7c:	40001800 	.word	0x40001800
 800fe80:	4000e000 	.word	0x4000e000
 800fe84:	4000e400 	.word	0x4000e400
 800fe88:	00010007 	.word	0x00010007

0800fe8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	691b      	ldr	r3, [r3, #16]
 800fe9a:	f003 0302 	and.w	r3, r3, #2
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d122      	bne.n	800fee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	f003 0302 	and.w	r3, r3, #2
 800feac:	2b02      	cmp	r3, #2
 800feae:	d11b      	bne.n	800fee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f06f 0202 	mvn.w	r2, #2
 800feb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2201      	movs	r2, #1
 800febe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	699b      	ldr	r3, [r3, #24]
 800fec6:	f003 0303 	and.w	r3, r3, #3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d003      	beq.n	800fed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 fa24 	bl	801031c <HAL_TIM_IC_CaptureCallback>
 800fed4:	e005      	b.n	800fee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 fa16 	bl	8010308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fa27 	bl	8010330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	f003 0304 	and.w	r3, r3, #4
 800fef2:	2b04      	cmp	r3, #4
 800fef4:	d122      	bne.n	800ff3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	f003 0304 	and.w	r3, r3, #4
 800ff00:	2b04      	cmp	r3, #4
 800ff02:	d11b      	bne.n	800ff3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f06f 0204 	mvn.w	r2, #4
 800ff0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2202      	movs	r2, #2
 800ff12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	699b      	ldr	r3, [r3, #24]
 800ff1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d003      	beq.n	800ff2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 f9fa 	bl	801031c <HAL_TIM_IC_CaptureCallback>
 800ff28:	e005      	b.n	800ff36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f9ec 	bl	8010308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 f9fd 	bl	8010330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	691b      	ldr	r3, [r3, #16]
 800ff42:	f003 0308 	and.w	r3, r3, #8
 800ff46:	2b08      	cmp	r3, #8
 800ff48:	d122      	bne.n	800ff90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	f003 0308 	and.w	r3, r3, #8
 800ff54:	2b08      	cmp	r3, #8
 800ff56:	d11b      	bne.n	800ff90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f06f 0208 	mvn.w	r2, #8
 800ff60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2204      	movs	r2, #4
 800ff66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	69db      	ldr	r3, [r3, #28]
 800ff6e:	f003 0303 	and.w	r3, r3, #3
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d003      	beq.n	800ff7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 f9d0 	bl	801031c <HAL_TIM_IC_CaptureCallback>
 800ff7c:	e005      	b.n	800ff8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 f9c2 	bl	8010308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 f9d3 	bl	8010330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	691b      	ldr	r3, [r3, #16]
 800ff96:	f003 0310 	and.w	r3, r3, #16
 800ff9a:	2b10      	cmp	r3, #16
 800ff9c:	d122      	bne.n	800ffe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	f003 0310 	and.w	r3, r3, #16
 800ffa8:	2b10      	cmp	r3, #16
 800ffaa:	d11b      	bne.n	800ffe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f06f 0210 	mvn.w	r2, #16
 800ffb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2208      	movs	r2, #8
 800ffba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d003      	beq.n	800ffd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 f9a6 	bl	801031c <HAL_TIM_IC_CaptureCallback>
 800ffd0:	e005      	b.n	800ffde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f998 	bl	8010308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 f9a9 	bl	8010330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	691b      	ldr	r3, [r3, #16]
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d10e      	bne.n	8010010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	f003 0301 	and.w	r3, r3, #1
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d107      	bne.n	8010010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f06f 0201 	mvn.w	r2, #1
 8010008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f972 	bl	80102f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801001a:	2b80      	cmp	r3, #128	; 0x80
 801001c:	d10e      	bne.n	801003c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010028:	2b80      	cmp	r3, #128	; 0x80
 801002a:	d107      	bne.n	801003c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 febc 	bl	8010db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	691b      	ldr	r3, [r3, #16]
 8010042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801004a:	d10e      	bne.n	801006a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010056:	2b80      	cmp	r3, #128	; 0x80
 8010058:	d107      	bne.n	801006a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 feaf 	bl	8010dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	691b      	ldr	r3, [r3, #16]
 8010070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010074:	2b40      	cmp	r3, #64	; 0x40
 8010076:	d10e      	bne.n	8010096 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010082:	2b40      	cmp	r3, #64	; 0x40
 8010084:	d107      	bne.n	8010096 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801008e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 f961 	bl	8010358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	691b      	ldr	r3, [r3, #16]
 801009c:	f003 0320 	and.w	r3, r3, #32
 80100a0:	2b20      	cmp	r3, #32
 80100a2:	d10e      	bne.n	80100c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	f003 0320 	and.w	r3, r3, #32
 80100ae:	2b20      	cmp	r3, #32
 80100b0:	d107      	bne.n	80100c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f06f 0220 	mvn.w	r2, #32
 80100ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fe6f 	bl	8010da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80100c2:	bf00      	nop
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
	...

080100cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80100d8:	2300      	movs	r3, #0
 80100da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	d101      	bne.n	80100ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80100e6:	2302      	movs	r3, #2
 80100e8:	e0ff      	b.n	80102ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2201      	movs	r2, #1
 80100ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b14      	cmp	r3, #20
 80100f6:	f200 80f0 	bhi.w	80102da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80100fa:	a201      	add	r2, pc, #4	; (adr r2, 8010100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80100fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010100:	08010155 	.word	0x08010155
 8010104:	080102db 	.word	0x080102db
 8010108:	080102db 	.word	0x080102db
 801010c:	080102db 	.word	0x080102db
 8010110:	08010195 	.word	0x08010195
 8010114:	080102db 	.word	0x080102db
 8010118:	080102db 	.word	0x080102db
 801011c:	080102db 	.word	0x080102db
 8010120:	080101d7 	.word	0x080101d7
 8010124:	080102db 	.word	0x080102db
 8010128:	080102db 	.word	0x080102db
 801012c:	080102db 	.word	0x080102db
 8010130:	08010217 	.word	0x08010217
 8010134:	080102db 	.word	0x080102db
 8010138:	080102db 	.word	0x080102db
 801013c:	080102db 	.word	0x080102db
 8010140:	08010259 	.word	0x08010259
 8010144:	080102db 	.word	0x080102db
 8010148:	080102db 	.word	0x080102db
 801014c:	080102db 	.word	0x080102db
 8010150:	08010299 	.word	0x08010299
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	68b9      	ldr	r1, [r7, #8]
 801015a:	4618      	mov	r0, r3
 801015c:	f000 fa88 	bl	8010670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	699a      	ldr	r2, [r3, #24]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f042 0208 	orr.w	r2, r2, #8
 801016e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	699a      	ldr	r2, [r3, #24]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f022 0204 	bic.w	r2, r2, #4
 801017e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	6999      	ldr	r1, [r3, #24]
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	691a      	ldr	r2, [r3, #16]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	430a      	orrs	r2, r1
 8010190:	619a      	str	r2, [r3, #24]
      break;
 8010192:	e0a5      	b.n	80102e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	68b9      	ldr	r1, [r7, #8]
 801019a:	4618      	mov	r0, r3
 801019c:	f000 faf8 	bl	8010790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	699a      	ldr	r2, [r3, #24]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	699a      	ldr	r2, [r3, #24]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	6999      	ldr	r1, [r3, #24]
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	691b      	ldr	r3, [r3, #16]
 80101ca:	021a      	lsls	r2, r3, #8
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	430a      	orrs	r2, r1
 80101d2:	619a      	str	r2, [r3, #24]
      break;
 80101d4:	e084      	b.n	80102e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	68b9      	ldr	r1, [r7, #8]
 80101dc:	4618      	mov	r0, r3
 80101de:	f000 fb61 	bl	80108a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	69da      	ldr	r2, [r3, #28]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f042 0208 	orr.w	r2, r2, #8
 80101f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	69da      	ldr	r2, [r3, #28]
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f022 0204 	bic.w	r2, r2, #4
 8010200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	69d9      	ldr	r1, [r3, #28]
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	691a      	ldr	r2, [r3, #16]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	430a      	orrs	r2, r1
 8010212:	61da      	str	r2, [r3, #28]
      break;
 8010214:	e064      	b.n	80102e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	68b9      	ldr	r1, [r7, #8]
 801021c:	4618      	mov	r0, r3
 801021e:	f000 fbc9 	bl	80109b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	69da      	ldr	r2, [r3, #28]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	69da      	ldr	r2, [r3, #28]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	69d9      	ldr	r1, [r3, #28]
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	691b      	ldr	r3, [r3, #16]
 801024c:	021a      	lsls	r2, r3, #8
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	430a      	orrs	r2, r1
 8010254:	61da      	str	r2, [r3, #28]
      break;
 8010256:	e043      	b.n	80102e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68b9      	ldr	r1, [r7, #8]
 801025e:	4618      	mov	r0, r3
 8010260:	f000 fc12 	bl	8010a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f042 0208 	orr.w	r2, r2, #8
 8010272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f022 0204 	bic.w	r2, r2, #4
 8010282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	691a      	ldr	r2, [r3, #16]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	430a      	orrs	r2, r1
 8010294:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010296:	e023      	b.n	80102e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	68b9      	ldr	r1, [r7, #8]
 801029e:	4618      	mov	r0, r3
 80102a0:	f000 fc56 	bl	8010b50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80102b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80102c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	021a      	lsls	r2, r3, #8
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	430a      	orrs	r2, r1
 80102d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80102d8:	e002      	b.n	80102e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80102da:	2301      	movs	r3, #1
 80102dc:	75fb      	strb	r3, [r7, #23]
      break;
 80102de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2200      	movs	r2, #0
 80102e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80102e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3718      	adds	r7, #24
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop

080102f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010310:	bf00      	nop
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010324:	bf00      	nop
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010338:	bf00      	nop
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010374:	bf00      	nop
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801038c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	429a      	cmp	r2, r3
 8010396:	d107      	bne.n	80103a8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2201      	movs	r2, #1
 801039c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2201      	movs	r2, #1
 80103a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103a6:	e02a      	b.n	80103fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d107      	bne.n	80103c2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2202      	movs	r2, #2
 80103b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2201      	movs	r2, #1
 80103bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103c0:	e01d      	b.n	80103fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d107      	bne.n	80103dc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2204      	movs	r2, #4
 80103d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2201      	movs	r2, #1
 80103d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103da:	e010      	b.n	80103fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d107      	bne.n	80103f6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2208      	movs	r2, #8
 80103ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2201      	movs	r2, #1
 80103f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103f4:	e003      	b.n	80103fe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2201      	movs	r2, #1
 80103fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f7ff ffb4 	bl	801036c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2200      	movs	r2, #0
 8010408:	771a      	strb	r2, [r3, #28]
}
 801040a:	bf00      	nop
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801041e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	429a      	cmp	r2, r3
 8010428:	d10b      	bne.n	8010442 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2201      	movs	r2, #1
 801042e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	69db      	ldr	r3, [r3, #28]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d136      	bne.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2201      	movs	r2, #1
 801043c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010440:	e031      	b.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	429a      	cmp	r2, r3
 801044a:	d10b      	bne.n	8010464 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2202      	movs	r2, #2
 8010450:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	69db      	ldr	r3, [r3, #28]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d125      	bne.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2201      	movs	r2, #1
 801045e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010462:	e020      	b.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	429a      	cmp	r2, r3
 801046c:	d10b      	bne.n	8010486 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2204      	movs	r2, #4
 8010472:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	69db      	ldr	r3, [r3, #28]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d114      	bne.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2201      	movs	r2, #1
 8010480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010484:	e00f      	b.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	429a      	cmp	r2, r3
 801048e:	d10a      	bne.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2208      	movs	r2, #8
 8010494:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	69db      	ldr	r3, [r3, #28]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d103      	bne.n	80104a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2201      	movs	r2, #1
 80104a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f7ff ff42 	bl	8010330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2200      	movs	r2, #0
 80104b0:	771a      	strb	r2, [r3, #28]
}
 80104b2:	bf00      	nop
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b084      	sub	sp, #16
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d103      	bne.n	80104da <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2201      	movs	r2, #1
 80104d6:	771a      	strb	r2, [r3, #28]
 80104d8:	e019      	b.n	801050e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d103      	bne.n	80104ec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2202      	movs	r2, #2
 80104e8:	771a      	strb	r2, [r3, #28]
 80104ea:	e010      	b.n	801050e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d103      	bne.n	80104fe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2204      	movs	r2, #4
 80104fa:	771a      	strb	r2, [r3, #28]
 80104fc:	e007      	b.n	801050e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	429a      	cmp	r2, r3
 8010506:	d102      	bne.n	801050e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2208      	movs	r2, #8
 801050c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f7ff ff18 	bl	8010344 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	771a      	strb	r2, [r3, #28]
}
 801051a:	bf00      	nop
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
	...

08010524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a44      	ldr	r2, [pc, #272]	; (8010648 <TIM_Base_SetConfig+0x124>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d013      	beq.n	8010564 <TIM_Base_SetConfig+0x40>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010542:	d00f      	beq.n	8010564 <TIM_Base_SetConfig+0x40>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4a41      	ldr	r2, [pc, #260]	; (801064c <TIM_Base_SetConfig+0x128>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d00b      	beq.n	8010564 <TIM_Base_SetConfig+0x40>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a40      	ldr	r2, [pc, #256]	; (8010650 <TIM_Base_SetConfig+0x12c>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d007      	beq.n	8010564 <TIM_Base_SetConfig+0x40>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4a3f      	ldr	r2, [pc, #252]	; (8010654 <TIM_Base_SetConfig+0x130>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d003      	beq.n	8010564 <TIM_Base_SetConfig+0x40>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	4a3e      	ldr	r2, [pc, #248]	; (8010658 <TIM_Base_SetConfig+0x134>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d108      	bne.n	8010576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801056a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	4313      	orrs	r3, r2
 8010574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4a33      	ldr	r2, [pc, #204]	; (8010648 <TIM_Base_SetConfig+0x124>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d027      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010584:	d023      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4a30      	ldr	r2, [pc, #192]	; (801064c <TIM_Base_SetConfig+0x128>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d01f      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a2f      	ldr	r2, [pc, #188]	; (8010650 <TIM_Base_SetConfig+0x12c>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d01b      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4a2e      	ldr	r2, [pc, #184]	; (8010654 <TIM_Base_SetConfig+0x130>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d017      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	4a2d      	ldr	r2, [pc, #180]	; (8010658 <TIM_Base_SetConfig+0x134>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d013      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4a2c      	ldr	r2, [pc, #176]	; (801065c <TIM_Base_SetConfig+0x138>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d00f      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4a2b      	ldr	r2, [pc, #172]	; (8010660 <TIM_Base_SetConfig+0x13c>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d00b      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4a2a      	ldr	r2, [pc, #168]	; (8010664 <TIM_Base_SetConfig+0x140>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d007      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	4a29      	ldr	r2, [pc, #164]	; (8010668 <TIM_Base_SetConfig+0x144>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d003      	beq.n	80105ce <TIM_Base_SetConfig+0xaa>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4a28      	ldr	r2, [pc, #160]	; (801066c <TIM_Base_SetConfig+0x148>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d108      	bne.n	80105e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	4313      	orrs	r3, r2
 80105de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	695b      	ldr	r3, [r3, #20]
 80105ea:	4313      	orrs	r3, r2
 80105ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	689a      	ldr	r2, [r3, #8]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	4a10      	ldr	r2, [pc, #64]	; (8010648 <TIM_Base_SetConfig+0x124>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d00f      	beq.n	801062c <TIM_Base_SetConfig+0x108>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4a12      	ldr	r2, [pc, #72]	; (8010658 <TIM_Base_SetConfig+0x134>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d00b      	beq.n	801062c <TIM_Base_SetConfig+0x108>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	4a11      	ldr	r2, [pc, #68]	; (801065c <TIM_Base_SetConfig+0x138>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d007      	beq.n	801062c <TIM_Base_SetConfig+0x108>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	4a10      	ldr	r2, [pc, #64]	; (8010660 <TIM_Base_SetConfig+0x13c>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d003      	beq.n	801062c <TIM_Base_SetConfig+0x108>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	4a0f      	ldr	r2, [pc, #60]	; (8010664 <TIM_Base_SetConfig+0x140>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d103      	bne.n	8010634 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	691a      	ldr	r2, [r3, #16]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2201      	movs	r2, #1
 8010638:	615a      	str	r2, [r3, #20]
}
 801063a:	bf00      	nop
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	40010000 	.word	0x40010000
 801064c:	40000400 	.word	0x40000400
 8010650:	40000800 	.word	0x40000800
 8010654:	40000c00 	.word	0x40000c00
 8010658:	40010400 	.word	0x40010400
 801065c:	40014000 	.word	0x40014000
 8010660:	40014400 	.word	0x40014400
 8010664:	40014800 	.word	0x40014800
 8010668:	4000e000 	.word	0x4000e000
 801066c:	4000e400 	.word	0x4000e400

08010670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010670:	b480      	push	{r7}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a1b      	ldr	r3, [r3, #32]
 801067e:	f023 0201 	bic.w	r2, r3, #1
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	699b      	ldr	r3, [r3, #24]
 8010696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	4b37      	ldr	r3, [pc, #220]	; (8010778 <TIM_OC1_SetConfig+0x108>)
 801069c:	4013      	ands	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f023 0303 	bic.w	r3, r3, #3
 80106a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	f023 0302 	bic.w	r3, r3, #2
 80106b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	689b      	ldr	r3, [r3, #8]
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	4313      	orrs	r3, r2
 80106c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	4a2d      	ldr	r2, [pc, #180]	; (801077c <TIM_OC1_SetConfig+0x10c>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d00f      	beq.n	80106ec <TIM_OC1_SetConfig+0x7c>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4a2c      	ldr	r2, [pc, #176]	; (8010780 <TIM_OC1_SetConfig+0x110>)
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d00b      	beq.n	80106ec <TIM_OC1_SetConfig+0x7c>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	4a2b      	ldr	r2, [pc, #172]	; (8010784 <TIM_OC1_SetConfig+0x114>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d007      	beq.n	80106ec <TIM_OC1_SetConfig+0x7c>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a2a      	ldr	r2, [pc, #168]	; (8010788 <TIM_OC1_SetConfig+0x118>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d003      	beq.n	80106ec <TIM_OC1_SetConfig+0x7c>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	4a29      	ldr	r2, [pc, #164]	; (801078c <TIM_OC1_SetConfig+0x11c>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d10c      	bne.n	8010706 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	f023 0308 	bic.w	r3, r3, #8
 80106f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	697a      	ldr	r2, [r7, #20]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	f023 0304 	bic.w	r3, r3, #4
 8010704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4a1c      	ldr	r2, [pc, #112]	; (801077c <TIM_OC1_SetConfig+0x10c>)
 801070a:	4293      	cmp	r3, r2
 801070c:	d00f      	beq.n	801072e <TIM_OC1_SetConfig+0xbe>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4a1b      	ldr	r2, [pc, #108]	; (8010780 <TIM_OC1_SetConfig+0x110>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d00b      	beq.n	801072e <TIM_OC1_SetConfig+0xbe>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4a1a      	ldr	r2, [pc, #104]	; (8010784 <TIM_OC1_SetConfig+0x114>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d007      	beq.n	801072e <TIM_OC1_SetConfig+0xbe>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4a19      	ldr	r2, [pc, #100]	; (8010788 <TIM_OC1_SetConfig+0x118>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d003      	beq.n	801072e <TIM_OC1_SetConfig+0xbe>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	4a18      	ldr	r2, [pc, #96]	; (801078c <TIM_OC1_SetConfig+0x11c>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d111      	bne.n	8010752 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801073c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	695b      	ldr	r3, [r3, #20]
 8010742:	693a      	ldr	r2, [r7, #16]
 8010744:	4313      	orrs	r3, r2
 8010746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	699b      	ldr	r3, [r3, #24]
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	4313      	orrs	r3, r2
 8010750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	693a      	ldr	r2, [r7, #16]
 8010756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	685a      	ldr	r2, [r3, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	697a      	ldr	r2, [r7, #20]
 801076a:	621a      	str	r2, [r3, #32]
}
 801076c:	bf00      	nop
 801076e:	371c      	adds	r7, #28
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr
 8010778:	fffeff8f 	.word	0xfffeff8f
 801077c:	40010000 	.word	0x40010000
 8010780:	40010400 	.word	0x40010400
 8010784:	40014000 	.word	0x40014000
 8010788:	40014400 	.word	0x40014400
 801078c:	40014800 	.word	0x40014800

08010790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010790:	b480      	push	{r7}
 8010792:	b087      	sub	sp, #28
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6a1b      	ldr	r3, [r3, #32]
 801079e:	f023 0210 	bic.w	r2, r3, #16
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a1b      	ldr	r3, [r3, #32]
 80107aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	699b      	ldr	r3, [r3, #24]
 80107b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	4b34      	ldr	r3, [pc, #208]	; (801088c <TIM_OC2_SetConfig+0xfc>)
 80107bc:	4013      	ands	r3, r2
 80107be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	021b      	lsls	r3, r3, #8
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	4313      	orrs	r3, r2
 80107d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	f023 0320 	bic.w	r3, r3, #32
 80107da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	011b      	lsls	r3, r3, #4
 80107e2:	697a      	ldr	r2, [r7, #20]
 80107e4:	4313      	orrs	r3, r2
 80107e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	4a29      	ldr	r2, [pc, #164]	; (8010890 <TIM_OC2_SetConfig+0x100>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d003      	beq.n	80107f8 <TIM_OC2_SetConfig+0x68>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4a28      	ldr	r2, [pc, #160]	; (8010894 <TIM_OC2_SetConfig+0x104>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d10d      	bne.n	8010814 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	011b      	lsls	r3, r3, #4
 8010806:	697a      	ldr	r2, [r7, #20]
 8010808:	4313      	orrs	r3, r2
 801080a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4a1e      	ldr	r2, [pc, #120]	; (8010890 <TIM_OC2_SetConfig+0x100>)
 8010818:	4293      	cmp	r3, r2
 801081a:	d00f      	beq.n	801083c <TIM_OC2_SetConfig+0xac>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4a1d      	ldr	r2, [pc, #116]	; (8010894 <TIM_OC2_SetConfig+0x104>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d00b      	beq.n	801083c <TIM_OC2_SetConfig+0xac>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	4a1c      	ldr	r2, [pc, #112]	; (8010898 <TIM_OC2_SetConfig+0x108>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d007      	beq.n	801083c <TIM_OC2_SetConfig+0xac>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	4a1b      	ldr	r2, [pc, #108]	; (801089c <TIM_OC2_SetConfig+0x10c>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d003      	beq.n	801083c <TIM_OC2_SetConfig+0xac>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	4a1a      	ldr	r2, [pc, #104]	; (80108a0 <TIM_OC2_SetConfig+0x110>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d113      	bne.n	8010864 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801084a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	695b      	ldr	r3, [r3, #20]
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	693a      	ldr	r2, [r7, #16]
 8010854:	4313      	orrs	r3, r2
 8010856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	699b      	ldr	r3, [r3, #24]
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	693a      	ldr	r2, [r7, #16]
 8010860:	4313      	orrs	r3, r2
 8010862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	693a      	ldr	r2, [r7, #16]
 8010868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	685a      	ldr	r2, [r3, #4]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	697a      	ldr	r2, [r7, #20]
 801087c:	621a      	str	r2, [r3, #32]
}
 801087e:	bf00      	nop
 8010880:	371c      	adds	r7, #28
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	feff8fff 	.word	0xfeff8fff
 8010890:	40010000 	.word	0x40010000
 8010894:	40010400 	.word	0x40010400
 8010898:	40014000 	.word	0x40014000
 801089c:	40014400 	.word	0x40014400
 80108a0:	40014800 	.word	0x40014800

080108a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b087      	sub	sp, #28
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a1b      	ldr	r3, [r3, #32]
 80108be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	69db      	ldr	r3, [r3, #28]
 80108ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	4b33      	ldr	r3, [pc, #204]	; (801099c <TIM_OC3_SetConfig+0xf8>)
 80108d0:	4013      	ands	r3, r2
 80108d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f023 0303 	bic.w	r3, r3, #3
 80108da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	4313      	orrs	r3, r2
 80108e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80108ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	021b      	lsls	r3, r3, #8
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	4313      	orrs	r3, r2
 80108f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4a28      	ldr	r2, [pc, #160]	; (80109a0 <TIM_OC3_SetConfig+0xfc>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d003      	beq.n	801090a <TIM_OC3_SetConfig+0x66>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4a27      	ldr	r2, [pc, #156]	; (80109a4 <TIM_OC3_SetConfig+0x100>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d10d      	bne.n	8010926 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	021b      	lsls	r3, r3, #8
 8010918:	697a      	ldr	r2, [r7, #20]
 801091a:	4313      	orrs	r3, r2
 801091c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	4a1d      	ldr	r2, [pc, #116]	; (80109a0 <TIM_OC3_SetConfig+0xfc>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d00f      	beq.n	801094e <TIM_OC3_SetConfig+0xaa>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4a1c      	ldr	r2, [pc, #112]	; (80109a4 <TIM_OC3_SetConfig+0x100>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d00b      	beq.n	801094e <TIM_OC3_SetConfig+0xaa>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4a1b      	ldr	r2, [pc, #108]	; (80109a8 <TIM_OC3_SetConfig+0x104>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d007      	beq.n	801094e <TIM_OC3_SetConfig+0xaa>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4a1a      	ldr	r2, [pc, #104]	; (80109ac <TIM_OC3_SetConfig+0x108>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d003      	beq.n	801094e <TIM_OC3_SetConfig+0xaa>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4a19      	ldr	r2, [pc, #100]	; (80109b0 <TIM_OC3_SetConfig+0x10c>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d113      	bne.n	8010976 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801095c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	695b      	ldr	r3, [r3, #20]
 8010962:	011b      	lsls	r3, r3, #4
 8010964:	693a      	ldr	r2, [r7, #16]
 8010966:	4313      	orrs	r3, r2
 8010968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	699b      	ldr	r3, [r3, #24]
 801096e:	011b      	lsls	r3, r3, #4
 8010970:	693a      	ldr	r2, [r7, #16]
 8010972:	4313      	orrs	r3, r2
 8010974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	693a      	ldr	r2, [r7, #16]
 801097a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	685a      	ldr	r2, [r3, #4]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	697a      	ldr	r2, [r7, #20]
 801098e:	621a      	str	r2, [r3, #32]
}
 8010990:	bf00      	nop
 8010992:	371c      	adds	r7, #28
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr
 801099c:	fffeff8f 	.word	0xfffeff8f
 80109a0:	40010000 	.word	0x40010000
 80109a4:	40010400 	.word	0x40010400
 80109a8:	40014000 	.word	0x40014000
 80109ac:	40014400 	.word	0x40014400
 80109b0:	40014800 	.word	0x40014800

080109b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b087      	sub	sp, #28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6a1b      	ldr	r3, [r3, #32]
 80109c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6a1b      	ldr	r3, [r3, #32]
 80109ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	69db      	ldr	r3, [r3, #28]
 80109da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	4b24      	ldr	r3, [pc, #144]	; (8010a70 <TIM_OC4_SetConfig+0xbc>)
 80109e0:	4013      	ands	r3, r2
 80109e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	021b      	lsls	r3, r3, #8
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	4313      	orrs	r3, r2
 80109f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80109fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	689b      	ldr	r3, [r3, #8]
 8010a04:	031b      	lsls	r3, r3, #12
 8010a06:	693a      	ldr	r2, [r7, #16]
 8010a08:	4313      	orrs	r3, r2
 8010a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	4a19      	ldr	r2, [pc, #100]	; (8010a74 <TIM_OC4_SetConfig+0xc0>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d00f      	beq.n	8010a34 <TIM_OC4_SetConfig+0x80>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	4a18      	ldr	r2, [pc, #96]	; (8010a78 <TIM_OC4_SetConfig+0xc4>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d00b      	beq.n	8010a34 <TIM_OC4_SetConfig+0x80>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	4a17      	ldr	r2, [pc, #92]	; (8010a7c <TIM_OC4_SetConfig+0xc8>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d007      	beq.n	8010a34 <TIM_OC4_SetConfig+0x80>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4a16      	ldr	r2, [pc, #88]	; (8010a80 <TIM_OC4_SetConfig+0xcc>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d003      	beq.n	8010a34 <TIM_OC4_SetConfig+0x80>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4a15      	ldr	r2, [pc, #84]	; (8010a84 <TIM_OC4_SetConfig+0xd0>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d109      	bne.n	8010a48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	695b      	ldr	r3, [r3, #20]
 8010a40:	019b      	lsls	r3, r3, #6
 8010a42:	697a      	ldr	r2, [r7, #20]
 8010a44:	4313      	orrs	r3, r2
 8010a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	697a      	ldr	r2, [r7, #20]
 8010a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	685a      	ldr	r2, [r3, #4]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	693a      	ldr	r2, [r7, #16]
 8010a60:	621a      	str	r2, [r3, #32]
}
 8010a62:	bf00      	nop
 8010a64:	371c      	adds	r7, #28
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	feff8fff 	.word	0xfeff8fff
 8010a74:	40010000 	.word	0x40010000
 8010a78:	40010400 	.word	0x40010400
 8010a7c:	40014000 	.word	0x40014000
 8010a80:	40014400 	.word	0x40014400
 8010a84:	40014800 	.word	0x40014800

08010a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6a1b      	ldr	r3, [r3, #32]
 8010a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6a1b      	ldr	r3, [r3, #32]
 8010aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010ab0:	68fa      	ldr	r2, [r7, #12]
 8010ab2:	4b21      	ldr	r3, [pc, #132]	; (8010b38 <TIM_OC5_SetConfig+0xb0>)
 8010ab4:	4013      	ands	r3, r2
 8010ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	041b      	lsls	r3, r3, #16
 8010ad0:	693a      	ldr	r2, [r7, #16]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	4a18      	ldr	r2, [pc, #96]	; (8010b3c <TIM_OC5_SetConfig+0xb4>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d00f      	beq.n	8010afe <TIM_OC5_SetConfig+0x76>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4a17      	ldr	r2, [pc, #92]	; (8010b40 <TIM_OC5_SetConfig+0xb8>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d00b      	beq.n	8010afe <TIM_OC5_SetConfig+0x76>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	4a16      	ldr	r2, [pc, #88]	; (8010b44 <TIM_OC5_SetConfig+0xbc>)
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d007      	beq.n	8010afe <TIM_OC5_SetConfig+0x76>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4a15      	ldr	r2, [pc, #84]	; (8010b48 <TIM_OC5_SetConfig+0xc0>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d003      	beq.n	8010afe <TIM_OC5_SetConfig+0x76>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	4a14      	ldr	r2, [pc, #80]	; (8010b4c <TIM_OC5_SetConfig+0xc4>)
 8010afa:	4293      	cmp	r3, r2
 8010afc:	d109      	bne.n	8010b12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	695b      	ldr	r3, [r3, #20]
 8010b0a:	021b      	lsls	r3, r3, #8
 8010b0c:	697a      	ldr	r2, [r7, #20]
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	697a      	ldr	r2, [r7, #20]
 8010b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	68fa      	ldr	r2, [r7, #12]
 8010b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	685a      	ldr	r2, [r3, #4]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	693a      	ldr	r2, [r7, #16]
 8010b2a:	621a      	str	r2, [r3, #32]
}
 8010b2c:	bf00      	nop
 8010b2e:	371c      	adds	r7, #28
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr
 8010b38:	fffeff8f 	.word	0xfffeff8f
 8010b3c:	40010000 	.word	0x40010000
 8010b40:	40010400 	.word	0x40010400
 8010b44:	40014000 	.word	0x40014000
 8010b48:	40014400 	.word	0x40014400
 8010b4c:	40014800 	.word	0x40014800

08010b50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b087      	sub	sp, #28
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6a1b      	ldr	r3, [r3, #32]
 8010b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6a1b      	ldr	r3, [r3, #32]
 8010b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	4b22      	ldr	r3, [pc, #136]	; (8010c04 <TIM_OC6_SetConfig+0xb4>)
 8010b7c:	4013      	ands	r3, r2
 8010b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	021b      	lsls	r3, r3, #8
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	4313      	orrs	r3, r2
 8010b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	051b      	lsls	r3, r3, #20
 8010b9a:	693a      	ldr	r2, [r7, #16]
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	4a19      	ldr	r2, [pc, #100]	; (8010c08 <TIM_OC6_SetConfig+0xb8>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d00f      	beq.n	8010bc8 <TIM_OC6_SetConfig+0x78>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4a18      	ldr	r2, [pc, #96]	; (8010c0c <TIM_OC6_SetConfig+0xbc>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d00b      	beq.n	8010bc8 <TIM_OC6_SetConfig+0x78>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4a17      	ldr	r2, [pc, #92]	; (8010c10 <TIM_OC6_SetConfig+0xc0>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d007      	beq.n	8010bc8 <TIM_OC6_SetConfig+0x78>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4a16      	ldr	r2, [pc, #88]	; (8010c14 <TIM_OC6_SetConfig+0xc4>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d003      	beq.n	8010bc8 <TIM_OC6_SetConfig+0x78>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4a15      	ldr	r2, [pc, #84]	; (8010c18 <TIM_OC6_SetConfig+0xc8>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d109      	bne.n	8010bdc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	695b      	ldr	r3, [r3, #20]
 8010bd4:	029b      	lsls	r3, r3, #10
 8010bd6:	697a      	ldr	r2, [r7, #20]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	697a      	ldr	r2, [r7, #20]
 8010be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	693a      	ldr	r2, [r7, #16]
 8010bf4:	621a      	str	r2, [r3, #32]
}
 8010bf6:	bf00      	nop
 8010bf8:	371c      	adds	r7, #28
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	feff8fff 	.word	0xfeff8fff
 8010c08:	40010000 	.word	0x40010000
 8010c0c:	40010400 	.word	0x40010400
 8010c10:	40014000 	.word	0x40014000
 8010c14:	40014400 	.word	0x40014400
 8010c18:	40014800 	.word	0x40014800

08010c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b087      	sub	sp, #28
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	f003 031f 	and.w	r3, r3, #31
 8010c2e:	2201      	movs	r2, #1
 8010c30:	fa02 f303 	lsl.w	r3, r2, r3
 8010c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6a1a      	ldr	r2, [r3, #32]
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	43db      	mvns	r3, r3
 8010c3e:	401a      	ands	r2, r3
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	6a1a      	ldr	r2, [r3, #32]
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	f003 031f 	and.w	r3, r3, #31
 8010c4e:	6879      	ldr	r1, [r7, #4]
 8010c50:	fa01 f303 	lsl.w	r3, r1, r3
 8010c54:	431a      	orrs	r2, r3
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	621a      	str	r2, [r3, #32]
}
 8010c5a:	bf00      	nop
 8010c5c:	371c      	adds	r7, #28
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
	...

08010c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b085      	sub	sp, #20
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d101      	bne.n	8010c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c7c:	2302      	movs	r3, #2
 8010c7e:	e077      	b.n	8010d70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a35      	ldr	r2, [pc, #212]	; (8010d7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d004      	beq.n	8010cb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4a34      	ldr	r2, [pc, #208]	; (8010d80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d108      	bne.n	8010cc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010cba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ccc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	68fa      	ldr	r2, [r7, #12]
 8010cde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4a25      	ldr	r2, [pc, #148]	; (8010d7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d02c      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cf2:	d027      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	4a22      	ldr	r2, [pc, #136]	; (8010d84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d022      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a21      	ldr	r2, [pc, #132]	; (8010d88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d01d      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4a1f      	ldr	r2, [pc, #124]	; (8010d8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d018      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	4a1a      	ldr	r2, [pc, #104]	; (8010d80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d013      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4a1b      	ldr	r2, [pc, #108]	; (8010d90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d00e      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a1a      	ldr	r2, [pc, #104]	; (8010d94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d009      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a18      	ldr	r2, [pc, #96]	; (8010d98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d004      	beq.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	4a17      	ldr	r2, [pc, #92]	; (8010d9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010d40:	4293      	cmp	r3, r2
 8010d42:	d10c      	bne.n	8010d5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	689b      	ldr	r3, [r3, #8]
 8010d50:	68ba      	ldr	r2, [r7, #8]
 8010d52:	4313      	orrs	r3, r2
 8010d54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68ba      	ldr	r2, [r7, #8]
 8010d5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2201      	movs	r2, #1
 8010d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010d6e:	2300      	movs	r3, #0
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3714      	adds	r7, #20
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr
 8010d7c:	40010000 	.word	0x40010000
 8010d80:	40010400 	.word	0x40010400
 8010d84:	40000400 	.word	0x40000400
 8010d88:	40000800 	.word	0x40000800
 8010d8c:	40000c00 	.word	0x40000c00
 8010d90:	40001800 	.word	0x40001800
 8010d94:	40014000 	.word	0x40014000
 8010d98:	4000e000 	.word	0x4000e000
 8010d9c:	4000e400 	.word	0x4000e400

08010da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b083      	sub	sp, #12
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010da8:	bf00      	nop
 8010daa:	370c      	adds	r7, #12
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010dbc:	bf00      	nop
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010dd0:	bf00      	nop
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d101      	bne.n	8010dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010dea:	2301      	movs	r3, #1
 8010dec:	e042      	b.n	8010e74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d106      	bne.n	8010e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7f2 fc21 	bl	8003648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2224      	movs	r2, #36	; 0x24
 8010e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f022 0201 	bic.w	r2, r2, #1
 8010e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f000 f82c 	bl	8010e7c <UART_SetConfig>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d101      	bne.n	8010e2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	e022      	b.n	8010e74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 fe8c 	bl	8011b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	685a      	ldr	r2, [r3, #4]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	689a      	ldr	r2, [r3, #8]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f042 0201 	orr.w	r2, r2, #1
 8010e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 ff13 	bl	8011c98 <UART_CheckIdleState>
 8010e72:	4603      	mov	r3, r0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e80:	b092      	sub	sp, #72	; 0x48
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e86:	2300      	movs	r3, #0
 8010e88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	689a      	ldr	r2, [r3, #8]
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	691b      	ldr	r3, [r3, #16]
 8010e94:	431a      	orrs	r2, r3
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	431a      	orrs	r2, r3
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	69db      	ldr	r3, [r3, #28]
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	4bbe      	ldr	r3, [pc, #760]	; (80111a4 <UART_SetConfig+0x328>)
 8010eac:	4013      	ands	r3, r2
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	6812      	ldr	r2, [r2, #0]
 8010eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010eb4:	430b      	orrs	r3, r1
 8010eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	68da      	ldr	r2, [r3, #12]
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	430a      	orrs	r2, r1
 8010ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	699b      	ldr	r3, [r3, #24]
 8010ed2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4ab3      	ldr	r2, [pc, #716]	; (80111a8 <UART_SetConfig+0x32c>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d004      	beq.n	8010ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	6a1b      	ldr	r3, [r3, #32]
 8010ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	689a      	ldr	r2, [r3, #8]
 8010eee:	4baf      	ldr	r3, [pc, #700]	; (80111ac <UART_SetConfig+0x330>)
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	697a      	ldr	r2, [r7, #20]
 8010ef4:	6812      	ldr	r2, [r2, #0]
 8010ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ef8:	430b      	orrs	r3, r1
 8010efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f02:	f023 010f 	bic.w	r1, r3, #15
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	430a      	orrs	r2, r1
 8010f10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4aa6      	ldr	r2, [pc, #664]	; (80111b0 <UART_SetConfig+0x334>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d177      	bne.n	801100c <UART_SetConfig+0x190>
 8010f1c:	4ba5      	ldr	r3, [pc, #660]	; (80111b4 <UART_SetConfig+0x338>)
 8010f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f24:	2b28      	cmp	r3, #40	; 0x28
 8010f26:	d86d      	bhi.n	8011004 <UART_SetConfig+0x188>
 8010f28:	a201      	add	r2, pc, #4	; (adr r2, 8010f30 <UART_SetConfig+0xb4>)
 8010f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f2e:	bf00      	nop
 8010f30:	08010fd5 	.word	0x08010fd5
 8010f34:	08011005 	.word	0x08011005
 8010f38:	08011005 	.word	0x08011005
 8010f3c:	08011005 	.word	0x08011005
 8010f40:	08011005 	.word	0x08011005
 8010f44:	08011005 	.word	0x08011005
 8010f48:	08011005 	.word	0x08011005
 8010f4c:	08011005 	.word	0x08011005
 8010f50:	08010fdd 	.word	0x08010fdd
 8010f54:	08011005 	.word	0x08011005
 8010f58:	08011005 	.word	0x08011005
 8010f5c:	08011005 	.word	0x08011005
 8010f60:	08011005 	.word	0x08011005
 8010f64:	08011005 	.word	0x08011005
 8010f68:	08011005 	.word	0x08011005
 8010f6c:	08011005 	.word	0x08011005
 8010f70:	08010fe5 	.word	0x08010fe5
 8010f74:	08011005 	.word	0x08011005
 8010f78:	08011005 	.word	0x08011005
 8010f7c:	08011005 	.word	0x08011005
 8010f80:	08011005 	.word	0x08011005
 8010f84:	08011005 	.word	0x08011005
 8010f88:	08011005 	.word	0x08011005
 8010f8c:	08011005 	.word	0x08011005
 8010f90:	08010fed 	.word	0x08010fed
 8010f94:	08011005 	.word	0x08011005
 8010f98:	08011005 	.word	0x08011005
 8010f9c:	08011005 	.word	0x08011005
 8010fa0:	08011005 	.word	0x08011005
 8010fa4:	08011005 	.word	0x08011005
 8010fa8:	08011005 	.word	0x08011005
 8010fac:	08011005 	.word	0x08011005
 8010fb0:	08010ff5 	.word	0x08010ff5
 8010fb4:	08011005 	.word	0x08011005
 8010fb8:	08011005 	.word	0x08011005
 8010fbc:	08011005 	.word	0x08011005
 8010fc0:	08011005 	.word	0x08011005
 8010fc4:	08011005 	.word	0x08011005
 8010fc8:	08011005 	.word	0x08011005
 8010fcc:	08011005 	.word	0x08011005
 8010fd0:	08010ffd 	.word	0x08010ffd
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fda:	e326      	b.n	801162a <UART_SetConfig+0x7ae>
 8010fdc:	2304      	movs	r3, #4
 8010fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe2:	e322      	b.n	801162a <UART_SetConfig+0x7ae>
 8010fe4:	2308      	movs	r3, #8
 8010fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fea:	e31e      	b.n	801162a <UART_SetConfig+0x7ae>
 8010fec:	2310      	movs	r3, #16
 8010fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff2:	e31a      	b.n	801162a <UART_SetConfig+0x7ae>
 8010ff4:	2320      	movs	r3, #32
 8010ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffa:	e316      	b.n	801162a <UART_SetConfig+0x7ae>
 8010ffc:	2340      	movs	r3, #64	; 0x40
 8010ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011002:	e312      	b.n	801162a <UART_SetConfig+0x7ae>
 8011004:	2380      	movs	r3, #128	; 0x80
 8011006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100a:	e30e      	b.n	801162a <UART_SetConfig+0x7ae>
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a69      	ldr	r2, [pc, #420]	; (80111b8 <UART_SetConfig+0x33c>)
 8011012:	4293      	cmp	r3, r2
 8011014:	d130      	bne.n	8011078 <UART_SetConfig+0x1fc>
 8011016:	4b67      	ldr	r3, [pc, #412]	; (80111b4 <UART_SetConfig+0x338>)
 8011018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801101a:	f003 0307 	and.w	r3, r3, #7
 801101e:	2b05      	cmp	r3, #5
 8011020:	d826      	bhi.n	8011070 <UART_SetConfig+0x1f4>
 8011022:	a201      	add	r2, pc, #4	; (adr r2, 8011028 <UART_SetConfig+0x1ac>)
 8011024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011028:	08011041 	.word	0x08011041
 801102c:	08011049 	.word	0x08011049
 8011030:	08011051 	.word	0x08011051
 8011034:	08011059 	.word	0x08011059
 8011038:	08011061 	.word	0x08011061
 801103c:	08011069 	.word	0x08011069
 8011040:	2300      	movs	r3, #0
 8011042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011046:	e2f0      	b.n	801162a <UART_SetConfig+0x7ae>
 8011048:	2304      	movs	r3, #4
 801104a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104e:	e2ec      	b.n	801162a <UART_SetConfig+0x7ae>
 8011050:	2308      	movs	r3, #8
 8011052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011056:	e2e8      	b.n	801162a <UART_SetConfig+0x7ae>
 8011058:	2310      	movs	r3, #16
 801105a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105e:	e2e4      	b.n	801162a <UART_SetConfig+0x7ae>
 8011060:	2320      	movs	r3, #32
 8011062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011066:	e2e0      	b.n	801162a <UART_SetConfig+0x7ae>
 8011068:	2340      	movs	r3, #64	; 0x40
 801106a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106e:	e2dc      	b.n	801162a <UART_SetConfig+0x7ae>
 8011070:	2380      	movs	r3, #128	; 0x80
 8011072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011076:	e2d8      	b.n	801162a <UART_SetConfig+0x7ae>
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4a4f      	ldr	r2, [pc, #316]	; (80111bc <UART_SetConfig+0x340>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d130      	bne.n	80110e4 <UART_SetConfig+0x268>
 8011082:	4b4c      	ldr	r3, [pc, #304]	; (80111b4 <UART_SetConfig+0x338>)
 8011084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011086:	f003 0307 	and.w	r3, r3, #7
 801108a:	2b05      	cmp	r3, #5
 801108c:	d826      	bhi.n	80110dc <UART_SetConfig+0x260>
 801108e:	a201      	add	r2, pc, #4	; (adr r2, 8011094 <UART_SetConfig+0x218>)
 8011090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011094:	080110ad 	.word	0x080110ad
 8011098:	080110b5 	.word	0x080110b5
 801109c:	080110bd 	.word	0x080110bd
 80110a0:	080110c5 	.word	0x080110c5
 80110a4:	080110cd 	.word	0x080110cd
 80110a8:	080110d5 	.word	0x080110d5
 80110ac:	2300      	movs	r3, #0
 80110ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b2:	e2ba      	b.n	801162a <UART_SetConfig+0x7ae>
 80110b4:	2304      	movs	r3, #4
 80110b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ba:	e2b6      	b.n	801162a <UART_SetConfig+0x7ae>
 80110bc:	2308      	movs	r3, #8
 80110be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c2:	e2b2      	b.n	801162a <UART_SetConfig+0x7ae>
 80110c4:	2310      	movs	r3, #16
 80110c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ca:	e2ae      	b.n	801162a <UART_SetConfig+0x7ae>
 80110cc:	2320      	movs	r3, #32
 80110ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d2:	e2aa      	b.n	801162a <UART_SetConfig+0x7ae>
 80110d4:	2340      	movs	r3, #64	; 0x40
 80110d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110da:	e2a6      	b.n	801162a <UART_SetConfig+0x7ae>
 80110dc:	2380      	movs	r3, #128	; 0x80
 80110de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e2:	e2a2      	b.n	801162a <UART_SetConfig+0x7ae>
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a35      	ldr	r2, [pc, #212]	; (80111c0 <UART_SetConfig+0x344>)
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d130      	bne.n	8011150 <UART_SetConfig+0x2d4>
 80110ee:	4b31      	ldr	r3, [pc, #196]	; (80111b4 <UART_SetConfig+0x338>)
 80110f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110f2:	f003 0307 	and.w	r3, r3, #7
 80110f6:	2b05      	cmp	r3, #5
 80110f8:	d826      	bhi.n	8011148 <UART_SetConfig+0x2cc>
 80110fa:	a201      	add	r2, pc, #4	; (adr r2, 8011100 <UART_SetConfig+0x284>)
 80110fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011100:	08011119 	.word	0x08011119
 8011104:	08011121 	.word	0x08011121
 8011108:	08011129 	.word	0x08011129
 801110c:	08011131 	.word	0x08011131
 8011110:	08011139 	.word	0x08011139
 8011114:	08011141 	.word	0x08011141
 8011118:	2300      	movs	r3, #0
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111e:	e284      	b.n	801162a <UART_SetConfig+0x7ae>
 8011120:	2304      	movs	r3, #4
 8011122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011126:	e280      	b.n	801162a <UART_SetConfig+0x7ae>
 8011128:	2308      	movs	r3, #8
 801112a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112e:	e27c      	b.n	801162a <UART_SetConfig+0x7ae>
 8011130:	2310      	movs	r3, #16
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e278      	b.n	801162a <UART_SetConfig+0x7ae>
 8011138:	2320      	movs	r3, #32
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e274      	b.n	801162a <UART_SetConfig+0x7ae>
 8011140:	2340      	movs	r3, #64	; 0x40
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e270      	b.n	801162a <UART_SetConfig+0x7ae>
 8011148:	2380      	movs	r3, #128	; 0x80
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e26c      	b.n	801162a <UART_SetConfig+0x7ae>
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4a1b      	ldr	r2, [pc, #108]	; (80111c4 <UART_SetConfig+0x348>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d142      	bne.n	80111e0 <UART_SetConfig+0x364>
 801115a:	4b16      	ldr	r3, [pc, #88]	; (80111b4 <UART_SetConfig+0x338>)
 801115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801115e:	f003 0307 	and.w	r3, r3, #7
 8011162:	2b05      	cmp	r3, #5
 8011164:	d838      	bhi.n	80111d8 <UART_SetConfig+0x35c>
 8011166:	a201      	add	r2, pc, #4	; (adr r2, 801116c <UART_SetConfig+0x2f0>)
 8011168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801116c:	08011185 	.word	0x08011185
 8011170:	0801118d 	.word	0x0801118d
 8011174:	08011195 	.word	0x08011195
 8011178:	0801119d 	.word	0x0801119d
 801117c:	080111c9 	.word	0x080111c9
 8011180:	080111d1 	.word	0x080111d1
 8011184:	2300      	movs	r3, #0
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e24e      	b.n	801162a <UART_SetConfig+0x7ae>
 801118c:	2304      	movs	r3, #4
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e24a      	b.n	801162a <UART_SetConfig+0x7ae>
 8011194:	2308      	movs	r3, #8
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e246      	b.n	801162a <UART_SetConfig+0x7ae>
 801119c:	2310      	movs	r3, #16
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e242      	b.n	801162a <UART_SetConfig+0x7ae>
 80111a4:	cfff69f3 	.word	0xcfff69f3
 80111a8:	58000c00 	.word	0x58000c00
 80111ac:	11fff4ff 	.word	0x11fff4ff
 80111b0:	40011000 	.word	0x40011000
 80111b4:	58024400 	.word	0x58024400
 80111b8:	40004400 	.word	0x40004400
 80111bc:	40004800 	.word	0x40004800
 80111c0:	40004c00 	.word	0x40004c00
 80111c4:	40005000 	.word	0x40005000
 80111c8:	2320      	movs	r3, #32
 80111ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ce:	e22c      	b.n	801162a <UART_SetConfig+0x7ae>
 80111d0:	2340      	movs	r3, #64	; 0x40
 80111d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d6:	e228      	b.n	801162a <UART_SetConfig+0x7ae>
 80111d8:	2380      	movs	r3, #128	; 0x80
 80111da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111de:	e224      	b.n	801162a <UART_SetConfig+0x7ae>
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4ab1      	ldr	r2, [pc, #708]	; (80114ac <UART_SetConfig+0x630>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d176      	bne.n	80112d8 <UART_SetConfig+0x45c>
 80111ea:	4bb1      	ldr	r3, [pc, #708]	; (80114b0 <UART_SetConfig+0x634>)
 80111ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111f2:	2b28      	cmp	r3, #40	; 0x28
 80111f4:	d86c      	bhi.n	80112d0 <UART_SetConfig+0x454>
 80111f6:	a201      	add	r2, pc, #4	; (adr r2, 80111fc <UART_SetConfig+0x380>)
 80111f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111fc:	080112a1 	.word	0x080112a1
 8011200:	080112d1 	.word	0x080112d1
 8011204:	080112d1 	.word	0x080112d1
 8011208:	080112d1 	.word	0x080112d1
 801120c:	080112d1 	.word	0x080112d1
 8011210:	080112d1 	.word	0x080112d1
 8011214:	080112d1 	.word	0x080112d1
 8011218:	080112d1 	.word	0x080112d1
 801121c:	080112a9 	.word	0x080112a9
 8011220:	080112d1 	.word	0x080112d1
 8011224:	080112d1 	.word	0x080112d1
 8011228:	080112d1 	.word	0x080112d1
 801122c:	080112d1 	.word	0x080112d1
 8011230:	080112d1 	.word	0x080112d1
 8011234:	080112d1 	.word	0x080112d1
 8011238:	080112d1 	.word	0x080112d1
 801123c:	080112b1 	.word	0x080112b1
 8011240:	080112d1 	.word	0x080112d1
 8011244:	080112d1 	.word	0x080112d1
 8011248:	080112d1 	.word	0x080112d1
 801124c:	080112d1 	.word	0x080112d1
 8011250:	080112d1 	.word	0x080112d1
 8011254:	080112d1 	.word	0x080112d1
 8011258:	080112d1 	.word	0x080112d1
 801125c:	080112b9 	.word	0x080112b9
 8011260:	080112d1 	.word	0x080112d1
 8011264:	080112d1 	.word	0x080112d1
 8011268:	080112d1 	.word	0x080112d1
 801126c:	080112d1 	.word	0x080112d1
 8011270:	080112d1 	.word	0x080112d1
 8011274:	080112d1 	.word	0x080112d1
 8011278:	080112d1 	.word	0x080112d1
 801127c:	080112c1 	.word	0x080112c1
 8011280:	080112d1 	.word	0x080112d1
 8011284:	080112d1 	.word	0x080112d1
 8011288:	080112d1 	.word	0x080112d1
 801128c:	080112d1 	.word	0x080112d1
 8011290:	080112d1 	.word	0x080112d1
 8011294:	080112d1 	.word	0x080112d1
 8011298:	080112d1 	.word	0x080112d1
 801129c:	080112c9 	.word	0x080112c9
 80112a0:	2301      	movs	r3, #1
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a6:	e1c0      	b.n	801162a <UART_SetConfig+0x7ae>
 80112a8:	2304      	movs	r3, #4
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ae:	e1bc      	b.n	801162a <UART_SetConfig+0x7ae>
 80112b0:	2308      	movs	r3, #8
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b6:	e1b8      	b.n	801162a <UART_SetConfig+0x7ae>
 80112b8:	2310      	movs	r3, #16
 80112ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112be:	e1b4      	b.n	801162a <UART_SetConfig+0x7ae>
 80112c0:	2320      	movs	r3, #32
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c6:	e1b0      	b.n	801162a <UART_SetConfig+0x7ae>
 80112c8:	2340      	movs	r3, #64	; 0x40
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e1ac      	b.n	801162a <UART_SetConfig+0x7ae>
 80112d0:	2380      	movs	r3, #128	; 0x80
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e1a8      	b.n	801162a <UART_SetConfig+0x7ae>
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	4a75      	ldr	r2, [pc, #468]	; (80114b4 <UART_SetConfig+0x638>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d130      	bne.n	8011344 <UART_SetConfig+0x4c8>
 80112e2:	4b73      	ldr	r3, [pc, #460]	; (80114b0 <UART_SetConfig+0x634>)
 80112e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112e6:	f003 0307 	and.w	r3, r3, #7
 80112ea:	2b05      	cmp	r3, #5
 80112ec:	d826      	bhi.n	801133c <UART_SetConfig+0x4c0>
 80112ee:	a201      	add	r2, pc, #4	; (adr r2, 80112f4 <UART_SetConfig+0x478>)
 80112f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f4:	0801130d 	.word	0x0801130d
 80112f8:	08011315 	.word	0x08011315
 80112fc:	0801131d 	.word	0x0801131d
 8011300:	08011325 	.word	0x08011325
 8011304:	0801132d 	.word	0x0801132d
 8011308:	08011335 	.word	0x08011335
 801130c:	2300      	movs	r3, #0
 801130e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011312:	e18a      	b.n	801162a <UART_SetConfig+0x7ae>
 8011314:	2304      	movs	r3, #4
 8011316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131a:	e186      	b.n	801162a <UART_SetConfig+0x7ae>
 801131c:	2308      	movs	r3, #8
 801131e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011322:	e182      	b.n	801162a <UART_SetConfig+0x7ae>
 8011324:	2310      	movs	r3, #16
 8011326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132a:	e17e      	b.n	801162a <UART_SetConfig+0x7ae>
 801132c:	2320      	movs	r3, #32
 801132e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011332:	e17a      	b.n	801162a <UART_SetConfig+0x7ae>
 8011334:	2340      	movs	r3, #64	; 0x40
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e176      	b.n	801162a <UART_SetConfig+0x7ae>
 801133c:	2380      	movs	r3, #128	; 0x80
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e172      	b.n	801162a <UART_SetConfig+0x7ae>
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4a5b      	ldr	r2, [pc, #364]	; (80114b8 <UART_SetConfig+0x63c>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d130      	bne.n	80113b0 <UART_SetConfig+0x534>
 801134e:	4b58      	ldr	r3, [pc, #352]	; (80114b0 <UART_SetConfig+0x634>)
 8011350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011352:	f003 0307 	and.w	r3, r3, #7
 8011356:	2b05      	cmp	r3, #5
 8011358:	d826      	bhi.n	80113a8 <UART_SetConfig+0x52c>
 801135a:	a201      	add	r2, pc, #4	; (adr r2, 8011360 <UART_SetConfig+0x4e4>)
 801135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011360:	08011379 	.word	0x08011379
 8011364:	08011381 	.word	0x08011381
 8011368:	08011389 	.word	0x08011389
 801136c:	08011391 	.word	0x08011391
 8011370:	08011399 	.word	0x08011399
 8011374:	080113a1 	.word	0x080113a1
 8011378:	2300      	movs	r3, #0
 801137a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137e:	e154      	b.n	801162a <UART_SetConfig+0x7ae>
 8011380:	2304      	movs	r3, #4
 8011382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011386:	e150      	b.n	801162a <UART_SetConfig+0x7ae>
 8011388:	2308      	movs	r3, #8
 801138a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138e:	e14c      	b.n	801162a <UART_SetConfig+0x7ae>
 8011390:	2310      	movs	r3, #16
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e148      	b.n	801162a <UART_SetConfig+0x7ae>
 8011398:	2320      	movs	r3, #32
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e144      	b.n	801162a <UART_SetConfig+0x7ae>
 80113a0:	2340      	movs	r3, #64	; 0x40
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e140      	b.n	801162a <UART_SetConfig+0x7ae>
 80113a8:	2380      	movs	r3, #128	; 0x80
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e13c      	b.n	801162a <UART_SetConfig+0x7ae>
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a41      	ldr	r2, [pc, #260]	; (80114bc <UART_SetConfig+0x640>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	f040 8082 	bne.w	80114c0 <UART_SetConfig+0x644>
 80113bc:	4b3c      	ldr	r3, [pc, #240]	; (80114b0 <UART_SetConfig+0x634>)
 80113be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113c4:	2b28      	cmp	r3, #40	; 0x28
 80113c6:	d86d      	bhi.n	80114a4 <UART_SetConfig+0x628>
 80113c8:	a201      	add	r2, pc, #4	; (adr r2, 80113d0 <UART_SetConfig+0x554>)
 80113ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ce:	bf00      	nop
 80113d0:	08011475 	.word	0x08011475
 80113d4:	080114a5 	.word	0x080114a5
 80113d8:	080114a5 	.word	0x080114a5
 80113dc:	080114a5 	.word	0x080114a5
 80113e0:	080114a5 	.word	0x080114a5
 80113e4:	080114a5 	.word	0x080114a5
 80113e8:	080114a5 	.word	0x080114a5
 80113ec:	080114a5 	.word	0x080114a5
 80113f0:	0801147d 	.word	0x0801147d
 80113f4:	080114a5 	.word	0x080114a5
 80113f8:	080114a5 	.word	0x080114a5
 80113fc:	080114a5 	.word	0x080114a5
 8011400:	080114a5 	.word	0x080114a5
 8011404:	080114a5 	.word	0x080114a5
 8011408:	080114a5 	.word	0x080114a5
 801140c:	080114a5 	.word	0x080114a5
 8011410:	08011485 	.word	0x08011485
 8011414:	080114a5 	.word	0x080114a5
 8011418:	080114a5 	.word	0x080114a5
 801141c:	080114a5 	.word	0x080114a5
 8011420:	080114a5 	.word	0x080114a5
 8011424:	080114a5 	.word	0x080114a5
 8011428:	080114a5 	.word	0x080114a5
 801142c:	080114a5 	.word	0x080114a5
 8011430:	0801148d 	.word	0x0801148d
 8011434:	080114a5 	.word	0x080114a5
 8011438:	080114a5 	.word	0x080114a5
 801143c:	080114a5 	.word	0x080114a5
 8011440:	080114a5 	.word	0x080114a5
 8011444:	080114a5 	.word	0x080114a5
 8011448:	080114a5 	.word	0x080114a5
 801144c:	080114a5 	.word	0x080114a5
 8011450:	08011495 	.word	0x08011495
 8011454:	080114a5 	.word	0x080114a5
 8011458:	080114a5 	.word	0x080114a5
 801145c:	080114a5 	.word	0x080114a5
 8011460:	080114a5 	.word	0x080114a5
 8011464:	080114a5 	.word	0x080114a5
 8011468:	080114a5 	.word	0x080114a5
 801146c:	080114a5 	.word	0x080114a5
 8011470:	0801149d 	.word	0x0801149d
 8011474:	2301      	movs	r3, #1
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147a:	e0d6      	b.n	801162a <UART_SetConfig+0x7ae>
 801147c:	2304      	movs	r3, #4
 801147e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011482:	e0d2      	b.n	801162a <UART_SetConfig+0x7ae>
 8011484:	2308      	movs	r3, #8
 8011486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148a:	e0ce      	b.n	801162a <UART_SetConfig+0x7ae>
 801148c:	2310      	movs	r3, #16
 801148e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011492:	e0ca      	b.n	801162a <UART_SetConfig+0x7ae>
 8011494:	2320      	movs	r3, #32
 8011496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149a:	e0c6      	b.n	801162a <UART_SetConfig+0x7ae>
 801149c:	2340      	movs	r3, #64	; 0x40
 801149e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a2:	e0c2      	b.n	801162a <UART_SetConfig+0x7ae>
 80114a4:	2380      	movs	r3, #128	; 0x80
 80114a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114aa:	e0be      	b.n	801162a <UART_SetConfig+0x7ae>
 80114ac:	40011400 	.word	0x40011400
 80114b0:	58024400 	.word	0x58024400
 80114b4:	40007800 	.word	0x40007800
 80114b8:	40007c00 	.word	0x40007c00
 80114bc:	40011800 	.word	0x40011800
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4aad      	ldr	r2, [pc, #692]	; (801177c <UART_SetConfig+0x900>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d176      	bne.n	80115b8 <UART_SetConfig+0x73c>
 80114ca:	4bad      	ldr	r3, [pc, #692]	; (8011780 <UART_SetConfig+0x904>)
 80114cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80114d2:	2b28      	cmp	r3, #40	; 0x28
 80114d4:	d86c      	bhi.n	80115b0 <UART_SetConfig+0x734>
 80114d6:	a201      	add	r2, pc, #4	; (adr r2, 80114dc <UART_SetConfig+0x660>)
 80114d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114dc:	08011581 	.word	0x08011581
 80114e0:	080115b1 	.word	0x080115b1
 80114e4:	080115b1 	.word	0x080115b1
 80114e8:	080115b1 	.word	0x080115b1
 80114ec:	080115b1 	.word	0x080115b1
 80114f0:	080115b1 	.word	0x080115b1
 80114f4:	080115b1 	.word	0x080115b1
 80114f8:	080115b1 	.word	0x080115b1
 80114fc:	08011589 	.word	0x08011589
 8011500:	080115b1 	.word	0x080115b1
 8011504:	080115b1 	.word	0x080115b1
 8011508:	080115b1 	.word	0x080115b1
 801150c:	080115b1 	.word	0x080115b1
 8011510:	080115b1 	.word	0x080115b1
 8011514:	080115b1 	.word	0x080115b1
 8011518:	080115b1 	.word	0x080115b1
 801151c:	08011591 	.word	0x08011591
 8011520:	080115b1 	.word	0x080115b1
 8011524:	080115b1 	.word	0x080115b1
 8011528:	080115b1 	.word	0x080115b1
 801152c:	080115b1 	.word	0x080115b1
 8011530:	080115b1 	.word	0x080115b1
 8011534:	080115b1 	.word	0x080115b1
 8011538:	080115b1 	.word	0x080115b1
 801153c:	08011599 	.word	0x08011599
 8011540:	080115b1 	.word	0x080115b1
 8011544:	080115b1 	.word	0x080115b1
 8011548:	080115b1 	.word	0x080115b1
 801154c:	080115b1 	.word	0x080115b1
 8011550:	080115b1 	.word	0x080115b1
 8011554:	080115b1 	.word	0x080115b1
 8011558:	080115b1 	.word	0x080115b1
 801155c:	080115a1 	.word	0x080115a1
 8011560:	080115b1 	.word	0x080115b1
 8011564:	080115b1 	.word	0x080115b1
 8011568:	080115b1 	.word	0x080115b1
 801156c:	080115b1 	.word	0x080115b1
 8011570:	080115b1 	.word	0x080115b1
 8011574:	080115b1 	.word	0x080115b1
 8011578:	080115b1 	.word	0x080115b1
 801157c:	080115a9 	.word	0x080115a9
 8011580:	2301      	movs	r3, #1
 8011582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011586:	e050      	b.n	801162a <UART_SetConfig+0x7ae>
 8011588:	2304      	movs	r3, #4
 801158a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158e:	e04c      	b.n	801162a <UART_SetConfig+0x7ae>
 8011590:	2308      	movs	r3, #8
 8011592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011596:	e048      	b.n	801162a <UART_SetConfig+0x7ae>
 8011598:	2310      	movs	r3, #16
 801159a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801159e:	e044      	b.n	801162a <UART_SetConfig+0x7ae>
 80115a0:	2320      	movs	r3, #32
 80115a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a6:	e040      	b.n	801162a <UART_SetConfig+0x7ae>
 80115a8:	2340      	movs	r3, #64	; 0x40
 80115aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ae:	e03c      	b.n	801162a <UART_SetConfig+0x7ae>
 80115b0:	2380      	movs	r3, #128	; 0x80
 80115b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b6:	e038      	b.n	801162a <UART_SetConfig+0x7ae>
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4a71      	ldr	r2, [pc, #452]	; (8011784 <UART_SetConfig+0x908>)
 80115be:	4293      	cmp	r3, r2
 80115c0:	d130      	bne.n	8011624 <UART_SetConfig+0x7a8>
 80115c2:	4b6f      	ldr	r3, [pc, #444]	; (8011780 <UART_SetConfig+0x904>)
 80115c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115c6:	f003 0307 	and.w	r3, r3, #7
 80115ca:	2b05      	cmp	r3, #5
 80115cc:	d826      	bhi.n	801161c <UART_SetConfig+0x7a0>
 80115ce:	a201      	add	r2, pc, #4	; (adr r2, 80115d4 <UART_SetConfig+0x758>)
 80115d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d4:	080115ed 	.word	0x080115ed
 80115d8:	080115f5 	.word	0x080115f5
 80115dc:	080115fd 	.word	0x080115fd
 80115e0:	08011605 	.word	0x08011605
 80115e4:	0801160d 	.word	0x0801160d
 80115e8:	08011615 	.word	0x08011615
 80115ec:	2302      	movs	r3, #2
 80115ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115f2:	e01a      	b.n	801162a <UART_SetConfig+0x7ae>
 80115f4:	2304      	movs	r3, #4
 80115f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fa:	e016      	b.n	801162a <UART_SetConfig+0x7ae>
 80115fc:	2308      	movs	r3, #8
 80115fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011602:	e012      	b.n	801162a <UART_SetConfig+0x7ae>
 8011604:	2310      	movs	r3, #16
 8011606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160a:	e00e      	b.n	801162a <UART_SetConfig+0x7ae>
 801160c:	2320      	movs	r3, #32
 801160e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011612:	e00a      	b.n	801162a <UART_SetConfig+0x7ae>
 8011614:	2340      	movs	r3, #64	; 0x40
 8011616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161a:	e006      	b.n	801162a <UART_SetConfig+0x7ae>
 801161c:	2380      	movs	r3, #128	; 0x80
 801161e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011622:	e002      	b.n	801162a <UART_SetConfig+0x7ae>
 8011624:	2380      	movs	r3, #128	; 0x80
 8011626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	4a55      	ldr	r2, [pc, #340]	; (8011784 <UART_SetConfig+0x908>)
 8011630:	4293      	cmp	r3, r2
 8011632:	f040 80f8 	bne.w	8011826 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011636:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801163a:	2b20      	cmp	r3, #32
 801163c:	dc46      	bgt.n	80116cc <UART_SetConfig+0x850>
 801163e:	2b02      	cmp	r3, #2
 8011640:	db75      	blt.n	801172e <UART_SetConfig+0x8b2>
 8011642:	3b02      	subs	r3, #2
 8011644:	2b1e      	cmp	r3, #30
 8011646:	d872      	bhi.n	801172e <UART_SetConfig+0x8b2>
 8011648:	a201      	add	r2, pc, #4	; (adr r2, 8011650 <UART_SetConfig+0x7d4>)
 801164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801164e:	bf00      	nop
 8011650:	080116d3 	.word	0x080116d3
 8011654:	0801172f 	.word	0x0801172f
 8011658:	080116db 	.word	0x080116db
 801165c:	0801172f 	.word	0x0801172f
 8011660:	0801172f 	.word	0x0801172f
 8011664:	0801172f 	.word	0x0801172f
 8011668:	080116eb 	.word	0x080116eb
 801166c:	0801172f 	.word	0x0801172f
 8011670:	0801172f 	.word	0x0801172f
 8011674:	0801172f 	.word	0x0801172f
 8011678:	0801172f 	.word	0x0801172f
 801167c:	0801172f 	.word	0x0801172f
 8011680:	0801172f 	.word	0x0801172f
 8011684:	0801172f 	.word	0x0801172f
 8011688:	080116fb 	.word	0x080116fb
 801168c:	0801172f 	.word	0x0801172f
 8011690:	0801172f 	.word	0x0801172f
 8011694:	0801172f 	.word	0x0801172f
 8011698:	0801172f 	.word	0x0801172f
 801169c:	0801172f 	.word	0x0801172f
 80116a0:	0801172f 	.word	0x0801172f
 80116a4:	0801172f 	.word	0x0801172f
 80116a8:	0801172f 	.word	0x0801172f
 80116ac:	0801172f 	.word	0x0801172f
 80116b0:	0801172f 	.word	0x0801172f
 80116b4:	0801172f 	.word	0x0801172f
 80116b8:	0801172f 	.word	0x0801172f
 80116bc:	0801172f 	.word	0x0801172f
 80116c0:	0801172f 	.word	0x0801172f
 80116c4:	0801172f 	.word	0x0801172f
 80116c8:	08011721 	.word	0x08011721
 80116cc:	2b40      	cmp	r3, #64	; 0x40
 80116ce:	d02a      	beq.n	8011726 <UART_SetConfig+0x8aa>
 80116d0:	e02d      	b.n	801172e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80116d2:	f7fa ffc7 	bl	800c664 <HAL_RCCEx_GetD3PCLK1Freq>
 80116d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116d8:	e02f      	b.n	801173a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fa ffd6 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116e8:	e027      	b.n	801173a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116ea:	f107 0318 	add.w	r3, r7, #24
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fb f922 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116f8:	e01f      	b.n	801173a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116fa:	4b21      	ldr	r3, [pc, #132]	; (8011780 <UART_SetConfig+0x904>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	f003 0320 	and.w	r3, r3, #32
 8011702:	2b00      	cmp	r3, #0
 8011704:	d009      	beq.n	801171a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011706:	4b1e      	ldr	r3, [pc, #120]	; (8011780 <UART_SetConfig+0x904>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	08db      	lsrs	r3, r3, #3
 801170c:	f003 0303 	and.w	r3, r3, #3
 8011710:	4a1d      	ldr	r2, [pc, #116]	; (8011788 <UART_SetConfig+0x90c>)
 8011712:	fa22 f303 	lsr.w	r3, r2, r3
 8011716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011718:	e00f      	b.n	801173a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801171a:	4b1b      	ldr	r3, [pc, #108]	; (8011788 <UART_SetConfig+0x90c>)
 801171c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801171e:	e00c      	b.n	801173a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011720:	4b1a      	ldr	r3, [pc, #104]	; (801178c <UART_SetConfig+0x910>)
 8011722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011724:	e009      	b.n	801173a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801172a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801172c:	e005      	b.n	801173a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801172e:	2300      	movs	r3, #0
 8011730:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011732:	2301      	movs	r3, #1
 8011734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801173c:	2b00      	cmp	r3, #0
 801173e:	f000 81ee 	beq.w	8011b1e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011746:	4a12      	ldr	r2, [pc, #72]	; (8011790 <UART_SetConfig+0x914>)
 8011748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801174c:	461a      	mov	r2, r3
 801174e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011750:	fbb3 f3f2 	udiv	r3, r3, r2
 8011754:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	685a      	ldr	r2, [r3, #4]
 801175a:	4613      	mov	r3, r2
 801175c:	005b      	lsls	r3, r3, #1
 801175e:	4413      	add	r3, r2
 8011760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011762:	429a      	cmp	r2, r3
 8011764:	d305      	bcc.n	8011772 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801176c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801176e:	429a      	cmp	r2, r3
 8011770:	d910      	bls.n	8011794 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011772:	2301      	movs	r3, #1
 8011774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011778:	e1d1      	b.n	8011b1e <UART_SetConfig+0xca2>
 801177a:	bf00      	nop
 801177c:	40011c00 	.word	0x40011c00
 8011780:	58024400 	.word	0x58024400
 8011784:	58000c00 	.word	0x58000c00
 8011788:	03d09000 	.word	0x03d09000
 801178c:	003d0900 	.word	0x003d0900
 8011790:	08018890 	.word	0x08018890
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011796:	2200      	movs	r2, #0
 8011798:	60bb      	str	r3, [r7, #8]
 801179a:	60fa      	str	r2, [r7, #12]
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a0:	4ac0      	ldr	r2, [pc, #768]	; (8011aa4 <UART_SetConfig+0xc28>)
 80117a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	2200      	movs	r2, #0
 80117aa:	603b      	str	r3, [r7, #0]
 80117ac:	607a      	str	r2, [r7, #4]
 80117ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80117b6:	f7ee fe13 	bl	80003e0 <__aeabi_uldivmod>
 80117ba:	4602      	mov	r2, r0
 80117bc:	460b      	mov	r3, r1
 80117be:	4610      	mov	r0, r2
 80117c0:	4619      	mov	r1, r3
 80117c2:	f04f 0200 	mov.w	r2, #0
 80117c6:	f04f 0300 	mov.w	r3, #0
 80117ca:	020b      	lsls	r3, r1, #8
 80117cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117d0:	0202      	lsls	r2, r0, #8
 80117d2:	6979      	ldr	r1, [r7, #20]
 80117d4:	6849      	ldr	r1, [r1, #4]
 80117d6:	0849      	lsrs	r1, r1, #1
 80117d8:	2000      	movs	r0, #0
 80117da:	460c      	mov	r4, r1
 80117dc:	4605      	mov	r5, r0
 80117de:	eb12 0804 	adds.w	r8, r2, r4
 80117e2:	eb43 0905 	adc.w	r9, r3, r5
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	469a      	mov	sl, r3
 80117ee:	4693      	mov	fp, r2
 80117f0:	4652      	mov	r2, sl
 80117f2:	465b      	mov	r3, fp
 80117f4:	4640      	mov	r0, r8
 80117f6:	4649      	mov	r1, r9
 80117f8:	f7ee fdf2 	bl	80003e0 <__aeabi_uldivmod>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	4613      	mov	r3, r2
 8011802:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801180a:	d308      	bcc.n	801181e <UART_SetConfig+0x9a2>
 801180c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011812:	d204      	bcs.n	801181e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801181a:	60da      	str	r2, [r3, #12]
 801181c:	e17f      	b.n	8011b1e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801181e:	2301      	movs	r3, #1
 8011820:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011824:	e17b      	b.n	8011b1e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	69db      	ldr	r3, [r3, #28]
 801182a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801182e:	f040 80bd 	bne.w	80119ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011832:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011836:	2b20      	cmp	r3, #32
 8011838:	dc48      	bgt.n	80118cc <UART_SetConfig+0xa50>
 801183a:	2b00      	cmp	r3, #0
 801183c:	db7b      	blt.n	8011936 <UART_SetConfig+0xaba>
 801183e:	2b20      	cmp	r3, #32
 8011840:	d879      	bhi.n	8011936 <UART_SetConfig+0xaba>
 8011842:	a201      	add	r2, pc, #4	; (adr r2, 8011848 <UART_SetConfig+0x9cc>)
 8011844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011848:	080118d3 	.word	0x080118d3
 801184c:	080118db 	.word	0x080118db
 8011850:	08011937 	.word	0x08011937
 8011854:	08011937 	.word	0x08011937
 8011858:	080118e3 	.word	0x080118e3
 801185c:	08011937 	.word	0x08011937
 8011860:	08011937 	.word	0x08011937
 8011864:	08011937 	.word	0x08011937
 8011868:	080118f3 	.word	0x080118f3
 801186c:	08011937 	.word	0x08011937
 8011870:	08011937 	.word	0x08011937
 8011874:	08011937 	.word	0x08011937
 8011878:	08011937 	.word	0x08011937
 801187c:	08011937 	.word	0x08011937
 8011880:	08011937 	.word	0x08011937
 8011884:	08011937 	.word	0x08011937
 8011888:	08011903 	.word	0x08011903
 801188c:	08011937 	.word	0x08011937
 8011890:	08011937 	.word	0x08011937
 8011894:	08011937 	.word	0x08011937
 8011898:	08011937 	.word	0x08011937
 801189c:	08011937 	.word	0x08011937
 80118a0:	08011937 	.word	0x08011937
 80118a4:	08011937 	.word	0x08011937
 80118a8:	08011937 	.word	0x08011937
 80118ac:	08011937 	.word	0x08011937
 80118b0:	08011937 	.word	0x08011937
 80118b4:	08011937 	.word	0x08011937
 80118b8:	08011937 	.word	0x08011937
 80118bc:	08011937 	.word	0x08011937
 80118c0:	08011937 	.word	0x08011937
 80118c4:	08011937 	.word	0x08011937
 80118c8:	08011929 	.word	0x08011929
 80118cc:	2b40      	cmp	r3, #64	; 0x40
 80118ce:	d02e      	beq.n	801192e <UART_SetConfig+0xab2>
 80118d0:	e031      	b.n	8011936 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118d2:	f7f9 f829 	bl	800a928 <HAL_RCC_GetPCLK1Freq>
 80118d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118d8:	e033      	b.n	8011942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80118da:	f7f9 f83b 	bl	800a954 <HAL_RCC_GetPCLK2Freq>
 80118de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118e0:	e02f      	b.n	8011942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fa fed2 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80118ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118f0:	e027      	b.n	8011942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118f2:	f107 0318 	add.w	r3, r7, #24
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7fb f81e 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011900:	e01f      	b.n	8011942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011902:	4b69      	ldr	r3, [pc, #420]	; (8011aa8 <UART_SetConfig+0xc2c>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f003 0320 	and.w	r3, r3, #32
 801190a:	2b00      	cmp	r3, #0
 801190c:	d009      	beq.n	8011922 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801190e:	4b66      	ldr	r3, [pc, #408]	; (8011aa8 <UART_SetConfig+0xc2c>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	08db      	lsrs	r3, r3, #3
 8011914:	f003 0303 	and.w	r3, r3, #3
 8011918:	4a64      	ldr	r2, [pc, #400]	; (8011aac <UART_SetConfig+0xc30>)
 801191a:	fa22 f303 	lsr.w	r3, r2, r3
 801191e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011920:	e00f      	b.n	8011942 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011922:	4b62      	ldr	r3, [pc, #392]	; (8011aac <UART_SetConfig+0xc30>)
 8011924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011926:	e00c      	b.n	8011942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011928:	4b61      	ldr	r3, [pc, #388]	; (8011ab0 <UART_SetConfig+0xc34>)
 801192a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801192c:	e009      	b.n	8011942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801192e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011934:	e005      	b.n	8011942 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011936:	2300      	movs	r3, #0
 8011938:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801193a:	2301      	movs	r3, #1
 801193c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011944:	2b00      	cmp	r3, #0
 8011946:	f000 80ea 	beq.w	8011b1e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801194e:	4a55      	ldr	r2, [pc, #340]	; (8011aa4 <UART_SetConfig+0xc28>)
 8011950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011954:	461a      	mov	r2, r3
 8011956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011958:	fbb3 f3f2 	udiv	r3, r3, r2
 801195c:	005a      	lsls	r2, r3, #1
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	085b      	lsrs	r3, r3, #1
 8011964:	441a      	add	r2, r3
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	fbb2 f3f3 	udiv	r3, r2, r3
 801196e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	2b0f      	cmp	r3, #15
 8011974:	d916      	bls.n	80119a4 <UART_SetConfig+0xb28>
 8011976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801197c:	d212      	bcs.n	80119a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011980:	b29b      	uxth	r3, r3
 8011982:	f023 030f 	bic.w	r3, r3, #15
 8011986:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801198a:	085b      	lsrs	r3, r3, #1
 801198c:	b29b      	uxth	r3, r3
 801198e:	f003 0307 	and.w	r3, r3, #7
 8011992:	b29a      	uxth	r2, r3
 8011994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011996:	4313      	orrs	r3, r2
 8011998:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80119a0:	60da      	str	r2, [r3, #12]
 80119a2:	e0bc      	b.n	8011b1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80119a4:	2301      	movs	r3, #1
 80119a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80119aa:	e0b8      	b.n	8011b1e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80119ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119b0:	2b20      	cmp	r3, #32
 80119b2:	dc4b      	bgt.n	8011a4c <UART_SetConfig+0xbd0>
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f2c0 8087 	blt.w	8011ac8 <UART_SetConfig+0xc4c>
 80119ba:	2b20      	cmp	r3, #32
 80119bc:	f200 8084 	bhi.w	8011ac8 <UART_SetConfig+0xc4c>
 80119c0:	a201      	add	r2, pc, #4	; (adr r2, 80119c8 <UART_SetConfig+0xb4c>)
 80119c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c6:	bf00      	nop
 80119c8:	08011a53 	.word	0x08011a53
 80119cc:	08011a5b 	.word	0x08011a5b
 80119d0:	08011ac9 	.word	0x08011ac9
 80119d4:	08011ac9 	.word	0x08011ac9
 80119d8:	08011a63 	.word	0x08011a63
 80119dc:	08011ac9 	.word	0x08011ac9
 80119e0:	08011ac9 	.word	0x08011ac9
 80119e4:	08011ac9 	.word	0x08011ac9
 80119e8:	08011a73 	.word	0x08011a73
 80119ec:	08011ac9 	.word	0x08011ac9
 80119f0:	08011ac9 	.word	0x08011ac9
 80119f4:	08011ac9 	.word	0x08011ac9
 80119f8:	08011ac9 	.word	0x08011ac9
 80119fc:	08011ac9 	.word	0x08011ac9
 8011a00:	08011ac9 	.word	0x08011ac9
 8011a04:	08011ac9 	.word	0x08011ac9
 8011a08:	08011a83 	.word	0x08011a83
 8011a0c:	08011ac9 	.word	0x08011ac9
 8011a10:	08011ac9 	.word	0x08011ac9
 8011a14:	08011ac9 	.word	0x08011ac9
 8011a18:	08011ac9 	.word	0x08011ac9
 8011a1c:	08011ac9 	.word	0x08011ac9
 8011a20:	08011ac9 	.word	0x08011ac9
 8011a24:	08011ac9 	.word	0x08011ac9
 8011a28:	08011ac9 	.word	0x08011ac9
 8011a2c:	08011ac9 	.word	0x08011ac9
 8011a30:	08011ac9 	.word	0x08011ac9
 8011a34:	08011ac9 	.word	0x08011ac9
 8011a38:	08011ac9 	.word	0x08011ac9
 8011a3c:	08011ac9 	.word	0x08011ac9
 8011a40:	08011ac9 	.word	0x08011ac9
 8011a44:	08011ac9 	.word	0x08011ac9
 8011a48:	08011abb 	.word	0x08011abb
 8011a4c:	2b40      	cmp	r3, #64	; 0x40
 8011a4e:	d037      	beq.n	8011ac0 <UART_SetConfig+0xc44>
 8011a50:	e03a      	b.n	8011ac8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a52:	f7f8 ff69 	bl	800a928 <HAL_RCC_GetPCLK1Freq>
 8011a56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a58:	e03c      	b.n	8011ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011a5a:	f7f8 ff7b 	bl	800a954 <HAL_RCC_GetPCLK2Freq>
 8011a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a60:	e038      	b.n	8011ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fa fe12 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a70:	e030      	b.n	8011ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a72:	f107 0318 	add.w	r3, r7, #24
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fa ff5e 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a80:	e028      	b.n	8011ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a82:	4b09      	ldr	r3, [pc, #36]	; (8011aa8 <UART_SetConfig+0xc2c>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	f003 0320 	and.w	r3, r3, #32
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d012      	beq.n	8011ab4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a8e:	4b06      	ldr	r3, [pc, #24]	; (8011aa8 <UART_SetConfig+0xc2c>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	08db      	lsrs	r3, r3, #3
 8011a94:	f003 0303 	and.w	r3, r3, #3
 8011a98:	4a04      	ldr	r2, [pc, #16]	; (8011aac <UART_SetConfig+0xc30>)
 8011a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8011a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011aa0:	e018      	b.n	8011ad4 <UART_SetConfig+0xc58>
 8011aa2:	bf00      	nop
 8011aa4:	08018890 	.word	0x08018890
 8011aa8:	58024400 	.word	0x58024400
 8011aac:	03d09000 	.word	0x03d09000
 8011ab0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011ab4:	4b24      	ldr	r3, [pc, #144]	; (8011b48 <UART_SetConfig+0xccc>)
 8011ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ab8:	e00c      	b.n	8011ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011aba:	4b24      	ldr	r3, [pc, #144]	; (8011b4c <UART_SetConfig+0xcd0>)
 8011abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011abe:	e009      	b.n	8011ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ac6:	e005      	b.n	8011ad4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011acc:	2301      	movs	r3, #1
 8011ace:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011ad2:	bf00      	nop
    }

    if (pclk != 0U)
 8011ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d021      	beq.n	8011b1e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ade:	4a1c      	ldr	r2, [pc, #112]	; (8011b50 <UART_SetConfig+0xcd4>)
 8011ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ae8:	fbb3 f2f2 	udiv	r2, r3, r2
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	085b      	lsrs	r3, r3, #1
 8011af2:	441a      	add	r2, r3
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8011afc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b00:	2b0f      	cmp	r3, #15
 8011b02:	d909      	bls.n	8011b18 <UART_SetConfig+0xc9c>
 8011b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b0a:	d205      	bcs.n	8011b18 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	60da      	str	r2, [r3, #12]
 8011b16:	e002      	b.n	8011b1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011b18:	2301      	movs	r3, #1
 8011b1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	2201      	movs	r2, #1
 8011b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	2200      	movs	r2, #0
 8011b32:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2200      	movs	r2, #0
 8011b38:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011b3a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3748      	adds	r7, #72	; 0x48
 8011b42:	46bd      	mov	sp, r7
 8011b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b48:	03d09000 	.word	0x03d09000
 8011b4c:	003d0900 	.word	0x003d0900
 8011b50:	08018890 	.word	0x08018890

08011b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b60:	f003 0301 	and.w	r3, r3, #1
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00a      	beq.n	8011b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	430a      	orrs	r2, r1
 8011b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b82:	f003 0302 	and.w	r3, r3, #2
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00a      	beq.n	8011ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	430a      	orrs	r2, r1
 8011b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ba4:	f003 0304 	and.w	r3, r3, #4
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d00a      	beq.n	8011bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	430a      	orrs	r2, r1
 8011bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bc6:	f003 0308 	and.w	r3, r3, #8
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d00a      	beq.n	8011be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	430a      	orrs	r2, r1
 8011be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011be8:	f003 0310 	and.w	r3, r3, #16
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00a      	beq.n	8011c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	689b      	ldr	r3, [r3, #8]
 8011bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	430a      	orrs	r2, r1
 8011c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c0a:	f003 0320 	and.w	r3, r3, #32
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00a      	beq.n	8011c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	430a      	orrs	r2, r1
 8011c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d01a      	beq.n	8011c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	430a      	orrs	r2, r1
 8011c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c52:	d10a      	bne.n	8011c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	430a      	orrs	r2, r1
 8011c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d00a      	beq.n	8011c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	430a      	orrs	r2, r1
 8011c8a:	605a      	str	r2, [r3, #4]
  }
}
 8011c8c:	bf00      	nop
 8011c8e:	370c      	adds	r7, #12
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b098      	sub	sp, #96	; 0x60
 8011c9c:	af02      	add	r7, sp, #8
 8011c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011ca8:	f7f1 ff7e 	bl	8003ba8 <HAL_GetTick>
 8011cac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f003 0308 	and.w	r3, r3, #8
 8011cb8:	2b08      	cmp	r3, #8
 8011cba:	d12f      	bne.n	8011d1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011cc0:	9300      	str	r3, [sp, #0]
 8011cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 f88e 	bl	8011dec <UART_WaitOnFlagUntilTimeout>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d022      	beq.n	8011d1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cde:	e853 3f00 	ldrex	r3, [r3]
 8011ce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cea:	653b      	str	r3, [r7, #80]	; 0x50
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8011cf6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cfc:	e841 2300 	strex	r3, r2, [r1]
 8011d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d1e6      	bne.n	8011cd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2220      	movs	r2, #32
 8011d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d18:	2303      	movs	r3, #3
 8011d1a:	e063      	b.n	8011de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f003 0304 	and.w	r3, r3, #4
 8011d26:	2b04      	cmp	r3, #4
 8011d28:	d149      	bne.n	8011dbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d32:	2200      	movs	r2, #0
 8011d34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 f857 	bl	8011dec <UART_WaitOnFlagUntilTimeout>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d03c      	beq.n	8011dbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	e853 3f00 	ldrex	r3, [r3]
 8011d50:	623b      	str	r3, [r7, #32]
   return(result);
 8011d52:	6a3b      	ldr	r3, [r7, #32]
 8011d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d62:	633b      	str	r3, [r7, #48]	; 0x30
 8011d64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d6a:	e841 2300 	strex	r3, r2, [r1]
 8011d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d1e6      	bne.n	8011d44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	3308      	adds	r3, #8
 8011d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	e853 3f00 	ldrex	r3, [r3]
 8011d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f023 0301 	bic.w	r3, r3, #1
 8011d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	3308      	adds	r3, #8
 8011d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d96:	61fa      	str	r2, [r7, #28]
 8011d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d9a:	69b9      	ldr	r1, [r7, #24]
 8011d9c:	69fa      	ldr	r2, [r7, #28]
 8011d9e:	e841 2300 	strex	r3, r2, [r1]
 8011da2:	617b      	str	r3, [r7, #20]
   return(result);
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1e5      	bne.n	8011d76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2220      	movs	r2, #32
 8011dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2200      	movs	r2, #0
 8011db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011dba:	2303      	movs	r3, #3
 8011dbc:	e012      	b.n	8011de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2220      	movs	r2, #32
 8011dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2220      	movs	r2, #32
 8011dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3758      	adds	r7, #88	; 0x58
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	603b      	str	r3, [r7, #0]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011dfc:	e049      	b.n	8011e92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e04:	d045      	beq.n	8011e92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e06:	f7f1 fecf 	bl	8003ba8 <HAL_GetTick>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	1ad3      	subs	r3, r2, r3
 8011e10:	69ba      	ldr	r2, [r7, #24]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d302      	bcc.n	8011e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d101      	bne.n	8011e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011e1c:	2303      	movs	r3, #3
 8011e1e:	e048      	b.n	8011eb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f003 0304 	and.w	r3, r3, #4
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d031      	beq.n	8011e92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	69db      	ldr	r3, [r3, #28]
 8011e34:	f003 0308 	and.w	r3, r3, #8
 8011e38:	2b08      	cmp	r3, #8
 8011e3a:	d110      	bne.n	8011e5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2208      	movs	r2, #8
 8011e42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f000 f839 	bl	8011ebc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	2208      	movs	r2, #8
 8011e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2200      	movs	r2, #0
 8011e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	e029      	b.n	8011eb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	69db      	ldr	r3, [r3, #28]
 8011e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e6c:	d111      	bne.n	8011e92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f000 f81f 	bl	8011ebc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2220      	movs	r2, #32
 8011e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011e8e:	2303      	movs	r3, #3
 8011e90:	e00f      	b.n	8011eb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	69da      	ldr	r2, [r3, #28]
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	4013      	ands	r3, r2
 8011e9c:	68ba      	ldr	r2, [r7, #8]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	bf0c      	ite	eq
 8011ea2:	2301      	moveq	r3, #1
 8011ea4:	2300      	movne	r3, #0
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	79fb      	ldrb	r3, [r7, #7]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d0a6      	beq.n	8011dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
	...

08011ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b095      	sub	sp, #84	; 0x54
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ecc:	e853 3f00 	ldrex	r3, [r3]
 8011ed0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	461a      	mov	r2, r3
 8011ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8011ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011eea:	e841 2300 	strex	r3, r2, [r1]
 8011eee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1e6      	bne.n	8011ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	3308      	adds	r3, #8
 8011efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011efe:	6a3b      	ldr	r3, [r7, #32]
 8011f00:	e853 3f00 	ldrex	r3, [r3]
 8011f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f06:	69fa      	ldr	r2, [r7, #28]
 8011f08:	4b1e      	ldr	r3, [pc, #120]	; (8011f84 <UART_EndRxTransfer+0xc8>)
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	3308      	adds	r3, #8
 8011f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f1e:	e841 2300 	strex	r3, r2, [r1]
 8011f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d1e5      	bne.n	8011ef6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d118      	bne.n	8011f64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	e853 3f00 	ldrex	r3, [r3]
 8011f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	f023 0310 	bic.w	r3, r3, #16
 8011f46:	647b      	str	r3, [r7, #68]	; 0x44
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f50:	61bb      	str	r3, [r7, #24]
 8011f52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f54:	6979      	ldr	r1, [r7, #20]
 8011f56:	69ba      	ldr	r2, [r7, #24]
 8011f58:	e841 2300 	strex	r3, r2, [r1]
 8011f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1e6      	bne.n	8011f32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2220      	movs	r2, #32
 8011f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2200      	movs	r2, #0
 8011f76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011f78:	bf00      	nop
 8011f7a:	3754      	adds	r7, #84	; 0x54
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	effffffe 	.word	0xeffffffe

08011f88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d101      	bne.n	8011f9e <HAL_UARTEx_DisableFifoMode+0x16>
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	e027      	b.n	8011fee <HAL_UARTEx_DisableFifoMode+0x66>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2224      	movs	r2, #36	; 0x24
 8011faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f022 0201 	bic.w	r2, r2, #1
 8011fc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011fcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2220      	movs	r2, #32
 8011fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011fec:	2300      	movs	r3, #0
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3714      	adds	r7, #20
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011ffa:	b580      	push	{r7, lr}
 8011ffc:	b084      	sub	sp, #16
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
 8012002:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801200a:	2b01      	cmp	r3, #1
 801200c:	d101      	bne.n	8012012 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801200e:	2302      	movs	r3, #2
 8012010:	e02d      	b.n	801206e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2201      	movs	r2, #1
 8012016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2224      	movs	r2, #36	; 0x24
 801201e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f022 0201 	bic.w	r2, r2, #1
 8012038:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	689b      	ldr	r3, [r3, #8]
 8012040:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	683a      	ldr	r2, [r7, #0]
 801204a:	430a      	orrs	r2, r1
 801204c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f850 	bl	80120f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2220      	movs	r2, #32
 8012060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801206c:	2300      	movs	r3, #0
}
 801206e:	4618      	mov	r0, r3
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012076:	b580      	push	{r7, lr}
 8012078:	b084      	sub	sp, #16
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
 801207e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012086:	2b01      	cmp	r3, #1
 8012088:	d101      	bne.n	801208e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801208a:	2302      	movs	r3, #2
 801208c:	e02d      	b.n	80120ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2201      	movs	r2, #1
 8012092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2224      	movs	r2, #36	; 0x24
 801209a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f022 0201 	bic.w	r2, r2, #1
 80120b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	689b      	ldr	r3, [r3, #8]
 80120bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	683a      	ldr	r2, [r7, #0]
 80120c6:	430a      	orrs	r2, r1
 80120c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 f812 	bl	80120f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68fa      	ldr	r2, [r7, #12]
 80120d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2220      	movs	r2, #32
 80120dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80120e8:	2300      	movs	r3, #0
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
	...

080120f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012100:	2b00      	cmp	r3, #0
 8012102:	d108      	bne.n	8012116 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2201      	movs	r2, #1
 8012108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2201      	movs	r2, #1
 8012110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012114:	e031      	b.n	801217a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012116:	2310      	movs	r3, #16
 8012118:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801211a:	2310      	movs	r3, #16
 801211c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	0e5b      	lsrs	r3, r3, #25
 8012126:	b2db      	uxtb	r3, r3
 8012128:	f003 0307 	and.w	r3, r3, #7
 801212c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	689b      	ldr	r3, [r3, #8]
 8012134:	0f5b      	lsrs	r3, r3, #29
 8012136:	b2db      	uxtb	r3, r3
 8012138:	f003 0307 	and.w	r3, r3, #7
 801213c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801213e:	7bbb      	ldrb	r3, [r7, #14]
 8012140:	7b3a      	ldrb	r2, [r7, #12]
 8012142:	4911      	ldr	r1, [pc, #68]	; (8012188 <UARTEx_SetNbDataToProcess+0x94>)
 8012144:	5c8a      	ldrb	r2, [r1, r2]
 8012146:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801214a:	7b3a      	ldrb	r2, [r7, #12]
 801214c:	490f      	ldr	r1, [pc, #60]	; (801218c <UARTEx_SetNbDataToProcess+0x98>)
 801214e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012150:	fb93 f3f2 	sdiv	r3, r3, r2
 8012154:	b29a      	uxth	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801215c:	7bfb      	ldrb	r3, [r7, #15]
 801215e:	7b7a      	ldrb	r2, [r7, #13]
 8012160:	4909      	ldr	r1, [pc, #36]	; (8012188 <UARTEx_SetNbDataToProcess+0x94>)
 8012162:	5c8a      	ldrb	r2, [r1, r2]
 8012164:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012168:	7b7a      	ldrb	r2, [r7, #13]
 801216a:	4908      	ldr	r1, [pc, #32]	; (801218c <UARTEx_SetNbDataToProcess+0x98>)
 801216c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801216e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012172:	b29a      	uxth	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801217a:	bf00      	nop
 801217c:	3714      	adds	r7, #20
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	080188a8 	.word	0x080188a8
 801218c:	080188b0 	.word	0x080188b0

08012190 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012190:	b084      	sub	sp, #16
 8012192:	b480      	push	{r7}
 8012194:	b085      	sub	sp, #20
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	f107 001c 	add.w	r0, r7, #28
 801219e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80121a2:	2300      	movs	r3, #0
 80121a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80121a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80121a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80121aa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80121ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80121b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80121b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80121b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80121b8:	68fa      	ldr	r2, [r7, #12]
 80121ba:	4313      	orrs	r3, r2
 80121bc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	685a      	ldr	r2, [r3, #4]
 80121c2:	4b07      	ldr	r3, [pc, #28]	; (80121e0 <SDMMC_Init+0x50>)
 80121c4:	4013      	ands	r3, r2
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	431a      	orrs	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80121ce:	2300      	movs	r3, #0
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3714      	adds	r7, #20
 80121d4:	46bd      	mov	sp, r7
 80121d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121da:	b004      	add	sp, #16
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop
 80121e0:	ffc02c00 	.word	0xffc02c00

080121e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr

080121fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80121fe:	b480      	push	{r7}
 8012200:	b083      	sub	sp, #12
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	f043 0203 	orr.w	r2, r3, #3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	370c      	adds	r7, #12
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr

08012242 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012242:	b480      	push	{r7}
 8012244:	b083      	sub	sp, #12
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f003 0303 	and.w	r3, r3, #3
}
 8012252:	4618      	mov	r0, r3
 8012254:	370c      	adds	r7, #12
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr
	...

08012260 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012260:	b480      	push	{r7}
 8012262:	b085      	sub	sp, #20
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801226a:	2300      	movs	r3, #0
 801226c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801227e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012284:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801228a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801228c:	68fa      	ldr	r2, [r7, #12]
 801228e:	4313      	orrs	r3, r2
 8012290:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	68da      	ldr	r2, [r3, #12]
 8012296:	4b06      	ldr	r3, [pc, #24]	; (80122b0 <SDMMC_SendCommand+0x50>)
 8012298:	4013      	ands	r3, r2
 801229a:	68fa      	ldr	r2, [r7, #12]
 801229c:	431a      	orrs	r2, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80122a2:	2300      	movs	r3, #0
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3714      	adds	r7, #20
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr
 80122b0:	fffee0c0 	.word	0xfffee0c0

080122b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b083      	sub	sp, #12
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	691b      	ldr	r3, [r3, #16]
 80122c0:	b2db      	uxtb	r3, r3
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	370c      	adds	r7, #12
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80122ce:	b480      	push	{r7}
 80122d0:	b085      	sub	sp, #20
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
 80122d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	3314      	adds	r3, #20
 80122dc:	461a      	mov	r2, r3
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	4413      	add	r3, r2
 80122e2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	681b      	ldr	r3, [r3, #0]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3714      	adds	r7, #20
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr

080122f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80122f4:	b480      	push	{r7}
 80122f6:	b085      	sub	sp, #20
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80122fe:	2300      	movs	r3, #0
 8012300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	681a      	ldr	r2, [r3, #0]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	685a      	ldr	r2, [r3, #4]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801231a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012320:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012326:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	4313      	orrs	r3, r2
 801232c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012332:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	431a      	orrs	r2, r3
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801233e:	2300      	movs	r3, #0

}
 8012340:	4618      	mov	r0, r3
 8012342:	3714      	adds	r7, #20
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b088      	sub	sp, #32
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801235a:	2310      	movs	r3, #16
 801235c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801235e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012364:	2300      	movs	r3, #0
 8012366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801236c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801236e:	f107 0308 	add.w	r3, r7, #8
 8012372:	4619      	mov	r1, r3
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7ff ff73 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801237a:	f241 3288 	movw	r2, #5000	; 0x1388
 801237e:	2110      	movs	r1, #16
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f000 fa5f 	bl	8012844 <SDMMC_GetCmdResp1>
 8012386:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012388:	69fb      	ldr	r3, [r7, #28]
}
 801238a:	4618      	mov	r0, r3
 801238c:	3720      	adds	r7, #32
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b088      	sub	sp, #32
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
 801239a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80123a0:	2311      	movs	r3, #17
 80123a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123aa:	2300      	movs	r3, #0
 80123ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123b4:	f107 0308 	add.w	r3, r7, #8
 80123b8:	4619      	mov	r1, r3
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f7ff ff50 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80123c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80123c4:	2111      	movs	r1, #17
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 fa3c 	bl	8012844 <SDMMC_GetCmdResp1>
 80123cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ce:	69fb      	ldr	r3, [r7, #28]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3720      	adds	r7, #32
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b088      	sub	sp, #32
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80123e6:	2312      	movs	r3, #18
 80123e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123f0:	2300      	movs	r3, #0
 80123f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123fa:	f107 0308 	add.w	r3, r7, #8
 80123fe:	4619      	mov	r1, r3
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f7ff ff2d 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012406:	f241 3288 	movw	r2, #5000	; 0x1388
 801240a:	2112      	movs	r1, #18
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 fa19 	bl	8012844 <SDMMC_GetCmdResp1>
 8012412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012414:	69fb      	ldr	r3, [r7, #28]
}
 8012416:	4618      	mov	r0, r3
 8012418:	3720      	adds	r7, #32
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801241e:	b580      	push	{r7, lr}
 8012420:	b088      	sub	sp, #32
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
 8012426:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801242c:	2318      	movs	r3, #24
 801242e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012436:	2300      	movs	r3, #0
 8012438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801243a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801243e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012440:	f107 0308 	add.w	r3, r7, #8
 8012444:	4619      	mov	r1, r3
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f7ff ff0a 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012450:	2118      	movs	r1, #24
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f9f6 	bl	8012844 <SDMMC_GetCmdResp1>
 8012458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801245a:	69fb      	ldr	r3, [r7, #28]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b088      	sub	sp, #32
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012472:	2319      	movs	r3, #25
 8012474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012476:	f44f 7380 	mov.w	r3, #256	; 0x100
 801247a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801247c:	2300      	movs	r3, #0
 801247e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012484:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012486:	f107 0308 	add.w	r3, r7, #8
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff fee7 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012492:	f241 3288 	movw	r2, #5000	; 0x1388
 8012496:	2119      	movs	r1, #25
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 f9d3 	bl	8012844 <SDMMC_GetCmdResp1>
 801249e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124a0:	69fb      	ldr	r3, [r7, #28]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3720      	adds	r7, #32
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
	...

080124ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b088      	sub	sp, #32
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80124b4:	2300      	movs	r3, #0
 80124b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80124b8:	230c      	movs	r3, #12
 80124ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124c2:	2300      	movs	r3, #0
 80124c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124ca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	68db      	ldr	r3, [r3, #12]
 80124d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124e4:	f107 0308 	add.w	r3, r7, #8
 80124e8:	4619      	mov	r1, r3
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f7ff feb8 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80124f0:	4a0b      	ldr	r2, [pc, #44]	; (8012520 <SDMMC_CmdStopTransfer+0x74>)
 80124f2:	210c      	movs	r1, #12
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 f9a5 	bl	8012844 <SDMMC_GetCmdResp1>
 80124fa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801250e:	d101      	bne.n	8012514 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012510:	2300      	movs	r3, #0
 8012512:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012514:	69fb      	ldr	r3, [r7, #28]
}
 8012516:	4618      	mov	r0, r3
 8012518:	3720      	adds	r7, #32
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	05f5e100 	.word	0x05f5e100

08012524 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b088      	sub	sp, #32
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012532:	2307      	movs	r3, #7
 8012534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012536:	f44f 7380 	mov.w	r3, #256	; 0x100
 801253a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801253c:	2300      	movs	r3, #0
 801253e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012544:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012546:	f107 0308 	add.w	r3, r7, #8
 801254a:	4619      	mov	r1, r3
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7ff fe87 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012552:	f241 3288 	movw	r2, #5000	; 0x1388
 8012556:	2107      	movs	r1, #7
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 f973 	bl	8012844 <SDMMC_GetCmdResp1>
 801255e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012560:	69fb      	ldr	r3, [r7, #28]
}
 8012562:	4618      	mov	r0, r3
 8012564:	3720      	adds	r7, #32
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801256a:	b580      	push	{r7, lr}
 801256c:	b088      	sub	sp, #32
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012572:	2300      	movs	r3, #0
 8012574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012576:	2300      	movs	r3, #0
 8012578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801257a:	2300      	movs	r3, #0
 801257c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801257e:	2300      	movs	r3, #0
 8012580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012586:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012588:	f107 0308 	add.w	r3, r7, #8
 801258c:	4619      	mov	r1, r3
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7ff fe66 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 fb97 	bl	8012cc8 <SDMMC_GetCmdError>
 801259a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801259c:	69fb      	ldr	r3, [r7, #28]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3720      	adds	r7, #32
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b088      	sub	sp, #32
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80125ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80125b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80125b4:	2308      	movs	r3, #8
 80125b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125be:	2300      	movs	r3, #0
 80125c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125c8:	f107 0308 	add.w	r3, r7, #8
 80125cc:	4619      	mov	r1, r3
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7ff fe46 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f000 fb29 	bl	8012c2c <SDMMC_GetCmdResp7>
 80125da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125dc:	69fb      	ldr	r3, [r7, #28]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3720      	adds	r7, #32
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b088      	sub	sp, #32
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
 80125ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80125f4:	2337      	movs	r3, #55	; 0x37
 80125f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125fe:	2300      	movs	r3, #0
 8012600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012608:	f107 0308 	add.w	r3, r7, #8
 801260c:	4619      	mov	r1, r3
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f7ff fe26 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012614:	f241 3288 	movw	r2, #5000	; 0x1388
 8012618:	2137      	movs	r1, #55	; 0x37
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f000 f912 	bl	8012844 <SDMMC_GetCmdResp1>
 8012620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012622:	69fb      	ldr	r3, [r7, #28]
}
 8012624:	4618      	mov	r0, r3
 8012626:	3720      	adds	r7, #32
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}

0801262c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b088      	sub	sp, #32
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
 8012634:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801263a:	2329      	movs	r3, #41	; 0x29
 801263c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801263e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012644:	2300      	movs	r3, #0
 8012646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801264c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801264e:	f107 0308 	add.w	r3, r7, #8
 8012652:	4619      	mov	r1, r3
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f7ff fe03 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 fa2e 	bl	8012abc <SDMMC_GetCmdResp3>
 8012660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012662:	69fb      	ldr	r3, [r7, #28]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3720      	adds	r7, #32
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}

0801266c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b088      	sub	sp, #32
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801267a:	2306      	movs	r3, #6
 801267c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801267e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012684:	2300      	movs	r3, #0
 8012686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801268c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801268e:	f107 0308 	add.w	r3, r7, #8
 8012692:	4619      	mov	r1, r3
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7ff fde3 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801269a:	f241 3288 	movw	r2, #5000	; 0x1388
 801269e:	2106      	movs	r1, #6
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f000 f8cf 	bl	8012844 <SDMMC_GetCmdResp1>
 80126a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126a8:	69fb      	ldr	r3, [r7, #28]
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3720      	adds	r7, #32
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}

080126b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80126b2:	b580      	push	{r7, lr}
 80126b4:	b088      	sub	sp, #32
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80126ba:	2300      	movs	r3, #0
 80126bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80126be:	2333      	movs	r3, #51	; 0x33
 80126c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126c8:	2300      	movs	r3, #0
 80126ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126d2:	f107 0308 	add.w	r3, r7, #8
 80126d6:	4619      	mov	r1, r3
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7ff fdc1 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80126de:	f241 3288 	movw	r2, #5000	; 0x1388
 80126e2:	2133      	movs	r1, #51	; 0x33
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 f8ad 	bl	8012844 <SDMMC_GetCmdResp1>
 80126ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126ec:	69fb      	ldr	r3, [r7, #28]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3720      	adds	r7, #32
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b088      	sub	sp, #32
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80126fe:	2300      	movs	r3, #0
 8012700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012702:	2302      	movs	r3, #2
 8012704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012706:	f44f 7340 	mov.w	r3, #768	; 0x300
 801270a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801270c:	2300      	movs	r3, #0
 801270e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012716:	f107 0308 	add.w	r3, r7, #8
 801271a:	4619      	mov	r1, r3
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7ff fd9f 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 f980 	bl	8012a28 <SDMMC_GetCmdResp2>
 8012728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801272a:	69fb      	ldr	r3, [r7, #28]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3720      	adds	r7, #32
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b088      	sub	sp, #32
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012742:	2309      	movs	r3, #9
 8012744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012746:	f44f 7340 	mov.w	r3, #768	; 0x300
 801274a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801274c:	2300      	movs	r3, #0
 801274e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012754:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012756:	f107 0308 	add.w	r3, r7, #8
 801275a:	4619      	mov	r1, r3
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7ff fd7f 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 f960 	bl	8012a28 <SDMMC_GetCmdResp2>
 8012768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801276a:	69fb      	ldr	r3, [r7, #28]
}
 801276c:	4618      	mov	r0, r3
 801276e:	3720      	adds	r7, #32
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b088      	sub	sp, #32
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801277e:	2300      	movs	r3, #0
 8012780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012782:	2303      	movs	r3, #3
 8012784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012786:	f44f 7380 	mov.w	r3, #256	; 0x100
 801278a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801278c:	2300      	movs	r3, #0
 801278e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012794:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012796:	f107 0308 	add.w	r3, r7, #8
 801279a:	4619      	mov	r1, r3
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7ff fd5f 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	2103      	movs	r1, #3
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 f9c8 	bl	8012b3c <SDMMC_GetCmdResp6>
 80127ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127ae:	69fb      	ldr	r3, [r7, #28]
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3720      	adds	r7, #32
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b088      	sub	sp, #32
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80127c6:	230d      	movs	r3, #13
 80127c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127d0:	2300      	movs	r3, #0
 80127d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127da:	f107 0308 	add.w	r3, r7, #8
 80127de:	4619      	mov	r1, r3
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7ff fd3d 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80127e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80127ea:	210d      	movs	r1, #13
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 f829 	bl	8012844 <SDMMC_GetCmdResp1>
 80127f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f4:	69fb      	ldr	r3, [r7, #28]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3720      	adds	r7, #32
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}

080127fe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80127fe:	b580      	push	{r7, lr}
 8012800:	b088      	sub	sp, #32
 8012802:	af00      	add	r7, sp, #0
 8012804:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012806:	2300      	movs	r3, #0
 8012808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801280a:	230d      	movs	r3, #13
 801280c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801280e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012814:	2300      	movs	r3, #0
 8012816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801281c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801281e:	f107 0308 	add.w	r3, r7, #8
 8012822:	4619      	mov	r1, r3
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff fd1b 	bl	8012260 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801282a:	f241 3288 	movw	r2, #5000	; 0x1388
 801282e:	210d      	movs	r1, #13
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 f807 	bl	8012844 <SDMMC_GetCmdResp1>
 8012836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012838:	69fb      	ldr	r3, [r7, #28]
}
 801283a:	4618      	mov	r0, r3
 801283c:	3720      	adds	r7, #32
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
	...

08012844 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b088      	sub	sp, #32
 8012848:	af00      	add	r7, sp, #0
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	460b      	mov	r3, r1
 801284e:	607a      	str	r2, [r7, #4]
 8012850:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012852:	4b70      	ldr	r3, [pc, #448]	; (8012a14 <SDMMC_GetCmdResp1+0x1d0>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a70      	ldr	r2, [pc, #448]	; (8012a18 <SDMMC_GetCmdResp1+0x1d4>)
 8012858:	fba2 2303 	umull	r2, r3, r2, r3
 801285c:	0a5a      	lsrs	r2, r3, #9
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	fb02 f303 	mul.w	r3, r2, r3
 8012864:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	1e5a      	subs	r2, r3, #1
 801286a:	61fa      	str	r2, [r7, #28]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d102      	bne.n	8012876 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012874:	e0c9      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801287c:	69ba      	ldr	r2, [r7, #24]
 801287e:	4b67      	ldr	r3, [pc, #412]	; (8012a1c <SDMMC_GetCmdResp1+0x1d8>)
 8012880:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012882:	2b00      	cmp	r3, #0
 8012884:	d0ef      	beq.n	8012866 <SDMMC_GetCmdResp1+0x22>
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801288c:	2b00      	cmp	r3, #0
 801288e:	d1ea      	bne.n	8012866 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012894:	f003 0304 	and.w	r3, r3, #4
 8012898:	2b00      	cmp	r3, #0
 801289a:	d004      	beq.n	80128a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2204      	movs	r2, #4
 80128a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128a2:	2304      	movs	r3, #4
 80128a4:	e0b1      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128aa:	f003 0301 	and.w	r3, r3, #1
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d004      	beq.n	80128bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2201      	movs	r2, #1
 80128b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128b8:	2301      	movs	r3, #1
 80128ba:	e0a6      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	4a58      	ldr	r2, [pc, #352]	; (8012a20 <SDMMC_GetCmdResp1+0x1dc>)
 80128c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f7ff fcf6 	bl	80122b4 <SDMMC_GetCommandResponse>
 80128c8:	4603      	mov	r3, r0
 80128ca:	461a      	mov	r2, r3
 80128cc:	7afb      	ldrb	r3, [r7, #11]
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d001      	beq.n	80128d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128d2:	2301      	movs	r3, #1
 80128d4:	e099      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80128d6:	2100      	movs	r1, #0
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f7ff fcf8 	bl	80122ce <SDMMC_GetResponse>
 80128de:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80128e0:	697a      	ldr	r2, [r7, #20]
 80128e2:	4b50      	ldr	r3, [pc, #320]	; (8012a24 <SDMMC_GetCmdResp1+0x1e0>)
 80128e4:	4013      	ands	r3, r2
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d101      	bne.n	80128ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80128ea:	2300      	movs	r3, #0
 80128ec:	e08d      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	da02      	bge.n	80128fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80128f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80128f8:	e087      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012900:	2b00      	cmp	r3, #0
 8012902:	d001      	beq.n	8012908 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012904:	2340      	movs	r3, #64	; 0x40
 8012906:	e080      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801290e:	2b00      	cmp	r3, #0
 8012910:	d001      	beq.n	8012916 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012912:	2380      	movs	r3, #128	; 0x80
 8012914:	e079      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801291c:	2b00      	cmp	r3, #0
 801291e:	d002      	beq.n	8012926 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012924:	e071      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801292c:	2b00      	cmp	r3, #0
 801292e:	d002      	beq.n	8012936 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012934:	e069      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801293c:	2b00      	cmp	r3, #0
 801293e:	d002      	beq.n	8012946 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012944:	e061      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801294c:	2b00      	cmp	r3, #0
 801294e:	d002      	beq.n	8012956 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012954:	e059      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801295c:	2b00      	cmp	r3, #0
 801295e:	d002      	beq.n	8012966 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012964:	e051      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801296c:	2b00      	cmp	r3, #0
 801296e:	d002      	beq.n	8012976 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012974:	e049      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801297c:	2b00      	cmp	r3, #0
 801297e:	d002      	beq.n	8012986 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012984:	e041      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012994:	e039      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80129a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80129a4:	e031      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d002      	beq.n	80129b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80129b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80129b4:	e029      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d002      	beq.n	80129c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80129c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80129c4:	e021      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80129d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80129d4:	e019      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d002      	beq.n	80129e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80129e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80129e4:	e011      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d002      	beq.n	80129f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80129f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80129f4:	e009      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	f003 0308 	and.w	r3, r3, #8
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d002      	beq.n	8012a06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012a00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012a04:	e001      	b.n	8012a0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3720      	adds	r7, #32
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	24000000 	.word	0x24000000
 8012a18:	10624dd3 	.word	0x10624dd3
 8012a1c:	00200045 	.word	0x00200045
 8012a20:	002000c5 	.word	0x002000c5
 8012a24:	fdffe008 	.word	0xfdffe008

08012a28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b085      	sub	sp, #20
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a30:	4b1f      	ldr	r3, [pc, #124]	; (8012ab0 <SDMMC_GetCmdResp2+0x88>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	4a1f      	ldr	r2, [pc, #124]	; (8012ab4 <SDMMC_GetCmdResp2+0x8c>)
 8012a36:	fba2 2303 	umull	r2, r3, r2, r3
 8012a3a:	0a5b      	lsrs	r3, r3, #9
 8012a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a40:	fb02 f303 	mul.w	r3, r2, r3
 8012a44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	1e5a      	subs	r2, r3, #1
 8012a4a:	60fa      	str	r2, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d102      	bne.n	8012a56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a54:	e026      	b.n	8012aa4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d0ef      	beq.n	8012a46 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d1ea      	bne.n	8012a46 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a74:	f003 0304 	and.w	r3, r3, #4
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d004      	beq.n	8012a86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2204      	movs	r2, #4
 8012a80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a82:	2304      	movs	r3, #4
 8012a84:	e00e      	b.n	8012aa4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a8a:	f003 0301 	and.w	r3, r3, #1
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d004      	beq.n	8012a9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2201      	movs	r2, #1
 8012a96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e003      	b.n	8012aa4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4a06      	ldr	r2, [pc, #24]	; (8012ab8 <SDMMC_GetCmdResp2+0x90>)
 8012aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012aa2:	2300      	movs	r3, #0
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3714      	adds	r7, #20
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr
 8012ab0:	24000000 	.word	0x24000000
 8012ab4:	10624dd3 	.word	0x10624dd3
 8012ab8:	002000c5 	.word	0x002000c5

08012abc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b085      	sub	sp, #20
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012ac4:	4b1a      	ldr	r3, [pc, #104]	; (8012b30 <SDMMC_GetCmdResp3+0x74>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4a1a      	ldr	r2, [pc, #104]	; (8012b34 <SDMMC_GetCmdResp3+0x78>)
 8012aca:	fba2 2303 	umull	r2, r3, r2, r3
 8012ace:	0a5b      	lsrs	r3, r3, #9
 8012ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ad4:	fb02 f303 	mul.w	r3, r2, r3
 8012ad8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	1e5a      	subs	r2, r3, #1
 8012ade:	60fa      	str	r2, [r7, #12]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d102      	bne.n	8012aea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ae4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ae8:	e01b      	b.n	8012b22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d0ef      	beq.n	8012ada <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d1ea      	bne.n	8012ada <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b08:	f003 0304 	and.w	r3, r3, #4
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d004      	beq.n	8012b1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2204      	movs	r2, #4
 8012b14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b16:	2304      	movs	r3, #4
 8012b18:	e003      	b.n	8012b22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4a06      	ldr	r2, [pc, #24]	; (8012b38 <SDMMC_GetCmdResp3+0x7c>)
 8012b1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3714      	adds	r7, #20
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop
 8012b30:	24000000 	.word	0x24000000
 8012b34:	10624dd3 	.word	0x10624dd3
 8012b38:	002000c5 	.word	0x002000c5

08012b3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b088      	sub	sp, #32
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	460b      	mov	r3, r1
 8012b46:	607a      	str	r2, [r7, #4]
 8012b48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012b4a:	4b35      	ldr	r3, [pc, #212]	; (8012c20 <SDMMC_GetCmdResp6+0xe4>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4a35      	ldr	r2, [pc, #212]	; (8012c24 <SDMMC_GetCmdResp6+0xe8>)
 8012b50:	fba2 2303 	umull	r2, r3, r2, r3
 8012b54:	0a5b      	lsrs	r3, r3, #9
 8012b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b5a:	fb02 f303 	mul.w	r3, r2, r3
 8012b5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	1e5a      	subs	r2, r3, #1
 8012b64:	61fa      	str	r2, [r7, #28]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d102      	bne.n	8012b70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b6e:	e052      	b.n	8012c16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b74:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b76:	69bb      	ldr	r3, [r7, #24]
 8012b78:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d0ef      	beq.n	8012b60 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d1ea      	bne.n	8012b60 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b8e:	f003 0304 	and.w	r3, r3, #4
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d004      	beq.n	8012ba0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2204      	movs	r2, #4
 8012b9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b9c:	2304      	movs	r3, #4
 8012b9e:	e03a      	b.n	8012c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ba4:	f003 0301 	and.w	r3, r3, #1
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d004      	beq.n	8012bb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	e02f      	b.n	8012c16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012bb6:	68f8      	ldr	r0, [r7, #12]
 8012bb8:	f7ff fb7c 	bl	80122b4 <SDMMC_GetCommandResponse>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	7afb      	ldrb	r3, [r7, #11]
 8012bc2:	4293      	cmp	r3, r2
 8012bc4:	d001      	beq.n	8012bca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e025      	b.n	8012c16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	4a16      	ldr	r2, [pc, #88]	; (8012c28 <SDMMC_GetCmdResp6+0xec>)
 8012bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012bd0:	2100      	movs	r1, #0
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f7ff fb7b 	bl	80122ce <SDMMC_GetResponse>
 8012bd8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d106      	bne.n	8012bf2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	0c1b      	lsrs	r3, r3, #16
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e011      	b.n	8012c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d002      	beq.n	8012c02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c00:	e009      	b.n	8012c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d002      	beq.n	8012c12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c10:	e001      	b.n	8012c16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3720      	adds	r7, #32
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	24000000 	.word	0x24000000
 8012c24:	10624dd3 	.word	0x10624dd3
 8012c28:	002000c5 	.word	0x002000c5

08012c2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012c34:	4b22      	ldr	r3, [pc, #136]	; (8012cc0 <SDMMC_GetCmdResp7+0x94>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a22      	ldr	r2, [pc, #136]	; (8012cc4 <SDMMC_GetCmdResp7+0x98>)
 8012c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012c3e:	0a5b      	lsrs	r3, r3, #9
 8012c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c44:	fb02 f303 	mul.w	r3, r2, r3
 8012c48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	1e5a      	subs	r2, r3, #1
 8012c4e:	60fa      	str	r2, [r7, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d102      	bne.n	8012c5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c58:	e02c      	b.n	8012cb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d0ef      	beq.n	8012c4a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d1ea      	bne.n	8012c4a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c78:	f003 0304 	and.w	r3, r3, #4
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d004      	beq.n	8012c8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2204      	movs	r2, #4
 8012c84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c86:	2304      	movs	r3, #4
 8012c88:	e014      	b.n	8012cb4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c8e:	f003 0301 	and.w	r3, r3, #1
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d004      	beq.n	8012ca0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e009      	b.n	8012cb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d002      	beq.n	8012cb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2240      	movs	r2, #64	; 0x40
 8012cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012cb2:	2300      	movs	r3, #0

}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3714      	adds	r7, #20
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	24000000 	.word	0x24000000
 8012cc4:	10624dd3 	.word	0x10624dd3

08012cc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012cd0:	4b11      	ldr	r3, [pc, #68]	; (8012d18 <SDMMC_GetCmdError+0x50>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	4a11      	ldr	r2, [pc, #68]	; (8012d1c <SDMMC_GetCmdError+0x54>)
 8012cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8012cda:	0a5b      	lsrs	r3, r3, #9
 8012cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ce0:	fb02 f303 	mul.w	r3, r2, r3
 8012ce4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	1e5a      	subs	r2, r3, #1
 8012cea:	60fa      	str	r2, [r7, #12]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d102      	bne.n	8012cf6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012cf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012cf4:	e009      	b.n	8012d0a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d0f1      	beq.n	8012ce6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4a06      	ldr	r2, [pc, #24]	; (8012d20 <SDMMC_GetCmdError+0x58>)
 8012d06:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	24000000 	.word	0x24000000
 8012d1c:	10624dd3 	.word	0x10624dd3
 8012d20:	002000c5 	.word	0x002000c5

08012d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d24:	b084      	sub	sp, #16
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b084      	sub	sp, #16
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	f107 001c 	add.w	r0, r7, #28
 8012d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d38:	2b01      	cmp	r3, #1
 8012d3a:	d120      	bne.n	8012d7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	68da      	ldr	r2, [r3, #12]
 8012d4c:	4b2a      	ldr	r3, [pc, #168]	; (8012df8 <USB_CoreInit+0xd4>)
 8012d4e:	4013      	ands	r3, r2
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d105      	bne.n	8012d72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f001 faf8 	bl	8014368 <USB_CoreReset>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	73fb      	strb	r3, [r7, #15]
 8012d7c:	e01a      	b.n	8012db4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f001 faec 	bl	8014368 <USB_CoreReset>
 8012d90:	4603      	mov	r3, r0
 8012d92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d106      	bne.n	8012da8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	639a      	str	r2, [r3, #56]	; 0x38
 8012da6:	e005      	b.n	8012db4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d116      	bne.n	8012de8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012dbe:	b29a      	uxth	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012dc8:	4b0c      	ldr	r3, [pc, #48]	; (8012dfc <USB_CoreInit+0xd8>)
 8012dca:	4313      	orrs	r3, r2
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	689b      	ldr	r3, [r3, #8]
 8012dd4:	f043 0206 	orr.w	r2, r3, #6
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	f043 0220 	orr.w	r2, r3, #32
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3710      	adds	r7, #16
 8012dee:	46bd      	mov	sp, r7
 8012df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012df4:	b004      	add	sp, #16
 8012df6:	4770      	bx	lr
 8012df8:	ffbdffbf 	.word	0xffbdffbf
 8012dfc:	03ee0000 	.word	0x03ee0000

08012e00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b087      	sub	sp, #28
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	4613      	mov	r3, r2
 8012e0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012e0e:	79fb      	ldrb	r3, [r7, #7]
 8012e10:	2b02      	cmp	r3, #2
 8012e12:	d165      	bne.n	8012ee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	4a41      	ldr	r2, [pc, #260]	; (8012f1c <USB_SetTurnaroundTime+0x11c>)
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d906      	bls.n	8012e2a <USB_SetTurnaroundTime+0x2a>
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	4a40      	ldr	r2, [pc, #256]	; (8012f20 <USB_SetTurnaroundTime+0x120>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d202      	bcs.n	8012e2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012e24:	230f      	movs	r3, #15
 8012e26:	617b      	str	r3, [r7, #20]
 8012e28:	e062      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	4a3c      	ldr	r2, [pc, #240]	; (8012f20 <USB_SetTurnaroundTime+0x120>)
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d306      	bcc.n	8012e40 <USB_SetTurnaroundTime+0x40>
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	4a3b      	ldr	r2, [pc, #236]	; (8012f24 <USB_SetTurnaroundTime+0x124>)
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d202      	bcs.n	8012e40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012e3a:	230e      	movs	r3, #14
 8012e3c:	617b      	str	r3, [r7, #20]
 8012e3e:	e057      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	4a38      	ldr	r2, [pc, #224]	; (8012f24 <USB_SetTurnaroundTime+0x124>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d306      	bcc.n	8012e56 <USB_SetTurnaroundTime+0x56>
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	4a37      	ldr	r2, [pc, #220]	; (8012f28 <USB_SetTurnaroundTime+0x128>)
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d202      	bcs.n	8012e56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012e50:	230d      	movs	r3, #13
 8012e52:	617b      	str	r3, [r7, #20]
 8012e54:	e04c      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	4a33      	ldr	r2, [pc, #204]	; (8012f28 <USB_SetTurnaroundTime+0x128>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d306      	bcc.n	8012e6c <USB_SetTurnaroundTime+0x6c>
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	4a32      	ldr	r2, [pc, #200]	; (8012f2c <USB_SetTurnaroundTime+0x12c>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d802      	bhi.n	8012e6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012e66:	230c      	movs	r3, #12
 8012e68:	617b      	str	r3, [r7, #20]
 8012e6a:	e041      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	4a2f      	ldr	r2, [pc, #188]	; (8012f2c <USB_SetTurnaroundTime+0x12c>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d906      	bls.n	8012e82 <USB_SetTurnaroundTime+0x82>
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	4a2e      	ldr	r2, [pc, #184]	; (8012f30 <USB_SetTurnaroundTime+0x130>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d802      	bhi.n	8012e82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012e7c:	230b      	movs	r3, #11
 8012e7e:	617b      	str	r3, [r7, #20]
 8012e80:	e036      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	4a2a      	ldr	r2, [pc, #168]	; (8012f30 <USB_SetTurnaroundTime+0x130>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d906      	bls.n	8012e98 <USB_SetTurnaroundTime+0x98>
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	4a29      	ldr	r2, [pc, #164]	; (8012f34 <USB_SetTurnaroundTime+0x134>)
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d802      	bhi.n	8012e98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012e92:	230a      	movs	r3, #10
 8012e94:	617b      	str	r3, [r7, #20]
 8012e96:	e02b      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	4a26      	ldr	r2, [pc, #152]	; (8012f34 <USB_SetTurnaroundTime+0x134>)
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d906      	bls.n	8012eae <USB_SetTurnaroundTime+0xae>
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	4a25      	ldr	r2, [pc, #148]	; (8012f38 <USB_SetTurnaroundTime+0x138>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d202      	bcs.n	8012eae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012ea8:	2309      	movs	r3, #9
 8012eaa:	617b      	str	r3, [r7, #20]
 8012eac:	e020      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	4a21      	ldr	r2, [pc, #132]	; (8012f38 <USB_SetTurnaroundTime+0x138>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d306      	bcc.n	8012ec4 <USB_SetTurnaroundTime+0xc4>
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	4a20      	ldr	r2, [pc, #128]	; (8012f3c <USB_SetTurnaroundTime+0x13c>)
 8012eba:	4293      	cmp	r3, r2
 8012ebc:	d802      	bhi.n	8012ec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012ebe:	2308      	movs	r3, #8
 8012ec0:	617b      	str	r3, [r7, #20]
 8012ec2:	e015      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	4a1d      	ldr	r2, [pc, #116]	; (8012f3c <USB_SetTurnaroundTime+0x13c>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d906      	bls.n	8012eda <USB_SetTurnaroundTime+0xda>
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	4a1c      	ldr	r2, [pc, #112]	; (8012f40 <USB_SetTurnaroundTime+0x140>)
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d202      	bcs.n	8012eda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012ed4:	2307      	movs	r3, #7
 8012ed6:	617b      	str	r3, [r7, #20]
 8012ed8:	e00a      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012eda:	2306      	movs	r3, #6
 8012edc:	617b      	str	r3, [r7, #20]
 8012ede:	e007      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012ee0:	79fb      	ldrb	r3, [r7, #7]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012ee6:	2309      	movs	r3, #9
 8012ee8:	617b      	str	r3, [r7, #20]
 8012eea:	e001      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012eec:	2309      	movs	r3, #9
 8012eee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	68db      	ldr	r3, [r3, #12]
 8012ef4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	68da      	ldr	r2, [r3, #12]
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	029b      	lsls	r3, r3, #10
 8012f04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012f08:	431a      	orrs	r2, r3
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012f0e:	2300      	movs	r3, #0
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	371c      	adds	r7, #28
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr
 8012f1c:	00d8acbf 	.word	0x00d8acbf
 8012f20:	00e4e1c0 	.word	0x00e4e1c0
 8012f24:	00f42400 	.word	0x00f42400
 8012f28:	01067380 	.word	0x01067380
 8012f2c:	011a499f 	.word	0x011a499f
 8012f30:	01312cff 	.word	0x01312cff
 8012f34:	014ca43f 	.word	0x014ca43f
 8012f38:	016e3600 	.word	0x016e3600
 8012f3c:	01a6ab1f 	.word	0x01a6ab1f
 8012f40:	01e84800 	.word	0x01e84800

08012f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	689b      	ldr	r3, [r3, #8]
 8012f50:	f043 0201 	orr.w	r2, r3, #1
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f58:	2300      	movs	r3, #0
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	370c      	adds	r7, #12
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b083      	sub	sp, #12
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	f023 0201 	bic.w	r2, r3, #1
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	460b      	mov	r3, r1
 8012f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012f94:	2300      	movs	r3, #0
 8012f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012fa4:	78fb      	ldrb	r3, [r7, #3]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d115      	bne.n	8012fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	68db      	ldr	r3, [r3, #12]
 8012fae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012fb6:	2001      	movs	r0, #1
 8012fb8:	f7f0 fe02 	bl	8003bc0 <HAL_Delay>
      ms++;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f001 f93f 	bl	8014246 <USB_GetMode>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d01e      	beq.n	801300c <USB_SetCurrentMode+0x84>
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2b31      	cmp	r3, #49	; 0x31
 8012fd2:	d9f0      	bls.n	8012fb6 <USB_SetCurrentMode+0x2e>
 8012fd4:	e01a      	b.n	801300c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012fd6:	78fb      	ldrb	r3, [r7, #3]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d115      	bne.n	8013008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012fe8:	2001      	movs	r0, #1
 8012fea:	f7f0 fde9 	bl	8003bc0 <HAL_Delay>
      ms++;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f001 f926 	bl	8014246 <USB_GetMode>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d005      	beq.n	801300c <USB_SetCurrentMode+0x84>
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2b31      	cmp	r3, #49	; 0x31
 8013004:	d9f0      	bls.n	8012fe8 <USB_SetCurrentMode+0x60>
 8013006:	e001      	b.n	801300c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013008:	2301      	movs	r3, #1
 801300a:	e005      	b.n	8013018 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2b32      	cmp	r3, #50	; 0x32
 8013010:	d101      	bne.n	8013016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013012:	2301      	movs	r3, #1
 8013014:	e000      	b.n	8013018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013020:	b084      	sub	sp, #16
 8013022:	b580      	push	{r7, lr}
 8013024:	b086      	sub	sp, #24
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]
 801302a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801302e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013032:	2300      	movs	r3, #0
 8013034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801303a:	2300      	movs	r3, #0
 801303c:	613b      	str	r3, [r7, #16]
 801303e:	e009      	b.n	8013054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	3340      	adds	r3, #64	; 0x40
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	4413      	add	r3, r2
 801304a:	2200      	movs	r2, #0
 801304c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	3301      	adds	r3, #1
 8013052:	613b      	str	r3, [r7, #16]
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	2b0e      	cmp	r3, #14
 8013058:	d9f2      	bls.n	8013040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801305a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801305c:	2b00      	cmp	r3, #0
 801305e:	d11c      	bne.n	801309a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	68fa      	ldr	r2, [r7, #12]
 801306a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801306e:	f043 0302 	orr.w	r3, r3, #2
 8013072:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013078:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	601a      	str	r2, [r3, #0]
 8013098:	e005      	b.n	80130a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801309e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130ac:	461a      	mov	r2, r3
 80130ae:	2300      	movs	r3, #0
 80130b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130b8:	4619      	mov	r1, r3
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130c0:	461a      	mov	r2, r3
 80130c2:	680b      	ldr	r3, [r1, #0]
 80130c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80130c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c8:	2b01      	cmp	r3, #1
 80130ca:	d10c      	bne.n	80130e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80130cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d104      	bne.n	80130dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80130d2:	2100      	movs	r1, #0
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 f965 	bl	80133a4 <USB_SetDevSpeed>
 80130da:	e008      	b.n	80130ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80130dc:	2101      	movs	r1, #1
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f000 f960 	bl	80133a4 <USB_SetDevSpeed>
 80130e4:	e003      	b.n	80130ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80130e6:	2103      	movs	r1, #3
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f000 f95b 	bl	80133a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80130ee:	2110      	movs	r1, #16
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 f8f3 	bl	80132dc <USB_FlushTxFifo>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d001      	beq.n	8013100 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80130fc:	2301      	movs	r3, #1
 80130fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f000 f91f 	bl	8013344 <USB_FlushRxFifo>
 8013106:	4603      	mov	r3, r0
 8013108:	2b00      	cmp	r3, #0
 801310a:	d001      	beq.n	8013110 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801310c:	2301      	movs	r3, #1
 801310e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013116:	461a      	mov	r2, r3
 8013118:	2300      	movs	r3, #0
 801311a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013122:	461a      	mov	r2, r3
 8013124:	2300      	movs	r3, #0
 8013126:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801312e:	461a      	mov	r2, r3
 8013130:	2300      	movs	r3, #0
 8013132:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013134:	2300      	movs	r3, #0
 8013136:	613b      	str	r3, [r7, #16]
 8013138:	e043      	b.n	80131c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	015a      	lsls	r2, r3, #5
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	4413      	add	r3, r2
 8013142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801314c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013150:	d118      	bne.n	8013184 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d10a      	bne.n	801316e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	015a      	lsls	r2, r3, #5
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	4413      	add	r3, r2
 8013160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013164:	461a      	mov	r2, r3
 8013166:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801316a:	6013      	str	r3, [r2, #0]
 801316c:	e013      	b.n	8013196 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	015a      	lsls	r2, r3, #5
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	4413      	add	r3, r2
 8013176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801317a:	461a      	mov	r2, r3
 801317c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013180:	6013      	str	r3, [r2, #0]
 8013182:	e008      	b.n	8013196 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	015a      	lsls	r2, r3, #5
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	4413      	add	r3, r2
 801318c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013190:	461a      	mov	r2, r3
 8013192:	2300      	movs	r3, #0
 8013194:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	015a      	lsls	r2, r3, #5
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	4413      	add	r3, r2
 801319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131a2:	461a      	mov	r2, r3
 80131a4:	2300      	movs	r3, #0
 80131a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	015a      	lsls	r2, r3, #5
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	4413      	add	r3, r2
 80131b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b4:	461a      	mov	r2, r3
 80131b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80131ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	3301      	adds	r3, #1
 80131c0:	613b      	str	r3, [r7, #16]
 80131c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c4:	693a      	ldr	r2, [r7, #16]
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d3b7      	bcc.n	801313a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131ca:	2300      	movs	r3, #0
 80131cc:	613b      	str	r3, [r7, #16]
 80131ce:	e043      	b.n	8013258 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	015a      	lsls	r2, r3, #5
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	4413      	add	r3, r2
 80131d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131e6:	d118      	bne.n	801321a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d10a      	bne.n	8013204 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	015a      	lsls	r2, r3, #5
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	4413      	add	r3, r2
 80131f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131fa:	461a      	mov	r2, r3
 80131fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013200:	6013      	str	r3, [r2, #0]
 8013202:	e013      	b.n	801322c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	015a      	lsls	r2, r3, #5
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	4413      	add	r3, r2
 801320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013210:	461a      	mov	r2, r3
 8013212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013216:	6013      	str	r3, [r2, #0]
 8013218:	e008      	b.n	801322c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	015a      	lsls	r2, r3, #5
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	4413      	add	r3, r2
 8013222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013226:	461a      	mov	r2, r3
 8013228:	2300      	movs	r3, #0
 801322a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	015a      	lsls	r2, r3, #5
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	4413      	add	r3, r2
 8013234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013238:	461a      	mov	r2, r3
 801323a:	2300      	movs	r3, #0
 801323c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	015a      	lsls	r2, r3, #5
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	4413      	add	r3, r2
 8013246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801324a:	461a      	mov	r2, r3
 801324c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013250:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	3301      	adds	r3, #1
 8013256:	613b      	str	r3, [r7, #16]
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	693a      	ldr	r2, [r7, #16]
 801325c:	429a      	cmp	r2, r3
 801325e:	d3b7      	bcc.n	80131d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013266:	691b      	ldr	r3, [r3, #16]
 8013268:	68fa      	ldr	r2, [r7, #12]
 801326a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801326e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013272:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2200      	movs	r2, #0
 8013278:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013280:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013284:	2b00      	cmp	r3, #0
 8013286:	d105      	bne.n	8013294 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	699b      	ldr	r3, [r3, #24]
 801328c:	f043 0210 	orr.w	r2, r3, #16
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	699a      	ldr	r2, [r3, #24]
 8013298:	4b0e      	ldr	r3, [pc, #56]	; (80132d4 <USB_DevInit+0x2b4>)
 801329a:	4313      	orrs	r3, r2
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80132a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d005      	beq.n	80132b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	699b      	ldr	r3, [r3, #24]
 80132aa:	f043 0208 	orr.w	r2, r3, #8
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80132b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d105      	bne.n	80132c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	699a      	ldr	r2, [r3, #24]
 80132bc:	4b06      	ldr	r3, [pc, #24]	; (80132d8 <USB_DevInit+0x2b8>)
 80132be:	4313      	orrs	r3, r2
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80132c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3718      	adds	r7, #24
 80132ca:	46bd      	mov	sp, r7
 80132cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80132d0:	b004      	add	sp, #16
 80132d2:	4770      	bx	lr
 80132d4:	803c3800 	.word	0x803c3800
 80132d8:	40000004 	.word	0x40000004

080132dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80132dc:	b480      	push	{r7}
 80132de:	b085      	sub	sp, #20
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80132e6:	2300      	movs	r3, #0
 80132e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	3301      	adds	r3, #1
 80132ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4a13      	ldr	r2, [pc, #76]	; (8013340 <USB_FlushTxFifo+0x64>)
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d901      	bls.n	80132fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80132f8:	2303      	movs	r3, #3
 80132fa:	e01b      	b.n	8013334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	daf2      	bge.n	80132ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013304:	2300      	movs	r3, #0
 8013306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	019b      	lsls	r3, r3, #6
 801330c:	f043 0220 	orr.w	r2, r3, #32
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	3301      	adds	r3, #1
 8013318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	4a08      	ldr	r2, [pc, #32]	; (8013340 <USB_FlushTxFifo+0x64>)
 801331e:	4293      	cmp	r3, r2
 8013320:	d901      	bls.n	8013326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013322:	2303      	movs	r3, #3
 8013324:	e006      	b.n	8013334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	691b      	ldr	r3, [r3, #16]
 801332a:	f003 0320 	and.w	r3, r3, #32
 801332e:	2b20      	cmp	r3, #32
 8013330:	d0f0      	beq.n	8013314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013332:	2300      	movs	r3, #0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3714      	adds	r7, #20
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr
 8013340:	00030d40 	.word	0x00030d40

08013344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801334c:	2300      	movs	r3, #0
 801334e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	3301      	adds	r3, #1
 8013354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	4a11      	ldr	r2, [pc, #68]	; (80133a0 <USB_FlushRxFifo+0x5c>)
 801335a:	4293      	cmp	r3, r2
 801335c:	d901      	bls.n	8013362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801335e:	2303      	movs	r3, #3
 8013360:	e018      	b.n	8013394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	691b      	ldr	r3, [r3, #16]
 8013366:	2b00      	cmp	r3, #0
 8013368:	daf2      	bge.n	8013350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801336a:	2300      	movs	r3, #0
 801336c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2210      	movs	r2, #16
 8013372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	3301      	adds	r3, #1
 8013378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	4a08      	ldr	r2, [pc, #32]	; (80133a0 <USB_FlushRxFifo+0x5c>)
 801337e:	4293      	cmp	r3, r2
 8013380:	d901      	bls.n	8013386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013382:	2303      	movs	r3, #3
 8013384:	e006      	b.n	8013394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	691b      	ldr	r3, [r3, #16]
 801338a:	f003 0310 	and.w	r3, r3, #16
 801338e:	2b10      	cmp	r3, #16
 8013390:	d0f0      	beq.n	8013374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013392:	2300      	movs	r3, #0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr
 80133a0:	00030d40 	.word	0x00030d40

080133a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b085      	sub	sp, #20
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	460b      	mov	r3, r1
 80133ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133ba:	681a      	ldr	r2, [r3, #0]
 80133bc:	78fb      	ldrb	r3, [r7, #3]
 80133be:	68f9      	ldr	r1, [r7, #12]
 80133c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133c4:	4313      	orrs	r3, r2
 80133c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80133c8:	2300      	movs	r3, #0
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3714      	adds	r7, #20
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr

080133d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80133d6:	b480      	push	{r7}
 80133d8:	b087      	sub	sp, #28
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133e8:	689b      	ldr	r3, [r3, #8]
 80133ea:	f003 0306 	and.w	r3, r3, #6
 80133ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d102      	bne.n	80133fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80133f6:	2300      	movs	r3, #0
 80133f8:	75fb      	strb	r3, [r7, #23]
 80133fa:	e00a      	b.n	8013412 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2b02      	cmp	r3, #2
 8013400:	d002      	beq.n	8013408 <USB_GetDevSpeed+0x32>
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2b06      	cmp	r3, #6
 8013406:	d102      	bne.n	801340e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013408:	2302      	movs	r3, #2
 801340a:	75fb      	strb	r3, [r7, #23]
 801340c:	e001      	b.n	8013412 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801340e:	230f      	movs	r3, #15
 8013410:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013412:	7dfb      	ldrb	r3, [r7, #23]
}
 8013414:	4618      	mov	r0, r3
 8013416:	371c      	adds	r7, #28
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr

08013420 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	785b      	ldrb	r3, [r3, #1]
 8013438:	2b01      	cmp	r3, #1
 801343a:	d139      	bne.n	80134b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013442:	69da      	ldr	r2, [r3, #28]
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	f003 030f 	and.w	r3, r3, #15
 801344c:	2101      	movs	r1, #1
 801344e:	fa01 f303 	lsl.w	r3, r1, r3
 8013452:	b29b      	uxth	r3, r3
 8013454:	68f9      	ldr	r1, [r7, #12]
 8013456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801345a:	4313      	orrs	r3, r2
 801345c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	015a      	lsls	r2, r3, #5
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	4413      	add	r3, r2
 8013466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013470:	2b00      	cmp	r3, #0
 8013472:	d153      	bne.n	801351c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	015a      	lsls	r2, r3, #5
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	4413      	add	r3, r2
 801347c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013480:	681a      	ldr	r2, [r3, #0]
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	791b      	ldrb	r3, [r3, #4]
 801348e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013490:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	059b      	lsls	r3, r3, #22
 8013496:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013498:	431a      	orrs	r2, r3
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	0159      	lsls	r1, r3, #5
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	440b      	add	r3, r1
 80134a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a6:	4619      	mov	r1, r3
 80134a8:	4b20      	ldr	r3, [pc, #128]	; (801352c <USB_ActivateEndpoint+0x10c>)
 80134aa:	4313      	orrs	r3, r2
 80134ac:	600b      	str	r3, [r1, #0]
 80134ae:	e035      	b.n	801351c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134b6:	69da      	ldr	r2, [r3, #28]
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	f003 030f 	and.w	r3, r3, #15
 80134c0:	2101      	movs	r1, #1
 80134c2:	fa01 f303 	lsl.w	r3, r1, r3
 80134c6:	041b      	lsls	r3, r3, #16
 80134c8:	68f9      	ldr	r1, [r7, #12]
 80134ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80134ce:	4313      	orrs	r3, r2
 80134d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	015a      	lsls	r2, r3, #5
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	4413      	add	r3, r2
 80134da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d119      	bne.n	801351c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	015a      	lsls	r2, r3, #5
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	4413      	add	r3, r2
 80134f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	689b      	ldr	r3, [r3, #8]
 80134fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	791b      	ldrb	r3, [r3, #4]
 8013502:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013504:	430b      	orrs	r3, r1
 8013506:	431a      	orrs	r2, r3
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	0159      	lsls	r1, r3, #5
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	440b      	add	r3, r1
 8013510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013514:	4619      	mov	r1, r3
 8013516:	4b05      	ldr	r3, [pc, #20]	; (801352c <USB_ActivateEndpoint+0x10c>)
 8013518:	4313      	orrs	r3, r2
 801351a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801351c:	2300      	movs	r3, #0
}
 801351e:	4618      	mov	r0, r3
 8013520:	3714      	adds	r7, #20
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr
 801352a:	bf00      	nop
 801352c:	10008000 	.word	0x10008000

08013530 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013530:	b480      	push	{r7}
 8013532:	b085      	sub	sp, #20
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	785b      	ldrb	r3, [r3, #1]
 8013548:	2b01      	cmp	r3, #1
 801354a:	d161      	bne.n	8013610 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	015a      	lsls	r2, r3, #5
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4413      	add	r3, r2
 8013554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801355e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013562:	d11f      	bne.n	80135a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	015a      	lsls	r2, r3, #5
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	4413      	add	r3, r2
 801356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	68ba      	ldr	r2, [r7, #8]
 8013574:	0151      	lsls	r1, r2, #5
 8013576:	68fa      	ldr	r2, [r7, #12]
 8013578:	440a      	add	r2, r1
 801357a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801357e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013582:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	015a      	lsls	r2, r3, #5
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	4413      	add	r3, r2
 801358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	68ba      	ldr	r2, [r7, #8]
 8013594:	0151      	lsls	r1, r2, #5
 8013596:	68fa      	ldr	r2, [r7, #12]
 8013598:	440a      	add	r2, r1
 801359a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801359e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80135a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	f003 030f 	and.w	r3, r3, #15
 80135b4:	2101      	movs	r1, #1
 80135b6:	fa01 f303 	lsl.w	r3, r1, r3
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	43db      	mvns	r3, r3
 80135be:	68f9      	ldr	r1, [r7, #12]
 80135c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80135c4:	4013      	ands	r3, r2
 80135c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ce:	69da      	ldr	r2, [r3, #28]
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	f003 030f 	and.w	r3, r3, #15
 80135d8:	2101      	movs	r1, #1
 80135da:	fa01 f303 	lsl.w	r3, r1, r3
 80135de:	b29b      	uxth	r3, r3
 80135e0:	43db      	mvns	r3, r3
 80135e2:	68f9      	ldr	r1, [r7, #12]
 80135e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80135e8:	4013      	ands	r3, r2
 80135ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	015a      	lsls	r2, r3, #5
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	4413      	add	r3, r2
 80135f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135f8:	681a      	ldr	r2, [r3, #0]
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	0159      	lsls	r1, r3, #5
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	440b      	add	r3, r1
 8013602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013606:	4619      	mov	r1, r3
 8013608:	4b35      	ldr	r3, [pc, #212]	; (80136e0 <USB_DeactivateEndpoint+0x1b0>)
 801360a:	4013      	ands	r3, r2
 801360c:	600b      	str	r3, [r1, #0]
 801360e:	e060      	b.n	80136d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	015a      	lsls	r2, r3, #5
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	4413      	add	r3, r2
 8013618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013626:	d11f      	bne.n	8013668 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	015a      	lsls	r2, r3, #5
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	4413      	add	r3, r2
 8013630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	68ba      	ldr	r2, [r7, #8]
 8013638:	0151      	lsls	r1, r2, #5
 801363a:	68fa      	ldr	r2, [r7, #12]
 801363c:	440a      	add	r2, r1
 801363e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013646:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	015a      	lsls	r2, r3, #5
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	4413      	add	r3, r2
 8013650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	0151      	lsls	r1, r2, #5
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	440a      	add	r2, r1
 801365e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013666:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801366e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	f003 030f 	and.w	r3, r3, #15
 8013678:	2101      	movs	r1, #1
 801367a:	fa01 f303 	lsl.w	r3, r1, r3
 801367e:	041b      	lsls	r3, r3, #16
 8013680:	43db      	mvns	r3, r3
 8013682:	68f9      	ldr	r1, [r7, #12]
 8013684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013688:	4013      	ands	r3, r2
 801368a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013692:	69da      	ldr	r2, [r3, #28]
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	f003 030f 	and.w	r3, r3, #15
 801369c:	2101      	movs	r1, #1
 801369e:	fa01 f303 	lsl.w	r3, r1, r3
 80136a2:	041b      	lsls	r3, r3, #16
 80136a4:	43db      	mvns	r3, r3
 80136a6:	68f9      	ldr	r1, [r7, #12]
 80136a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136ac:	4013      	ands	r3, r2
 80136ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	015a      	lsls	r2, r3, #5
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	4413      	add	r3, r2
 80136b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136bc:	681a      	ldr	r2, [r3, #0]
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	0159      	lsls	r1, r3, #5
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	440b      	add	r3, r1
 80136c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ca:	4619      	mov	r1, r3
 80136cc:	4b05      	ldr	r3, [pc, #20]	; (80136e4 <USB_DeactivateEndpoint+0x1b4>)
 80136ce:	4013      	ands	r3, r2
 80136d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80136d2:	2300      	movs	r3, #0
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3714      	adds	r7, #20
 80136d8:	46bd      	mov	sp, r7
 80136da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136de:	4770      	bx	lr
 80136e0:	ec337800 	.word	0xec337800
 80136e4:	eff37800 	.word	0xeff37800

080136e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b08a      	sub	sp, #40	; 0x28
 80136ec:	af02      	add	r7, sp, #8
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	60b9      	str	r1, [r7, #8]
 80136f2:	4613      	mov	r3, r2
 80136f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	785b      	ldrb	r3, [r3, #1]
 8013704:	2b01      	cmp	r3, #1
 8013706:	f040 8181 	bne.w	8013a0c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	691b      	ldr	r3, [r3, #16]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d132      	bne.n	8013778 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	015a      	lsls	r2, r3, #5
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	4413      	add	r3, r2
 801371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801371e:	691a      	ldr	r2, [r3, #16]
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	0159      	lsls	r1, r3, #5
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	440b      	add	r3, r1
 8013728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801372c:	4619      	mov	r1, r3
 801372e:	4ba5      	ldr	r3, [pc, #660]	; (80139c4 <USB_EPStartXfer+0x2dc>)
 8013730:	4013      	ands	r3, r2
 8013732:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	015a      	lsls	r2, r3, #5
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	4413      	add	r3, r2
 801373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013740:	691b      	ldr	r3, [r3, #16]
 8013742:	69ba      	ldr	r2, [r7, #24]
 8013744:	0151      	lsls	r1, r2, #5
 8013746:	69fa      	ldr	r2, [r7, #28]
 8013748:	440a      	add	r2, r1
 801374a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801374e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013754:	69bb      	ldr	r3, [r7, #24]
 8013756:	015a      	lsls	r2, r3, #5
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	4413      	add	r3, r2
 801375c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013760:	691a      	ldr	r2, [r3, #16]
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	0159      	lsls	r1, r3, #5
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	440b      	add	r3, r1
 801376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801376e:	4619      	mov	r1, r3
 8013770:	4b95      	ldr	r3, [pc, #596]	; (80139c8 <USB_EPStartXfer+0x2e0>)
 8013772:	4013      	ands	r3, r2
 8013774:	610b      	str	r3, [r1, #16]
 8013776:	e092      	b.n	801389e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	015a      	lsls	r2, r3, #5
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	4413      	add	r3, r2
 8013780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013784:	691a      	ldr	r2, [r3, #16]
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	0159      	lsls	r1, r3, #5
 801378a:	69fb      	ldr	r3, [r7, #28]
 801378c:	440b      	add	r3, r1
 801378e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013792:	4619      	mov	r1, r3
 8013794:	4b8c      	ldr	r3, [pc, #560]	; (80139c8 <USB_EPStartXfer+0x2e0>)
 8013796:	4013      	ands	r3, r2
 8013798:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	015a      	lsls	r2, r3, #5
 801379e:	69fb      	ldr	r3, [r7, #28]
 80137a0:	4413      	add	r3, r2
 80137a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137a6:	691a      	ldr	r2, [r3, #16]
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	0159      	lsls	r1, r3, #5
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	440b      	add	r3, r1
 80137b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137b4:	4619      	mov	r1, r3
 80137b6:	4b83      	ldr	r3, [pc, #524]	; (80139c4 <USB_EPStartXfer+0x2dc>)
 80137b8:	4013      	ands	r3, r2
 80137ba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d11a      	bne.n	80137f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	691a      	ldr	r2, [r3, #16]
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	689b      	ldr	r3, [r3, #8]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d903      	bls.n	80137d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	689a      	ldr	r2, [r3, #8]
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	015a      	lsls	r2, r3, #5
 80137da:	69fb      	ldr	r3, [r7, #28]
 80137dc:	4413      	add	r3, r2
 80137de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137e2:	691b      	ldr	r3, [r3, #16]
 80137e4:	69ba      	ldr	r2, [r7, #24]
 80137e6:	0151      	lsls	r1, r2, #5
 80137e8:	69fa      	ldr	r2, [r7, #28]
 80137ea:	440a      	add	r2, r1
 80137ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80137f4:	6113      	str	r3, [r2, #16]
 80137f6:	e01b      	b.n	8013830 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	015a      	lsls	r2, r3, #5
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	4413      	add	r3, r2
 8013800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013804:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	6919      	ldr	r1, [r3, #16]
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	440b      	add	r3, r1
 8013810:	1e59      	subs	r1, r3, #1
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	689b      	ldr	r3, [r3, #8]
 8013816:	fbb1 f3f3 	udiv	r3, r1, r3
 801381a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801381c:	4b6b      	ldr	r3, [pc, #428]	; (80139cc <USB_EPStartXfer+0x2e4>)
 801381e:	400b      	ands	r3, r1
 8013820:	69b9      	ldr	r1, [r7, #24]
 8013822:	0148      	lsls	r0, r1, #5
 8013824:	69f9      	ldr	r1, [r7, #28]
 8013826:	4401      	add	r1, r0
 8013828:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801382c:	4313      	orrs	r3, r2
 801382e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	015a      	lsls	r2, r3, #5
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	4413      	add	r3, r2
 8013838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801383c:	691a      	ldr	r2, [r3, #16]
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013846:	69b9      	ldr	r1, [r7, #24]
 8013848:	0148      	lsls	r0, r1, #5
 801384a:	69f9      	ldr	r1, [r7, #28]
 801384c:	4401      	add	r1, r0
 801384e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013852:	4313      	orrs	r3, r2
 8013854:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	791b      	ldrb	r3, [r3, #4]
 801385a:	2b01      	cmp	r3, #1
 801385c:	d11f      	bne.n	801389e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	015a      	lsls	r2, r3, #5
 8013862:	69fb      	ldr	r3, [r7, #28]
 8013864:	4413      	add	r3, r2
 8013866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	69ba      	ldr	r2, [r7, #24]
 801386e:	0151      	lsls	r1, r2, #5
 8013870:	69fa      	ldr	r2, [r7, #28]
 8013872:	440a      	add	r2, r1
 8013874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013878:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801387c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	015a      	lsls	r2, r3, #5
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	4413      	add	r3, r2
 8013886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801388a:	691b      	ldr	r3, [r3, #16]
 801388c:	69ba      	ldr	r2, [r7, #24]
 801388e:	0151      	lsls	r1, r2, #5
 8013890:	69fa      	ldr	r2, [r7, #28]
 8013892:	440a      	add	r2, r1
 8013894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801389c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801389e:	79fb      	ldrb	r3, [r7, #7]
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d14b      	bne.n	801393c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	69db      	ldr	r3, [r3, #28]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d009      	beq.n	80138c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	015a      	lsls	r2, r3, #5
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	4413      	add	r3, r2
 80138b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138b8:	461a      	mov	r2, r3
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	69db      	ldr	r3, [r3, #28]
 80138be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	791b      	ldrb	r3, [r3, #4]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d128      	bne.n	801391a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138ce:	689b      	ldr	r3, [r3, #8]
 80138d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d110      	bne.n	80138fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	015a      	lsls	r2, r3, #5
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	4413      	add	r3, r2
 80138e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	69ba      	ldr	r2, [r7, #24]
 80138e8:	0151      	lsls	r1, r2, #5
 80138ea:	69fa      	ldr	r2, [r7, #28]
 80138ec:	440a      	add	r2, r1
 80138ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80138f6:	6013      	str	r3, [r2, #0]
 80138f8:	e00f      	b.n	801391a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80138fa:	69bb      	ldr	r3, [r7, #24]
 80138fc:	015a      	lsls	r2, r3, #5
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	4413      	add	r3, r2
 8013902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	69ba      	ldr	r2, [r7, #24]
 801390a:	0151      	lsls	r1, r2, #5
 801390c:	69fa      	ldr	r2, [r7, #28]
 801390e:	440a      	add	r2, r1
 8013910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013918:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801391a:	69bb      	ldr	r3, [r7, #24]
 801391c:	015a      	lsls	r2, r3, #5
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	4413      	add	r3, r2
 8013922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	69ba      	ldr	r2, [r7, #24]
 801392a:	0151      	lsls	r1, r2, #5
 801392c:	69fa      	ldr	r2, [r7, #28]
 801392e:	440a      	add	r2, r1
 8013930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013938:	6013      	str	r3, [r2, #0]
 801393a:	e16a      	b.n	8013c12 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	015a      	lsls	r2, r3, #5
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	4413      	add	r3, r2
 8013944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	69ba      	ldr	r2, [r7, #24]
 801394c:	0151      	lsls	r1, r2, #5
 801394e:	69fa      	ldr	r2, [r7, #28]
 8013950:	440a      	add	r2, r1
 8013952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801395a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	791b      	ldrb	r3, [r3, #4]
 8013960:	2b01      	cmp	r3, #1
 8013962:	d015      	beq.n	8013990 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	691b      	ldr	r3, [r3, #16]
 8013968:	2b00      	cmp	r3, #0
 801396a:	f000 8152 	beq.w	8013c12 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	f003 030f 	and.w	r3, r3, #15
 801397e:	2101      	movs	r1, #1
 8013980:	fa01 f303 	lsl.w	r3, r1, r3
 8013984:	69f9      	ldr	r1, [r7, #28]
 8013986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801398a:	4313      	orrs	r3, r2
 801398c:	634b      	str	r3, [r1, #52]	; 0x34
 801398e:	e140      	b.n	8013c12 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013996:	689b      	ldr	r3, [r3, #8]
 8013998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801399c:	2b00      	cmp	r3, #0
 801399e:	d117      	bne.n	80139d0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80139a0:	69bb      	ldr	r3, [r7, #24]
 80139a2:	015a      	lsls	r2, r3, #5
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	4413      	add	r3, r2
 80139a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	69ba      	ldr	r2, [r7, #24]
 80139b0:	0151      	lsls	r1, r2, #5
 80139b2:	69fa      	ldr	r2, [r7, #28]
 80139b4:	440a      	add	r2, r1
 80139b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80139be:	6013      	str	r3, [r2, #0]
 80139c0:	e016      	b.n	80139f0 <USB_EPStartXfer+0x308>
 80139c2:	bf00      	nop
 80139c4:	e007ffff 	.word	0xe007ffff
 80139c8:	fff80000 	.word	0xfff80000
 80139cc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80139d0:	69bb      	ldr	r3, [r7, #24]
 80139d2:	015a      	lsls	r2, r3, #5
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	4413      	add	r3, r2
 80139d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	69ba      	ldr	r2, [r7, #24]
 80139e0:	0151      	lsls	r1, r2, #5
 80139e2:	69fa      	ldr	r2, [r7, #28]
 80139e4:	440a      	add	r2, r1
 80139e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	68d9      	ldr	r1, [r3, #12]
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	781a      	ldrb	r2, [r3, #0]
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	691b      	ldr	r3, [r3, #16]
 80139fc:	b298      	uxth	r0, r3
 80139fe:	79fb      	ldrb	r3, [r7, #7]
 8013a00:	9300      	str	r3, [sp, #0]
 8013a02:	4603      	mov	r3, r0
 8013a04:	68f8      	ldr	r0, [r7, #12]
 8013a06:	f000 f9b9 	bl	8013d7c <USB_WritePacket>
 8013a0a:	e102      	b.n	8013c12 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	015a      	lsls	r2, r3, #5
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	4413      	add	r3, r2
 8013a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a18:	691a      	ldr	r2, [r3, #16]
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	0159      	lsls	r1, r3, #5
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	440b      	add	r3, r1
 8013a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a26:	4619      	mov	r1, r3
 8013a28:	4b7c      	ldr	r3, [pc, #496]	; (8013c1c <USB_EPStartXfer+0x534>)
 8013a2a:	4013      	ands	r3, r2
 8013a2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	015a      	lsls	r2, r3, #5
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	4413      	add	r3, r2
 8013a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a3a:	691a      	ldr	r2, [r3, #16]
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	0159      	lsls	r1, r3, #5
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	440b      	add	r3, r1
 8013a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4b75      	ldr	r3, [pc, #468]	; (8013c20 <USB_EPStartXfer+0x538>)
 8013a4c:	4013      	ands	r3, r2
 8013a4e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d12f      	bne.n	8013ab6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	691b      	ldr	r3, [r3, #16]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d003      	beq.n	8013a66 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	689a      	ldr	r2, [r3, #8]
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	689a      	ldr	r2, [r3, #8]
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	015a      	lsls	r2, r3, #5
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	4413      	add	r3, r2
 8013a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a7a:	691a      	ldr	r2, [r3, #16]
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	6a1b      	ldr	r3, [r3, #32]
 8013a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a84:	69b9      	ldr	r1, [r7, #24]
 8013a86:	0148      	lsls	r0, r1, #5
 8013a88:	69f9      	ldr	r1, [r7, #28]
 8013a8a:	4401      	add	r1, r0
 8013a8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013a90:	4313      	orrs	r3, r2
 8013a92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	015a      	lsls	r2, r3, #5
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa0:	691b      	ldr	r3, [r3, #16]
 8013aa2:	69ba      	ldr	r2, [r7, #24]
 8013aa4:	0151      	lsls	r1, r2, #5
 8013aa6:	69fa      	ldr	r2, [r7, #28]
 8013aa8:	440a      	add	r2, r1
 8013aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ab2:	6113      	str	r3, [r2, #16]
 8013ab4:	e05f      	b.n	8013b76 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	691b      	ldr	r3, [r3, #16]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d123      	bne.n	8013b06 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	015a      	lsls	r2, r3, #5
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aca:	691a      	ldr	r2, [r3, #16]
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ad4:	69b9      	ldr	r1, [r7, #24]
 8013ad6:	0148      	lsls	r0, r1, #5
 8013ad8:	69f9      	ldr	r1, [r7, #28]
 8013ada:	4401      	add	r1, r0
 8013adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	015a      	lsls	r2, r3, #5
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	4413      	add	r3, r2
 8013aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af0:	691b      	ldr	r3, [r3, #16]
 8013af2:	69ba      	ldr	r2, [r7, #24]
 8013af4:	0151      	lsls	r1, r2, #5
 8013af6:	69fa      	ldr	r2, [r7, #28]
 8013af8:	440a      	add	r2, r1
 8013afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b02:	6113      	str	r3, [r2, #16]
 8013b04:	e037      	b.n	8013b76 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	691a      	ldr	r2, [r3, #16]
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	689b      	ldr	r3, [r3, #8]
 8013b0e:	4413      	add	r3, r2
 8013b10:	1e5a      	subs	r2, r3, #1
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	689b      	ldr	r3, [r3, #8]
 8013b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b1a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	689b      	ldr	r3, [r3, #8]
 8013b20:	8afa      	ldrh	r2, [r7, #22]
 8013b22:	fb03 f202 	mul.w	r2, r3, r2
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	015a      	lsls	r2, r3, #5
 8013b2e:	69fb      	ldr	r3, [r7, #28]
 8013b30:	4413      	add	r3, r2
 8013b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b36:	691a      	ldr	r2, [r3, #16]
 8013b38:	8afb      	ldrh	r3, [r7, #22]
 8013b3a:	04d9      	lsls	r1, r3, #19
 8013b3c:	4b39      	ldr	r3, [pc, #228]	; (8013c24 <USB_EPStartXfer+0x53c>)
 8013b3e:	400b      	ands	r3, r1
 8013b40:	69b9      	ldr	r1, [r7, #24]
 8013b42:	0148      	lsls	r0, r1, #5
 8013b44:	69f9      	ldr	r1, [r7, #28]
 8013b46:	4401      	add	r1, r0
 8013b48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	015a      	lsls	r2, r3, #5
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	4413      	add	r3, r2
 8013b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b5c:	691a      	ldr	r2, [r3, #16]
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	6a1b      	ldr	r3, [r3, #32]
 8013b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b66:	69b9      	ldr	r1, [r7, #24]
 8013b68:	0148      	lsls	r0, r1, #5
 8013b6a:	69f9      	ldr	r1, [r7, #28]
 8013b6c:	4401      	add	r1, r0
 8013b6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b72:	4313      	orrs	r3, r2
 8013b74:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	d10d      	bne.n	8013b98 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d009      	beq.n	8013b98 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	68d9      	ldr	r1, [r3, #12]
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	015a      	lsls	r2, r3, #5
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	4413      	add	r3, r2
 8013b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b94:	460a      	mov	r2, r1
 8013b96:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	791b      	ldrb	r3, [r3, #4]
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d128      	bne.n	8013bf2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d110      	bne.n	8013bd2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013bb0:	69bb      	ldr	r3, [r7, #24]
 8013bb2:	015a      	lsls	r2, r3, #5
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	69ba      	ldr	r2, [r7, #24]
 8013bc0:	0151      	lsls	r1, r2, #5
 8013bc2:	69fa      	ldr	r2, [r7, #28]
 8013bc4:	440a      	add	r2, r1
 8013bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013bce:	6013      	str	r3, [r2, #0]
 8013bd0:	e00f      	b.n	8013bf2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	015a      	lsls	r2, r3, #5
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	4413      	add	r3, r2
 8013bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	69ba      	ldr	r2, [r7, #24]
 8013be2:	0151      	lsls	r1, r2, #5
 8013be4:	69fa      	ldr	r2, [r7, #28]
 8013be6:	440a      	add	r2, r1
 8013be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bf0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	015a      	lsls	r2, r3, #5
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	69ba      	ldr	r2, [r7, #24]
 8013c02:	0151      	lsls	r1, r2, #5
 8013c04:	69fa      	ldr	r2, [r7, #28]
 8013c06:	440a      	add	r2, r1
 8013c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013c10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3720      	adds	r7, #32
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	fff80000 	.word	0xfff80000
 8013c20:	e007ffff 	.word	0xe007ffff
 8013c24:	1ff80000 	.word	0x1ff80000

08013c28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b087      	sub	sp, #28
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013c32:	2300      	movs	r3, #0
 8013c34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013c36:	2300      	movs	r3, #0
 8013c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	785b      	ldrb	r3, [r3, #1]
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d14a      	bne.n	8013cdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	015a      	lsls	r2, r3, #5
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	4413      	add	r3, r2
 8013c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c5e:	f040 8086 	bne.w	8013d6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	015a      	lsls	r2, r3, #5
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	7812      	ldrb	r2, [r2, #0]
 8013c76:	0151      	lsls	r1, r2, #5
 8013c78:	693a      	ldr	r2, [r7, #16]
 8013c7a:	440a      	add	r2, r1
 8013c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013c84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	015a      	lsls	r2, r3, #5
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	4413      	add	r3, r2
 8013c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	7812      	ldrb	r2, [r2, #0]
 8013c9a:	0151      	lsls	r1, r2, #5
 8013c9c:	693a      	ldr	r2, [r7, #16]
 8013c9e:	440a      	add	r2, r1
 8013ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ca8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	3301      	adds	r3, #1
 8013cae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d902      	bls.n	8013cc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013cba:	2301      	movs	r3, #1
 8013cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8013cbe:	e056      	b.n	8013d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	015a      	lsls	r2, r3, #5
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	4413      	add	r3, r2
 8013cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cd8:	d0e7      	beq.n	8013caa <USB_EPStopXfer+0x82>
 8013cda:	e048      	b.n	8013d6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	015a      	lsls	r2, r3, #5
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cf4:	d13b      	bne.n	8013d6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	015a      	lsls	r2, r3, #5
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	4413      	add	r3, r2
 8013d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	7812      	ldrb	r2, [r2, #0]
 8013d0a:	0151      	lsls	r1, r2, #5
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	440a      	add	r2, r1
 8013d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013d18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	015a      	lsls	r2, r3, #5
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	4413      	add	r3, r2
 8013d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	683a      	ldr	r2, [r7, #0]
 8013d2c:	7812      	ldrb	r2, [r2, #0]
 8013d2e:	0151      	lsls	r1, r2, #5
 8013d30:	693a      	ldr	r2, [r7, #16]
 8013d32:	440a      	add	r2, r1
 8013d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	3301      	adds	r3, #1
 8013d42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	f242 7210 	movw	r2, #10000	; 0x2710
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d902      	bls.n	8013d54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013d4e:	2301      	movs	r3, #1
 8013d50:	75fb      	strb	r3, [r7, #23]
          break;
 8013d52:	e00c      	b.n	8013d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	015a      	lsls	r2, r3, #5
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d6c:	d0e7      	beq.n	8013d3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	371c      	adds	r7, #28
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b089      	sub	sp, #36	; 0x24
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	4611      	mov	r1, r2
 8013d88:	461a      	mov	r2, r3
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	71fb      	strb	r3, [r7, #7]
 8013d8e:	4613      	mov	r3, r2
 8013d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d123      	bne.n	8013dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013da2:	88bb      	ldrh	r3, [r7, #4]
 8013da4:	3303      	adds	r3, #3
 8013da6:	089b      	lsrs	r3, r3, #2
 8013da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013daa:	2300      	movs	r3, #0
 8013dac:	61bb      	str	r3, [r7, #24]
 8013dae:	e018      	b.n	8013de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013db0:	79fb      	ldrb	r3, [r7, #7]
 8013db2:	031a      	lsls	r2, r3, #12
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	4413      	add	r3, r2
 8013db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013dd6:	69fb      	ldr	r3, [r7, #28]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013ddc:	69bb      	ldr	r3, [r7, #24]
 8013dde:	3301      	adds	r3, #1
 8013de0:	61bb      	str	r3, [r7, #24]
 8013de2:	69ba      	ldr	r2, [r7, #24]
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d3e2      	bcc.n	8013db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013dea:	2300      	movs	r3, #0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3724      	adds	r7, #36	; 0x24
 8013df0:	46bd      	mov	sp, r7
 8013df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df6:	4770      	bx	lr

08013df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b08b      	sub	sp, #44	; 0x2c
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	4613      	mov	r3, r2
 8013e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013e0e:	88fb      	ldrh	r3, [r7, #6]
 8013e10:	089b      	lsrs	r3, r3, #2
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013e16:	88fb      	ldrh	r3, [r7, #6]
 8013e18:	f003 0303 	and.w	r3, r3, #3
 8013e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013e1e:	2300      	movs	r3, #0
 8013e20:	623b      	str	r3, [r7, #32]
 8013e22:	e014      	b.n	8013e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e24:	69bb      	ldr	r3, [r7, #24]
 8013e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	3301      	adds	r3, #1
 8013e34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e38:	3301      	adds	r3, #1
 8013e3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3e:	3301      	adds	r3, #1
 8013e40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e44:	3301      	adds	r3, #1
 8013e46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013e48:	6a3b      	ldr	r3, [r7, #32]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	623b      	str	r3, [r7, #32]
 8013e4e:	6a3a      	ldr	r2, [r7, #32]
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d3e6      	bcc.n	8013e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013e56:	8bfb      	ldrh	r3, [r7, #30]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d01e      	beq.n	8013e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013e60:	69bb      	ldr	r3, [r7, #24]
 8013e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e66:	461a      	mov	r2, r3
 8013e68:	f107 0310 	add.w	r3, r7, #16
 8013e6c:	6812      	ldr	r2, [r2, #0]
 8013e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013e70:	693a      	ldr	r2, [r7, #16]
 8013e72:	6a3b      	ldr	r3, [r7, #32]
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	00db      	lsls	r3, r3, #3
 8013e78:	fa22 f303 	lsr.w	r3, r2, r3
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e80:	701a      	strb	r2, [r3, #0]
      i++;
 8013e82:	6a3b      	ldr	r3, [r7, #32]
 8013e84:	3301      	adds	r3, #1
 8013e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8013e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013e8e:	8bfb      	ldrh	r3, [r7, #30]
 8013e90:	3b01      	subs	r3, #1
 8013e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013e94:	8bfb      	ldrh	r3, [r7, #30]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d1ea      	bne.n	8013e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	372c      	adds	r7, #44	; 0x2c
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	785b      	ldrb	r3, [r3, #1]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d12c      	bne.n	8013f1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	015a      	lsls	r2, r3, #5
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	4413      	add	r3, r2
 8013ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	db12      	blt.n	8013efc <USB_EPSetStall+0x54>
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d00f      	beq.n	8013efc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	015a      	lsls	r2, r3, #5
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	4413      	add	r3, r2
 8013ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	68ba      	ldr	r2, [r7, #8]
 8013eec:	0151      	lsls	r1, r2, #5
 8013eee:	68fa      	ldr	r2, [r7, #12]
 8013ef0:	440a      	add	r2, r1
 8013ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ef6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013efa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	015a      	lsls	r2, r3, #5
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	4413      	add	r3, r2
 8013f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	68ba      	ldr	r2, [r7, #8]
 8013f0c:	0151      	lsls	r1, r2, #5
 8013f0e:	68fa      	ldr	r2, [r7, #12]
 8013f10:	440a      	add	r2, r1
 8013f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f1a:	6013      	str	r3, [r2, #0]
 8013f1c:	e02b      	b.n	8013f76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	015a      	lsls	r2, r3, #5
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	4413      	add	r3, r2
 8013f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	db12      	blt.n	8013f56 <USB_EPSetStall+0xae>
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d00f      	beq.n	8013f56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	015a      	lsls	r2, r3, #5
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	68ba      	ldr	r2, [r7, #8]
 8013f46:	0151      	lsls	r1, r2, #5
 8013f48:	68fa      	ldr	r2, [r7, #12]
 8013f4a:	440a      	add	r2, r1
 8013f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013f54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	015a      	lsls	r2, r3, #5
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	68ba      	ldr	r2, [r7, #8]
 8013f66:	0151      	lsls	r1, r2, #5
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	440a      	add	r2, r1
 8013f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f76:	2300      	movs	r3, #0
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3714      	adds	r7, #20
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	785b      	ldrb	r3, [r3, #1]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d128      	bne.n	8013ff2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	015a      	lsls	r2, r3, #5
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	68ba      	ldr	r2, [r7, #8]
 8013fb0:	0151      	lsls	r1, r2, #5
 8013fb2:	68fa      	ldr	r2, [r7, #12]
 8013fb4:	440a      	add	r2, r1
 8013fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013fbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	791b      	ldrb	r3, [r3, #4]
 8013fc4:	2b03      	cmp	r3, #3
 8013fc6:	d003      	beq.n	8013fd0 <USB_EPClearStall+0x4c>
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	791b      	ldrb	r3, [r3, #4]
 8013fcc:	2b02      	cmp	r3, #2
 8013fce:	d138      	bne.n	8014042 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	015a      	lsls	r2, r3, #5
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	68ba      	ldr	r2, [r7, #8]
 8013fe0:	0151      	lsls	r1, r2, #5
 8013fe2:	68fa      	ldr	r2, [r7, #12]
 8013fe4:	440a      	add	r2, r1
 8013fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fee:	6013      	str	r3, [r2, #0]
 8013ff0:	e027      	b.n	8014042 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	015a      	lsls	r2, r3, #5
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	68ba      	ldr	r2, [r7, #8]
 8014002:	0151      	lsls	r1, r2, #5
 8014004:	68fa      	ldr	r2, [r7, #12]
 8014006:	440a      	add	r2, r1
 8014008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801400c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014010:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	791b      	ldrb	r3, [r3, #4]
 8014016:	2b03      	cmp	r3, #3
 8014018:	d003      	beq.n	8014022 <USB_EPClearStall+0x9e>
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	791b      	ldrb	r3, [r3, #4]
 801401e:	2b02      	cmp	r3, #2
 8014020:	d10f      	bne.n	8014042 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	015a      	lsls	r2, r3, #5
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	4413      	add	r3, r2
 801402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	68ba      	ldr	r2, [r7, #8]
 8014032:	0151      	lsls	r1, r2, #5
 8014034:	68fa      	ldr	r2, [r7, #12]
 8014036:	440a      	add	r2, r1
 8014038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014040:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014042:	2300      	movs	r3, #0
}
 8014044:	4618      	mov	r0, r3
 8014046:	3714      	adds	r7, #20
 8014048:	46bd      	mov	sp, r7
 801404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404e:	4770      	bx	lr

08014050 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014050:	b480      	push	{r7}
 8014052:	b085      	sub	sp, #20
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	460b      	mov	r3, r1
 801405a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	68fa      	ldr	r2, [r7, #12]
 801406a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801406e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014072:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801407a:	681a      	ldr	r2, [r3, #0]
 801407c:	78fb      	ldrb	r3, [r7, #3]
 801407e:	011b      	lsls	r3, r3, #4
 8014080:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014084:	68f9      	ldr	r1, [r7, #12]
 8014086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801408a:	4313      	orrs	r3, r2
 801408c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801408e:	2300      	movs	r3, #0
}
 8014090:	4618      	mov	r0, r3
 8014092:	3714      	adds	r7, #20
 8014094:	46bd      	mov	sp, r7
 8014096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409a:	4770      	bx	lr

0801409c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801409c:	b480      	push	{r7}
 801409e:	b085      	sub	sp, #20
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	68fa      	ldr	r2, [r7, #12]
 80140b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80140b6:	f023 0303 	bic.w	r3, r3, #3
 80140ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80140ca:	f023 0302 	bic.w	r3, r3, #2
 80140ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80140d0:	2300      	movs	r3, #0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3714      	adds	r7, #20
 80140d6:	46bd      	mov	sp, r7
 80140d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140dc:	4770      	bx	lr

080140de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80140de:	b480      	push	{r7}
 80140e0:	b085      	sub	sp, #20
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	68fa      	ldr	r2, [r7, #12]
 80140f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80140f8:	f023 0303 	bic.w	r3, r3, #3
 80140fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801410c:	f043 0302 	orr.w	r3, r3, #2
 8014110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014112:	2300      	movs	r3, #0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3714      	adds	r7, #20
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr

08014120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014120:	b480      	push	{r7}
 8014122:	b085      	sub	sp, #20
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	695b      	ldr	r3, [r3, #20]
 801412c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	699b      	ldr	r3, [r3, #24]
 8014132:	68fa      	ldr	r2, [r7, #12]
 8014134:	4013      	ands	r3, r2
 8014136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014138:	68fb      	ldr	r3, [r7, #12]
}
 801413a:	4618      	mov	r0, r3
 801413c:	3714      	adds	r7, #20
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr

08014146 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014146:	b480      	push	{r7}
 8014148:	b085      	sub	sp, #20
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014158:	699b      	ldr	r3, [r3, #24]
 801415a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014162:	69db      	ldr	r3, [r3, #28]
 8014164:	68ba      	ldr	r2, [r7, #8]
 8014166:	4013      	ands	r3, r2
 8014168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	0c1b      	lsrs	r3, r3, #16
}
 801416e:	4618      	mov	r0, r3
 8014170:	3714      	adds	r7, #20
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr

0801417a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801417a:	b480      	push	{r7}
 801417c:	b085      	sub	sp, #20
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801418c:	699b      	ldr	r3, [r3, #24]
 801418e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014196:	69db      	ldr	r3, [r3, #28]
 8014198:	68ba      	ldr	r2, [r7, #8]
 801419a:	4013      	ands	r3, r2
 801419c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	b29b      	uxth	r3, r3
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3714      	adds	r7, #20
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr

080141ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80141ae:	b480      	push	{r7}
 80141b0:	b085      	sub	sp, #20
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
 80141b6:	460b      	mov	r3, r1
 80141b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80141be:	78fb      	ldrb	r3, [r7, #3]
 80141c0:	015a      	lsls	r2, r3, #5
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	4413      	add	r3, r2
 80141c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141d4:	695b      	ldr	r3, [r3, #20]
 80141d6:	68ba      	ldr	r2, [r7, #8]
 80141d8:	4013      	ands	r3, r2
 80141da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80141dc:	68bb      	ldr	r3, [r7, #8]
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3714      	adds	r7, #20
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr

080141ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80141ea:	b480      	push	{r7}
 80141ec:	b087      	sub	sp, #28
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
 80141f2:	460b      	mov	r3, r1
 80141f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014200:	691b      	ldr	r3, [r3, #16]
 8014202:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801420c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801420e:	78fb      	ldrb	r3, [r7, #3]
 8014210:	f003 030f 	and.w	r3, r3, #15
 8014214:	68fa      	ldr	r2, [r7, #12]
 8014216:	fa22 f303 	lsr.w	r3, r2, r3
 801421a:	01db      	lsls	r3, r3, #7
 801421c:	b2db      	uxtb	r3, r3
 801421e:	693a      	ldr	r2, [r7, #16]
 8014220:	4313      	orrs	r3, r2
 8014222:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014224:	78fb      	ldrb	r3, [r7, #3]
 8014226:	015a      	lsls	r2, r3, #5
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	4413      	add	r3, r2
 801422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	693a      	ldr	r2, [r7, #16]
 8014234:	4013      	ands	r3, r2
 8014236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014238:	68bb      	ldr	r3, [r7, #8]
}
 801423a:	4618      	mov	r0, r3
 801423c:	371c      	adds	r7, #28
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014246:	b480      	push	{r7}
 8014248:	b083      	sub	sp, #12
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	695b      	ldr	r3, [r3, #20]
 8014252:	f003 0301 	and.w	r3, r3, #1
}
 8014256:	4618      	mov	r0, r3
 8014258:	370c      	adds	r7, #12
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr
	...

08014264 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014264:	b480      	push	{r7}
 8014266:	b085      	sub	sp, #20
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801427e:	4619      	mov	r1, r3
 8014280:	4b09      	ldr	r3, [pc, #36]	; (80142a8 <USB_ActivateSetup+0x44>)
 8014282:	4013      	ands	r3, r2
 8014284:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	68fa      	ldr	r2, [r7, #12]
 8014290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801429a:	2300      	movs	r3, #0
}
 801429c:	4618      	mov	r0, r3
 801429e:	3714      	adds	r7, #20
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr
 80142a8:	fffff800 	.word	0xfffff800

080142ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80142ac:	b480      	push	{r7}
 80142ae:	b087      	sub	sp, #28
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	460b      	mov	r3, r1
 80142b6:	607a      	str	r2, [r7, #4]
 80142b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	333c      	adds	r3, #60	; 0x3c
 80142c2:	3304      	adds	r3, #4
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	4a26      	ldr	r2, [pc, #152]	; (8014364 <USB_EP0_OutStart+0xb8>)
 80142cc:	4293      	cmp	r3, r2
 80142ce:	d90a      	bls.n	80142e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142e0:	d101      	bne.n	80142e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80142e2:	2300      	movs	r3, #0
 80142e4:	e037      	b.n	8014356 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ec:	461a      	mov	r2, r3
 80142ee:	2300      	movs	r3, #0
 80142f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142f8:	691b      	ldr	r3, [r3, #16]
 80142fa:	697a      	ldr	r2, [r7, #20]
 80142fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801430c:	691b      	ldr	r3, [r3, #16]
 801430e:	697a      	ldr	r2, [r7, #20]
 8014310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014314:	f043 0318 	orr.w	r3, r3, #24
 8014318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	697a      	ldr	r2, [r7, #20]
 8014324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014328:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801432c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801432e:	7afb      	ldrb	r3, [r7, #11]
 8014330:	2b01      	cmp	r3, #1
 8014332:	d10f      	bne.n	8014354 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801433a:	461a      	mov	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	697a      	ldr	r2, [r7, #20]
 801434a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801434e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014354:	2300      	movs	r3, #0
}
 8014356:	4618      	mov	r0, r3
 8014358:	371c      	adds	r7, #28
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	4f54300a 	.word	0x4f54300a

08014368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014370:	2300      	movs	r3, #0
 8014372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	3301      	adds	r3, #1
 8014378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	4a13      	ldr	r2, [pc, #76]	; (80143cc <USB_CoreReset+0x64>)
 801437e:	4293      	cmp	r3, r2
 8014380:	d901      	bls.n	8014386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014382:	2303      	movs	r3, #3
 8014384:	e01b      	b.n	80143be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	691b      	ldr	r3, [r3, #16]
 801438a:	2b00      	cmp	r3, #0
 801438c:	daf2      	bge.n	8014374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801438e:	2300      	movs	r3, #0
 8014390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	691b      	ldr	r3, [r3, #16]
 8014396:	f043 0201 	orr.w	r2, r3, #1
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	3301      	adds	r3, #1
 80143a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	4a09      	ldr	r2, [pc, #36]	; (80143cc <USB_CoreReset+0x64>)
 80143a8:	4293      	cmp	r3, r2
 80143aa:	d901      	bls.n	80143b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80143ac:	2303      	movs	r3, #3
 80143ae:	e006      	b.n	80143be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	f003 0301 	and.w	r3, r3, #1
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d0f0      	beq.n	801439e <USB_CoreReset+0x36>

  return HAL_OK;
 80143bc:	2300      	movs	r3, #0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3714      	adds	r7, #20
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	00030d40 	.word	0x00030d40

080143d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80143d4:	4904      	ldr	r1, [pc, #16]	; (80143e8 <MX_FATFS_Init+0x18>)
 80143d6:	4805      	ldr	r0, [pc, #20]	; (80143ec <MX_FATFS_Init+0x1c>)
 80143d8:	f002 fa80 	bl	80168dc <FATFS_LinkDriver>
 80143dc:	4603      	mov	r3, r0
 80143de:	461a      	mov	r2, r3
 80143e0:	4b03      	ldr	r3, [pc, #12]	; (80143f0 <MX_FATFS_Init+0x20>)
 80143e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80143e4:	bf00      	nop
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	240015f0 	.word	0x240015f0
 80143ec:	080188b8 	.word	0x080188b8
 80143f0:	240015ec 	.word	0x240015ec

080143f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80143fa:	2300      	movs	r3, #0
 80143fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80143fe:	f000 f885 	bl	801450c <BSP_SD_IsDetected>
 8014402:	4603      	mov	r3, r0
 8014404:	2b01      	cmp	r3, #1
 8014406:	d001      	beq.n	801440c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014408:	2302      	movs	r3, #2
 801440a:	e012      	b.n	8014432 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801440c:	480b      	ldr	r0, [pc, #44]	; (801443c <BSP_SD_Init+0x48>)
 801440e:	f7f8 ff41 	bl	800d294 <HAL_SD_Init>
 8014412:	4603      	mov	r3, r0
 8014414:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014416:	79fb      	ldrb	r3, [r7, #7]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d109      	bne.n	8014430 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801441c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014420:	4806      	ldr	r0, [pc, #24]	; (801443c <BSP_SD_Init+0x48>)
 8014422:	f7f9 fdf7 	bl	800e014 <HAL_SD_ConfigWideBusOperation>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d001      	beq.n	8014430 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801442c:	2301      	movs	r3, #1
 801442e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014430:	79fb      	ldrb	r3, [r7, #7]
}
 8014432:	4618      	mov	r0, r3
 8014434:	3708      	adds	r7, #8
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	24000ed4 	.word	0x24000ed4

08014440 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801444c:	2300      	movs	r3, #0
 801444e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	68ba      	ldr	r2, [r7, #8]
 8014454:	68f9      	ldr	r1, [r7, #12]
 8014456:	4806      	ldr	r0, [pc, #24]	; (8014470 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014458:	f7f9 f83c 	bl	800d4d4 <HAL_SD_ReadBlocks_DMA>
 801445c:	4603      	mov	r3, r0
 801445e:	2b00      	cmp	r3, #0
 8014460:	d001      	beq.n	8014466 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014462:	2301      	movs	r3, #1
 8014464:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014466:	7dfb      	ldrb	r3, [r7, #23]
}
 8014468:	4618      	mov	r0, r3
 801446a:	3718      	adds	r7, #24
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	24000ed4 	.word	0x24000ed4

08014474 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b086      	sub	sp, #24
 8014478:	af00      	add	r7, sp, #0
 801447a:	60f8      	str	r0, [r7, #12]
 801447c:	60b9      	str	r1, [r7, #8]
 801447e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014480:	2300      	movs	r3, #0
 8014482:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	68ba      	ldr	r2, [r7, #8]
 8014488:	68f9      	ldr	r1, [r7, #12]
 801448a:	4806      	ldr	r0, [pc, #24]	; (80144a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801448c:	f7f9 f8ca 	bl	800d624 <HAL_SD_WriteBlocks_DMA>
 8014490:	4603      	mov	r3, r0
 8014492:	2b00      	cmp	r3, #0
 8014494:	d001      	beq.n	801449a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014496:	2301      	movs	r3, #1
 8014498:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801449a:	7dfb      	ldrb	r3, [r7, #23]
}
 801449c:	4618      	mov	r0, r3
 801449e:	3718      	adds	r7, #24
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	24000ed4 	.word	0x24000ed4

080144a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80144ac:	4805      	ldr	r0, [pc, #20]	; (80144c4 <BSP_SD_GetCardState+0x1c>)
 80144ae:	f7f9 fec3 	bl	800e238 <HAL_SD_GetCardState>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b04      	cmp	r3, #4
 80144b6:	bf14      	ite	ne
 80144b8:	2301      	movne	r3, #1
 80144ba:	2300      	moveq	r3, #0
 80144bc:	b2db      	uxtb	r3, r3
}
 80144be:	4618      	mov	r0, r3
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	24000ed4 	.word	0x24000ed4

080144c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80144d0:	6879      	ldr	r1, [r7, #4]
 80144d2:	4803      	ldr	r0, [pc, #12]	; (80144e0 <BSP_SD_GetCardInfo+0x18>)
 80144d4:	f7f9 fd72 	bl	800dfbc <HAL_SD_GetCardInfo>
}
 80144d8:	bf00      	nop
 80144da:	3708      	adds	r7, #8
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	24000ed4 	.word	0x24000ed4

080144e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80144ec:	f000 f9a0 	bl	8014830 <BSP_SD_WriteCpltCallback>
}
 80144f0:	bf00      	nop
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}

080144f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014500:	f000 f9a2 	bl	8014848 <BSP_SD_ReadCpltCallback>
}
 8014504:	bf00      	nop
 8014506:	3708      	adds	r7, #8
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014512:	2301      	movs	r3, #1
 8014514:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014516:	f000 f80b 	bl	8014530 <BSP_PlatformIsDetected>
 801451a:	4603      	mov	r3, r0
 801451c:	2b00      	cmp	r3, #0
 801451e:	d101      	bne.n	8014524 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014520:	2300      	movs	r3, #0
 8014522:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014524:	79fb      	ldrb	r3, [r7, #7]
 8014526:	b2db      	uxtb	r3, r3
}
 8014528:	4618      	mov	r0, r3
 801452a:	3708      	adds	r7, #8
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014536:	2301      	movs	r3, #1
 8014538:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801453a:	2104      	movs	r1, #4
 801453c:	4806      	ldr	r0, [pc, #24]	; (8014558 <BSP_PlatformIsDetected+0x28>)
 801453e:	f7f3 fdd9 	bl	80080f4 <HAL_GPIO_ReadPin>
 8014542:	4603      	mov	r3, r0
 8014544:	2b00      	cmp	r3, #0
 8014546:	d001      	beq.n	801454c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014548:	2300      	movs	r3, #0
 801454a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801454c:	79fb      	ldrb	r3, [r7, #7]
}
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	58020400 	.word	0x58020400

0801455c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014564:	f7ef fb20 	bl	8003ba8 <HAL_GetTick>
 8014568:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801456a:	e006      	b.n	801457a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801456c:	f7ff ff9c 	bl	80144a8 <BSP_SD_GetCardState>
 8014570:	4603      	mov	r3, r0
 8014572:	2b00      	cmp	r3, #0
 8014574:	d101      	bne.n	801457a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014576:	2300      	movs	r3, #0
 8014578:	e009      	b.n	801458e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801457a:	f7ef fb15 	bl	8003ba8 <HAL_GetTick>
 801457e:	4602      	mov	r2, r0
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	429a      	cmp	r2, r3
 8014588:	d8f0      	bhi.n	801456c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801458a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801458e:	4618      	mov	r0, r3
 8014590:	3710      	adds	r7, #16
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
	...

08014598 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	4603      	mov	r3, r0
 80145a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80145a2:	4b0b      	ldr	r3, [pc, #44]	; (80145d0 <SD_CheckStatus+0x38>)
 80145a4:	2201      	movs	r2, #1
 80145a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80145a8:	f7ff ff7e 	bl	80144a8 <BSP_SD_GetCardState>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d107      	bne.n	80145c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80145b2:	4b07      	ldr	r3, [pc, #28]	; (80145d0 <SD_CheckStatus+0x38>)
 80145b4:	781b      	ldrb	r3, [r3, #0]
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	f023 0301 	bic.w	r3, r3, #1
 80145bc:	b2da      	uxtb	r2, r3
 80145be:	4b04      	ldr	r3, [pc, #16]	; (80145d0 <SD_CheckStatus+0x38>)
 80145c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80145c2:	4b03      	ldr	r3, [pc, #12]	; (80145d0 <SD_CheckStatus+0x38>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	b2db      	uxtb	r3, r3
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3708      	adds	r7, #8
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	2400000d 	.word	0x2400000d

080145d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
 80145da:	4603      	mov	r3, r0
 80145dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80145de:	f7ff ff09 	bl	80143f4 <BSP_SD_Init>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d107      	bne.n	80145f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80145e8:	79fb      	ldrb	r3, [r7, #7]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7ff ffd4 	bl	8014598 <SD_CheckStatus>
 80145f0:	4603      	mov	r3, r0
 80145f2:	461a      	mov	r2, r3
 80145f4:	4b04      	ldr	r3, [pc, #16]	; (8014608 <SD_initialize+0x34>)
 80145f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80145f8:	4b03      	ldr	r3, [pc, #12]	; (8014608 <SD_initialize+0x34>)
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	b2db      	uxtb	r3, r3
}
 80145fe:	4618      	mov	r0, r3
 8014600:	3708      	adds	r7, #8
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	2400000d 	.word	0x2400000d

0801460c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	4603      	mov	r3, r0
 8014614:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014616:	79fb      	ldrb	r3, [r7, #7]
 8014618:	4618      	mov	r0, r3
 801461a:	f7ff ffbd 	bl	8014598 <SD_CheckStatus>
 801461e:	4603      	mov	r3, r0
}
 8014620:	4618      	mov	r0, r3
 8014622:	3708      	adds	r7, #8
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b086      	sub	sp, #24
 801462c:	af00      	add	r7, sp, #0
 801462e:	60b9      	str	r1, [r7, #8]
 8014630:	607a      	str	r2, [r7, #4]
 8014632:	603b      	str	r3, [r7, #0]
 8014634:	4603      	mov	r3, r0
 8014636:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014638:	2301      	movs	r3, #1
 801463a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801463c:	f247 5030 	movw	r0, #30000	; 0x7530
 8014640:	f7ff ff8c 	bl	801455c <SD_CheckStatusWithTimeout>
 8014644:	4603      	mov	r3, r0
 8014646:	2b00      	cmp	r3, #0
 8014648:	da01      	bge.n	801464e <SD_read+0x26>
  {
    return res;
 801464a:	7dfb      	ldrb	r3, [r7, #23]
 801464c:	e03b      	b.n	80146c6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801464e:	683a      	ldr	r2, [r7, #0]
 8014650:	6879      	ldr	r1, [r7, #4]
 8014652:	68b8      	ldr	r0, [r7, #8]
 8014654:	f7ff fef4 	bl	8014440 <BSP_SD_ReadBlocks_DMA>
 8014658:	4603      	mov	r3, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d132      	bne.n	80146c4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801465e:	4b1c      	ldr	r3, [pc, #112]	; (80146d0 <SD_read+0xa8>)
 8014660:	2200      	movs	r2, #0
 8014662:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014664:	f7ef faa0 	bl	8003ba8 <HAL_GetTick>
 8014668:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801466a:	bf00      	nop
 801466c:	4b18      	ldr	r3, [pc, #96]	; (80146d0 <SD_read+0xa8>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d108      	bne.n	8014686 <SD_read+0x5e>
 8014674:	f7ef fa98 	bl	8003ba8 <HAL_GetTick>
 8014678:	4602      	mov	r2, r0
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	1ad3      	subs	r3, r2, r3
 801467e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014682:	4293      	cmp	r3, r2
 8014684:	d9f2      	bls.n	801466c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014686:	4b12      	ldr	r3, [pc, #72]	; (80146d0 <SD_read+0xa8>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d102      	bne.n	8014694 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801468e:	2301      	movs	r3, #1
 8014690:	75fb      	strb	r3, [r7, #23]
 8014692:	e017      	b.n	80146c4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014694:	4b0e      	ldr	r3, [pc, #56]	; (80146d0 <SD_read+0xa8>)
 8014696:	2200      	movs	r2, #0
 8014698:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801469a:	f7ef fa85 	bl	8003ba8 <HAL_GetTick>
 801469e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80146a0:	e007      	b.n	80146b2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80146a2:	f7ff ff01 	bl	80144a8 <BSP_SD_GetCardState>
 80146a6:	4603      	mov	r3, r0
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d102      	bne.n	80146b2 <SD_read+0x8a>
          {
            res = RES_OK;
 80146ac:	2300      	movs	r3, #0
 80146ae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80146b0:	e008      	b.n	80146c4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80146b2:	f7ef fa79 	bl	8003ba8 <HAL_GetTick>
 80146b6:	4602      	mov	r2, r0
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80146c0:	4293      	cmp	r3, r2
 80146c2:	d9ee      	bls.n	80146a2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80146c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3718      	adds	r7, #24
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	240015f8 	.word	0x240015f8

080146d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b086      	sub	sp, #24
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60b9      	str	r1, [r7, #8]
 80146dc:	607a      	str	r2, [r7, #4]
 80146de:	603b      	str	r3, [r7, #0]
 80146e0:	4603      	mov	r3, r0
 80146e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80146e4:	2301      	movs	r3, #1
 80146e6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80146e8:	4b24      	ldr	r3, [pc, #144]	; (801477c <SD_write+0xa8>)
 80146ea:	2200      	movs	r2, #0
 80146ec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80146ee:	f247 5030 	movw	r0, #30000	; 0x7530
 80146f2:	f7ff ff33 	bl	801455c <SD_CheckStatusWithTimeout>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	da01      	bge.n	8014700 <SD_write+0x2c>
  {
    return res;
 80146fc:	7dfb      	ldrb	r3, [r7, #23]
 80146fe:	e038      	b.n	8014772 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014700:	683a      	ldr	r2, [r7, #0]
 8014702:	6879      	ldr	r1, [r7, #4]
 8014704:	68b8      	ldr	r0, [r7, #8]
 8014706:	f7ff feb5 	bl	8014474 <BSP_SD_WriteBlocks_DMA>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d12f      	bne.n	8014770 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014710:	f7ef fa4a 	bl	8003ba8 <HAL_GetTick>
 8014714:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014716:	bf00      	nop
 8014718:	4b18      	ldr	r3, [pc, #96]	; (801477c <SD_write+0xa8>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d108      	bne.n	8014732 <SD_write+0x5e>
 8014720:	f7ef fa42 	bl	8003ba8 <HAL_GetTick>
 8014724:	4602      	mov	r2, r0
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	1ad3      	subs	r3, r2, r3
 801472a:	f247 522f 	movw	r2, #29999	; 0x752f
 801472e:	4293      	cmp	r3, r2
 8014730:	d9f2      	bls.n	8014718 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014732:	4b12      	ldr	r3, [pc, #72]	; (801477c <SD_write+0xa8>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d102      	bne.n	8014740 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801473a:	2301      	movs	r3, #1
 801473c:	75fb      	strb	r3, [r7, #23]
 801473e:	e017      	b.n	8014770 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014740:	4b0e      	ldr	r3, [pc, #56]	; (801477c <SD_write+0xa8>)
 8014742:	2200      	movs	r2, #0
 8014744:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014746:	f7ef fa2f 	bl	8003ba8 <HAL_GetTick>
 801474a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801474c:	e007      	b.n	801475e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801474e:	f7ff feab 	bl	80144a8 <BSP_SD_GetCardState>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d102      	bne.n	801475e <SD_write+0x8a>
          {
            res = RES_OK;
 8014758:	2300      	movs	r3, #0
 801475a:	75fb      	strb	r3, [r7, #23]
            break;
 801475c:	e008      	b.n	8014770 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801475e:	f7ef fa23 	bl	8003ba8 <HAL_GetTick>
 8014762:	4602      	mov	r2, r0
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	1ad3      	subs	r3, r2, r3
 8014768:	f247 522f 	movw	r2, #29999	; 0x752f
 801476c:	4293      	cmp	r3, r2
 801476e:	d9ee      	bls.n	801474e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014770:	7dfb      	ldrb	r3, [r7, #23]
}
 8014772:	4618      	mov	r0, r3
 8014774:	3718      	adds	r7, #24
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	240015f4 	.word	0x240015f4

08014780 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08c      	sub	sp, #48	; 0x30
 8014784:	af00      	add	r7, sp, #0
 8014786:	4603      	mov	r3, r0
 8014788:	603a      	str	r2, [r7, #0]
 801478a:	71fb      	strb	r3, [r7, #7]
 801478c:	460b      	mov	r3, r1
 801478e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014790:	2301      	movs	r3, #1
 8014792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014796:	4b25      	ldr	r3, [pc, #148]	; (801482c <SD_ioctl+0xac>)
 8014798:	781b      	ldrb	r3, [r3, #0]
 801479a:	b2db      	uxtb	r3, r3
 801479c:	f003 0301 	and.w	r3, r3, #1
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d001      	beq.n	80147a8 <SD_ioctl+0x28>
 80147a4:	2303      	movs	r3, #3
 80147a6:	e03c      	b.n	8014822 <SD_ioctl+0xa2>

  switch (cmd)
 80147a8:	79bb      	ldrb	r3, [r7, #6]
 80147aa:	2b03      	cmp	r3, #3
 80147ac:	d834      	bhi.n	8014818 <SD_ioctl+0x98>
 80147ae:	a201      	add	r2, pc, #4	; (adr r2, 80147b4 <SD_ioctl+0x34>)
 80147b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b4:	080147c5 	.word	0x080147c5
 80147b8:	080147cd 	.word	0x080147cd
 80147bc:	080147e5 	.word	0x080147e5
 80147c0:	080147ff 	.word	0x080147ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80147c4:	2300      	movs	r3, #0
 80147c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147ca:	e028      	b.n	801481e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80147cc:	f107 0308 	add.w	r3, r7, #8
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7ff fe79 	bl	80144c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80147d6:	6a3a      	ldr	r2, [r7, #32]
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80147dc:	2300      	movs	r3, #0
 80147de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147e2:	e01c      	b.n	801481e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80147e4:	f107 0308 	add.w	r3, r7, #8
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7ff fe6d 	bl	80144c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80147ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80147f6:	2300      	movs	r3, #0
 80147f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147fc:	e00f      	b.n	801481e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80147fe:	f107 0308 	add.w	r3, r7, #8
 8014802:	4618      	mov	r0, r3
 8014804:	f7ff fe60 	bl	80144c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480a:	0a5a      	lsrs	r2, r3, #9
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014810:	2300      	movs	r3, #0
 8014812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014816:	e002      	b.n	801481e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014818:	2304      	movs	r3, #4
 801481a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801481e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014822:	4618      	mov	r0, r3
 8014824:	3730      	adds	r7, #48	; 0x30
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	2400000d 	.word	0x2400000d

08014830 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014830:	b480      	push	{r7}
 8014832:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014834:	4b03      	ldr	r3, [pc, #12]	; (8014844 <BSP_SD_WriteCpltCallback+0x14>)
 8014836:	2201      	movs	r2, #1
 8014838:	601a      	str	r2, [r3, #0]
}
 801483a:	bf00      	nop
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr
 8014844:	240015f4 	.word	0x240015f4

08014848 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014848:	b480      	push	{r7}
 801484a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801484c:	4b03      	ldr	r3, [pc, #12]	; (801485c <BSP_SD_ReadCpltCallback+0x14>)
 801484e:	2201      	movs	r2, #1
 8014850:	601a      	str	r2, [r3, #0]
}
 8014852:	bf00      	nop
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr
 801485c:	240015f8 	.word	0x240015f8

08014860 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	460b      	mov	r3, r1
 801486a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801486c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014870:	f002 fd2a 	bl	80172c8 <USBD_static_malloc>
 8014874:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d109      	bne.n	8014890 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	32b0      	adds	r2, #176	; 0xb0
 8014886:	2100      	movs	r1, #0
 8014888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801488c:	2302      	movs	r3, #2
 801488e:	e0d4      	b.n	8014a3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014890:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014894:	2100      	movs	r1, #0
 8014896:	68f8      	ldr	r0, [r7, #12]
 8014898:	f002 fda8 	bl	80173ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	32b0      	adds	r2, #176	; 0xb0
 80148a6:	68f9      	ldr	r1, [r7, #12]
 80148a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	32b0      	adds	r2, #176	; 0xb0
 80148b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	7c1b      	ldrb	r3, [r3, #16]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d138      	bne.n	801493a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80148c8:	4b5e      	ldr	r3, [pc, #376]	; (8014a44 <USBD_CDC_Init+0x1e4>)
 80148ca:	7819      	ldrb	r1, [r3, #0]
 80148cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148d0:	2202      	movs	r2, #2
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f002 fbd5 	bl	8017082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80148d8:	4b5a      	ldr	r3, [pc, #360]	; (8014a44 <USBD_CDC_Init+0x1e4>)
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	f003 020f 	and.w	r2, r3, #15
 80148e0:	6879      	ldr	r1, [r7, #4]
 80148e2:	4613      	mov	r3, r2
 80148e4:	009b      	lsls	r3, r3, #2
 80148e6:	4413      	add	r3, r2
 80148e8:	009b      	lsls	r3, r3, #2
 80148ea:	440b      	add	r3, r1
 80148ec:	3324      	adds	r3, #36	; 0x24
 80148ee:	2201      	movs	r2, #1
 80148f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80148f2:	4b55      	ldr	r3, [pc, #340]	; (8014a48 <USBD_CDC_Init+0x1e8>)
 80148f4:	7819      	ldrb	r1, [r3, #0]
 80148f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148fa:	2202      	movs	r2, #2
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f002 fbc0 	bl	8017082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014902:	4b51      	ldr	r3, [pc, #324]	; (8014a48 <USBD_CDC_Init+0x1e8>)
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	f003 020f 	and.w	r2, r3, #15
 801490a:	6879      	ldr	r1, [r7, #4]
 801490c:	4613      	mov	r3, r2
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	4413      	add	r3, r2
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	440b      	add	r3, r1
 8014916:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801491a:	2201      	movs	r2, #1
 801491c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801491e:	4b4b      	ldr	r3, [pc, #300]	; (8014a4c <USBD_CDC_Init+0x1ec>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	f003 020f 	and.w	r2, r3, #15
 8014926:	6879      	ldr	r1, [r7, #4]
 8014928:	4613      	mov	r3, r2
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	4413      	add	r3, r2
 801492e:	009b      	lsls	r3, r3, #2
 8014930:	440b      	add	r3, r1
 8014932:	3326      	adds	r3, #38	; 0x26
 8014934:	2210      	movs	r2, #16
 8014936:	801a      	strh	r2, [r3, #0]
 8014938:	e035      	b.n	80149a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801493a:	4b42      	ldr	r3, [pc, #264]	; (8014a44 <USBD_CDC_Init+0x1e4>)
 801493c:	7819      	ldrb	r1, [r3, #0]
 801493e:	2340      	movs	r3, #64	; 0x40
 8014940:	2202      	movs	r2, #2
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f002 fb9d 	bl	8017082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014948:	4b3e      	ldr	r3, [pc, #248]	; (8014a44 <USBD_CDC_Init+0x1e4>)
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	f003 020f 	and.w	r2, r3, #15
 8014950:	6879      	ldr	r1, [r7, #4]
 8014952:	4613      	mov	r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	4413      	add	r3, r2
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	440b      	add	r3, r1
 801495c:	3324      	adds	r3, #36	; 0x24
 801495e:	2201      	movs	r2, #1
 8014960:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014962:	4b39      	ldr	r3, [pc, #228]	; (8014a48 <USBD_CDC_Init+0x1e8>)
 8014964:	7819      	ldrb	r1, [r3, #0]
 8014966:	2340      	movs	r3, #64	; 0x40
 8014968:	2202      	movs	r2, #2
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f002 fb89 	bl	8017082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014970:	4b35      	ldr	r3, [pc, #212]	; (8014a48 <USBD_CDC_Init+0x1e8>)
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	f003 020f 	and.w	r2, r3, #15
 8014978:	6879      	ldr	r1, [r7, #4]
 801497a:	4613      	mov	r3, r2
 801497c:	009b      	lsls	r3, r3, #2
 801497e:	4413      	add	r3, r2
 8014980:	009b      	lsls	r3, r3, #2
 8014982:	440b      	add	r3, r1
 8014984:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014988:	2201      	movs	r2, #1
 801498a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801498c:	4b2f      	ldr	r3, [pc, #188]	; (8014a4c <USBD_CDC_Init+0x1ec>)
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	f003 020f 	and.w	r2, r3, #15
 8014994:	6879      	ldr	r1, [r7, #4]
 8014996:	4613      	mov	r3, r2
 8014998:	009b      	lsls	r3, r3, #2
 801499a:	4413      	add	r3, r2
 801499c:	009b      	lsls	r3, r3, #2
 801499e:	440b      	add	r3, r1
 80149a0:	3326      	adds	r3, #38	; 0x26
 80149a2:	2210      	movs	r2, #16
 80149a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80149a6:	4b29      	ldr	r3, [pc, #164]	; (8014a4c <USBD_CDC_Init+0x1ec>)
 80149a8:	7819      	ldrb	r1, [r3, #0]
 80149aa:	2308      	movs	r3, #8
 80149ac:	2203      	movs	r2, #3
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f002 fb67 	bl	8017082 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80149b4:	4b25      	ldr	r3, [pc, #148]	; (8014a4c <USBD_CDC_Init+0x1ec>)
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	f003 020f 	and.w	r2, r3, #15
 80149bc:	6879      	ldr	r1, [r7, #4]
 80149be:	4613      	mov	r3, r2
 80149c0:	009b      	lsls	r3, r3, #2
 80149c2:	4413      	add	r3, r2
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	440b      	add	r3, r1
 80149c8:	3324      	adds	r3, #36	; 0x24
 80149ca:	2201      	movs	r2, #1
 80149cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2200      	movs	r2, #0
 80149d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	33b0      	adds	r3, #176	; 0xb0
 80149e0:	009b      	lsls	r3, r3, #2
 80149e2:	4413      	add	r3, r2
 80149e4:	685b      	ldr	r3, [r3, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2200      	movs	r2, #0
 80149ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2200      	movs	r2, #0
 80149f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014a04:	2302      	movs	r3, #2
 8014a06:	e018      	b.n	8014a3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	7c1b      	ldrb	r3, [r3, #16]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d10a      	bne.n	8014a26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a10:	4b0d      	ldr	r3, [pc, #52]	; (8014a48 <USBD_CDC_Init+0x1e8>)
 8014a12:	7819      	ldrb	r1, [r3, #0]
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f002 fc1e 	bl	8017260 <USBD_LL_PrepareReceive>
 8014a24:	e008      	b.n	8014a38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a26:	4b08      	ldr	r3, [pc, #32]	; (8014a48 <USBD_CDC_Init+0x1e8>)
 8014a28:	7819      	ldrb	r1, [r3, #0]
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a30:	2340      	movs	r3, #64	; 0x40
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f002 fc14 	bl	8017260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014a38:	2300      	movs	r3, #0
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	24000097 	.word	0x24000097
 8014a48:	24000098 	.word	0x24000098
 8014a4c:	24000099 	.word	0x24000099

08014a50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b082      	sub	sp, #8
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	460b      	mov	r3, r1
 8014a5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014a5c:	4b3a      	ldr	r3, [pc, #232]	; (8014b48 <USBD_CDC_DeInit+0xf8>)
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	4619      	mov	r1, r3
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f002 fb33 	bl	80170ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014a68:	4b37      	ldr	r3, [pc, #220]	; (8014b48 <USBD_CDC_DeInit+0xf8>)
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	f003 020f 	and.w	r2, r3, #15
 8014a70:	6879      	ldr	r1, [r7, #4]
 8014a72:	4613      	mov	r3, r2
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	4413      	add	r3, r2
 8014a78:	009b      	lsls	r3, r3, #2
 8014a7a:	440b      	add	r3, r1
 8014a7c:	3324      	adds	r3, #36	; 0x24
 8014a7e:	2200      	movs	r2, #0
 8014a80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014a82:	4b32      	ldr	r3, [pc, #200]	; (8014b4c <USBD_CDC_DeInit+0xfc>)
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	4619      	mov	r1, r3
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f002 fb20 	bl	80170ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014a8e:	4b2f      	ldr	r3, [pc, #188]	; (8014b4c <USBD_CDC_DeInit+0xfc>)
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	f003 020f 	and.w	r2, r3, #15
 8014a96:	6879      	ldr	r1, [r7, #4]
 8014a98:	4613      	mov	r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	440b      	add	r3, r1
 8014aa2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014aaa:	4b29      	ldr	r3, [pc, #164]	; (8014b50 <USBD_CDC_DeInit+0x100>)
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	4619      	mov	r1, r3
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f002 fb0c 	bl	80170ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014ab6:	4b26      	ldr	r3, [pc, #152]	; (8014b50 <USBD_CDC_DeInit+0x100>)
 8014ab8:	781b      	ldrb	r3, [r3, #0]
 8014aba:	f003 020f 	and.w	r2, r3, #15
 8014abe:	6879      	ldr	r1, [r7, #4]
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	4413      	add	r3, r2
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	440b      	add	r3, r1
 8014aca:	3324      	adds	r3, #36	; 0x24
 8014acc:	2200      	movs	r2, #0
 8014ace:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014ad0:	4b1f      	ldr	r3, [pc, #124]	; (8014b50 <USBD_CDC_DeInit+0x100>)
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	f003 020f 	and.w	r2, r3, #15
 8014ad8:	6879      	ldr	r1, [r7, #4]
 8014ada:	4613      	mov	r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	4413      	add	r3, r2
 8014ae0:	009b      	lsls	r3, r3, #2
 8014ae2:	440b      	add	r3, r1
 8014ae4:	3326      	adds	r3, #38	; 0x26
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	32b0      	adds	r2, #176	; 0xb0
 8014af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d01f      	beq.n	8014b3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	33b0      	adds	r3, #176	; 0xb0
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4413      	add	r3, r2
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	32b0      	adds	r2, #176	; 0xb0
 8014b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f002 fbe0 	bl	80172e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	32b0      	adds	r2, #176	; 0xb0
 8014b2e:	2100      	movs	r1, #0
 8014b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2200      	movs	r2, #0
 8014b38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014b3c:	2300      	movs	r3, #0
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3708      	adds	r7, #8
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	24000097 	.word	0x24000097
 8014b4c:	24000098 	.word	0x24000098
 8014b50:	24000099 	.word	0x24000099

08014b54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b086      	sub	sp, #24
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	32b0      	adds	r2, #176	; 0xb0
 8014b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014b72:	2300      	movs	r3, #0
 8014b74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b76:	2300      	movs	r3, #0
 8014b78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d101      	bne.n	8014b84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014b80:	2303      	movs	r3, #3
 8014b82:	e0bf      	b.n	8014d04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d050      	beq.n	8014c32 <USBD_CDC_Setup+0xde>
 8014b90:	2b20      	cmp	r3, #32
 8014b92:	f040 80af 	bne.w	8014cf4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	88db      	ldrh	r3, [r3, #6]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d03a      	beq.n	8014c14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	b25b      	sxtb	r3, r3
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	da1b      	bge.n	8014be0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bae:	687a      	ldr	r2, [r7, #4]
 8014bb0:	33b0      	adds	r3, #176	; 0xb0
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	4413      	add	r3, r2
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	689b      	ldr	r3, [r3, #8]
 8014bba:	683a      	ldr	r2, [r7, #0]
 8014bbc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014bbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014bc0:	683a      	ldr	r2, [r7, #0]
 8014bc2:	88d2      	ldrh	r2, [r2, #6]
 8014bc4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	88db      	ldrh	r3, [r3, #6]
 8014bca:	2b07      	cmp	r3, #7
 8014bcc:	bf28      	it	cs
 8014bce:	2307      	movcs	r3, #7
 8014bd0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	89fa      	ldrh	r2, [r7, #14]
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f001 fdb3 	bl	8016744 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014bde:	e090      	b.n	8014d02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	785a      	ldrb	r2, [r3, #1]
 8014be4:	693b      	ldr	r3, [r7, #16]
 8014be6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	88db      	ldrh	r3, [r3, #6]
 8014bee:	2b3f      	cmp	r3, #63	; 0x3f
 8014bf0:	d803      	bhi.n	8014bfa <USBD_CDC_Setup+0xa6>
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	88db      	ldrh	r3, [r3, #6]
 8014bf6:	b2da      	uxtb	r2, r3
 8014bf8:	e000      	b.n	8014bfc <USBD_CDC_Setup+0xa8>
 8014bfa:	2240      	movs	r2, #64	; 0x40
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014c02:	6939      	ldr	r1, [r7, #16]
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f001 fdc5 	bl	801679c <USBD_CtlPrepareRx>
      break;
 8014c12:	e076      	b.n	8014d02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c1a:	687a      	ldr	r2, [r7, #4]
 8014c1c:	33b0      	adds	r3, #176	; 0xb0
 8014c1e:	009b      	lsls	r3, r3, #2
 8014c20:	4413      	add	r3, r2
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	689b      	ldr	r3, [r3, #8]
 8014c26:	683a      	ldr	r2, [r7, #0]
 8014c28:	7850      	ldrb	r0, [r2, #1]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	6839      	ldr	r1, [r7, #0]
 8014c2e:	4798      	blx	r3
      break;
 8014c30:	e067      	b.n	8014d02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	785b      	ldrb	r3, [r3, #1]
 8014c36:	2b0b      	cmp	r3, #11
 8014c38:	d851      	bhi.n	8014cde <USBD_CDC_Setup+0x18a>
 8014c3a:	a201      	add	r2, pc, #4	; (adr r2, 8014c40 <USBD_CDC_Setup+0xec>)
 8014c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c40:	08014c71 	.word	0x08014c71
 8014c44:	08014ced 	.word	0x08014ced
 8014c48:	08014cdf 	.word	0x08014cdf
 8014c4c:	08014cdf 	.word	0x08014cdf
 8014c50:	08014cdf 	.word	0x08014cdf
 8014c54:	08014cdf 	.word	0x08014cdf
 8014c58:	08014cdf 	.word	0x08014cdf
 8014c5c:	08014cdf 	.word	0x08014cdf
 8014c60:	08014cdf 	.word	0x08014cdf
 8014c64:	08014cdf 	.word	0x08014cdf
 8014c68:	08014c9b 	.word	0x08014c9b
 8014c6c:	08014cc5 	.word	0x08014cc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	2b03      	cmp	r3, #3
 8014c7a:	d107      	bne.n	8014c8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014c7c:	f107 030a 	add.w	r3, r7, #10
 8014c80:	2202      	movs	r2, #2
 8014c82:	4619      	mov	r1, r3
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f001 fd5d 	bl	8016744 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c8a:	e032      	b.n	8014cf2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f001 fce7 	bl	8016662 <USBD_CtlError>
            ret = USBD_FAIL;
 8014c94:	2303      	movs	r3, #3
 8014c96:	75fb      	strb	r3, [r7, #23]
          break;
 8014c98:	e02b      	b.n	8014cf2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	2b03      	cmp	r3, #3
 8014ca4:	d107      	bne.n	8014cb6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014ca6:	f107 030d 	add.w	r3, r7, #13
 8014caa:	2201      	movs	r2, #1
 8014cac:	4619      	mov	r1, r3
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f001 fd48 	bl	8016744 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014cb4:	e01d      	b.n	8014cf2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014cb6:	6839      	ldr	r1, [r7, #0]
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f001 fcd2 	bl	8016662 <USBD_CtlError>
            ret = USBD_FAIL;
 8014cbe:	2303      	movs	r3, #3
 8014cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8014cc2:	e016      	b.n	8014cf2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cca:	b2db      	uxtb	r3, r3
 8014ccc:	2b03      	cmp	r3, #3
 8014cce:	d00f      	beq.n	8014cf0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014cd0:	6839      	ldr	r1, [r7, #0]
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f001 fcc5 	bl	8016662 <USBD_CtlError>
            ret = USBD_FAIL;
 8014cd8:	2303      	movs	r3, #3
 8014cda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014cdc:	e008      	b.n	8014cf0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014cde:	6839      	ldr	r1, [r7, #0]
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f001 fcbe 	bl	8016662 <USBD_CtlError>
          ret = USBD_FAIL;
 8014ce6:	2303      	movs	r3, #3
 8014ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8014cea:	e002      	b.n	8014cf2 <USBD_CDC_Setup+0x19e>
          break;
 8014cec:	bf00      	nop
 8014cee:	e008      	b.n	8014d02 <USBD_CDC_Setup+0x1ae>
          break;
 8014cf0:	bf00      	nop
      }
      break;
 8014cf2:	e006      	b.n	8014d02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014cf4:	6839      	ldr	r1, [r7, #0]
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f001 fcb3 	bl	8016662 <USBD_CtlError>
      ret = USBD_FAIL;
 8014cfc:	2303      	movs	r3, #3
 8014cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8014d00:	bf00      	nop
  }

  return (uint8_t)ret;
 8014d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3718      	adds	r7, #24
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	460b      	mov	r3, r1
 8014d16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014d1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	32b0      	adds	r2, #176	; 0xb0
 8014d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d101      	bne.n	8014d36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014d32:	2303      	movs	r3, #3
 8014d34:	e065      	b.n	8014e02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	32b0      	adds	r2, #176	; 0xb0
 8014d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d46:	78fb      	ldrb	r3, [r7, #3]
 8014d48:	f003 020f 	and.w	r2, r3, #15
 8014d4c:	6879      	ldr	r1, [r7, #4]
 8014d4e:	4613      	mov	r3, r2
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	4413      	add	r3, r2
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	440b      	add	r3, r1
 8014d58:	3318      	adds	r3, #24
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d02f      	beq.n	8014dc0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014d60:	78fb      	ldrb	r3, [r7, #3]
 8014d62:	f003 020f 	and.w	r2, r3, #15
 8014d66:	6879      	ldr	r1, [r7, #4]
 8014d68:	4613      	mov	r3, r2
 8014d6a:	009b      	lsls	r3, r3, #2
 8014d6c:	4413      	add	r3, r2
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	440b      	add	r3, r1
 8014d72:	3318      	adds	r3, #24
 8014d74:	681a      	ldr	r2, [r3, #0]
 8014d76:	78fb      	ldrb	r3, [r7, #3]
 8014d78:	f003 010f 	and.w	r1, r3, #15
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	460b      	mov	r3, r1
 8014d80:	00db      	lsls	r3, r3, #3
 8014d82:	440b      	add	r3, r1
 8014d84:	009b      	lsls	r3, r3, #2
 8014d86:	4403      	add	r3, r0
 8014d88:	3344      	adds	r3, #68	; 0x44
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014d90:	fb01 f303 	mul.w	r3, r1, r3
 8014d94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d112      	bne.n	8014dc0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014d9a:	78fb      	ldrb	r3, [r7, #3]
 8014d9c:	f003 020f 	and.w	r2, r3, #15
 8014da0:	6879      	ldr	r1, [r7, #4]
 8014da2:	4613      	mov	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	4413      	add	r3, r2
 8014da8:	009b      	lsls	r3, r3, #2
 8014daa:	440b      	add	r3, r1
 8014dac:	3318      	adds	r3, #24
 8014dae:	2200      	movs	r2, #0
 8014db0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014db2:	78f9      	ldrb	r1, [r7, #3]
 8014db4:	2300      	movs	r3, #0
 8014db6:	2200      	movs	r2, #0
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f002 fa30 	bl	801721e <USBD_LL_Transmit>
 8014dbe:	e01f      	b.n	8014e00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	33b0      	adds	r3, #176	; 0xb0
 8014dd2:	009b      	lsls	r3, r3, #2
 8014dd4:	4413      	add	r3, r2
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	691b      	ldr	r3, [r3, #16]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d010      	beq.n	8014e00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014de4:	687a      	ldr	r2, [r7, #4]
 8014de6:	33b0      	adds	r3, #176	; 0xb0
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	4413      	add	r3, r2
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	691b      	ldr	r3, [r3, #16]
 8014df0:	68ba      	ldr	r2, [r7, #8]
 8014df2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014df6:	68ba      	ldr	r2, [r7, #8]
 8014df8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014dfc:	78fa      	ldrb	r2, [r7, #3]
 8014dfe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014e00:	2300      	movs	r3, #0
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3710      	adds	r7, #16
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b084      	sub	sp, #16
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
 8014e12:	460b      	mov	r3, r1
 8014e14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	32b0      	adds	r2, #176	; 0xb0
 8014e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	32b0      	adds	r2, #176	; 0xb0
 8014e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d101      	bne.n	8014e3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014e38:	2303      	movs	r3, #3
 8014e3a:	e01a      	b.n	8014e72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014e3c:	78fb      	ldrb	r3, [r7, #3]
 8014e3e:	4619      	mov	r1, r3
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f002 fa2e 	bl	80172a2 <USBD_LL_GetRxDataSize>
 8014e46:	4602      	mov	r2, r0
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	33b0      	adds	r3, #176	; 0xb0
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	4413      	add	r3, r2
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	68fa      	ldr	r2, [r7, #12]
 8014e62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014e66:	68fa      	ldr	r2, [r7, #12]
 8014e68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014e6c:	4611      	mov	r1, r2
 8014e6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014e70:	2300      	movs	r3, #0
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3710      	adds	r7, #16
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b084      	sub	sp, #16
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	32b0      	adds	r2, #176	; 0xb0
 8014e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d101      	bne.n	8014e9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014e98:	2303      	movs	r3, #3
 8014e9a:	e025      	b.n	8014ee8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	33b0      	adds	r3, #176	; 0xb0
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	4413      	add	r3, r2
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d01a      	beq.n	8014ee6 <USBD_CDC_EP0_RxReady+0x6c>
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014eb6:	2bff      	cmp	r3, #255	; 0xff
 8014eb8:	d015      	beq.n	8014ee6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	33b0      	adds	r3, #176	; 0xb0
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	4413      	add	r3, r2
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014ed2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014ed4:	68fa      	ldr	r2, [r7, #12]
 8014ed6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014eda:	b292      	uxth	r2, r2
 8014edc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	22ff      	movs	r2, #255	; 0xff
 8014ee2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014ee6:	2300      	movs	r3, #0
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3710      	adds	r7, #16
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}

08014ef0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b086      	sub	sp, #24
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ef8:	2182      	movs	r1, #130	; 0x82
 8014efa:	4818      	ldr	r0, [pc, #96]	; (8014f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014efc:	f000 fd4f 	bl	801599e <USBD_GetEpDesc>
 8014f00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f02:	2101      	movs	r1, #1
 8014f04:	4815      	ldr	r0, [pc, #84]	; (8014f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014f06:	f000 fd4a 	bl	801599e <USBD_GetEpDesc>
 8014f0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f0c:	2181      	movs	r1, #129	; 0x81
 8014f0e:	4813      	ldr	r0, [pc, #76]	; (8014f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014f10:	f000 fd45 	bl	801599e <USBD_GetEpDesc>
 8014f14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d002      	beq.n	8014f22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	2210      	movs	r2, #16
 8014f20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d006      	beq.n	8014f36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014f30:	711a      	strb	r2, [r3, #4]
 8014f32:	2200      	movs	r2, #0
 8014f34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d006      	beq.n	8014f4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014f44:	711a      	strb	r2, [r3, #4]
 8014f46:	2200      	movs	r2, #0
 8014f48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2243      	movs	r2, #67	; 0x43
 8014f4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014f50:	4b02      	ldr	r3, [pc, #8]	; (8014f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3718      	adds	r7, #24
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	24000054 	.word	0x24000054

08014f60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f68:	2182      	movs	r1, #130	; 0x82
 8014f6a:	4818      	ldr	r0, [pc, #96]	; (8014fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f6c:	f000 fd17 	bl	801599e <USBD_GetEpDesc>
 8014f70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f72:	2101      	movs	r1, #1
 8014f74:	4815      	ldr	r0, [pc, #84]	; (8014fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f76:	f000 fd12 	bl	801599e <USBD_GetEpDesc>
 8014f7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f7c:	2181      	movs	r1, #129	; 0x81
 8014f7e:	4813      	ldr	r0, [pc, #76]	; (8014fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f80:	f000 fd0d 	bl	801599e <USBD_GetEpDesc>
 8014f84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d002      	beq.n	8014f92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	2210      	movs	r2, #16
 8014f90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d006      	beq.n	8014fa6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	711a      	strb	r2, [r3, #4]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	f042 0202 	orr.w	r2, r2, #2
 8014fa4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d006      	beq.n	8014fba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	711a      	strb	r2, [r3, #4]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	f042 0202 	orr.w	r2, r2, #2
 8014fb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2243      	movs	r2, #67	; 0x43
 8014fbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014fc0:	4b02      	ldr	r3, [pc, #8]	; (8014fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	3718      	adds	r7, #24
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	24000054 	.word	0x24000054

08014fd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b086      	sub	sp, #24
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014fd8:	2182      	movs	r1, #130	; 0x82
 8014fda:	4818      	ldr	r0, [pc, #96]	; (801503c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fdc:	f000 fcdf 	bl	801599e <USBD_GetEpDesc>
 8014fe0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014fe2:	2101      	movs	r1, #1
 8014fe4:	4815      	ldr	r0, [pc, #84]	; (801503c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fe6:	f000 fcda 	bl	801599e <USBD_GetEpDesc>
 8014fea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014fec:	2181      	movs	r1, #129	; 0x81
 8014fee:	4813      	ldr	r0, [pc, #76]	; (801503c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014ff0:	f000 fcd5 	bl	801599e <USBD_GetEpDesc>
 8014ff4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d002      	beq.n	8015002 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	2210      	movs	r2, #16
 8015000:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d006      	beq.n	8015016 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	2200      	movs	r2, #0
 801500c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015010:	711a      	strb	r2, [r3, #4]
 8015012:	2200      	movs	r2, #0
 8015014:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d006      	beq.n	801502a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2200      	movs	r2, #0
 8015020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015024:	711a      	strb	r2, [r3, #4]
 8015026:	2200      	movs	r2, #0
 8015028:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2243      	movs	r2, #67	; 0x43
 801502e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015030:	4b02      	ldr	r3, [pc, #8]	; (801503c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015032:	4618      	mov	r0, r3
 8015034:	3718      	adds	r7, #24
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	24000054 	.word	0x24000054

08015040 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015040:	b480      	push	{r7}
 8015042:	b083      	sub	sp, #12
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	220a      	movs	r2, #10
 801504c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801504e:	4b03      	ldr	r3, [pc, #12]	; (801505c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015050:	4618      	mov	r0, r3
 8015052:	370c      	adds	r7, #12
 8015054:	46bd      	mov	sp, r7
 8015056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505a:	4770      	bx	lr
 801505c:	24000010 	.word	0x24000010

08015060 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015060:	b480      	push	{r7}
 8015062:	b083      	sub	sp, #12
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d101      	bne.n	8015074 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015070:	2303      	movs	r3, #3
 8015072:	e009      	b.n	8015088 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	33b0      	adds	r3, #176	; 0xb0
 801507e:	009b      	lsls	r3, r3, #2
 8015080:	4413      	add	r3, r2
 8015082:	683a      	ldr	r2, [r7, #0]
 8015084:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015086:	2300      	movs	r3, #0
}
 8015088:	4618      	mov	r0, r3
 801508a:	370c      	adds	r7, #12
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr

08015094 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015094:	b480      	push	{r7}
 8015096:	b087      	sub	sp, #28
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	32b0      	adds	r2, #176	; 0xb0
 80150aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d101      	bne.n	80150ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80150b6:	2303      	movs	r3, #3
 80150b8:	e008      	b.n	80150cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	68ba      	ldr	r2, [r7, #8]
 80150be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80150ca:	2300      	movs	r3, #0
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	371c      	adds	r7, #28
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr

080150d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80150d8:	b480      	push	{r7}
 80150da:	b085      	sub	sp, #20
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	32b0      	adds	r2, #176	; 0xb0
 80150ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d101      	bne.n	80150fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80150f8:	2303      	movs	r3, #3
 80150fa:	e004      	b.n	8015106 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	683a      	ldr	r2, [r7, #0]
 8015100:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015104:	2300      	movs	r3, #0
}
 8015106:	4618      	mov	r0, r3
 8015108:	3714      	adds	r7, #20
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
	...

08015114 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	32b0      	adds	r2, #176	; 0xb0
 8015126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801512a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801512c:	2301      	movs	r3, #1
 801512e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d101      	bne.n	801513a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015136:	2303      	movs	r3, #3
 8015138:	e025      	b.n	8015186 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015140:	2b00      	cmp	r3, #0
 8015142:	d11f      	bne.n	8015184 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	2201      	movs	r2, #1
 8015148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801514c:	4b10      	ldr	r3, [pc, #64]	; (8015190 <USBD_CDC_TransmitPacket+0x7c>)
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	f003 020f 	and.w	r2, r3, #15
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	4613      	mov	r3, r2
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	4413      	add	r3, r2
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	4403      	add	r3, r0
 8015166:	3318      	adds	r3, #24
 8015168:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801516a:	4b09      	ldr	r3, [pc, #36]	; (8015190 <USBD_CDC_TransmitPacket+0x7c>)
 801516c:	7819      	ldrb	r1, [r3, #0]
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f002 f84f 	bl	801721e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015180:	2300      	movs	r3, #0
 8015182:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015184:	7bfb      	ldrb	r3, [r7, #15]
}
 8015186:	4618      	mov	r0, r3
 8015188:	3710      	adds	r7, #16
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}
 801518e:	bf00      	nop
 8015190:	24000097 	.word	0x24000097

08015194 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	32b0      	adds	r2, #176	; 0xb0
 80151a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	32b0      	adds	r2, #176	; 0xb0
 80151b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d101      	bne.n	80151c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80151be:	2303      	movs	r3, #3
 80151c0:	e018      	b.n	80151f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	7c1b      	ldrb	r3, [r3, #16]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d10a      	bne.n	80151e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151ca:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <USBD_CDC_ReceivePacket+0x68>)
 80151cc:	7819      	ldrb	r1, [r3, #0]
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80151d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f002 f841 	bl	8017260 <USBD_LL_PrepareReceive>
 80151de:	e008      	b.n	80151f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151e0:	4b06      	ldr	r3, [pc, #24]	; (80151fc <USBD_CDC_ReceivePacket+0x68>)
 80151e2:	7819      	ldrb	r1, [r3, #0]
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80151ea:	2340      	movs	r3, #64	; 0x40
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f002 f837 	bl	8017260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80151f2:	2300      	movs	r3, #0
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3710      	adds	r7, #16
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	24000098 	.word	0x24000098

08015200 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b086      	sub	sp, #24
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	4613      	mov	r3, r2
 801520c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d101      	bne.n	8015218 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015214:	2303      	movs	r3, #3
 8015216:	e01f      	b.n	8015258 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2200      	movs	r2, #0
 801521c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	2200      	movs	r2, #0
 8015224:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2200      	movs	r2, #0
 801522c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d003      	beq.n	801523e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	68ba      	ldr	r2, [r7, #8]
 801523a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2201      	movs	r2, #1
 8015242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	79fa      	ldrb	r2, [r7, #7]
 801524a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801524c:	68f8      	ldr	r0, [r7, #12]
 801524e:	f001 feab 	bl	8016fa8 <USBD_LL_Init>
 8015252:	4603      	mov	r3, r0
 8015254:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015256:	7dfb      	ldrb	r3, [r7, #23]
}
 8015258:	4618      	mov	r0, r3
 801525a:	3718      	adds	r7, #24
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}

08015260 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801526a:	2300      	movs	r3, #0
 801526c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d101      	bne.n	8015278 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015274:	2303      	movs	r3, #3
 8015276:	e025      	b.n	80152c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	683a      	ldr	r2, [r7, #0]
 801527c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	32ae      	adds	r2, #174	; 0xae
 801528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015290:	2b00      	cmp	r3, #0
 8015292:	d00f      	beq.n	80152b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	32ae      	adds	r2, #174	; 0xae
 801529e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152a4:	f107 020e 	add.w	r2, r7, #14
 80152a8:	4610      	mov	r0, r2
 80152aa:	4798      	blx	r3
 80152ac:	4602      	mov	r2, r0
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80152ba:	1c5a      	adds	r2, r3, #1
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80152c2:	2300      	movs	r3, #0
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f001 feb9 	bl	801704c <USBD_LL_Start>
 80152da:	4603      	mov	r3, r0
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3708      	adds	r7, #8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80152ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	370c      	adds	r7, #12
 80152f2:	46bd      	mov	sp, r7
 80152f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f8:	4770      	bx	lr

080152fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b084      	sub	sp, #16
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
 8015302:	460b      	mov	r3, r1
 8015304:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015306:	2300      	movs	r3, #0
 8015308:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015310:	2b00      	cmp	r3, #0
 8015312:	d009      	beq.n	8015328 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	78fa      	ldrb	r2, [r7, #3]
 801531e:	4611      	mov	r1, r2
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	4798      	blx	r3
 8015324:	4603      	mov	r3, r0
 8015326:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015328:	7bfb      	ldrb	r3, [r7, #15]
}
 801532a:	4618      	mov	r0, r3
 801532c:	3710      	adds	r7, #16
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}

08015332 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015332:	b580      	push	{r7, lr}
 8015334:	b084      	sub	sp, #16
 8015336:	af00      	add	r7, sp, #0
 8015338:	6078      	str	r0, [r7, #4]
 801533a:	460b      	mov	r3, r1
 801533c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801533e:	2300      	movs	r3, #0
 8015340:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	78fa      	ldrb	r2, [r7, #3]
 801534c:	4611      	mov	r1, r2
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	4798      	blx	r3
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d001      	beq.n	801535c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015358:	2303      	movs	r3, #3
 801535a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801535c:	7bfb      	ldrb	r3, [r7, #15]
}
 801535e:	4618      	mov	r0, r3
 8015360:	3710      	adds	r7, #16
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}

08015366 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015366:	b580      	push	{r7, lr}
 8015368:	b084      	sub	sp, #16
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
 801536e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015376:	6839      	ldr	r1, [r7, #0]
 8015378:	4618      	mov	r0, r3
 801537a:	f001 f938 	bl	80165ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2201      	movs	r2, #1
 8015382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801538c:	461a      	mov	r2, r3
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801539a:	f003 031f 	and.w	r3, r3, #31
 801539e:	2b02      	cmp	r3, #2
 80153a0:	d01a      	beq.n	80153d8 <USBD_LL_SetupStage+0x72>
 80153a2:	2b02      	cmp	r3, #2
 80153a4:	d822      	bhi.n	80153ec <USBD_LL_SetupStage+0x86>
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d002      	beq.n	80153b0 <USBD_LL_SetupStage+0x4a>
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	d00a      	beq.n	80153c4 <USBD_LL_SetupStage+0x5e>
 80153ae:	e01d      	b.n	80153ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153b6:	4619      	mov	r1, r3
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f000 fb65 	bl	8015a88 <USBD_StdDevReq>
 80153be:	4603      	mov	r3, r0
 80153c0:	73fb      	strb	r3, [r7, #15]
      break;
 80153c2:	e020      	b.n	8015406 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153ca:	4619      	mov	r1, r3
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f000 fbcd 	bl	8015b6c <USBD_StdItfReq>
 80153d2:	4603      	mov	r3, r0
 80153d4:	73fb      	strb	r3, [r7, #15]
      break;
 80153d6:	e016      	b.n	8015406 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153de:	4619      	mov	r1, r3
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f000 fc2f 	bl	8015c44 <USBD_StdEPReq>
 80153e6:	4603      	mov	r3, r0
 80153e8:	73fb      	strb	r3, [r7, #15]
      break;
 80153ea:	e00c      	b.n	8015406 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80153f6:	b2db      	uxtb	r3, r3
 80153f8:	4619      	mov	r1, r3
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f001 fe86 	bl	801710c <USBD_LL_StallEP>
 8015400:	4603      	mov	r3, r0
 8015402:	73fb      	strb	r3, [r7, #15]
      break;
 8015404:	bf00      	nop
  }

  return ret;
 8015406:	7bfb      	ldrb	r3, [r7, #15]
}
 8015408:	4618      	mov	r0, r3
 801540a:	3710      	adds	r7, #16
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}

08015410 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b086      	sub	sp, #24
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	460b      	mov	r3, r1
 801541a:	607a      	str	r2, [r7, #4]
 801541c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801541e:	2300      	movs	r3, #0
 8015420:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015422:	7afb      	ldrb	r3, [r7, #11]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d16e      	bne.n	8015506 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801542e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015436:	2b03      	cmp	r3, #3
 8015438:	f040 8098 	bne.w	801556c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	689a      	ldr	r2, [r3, #8]
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	429a      	cmp	r2, r3
 8015446:	d913      	bls.n	8015470 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	689a      	ldr	r2, [r3, #8]
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	1ad2      	subs	r2, r2, r3
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	68da      	ldr	r2, [r3, #12]
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	689b      	ldr	r3, [r3, #8]
 801545e:	4293      	cmp	r3, r2
 8015460:	bf28      	it	cs
 8015462:	4613      	movcs	r3, r2
 8015464:	461a      	mov	r2, r3
 8015466:	6879      	ldr	r1, [r7, #4]
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f001 f9b4 	bl	80167d6 <USBD_CtlContinueRx>
 801546e:	e07d      	b.n	801556c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015476:	f003 031f 	and.w	r3, r3, #31
 801547a:	2b02      	cmp	r3, #2
 801547c:	d014      	beq.n	80154a8 <USBD_LL_DataOutStage+0x98>
 801547e:	2b02      	cmp	r3, #2
 8015480:	d81d      	bhi.n	80154be <USBD_LL_DataOutStage+0xae>
 8015482:	2b00      	cmp	r3, #0
 8015484:	d002      	beq.n	801548c <USBD_LL_DataOutStage+0x7c>
 8015486:	2b01      	cmp	r3, #1
 8015488:	d003      	beq.n	8015492 <USBD_LL_DataOutStage+0x82>
 801548a:	e018      	b.n	80154be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801548c:	2300      	movs	r3, #0
 801548e:	75bb      	strb	r3, [r7, #22]
            break;
 8015490:	e018      	b.n	80154c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015498:	b2db      	uxtb	r3, r3
 801549a:	4619      	mov	r1, r3
 801549c:	68f8      	ldr	r0, [r7, #12]
 801549e:	f000 fa64 	bl	801596a <USBD_CoreFindIF>
 80154a2:	4603      	mov	r3, r0
 80154a4:	75bb      	strb	r3, [r7, #22]
            break;
 80154a6:	e00d      	b.n	80154c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80154ae:	b2db      	uxtb	r3, r3
 80154b0:	4619      	mov	r1, r3
 80154b2:	68f8      	ldr	r0, [r7, #12]
 80154b4:	f000 fa66 	bl	8015984 <USBD_CoreFindEP>
 80154b8:	4603      	mov	r3, r0
 80154ba:	75bb      	strb	r3, [r7, #22]
            break;
 80154bc:	e002      	b.n	80154c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80154be:	2300      	movs	r3, #0
 80154c0:	75bb      	strb	r3, [r7, #22]
            break;
 80154c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80154c4:	7dbb      	ldrb	r3, [r7, #22]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d119      	bne.n	80154fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	2b03      	cmp	r3, #3
 80154d4:	d113      	bne.n	80154fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80154d6:	7dba      	ldrb	r2, [r7, #22]
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	32ae      	adds	r2, #174	; 0xae
 80154dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154e0:	691b      	ldr	r3, [r3, #16]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d00b      	beq.n	80154fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80154e6:	7dba      	ldrb	r2, [r7, #22]
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80154ee:	7dba      	ldrb	r2, [r7, #22]
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	32ae      	adds	r2, #174	; 0xae
 80154f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154f8:	691b      	ldr	r3, [r3, #16]
 80154fa:	68f8      	ldr	r0, [r7, #12]
 80154fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80154fe:	68f8      	ldr	r0, [r7, #12]
 8015500:	f001 f97a 	bl	80167f8 <USBD_CtlSendStatus>
 8015504:	e032      	b.n	801556c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015506:	7afb      	ldrb	r3, [r7, #11]
 8015508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801550c:	b2db      	uxtb	r3, r3
 801550e:	4619      	mov	r1, r3
 8015510:	68f8      	ldr	r0, [r7, #12]
 8015512:	f000 fa37 	bl	8015984 <USBD_CoreFindEP>
 8015516:	4603      	mov	r3, r0
 8015518:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801551a:	7dbb      	ldrb	r3, [r7, #22]
 801551c:	2bff      	cmp	r3, #255	; 0xff
 801551e:	d025      	beq.n	801556c <USBD_LL_DataOutStage+0x15c>
 8015520:	7dbb      	ldrb	r3, [r7, #22]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d122      	bne.n	801556c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801552c:	b2db      	uxtb	r3, r3
 801552e:	2b03      	cmp	r3, #3
 8015530:	d117      	bne.n	8015562 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015532:	7dba      	ldrb	r2, [r7, #22]
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	32ae      	adds	r2, #174	; 0xae
 8015538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801553c:	699b      	ldr	r3, [r3, #24]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d00f      	beq.n	8015562 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015542:	7dba      	ldrb	r2, [r7, #22]
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801554a:	7dba      	ldrb	r2, [r7, #22]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	32ae      	adds	r2, #174	; 0xae
 8015550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015554:	699b      	ldr	r3, [r3, #24]
 8015556:	7afa      	ldrb	r2, [r7, #11]
 8015558:	4611      	mov	r1, r2
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	4798      	blx	r3
 801555e:	4603      	mov	r3, r0
 8015560:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015562:	7dfb      	ldrb	r3, [r7, #23]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d001      	beq.n	801556c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015568:	7dfb      	ldrb	r3, [r7, #23]
 801556a:	e000      	b.n	801556e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801556c:	2300      	movs	r3, #0
}
 801556e:	4618      	mov	r0, r3
 8015570:	3718      	adds	r7, #24
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b086      	sub	sp, #24
 801557a:	af00      	add	r7, sp, #0
 801557c:	60f8      	str	r0, [r7, #12]
 801557e:	460b      	mov	r3, r1
 8015580:	607a      	str	r2, [r7, #4]
 8015582:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015584:	7afb      	ldrb	r3, [r7, #11]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d16f      	bne.n	801566a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	3314      	adds	r3, #20
 801558e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015596:	2b02      	cmp	r3, #2
 8015598:	d15a      	bne.n	8015650 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	689a      	ldr	r2, [r3, #8]
 801559e:	693b      	ldr	r3, [r7, #16]
 80155a0:	68db      	ldr	r3, [r3, #12]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d914      	bls.n	80155d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	689a      	ldr	r2, [r3, #8]
 80155aa:	693b      	ldr	r3, [r7, #16]
 80155ac:	68db      	ldr	r3, [r3, #12]
 80155ae:	1ad2      	subs	r2, r2, r3
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	689b      	ldr	r3, [r3, #8]
 80155b8:	461a      	mov	r2, r3
 80155ba:	6879      	ldr	r1, [r7, #4]
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	f001 f8dc 	bl	801677a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155c2:	2300      	movs	r3, #0
 80155c4:	2200      	movs	r2, #0
 80155c6:	2100      	movs	r1, #0
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f001 fe49 	bl	8017260 <USBD_LL_PrepareReceive>
 80155ce:	e03f      	b.n	8015650 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80155d0:	693b      	ldr	r3, [r7, #16]
 80155d2:	68da      	ldr	r2, [r3, #12]
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	689b      	ldr	r3, [r3, #8]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d11c      	bne.n	8015616 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	685a      	ldr	r2, [r3, #4]
 80155e0:	693b      	ldr	r3, [r7, #16]
 80155e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d316      	bcc.n	8015616 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	685a      	ldr	r2, [r3, #4]
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d20f      	bcs.n	8015616 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80155f6:	2200      	movs	r2, #0
 80155f8:	2100      	movs	r1, #0
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f001 f8bd 	bl	801677a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	2200      	movs	r2, #0
 8015604:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015608:	2300      	movs	r3, #0
 801560a:	2200      	movs	r2, #0
 801560c:	2100      	movs	r1, #0
 801560e:	68f8      	ldr	r0, [r7, #12]
 8015610:	f001 fe26 	bl	8017260 <USBD_LL_PrepareReceive>
 8015614:	e01c      	b.n	8015650 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801561c:	b2db      	uxtb	r3, r3
 801561e:	2b03      	cmp	r3, #3
 8015620:	d10f      	bne.n	8015642 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d009      	beq.n	8015642 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2200      	movs	r2, #0
 8015632:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015642:	2180      	movs	r1, #128	; 0x80
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f001 fd61 	bl	801710c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801564a:	68f8      	ldr	r0, [r7, #12]
 801564c:	f001 f8e7 	bl	801681e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015656:	2b00      	cmp	r3, #0
 8015658:	d03a      	beq.n	80156d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801565a:	68f8      	ldr	r0, [r7, #12]
 801565c:	f7ff fe42 	bl	80152e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2200      	movs	r2, #0
 8015664:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015668:	e032      	b.n	80156d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801566a:	7afb      	ldrb	r3, [r7, #11]
 801566c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015670:	b2db      	uxtb	r3, r3
 8015672:	4619      	mov	r1, r3
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f000 f985 	bl	8015984 <USBD_CoreFindEP>
 801567a:	4603      	mov	r3, r0
 801567c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801567e:	7dfb      	ldrb	r3, [r7, #23]
 8015680:	2bff      	cmp	r3, #255	; 0xff
 8015682:	d025      	beq.n	80156d0 <USBD_LL_DataInStage+0x15a>
 8015684:	7dfb      	ldrb	r3, [r7, #23]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d122      	bne.n	80156d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015690:	b2db      	uxtb	r3, r3
 8015692:	2b03      	cmp	r3, #3
 8015694:	d11c      	bne.n	80156d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015696:	7dfa      	ldrb	r2, [r7, #23]
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	32ae      	adds	r2, #174	; 0xae
 801569c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a0:	695b      	ldr	r3, [r3, #20]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d014      	beq.n	80156d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80156a6:	7dfa      	ldrb	r2, [r7, #23]
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80156ae:	7dfa      	ldrb	r2, [r7, #23]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	32ae      	adds	r2, #174	; 0xae
 80156b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b8:	695b      	ldr	r3, [r3, #20]
 80156ba:	7afa      	ldrb	r2, [r7, #11]
 80156bc:	4611      	mov	r1, r2
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	4798      	blx	r3
 80156c2:	4603      	mov	r3, r0
 80156c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80156c6:	7dbb      	ldrb	r3, [r7, #22]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d001      	beq.n	80156d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80156cc:	7dbb      	ldrb	r3, [r7, #22]
 80156ce:	e000      	b.n	80156d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80156d0:	2300      	movs	r3, #0
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3718      	adds	r7, #24
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}

080156da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80156da:	b580      	push	{r7, lr}
 80156dc:	b084      	sub	sp, #16
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80156e2:	2300      	movs	r3, #0
 80156e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2201      	movs	r2, #1
 80156ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2200      	movs	r2, #0
 80156f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2200      	movs	r2, #0
 80156fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2200      	movs	r2, #0
 8015700:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2200      	movs	r2, #0
 8015708:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015712:	2b00      	cmp	r3, #0
 8015714:	d014      	beq.n	8015740 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d00e      	beq.n	8015740 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	6852      	ldr	r2, [r2, #4]
 801572e:	b2d2      	uxtb	r2, r2
 8015730:	4611      	mov	r1, r2
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	4798      	blx	r3
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d001      	beq.n	8015740 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801573c:	2303      	movs	r3, #3
 801573e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015740:	2340      	movs	r3, #64	; 0x40
 8015742:	2200      	movs	r2, #0
 8015744:	2100      	movs	r1, #0
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	f001 fc9b 	bl	8017082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2201      	movs	r2, #1
 8015750:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2240      	movs	r2, #64	; 0x40
 8015758:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801575c:	2340      	movs	r3, #64	; 0x40
 801575e:	2200      	movs	r2, #0
 8015760:	2180      	movs	r1, #128	; 0x80
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	f001 fc8d 	bl	8017082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2201      	movs	r2, #1
 801576c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2240      	movs	r2, #64	; 0x40
 8015772:	621a      	str	r2, [r3, #32]

  return ret;
 8015774:	7bfb      	ldrb	r3, [r7, #15]
}
 8015776:	4618      	mov	r0, r3
 8015778:	3710      	adds	r7, #16
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}

0801577e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801577e:	b480      	push	{r7}
 8015780:	b083      	sub	sp, #12
 8015782:	af00      	add	r7, sp, #0
 8015784:	6078      	str	r0, [r7, #4]
 8015786:	460b      	mov	r3, r1
 8015788:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	78fa      	ldrb	r2, [r7, #3]
 801578e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015790:	2300      	movs	r3, #0
}
 8015792:	4618      	mov	r0, r3
 8015794:	370c      	adds	r7, #12
 8015796:	46bd      	mov	sp, r7
 8015798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579c:	4770      	bx	lr

0801579e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801579e:	b480      	push	{r7}
 80157a0:	b083      	sub	sp, #12
 80157a2:	af00      	add	r7, sp, #0
 80157a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157ac:	b2db      	uxtb	r3, r3
 80157ae:	2b04      	cmp	r3, #4
 80157b0:	d006      	beq.n	80157c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157b8:	b2da      	uxtb	r2, r3
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2204      	movs	r2, #4
 80157c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80157c8:	2300      	movs	r3, #0
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	370c      	adds	r7, #12
 80157ce:	46bd      	mov	sp, r7
 80157d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d4:	4770      	bx	lr

080157d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80157d6:	b480      	push	{r7}
 80157d8:	b083      	sub	sp, #12
 80157da:	af00      	add	r7, sp, #0
 80157dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157e4:	b2db      	uxtb	r3, r3
 80157e6:	2b04      	cmp	r3, #4
 80157e8:	d106      	bne.n	80157f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80157f0:	b2da      	uxtb	r2, r3
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80157f8:	2300      	movs	r3, #0
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	370c      	adds	r7, #12
 80157fe:	46bd      	mov	sp, r7
 8015800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015804:	4770      	bx	lr

08015806 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015806:	b580      	push	{r7, lr}
 8015808:	b082      	sub	sp, #8
 801580a:	af00      	add	r7, sp, #0
 801580c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015814:	b2db      	uxtb	r3, r3
 8015816:	2b03      	cmp	r3, #3
 8015818:	d110      	bne.n	801583c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015820:	2b00      	cmp	r3, #0
 8015822:	d00b      	beq.n	801583c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801582a:	69db      	ldr	r3, [r3, #28]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d005      	beq.n	801583c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015836:	69db      	ldr	r3, [r3, #28]
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801583c:	2300      	movs	r3, #0
}
 801583e:	4618      	mov	r0, r3
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015846:	b580      	push	{r7, lr}
 8015848:	b082      	sub	sp, #8
 801584a:	af00      	add	r7, sp, #0
 801584c:	6078      	str	r0, [r7, #4]
 801584e:	460b      	mov	r3, r1
 8015850:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	32ae      	adds	r2, #174	; 0xae
 801585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d101      	bne.n	8015868 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015864:	2303      	movs	r3, #3
 8015866:	e01c      	b.n	80158a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801586e:	b2db      	uxtb	r3, r3
 8015870:	2b03      	cmp	r3, #3
 8015872:	d115      	bne.n	80158a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	32ae      	adds	r2, #174	; 0xae
 801587e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015882:	6a1b      	ldr	r3, [r3, #32]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00b      	beq.n	80158a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	32ae      	adds	r2, #174	; 0xae
 8015892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015896:	6a1b      	ldr	r3, [r3, #32]
 8015898:	78fa      	ldrb	r2, [r7, #3]
 801589a:	4611      	mov	r1, r2
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80158a0:	2300      	movs	r3, #0
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3708      	adds	r7, #8
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}

080158aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80158aa:	b580      	push	{r7, lr}
 80158ac:	b082      	sub	sp, #8
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	6078      	str	r0, [r7, #4]
 80158b2:	460b      	mov	r3, r1
 80158b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	32ae      	adds	r2, #174	; 0xae
 80158c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d101      	bne.n	80158cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80158c8:	2303      	movs	r3, #3
 80158ca:	e01c      	b.n	8015906 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	2b03      	cmp	r3, #3
 80158d6:	d115      	bne.n	8015904 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	32ae      	adds	r2, #174	; 0xae
 80158e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00b      	beq.n	8015904 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	32ae      	adds	r2, #174	; 0xae
 80158f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158fc:	78fa      	ldrb	r2, [r7, #3]
 80158fe:	4611      	mov	r1, r2
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015904:	2300      	movs	r3, #0
}
 8015906:	4618      	mov	r0, r3
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801590e:	b480      	push	{r7}
 8015910:	b083      	sub	sp, #12
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015916:	2300      	movs	r3, #0
}
 8015918:	4618      	mov	r0, r3
 801591a:	370c      	adds	r7, #12
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr

08015924 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b084      	sub	sp, #16
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801592c:	2300      	movs	r3, #0
 801592e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2201      	movs	r2, #1
 8015934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801593e:	2b00      	cmp	r3, #0
 8015940:	d00e      	beq.n	8015960 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	687a      	ldr	r2, [r7, #4]
 801594c:	6852      	ldr	r2, [r2, #4]
 801594e:	b2d2      	uxtb	r2, r2
 8015950:	4611      	mov	r1, r2
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	4798      	blx	r3
 8015956:	4603      	mov	r3, r0
 8015958:	2b00      	cmp	r3, #0
 801595a:	d001      	beq.n	8015960 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801595c:	2303      	movs	r3, #3
 801595e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015960:	7bfb      	ldrb	r3, [r7, #15]
}
 8015962:	4618      	mov	r0, r3
 8015964:	3710      	adds	r7, #16
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801596a:	b480      	push	{r7}
 801596c:	b083      	sub	sp, #12
 801596e:	af00      	add	r7, sp, #0
 8015970:	6078      	str	r0, [r7, #4]
 8015972:	460b      	mov	r3, r1
 8015974:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015976:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015978:	4618      	mov	r0, r3
 801597a:	370c      	adds	r7, #12
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr

08015984 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015984:	b480      	push	{r7}
 8015986:	b083      	sub	sp, #12
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	460b      	mov	r3, r1
 801598e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015990:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015992:	4618      	mov	r0, r3
 8015994:	370c      	adds	r7, #12
 8015996:	46bd      	mov	sp, r7
 8015998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599c:	4770      	bx	lr

0801599e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801599e:	b580      	push	{r7, lr}
 80159a0:	b086      	sub	sp, #24
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
 80159a6:	460b      	mov	r3, r1
 80159a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80159b2:	2300      	movs	r3, #0
 80159b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	885b      	ldrh	r3, [r3, #2]
 80159ba:	b29a      	uxth	r2, r3
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d920      	bls.n	8015a08 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80159ce:	e013      	b.n	80159f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80159d0:	f107 030a 	add.w	r3, r7, #10
 80159d4:	4619      	mov	r1, r3
 80159d6:	6978      	ldr	r0, [r7, #20]
 80159d8:	f000 f81b 	bl	8015a12 <USBD_GetNextDesc>
 80159dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	785b      	ldrb	r3, [r3, #1]
 80159e2:	2b05      	cmp	r3, #5
 80159e4:	d108      	bne.n	80159f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	789b      	ldrb	r3, [r3, #2]
 80159ee:	78fa      	ldrb	r2, [r7, #3]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d008      	beq.n	8015a06 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80159f4:	2300      	movs	r3, #0
 80159f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	885b      	ldrh	r3, [r3, #2]
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	897b      	ldrh	r3, [r7, #10]
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d8e5      	bhi.n	80159d0 <USBD_GetEpDesc+0x32>
 8015a04:	e000      	b.n	8015a08 <USBD_GetEpDesc+0x6a>
          break;
 8015a06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015a08:	693b      	ldr	r3, [r7, #16]
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3718      	adds	r7, #24
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}

08015a12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015a12:	b480      	push	{r7}
 8015a14:	b085      	sub	sp, #20
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
 8015a1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	881a      	ldrh	r2, [r3, #0]
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	4413      	add	r3, r2
 8015a2c:	b29a      	uxth	r2, r3
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	461a      	mov	r2, r3
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3714      	adds	r7, #20
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr

08015a4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	b087      	sub	sp, #28
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015a5e:	697b      	ldr	r3, [r7, #20]
 8015a60:	3301      	adds	r3, #1
 8015a62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015a6a:	8a3b      	ldrh	r3, [r7, #16]
 8015a6c:	021b      	lsls	r3, r3, #8
 8015a6e:	b21a      	sxth	r2, r3
 8015a70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015a74:	4313      	orrs	r3, r2
 8015a76:	b21b      	sxth	r3, r3
 8015a78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015a7a:	89fb      	ldrh	r3, [r7, #14]
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	371c      	adds	r7, #28
 8015a80:	46bd      	mov	sp, r7
 8015a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a86:	4770      	bx	lr

08015a88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a92:	2300      	movs	r3, #0
 8015a94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	781b      	ldrb	r3, [r3, #0]
 8015a9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a9e:	2b40      	cmp	r3, #64	; 0x40
 8015aa0:	d005      	beq.n	8015aae <USBD_StdDevReq+0x26>
 8015aa2:	2b40      	cmp	r3, #64	; 0x40
 8015aa4:	d857      	bhi.n	8015b56 <USBD_StdDevReq+0xce>
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00f      	beq.n	8015aca <USBD_StdDevReq+0x42>
 8015aaa:	2b20      	cmp	r3, #32
 8015aac:	d153      	bne.n	8015b56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	32ae      	adds	r2, #174	; 0xae
 8015ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015abc:	689b      	ldr	r3, [r3, #8]
 8015abe:	6839      	ldr	r1, [r7, #0]
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	4798      	blx	r3
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8015ac8:	e04a      	b.n	8015b60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	785b      	ldrb	r3, [r3, #1]
 8015ace:	2b09      	cmp	r3, #9
 8015ad0:	d83b      	bhi.n	8015b4a <USBD_StdDevReq+0xc2>
 8015ad2:	a201      	add	r2, pc, #4	; (adr r2, 8015ad8 <USBD_StdDevReq+0x50>)
 8015ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ad8:	08015b2d 	.word	0x08015b2d
 8015adc:	08015b41 	.word	0x08015b41
 8015ae0:	08015b4b 	.word	0x08015b4b
 8015ae4:	08015b37 	.word	0x08015b37
 8015ae8:	08015b4b 	.word	0x08015b4b
 8015aec:	08015b0b 	.word	0x08015b0b
 8015af0:	08015b01 	.word	0x08015b01
 8015af4:	08015b4b 	.word	0x08015b4b
 8015af8:	08015b23 	.word	0x08015b23
 8015afc:	08015b15 	.word	0x08015b15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015b00:	6839      	ldr	r1, [r7, #0]
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 fa3c 	bl	8015f80 <USBD_GetDescriptor>
          break;
 8015b08:	e024      	b.n	8015b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015b0a:	6839      	ldr	r1, [r7, #0]
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f000 fbcb 	bl	80162a8 <USBD_SetAddress>
          break;
 8015b12:	e01f      	b.n	8015b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015b14:	6839      	ldr	r1, [r7, #0]
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f000 fc0a 	bl	8016330 <USBD_SetConfig>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	73fb      	strb	r3, [r7, #15]
          break;
 8015b20:	e018      	b.n	8015b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015b22:	6839      	ldr	r1, [r7, #0]
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f000 fcad 	bl	8016484 <USBD_GetConfig>
          break;
 8015b2a:	e013      	b.n	8015b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015b2c:	6839      	ldr	r1, [r7, #0]
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f000 fcde 	bl	80164f0 <USBD_GetStatus>
          break;
 8015b34:	e00e      	b.n	8015b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015b36:	6839      	ldr	r1, [r7, #0]
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f000 fd0d 	bl	8016558 <USBD_SetFeature>
          break;
 8015b3e:	e009      	b.n	8015b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015b40:	6839      	ldr	r1, [r7, #0]
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	f000 fd31 	bl	80165aa <USBD_ClrFeature>
          break;
 8015b48:	e004      	b.n	8015b54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015b4a:	6839      	ldr	r1, [r7, #0]
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f000 fd88 	bl	8016662 <USBD_CtlError>
          break;
 8015b52:	bf00      	nop
      }
      break;
 8015b54:	e004      	b.n	8015b60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015b56:	6839      	ldr	r1, [r7, #0]
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f000 fd82 	bl	8016662 <USBD_CtlError>
      break;
 8015b5e:	bf00      	nop
  }

  return ret;
 8015b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3710      	adds	r7, #16
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}
 8015b6a:	bf00      	nop

08015b6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b084      	sub	sp, #16
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b76:	2300      	movs	r3, #0
 8015b78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b82:	2b40      	cmp	r3, #64	; 0x40
 8015b84:	d005      	beq.n	8015b92 <USBD_StdItfReq+0x26>
 8015b86:	2b40      	cmp	r3, #64	; 0x40
 8015b88:	d852      	bhi.n	8015c30 <USBD_StdItfReq+0xc4>
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d001      	beq.n	8015b92 <USBD_StdItfReq+0x26>
 8015b8e:	2b20      	cmp	r3, #32
 8015b90:	d14e      	bne.n	8015c30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	3b01      	subs	r3, #1
 8015b9c:	2b02      	cmp	r3, #2
 8015b9e:	d840      	bhi.n	8015c22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	889b      	ldrh	r3, [r3, #4]
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	2b01      	cmp	r3, #1
 8015ba8:	d836      	bhi.n	8015c18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	889b      	ldrh	r3, [r3, #4]
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f7ff fed9 	bl	801596a <USBD_CoreFindIF>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015bbc:	7bbb      	ldrb	r3, [r7, #14]
 8015bbe:	2bff      	cmp	r3, #255	; 0xff
 8015bc0:	d01d      	beq.n	8015bfe <USBD_StdItfReq+0x92>
 8015bc2:	7bbb      	ldrb	r3, [r7, #14]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d11a      	bne.n	8015bfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015bc8:	7bba      	ldrb	r2, [r7, #14]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	32ae      	adds	r2, #174	; 0xae
 8015bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bd2:	689b      	ldr	r3, [r3, #8]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d00f      	beq.n	8015bf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015bd8:	7bba      	ldrb	r2, [r7, #14]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015be0:	7bba      	ldrb	r2, [r7, #14]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	32ae      	adds	r2, #174	; 0xae
 8015be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bea:	689b      	ldr	r3, [r3, #8]
 8015bec:	6839      	ldr	r1, [r7, #0]
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	4798      	blx	r3
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015bf6:	e004      	b.n	8015c02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015bf8:	2303      	movs	r3, #3
 8015bfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015bfc:	e001      	b.n	8015c02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015bfe:	2303      	movs	r3, #3
 8015c00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	88db      	ldrh	r3, [r3, #6]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d110      	bne.n	8015c2c <USBD_StdItfReq+0xc0>
 8015c0a:	7bfb      	ldrb	r3, [r7, #15]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d10d      	bne.n	8015c2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 fdf1 	bl	80167f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015c16:	e009      	b.n	8015c2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015c18:	6839      	ldr	r1, [r7, #0]
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f000 fd21 	bl	8016662 <USBD_CtlError>
          break;
 8015c20:	e004      	b.n	8015c2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015c22:	6839      	ldr	r1, [r7, #0]
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f000 fd1c 	bl	8016662 <USBD_CtlError>
          break;
 8015c2a:	e000      	b.n	8015c2e <USBD_StdItfReq+0xc2>
          break;
 8015c2c:	bf00      	nop
      }
      break;
 8015c2e:	e004      	b.n	8015c3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015c30:	6839      	ldr	r1, [r7, #0]
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f000 fd15 	bl	8016662 <USBD_CtlError>
      break;
 8015c38:	bf00      	nop
  }

  return ret;
 8015c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3710      	adds	r7, #16
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b084      	sub	sp, #16
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	889b      	ldrh	r3, [r3, #4]
 8015c56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c60:	2b40      	cmp	r3, #64	; 0x40
 8015c62:	d007      	beq.n	8015c74 <USBD_StdEPReq+0x30>
 8015c64:	2b40      	cmp	r3, #64	; 0x40
 8015c66:	f200 817f 	bhi.w	8015f68 <USBD_StdEPReq+0x324>
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d02a      	beq.n	8015cc4 <USBD_StdEPReq+0x80>
 8015c6e:	2b20      	cmp	r3, #32
 8015c70:	f040 817a 	bne.w	8015f68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015c74:	7bbb      	ldrb	r3, [r7, #14]
 8015c76:	4619      	mov	r1, r3
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f7ff fe83 	bl	8015984 <USBD_CoreFindEP>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c82:	7b7b      	ldrb	r3, [r7, #13]
 8015c84:	2bff      	cmp	r3, #255	; 0xff
 8015c86:	f000 8174 	beq.w	8015f72 <USBD_StdEPReq+0x32e>
 8015c8a:	7b7b      	ldrb	r3, [r7, #13]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	f040 8170 	bne.w	8015f72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015c92:	7b7a      	ldrb	r2, [r7, #13]
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015c9a:	7b7a      	ldrb	r2, [r7, #13]
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	32ae      	adds	r2, #174	; 0xae
 8015ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca4:	689b      	ldr	r3, [r3, #8]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	f000 8163 	beq.w	8015f72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015cac:	7b7a      	ldrb	r2, [r7, #13]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	32ae      	adds	r2, #174	; 0xae
 8015cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb6:	689b      	ldr	r3, [r3, #8]
 8015cb8:	6839      	ldr	r1, [r7, #0]
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	4798      	blx	r3
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015cc2:	e156      	b.n	8015f72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	785b      	ldrb	r3, [r3, #1]
 8015cc8:	2b03      	cmp	r3, #3
 8015cca:	d008      	beq.n	8015cde <USBD_StdEPReq+0x9a>
 8015ccc:	2b03      	cmp	r3, #3
 8015cce:	f300 8145 	bgt.w	8015f5c <USBD_StdEPReq+0x318>
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	f000 809b 	beq.w	8015e0e <USBD_StdEPReq+0x1ca>
 8015cd8:	2b01      	cmp	r3, #1
 8015cda:	d03c      	beq.n	8015d56 <USBD_StdEPReq+0x112>
 8015cdc:	e13e      	b.n	8015f5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2b02      	cmp	r3, #2
 8015ce8:	d002      	beq.n	8015cf0 <USBD_StdEPReq+0xac>
 8015cea:	2b03      	cmp	r3, #3
 8015cec:	d016      	beq.n	8015d1c <USBD_StdEPReq+0xd8>
 8015cee:	e02c      	b.n	8015d4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015cf0:	7bbb      	ldrb	r3, [r7, #14]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d00d      	beq.n	8015d12 <USBD_StdEPReq+0xce>
 8015cf6:	7bbb      	ldrb	r3, [r7, #14]
 8015cf8:	2b80      	cmp	r3, #128	; 0x80
 8015cfa:	d00a      	beq.n	8015d12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015cfc:	7bbb      	ldrb	r3, [r7, #14]
 8015cfe:	4619      	mov	r1, r3
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f001 fa03 	bl	801710c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d06:	2180      	movs	r1, #128	; 0x80
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	f001 f9ff 	bl	801710c <USBD_LL_StallEP>
 8015d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015d10:	e020      	b.n	8015d54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015d12:	6839      	ldr	r1, [r7, #0]
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f000 fca4 	bl	8016662 <USBD_CtlError>
              break;
 8015d1a:	e01b      	b.n	8015d54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	885b      	ldrh	r3, [r3, #2]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d10e      	bne.n	8015d42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015d24:	7bbb      	ldrb	r3, [r7, #14]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d00b      	beq.n	8015d42 <USBD_StdEPReq+0xfe>
 8015d2a:	7bbb      	ldrb	r3, [r7, #14]
 8015d2c:	2b80      	cmp	r3, #128	; 0x80
 8015d2e:	d008      	beq.n	8015d42 <USBD_StdEPReq+0xfe>
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	88db      	ldrh	r3, [r3, #6]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d104      	bne.n	8015d42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015d38:	7bbb      	ldrb	r3, [r7, #14]
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f001 f9e5 	bl	801710c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 fd58 	bl	80167f8 <USBD_CtlSendStatus>

              break;
 8015d48:	e004      	b.n	8015d54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015d4a:	6839      	ldr	r1, [r7, #0]
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f000 fc88 	bl	8016662 <USBD_CtlError>
              break;
 8015d52:	bf00      	nop
          }
          break;
 8015d54:	e107      	b.n	8015f66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d5c:	b2db      	uxtb	r3, r3
 8015d5e:	2b02      	cmp	r3, #2
 8015d60:	d002      	beq.n	8015d68 <USBD_StdEPReq+0x124>
 8015d62:	2b03      	cmp	r3, #3
 8015d64:	d016      	beq.n	8015d94 <USBD_StdEPReq+0x150>
 8015d66:	e04b      	b.n	8015e00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015d68:	7bbb      	ldrb	r3, [r7, #14]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d00d      	beq.n	8015d8a <USBD_StdEPReq+0x146>
 8015d6e:	7bbb      	ldrb	r3, [r7, #14]
 8015d70:	2b80      	cmp	r3, #128	; 0x80
 8015d72:	d00a      	beq.n	8015d8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015d74:	7bbb      	ldrb	r3, [r7, #14]
 8015d76:	4619      	mov	r1, r3
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f001 f9c7 	bl	801710c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d7e:	2180      	movs	r1, #128	; 0x80
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f001 f9c3 	bl	801710c <USBD_LL_StallEP>
 8015d86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015d88:	e040      	b.n	8015e0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015d8a:	6839      	ldr	r1, [r7, #0]
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f000 fc68 	bl	8016662 <USBD_CtlError>
              break;
 8015d92:	e03b      	b.n	8015e0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	885b      	ldrh	r3, [r3, #2]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d136      	bne.n	8015e0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015d9c:	7bbb      	ldrb	r3, [r7, #14]
 8015d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d004      	beq.n	8015db0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015da6:	7bbb      	ldrb	r3, [r7, #14]
 8015da8:	4619      	mov	r1, r3
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f001 f9cd 	bl	801714a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f000 fd21 	bl	80167f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015db6:	7bbb      	ldrb	r3, [r7, #14]
 8015db8:	4619      	mov	r1, r3
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f7ff fde2 	bl	8015984 <USBD_CoreFindEP>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015dc4:	7b7b      	ldrb	r3, [r7, #13]
 8015dc6:	2bff      	cmp	r3, #255	; 0xff
 8015dc8:	d01f      	beq.n	8015e0a <USBD_StdEPReq+0x1c6>
 8015dca:	7b7b      	ldrb	r3, [r7, #13]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d11c      	bne.n	8015e0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015dd0:	7b7a      	ldrb	r2, [r7, #13]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015dd8:	7b7a      	ldrb	r2, [r7, #13]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	32ae      	adds	r2, #174	; 0xae
 8015dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015de2:	689b      	ldr	r3, [r3, #8]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d010      	beq.n	8015e0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015de8:	7b7a      	ldrb	r2, [r7, #13]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	32ae      	adds	r2, #174	; 0xae
 8015dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015df2:	689b      	ldr	r3, [r3, #8]
 8015df4:	6839      	ldr	r1, [r7, #0]
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	4798      	blx	r3
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015dfe:	e004      	b.n	8015e0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 fc2d 	bl	8016662 <USBD_CtlError>
              break;
 8015e08:	e000      	b.n	8015e0c <USBD_StdEPReq+0x1c8>
              break;
 8015e0a:	bf00      	nop
          }
          break;
 8015e0c:	e0ab      	b.n	8015f66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d002      	beq.n	8015e20 <USBD_StdEPReq+0x1dc>
 8015e1a:	2b03      	cmp	r3, #3
 8015e1c:	d032      	beq.n	8015e84 <USBD_StdEPReq+0x240>
 8015e1e:	e097      	b.n	8015f50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e20:	7bbb      	ldrb	r3, [r7, #14]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d007      	beq.n	8015e36 <USBD_StdEPReq+0x1f2>
 8015e26:	7bbb      	ldrb	r3, [r7, #14]
 8015e28:	2b80      	cmp	r3, #128	; 0x80
 8015e2a:	d004      	beq.n	8015e36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015e2c:	6839      	ldr	r1, [r7, #0]
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f000 fc17 	bl	8016662 <USBD_CtlError>
                break;
 8015e34:	e091      	b.n	8015f5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	da0b      	bge.n	8015e56 <USBD_StdEPReq+0x212>
 8015e3e:	7bbb      	ldrb	r3, [r7, #14]
 8015e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e44:	4613      	mov	r3, r2
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	4413      	add	r3, r2
 8015e4a:	009b      	lsls	r3, r3, #2
 8015e4c:	3310      	adds	r3, #16
 8015e4e:	687a      	ldr	r2, [r7, #4]
 8015e50:	4413      	add	r3, r2
 8015e52:	3304      	adds	r3, #4
 8015e54:	e00b      	b.n	8015e6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015e56:	7bbb      	ldrb	r3, [r7, #14]
 8015e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e5c:	4613      	mov	r3, r2
 8015e5e:	009b      	lsls	r3, r3, #2
 8015e60:	4413      	add	r3, r2
 8015e62:	009b      	lsls	r3, r3, #2
 8015e64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015e68:	687a      	ldr	r2, [r7, #4]
 8015e6a:	4413      	add	r3, r2
 8015e6c:	3304      	adds	r3, #4
 8015e6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	2200      	movs	r2, #0
 8015e74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015e76:	68bb      	ldr	r3, [r7, #8]
 8015e78:	2202      	movs	r2, #2
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 fc61 	bl	8016744 <USBD_CtlSendData>
              break;
 8015e82:	e06a      	b.n	8015f5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	da11      	bge.n	8015eb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015e8c:	7bbb      	ldrb	r3, [r7, #14]
 8015e8e:	f003 020f 	and.w	r2, r3, #15
 8015e92:	6879      	ldr	r1, [r7, #4]
 8015e94:	4613      	mov	r3, r2
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	4413      	add	r3, r2
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	440b      	add	r3, r1
 8015e9e:	3324      	adds	r3, #36	; 0x24
 8015ea0:	881b      	ldrh	r3, [r3, #0]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d117      	bne.n	8015ed6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015ea6:	6839      	ldr	r1, [r7, #0]
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f000 fbda 	bl	8016662 <USBD_CtlError>
                  break;
 8015eae:	e054      	b.n	8015f5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015eb0:	7bbb      	ldrb	r3, [r7, #14]
 8015eb2:	f003 020f 	and.w	r2, r3, #15
 8015eb6:	6879      	ldr	r1, [r7, #4]
 8015eb8:	4613      	mov	r3, r2
 8015eba:	009b      	lsls	r3, r3, #2
 8015ebc:	4413      	add	r3, r2
 8015ebe:	009b      	lsls	r3, r3, #2
 8015ec0:	440b      	add	r3, r1
 8015ec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015ec6:	881b      	ldrh	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d104      	bne.n	8015ed6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fbc7 	bl	8016662 <USBD_CtlError>
                  break;
 8015ed4:	e041      	b.n	8015f5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	da0b      	bge.n	8015ef6 <USBD_StdEPReq+0x2b2>
 8015ede:	7bbb      	ldrb	r3, [r7, #14]
 8015ee0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ee4:	4613      	mov	r3, r2
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	4413      	add	r3, r2
 8015eea:	009b      	lsls	r3, r3, #2
 8015eec:	3310      	adds	r3, #16
 8015eee:	687a      	ldr	r2, [r7, #4]
 8015ef0:	4413      	add	r3, r2
 8015ef2:	3304      	adds	r3, #4
 8015ef4:	e00b      	b.n	8015f0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ef6:	7bbb      	ldrb	r3, [r7, #14]
 8015ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015efc:	4613      	mov	r3, r2
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	4413      	add	r3, r2
 8015f02:	009b      	lsls	r3, r3, #2
 8015f04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	3304      	adds	r3, #4
 8015f0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015f10:	7bbb      	ldrb	r3, [r7, #14]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d002      	beq.n	8015f1c <USBD_StdEPReq+0x2d8>
 8015f16:	7bbb      	ldrb	r3, [r7, #14]
 8015f18:	2b80      	cmp	r3, #128	; 0x80
 8015f1a:	d103      	bne.n	8015f24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	601a      	str	r2, [r3, #0]
 8015f22:	e00e      	b.n	8015f42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015f24:	7bbb      	ldrb	r3, [r7, #14]
 8015f26:	4619      	mov	r1, r3
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f001 f92d 	bl	8017188 <USBD_LL_IsStallEP>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d003      	beq.n	8015f3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	2201      	movs	r2, #1
 8015f38:	601a      	str	r2, [r3, #0]
 8015f3a:	e002      	b.n	8015f42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	2202      	movs	r2, #2
 8015f46:	4619      	mov	r1, r3
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f000 fbfb 	bl	8016744 <USBD_CtlSendData>
              break;
 8015f4e:	e004      	b.n	8015f5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015f50:	6839      	ldr	r1, [r7, #0]
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 fb85 	bl	8016662 <USBD_CtlError>
              break;
 8015f58:	bf00      	nop
          }
          break;
 8015f5a:	e004      	b.n	8015f66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015f5c:	6839      	ldr	r1, [r7, #0]
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	f000 fb7f 	bl	8016662 <USBD_CtlError>
          break;
 8015f64:	bf00      	nop
      }
      break;
 8015f66:	e005      	b.n	8015f74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015f68:	6839      	ldr	r1, [r7, #0]
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 fb79 	bl	8016662 <USBD_CtlError>
      break;
 8015f70:	e000      	b.n	8015f74 <USBD_StdEPReq+0x330>
      break;
 8015f72:	bf00      	nop
  }

  return ret;
 8015f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3710      	adds	r7, #16
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
	...

08015f80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b084      	sub	sp, #16
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015f92:	2300      	movs	r3, #0
 8015f94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	885b      	ldrh	r3, [r3, #2]
 8015f9a:	0a1b      	lsrs	r3, r3, #8
 8015f9c:	b29b      	uxth	r3, r3
 8015f9e:	3b01      	subs	r3, #1
 8015fa0:	2b0e      	cmp	r3, #14
 8015fa2:	f200 8152 	bhi.w	801624a <USBD_GetDescriptor+0x2ca>
 8015fa6:	a201      	add	r2, pc, #4	; (adr r2, 8015fac <USBD_GetDescriptor+0x2c>)
 8015fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fac:	0801601d 	.word	0x0801601d
 8015fb0:	08016035 	.word	0x08016035
 8015fb4:	08016075 	.word	0x08016075
 8015fb8:	0801624b 	.word	0x0801624b
 8015fbc:	0801624b 	.word	0x0801624b
 8015fc0:	080161eb 	.word	0x080161eb
 8015fc4:	08016217 	.word	0x08016217
 8015fc8:	0801624b 	.word	0x0801624b
 8015fcc:	0801624b 	.word	0x0801624b
 8015fd0:	0801624b 	.word	0x0801624b
 8015fd4:	0801624b 	.word	0x0801624b
 8015fd8:	0801624b 	.word	0x0801624b
 8015fdc:	0801624b 	.word	0x0801624b
 8015fe0:	0801624b 	.word	0x0801624b
 8015fe4:	08015fe9 	.word	0x08015fe9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fee:	69db      	ldr	r3, [r3, #28]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d00b      	beq.n	801600c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ffa:	69db      	ldr	r3, [r3, #28]
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	7c12      	ldrb	r2, [r2, #16]
 8016000:	f107 0108 	add.w	r1, r7, #8
 8016004:	4610      	mov	r0, r2
 8016006:	4798      	blx	r3
 8016008:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801600a:	e126      	b.n	801625a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801600c:	6839      	ldr	r1, [r7, #0]
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f000 fb27 	bl	8016662 <USBD_CtlError>
        err++;
 8016014:	7afb      	ldrb	r3, [r7, #11]
 8016016:	3301      	adds	r3, #1
 8016018:	72fb      	strb	r3, [r7, #11]
      break;
 801601a:	e11e      	b.n	801625a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	687a      	ldr	r2, [r7, #4]
 8016026:	7c12      	ldrb	r2, [r2, #16]
 8016028:	f107 0108 	add.w	r1, r7, #8
 801602c:	4610      	mov	r0, r2
 801602e:	4798      	blx	r3
 8016030:	60f8      	str	r0, [r7, #12]
      break;
 8016032:	e112      	b.n	801625a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	7c1b      	ldrb	r3, [r3, #16]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d10d      	bne.n	8016058 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016044:	f107 0208 	add.w	r2, r7, #8
 8016048:	4610      	mov	r0, r2
 801604a:	4798      	blx	r3
 801604c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	3301      	adds	r3, #1
 8016052:	2202      	movs	r2, #2
 8016054:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016056:	e100      	b.n	801625a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016060:	f107 0208 	add.w	r2, r7, #8
 8016064:	4610      	mov	r0, r2
 8016066:	4798      	blx	r3
 8016068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	3301      	adds	r3, #1
 801606e:	2202      	movs	r2, #2
 8016070:	701a      	strb	r2, [r3, #0]
      break;
 8016072:	e0f2      	b.n	801625a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	885b      	ldrh	r3, [r3, #2]
 8016078:	b2db      	uxtb	r3, r3
 801607a:	2b05      	cmp	r3, #5
 801607c:	f200 80ac 	bhi.w	80161d8 <USBD_GetDescriptor+0x258>
 8016080:	a201      	add	r2, pc, #4	; (adr r2, 8016088 <USBD_GetDescriptor+0x108>)
 8016082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016086:	bf00      	nop
 8016088:	080160a1 	.word	0x080160a1
 801608c:	080160d5 	.word	0x080160d5
 8016090:	08016109 	.word	0x08016109
 8016094:	0801613d 	.word	0x0801613d
 8016098:	08016171 	.word	0x08016171
 801609c:	080161a5 	.word	0x080161a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160a6:	685b      	ldr	r3, [r3, #4]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d00b      	beq.n	80160c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160b2:	685b      	ldr	r3, [r3, #4]
 80160b4:	687a      	ldr	r2, [r7, #4]
 80160b6:	7c12      	ldrb	r2, [r2, #16]
 80160b8:	f107 0108 	add.w	r1, r7, #8
 80160bc:	4610      	mov	r0, r2
 80160be:	4798      	blx	r3
 80160c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160c2:	e091      	b.n	80161e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80160c4:	6839      	ldr	r1, [r7, #0]
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 facb 	bl	8016662 <USBD_CtlError>
            err++;
 80160cc:	7afb      	ldrb	r3, [r7, #11]
 80160ce:	3301      	adds	r3, #1
 80160d0:	72fb      	strb	r3, [r7, #11]
          break;
 80160d2:	e089      	b.n	80161e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160da:	689b      	ldr	r3, [r3, #8]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d00b      	beq.n	80160f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160e6:	689b      	ldr	r3, [r3, #8]
 80160e8:	687a      	ldr	r2, [r7, #4]
 80160ea:	7c12      	ldrb	r2, [r2, #16]
 80160ec:	f107 0108 	add.w	r1, r7, #8
 80160f0:	4610      	mov	r0, r2
 80160f2:	4798      	blx	r3
 80160f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160f6:	e077      	b.n	80161e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80160f8:	6839      	ldr	r1, [r7, #0]
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f000 fab1 	bl	8016662 <USBD_CtlError>
            err++;
 8016100:	7afb      	ldrb	r3, [r7, #11]
 8016102:	3301      	adds	r3, #1
 8016104:	72fb      	strb	r3, [r7, #11]
          break;
 8016106:	e06f      	b.n	80161e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d00b      	beq.n	801612c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	687a      	ldr	r2, [r7, #4]
 801611e:	7c12      	ldrb	r2, [r2, #16]
 8016120:	f107 0108 	add.w	r1, r7, #8
 8016124:	4610      	mov	r0, r2
 8016126:	4798      	blx	r3
 8016128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801612a:	e05d      	b.n	80161e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801612c:	6839      	ldr	r1, [r7, #0]
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 fa97 	bl	8016662 <USBD_CtlError>
            err++;
 8016134:	7afb      	ldrb	r3, [r7, #11]
 8016136:	3301      	adds	r3, #1
 8016138:	72fb      	strb	r3, [r7, #11]
          break;
 801613a:	e055      	b.n	80161e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016142:	691b      	ldr	r3, [r3, #16]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d00b      	beq.n	8016160 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801614e:	691b      	ldr	r3, [r3, #16]
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	7c12      	ldrb	r2, [r2, #16]
 8016154:	f107 0108 	add.w	r1, r7, #8
 8016158:	4610      	mov	r0, r2
 801615a:	4798      	blx	r3
 801615c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801615e:	e043      	b.n	80161e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016160:	6839      	ldr	r1, [r7, #0]
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f000 fa7d 	bl	8016662 <USBD_CtlError>
            err++;
 8016168:	7afb      	ldrb	r3, [r7, #11]
 801616a:	3301      	adds	r3, #1
 801616c:	72fb      	strb	r3, [r7, #11]
          break;
 801616e:	e03b      	b.n	80161e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016176:	695b      	ldr	r3, [r3, #20]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d00b      	beq.n	8016194 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016182:	695b      	ldr	r3, [r3, #20]
 8016184:	687a      	ldr	r2, [r7, #4]
 8016186:	7c12      	ldrb	r2, [r2, #16]
 8016188:	f107 0108 	add.w	r1, r7, #8
 801618c:	4610      	mov	r0, r2
 801618e:	4798      	blx	r3
 8016190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016192:	e029      	b.n	80161e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016194:	6839      	ldr	r1, [r7, #0]
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f000 fa63 	bl	8016662 <USBD_CtlError>
            err++;
 801619c:	7afb      	ldrb	r3, [r7, #11]
 801619e:	3301      	adds	r3, #1
 80161a0:	72fb      	strb	r3, [r7, #11]
          break;
 80161a2:	e021      	b.n	80161e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161aa:	699b      	ldr	r3, [r3, #24]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d00b      	beq.n	80161c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161b6:	699b      	ldr	r3, [r3, #24]
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	7c12      	ldrb	r2, [r2, #16]
 80161bc:	f107 0108 	add.w	r1, r7, #8
 80161c0:	4610      	mov	r0, r2
 80161c2:	4798      	blx	r3
 80161c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161c6:	e00f      	b.n	80161e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80161c8:	6839      	ldr	r1, [r7, #0]
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f000 fa49 	bl	8016662 <USBD_CtlError>
            err++;
 80161d0:	7afb      	ldrb	r3, [r7, #11]
 80161d2:	3301      	adds	r3, #1
 80161d4:	72fb      	strb	r3, [r7, #11]
          break;
 80161d6:	e007      	b.n	80161e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80161d8:	6839      	ldr	r1, [r7, #0]
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f000 fa41 	bl	8016662 <USBD_CtlError>
          err++;
 80161e0:	7afb      	ldrb	r3, [r7, #11]
 80161e2:	3301      	adds	r3, #1
 80161e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80161e6:	bf00      	nop
      }
      break;
 80161e8:	e037      	b.n	801625a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	7c1b      	ldrb	r3, [r3, #16]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d109      	bne.n	8016206 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161fa:	f107 0208 	add.w	r2, r7, #8
 80161fe:	4610      	mov	r0, r2
 8016200:	4798      	blx	r3
 8016202:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016204:	e029      	b.n	801625a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016206:	6839      	ldr	r1, [r7, #0]
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 fa2a 	bl	8016662 <USBD_CtlError>
        err++;
 801620e:	7afb      	ldrb	r3, [r7, #11]
 8016210:	3301      	adds	r3, #1
 8016212:	72fb      	strb	r3, [r7, #11]
      break;
 8016214:	e021      	b.n	801625a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	7c1b      	ldrb	r3, [r3, #16]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d10d      	bne.n	801623a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016226:	f107 0208 	add.w	r2, r7, #8
 801622a:	4610      	mov	r0, r2
 801622c:	4798      	blx	r3
 801622e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	3301      	adds	r3, #1
 8016234:	2207      	movs	r2, #7
 8016236:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016238:	e00f      	b.n	801625a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801623a:	6839      	ldr	r1, [r7, #0]
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f000 fa10 	bl	8016662 <USBD_CtlError>
        err++;
 8016242:	7afb      	ldrb	r3, [r7, #11]
 8016244:	3301      	adds	r3, #1
 8016246:	72fb      	strb	r3, [r7, #11]
      break;
 8016248:	e007      	b.n	801625a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801624a:	6839      	ldr	r1, [r7, #0]
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f000 fa08 	bl	8016662 <USBD_CtlError>
      err++;
 8016252:	7afb      	ldrb	r3, [r7, #11]
 8016254:	3301      	adds	r3, #1
 8016256:	72fb      	strb	r3, [r7, #11]
      break;
 8016258:	bf00      	nop
  }

  if (err != 0U)
 801625a:	7afb      	ldrb	r3, [r7, #11]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d11e      	bne.n	801629e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	88db      	ldrh	r3, [r3, #6]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d016      	beq.n	8016296 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8016268:	893b      	ldrh	r3, [r7, #8]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d00e      	beq.n	801628c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	88da      	ldrh	r2, [r3, #6]
 8016272:	893b      	ldrh	r3, [r7, #8]
 8016274:	4293      	cmp	r3, r2
 8016276:	bf28      	it	cs
 8016278:	4613      	movcs	r3, r2
 801627a:	b29b      	uxth	r3, r3
 801627c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801627e:	893b      	ldrh	r3, [r7, #8]
 8016280:	461a      	mov	r2, r3
 8016282:	68f9      	ldr	r1, [r7, #12]
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f000 fa5d 	bl	8016744 <USBD_CtlSendData>
 801628a:	e009      	b.n	80162a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801628c:	6839      	ldr	r1, [r7, #0]
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f000 f9e7 	bl	8016662 <USBD_CtlError>
 8016294:	e004      	b.n	80162a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 faae 	bl	80167f8 <USBD_CtlSendStatus>
 801629c:	e000      	b.n	80162a0 <USBD_GetDescriptor+0x320>
    return;
 801629e:	bf00      	nop
  }
}
 80162a0:	3710      	adds	r7, #16
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}
 80162a6:	bf00      	nop

080162a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	889b      	ldrh	r3, [r3, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d131      	bne.n	801631e <USBD_SetAddress+0x76>
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	88db      	ldrh	r3, [r3, #6]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d12d      	bne.n	801631e <USBD_SetAddress+0x76>
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	885b      	ldrh	r3, [r3, #2]
 80162c6:	2b7f      	cmp	r3, #127	; 0x7f
 80162c8:	d829      	bhi.n	801631e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	885b      	ldrh	r3, [r3, #2]
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	2b03      	cmp	r3, #3
 80162e0:	d104      	bne.n	80162ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80162e2:	6839      	ldr	r1, [r7, #0]
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f000 f9bc 	bl	8016662 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162ea:	e01d      	b.n	8016328 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	7bfa      	ldrb	r2, [r7, #15]
 80162f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
 80162f6:	4619      	mov	r1, r3
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f000 ff71 	bl	80171e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 fa7a 	bl	80167f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016304:	7bfb      	ldrb	r3, [r7, #15]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d004      	beq.n	8016314 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2202      	movs	r2, #2
 801630e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016312:	e009      	b.n	8016328 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2201      	movs	r2, #1
 8016318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801631c:	e004      	b.n	8016328 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801631e:	6839      	ldr	r1, [r7, #0]
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f000 f99e 	bl	8016662 <USBD_CtlError>
  }
}
 8016326:	bf00      	nop
 8016328:	bf00      	nop
 801632a:	3710      	adds	r7, #16
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b084      	sub	sp, #16
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801633a:	2300      	movs	r3, #0
 801633c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	885b      	ldrh	r3, [r3, #2]
 8016342:	b2da      	uxtb	r2, r3
 8016344:	4b4e      	ldr	r3, [pc, #312]	; (8016480 <USBD_SetConfig+0x150>)
 8016346:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016348:	4b4d      	ldr	r3, [pc, #308]	; (8016480 <USBD_SetConfig+0x150>)
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d905      	bls.n	801635c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016350:	6839      	ldr	r1, [r7, #0]
 8016352:	6878      	ldr	r0, [r7, #4]
 8016354:	f000 f985 	bl	8016662 <USBD_CtlError>
    return USBD_FAIL;
 8016358:	2303      	movs	r3, #3
 801635a:	e08c      	b.n	8016476 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016362:	b2db      	uxtb	r3, r3
 8016364:	2b02      	cmp	r3, #2
 8016366:	d002      	beq.n	801636e <USBD_SetConfig+0x3e>
 8016368:	2b03      	cmp	r3, #3
 801636a:	d029      	beq.n	80163c0 <USBD_SetConfig+0x90>
 801636c:	e075      	b.n	801645a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801636e:	4b44      	ldr	r3, [pc, #272]	; (8016480 <USBD_SetConfig+0x150>)
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d020      	beq.n	80163b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016376:	4b42      	ldr	r3, [pc, #264]	; (8016480 <USBD_SetConfig+0x150>)
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	461a      	mov	r2, r3
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016380:	4b3f      	ldr	r3, [pc, #252]	; (8016480 <USBD_SetConfig+0x150>)
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	4619      	mov	r1, r3
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f7fe ffb7 	bl	80152fa <USBD_SetClassConfig>
 801638c:	4603      	mov	r3, r0
 801638e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016390:	7bfb      	ldrb	r3, [r7, #15]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d008      	beq.n	80163a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016396:	6839      	ldr	r1, [r7, #0]
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 f962 	bl	8016662 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2202      	movs	r2, #2
 80163a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80163a6:	e065      	b.n	8016474 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 fa25 	bl	80167f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2203      	movs	r2, #3
 80163b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80163b6:	e05d      	b.n	8016474 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f000 fa1d 	bl	80167f8 <USBD_CtlSendStatus>
      break;
 80163be:	e059      	b.n	8016474 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80163c0:	4b2f      	ldr	r3, [pc, #188]	; (8016480 <USBD_SetConfig+0x150>)
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d112      	bne.n	80163ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2202      	movs	r2, #2
 80163cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80163d0:	4b2b      	ldr	r3, [pc, #172]	; (8016480 <USBD_SetConfig+0x150>)
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	461a      	mov	r2, r3
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80163da:	4b29      	ldr	r3, [pc, #164]	; (8016480 <USBD_SetConfig+0x150>)
 80163dc:	781b      	ldrb	r3, [r3, #0]
 80163de:	4619      	mov	r1, r3
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f7fe ffa6 	bl	8015332 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f000 fa06 	bl	80167f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80163ec:	e042      	b.n	8016474 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80163ee:	4b24      	ldr	r3, [pc, #144]	; (8016480 <USBD_SetConfig+0x150>)
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	461a      	mov	r2, r3
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	685b      	ldr	r3, [r3, #4]
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d02a      	beq.n	8016452 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	685b      	ldr	r3, [r3, #4]
 8016400:	b2db      	uxtb	r3, r3
 8016402:	4619      	mov	r1, r3
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7fe ff94 	bl	8015332 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801640a:	4b1d      	ldr	r3, [pc, #116]	; (8016480 <USBD_SetConfig+0x150>)
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	461a      	mov	r2, r3
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016414:	4b1a      	ldr	r3, [pc, #104]	; (8016480 <USBD_SetConfig+0x150>)
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	4619      	mov	r1, r3
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7fe ff6d 	bl	80152fa <USBD_SetClassConfig>
 8016420:	4603      	mov	r3, r0
 8016422:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016424:	7bfb      	ldrb	r3, [r7, #15]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d00f      	beq.n	801644a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f000 f918 	bl	8016662 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	685b      	ldr	r3, [r3, #4]
 8016436:	b2db      	uxtb	r3, r3
 8016438:	4619      	mov	r1, r3
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f7fe ff79 	bl	8015332 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2202      	movs	r2, #2
 8016444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016448:	e014      	b.n	8016474 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f000 f9d4 	bl	80167f8 <USBD_CtlSendStatus>
      break;
 8016450:	e010      	b.n	8016474 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 f9d0 	bl	80167f8 <USBD_CtlSendStatus>
      break;
 8016458:	e00c      	b.n	8016474 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801645a:	6839      	ldr	r1, [r7, #0]
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f000 f900 	bl	8016662 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016462:	4b07      	ldr	r3, [pc, #28]	; (8016480 <USBD_SetConfig+0x150>)
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	4619      	mov	r1, r3
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f7fe ff62 	bl	8015332 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801646e:	2303      	movs	r3, #3
 8016470:	73fb      	strb	r3, [r7, #15]
      break;
 8016472:	bf00      	nop
  }

  return ret;
 8016474:	7bfb      	ldrb	r3, [r7, #15]
}
 8016476:	4618      	mov	r0, r3
 8016478:	3710      	adds	r7, #16
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	240015fc 	.word	0x240015fc

08016484 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	88db      	ldrh	r3, [r3, #6]
 8016492:	2b01      	cmp	r3, #1
 8016494:	d004      	beq.n	80164a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016496:	6839      	ldr	r1, [r7, #0]
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	f000 f8e2 	bl	8016662 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801649e:	e023      	b.n	80164e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	2b02      	cmp	r3, #2
 80164aa:	dc02      	bgt.n	80164b2 <USBD_GetConfig+0x2e>
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	dc03      	bgt.n	80164b8 <USBD_GetConfig+0x34>
 80164b0:	e015      	b.n	80164de <USBD_GetConfig+0x5a>
 80164b2:	2b03      	cmp	r3, #3
 80164b4:	d00b      	beq.n	80164ce <USBD_GetConfig+0x4a>
 80164b6:	e012      	b.n	80164de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2200      	movs	r2, #0
 80164bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	3308      	adds	r3, #8
 80164c2:	2201      	movs	r2, #1
 80164c4:	4619      	mov	r1, r3
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 f93c 	bl	8016744 <USBD_CtlSendData>
        break;
 80164cc:	e00c      	b.n	80164e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	3304      	adds	r3, #4
 80164d2:	2201      	movs	r2, #1
 80164d4:	4619      	mov	r1, r3
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f000 f934 	bl	8016744 <USBD_CtlSendData>
        break;
 80164dc:	e004      	b.n	80164e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80164de:	6839      	ldr	r1, [r7, #0]
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f000 f8be 	bl	8016662 <USBD_CtlError>
        break;
 80164e6:	bf00      	nop
}
 80164e8:	bf00      	nop
 80164ea:	3708      	adds	r7, #8
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016500:	b2db      	uxtb	r3, r3
 8016502:	3b01      	subs	r3, #1
 8016504:	2b02      	cmp	r3, #2
 8016506:	d81e      	bhi.n	8016546 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	88db      	ldrh	r3, [r3, #6]
 801650c:	2b02      	cmp	r3, #2
 801650e:	d004      	beq.n	801651a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016510:	6839      	ldr	r1, [r7, #0]
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f000 f8a5 	bl	8016662 <USBD_CtlError>
        break;
 8016518:	e01a      	b.n	8016550 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2201      	movs	r2, #1
 801651e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016526:	2b00      	cmp	r3, #0
 8016528:	d005      	beq.n	8016536 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	68db      	ldr	r3, [r3, #12]
 801652e:	f043 0202 	orr.w	r2, r3, #2
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	330c      	adds	r3, #12
 801653a:	2202      	movs	r2, #2
 801653c:	4619      	mov	r1, r3
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f000 f900 	bl	8016744 <USBD_CtlSendData>
      break;
 8016544:	e004      	b.n	8016550 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016546:	6839      	ldr	r1, [r7, #0]
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f000 f88a 	bl	8016662 <USBD_CtlError>
      break;
 801654e:	bf00      	nop
  }
}
 8016550:	bf00      	nop
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	885b      	ldrh	r3, [r3, #2]
 8016566:	2b01      	cmp	r3, #1
 8016568:	d107      	bne.n	801657a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2201      	movs	r2, #1
 801656e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f000 f940 	bl	80167f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016578:	e013      	b.n	80165a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	885b      	ldrh	r3, [r3, #2]
 801657e:	2b02      	cmp	r3, #2
 8016580:	d10b      	bne.n	801659a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	889b      	ldrh	r3, [r3, #4]
 8016586:	0a1b      	lsrs	r3, r3, #8
 8016588:	b29b      	uxth	r3, r3
 801658a:	b2da      	uxtb	r2, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f000 f930 	bl	80167f8 <USBD_CtlSendStatus>
}
 8016598:	e003      	b.n	80165a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801659a:	6839      	ldr	r1, [r7, #0]
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f000 f860 	bl	8016662 <USBD_CtlError>
}
 80165a2:	bf00      	nop
 80165a4:	3708      	adds	r7, #8
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}

080165aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165aa:	b580      	push	{r7, lr}
 80165ac:	b082      	sub	sp, #8
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
 80165b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165ba:	b2db      	uxtb	r3, r3
 80165bc:	3b01      	subs	r3, #1
 80165be:	2b02      	cmp	r3, #2
 80165c0:	d80b      	bhi.n	80165da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80165c2:	683b      	ldr	r3, [r7, #0]
 80165c4:	885b      	ldrh	r3, [r3, #2]
 80165c6:	2b01      	cmp	r3, #1
 80165c8:	d10c      	bne.n	80165e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2200      	movs	r2, #0
 80165ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f000 f910 	bl	80167f8 <USBD_CtlSendStatus>
      }
      break;
 80165d8:	e004      	b.n	80165e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f000 f840 	bl	8016662 <USBD_CtlError>
      break;
 80165e2:	e000      	b.n	80165e6 <USBD_ClrFeature+0x3c>
      break;
 80165e4:	bf00      	nop
  }
}
 80165e6:	bf00      	nop
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}

080165ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80165ee:	b580      	push	{r7, lr}
 80165f0:	b084      	sub	sp, #16
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	6078      	str	r0, [r7, #4]
 80165f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	781a      	ldrb	r2, [r3, #0]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	3301      	adds	r3, #1
 8016608:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	781a      	ldrb	r2, [r3, #0]
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	3301      	adds	r3, #1
 8016616:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f7ff fa17 	bl	8015a4c <SWAPBYTE>
 801661e:	4603      	mov	r3, r0
 8016620:	461a      	mov	r2, r3
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	3301      	adds	r3, #1
 801662a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	3301      	adds	r3, #1
 8016630:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016632:	68f8      	ldr	r0, [r7, #12]
 8016634:	f7ff fa0a 	bl	8015a4c <SWAPBYTE>
 8016638:	4603      	mov	r3, r0
 801663a:	461a      	mov	r2, r3
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	3301      	adds	r3, #1
 8016644:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	3301      	adds	r3, #1
 801664a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801664c:	68f8      	ldr	r0, [r7, #12]
 801664e:	f7ff f9fd 	bl	8015a4c <SWAPBYTE>
 8016652:	4603      	mov	r3, r0
 8016654:	461a      	mov	r2, r3
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	80da      	strh	r2, [r3, #6]
}
 801665a:	bf00      	nop
 801665c:	3710      	adds	r7, #16
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}

08016662 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016662:	b580      	push	{r7, lr}
 8016664:	b082      	sub	sp, #8
 8016666:	af00      	add	r7, sp, #0
 8016668:	6078      	str	r0, [r7, #4]
 801666a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801666c:	2180      	movs	r1, #128	; 0x80
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f000 fd4c 	bl	801710c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016674:	2100      	movs	r1, #0
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f000 fd48 	bl	801710c <USBD_LL_StallEP>
}
 801667c:	bf00      	nop
 801667e:	3708      	adds	r7, #8
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b086      	sub	sp, #24
 8016688:	af00      	add	r7, sp, #0
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	60b9      	str	r1, [r7, #8]
 801668e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016690:	2300      	movs	r3, #0
 8016692:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d036      	beq.n	8016708 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801669e:	6938      	ldr	r0, [r7, #16]
 80166a0:	f000 f836 	bl	8016710 <USBD_GetLen>
 80166a4:	4603      	mov	r3, r0
 80166a6:	3301      	adds	r3, #1
 80166a8:	b29b      	uxth	r3, r3
 80166aa:	005b      	lsls	r3, r3, #1
 80166ac:	b29a      	uxth	r2, r3
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80166b2:	7dfb      	ldrb	r3, [r7, #23]
 80166b4:	68ba      	ldr	r2, [r7, #8]
 80166b6:	4413      	add	r3, r2
 80166b8:	687a      	ldr	r2, [r7, #4]
 80166ba:	7812      	ldrb	r2, [r2, #0]
 80166bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80166be:	7dfb      	ldrb	r3, [r7, #23]
 80166c0:	3301      	adds	r3, #1
 80166c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80166c4:	7dfb      	ldrb	r3, [r7, #23]
 80166c6:	68ba      	ldr	r2, [r7, #8]
 80166c8:	4413      	add	r3, r2
 80166ca:	2203      	movs	r2, #3
 80166cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80166ce:	7dfb      	ldrb	r3, [r7, #23]
 80166d0:	3301      	adds	r3, #1
 80166d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80166d4:	e013      	b.n	80166fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80166d6:	7dfb      	ldrb	r3, [r7, #23]
 80166d8:	68ba      	ldr	r2, [r7, #8]
 80166da:	4413      	add	r3, r2
 80166dc:	693a      	ldr	r2, [r7, #16]
 80166de:	7812      	ldrb	r2, [r2, #0]
 80166e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	3301      	adds	r3, #1
 80166e6:	613b      	str	r3, [r7, #16]
    idx++;
 80166e8:	7dfb      	ldrb	r3, [r7, #23]
 80166ea:	3301      	adds	r3, #1
 80166ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80166ee:	7dfb      	ldrb	r3, [r7, #23]
 80166f0:	68ba      	ldr	r2, [r7, #8]
 80166f2:	4413      	add	r3, r2
 80166f4:	2200      	movs	r2, #0
 80166f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80166f8:	7dfb      	ldrb	r3, [r7, #23]
 80166fa:	3301      	adds	r3, #1
 80166fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d1e7      	bne.n	80166d6 <USBD_GetString+0x52>
 8016706:	e000      	b.n	801670a <USBD_GetString+0x86>
    return;
 8016708:	bf00      	nop
  }
}
 801670a:	3718      	adds	r7, #24
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016710:	b480      	push	{r7}
 8016712:	b085      	sub	sp, #20
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016718:	2300      	movs	r3, #0
 801671a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016720:	e005      	b.n	801672e <USBD_GetLen+0x1e>
  {
    len++;
 8016722:	7bfb      	ldrb	r3, [r7, #15]
 8016724:	3301      	adds	r3, #1
 8016726:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016728:	68bb      	ldr	r3, [r7, #8]
 801672a:	3301      	adds	r3, #1
 801672c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	781b      	ldrb	r3, [r3, #0]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d1f5      	bne.n	8016722 <USBD_GetLen+0x12>
  }

  return len;
 8016736:	7bfb      	ldrb	r3, [r7, #15]
}
 8016738:	4618      	mov	r0, r3
 801673a:	3714      	adds	r7, #20
 801673c:	46bd      	mov	sp, r7
 801673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016742:	4770      	bx	lr

08016744 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b084      	sub	sp, #16
 8016748:	af00      	add	r7, sp, #0
 801674a:	60f8      	str	r0, [r7, #12]
 801674c:	60b9      	str	r1, [r7, #8]
 801674e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	2202      	movs	r2, #2
 8016754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	68ba      	ldr	r2, [r7, #8]
 8016768:	2100      	movs	r1, #0
 801676a:	68f8      	ldr	r0, [r7, #12]
 801676c:	f000 fd57 	bl	801721e <USBD_LL_Transmit>

  return USBD_OK;
 8016770:	2300      	movs	r3, #0
}
 8016772:	4618      	mov	r0, r3
 8016774:	3710      	adds	r7, #16
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801677a:	b580      	push	{r7, lr}
 801677c:	b084      	sub	sp, #16
 801677e:	af00      	add	r7, sp, #0
 8016780:	60f8      	str	r0, [r7, #12]
 8016782:	60b9      	str	r1, [r7, #8]
 8016784:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	68ba      	ldr	r2, [r7, #8]
 801678a:	2100      	movs	r1, #0
 801678c:	68f8      	ldr	r0, [r7, #12]
 801678e:	f000 fd46 	bl	801721e <USBD_LL_Transmit>

  return USBD_OK;
 8016792:	2300      	movs	r3, #0
}
 8016794:	4618      	mov	r0, r3
 8016796:	3710      	adds	r7, #16
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}

0801679c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	60f8      	str	r0, [r7, #12]
 80167a4:	60b9      	str	r1, [r7, #8]
 80167a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2203      	movs	r2, #3
 80167ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	687a      	ldr	r2, [r7, #4]
 80167bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	68ba      	ldr	r2, [r7, #8]
 80167c4:	2100      	movs	r1, #0
 80167c6:	68f8      	ldr	r0, [r7, #12]
 80167c8:	f000 fd4a 	bl	8017260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80167cc:	2300      	movs	r3, #0
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	3710      	adds	r7, #16
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}

080167d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80167d6:	b580      	push	{r7, lr}
 80167d8:	b084      	sub	sp, #16
 80167da:	af00      	add	r7, sp, #0
 80167dc:	60f8      	str	r0, [r7, #12]
 80167de:	60b9      	str	r1, [r7, #8]
 80167e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	68ba      	ldr	r2, [r7, #8]
 80167e6:	2100      	movs	r1, #0
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	f000 fd39 	bl	8017260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80167ee:	2300      	movs	r3, #0
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	3710      	adds	r7, #16
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}

080167f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2204      	movs	r2, #4
 8016804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016808:	2300      	movs	r3, #0
 801680a:	2200      	movs	r2, #0
 801680c:	2100      	movs	r1, #0
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f000 fd05 	bl	801721e <USBD_LL_Transmit>

  return USBD_OK;
 8016814:	2300      	movs	r3, #0
}
 8016816:	4618      	mov	r0, r3
 8016818:	3708      	adds	r7, #8
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}

0801681e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801681e:	b580      	push	{r7, lr}
 8016820:	b082      	sub	sp, #8
 8016822:	af00      	add	r7, sp, #0
 8016824:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2205      	movs	r2, #5
 801682a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801682e:	2300      	movs	r3, #0
 8016830:	2200      	movs	r2, #0
 8016832:	2100      	movs	r1, #0
 8016834:	6878      	ldr	r0, [r7, #4]
 8016836:	f000 fd13 	bl	8017260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801683a:	2300      	movs	r3, #0
}
 801683c:	4618      	mov	r0, r3
 801683e:	3708      	adds	r7, #8
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}

08016844 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016844:	b480      	push	{r7}
 8016846:	b087      	sub	sp, #28
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	4613      	mov	r3, r2
 8016850:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016852:	2301      	movs	r3, #1
 8016854:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016856:	2300      	movs	r3, #0
 8016858:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801685a:	4b1f      	ldr	r3, [pc, #124]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 801685c:	7a5b      	ldrb	r3, [r3, #9]
 801685e:	b2db      	uxtb	r3, r3
 8016860:	2b00      	cmp	r3, #0
 8016862:	d131      	bne.n	80168c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016864:	4b1c      	ldr	r3, [pc, #112]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 8016866:	7a5b      	ldrb	r3, [r3, #9]
 8016868:	b2db      	uxtb	r3, r3
 801686a:	461a      	mov	r2, r3
 801686c:	4b1a      	ldr	r3, [pc, #104]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 801686e:	2100      	movs	r1, #0
 8016870:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016872:	4b19      	ldr	r3, [pc, #100]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 8016874:	7a5b      	ldrb	r3, [r3, #9]
 8016876:	b2db      	uxtb	r3, r3
 8016878:	4a17      	ldr	r2, [pc, #92]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 801687a:	009b      	lsls	r3, r3, #2
 801687c:	4413      	add	r3, r2
 801687e:	68fa      	ldr	r2, [r7, #12]
 8016880:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016882:	4b15      	ldr	r3, [pc, #84]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 8016884:	7a5b      	ldrb	r3, [r3, #9]
 8016886:	b2db      	uxtb	r3, r3
 8016888:	461a      	mov	r2, r3
 801688a:	4b13      	ldr	r3, [pc, #76]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 801688c:	4413      	add	r3, r2
 801688e:	79fa      	ldrb	r2, [r7, #7]
 8016890:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016892:	4b11      	ldr	r3, [pc, #68]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 8016894:	7a5b      	ldrb	r3, [r3, #9]
 8016896:	b2db      	uxtb	r3, r3
 8016898:	1c5a      	adds	r2, r3, #1
 801689a:	b2d1      	uxtb	r1, r2
 801689c:	4a0e      	ldr	r2, [pc, #56]	; (80168d8 <FATFS_LinkDriverEx+0x94>)
 801689e:	7251      	strb	r1, [r2, #9]
 80168a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80168a2:	7dbb      	ldrb	r3, [r7, #22]
 80168a4:	3330      	adds	r3, #48	; 0x30
 80168a6:	b2da      	uxtb	r2, r3
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	3301      	adds	r3, #1
 80168b0:	223a      	movs	r2, #58	; 0x3a
 80168b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	3302      	adds	r3, #2
 80168b8:	222f      	movs	r2, #47	; 0x2f
 80168ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	3303      	adds	r3, #3
 80168c0:	2200      	movs	r2, #0
 80168c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80168c4:	2300      	movs	r3, #0
 80168c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80168c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	371c      	adds	r7, #28
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	24001600 	.word	0x24001600

080168dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80168e6:	2200      	movs	r2, #0
 80168e8:	6839      	ldr	r1, [r7, #0]
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7ff ffaa 	bl	8016844 <FATFS_LinkDriverEx>
 80168f0:	4603      	mov	r3, r0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3708      	adds	r7, #8
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}
	...

080168fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016900:	2201      	movs	r2, #1
 8016902:	4913      	ldr	r1, [pc, #76]	; (8016950 <MX_USB_DEVICE_Init+0x54>)
 8016904:	4813      	ldr	r0, [pc, #76]	; (8016954 <MX_USB_DEVICE_Init+0x58>)
 8016906:	f7fe fc7b 	bl	8015200 <USBD_Init>
 801690a:	4603      	mov	r3, r0
 801690c:	2b00      	cmp	r3, #0
 801690e:	d001      	beq.n	8016914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016910:	f7ec f87e 	bl	8002a10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016914:	4910      	ldr	r1, [pc, #64]	; (8016958 <MX_USB_DEVICE_Init+0x5c>)
 8016916:	480f      	ldr	r0, [pc, #60]	; (8016954 <MX_USB_DEVICE_Init+0x58>)
 8016918:	f7fe fca2 	bl	8015260 <USBD_RegisterClass>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d001      	beq.n	8016926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016922:	f7ec f875 	bl	8002a10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016926:	490d      	ldr	r1, [pc, #52]	; (801695c <MX_USB_DEVICE_Init+0x60>)
 8016928:	480a      	ldr	r0, [pc, #40]	; (8016954 <MX_USB_DEVICE_Init+0x58>)
 801692a:	f7fe fb99 	bl	8015060 <USBD_CDC_RegisterInterface>
 801692e:	4603      	mov	r3, r0
 8016930:	2b00      	cmp	r3, #0
 8016932:	d001      	beq.n	8016938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016934:	f7ec f86c 	bl	8002a10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016938:	4806      	ldr	r0, [pc, #24]	; (8016954 <MX_USB_DEVICE_Init+0x58>)
 801693a:	f7fe fcc7 	bl	80152cc <USBD_Start>
 801693e:	4603      	mov	r3, r0
 8016940:	2b00      	cmp	r3, #0
 8016942:	d001      	beq.n	8016948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016944:	f7ec f864 	bl	8002a10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016948:	f7f3 f83a 	bl	80099c0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801694c:	bf00      	nop
 801694e:	bd80      	pop	{r7, pc}
 8016950:	240000b0 	.word	0x240000b0
 8016954:	2400160c 	.word	0x2400160c
 8016958:	2400001c 	.word	0x2400001c
 801695c:	2400009c 	.word	0x2400009c

08016960 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016964:	2200      	movs	r2, #0
 8016966:	4905      	ldr	r1, [pc, #20]	; (801697c <CDC_Init_HS+0x1c>)
 8016968:	4805      	ldr	r0, [pc, #20]	; (8016980 <CDC_Init_HS+0x20>)
 801696a:	f7fe fb93 	bl	8015094 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801696e:	4905      	ldr	r1, [pc, #20]	; (8016984 <CDC_Init_HS+0x24>)
 8016970:	4803      	ldr	r0, [pc, #12]	; (8016980 <CDC_Init_HS+0x20>)
 8016972:	f7fe fbb1 	bl	80150d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016976:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016978:	4618      	mov	r0, r3
 801697a:	bd80      	pop	{r7, pc}
 801697c:	240020e8 	.word	0x240020e8
 8016980:	2400160c 	.word	0x2400160c
 8016984:	240018e8 	.word	0x240018e8

08016988 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016988:	b480      	push	{r7}
 801698a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801698c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801698e:	4618      	mov	r0, r3
 8016990:	46bd      	mov	sp, r7
 8016992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016996:	4770      	bx	lr

08016998 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016998:	b480      	push	{r7}
 801699a:	b083      	sub	sp, #12
 801699c:	af00      	add	r7, sp, #0
 801699e:	4603      	mov	r3, r0
 80169a0:	6039      	str	r1, [r7, #0]
 80169a2:	71fb      	strb	r3, [r7, #7]
 80169a4:	4613      	mov	r3, r2
 80169a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80169a8:	79fb      	ldrb	r3, [r7, #7]
 80169aa:	2b23      	cmp	r3, #35	; 0x23
 80169ac:	d84a      	bhi.n	8016a44 <CDC_Control_HS+0xac>
 80169ae:	a201      	add	r2, pc, #4	; (adr r2, 80169b4 <CDC_Control_HS+0x1c>)
 80169b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169b4:	08016a45 	.word	0x08016a45
 80169b8:	08016a45 	.word	0x08016a45
 80169bc:	08016a45 	.word	0x08016a45
 80169c0:	08016a45 	.word	0x08016a45
 80169c4:	08016a45 	.word	0x08016a45
 80169c8:	08016a45 	.word	0x08016a45
 80169cc:	08016a45 	.word	0x08016a45
 80169d0:	08016a45 	.word	0x08016a45
 80169d4:	08016a45 	.word	0x08016a45
 80169d8:	08016a45 	.word	0x08016a45
 80169dc:	08016a45 	.word	0x08016a45
 80169e0:	08016a45 	.word	0x08016a45
 80169e4:	08016a45 	.word	0x08016a45
 80169e8:	08016a45 	.word	0x08016a45
 80169ec:	08016a45 	.word	0x08016a45
 80169f0:	08016a45 	.word	0x08016a45
 80169f4:	08016a45 	.word	0x08016a45
 80169f8:	08016a45 	.word	0x08016a45
 80169fc:	08016a45 	.word	0x08016a45
 8016a00:	08016a45 	.word	0x08016a45
 8016a04:	08016a45 	.word	0x08016a45
 8016a08:	08016a45 	.word	0x08016a45
 8016a0c:	08016a45 	.word	0x08016a45
 8016a10:	08016a45 	.word	0x08016a45
 8016a14:	08016a45 	.word	0x08016a45
 8016a18:	08016a45 	.word	0x08016a45
 8016a1c:	08016a45 	.word	0x08016a45
 8016a20:	08016a45 	.word	0x08016a45
 8016a24:	08016a45 	.word	0x08016a45
 8016a28:	08016a45 	.word	0x08016a45
 8016a2c:	08016a45 	.word	0x08016a45
 8016a30:	08016a45 	.word	0x08016a45
 8016a34:	08016a45 	.word	0x08016a45
 8016a38:	08016a45 	.word	0x08016a45
 8016a3c:	08016a45 	.word	0x08016a45
 8016a40:	08016a45 	.word	0x08016a45
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016a44:	bf00      	nop
  }

  return (USBD_OK);
 8016a46:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	370c      	adds	r7, #12
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a52:	4770      	bx	lr

08016a54 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b084      	sub	sp, #16
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016a5e:	6879      	ldr	r1, [r7, #4]
 8016a60:	480e      	ldr	r0, [pc, #56]	; (8016a9c <CDC_Receive_HS+0x48>)
 8016a62:	f7fe fb39 	bl	80150d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016a66:	480d      	ldr	r0, [pc, #52]	; (8016a9c <CDC_Receive_HS+0x48>)
 8016a68:	f7fe fb94 	bl	8015194 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016a72:	4b0b      	ldr	r3, [pc, #44]	; (8016aa0 <CDC_Receive_HS+0x4c>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	4a0b      	ldr	r2, [pc, #44]	; (8016aa4 <CDC_Receive_HS+0x50>)
 8016a78:	4413      	add	r3, r2
 8016a7a:	68fa      	ldr	r2, [r7, #12]
 8016a7c:	6879      	ldr	r1, [r7, #4]
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f000 fcf0 	bl	8017464 <memcpy>
  usbBytesReady += cpyLen;
 8016a84:	4b06      	ldr	r3, [pc, #24]	; (8016aa0 <CDC_Receive_HS+0x4c>)
 8016a86:	681a      	ldr	r2, [r3, #0]
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	4a04      	ldr	r2, [pc, #16]	; (8016aa0 <CDC_Receive_HS+0x4c>)
 8016a8e:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016a90:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	3710      	adds	r7, #16
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	2400160c 	.word	0x2400160c
 8016aa0:	24000270 	.word	0x24000270
 8016aa4:	24000170 	.word	0x24000170

08016aa8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b084      	sub	sp, #16
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
 8016ab0:	460b      	mov	r3, r1
 8016ab2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016ab8:	4b0d      	ldr	r3, [pc, #52]	; (8016af0 <CDC_Transmit_HS+0x48>)
 8016aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016abe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d001      	beq.n	8016ace <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016aca:	2301      	movs	r3, #1
 8016acc:	e00b      	b.n	8016ae6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016ace:	887b      	ldrh	r3, [r7, #2]
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	6879      	ldr	r1, [r7, #4]
 8016ad4:	4806      	ldr	r0, [pc, #24]	; (8016af0 <CDC_Transmit_HS+0x48>)
 8016ad6:	f7fe fadd 	bl	8015094 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016ada:	4805      	ldr	r0, [pc, #20]	; (8016af0 <CDC_Transmit_HS+0x48>)
 8016adc:	f7fe fb1a 	bl	8015114 <USBD_CDC_TransmitPacket>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3710      	adds	r7, #16
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	2400160c 	.word	0x2400160c

08016af4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016af4:	b480      	push	{r7}
 8016af6:	b087      	sub	sp, #28
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	60b9      	str	r1, [r7, #8]
 8016afe:	4613      	mov	r3, r2
 8016b00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016b02:	2300      	movs	r3, #0
 8016b04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	371c      	adds	r7, #28
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b14:	4770      	bx	lr
	...

08016b18 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	4603      	mov	r3, r0
 8016b20:	6039      	str	r1, [r7, #0]
 8016b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	2212      	movs	r2, #18
 8016b28:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016b2a:	4b03      	ldr	r3, [pc, #12]	; (8016b38 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	370c      	adds	r7, #12
 8016b30:	46bd      	mov	sp, r7
 8016b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b36:	4770      	bx	lr
 8016b38:	240000d0 	.word	0x240000d0

08016b3c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	b083      	sub	sp, #12
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	4603      	mov	r3, r0
 8016b44:	6039      	str	r1, [r7, #0]
 8016b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	2204      	movs	r2, #4
 8016b4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016b4e:	4b03      	ldr	r3, [pc, #12]	; (8016b5c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	370c      	adds	r7, #12
 8016b54:	46bd      	mov	sp, r7
 8016b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5a:	4770      	bx	lr
 8016b5c:	240000e4 	.word	0x240000e4

08016b60 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	4603      	mov	r3, r0
 8016b68:	6039      	str	r1, [r7, #0]
 8016b6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016b6c:	79fb      	ldrb	r3, [r7, #7]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d105      	bne.n	8016b7e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016b72:	683a      	ldr	r2, [r7, #0]
 8016b74:	4907      	ldr	r1, [pc, #28]	; (8016b94 <USBD_HS_ProductStrDescriptor+0x34>)
 8016b76:	4808      	ldr	r0, [pc, #32]	; (8016b98 <USBD_HS_ProductStrDescriptor+0x38>)
 8016b78:	f7ff fd84 	bl	8016684 <USBD_GetString>
 8016b7c:	e004      	b.n	8016b88 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016b7e:	683a      	ldr	r2, [r7, #0]
 8016b80:	4904      	ldr	r1, [pc, #16]	; (8016b94 <USBD_HS_ProductStrDescriptor+0x34>)
 8016b82:	4805      	ldr	r0, [pc, #20]	; (8016b98 <USBD_HS_ProductStrDescriptor+0x38>)
 8016b84:	f7ff fd7e 	bl	8016684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b88:	4b02      	ldr	r3, [pc, #8]	; (8016b94 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	240028e8 	.word	0x240028e8
 8016b98:	080187c0 	.word	0x080187c0

08016b9c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b082      	sub	sp, #8
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	6039      	str	r1, [r7, #0]
 8016ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016ba8:	683a      	ldr	r2, [r7, #0]
 8016baa:	4904      	ldr	r1, [pc, #16]	; (8016bbc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016bac:	4804      	ldr	r0, [pc, #16]	; (8016bc0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016bae:	f7ff fd69 	bl	8016684 <USBD_GetString>
  return USBD_StrDesc;
 8016bb2:	4b02      	ldr	r3, [pc, #8]	; (8016bbc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3708      	adds	r7, #8
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}
 8016bbc:	240028e8 	.word	0x240028e8
 8016bc0:	080187dc 	.word	0x080187dc

08016bc4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	4603      	mov	r3, r0
 8016bcc:	6039      	str	r1, [r7, #0]
 8016bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	221a      	movs	r2, #26
 8016bd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016bd6:	f000 f843 	bl	8016c60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016bda:	4b02      	ldr	r3, [pc, #8]	; (8016be4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	3708      	adds	r7, #8
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}
 8016be4:	240000e8 	.word	0x240000e8

08016be8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	6039      	str	r1, [r7, #0]
 8016bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016bf4:	79fb      	ldrb	r3, [r7, #7]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d105      	bne.n	8016c06 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016bfa:	683a      	ldr	r2, [r7, #0]
 8016bfc:	4907      	ldr	r1, [pc, #28]	; (8016c1c <USBD_HS_ConfigStrDescriptor+0x34>)
 8016bfe:	4808      	ldr	r0, [pc, #32]	; (8016c20 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016c00:	f7ff fd40 	bl	8016684 <USBD_GetString>
 8016c04:	e004      	b.n	8016c10 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016c06:	683a      	ldr	r2, [r7, #0]
 8016c08:	4904      	ldr	r1, [pc, #16]	; (8016c1c <USBD_HS_ConfigStrDescriptor+0x34>)
 8016c0a:	4805      	ldr	r0, [pc, #20]	; (8016c20 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016c0c:	f7ff fd3a 	bl	8016684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c10:	4b02      	ldr	r3, [pc, #8]	; (8016c1c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3708      	adds	r7, #8
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	240028e8 	.word	0x240028e8
 8016c20:	080187e0 	.word	0x080187e0

08016c24 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	6039      	str	r1, [r7, #0]
 8016c2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016c30:	79fb      	ldrb	r3, [r7, #7]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d105      	bne.n	8016c42 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016c36:	683a      	ldr	r2, [r7, #0]
 8016c38:	4907      	ldr	r1, [pc, #28]	; (8016c58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016c3a:	4808      	ldr	r0, [pc, #32]	; (8016c5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016c3c:	f7ff fd22 	bl	8016684 <USBD_GetString>
 8016c40:	e004      	b.n	8016c4c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016c42:	683a      	ldr	r2, [r7, #0]
 8016c44:	4904      	ldr	r1, [pc, #16]	; (8016c58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016c46:	4805      	ldr	r0, [pc, #20]	; (8016c5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016c48:	f7ff fd1c 	bl	8016684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c4c:	4b02      	ldr	r3, [pc, #8]	; (8016c58 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	3708      	adds	r7, #8
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}
 8016c56:	bf00      	nop
 8016c58:	240028e8 	.word	0x240028e8
 8016c5c:	080187ec 	.word	0x080187ec

08016c60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b084      	sub	sp, #16
 8016c64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016c66:	4b0f      	ldr	r3, [pc, #60]	; (8016ca4 <Get_SerialNum+0x44>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016c6c:	4b0e      	ldr	r3, [pc, #56]	; (8016ca8 <Get_SerialNum+0x48>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016c72:	4b0e      	ldr	r3, [pc, #56]	; (8016cac <Get_SerialNum+0x4c>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016c78:	68fa      	ldr	r2, [r7, #12]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	4413      	add	r3, r2
 8016c7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d009      	beq.n	8016c9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016c86:	2208      	movs	r2, #8
 8016c88:	4909      	ldr	r1, [pc, #36]	; (8016cb0 <Get_SerialNum+0x50>)
 8016c8a:	68f8      	ldr	r0, [r7, #12]
 8016c8c:	f000 f814 	bl	8016cb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016c90:	2204      	movs	r2, #4
 8016c92:	4908      	ldr	r1, [pc, #32]	; (8016cb4 <Get_SerialNum+0x54>)
 8016c94:	68b8      	ldr	r0, [r7, #8]
 8016c96:	f000 f80f 	bl	8016cb8 <IntToUnicode>
  }
}
 8016c9a:	bf00      	nop
 8016c9c:	3710      	adds	r7, #16
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	1ff1e800 	.word	0x1ff1e800
 8016ca8:	1ff1e804 	.word	0x1ff1e804
 8016cac:	1ff1e808 	.word	0x1ff1e808
 8016cb0:	240000ea 	.word	0x240000ea
 8016cb4:	240000fa 	.word	0x240000fa

08016cb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b087      	sub	sp, #28
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	4613      	mov	r3, r2
 8016cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016cca:	2300      	movs	r3, #0
 8016ccc:	75fb      	strb	r3, [r7, #23]
 8016cce:	e027      	b.n	8016d20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	0f1b      	lsrs	r3, r3, #28
 8016cd4:	2b09      	cmp	r3, #9
 8016cd6:	d80b      	bhi.n	8016cf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	0f1b      	lsrs	r3, r3, #28
 8016cdc:	b2da      	uxtb	r2, r3
 8016cde:	7dfb      	ldrb	r3, [r7, #23]
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	440b      	add	r3, r1
 8016ce8:	3230      	adds	r2, #48	; 0x30
 8016cea:	b2d2      	uxtb	r2, r2
 8016cec:	701a      	strb	r2, [r3, #0]
 8016cee:	e00a      	b.n	8016d06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	0f1b      	lsrs	r3, r3, #28
 8016cf4:	b2da      	uxtb	r2, r3
 8016cf6:	7dfb      	ldrb	r3, [r7, #23]
 8016cf8:	005b      	lsls	r3, r3, #1
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	440b      	add	r3, r1
 8016d00:	3237      	adds	r2, #55	; 0x37
 8016d02:	b2d2      	uxtb	r2, r2
 8016d04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	011b      	lsls	r3, r3, #4
 8016d0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016d0c:	7dfb      	ldrb	r3, [r7, #23]
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	3301      	adds	r3, #1
 8016d12:	68ba      	ldr	r2, [r7, #8]
 8016d14:	4413      	add	r3, r2
 8016d16:	2200      	movs	r2, #0
 8016d18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016d1a:	7dfb      	ldrb	r3, [r7, #23]
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	75fb      	strb	r3, [r7, #23]
 8016d20:	7dfa      	ldrb	r2, [r7, #23]
 8016d22:	79fb      	ldrb	r3, [r7, #7]
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d3d3      	bcc.n	8016cd0 <IntToUnicode+0x18>
  }
}
 8016d28:	bf00      	nop
 8016d2a:	bf00      	nop
 8016d2c:	371c      	adds	r7, #28
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d34:	4770      	bx	lr
	...

08016d38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b0b2      	sub	sp, #200	; 0xc8
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016d40:	f107 0310 	add.w	r3, r7, #16
 8016d44:	22b8      	movs	r2, #184	; 0xb8
 8016d46:	2100      	movs	r1, #0
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f000 fb4f 	bl	80173ec <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	4a1a      	ldr	r2, [pc, #104]	; (8016dbc <HAL_PCD_MspInit+0x84>)
 8016d54:	4293      	cmp	r3, r2
 8016d56:	d12c      	bne.n	8016db2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016d58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016d5c:	f04f 0300 	mov.w	r3, #0
 8016d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016d64:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016d6c:	f107 0310 	add.w	r3, r7, #16
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7f3 fe05 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8016d76:	4603      	mov	r3, r0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d001      	beq.n	8016d80 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016d7c:	f7eb fe48 	bl	8002a10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016d80:	f7f2 fe1e 	bl	80099c0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016d84:	4b0e      	ldr	r3, [pc, #56]	; (8016dc0 <HAL_PCD_MspInit+0x88>)
 8016d86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016d8a:	4a0d      	ldr	r2, [pc, #52]	; (8016dc0 <HAL_PCD_MspInit+0x88>)
 8016d8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016d90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016d94:	4b0a      	ldr	r3, [pc, #40]	; (8016dc0 <HAL_PCD_MspInit+0x88>)
 8016d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016d9e:	60fb      	str	r3, [r7, #12]
 8016da0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016da2:	2200      	movs	r2, #0
 8016da4:	2100      	movs	r1, #0
 8016da6:	204d      	movs	r0, #77	; 0x4d
 8016da8:	f7ee fb8f 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016dac:	204d      	movs	r0, #77	; 0x4d
 8016dae:	f7ee fba6 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016db2:	bf00      	nop
 8016db4:	37c8      	adds	r7, #200	; 0xc8
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop
 8016dbc:	40040000 	.word	0x40040000
 8016dc0:	58024400 	.word	0x58024400

08016dc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016dd8:	4619      	mov	r1, r3
 8016dda:	4610      	mov	r0, r2
 8016ddc:	f7fe fac3 	bl	8015366 <USBD_LL_SetupStage>
}
 8016de0:	bf00      	nop
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b082      	sub	sp, #8
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	460b      	mov	r3, r1
 8016df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016dfa:	78fa      	ldrb	r2, [r7, #3]
 8016dfc:	6879      	ldr	r1, [r7, #4]
 8016dfe:	4613      	mov	r3, r2
 8016e00:	00db      	lsls	r3, r3, #3
 8016e02:	4413      	add	r3, r2
 8016e04:	009b      	lsls	r3, r3, #2
 8016e06:	440b      	add	r3, r1
 8016e08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016e0c:	681a      	ldr	r2, [r3, #0]
 8016e0e:	78fb      	ldrb	r3, [r7, #3]
 8016e10:	4619      	mov	r1, r3
 8016e12:	f7fe fafd 	bl	8015410 <USBD_LL_DataOutStage>
}
 8016e16:	bf00      	nop
 8016e18:	3708      	adds	r7, #8
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}

08016e1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e1e:	b580      	push	{r7, lr}
 8016e20:	b082      	sub	sp, #8
 8016e22:	af00      	add	r7, sp, #0
 8016e24:	6078      	str	r0, [r7, #4]
 8016e26:	460b      	mov	r3, r1
 8016e28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016e30:	78fa      	ldrb	r2, [r7, #3]
 8016e32:	6879      	ldr	r1, [r7, #4]
 8016e34:	4613      	mov	r3, r2
 8016e36:	00db      	lsls	r3, r3, #3
 8016e38:	4413      	add	r3, r2
 8016e3a:	009b      	lsls	r3, r3, #2
 8016e3c:	440b      	add	r3, r1
 8016e3e:	3348      	adds	r3, #72	; 0x48
 8016e40:	681a      	ldr	r2, [r3, #0]
 8016e42:	78fb      	ldrb	r3, [r7, #3]
 8016e44:	4619      	mov	r1, r3
 8016e46:	f7fe fb96 	bl	8015576 <USBD_LL_DataInStage>
}
 8016e4a:	bf00      	nop
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}

08016e52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e52:	b580      	push	{r7, lr}
 8016e54:	b082      	sub	sp, #8
 8016e56:	af00      	add	r7, sp, #0
 8016e58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7fe fcd0 	bl	8015806 <USBD_LL_SOF>
}
 8016e66:	bf00      	nop
 8016e68:	3708      	adds	r7, #8
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}

08016e6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e6e:	b580      	push	{r7, lr}
 8016e70:	b084      	sub	sp, #16
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016e76:	2301      	movs	r3, #1
 8016e78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	691b      	ldr	r3, [r3, #16]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d102      	bne.n	8016e88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016e82:	2300      	movs	r3, #0
 8016e84:	73fb      	strb	r3, [r7, #15]
 8016e86:	e008      	b.n	8016e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	691b      	ldr	r3, [r3, #16]
 8016e8c:	2b02      	cmp	r3, #2
 8016e8e:	d102      	bne.n	8016e96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016e90:	2301      	movs	r3, #1
 8016e92:	73fb      	strb	r3, [r7, #15]
 8016e94:	e001      	b.n	8016e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016e96:	f7eb fdbb 	bl	8002a10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ea0:	7bfa      	ldrb	r2, [r7, #15]
 8016ea2:	4611      	mov	r1, r2
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f7fe fc6a 	bl	801577e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7fe fc12 	bl	80156da <USBD_LL_Reset>
}
 8016eb6:	bf00      	nop
 8016eb8:	3710      	adds	r7, #16
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
	...

08016ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b082      	sub	sp, #8
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7fe fc65 	bl	801579e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	687a      	ldr	r2, [r7, #4]
 8016ee0:	6812      	ldr	r2, [r2, #0]
 8016ee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016ee6:	f043 0301 	orr.w	r3, r3, #1
 8016eea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6a1b      	ldr	r3, [r3, #32]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d005      	beq.n	8016f00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016ef4:	4b04      	ldr	r3, [pc, #16]	; (8016f08 <HAL_PCD_SuspendCallback+0x48>)
 8016ef6:	691b      	ldr	r3, [r3, #16]
 8016ef8:	4a03      	ldr	r2, [pc, #12]	; (8016f08 <HAL_PCD_SuspendCallback+0x48>)
 8016efa:	f043 0306 	orr.w	r3, r3, #6
 8016efe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016f00:	bf00      	nop
 8016f02:	3708      	adds	r7, #8
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	e000ed00 	.word	0xe000ed00

08016f0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7fe fc5b 	bl	80157d6 <USBD_LL_Resume>
}
 8016f20:	bf00      	nop
 8016f22:	3708      	adds	r7, #8
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}

08016f28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	460b      	mov	r3, r1
 8016f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f3a:	78fa      	ldrb	r2, [r7, #3]
 8016f3c:	4611      	mov	r1, r2
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f7fe fcb3 	bl	80158aa <USBD_LL_IsoOUTIncomplete>
}
 8016f44:	bf00      	nop
 8016f46:	3708      	adds	r7, #8
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}

08016f4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
 8016f54:	460b      	mov	r3, r1
 8016f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f5e:	78fa      	ldrb	r2, [r7, #3]
 8016f60:	4611      	mov	r1, r2
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7fe fc6f 	bl	8015846 <USBD_LL_IsoINIncomplete>
}
 8016f68:	bf00      	nop
 8016f6a:	3708      	adds	r7, #8
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}

08016f70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b082      	sub	sp, #8
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fe fcc5 	bl	801590e <USBD_LL_DevConnected>
}
 8016f84:	bf00      	nop
 8016f86:	3708      	adds	r7, #8
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}

08016f8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7fe fcc2 	bl	8015924 <USBD_LL_DevDisconnected>
}
 8016fa0:	bf00      	nop
 8016fa2:	3708      	adds	r7, #8
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	2b01      	cmp	r3, #1
 8016fb6:	d140      	bne.n	801703a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016fb8:	4a22      	ldr	r2, [pc, #136]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	4a20      	ldr	r2, [pc, #128]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fc4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016fc8:	4b1e      	ldr	r3, [pc, #120]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fca:	4a1f      	ldr	r2, [pc, #124]	; (8017048 <USBD_LL_Init+0xa0>)
 8016fcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016fce:	4b1d      	ldr	r3, [pc, #116]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fd0:	2209      	movs	r2, #9
 8016fd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016fd4:	4b1b      	ldr	r3, [pc, #108]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fd6:	2202      	movs	r2, #2
 8016fd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016fda:	4b1a      	ldr	r3, [pc, #104]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fdc:	2200      	movs	r2, #0
 8016fde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016fe0:	4b18      	ldr	r3, [pc, #96]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fe2:	2202      	movs	r2, #2
 8016fe4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016fe6:	4b17      	ldr	r3, [pc, #92]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fe8:	2200      	movs	r2, #0
 8016fea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016fec:	4b15      	ldr	r3, [pc, #84]	; (8017044 <USBD_LL_Init+0x9c>)
 8016fee:	2200      	movs	r2, #0
 8016ff0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016ff2:	4b14      	ldr	r3, [pc, #80]	; (8017044 <USBD_LL_Init+0x9c>)
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016ff8:	4b12      	ldr	r3, [pc, #72]	; (8017044 <USBD_LL_Init+0x9c>)
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016ffe:	4b11      	ldr	r3, [pc, #68]	; (8017044 <USBD_LL_Init+0x9c>)
 8017000:	2200      	movs	r2, #0
 8017002:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017004:	4b0f      	ldr	r3, [pc, #60]	; (8017044 <USBD_LL_Init+0x9c>)
 8017006:	2200      	movs	r2, #0
 8017008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801700a:	480e      	ldr	r0, [pc, #56]	; (8017044 <USBD_LL_Init+0x9c>)
 801700c:	f7f1 f9e5 	bl	80083da <HAL_PCD_Init>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d001      	beq.n	801701a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017016:	f7eb fcfb 	bl	8002a10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801701a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801701e:	4809      	ldr	r0, [pc, #36]	; (8017044 <USBD_LL_Init+0x9c>)
 8017020:	f7f2 fc53 	bl	80098ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017024:	2280      	movs	r2, #128	; 0x80
 8017026:	2100      	movs	r1, #0
 8017028:	4806      	ldr	r0, [pc, #24]	; (8017044 <USBD_LL_Init+0x9c>)
 801702a:	f7f2 fc07 	bl	800983c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801702e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017032:	2101      	movs	r1, #1
 8017034:	4803      	ldr	r0, [pc, #12]	; (8017044 <USBD_LL_Init+0x9c>)
 8017036:	f7f2 fc01 	bl	800983c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801703a:	2300      	movs	r3, #0
}
 801703c:	4618      	mov	r0, r3
 801703e:	3708      	adds	r7, #8
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	24002ae8 	.word	0x24002ae8
 8017048:	40040000 	.word	0x40040000

0801704c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b084      	sub	sp, #16
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017054:	2300      	movs	r3, #0
 8017056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017058:	2300      	movs	r3, #0
 801705a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017062:	4618      	mov	r0, r3
 8017064:	f7f1 fadd 	bl	8008622 <HAL_PCD_Start>
 8017068:	4603      	mov	r3, r0
 801706a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801706c:	7bfb      	ldrb	r3, [r7, #15]
 801706e:	4618      	mov	r0, r3
 8017070:	f000 f942 	bl	80172f8 <USBD_Get_USB_Status>
 8017074:	4603      	mov	r3, r0
 8017076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017078:	7bbb      	ldrb	r3, [r7, #14]
}
 801707a:	4618      	mov	r0, r3
 801707c:	3710      	adds	r7, #16
 801707e:	46bd      	mov	sp, r7
 8017080:	bd80      	pop	{r7, pc}

08017082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017082:	b580      	push	{r7, lr}
 8017084:	b084      	sub	sp, #16
 8017086:	af00      	add	r7, sp, #0
 8017088:	6078      	str	r0, [r7, #4]
 801708a:	4608      	mov	r0, r1
 801708c:	4611      	mov	r1, r2
 801708e:	461a      	mov	r2, r3
 8017090:	4603      	mov	r3, r0
 8017092:	70fb      	strb	r3, [r7, #3]
 8017094:	460b      	mov	r3, r1
 8017096:	70bb      	strb	r3, [r7, #2]
 8017098:	4613      	mov	r3, r2
 801709a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801709c:	2300      	movs	r3, #0
 801709e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170a0:	2300      	movs	r3, #0
 80170a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80170aa:	78bb      	ldrb	r3, [r7, #2]
 80170ac:	883a      	ldrh	r2, [r7, #0]
 80170ae:	78f9      	ldrb	r1, [r7, #3]
 80170b0:	f7f1 ffdd 	bl	800906e <HAL_PCD_EP_Open>
 80170b4:	4603      	mov	r3, r0
 80170b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170b8:	7bfb      	ldrb	r3, [r7, #15]
 80170ba:	4618      	mov	r0, r3
 80170bc:	f000 f91c 	bl	80172f8 <USBD_Get_USB_Status>
 80170c0:	4603      	mov	r3, r0
 80170c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80170c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3710      	adds	r7, #16
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}

080170ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80170ce:	b580      	push	{r7, lr}
 80170d0:	b084      	sub	sp, #16
 80170d2:	af00      	add	r7, sp, #0
 80170d4:	6078      	str	r0, [r7, #4]
 80170d6:	460b      	mov	r3, r1
 80170d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170da:	2300      	movs	r3, #0
 80170dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170de:	2300      	movs	r3, #0
 80170e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80170e8:	78fa      	ldrb	r2, [r7, #3]
 80170ea:	4611      	mov	r1, r2
 80170ec:	4618      	mov	r0, r3
 80170ee:	f7f2 f826 	bl	800913e <HAL_PCD_EP_Close>
 80170f2:	4603      	mov	r3, r0
 80170f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170f6:	7bfb      	ldrb	r3, [r7, #15]
 80170f8:	4618      	mov	r0, r3
 80170fa:	f000 f8fd 	bl	80172f8 <USBD_Get_USB_Status>
 80170fe:	4603      	mov	r3, r0
 8017100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017102:	7bbb      	ldrb	r3, [r7, #14]
}
 8017104:	4618      	mov	r0, r3
 8017106:	3710      	adds	r7, #16
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b084      	sub	sp, #16
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	460b      	mov	r3, r1
 8017116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017118:	2300      	movs	r3, #0
 801711a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801711c:	2300      	movs	r3, #0
 801711e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017126:	78fa      	ldrb	r2, [r7, #3]
 8017128:	4611      	mov	r1, r2
 801712a:	4618      	mov	r0, r3
 801712c:	f7f2 f8e0 	bl	80092f0 <HAL_PCD_EP_SetStall>
 8017130:	4603      	mov	r3, r0
 8017132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017134:	7bfb      	ldrb	r3, [r7, #15]
 8017136:	4618      	mov	r0, r3
 8017138:	f000 f8de 	bl	80172f8 <USBD_Get_USB_Status>
 801713c:	4603      	mov	r3, r0
 801713e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017140:	7bbb      	ldrb	r3, [r7, #14]
}
 8017142:	4618      	mov	r0, r3
 8017144:	3710      	adds	r7, #16
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}

0801714a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801714a:	b580      	push	{r7, lr}
 801714c:	b084      	sub	sp, #16
 801714e:	af00      	add	r7, sp, #0
 8017150:	6078      	str	r0, [r7, #4]
 8017152:	460b      	mov	r3, r1
 8017154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017156:	2300      	movs	r3, #0
 8017158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801715a:	2300      	movs	r3, #0
 801715c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017164:	78fa      	ldrb	r2, [r7, #3]
 8017166:	4611      	mov	r1, r2
 8017168:	4618      	mov	r0, r3
 801716a:	f7f2 f925 	bl	80093b8 <HAL_PCD_EP_ClrStall>
 801716e:	4603      	mov	r3, r0
 8017170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017172:	7bfb      	ldrb	r3, [r7, #15]
 8017174:	4618      	mov	r0, r3
 8017176:	f000 f8bf 	bl	80172f8 <USBD_Get_USB_Status>
 801717a:	4603      	mov	r3, r0
 801717c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801717e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017180:	4618      	mov	r0, r3
 8017182:	3710      	adds	r7, #16
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}

08017188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017188:	b480      	push	{r7}
 801718a:	b085      	sub	sp, #20
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	460b      	mov	r3, r1
 8017192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801719a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801719c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	da0b      	bge.n	80171bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80171a4:	78fb      	ldrb	r3, [r7, #3]
 80171a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80171aa:	68f9      	ldr	r1, [r7, #12]
 80171ac:	4613      	mov	r3, r2
 80171ae:	00db      	lsls	r3, r3, #3
 80171b0:	4413      	add	r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	440b      	add	r3, r1
 80171b6:	333e      	adds	r3, #62	; 0x3e
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	e00b      	b.n	80171d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80171bc:	78fb      	ldrb	r3, [r7, #3]
 80171be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80171c2:	68f9      	ldr	r1, [r7, #12]
 80171c4:	4613      	mov	r3, r2
 80171c6:	00db      	lsls	r3, r3, #3
 80171c8:	4413      	add	r3, r2
 80171ca:	009b      	lsls	r3, r3, #2
 80171cc:	440b      	add	r3, r1
 80171ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80171d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	3714      	adds	r7, #20
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr

080171e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b084      	sub	sp, #16
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	460b      	mov	r3, r1
 80171ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171ec:	2300      	movs	r3, #0
 80171ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171f0:	2300      	movs	r3, #0
 80171f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80171fa:	78fa      	ldrb	r2, [r7, #3]
 80171fc:	4611      	mov	r1, r2
 80171fe:	4618      	mov	r0, r3
 8017200:	f7f1 ff10 	bl	8009024 <HAL_PCD_SetAddress>
 8017204:	4603      	mov	r3, r0
 8017206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017208:	7bfb      	ldrb	r3, [r7, #15]
 801720a:	4618      	mov	r0, r3
 801720c:	f000 f874 	bl	80172f8 <USBD_Get_USB_Status>
 8017210:	4603      	mov	r3, r0
 8017212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017214:	7bbb      	ldrb	r3, [r7, #14]
}
 8017216:	4618      	mov	r0, r3
 8017218:	3710      	adds	r7, #16
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}

0801721e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801721e:	b580      	push	{r7, lr}
 8017220:	b086      	sub	sp, #24
 8017222:	af00      	add	r7, sp, #0
 8017224:	60f8      	str	r0, [r7, #12]
 8017226:	607a      	str	r2, [r7, #4]
 8017228:	603b      	str	r3, [r7, #0]
 801722a:	460b      	mov	r3, r1
 801722c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801722e:	2300      	movs	r3, #0
 8017230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017232:	2300      	movs	r3, #0
 8017234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801723c:	7af9      	ldrb	r1, [r7, #11]
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	f7f2 f81a 	bl	800927a <HAL_PCD_EP_Transmit>
 8017246:	4603      	mov	r3, r0
 8017248:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801724a:	7dfb      	ldrb	r3, [r7, #23]
 801724c:	4618      	mov	r0, r3
 801724e:	f000 f853 	bl	80172f8 <USBD_Get_USB_Status>
 8017252:	4603      	mov	r3, r0
 8017254:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017256:	7dbb      	ldrb	r3, [r7, #22]
}
 8017258:	4618      	mov	r0, r3
 801725a:	3718      	adds	r7, #24
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}

08017260 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b086      	sub	sp, #24
 8017264:	af00      	add	r7, sp, #0
 8017266:	60f8      	str	r0, [r7, #12]
 8017268:	607a      	str	r2, [r7, #4]
 801726a:	603b      	str	r3, [r7, #0]
 801726c:	460b      	mov	r3, r1
 801726e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017270:	2300      	movs	r3, #0
 8017272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017274:	2300      	movs	r3, #0
 8017276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801727e:	7af9      	ldrb	r1, [r7, #11]
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	687a      	ldr	r2, [r7, #4]
 8017284:	f7f1 ffa5 	bl	80091d2 <HAL_PCD_EP_Receive>
 8017288:	4603      	mov	r3, r0
 801728a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801728c:	7dfb      	ldrb	r3, [r7, #23]
 801728e:	4618      	mov	r0, r3
 8017290:	f000 f832 	bl	80172f8 <USBD_Get_USB_Status>
 8017294:	4603      	mov	r3, r0
 8017296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017298:	7dbb      	ldrb	r3, [r7, #22]
}
 801729a:	4618      	mov	r0, r3
 801729c:	3718      	adds	r7, #24
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}

080172a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80172a2:	b580      	push	{r7, lr}
 80172a4:	b082      	sub	sp, #8
 80172a6:	af00      	add	r7, sp, #0
 80172a8:	6078      	str	r0, [r7, #4]
 80172aa:	460b      	mov	r3, r1
 80172ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80172b4:	78fa      	ldrb	r2, [r7, #3]
 80172b6:	4611      	mov	r1, r2
 80172b8:	4618      	mov	r0, r3
 80172ba:	f7f1 ffc6 	bl	800924a <HAL_PCD_EP_GetRxCount>
 80172be:	4603      	mov	r3, r0
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	3708      	adds	r7, #8
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80172c8:	b480      	push	{r7}
 80172ca:	b083      	sub	sp, #12
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80172d0:	4b03      	ldr	r3, [pc, #12]	; (80172e0 <USBD_static_malloc+0x18>)
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	370c      	adds	r7, #12
 80172d6:	46bd      	mov	sp, r7
 80172d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172dc:	4770      	bx	lr
 80172de:	bf00      	nop
 80172e0:	24002ff4 	.word	0x24002ff4

080172e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80172e4:	b480      	push	{r7}
 80172e6:	b083      	sub	sp, #12
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80172ec:	bf00      	nop
 80172ee:	370c      	adds	r7, #12
 80172f0:	46bd      	mov	sp, r7
 80172f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f6:	4770      	bx	lr

080172f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80172f8:	b480      	push	{r7}
 80172fa:	b085      	sub	sp, #20
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	4603      	mov	r3, r0
 8017300:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017302:	2300      	movs	r3, #0
 8017304:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017306:	79fb      	ldrb	r3, [r7, #7]
 8017308:	2b03      	cmp	r3, #3
 801730a:	d817      	bhi.n	801733c <USBD_Get_USB_Status+0x44>
 801730c:	a201      	add	r2, pc, #4	; (adr r2, 8017314 <USBD_Get_USB_Status+0x1c>)
 801730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017312:	bf00      	nop
 8017314:	08017325 	.word	0x08017325
 8017318:	0801732b 	.word	0x0801732b
 801731c:	08017331 	.word	0x08017331
 8017320:	08017337 	.word	0x08017337
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017324:	2300      	movs	r3, #0
 8017326:	73fb      	strb	r3, [r7, #15]
    break;
 8017328:	e00b      	b.n	8017342 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801732a:	2303      	movs	r3, #3
 801732c:	73fb      	strb	r3, [r7, #15]
    break;
 801732e:	e008      	b.n	8017342 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017330:	2301      	movs	r3, #1
 8017332:	73fb      	strb	r3, [r7, #15]
    break;
 8017334:	e005      	b.n	8017342 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017336:	2303      	movs	r3, #3
 8017338:	73fb      	strb	r3, [r7, #15]
    break;
 801733a:	e002      	b.n	8017342 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801733c:	2303      	movs	r3, #3
 801733e:	73fb      	strb	r3, [r7, #15]
    break;
 8017340:	bf00      	nop
  }
  return usb_status;
 8017342:	7bfb      	ldrb	r3, [r7, #15]
}
 8017344:	4618      	mov	r0, r3
 8017346:	3714      	adds	r7, #20
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr

08017350 <siprintf>:
 8017350:	b40e      	push	{r1, r2, r3}
 8017352:	b500      	push	{lr}
 8017354:	b09c      	sub	sp, #112	; 0x70
 8017356:	ab1d      	add	r3, sp, #116	; 0x74
 8017358:	9002      	str	r0, [sp, #8]
 801735a:	9006      	str	r0, [sp, #24]
 801735c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017360:	4809      	ldr	r0, [pc, #36]	; (8017388 <siprintf+0x38>)
 8017362:	9107      	str	r1, [sp, #28]
 8017364:	9104      	str	r1, [sp, #16]
 8017366:	4909      	ldr	r1, [pc, #36]	; (801738c <siprintf+0x3c>)
 8017368:	f853 2b04 	ldr.w	r2, [r3], #4
 801736c:	9105      	str	r1, [sp, #20]
 801736e:	6800      	ldr	r0, [r0, #0]
 8017370:	9301      	str	r3, [sp, #4]
 8017372:	a902      	add	r1, sp, #8
 8017374:	f000 f9d6 	bl	8017724 <_svfiprintf_r>
 8017378:	9b02      	ldr	r3, [sp, #8]
 801737a:	2200      	movs	r2, #0
 801737c:	701a      	strb	r2, [r3, #0]
 801737e:	b01c      	add	sp, #112	; 0x70
 8017380:	f85d eb04 	ldr.w	lr, [sp], #4
 8017384:	b003      	add	sp, #12
 8017386:	4770      	bx	lr
 8017388:	24000150 	.word	0x24000150
 801738c:	ffff0208 	.word	0xffff0208

08017390 <siscanf>:
 8017390:	b40e      	push	{r1, r2, r3}
 8017392:	b510      	push	{r4, lr}
 8017394:	b09f      	sub	sp, #124	; 0x7c
 8017396:	ac21      	add	r4, sp, #132	; 0x84
 8017398:	f44f 7101 	mov.w	r1, #516	; 0x204
 801739c:	f854 2b04 	ldr.w	r2, [r4], #4
 80173a0:	9201      	str	r2, [sp, #4]
 80173a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80173a6:	9004      	str	r0, [sp, #16]
 80173a8:	9008      	str	r0, [sp, #32]
 80173aa:	f7e8 ffbb 	bl	8000324 <strlen>
 80173ae:	4b0c      	ldr	r3, [pc, #48]	; (80173e0 <siscanf+0x50>)
 80173b0:	9005      	str	r0, [sp, #20]
 80173b2:	9009      	str	r0, [sp, #36]	; 0x24
 80173b4:	930d      	str	r3, [sp, #52]	; 0x34
 80173b6:	480b      	ldr	r0, [pc, #44]	; (80173e4 <siscanf+0x54>)
 80173b8:	9a01      	ldr	r2, [sp, #4]
 80173ba:	6800      	ldr	r0, [r0, #0]
 80173bc:	9403      	str	r4, [sp, #12]
 80173be:	2300      	movs	r3, #0
 80173c0:	9311      	str	r3, [sp, #68]	; 0x44
 80173c2:	9316      	str	r3, [sp, #88]	; 0x58
 80173c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80173cc:	a904      	add	r1, sp, #16
 80173ce:	4623      	mov	r3, r4
 80173d0:	f000 fb00 	bl	80179d4 <__ssvfiscanf_r>
 80173d4:	b01f      	add	sp, #124	; 0x7c
 80173d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173da:	b003      	add	sp, #12
 80173dc:	4770      	bx	lr
 80173de:	bf00      	nop
 80173e0:	080173e9 	.word	0x080173e9
 80173e4:	24000150 	.word	0x24000150

080173e8 <__seofread>:
 80173e8:	2000      	movs	r0, #0
 80173ea:	4770      	bx	lr

080173ec <memset>:
 80173ec:	4402      	add	r2, r0
 80173ee:	4603      	mov	r3, r0
 80173f0:	4293      	cmp	r3, r2
 80173f2:	d100      	bne.n	80173f6 <memset+0xa>
 80173f4:	4770      	bx	lr
 80173f6:	f803 1b01 	strb.w	r1, [r3], #1
 80173fa:	e7f9      	b.n	80173f0 <memset+0x4>

080173fc <__errno>:
 80173fc:	4b01      	ldr	r3, [pc, #4]	; (8017404 <__errno+0x8>)
 80173fe:	6818      	ldr	r0, [r3, #0]
 8017400:	4770      	bx	lr
 8017402:	bf00      	nop
 8017404:	24000150 	.word	0x24000150

08017408 <__libc_init_array>:
 8017408:	b570      	push	{r4, r5, r6, lr}
 801740a:	4d0d      	ldr	r5, [pc, #52]	; (8017440 <__libc_init_array+0x38>)
 801740c:	4c0d      	ldr	r4, [pc, #52]	; (8017444 <__libc_init_array+0x3c>)
 801740e:	1b64      	subs	r4, r4, r5
 8017410:	10a4      	asrs	r4, r4, #2
 8017412:	2600      	movs	r6, #0
 8017414:	42a6      	cmp	r6, r4
 8017416:	d109      	bne.n	801742c <__libc_init_array+0x24>
 8017418:	4d0b      	ldr	r5, [pc, #44]	; (8017448 <__libc_init_array+0x40>)
 801741a:	4c0c      	ldr	r4, [pc, #48]	; (801744c <__libc_init_array+0x44>)
 801741c:	f001 f8fe 	bl	801861c <_init>
 8017420:	1b64      	subs	r4, r4, r5
 8017422:	10a4      	asrs	r4, r4, #2
 8017424:	2600      	movs	r6, #0
 8017426:	42a6      	cmp	r6, r4
 8017428:	d105      	bne.n	8017436 <__libc_init_array+0x2e>
 801742a:	bd70      	pop	{r4, r5, r6, pc}
 801742c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017430:	4798      	blx	r3
 8017432:	3601      	adds	r6, #1
 8017434:	e7ee      	b.n	8017414 <__libc_init_array+0xc>
 8017436:	f855 3b04 	ldr.w	r3, [r5], #4
 801743a:	4798      	blx	r3
 801743c:	3601      	adds	r6, #1
 801743e:	e7f2      	b.n	8017426 <__libc_init_array+0x1e>
 8017440:	08018a24 	.word	0x08018a24
 8017444:	08018a24 	.word	0x08018a24
 8017448:	08018a24 	.word	0x08018a24
 801744c:	08018a28 	.word	0x08018a28

08017450 <__retarget_lock_acquire_recursive>:
 8017450:	4770      	bx	lr

08017452 <__retarget_lock_release_recursive>:
 8017452:	4770      	bx	lr

08017454 <strcpy>:
 8017454:	4603      	mov	r3, r0
 8017456:	f811 2b01 	ldrb.w	r2, [r1], #1
 801745a:	f803 2b01 	strb.w	r2, [r3], #1
 801745e:	2a00      	cmp	r2, #0
 8017460:	d1f9      	bne.n	8017456 <strcpy+0x2>
 8017462:	4770      	bx	lr

08017464 <memcpy>:
 8017464:	440a      	add	r2, r1
 8017466:	4291      	cmp	r1, r2
 8017468:	f100 33ff 	add.w	r3, r0, #4294967295
 801746c:	d100      	bne.n	8017470 <memcpy+0xc>
 801746e:	4770      	bx	lr
 8017470:	b510      	push	{r4, lr}
 8017472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017476:	f803 4f01 	strb.w	r4, [r3, #1]!
 801747a:	4291      	cmp	r1, r2
 801747c:	d1f9      	bne.n	8017472 <memcpy+0xe>
 801747e:	bd10      	pop	{r4, pc}

08017480 <_free_r>:
 8017480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017482:	2900      	cmp	r1, #0
 8017484:	d044      	beq.n	8017510 <_free_r+0x90>
 8017486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801748a:	9001      	str	r0, [sp, #4]
 801748c:	2b00      	cmp	r3, #0
 801748e:	f1a1 0404 	sub.w	r4, r1, #4
 8017492:	bfb8      	it	lt
 8017494:	18e4      	addlt	r4, r4, r3
 8017496:	f000 f8df 	bl	8017658 <__malloc_lock>
 801749a:	4a1e      	ldr	r2, [pc, #120]	; (8017514 <_free_r+0x94>)
 801749c:	9801      	ldr	r0, [sp, #4]
 801749e:	6813      	ldr	r3, [r2, #0]
 80174a0:	b933      	cbnz	r3, 80174b0 <_free_r+0x30>
 80174a2:	6063      	str	r3, [r4, #4]
 80174a4:	6014      	str	r4, [r2, #0]
 80174a6:	b003      	add	sp, #12
 80174a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174ac:	f000 b8da 	b.w	8017664 <__malloc_unlock>
 80174b0:	42a3      	cmp	r3, r4
 80174b2:	d908      	bls.n	80174c6 <_free_r+0x46>
 80174b4:	6825      	ldr	r5, [r4, #0]
 80174b6:	1961      	adds	r1, r4, r5
 80174b8:	428b      	cmp	r3, r1
 80174ba:	bf01      	itttt	eq
 80174bc:	6819      	ldreq	r1, [r3, #0]
 80174be:	685b      	ldreq	r3, [r3, #4]
 80174c0:	1949      	addeq	r1, r1, r5
 80174c2:	6021      	streq	r1, [r4, #0]
 80174c4:	e7ed      	b.n	80174a2 <_free_r+0x22>
 80174c6:	461a      	mov	r2, r3
 80174c8:	685b      	ldr	r3, [r3, #4]
 80174ca:	b10b      	cbz	r3, 80174d0 <_free_r+0x50>
 80174cc:	42a3      	cmp	r3, r4
 80174ce:	d9fa      	bls.n	80174c6 <_free_r+0x46>
 80174d0:	6811      	ldr	r1, [r2, #0]
 80174d2:	1855      	adds	r5, r2, r1
 80174d4:	42a5      	cmp	r5, r4
 80174d6:	d10b      	bne.n	80174f0 <_free_r+0x70>
 80174d8:	6824      	ldr	r4, [r4, #0]
 80174da:	4421      	add	r1, r4
 80174dc:	1854      	adds	r4, r2, r1
 80174de:	42a3      	cmp	r3, r4
 80174e0:	6011      	str	r1, [r2, #0]
 80174e2:	d1e0      	bne.n	80174a6 <_free_r+0x26>
 80174e4:	681c      	ldr	r4, [r3, #0]
 80174e6:	685b      	ldr	r3, [r3, #4]
 80174e8:	6053      	str	r3, [r2, #4]
 80174ea:	440c      	add	r4, r1
 80174ec:	6014      	str	r4, [r2, #0]
 80174ee:	e7da      	b.n	80174a6 <_free_r+0x26>
 80174f0:	d902      	bls.n	80174f8 <_free_r+0x78>
 80174f2:	230c      	movs	r3, #12
 80174f4:	6003      	str	r3, [r0, #0]
 80174f6:	e7d6      	b.n	80174a6 <_free_r+0x26>
 80174f8:	6825      	ldr	r5, [r4, #0]
 80174fa:	1961      	adds	r1, r4, r5
 80174fc:	428b      	cmp	r3, r1
 80174fe:	bf04      	itt	eq
 8017500:	6819      	ldreq	r1, [r3, #0]
 8017502:	685b      	ldreq	r3, [r3, #4]
 8017504:	6063      	str	r3, [r4, #4]
 8017506:	bf04      	itt	eq
 8017508:	1949      	addeq	r1, r1, r5
 801750a:	6021      	streq	r1, [r4, #0]
 801750c:	6054      	str	r4, [r2, #4]
 801750e:	e7ca      	b.n	80174a6 <_free_r+0x26>
 8017510:	b003      	add	sp, #12
 8017512:	bd30      	pop	{r4, r5, pc}
 8017514:	24003354 	.word	0x24003354

08017518 <sbrk_aligned>:
 8017518:	b570      	push	{r4, r5, r6, lr}
 801751a:	4e0e      	ldr	r6, [pc, #56]	; (8017554 <sbrk_aligned+0x3c>)
 801751c:	460c      	mov	r4, r1
 801751e:	6831      	ldr	r1, [r6, #0]
 8017520:	4605      	mov	r5, r0
 8017522:	b911      	cbnz	r1, 801752a <sbrk_aligned+0x12>
 8017524:	f000 ff3a 	bl	801839c <_sbrk_r>
 8017528:	6030      	str	r0, [r6, #0]
 801752a:	4621      	mov	r1, r4
 801752c:	4628      	mov	r0, r5
 801752e:	f000 ff35 	bl	801839c <_sbrk_r>
 8017532:	1c43      	adds	r3, r0, #1
 8017534:	d00a      	beq.n	801754c <sbrk_aligned+0x34>
 8017536:	1cc4      	adds	r4, r0, #3
 8017538:	f024 0403 	bic.w	r4, r4, #3
 801753c:	42a0      	cmp	r0, r4
 801753e:	d007      	beq.n	8017550 <sbrk_aligned+0x38>
 8017540:	1a21      	subs	r1, r4, r0
 8017542:	4628      	mov	r0, r5
 8017544:	f000 ff2a 	bl	801839c <_sbrk_r>
 8017548:	3001      	adds	r0, #1
 801754a:	d101      	bne.n	8017550 <sbrk_aligned+0x38>
 801754c:	f04f 34ff 	mov.w	r4, #4294967295
 8017550:	4620      	mov	r0, r4
 8017552:	bd70      	pop	{r4, r5, r6, pc}
 8017554:	24003358 	.word	0x24003358

08017558 <_malloc_r>:
 8017558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801755c:	1ccd      	adds	r5, r1, #3
 801755e:	f025 0503 	bic.w	r5, r5, #3
 8017562:	3508      	adds	r5, #8
 8017564:	2d0c      	cmp	r5, #12
 8017566:	bf38      	it	cc
 8017568:	250c      	movcc	r5, #12
 801756a:	2d00      	cmp	r5, #0
 801756c:	4607      	mov	r7, r0
 801756e:	db01      	blt.n	8017574 <_malloc_r+0x1c>
 8017570:	42a9      	cmp	r1, r5
 8017572:	d905      	bls.n	8017580 <_malloc_r+0x28>
 8017574:	230c      	movs	r3, #12
 8017576:	603b      	str	r3, [r7, #0]
 8017578:	2600      	movs	r6, #0
 801757a:	4630      	mov	r0, r6
 801757c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017580:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017654 <_malloc_r+0xfc>
 8017584:	f000 f868 	bl	8017658 <__malloc_lock>
 8017588:	f8d8 3000 	ldr.w	r3, [r8]
 801758c:	461c      	mov	r4, r3
 801758e:	bb5c      	cbnz	r4, 80175e8 <_malloc_r+0x90>
 8017590:	4629      	mov	r1, r5
 8017592:	4638      	mov	r0, r7
 8017594:	f7ff ffc0 	bl	8017518 <sbrk_aligned>
 8017598:	1c43      	adds	r3, r0, #1
 801759a:	4604      	mov	r4, r0
 801759c:	d155      	bne.n	801764a <_malloc_r+0xf2>
 801759e:	f8d8 4000 	ldr.w	r4, [r8]
 80175a2:	4626      	mov	r6, r4
 80175a4:	2e00      	cmp	r6, #0
 80175a6:	d145      	bne.n	8017634 <_malloc_r+0xdc>
 80175a8:	2c00      	cmp	r4, #0
 80175aa:	d048      	beq.n	801763e <_malloc_r+0xe6>
 80175ac:	6823      	ldr	r3, [r4, #0]
 80175ae:	4631      	mov	r1, r6
 80175b0:	4638      	mov	r0, r7
 80175b2:	eb04 0903 	add.w	r9, r4, r3
 80175b6:	f000 fef1 	bl	801839c <_sbrk_r>
 80175ba:	4581      	cmp	r9, r0
 80175bc:	d13f      	bne.n	801763e <_malloc_r+0xe6>
 80175be:	6821      	ldr	r1, [r4, #0]
 80175c0:	1a6d      	subs	r5, r5, r1
 80175c2:	4629      	mov	r1, r5
 80175c4:	4638      	mov	r0, r7
 80175c6:	f7ff ffa7 	bl	8017518 <sbrk_aligned>
 80175ca:	3001      	adds	r0, #1
 80175cc:	d037      	beq.n	801763e <_malloc_r+0xe6>
 80175ce:	6823      	ldr	r3, [r4, #0]
 80175d0:	442b      	add	r3, r5
 80175d2:	6023      	str	r3, [r4, #0]
 80175d4:	f8d8 3000 	ldr.w	r3, [r8]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d038      	beq.n	801764e <_malloc_r+0xf6>
 80175dc:	685a      	ldr	r2, [r3, #4]
 80175de:	42a2      	cmp	r2, r4
 80175e0:	d12b      	bne.n	801763a <_malloc_r+0xe2>
 80175e2:	2200      	movs	r2, #0
 80175e4:	605a      	str	r2, [r3, #4]
 80175e6:	e00f      	b.n	8017608 <_malloc_r+0xb0>
 80175e8:	6822      	ldr	r2, [r4, #0]
 80175ea:	1b52      	subs	r2, r2, r5
 80175ec:	d41f      	bmi.n	801762e <_malloc_r+0xd6>
 80175ee:	2a0b      	cmp	r2, #11
 80175f0:	d917      	bls.n	8017622 <_malloc_r+0xca>
 80175f2:	1961      	adds	r1, r4, r5
 80175f4:	42a3      	cmp	r3, r4
 80175f6:	6025      	str	r5, [r4, #0]
 80175f8:	bf18      	it	ne
 80175fa:	6059      	strne	r1, [r3, #4]
 80175fc:	6863      	ldr	r3, [r4, #4]
 80175fe:	bf08      	it	eq
 8017600:	f8c8 1000 	streq.w	r1, [r8]
 8017604:	5162      	str	r2, [r4, r5]
 8017606:	604b      	str	r3, [r1, #4]
 8017608:	4638      	mov	r0, r7
 801760a:	f104 060b 	add.w	r6, r4, #11
 801760e:	f000 f829 	bl	8017664 <__malloc_unlock>
 8017612:	f026 0607 	bic.w	r6, r6, #7
 8017616:	1d23      	adds	r3, r4, #4
 8017618:	1af2      	subs	r2, r6, r3
 801761a:	d0ae      	beq.n	801757a <_malloc_r+0x22>
 801761c:	1b9b      	subs	r3, r3, r6
 801761e:	50a3      	str	r3, [r4, r2]
 8017620:	e7ab      	b.n	801757a <_malloc_r+0x22>
 8017622:	42a3      	cmp	r3, r4
 8017624:	6862      	ldr	r2, [r4, #4]
 8017626:	d1dd      	bne.n	80175e4 <_malloc_r+0x8c>
 8017628:	f8c8 2000 	str.w	r2, [r8]
 801762c:	e7ec      	b.n	8017608 <_malloc_r+0xb0>
 801762e:	4623      	mov	r3, r4
 8017630:	6864      	ldr	r4, [r4, #4]
 8017632:	e7ac      	b.n	801758e <_malloc_r+0x36>
 8017634:	4634      	mov	r4, r6
 8017636:	6876      	ldr	r6, [r6, #4]
 8017638:	e7b4      	b.n	80175a4 <_malloc_r+0x4c>
 801763a:	4613      	mov	r3, r2
 801763c:	e7cc      	b.n	80175d8 <_malloc_r+0x80>
 801763e:	230c      	movs	r3, #12
 8017640:	603b      	str	r3, [r7, #0]
 8017642:	4638      	mov	r0, r7
 8017644:	f000 f80e 	bl	8017664 <__malloc_unlock>
 8017648:	e797      	b.n	801757a <_malloc_r+0x22>
 801764a:	6025      	str	r5, [r4, #0]
 801764c:	e7dc      	b.n	8017608 <_malloc_r+0xb0>
 801764e:	605b      	str	r3, [r3, #4]
 8017650:	deff      	udf	#255	; 0xff
 8017652:	bf00      	nop
 8017654:	24003354 	.word	0x24003354

08017658 <__malloc_lock>:
 8017658:	4801      	ldr	r0, [pc, #4]	; (8017660 <__malloc_lock+0x8>)
 801765a:	f7ff bef9 	b.w	8017450 <__retarget_lock_acquire_recursive>
 801765e:	bf00      	nop
 8017660:	24003350 	.word	0x24003350

08017664 <__malloc_unlock>:
 8017664:	4801      	ldr	r0, [pc, #4]	; (801766c <__malloc_unlock+0x8>)
 8017666:	f7ff bef4 	b.w	8017452 <__retarget_lock_release_recursive>
 801766a:	bf00      	nop
 801766c:	24003350 	.word	0x24003350

08017670 <__ssputs_r>:
 8017670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017674:	688e      	ldr	r6, [r1, #8]
 8017676:	461f      	mov	r7, r3
 8017678:	42be      	cmp	r6, r7
 801767a:	680b      	ldr	r3, [r1, #0]
 801767c:	4682      	mov	sl, r0
 801767e:	460c      	mov	r4, r1
 8017680:	4690      	mov	r8, r2
 8017682:	d82c      	bhi.n	80176de <__ssputs_r+0x6e>
 8017684:	898a      	ldrh	r2, [r1, #12]
 8017686:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801768a:	d026      	beq.n	80176da <__ssputs_r+0x6a>
 801768c:	6965      	ldr	r5, [r4, #20]
 801768e:	6909      	ldr	r1, [r1, #16]
 8017690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017694:	eba3 0901 	sub.w	r9, r3, r1
 8017698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801769c:	1c7b      	adds	r3, r7, #1
 801769e:	444b      	add	r3, r9
 80176a0:	106d      	asrs	r5, r5, #1
 80176a2:	429d      	cmp	r5, r3
 80176a4:	bf38      	it	cc
 80176a6:	461d      	movcc	r5, r3
 80176a8:	0553      	lsls	r3, r2, #21
 80176aa:	d527      	bpl.n	80176fc <__ssputs_r+0x8c>
 80176ac:	4629      	mov	r1, r5
 80176ae:	f7ff ff53 	bl	8017558 <_malloc_r>
 80176b2:	4606      	mov	r6, r0
 80176b4:	b360      	cbz	r0, 8017710 <__ssputs_r+0xa0>
 80176b6:	6921      	ldr	r1, [r4, #16]
 80176b8:	464a      	mov	r2, r9
 80176ba:	f7ff fed3 	bl	8017464 <memcpy>
 80176be:	89a3      	ldrh	r3, [r4, #12]
 80176c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80176c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176c8:	81a3      	strh	r3, [r4, #12]
 80176ca:	6126      	str	r6, [r4, #16]
 80176cc:	6165      	str	r5, [r4, #20]
 80176ce:	444e      	add	r6, r9
 80176d0:	eba5 0509 	sub.w	r5, r5, r9
 80176d4:	6026      	str	r6, [r4, #0]
 80176d6:	60a5      	str	r5, [r4, #8]
 80176d8:	463e      	mov	r6, r7
 80176da:	42be      	cmp	r6, r7
 80176dc:	d900      	bls.n	80176e0 <__ssputs_r+0x70>
 80176de:	463e      	mov	r6, r7
 80176e0:	6820      	ldr	r0, [r4, #0]
 80176e2:	4632      	mov	r2, r6
 80176e4:	4641      	mov	r1, r8
 80176e6:	f000 fe3e 	bl	8018366 <memmove>
 80176ea:	68a3      	ldr	r3, [r4, #8]
 80176ec:	1b9b      	subs	r3, r3, r6
 80176ee:	60a3      	str	r3, [r4, #8]
 80176f0:	6823      	ldr	r3, [r4, #0]
 80176f2:	4433      	add	r3, r6
 80176f4:	6023      	str	r3, [r4, #0]
 80176f6:	2000      	movs	r0, #0
 80176f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176fc:	462a      	mov	r2, r5
 80176fe:	f000 fe5d 	bl	80183bc <_realloc_r>
 8017702:	4606      	mov	r6, r0
 8017704:	2800      	cmp	r0, #0
 8017706:	d1e0      	bne.n	80176ca <__ssputs_r+0x5a>
 8017708:	6921      	ldr	r1, [r4, #16]
 801770a:	4650      	mov	r0, sl
 801770c:	f7ff feb8 	bl	8017480 <_free_r>
 8017710:	230c      	movs	r3, #12
 8017712:	f8ca 3000 	str.w	r3, [sl]
 8017716:	89a3      	ldrh	r3, [r4, #12]
 8017718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801771c:	81a3      	strh	r3, [r4, #12]
 801771e:	f04f 30ff 	mov.w	r0, #4294967295
 8017722:	e7e9      	b.n	80176f8 <__ssputs_r+0x88>

08017724 <_svfiprintf_r>:
 8017724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017728:	4698      	mov	r8, r3
 801772a:	898b      	ldrh	r3, [r1, #12]
 801772c:	061b      	lsls	r3, r3, #24
 801772e:	b09d      	sub	sp, #116	; 0x74
 8017730:	4607      	mov	r7, r0
 8017732:	460d      	mov	r5, r1
 8017734:	4614      	mov	r4, r2
 8017736:	d50e      	bpl.n	8017756 <_svfiprintf_r+0x32>
 8017738:	690b      	ldr	r3, [r1, #16]
 801773a:	b963      	cbnz	r3, 8017756 <_svfiprintf_r+0x32>
 801773c:	2140      	movs	r1, #64	; 0x40
 801773e:	f7ff ff0b 	bl	8017558 <_malloc_r>
 8017742:	6028      	str	r0, [r5, #0]
 8017744:	6128      	str	r0, [r5, #16]
 8017746:	b920      	cbnz	r0, 8017752 <_svfiprintf_r+0x2e>
 8017748:	230c      	movs	r3, #12
 801774a:	603b      	str	r3, [r7, #0]
 801774c:	f04f 30ff 	mov.w	r0, #4294967295
 8017750:	e0d0      	b.n	80178f4 <_svfiprintf_r+0x1d0>
 8017752:	2340      	movs	r3, #64	; 0x40
 8017754:	616b      	str	r3, [r5, #20]
 8017756:	2300      	movs	r3, #0
 8017758:	9309      	str	r3, [sp, #36]	; 0x24
 801775a:	2320      	movs	r3, #32
 801775c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017760:	f8cd 800c 	str.w	r8, [sp, #12]
 8017764:	2330      	movs	r3, #48	; 0x30
 8017766:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801790c <_svfiprintf_r+0x1e8>
 801776a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801776e:	f04f 0901 	mov.w	r9, #1
 8017772:	4623      	mov	r3, r4
 8017774:	469a      	mov	sl, r3
 8017776:	f813 2b01 	ldrb.w	r2, [r3], #1
 801777a:	b10a      	cbz	r2, 8017780 <_svfiprintf_r+0x5c>
 801777c:	2a25      	cmp	r2, #37	; 0x25
 801777e:	d1f9      	bne.n	8017774 <_svfiprintf_r+0x50>
 8017780:	ebba 0b04 	subs.w	fp, sl, r4
 8017784:	d00b      	beq.n	801779e <_svfiprintf_r+0x7a>
 8017786:	465b      	mov	r3, fp
 8017788:	4622      	mov	r2, r4
 801778a:	4629      	mov	r1, r5
 801778c:	4638      	mov	r0, r7
 801778e:	f7ff ff6f 	bl	8017670 <__ssputs_r>
 8017792:	3001      	adds	r0, #1
 8017794:	f000 80a9 	beq.w	80178ea <_svfiprintf_r+0x1c6>
 8017798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801779a:	445a      	add	r2, fp
 801779c:	9209      	str	r2, [sp, #36]	; 0x24
 801779e:	f89a 3000 	ldrb.w	r3, [sl]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	f000 80a1 	beq.w	80178ea <_svfiprintf_r+0x1c6>
 80177a8:	2300      	movs	r3, #0
 80177aa:	f04f 32ff 	mov.w	r2, #4294967295
 80177ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177b2:	f10a 0a01 	add.w	sl, sl, #1
 80177b6:	9304      	str	r3, [sp, #16]
 80177b8:	9307      	str	r3, [sp, #28]
 80177ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177be:	931a      	str	r3, [sp, #104]	; 0x68
 80177c0:	4654      	mov	r4, sl
 80177c2:	2205      	movs	r2, #5
 80177c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177c8:	4850      	ldr	r0, [pc, #320]	; (801790c <_svfiprintf_r+0x1e8>)
 80177ca:	f7e8 fdb9 	bl	8000340 <memchr>
 80177ce:	9a04      	ldr	r2, [sp, #16]
 80177d0:	b9d8      	cbnz	r0, 801780a <_svfiprintf_r+0xe6>
 80177d2:	06d0      	lsls	r0, r2, #27
 80177d4:	bf44      	itt	mi
 80177d6:	2320      	movmi	r3, #32
 80177d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177dc:	0711      	lsls	r1, r2, #28
 80177de:	bf44      	itt	mi
 80177e0:	232b      	movmi	r3, #43	; 0x2b
 80177e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177e6:	f89a 3000 	ldrb.w	r3, [sl]
 80177ea:	2b2a      	cmp	r3, #42	; 0x2a
 80177ec:	d015      	beq.n	801781a <_svfiprintf_r+0xf6>
 80177ee:	9a07      	ldr	r2, [sp, #28]
 80177f0:	4654      	mov	r4, sl
 80177f2:	2000      	movs	r0, #0
 80177f4:	f04f 0c0a 	mov.w	ip, #10
 80177f8:	4621      	mov	r1, r4
 80177fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177fe:	3b30      	subs	r3, #48	; 0x30
 8017800:	2b09      	cmp	r3, #9
 8017802:	d94d      	bls.n	80178a0 <_svfiprintf_r+0x17c>
 8017804:	b1b0      	cbz	r0, 8017834 <_svfiprintf_r+0x110>
 8017806:	9207      	str	r2, [sp, #28]
 8017808:	e014      	b.n	8017834 <_svfiprintf_r+0x110>
 801780a:	eba0 0308 	sub.w	r3, r0, r8
 801780e:	fa09 f303 	lsl.w	r3, r9, r3
 8017812:	4313      	orrs	r3, r2
 8017814:	9304      	str	r3, [sp, #16]
 8017816:	46a2      	mov	sl, r4
 8017818:	e7d2      	b.n	80177c0 <_svfiprintf_r+0x9c>
 801781a:	9b03      	ldr	r3, [sp, #12]
 801781c:	1d19      	adds	r1, r3, #4
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	9103      	str	r1, [sp, #12]
 8017822:	2b00      	cmp	r3, #0
 8017824:	bfbb      	ittet	lt
 8017826:	425b      	neglt	r3, r3
 8017828:	f042 0202 	orrlt.w	r2, r2, #2
 801782c:	9307      	strge	r3, [sp, #28]
 801782e:	9307      	strlt	r3, [sp, #28]
 8017830:	bfb8      	it	lt
 8017832:	9204      	strlt	r2, [sp, #16]
 8017834:	7823      	ldrb	r3, [r4, #0]
 8017836:	2b2e      	cmp	r3, #46	; 0x2e
 8017838:	d10c      	bne.n	8017854 <_svfiprintf_r+0x130>
 801783a:	7863      	ldrb	r3, [r4, #1]
 801783c:	2b2a      	cmp	r3, #42	; 0x2a
 801783e:	d134      	bne.n	80178aa <_svfiprintf_r+0x186>
 8017840:	9b03      	ldr	r3, [sp, #12]
 8017842:	1d1a      	adds	r2, r3, #4
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	9203      	str	r2, [sp, #12]
 8017848:	2b00      	cmp	r3, #0
 801784a:	bfb8      	it	lt
 801784c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017850:	3402      	adds	r4, #2
 8017852:	9305      	str	r3, [sp, #20]
 8017854:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801791c <_svfiprintf_r+0x1f8>
 8017858:	7821      	ldrb	r1, [r4, #0]
 801785a:	2203      	movs	r2, #3
 801785c:	4650      	mov	r0, sl
 801785e:	f7e8 fd6f 	bl	8000340 <memchr>
 8017862:	b138      	cbz	r0, 8017874 <_svfiprintf_r+0x150>
 8017864:	9b04      	ldr	r3, [sp, #16]
 8017866:	eba0 000a 	sub.w	r0, r0, sl
 801786a:	2240      	movs	r2, #64	; 0x40
 801786c:	4082      	lsls	r2, r0
 801786e:	4313      	orrs	r3, r2
 8017870:	3401      	adds	r4, #1
 8017872:	9304      	str	r3, [sp, #16]
 8017874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017878:	4825      	ldr	r0, [pc, #148]	; (8017910 <_svfiprintf_r+0x1ec>)
 801787a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801787e:	2206      	movs	r2, #6
 8017880:	f7e8 fd5e 	bl	8000340 <memchr>
 8017884:	2800      	cmp	r0, #0
 8017886:	d038      	beq.n	80178fa <_svfiprintf_r+0x1d6>
 8017888:	4b22      	ldr	r3, [pc, #136]	; (8017914 <_svfiprintf_r+0x1f0>)
 801788a:	bb1b      	cbnz	r3, 80178d4 <_svfiprintf_r+0x1b0>
 801788c:	9b03      	ldr	r3, [sp, #12]
 801788e:	3307      	adds	r3, #7
 8017890:	f023 0307 	bic.w	r3, r3, #7
 8017894:	3308      	adds	r3, #8
 8017896:	9303      	str	r3, [sp, #12]
 8017898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801789a:	4433      	add	r3, r6
 801789c:	9309      	str	r3, [sp, #36]	; 0x24
 801789e:	e768      	b.n	8017772 <_svfiprintf_r+0x4e>
 80178a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80178a4:	460c      	mov	r4, r1
 80178a6:	2001      	movs	r0, #1
 80178a8:	e7a6      	b.n	80177f8 <_svfiprintf_r+0xd4>
 80178aa:	2300      	movs	r3, #0
 80178ac:	3401      	adds	r4, #1
 80178ae:	9305      	str	r3, [sp, #20]
 80178b0:	4619      	mov	r1, r3
 80178b2:	f04f 0c0a 	mov.w	ip, #10
 80178b6:	4620      	mov	r0, r4
 80178b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178bc:	3a30      	subs	r2, #48	; 0x30
 80178be:	2a09      	cmp	r2, #9
 80178c0:	d903      	bls.n	80178ca <_svfiprintf_r+0x1a6>
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d0c6      	beq.n	8017854 <_svfiprintf_r+0x130>
 80178c6:	9105      	str	r1, [sp, #20]
 80178c8:	e7c4      	b.n	8017854 <_svfiprintf_r+0x130>
 80178ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80178ce:	4604      	mov	r4, r0
 80178d0:	2301      	movs	r3, #1
 80178d2:	e7f0      	b.n	80178b6 <_svfiprintf_r+0x192>
 80178d4:	ab03      	add	r3, sp, #12
 80178d6:	9300      	str	r3, [sp, #0]
 80178d8:	462a      	mov	r2, r5
 80178da:	4b0f      	ldr	r3, [pc, #60]	; (8017918 <_svfiprintf_r+0x1f4>)
 80178dc:	a904      	add	r1, sp, #16
 80178de:	4638      	mov	r0, r7
 80178e0:	f3af 8000 	nop.w
 80178e4:	1c42      	adds	r2, r0, #1
 80178e6:	4606      	mov	r6, r0
 80178e8:	d1d6      	bne.n	8017898 <_svfiprintf_r+0x174>
 80178ea:	89ab      	ldrh	r3, [r5, #12]
 80178ec:	065b      	lsls	r3, r3, #25
 80178ee:	f53f af2d 	bmi.w	801774c <_svfiprintf_r+0x28>
 80178f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178f4:	b01d      	add	sp, #116	; 0x74
 80178f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fa:	ab03      	add	r3, sp, #12
 80178fc:	9300      	str	r3, [sp, #0]
 80178fe:	462a      	mov	r2, r5
 8017900:	4b05      	ldr	r3, [pc, #20]	; (8017918 <_svfiprintf_r+0x1f4>)
 8017902:	a904      	add	r1, sp, #16
 8017904:	4638      	mov	r0, r7
 8017906:	f000 fa4b 	bl	8017da0 <_printf_i>
 801790a:	e7eb      	b.n	80178e4 <_svfiprintf_r+0x1c0>
 801790c:	080188cc 	.word	0x080188cc
 8017910:	080188d6 	.word	0x080188d6
 8017914:	00000000 	.word	0x00000000
 8017918:	08017671 	.word	0x08017671
 801791c:	080188d2 	.word	0x080188d2

08017920 <_sungetc_r>:
 8017920:	b538      	push	{r3, r4, r5, lr}
 8017922:	1c4b      	adds	r3, r1, #1
 8017924:	4614      	mov	r4, r2
 8017926:	d103      	bne.n	8017930 <_sungetc_r+0x10>
 8017928:	f04f 35ff 	mov.w	r5, #4294967295
 801792c:	4628      	mov	r0, r5
 801792e:	bd38      	pop	{r3, r4, r5, pc}
 8017930:	8993      	ldrh	r3, [r2, #12]
 8017932:	f023 0320 	bic.w	r3, r3, #32
 8017936:	8193      	strh	r3, [r2, #12]
 8017938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801793a:	6852      	ldr	r2, [r2, #4]
 801793c:	b2cd      	uxtb	r5, r1
 801793e:	b18b      	cbz	r3, 8017964 <_sungetc_r+0x44>
 8017940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017942:	4293      	cmp	r3, r2
 8017944:	dd08      	ble.n	8017958 <_sungetc_r+0x38>
 8017946:	6823      	ldr	r3, [r4, #0]
 8017948:	1e5a      	subs	r2, r3, #1
 801794a:	6022      	str	r2, [r4, #0]
 801794c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017950:	6863      	ldr	r3, [r4, #4]
 8017952:	3301      	adds	r3, #1
 8017954:	6063      	str	r3, [r4, #4]
 8017956:	e7e9      	b.n	801792c <_sungetc_r+0xc>
 8017958:	4621      	mov	r1, r4
 801795a:	f000 fcca 	bl	80182f2 <__submore>
 801795e:	2800      	cmp	r0, #0
 8017960:	d0f1      	beq.n	8017946 <_sungetc_r+0x26>
 8017962:	e7e1      	b.n	8017928 <_sungetc_r+0x8>
 8017964:	6921      	ldr	r1, [r4, #16]
 8017966:	6823      	ldr	r3, [r4, #0]
 8017968:	b151      	cbz	r1, 8017980 <_sungetc_r+0x60>
 801796a:	4299      	cmp	r1, r3
 801796c:	d208      	bcs.n	8017980 <_sungetc_r+0x60>
 801796e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017972:	42a9      	cmp	r1, r5
 8017974:	d104      	bne.n	8017980 <_sungetc_r+0x60>
 8017976:	3b01      	subs	r3, #1
 8017978:	3201      	adds	r2, #1
 801797a:	6023      	str	r3, [r4, #0]
 801797c:	6062      	str	r2, [r4, #4]
 801797e:	e7d5      	b.n	801792c <_sungetc_r+0xc>
 8017980:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017988:	6363      	str	r3, [r4, #52]	; 0x34
 801798a:	2303      	movs	r3, #3
 801798c:	63a3      	str	r3, [r4, #56]	; 0x38
 801798e:	4623      	mov	r3, r4
 8017990:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017994:	6023      	str	r3, [r4, #0]
 8017996:	2301      	movs	r3, #1
 8017998:	e7dc      	b.n	8017954 <_sungetc_r+0x34>

0801799a <__ssrefill_r>:
 801799a:	b510      	push	{r4, lr}
 801799c:	460c      	mov	r4, r1
 801799e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80179a0:	b169      	cbz	r1, 80179be <__ssrefill_r+0x24>
 80179a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179a6:	4299      	cmp	r1, r3
 80179a8:	d001      	beq.n	80179ae <__ssrefill_r+0x14>
 80179aa:	f7ff fd69 	bl	8017480 <_free_r>
 80179ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80179b0:	6063      	str	r3, [r4, #4]
 80179b2:	2000      	movs	r0, #0
 80179b4:	6360      	str	r0, [r4, #52]	; 0x34
 80179b6:	b113      	cbz	r3, 80179be <__ssrefill_r+0x24>
 80179b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80179ba:	6023      	str	r3, [r4, #0]
 80179bc:	bd10      	pop	{r4, pc}
 80179be:	6923      	ldr	r3, [r4, #16]
 80179c0:	6023      	str	r3, [r4, #0]
 80179c2:	2300      	movs	r3, #0
 80179c4:	6063      	str	r3, [r4, #4]
 80179c6:	89a3      	ldrh	r3, [r4, #12]
 80179c8:	f043 0320 	orr.w	r3, r3, #32
 80179cc:	81a3      	strh	r3, [r4, #12]
 80179ce:	f04f 30ff 	mov.w	r0, #4294967295
 80179d2:	e7f3      	b.n	80179bc <__ssrefill_r+0x22>

080179d4 <__ssvfiscanf_r>:
 80179d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179d8:	460c      	mov	r4, r1
 80179da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80179de:	2100      	movs	r1, #0
 80179e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80179e4:	49a6      	ldr	r1, [pc, #664]	; (8017c80 <__ssvfiscanf_r+0x2ac>)
 80179e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80179e8:	f10d 0804 	add.w	r8, sp, #4
 80179ec:	49a5      	ldr	r1, [pc, #660]	; (8017c84 <__ssvfiscanf_r+0x2b0>)
 80179ee:	4fa6      	ldr	r7, [pc, #664]	; (8017c88 <__ssvfiscanf_r+0x2b4>)
 80179f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017c8c <__ssvfiscanf_r+0x2b8>
 80179f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80179f8:	4606      	mov	r6, r0
 80179fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80179fc:	9300      	str	r3, [sp, #0]
 80179fe:	7813      	ldrb	r3, [r2, #0]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	f000 815a 	beq.w	8017cba <__ssvfiscanf_r+0x2e6>
 8017a06:	5cf9      	ldrb	r1, [r7, r3]
 8017a08:	f011 0108 	ands.w	r1, r1, #8
 8017a0c:	f102 0501 	add.w	r5, r2, #1
 8017a10:	d019      	beq.n	8017a46 <__ssvfiscanf_r+0x72>
 8017a12:	6863      	ldr	r3, [r4, #4]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	dd0f      	ble.n	8017a38 <__ssvfiscanf_r+0x64>
 8017a18:	6823      	ldr	r3, [r4, #0]
 8017a1a:	781a      	ldrb	r2, [r3, #0]
 8017a1c:	5cba      	ldrb	r2, [r7, r2]
 8017a1e:	0712      	lsls	r2, r2, #28
 8017a20:	d401      	bmi.n	8017a26 <__ssvfiscanf_r+0x52>
 8017a22:	462a      	mov	r2, r5
 8017a24:	e7eb      	b.n	80179fe <__ssvfiscanf_r+0x2a>
 8017a26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017a28:	3201      	adds	r2, #1
 8017a2a:	9245      	str	r2, [sp, #276]	; 0x114
 8017a2c:	6862      	ldr	r2, [r4, #4]
 8017a2e:	3301      	adds	r3, #1
 8017a30:	3a01      	subs	r2, #1
 8017a32:	6062      	str	r2, [r4, #4]
 8017a34:	6023      	str	r3, [r4, #0]
 8017a36:	e7ec      	b.n	8017a12 <__ssvfiscanf_r+0x3e>
 8017a38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	4630      	mov	r0, r6
 8017a3e:	4798      	blx	r3
 8017a40:	2800      	cmp	r0, #0
 8017a42:	d0e9      	beq.n	8017a18 <__ssvfiscanf_r+0x44>
 8017a44:	e7ed      	b.n	8017a22 <__ssvfiscanf_r+0x4e>
 8017a46:	2b25      	cmp	r3, #37	; 0x25
 8017a48:	d012      	beq.n	8017a70 <__ssvfiscanf_r+0x9c>
 8017a4a:	469a      	mov	sl, r3
 8017a4c:	6863      	ldr	r3, [r4, #4]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	f340 8091 	ble.w	8017b76 <__ssvfiscanf_r+0x1a2>
 8017a54:	6822      	ldr	r2, [r4, #0]
 8017a56:	7813      	ldrb	r3, [r2, #0]
 8017a58:	4553      	cmp	r3, sl
 8017a5a:	f040 812e 	bne.w	8017cba <__ssvfiscanf_r+0x2e6>
 8017a5e:	6863      	ldr	r3, [r4, #4]
 8017a60:	3b01      	subs	r3, #1
 8017a62:	6063      	str	r3, [r4, #4]
 8017a64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017a66:	3201      	adds	r2, #1
 8017a68:	3301      	adds	r3, #1
 8017a6a:	6022      	str	r2, [r4, #0]
 8017a6c:	9345      	str	r3, [sp, #276]	; 0x114
 8017a6e:	e7d8      	b.n	8017a22 <__ssvfiscanf_r+0x4e>
 8017a70:	9141      	str	r1, [sp, #260]	; 0x104
 8017a72:	9143      	str	r1, [sp, #268]	; 0x10c
 8017a74:	7853      	ldrb	r3, [r2, #1]
 8017a76:	2b2a      	cmp	r3, #42	; 0x2a
 8017a78:	bf02      	ittt	eq
 8017a7a:	2310      	moveq	r3, #16
 8017a7c:	1c95      	addeq	r5, r2, #2
 8017a7e:	9341      	streq	r3, [sp, #260]	; 0x104
 8017a80:	220a      	movs	r2, #10
 8017a82:	46aa      	mov	sl, r5
 8017a84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017a88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017a8c:	2b09      	cmp	r3, #9
 8017a8e:	d91c      	bls.n	8017aca <__ssvfiscanf_r+0xf6>
 8017a90:	487e      	ldr	r0, [pc, #504]	; (8017c8c <__ssvfiscanf_r+0x2b8>)
 8017a92:	2203      	movs	r2, #3
 8017a94:	f7e8 fc54 	bl	8000340 <memchr>
 8017a98:	b138      	cbz	r0, 8017aaa <__ssvfiscanf_r+0xd6>
 8017a9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017a9c:	eba0 0009 	sub.w	r0, r0, r9
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	4083      	lsls	r3, r0
 8017aa4:	4313      	orrs	r3, r2
 8017aa6:	9341      	str	r3, [sp, #260]	; 0x104
 8017aa8:	4655      	mov	r5, sl
 8017aaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017aae:	2b78      	cmp	r3, #120	; 0x78
 8017ab0:	d806      	bhi.n	8017ac0 <__ssvfiscanf_r+0xec>
 8017ab2:	2b57      	cmp	r3, #87	; 0x57
 8017ab4:	d810      	bhi.n	8017ad8 <__ssvfiscanf_r+0x104>
 8017ab6:	2b25      	cmp	r3, #37	; 0x25
 8017ab8:	d0c7      	beq.n	8017a4a <__ssvfiscanf_r+0x76>
 8017aba:	d857      	bhi.n	8017b6c <__ssvfiscanf_r+0x198>
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d065      	beq.n	8017b8c <__ssvfiscanf_r+0x1b8>
 8017ac0:	2303      	movs	r3, #3
 8017ac2:	9347      	str	r3, [sp, #284]	; 0x11c
 8017ac4:	230a      	movs	r3, #10
 8017ac6:	9342      	str	r3, [sp, #264]	; 0x108
 8017ac8:	e076      	b.n	8017bb8 <__ssvfiscanf_r+0x1e4>
 8017aca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017acc:	fb02 1103 	mla	r1, r2, r3, r1
 8017ad0:	3930      	subs	r1, #48	; 0x30
 8017ad2:	9143      	str	r1, [sp, #268]	; 0x10c
 8017ad4:	4655      	mov	r5, sl
 8017ad6:	e7d4      	b.n	8017a82 <__ssvfiscanf_r+0xae>
 8017ad8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017adc:	2a20      	cmp	r2, #32
 8017ade:	d8ef      	bhi.n	8017ac0 <__ssvfiscanf_r+0xec>
 8017ae0:	a101      	add	r1, pc, #4	; (adr r1, 8017ae8 <__ssvfiscanf_r+0x114>)
 8017ae2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017ae6:	bf00      	nop
 8017ae8:	08017b9b 	.word	0x08017b9b
 8017aec:	08017ac1 	.word	0x08017ac1
 8017af0:	08017ac1 	.word	0x08017ac1
 8017af4:	08017bf9 	.word	0x08017bf9
 8017af8:	08017ac1 	.word	0x08017ac1
 8017afc:	08017ac1 	.word	0x08017ac1
 8017b00:	08017ac1 	.word	0x08017ac1
 8017b04:	08017ac1 	.word	0x08017ac1
 8017b08:	08017ac1 	.word	0x08017ac1
 8017b0c:	08017ac1 	.word	0x08017ac1
 8017b10:	08017ac1 	.word	0x08017ac1
 8017b14:	08017c0f 	.word	0x08017c0f
 8017b18:	08017bf5 	.word	0x08017bf5
 8017b1c:	08017b73 	.word	0x08017b73
 8017b20:	08017b73 	.word	0x08017b73
 8017b24:	08017b73 	.word	0x08017b73
 8017b28:	08017ac1 	.word	0x08017ac1
 8017b2c:	08017bb1 	.word	0x08017bb1
 8017b30:	08017ac1 	.word	0x08017ac1
 8017b34:	08017ac1 	.word	0x08017ac1
 8017b38:	08017ac1 	.word	0x08017ac1
 8017b3c:	08017ac1 	.word	0x08017ac1
 8017b40:	08017c1f 	.word	0x08017c1f
 8017b44:	08017bed 	.word	0x08017bed
 8017b48:	08017b93 	.word	0x08017b93
 8017b4c:	08017ac1 	.word	0x08017ac1
 8017b50:	08017ac1 	.word	0x08017ac1
 8017b54:	08017c1b 	.word	0x08017c1b
 8017b58:	08017ac1 	.word	0x08017ac1
 8017b5c:	08017bf5 	.word	0x08017bf5
 8017b60:	08017ac1 	.word	0x08017ac1
 8017b64:	08017ac1 	.word	0x08017ac1
 8017b68:	08017b9b 	.word	0x08017b9b
 8017b6c:	3b45      	subs	r3, #69	; 0x45
 8017b6e:	2b02      	cmp	r3, #2
 8017b70:	d8a6      	bhi.n	8017ac0 <__ssvfiscanf_r+0xec>
 8017b72:	2305      	movs	r3, #5
 8017b74:	e01f      	b.n	8017bb6 <__ssvfiscanf_r+0x1e2>
 8017b76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017b78:	4621      	mov	r1, r4
 8017b7a:	4630      	mov	r0, r6
 8017b7c:	4798      	blx	r3
 8017b7e:	2800      	cmp	r0, #0
 8017b80:	f43f af68 	beq.w	8017a54 <__ssvfiscanf_r+0x80>
 8017b84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017b86:	2800      	cmp	r0, #0
 8017b88:	f040 808d 	bne.w	8017ca6 <__ssvfiscanf_r+0x2d2>
 8017b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b90:	e08f      	b.n	8017cb2 <__ssvfiscanf_r+0x2de>
 8017b92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017b94:	f042 0220 	orr.w	r2, r2, #32
 8017b98:	9241      	str	r2, [sp, #260]	; 0x104
 8017b9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017ba0:	9241      	str	r2, [sp, #260]	; 0x104
 8017ba2:	2210      	movs	r2, #16
 8017ba4:	2b6f      	cmp	r3, #111	; 0x6f
 8017ba6:	9242      	str	r2, [sp, #264]	; 0x108
 8017ba8:	bf34      	ite	cc
 8017baa:	2303      	movcc	r3, #3
 8017bac:	2304      	movcs	r3, #4
 8017bae:	e002      	b.n	8017bb6 <__ssvfiscanf_r+0x1e2>
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	9342      	str	r3, [sp, #264]	; 0x108
 8017bb4:	2303      	movs	r3, #3
 8017bb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017bb8:	6863      	ldr	r3, [r4, #4]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	dd3d      	ble.n	8017c3a <__ssvfiscanf_r+0x266>
 8017bbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017bc0:	0659      	lsls	r1, r3, #25
 8017bc2:	d404      	bmi.n	8017bce <__ssvfiscanf_r+0x1fa>
 8017bc4:	6823      	ldr	r3, [r4, #0]
 8017bc6:	781a      	ldrb	r2, [r3, #0]
 8017bc8:	5cba      	ldrb	r2, [r7, r2]
 8017bca:	0712      	lsls	r2, r2, #28
 8017bcc:	d43c      	bmi.n	8017c48 <__ssvfiscanf_r+0x274>
 8017bce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017bd0:	2b02      	cmp	r3, #2
 8017bd2:	dc4b      	bgt.n	8017c6c <__ssvfiscanf_r+0x298>
 8017bd4:	466b      	mov	r3, sp
 8017bd6:	4622      	mov	r2, r4
 8017bd8:	a941      	add	r1, sp, #260	; 0x104
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f000 fa02 	bl	8017fe4 <_scanf_chars>
 8017be0:	2801      	cmp	r0, #1
 8017be2:	d06a      	beq.n	8017cba <__ssvfiscanf_r+0x2e6>
 8017be4:	2802      	cmp	r0, #2
 8017be6:	f47f af1c 	bne.w	8017a22 <__ssvfiscanf_r+0x4e>
 8017bea:	e7cb      	b.n	8017b84 <__ssvfiscanf_r+0x1b0>
 8017bec:	2308      	movs	r3, #8
 8017bee:	9342      	str	r3, [sp, #264]	; 0x108
 8017bf0:	2304      	movs	r3, #4
 8017bf2:	e7e0      	b.n	8017bb6 <__ssvfiscanf_r+0x1e2>
 8017bf4:	220a      	movs	r2, #10
 8017bf6:	e7d5      	b.n	8017ba4 <__ssvfiscanf_r+0x1d0>
 8017bf8:	4629      	mov	r1, r5
 8017bfa:	4640      	mov	r0, r8
 8017bfc:	f000 fb40 	bl	8018280 <__sccl>
 8017c00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c06:	9341      	str	r3, [sp, #260]	; 0x104
 8017c08:	4605      	mov	r5, r0
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	e7d3      	b.n	8017bb6 <__ssvfiscanf_r+0x1e2>
 8017c0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c14:	9341      	str	r3, [sp, #260]	; 0x104
 8017c16:	2300      	movs	r3, #0
 8017c18:	e7cd      	b.n	8017bb6 <__ssvfiscanf_r+0x1e2>
 8017c1a:	2302      	movs	r3, #2
 8017c1c:	e7cb      	b.n	8017bb6 <__ssvfiscanf_r+0x1e2>
 8017c1e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017c20:	06c3      	lsls	r3, r0, #27
 8017c22:	f53f aefe 	bmi.w	8017a22 <__ssvfiscanf_r+0x4e>
 8017c26:	9b00      	ldr	r3, [sp, #0]
 8017c28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017c2a:	1d19      	adds	r1, r3, #4
 8017c2c:	9100      	str	r1, [sp, #0]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	07c0      	lsls	r0, r0, #31
 8017c32:	bf4c      	ite	mi
 8017c34:	801a      	strhmi	r2, [r3, #0]
 8017c36:	601a      	strpl	r2, [r3, #0]
 8017c38:	e6f3      	b.n	8017a22 <__ssvfiscanf_r+0x4e>
 8017c3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c3c:	4621      	mov	r1, r4
 8017c3e:	4630      	mov	r0, r6
 8017c40:	4798      	blx	r3
 8017c42:	2800      	cmp	r0, #0
 8017c44:	d0bb      	beq.n	8017bbe <__ssvfiscanf_r+0x1ea>
 8017c46:	e79d      	b.n	8017b84 <__ssvfiscanf_r+0x1b0>
 8017c48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017c4a:	3201      	adds	r2, #1
 8017c4c:	9245      	str	r2, [sp, #276]	; 0x114
 8017c4e:	6862      	ldr	r2, [r4, #4]
 8017c50:	3a01      	subs	r2, #1
 8017c52:	2a00      	cmp	r2, #0
 8017c54:	6062      	str	r2, [r4, #4]
 8017c56:	dd02      	ble.n	8017c5e <__ssvfiscanf_r+0x28a>
 8017c58:	3301      	adds	r3, #1
 8017c5a:	6023      	str	r3, [r4, #0]
 8017c5c:	e7b2      	b.n	8017bc4 <__ssvfiscanf_r+0x1f0>
 8017c5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c60:	4621      	mov	r1, r4
 8017c62:	4630      	mov	r0, r6
 8017c64:	4798      	blx	r3
 8017c66:	2800      	cmp	r0, #0
 8017c68:	d0ac      	beq.n	8017bc4 <__ssvfiscanf_r+0x1f0>
 8017c6a:	e78b      	b.n	8017b84 <__ssvfiscanf_r+0x1b0>
 8017c6c:	2b04      	cmp	r3, #4
 8017c6e:	dc0f      	bgt.n	8017c90 <__ssvfiscanf_r+0x2bc>
 8017c70:	466b      	mov	r3, sp
 8017c72:	4622      	mov	r2, r4
 8017c74:	a941      	add	r1, sp, #260	; 0x104
 8017c76:	4630      	mov	r0, r6
 8017c78:	f000 fa0e 	bl	8018098 <_scanf_i>
 8017c7c:	e7b0      	b.n	8017be0 <__ssvfiscanf_r+0x20c>
 8017c7e:	bf00      	nop
 8017c80:	08017921 	.word	0x08017921
 8017c84:	0801799b 	.word	0x0801799b
 8017c88:	0801891b 	.word	0x0801891b
 8017c8c:	080188d2 	.word	0x080188d2
 8017c90:	4b0b      	ldr	r3, [pc, #44]	; (8017cc0 <__ssvfiscanf_r+0x2ec>)
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	f43f aec5 	beq.w	8017a22 <__ssvfiscanf_r+0x4e>
 8017c98:	466b      	mov	r3, sp
 8017c9a:	4622      	mov	r2, r4
 8017c9c:	a941      	add	r1, sp, #260	; 0x104
 8017c9e:	4630      	mov	r0, r6
 8017ca0:	f3af 8000 	nop.w
 8017ca4:	e79c      	b.n	8017be0 <__ssvfiscanf_r+0x20c>
 8017ca6:	89a3      	ldrh	r3, [r4, #12]
 8017ca8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017cac:	bf18      	it	ne
 8017cae:	f04f 30ff 	movne.w	r0, #4294967295
 8017cb2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cba:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017cbc:	e7f9      	b.n	8017cb2 <__ssvfiscanf_r+0x2de>
 8017cbe:	bf00      	nop
 8017cc0:	00000000 	.word	0x00000000

08017cc4 <_printf_common>:
 8017cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cc8:	4616      	mov	r6, r2
 8017cca:	4699      	mov	r9, r3
 8017ccc:	688a      	ldr	r2, [r1, #8]
 8017cce:	690b      	ldr	r3, [r1, #16]
 8017cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017cd4:	4293      	cmp	r3, r2
 8017cd6:	bfb8      	it	lt
 8017cd8:	4613      	movlt	r3, r2
 8017cda:	6033      	str	r3, [r6, #0]
 8017cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017ce0:	4607      	mov	r7, r0
 8017ce2:	460c      	mov	r4, r1
 8017ce4:	b10a      	cbz	r2, 8017cea <_printf_common+0x26>
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	6033      	str	r3, [r6, #0]
 8017cea:	6823      	ldr	r3, [r4, #0]
 8017cec:	0699      	lsls	r1, r3, #26
 8017cee:	bf42      	ittt	mi
 8017cf0:	6833      	ldrmi	r3, [r6, #0]
 8017cf2:	3302      	addmi	r3, #2
 8017cf4:	6033      	strmi	r3, [r6, #0]
 8017cf6:	6825      	ldr	r5, [r4, #0]
 8017cf8:	f015 0506 	ands.w	r5, r5, #6
 8017cfc:	d106      	bne.n	8017d0c <_printf_common+0x48>
 8017cfe:	f104 0a19 	add.w	sl, r4, #25
 8017d02:	68e3      	ldr	r3, [r4, #12]
 8017d04:	6832      	ldr	r2, [r6, #0]
 8017d06:	1a9b      	subs	r3, r3, r2
 8017d08:	42ab      	cmp	r3, r5
 8017d0a:	dc26      	bgt.n	8017d5a <_printf_common+0x96>
 8017d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017d10:	1e13      	subs	r3, r2, #0
 8017d12:	6822      	ldr	r2, [r4, #0]
 8017d14:	bf18      	it	ne
 8017d16:	2301      	movne	r3, #1
 8017d18:	0692      	lsls	r2, r2, #26
 8017d1a:	d42b      	bmi.n	8017d74 <_printf_common+0xb0>
 8017d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d20:	4649      	mov	r1, r9
 8017d22:	4638      	mov	r0, r7
 8017d24:	47c0      	blx	r8
 8017d26:	3001      	adds	r0, #1
 8017d28:	d01e      	beq.n	8017d68 <_printf_common+0xa4>
 8017d2a:	6823      	ldr	r3, [r4, #0]
 8017d2c:	6922      	ldr	r2, [r4, #16]
 8017d2e:	f003 0306 	and.w	r3, r3, #6
 8017d32:	2b04      	cmp	r3, #4
 8017d34:	bf02      	ittt	eq
 8017d36:	68e5      	ldreq	r5, [r4, #12]
 8017d38:	6833      	ldreq	r3, [r6, #0]
 8017d3a:	1aed      	subeq	r5, r5, r3
 8017d3c:	68a3      	ldr	r3, [r4, #8]
 8017d3e:	bf0c      	ite	eq
 8017d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d44:	2500      	movne	r5, #0
 8017d46:	4293      	cmp	r3, r2
 8017d48:	bfc4      	itt	gt
 8017d4a:	1a9b      	subgt	r3, r3, r2
 8017d4c:	18ed      	addgt	r5, r5, r3
 8017d4e:	2600      	movs	r6, #0
 8017d50:	341a      	adds	r4, #26
 8017d52:	42b5      	cmp	r5, r6
 8017d54:	d11a      	bne.n	8017d8c <_printf_common+0xc8>
 8017d56:	2000      	movs	r0, #0
 8017d58:	e008      	b.n	8017d6c <_printf_common+0xa8>
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	4652      	mov	r2, sl
 8017d5e:	4649      	mov	r1, r9
 8017d60:	4638      	mov	r0, r7
 8017d62:	47c0      	blx	r8
 8017d64:	3001      	adds	r0, #1
 8017d66:	d103      	bne.n	8017d70 <_printf_common+0xac>
 8017d68:	f04f 30ff 	mov.w	r0, #4294967295
 8017d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d70:	3501      	adds	r5, #1
 8017d72:	e7c6      	b.n	8017d02 <_printf_common+0x3e>
 8017d74:	18e1      	adds	r1, r4, r3
 8017d76:	1c5a      	adds	r2, r3, #1
 8017d78:	2030      	movs	r0, #48	; 0x30
 8017d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017d7e:	4422      	add	r2, r4
 8017d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017d88:	3302      	adds	r3, #2
 8017d8a:	e7c7      	b.n	8017d1c <_printf_common+0x58>
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	4622      	mov	r2, r4
 8017d90:	4649      	mov	r1, r9
 8017d92:	4638      	mov	r0, r7
 8017d94:	47c0      	blx	r8
 8017d96:	3001      	adds	r0, #1
 8017d98:	d0e6      	beq.n	8017d68 <_printf_common+0xa4>
 8017d9a:	3601      	adds	r6, #1
 8017d9c:	e7d9      	b.n	8017d52 <_printf_common+0x8e>
	...

08017da0 <_printf_i>:
 8017da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017da4:	7e0f      	ldrb	r7, [r1, #24]
 8017da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017da8:	2f78      	cmp	r7, #120	; 0x78
 8017daa:	4691      	mov	r9, r2
 8017dac:	4680      	mov	r8, r0
 8017dae:	460c      	mov	r4, r1
 8017db0:	469a      	mov	sl, r3
 8017db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017db6:	d807      	bhi.n	8017dc8 <_printf_i+0x28>
 8017db8:	2f62      	cmp	r7, #98	; 0x62
 8017dba:	d80a      	bhi.n	8017dd2 <_printf_i+0x32>
 8017dbc:	2f00      	cmp	r7, #0
 8017dbe:	f000 80d4 	beq.w	8017f6a <_printf_i+0x1ca>
 8017dc2:	2f58      	cmp	r7, #88	; 0x58
 8017dc4:	f000 80c0 	beq.w	8017f48 <_printf_i+0x1a8>
 8017dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017dd0:	e03a      	b.n	8017e48 <_printf_i+0xa8>
 8017dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017dd6:	2b15      	cmp	r3, #21
 8017dd8:	d8f6      	bhi.n	8017dc8 <_printf_i+0x28>
 8017dda:	a101      	add	r1, pc, #4	; (adr r1, 8017de0 <_printf_i+0x40>)
 8017ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017de0:	08017e39 	.word	0x08017e39
 8017de4:	08017e4d 	.word	0x08017e4d
 8017de8:	08017dc9 	.word	0x08017dc9
 8017dec:	08017dc9 	.word	0x08017dc9
 8017df0:	08017dc9 	.word	0x08017dc9
 8017df4:	08017dc9 	.word	0x08017dc9
 8017df8:	08017e4d 	.word	0x08017e4d
 8017dfc:	08017dc9 	.word	0x08017dc9
 8017e00:	08017dc9 	.word	0x08017dc9
 8017e04:	08017dc9 	.word	0x08017dc9
 8017e08:	08017dc9 	.word	0x08017dc9
 8017e0c:	08017f51 	.word	0x08017f51
 8017e10:	08017e79 	.word	0x08017e79
 8017e14:	08017f0b 	.word	0x08017f0b
 8017e18:	08017dc9 	.word	0x08017dc9
 8017e1c:	08017dc9 	.word	0x08017dc9
 8017e20:	08017f73 	.word	0x08017f73
 8017e24:	08017dc9 	.word	0x08017dc9
 8017e28:	08017e79 	.word	0x08017e79
 8017e2c:	08017dc9 	.word	0x08017dc9
 8017e30:	08017dc9 	.word	0x08017dc9
 8017e34:	08017f13 	.word	0x08017f13
 8017e38:	682b      	ldr	r3, [r5, #0]
 8017e3a:	1d1a      	adds	r2, r3, #4
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	602a      	str	r2, [r5, #0]
 8017e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017e48:	2301      	movs	r3, #1
 8017e4a:	e09f      	b.n	8017f8c <_printf_i+0x1ec>
 8017e4c:	6820      	ldr	r0, [r4, #0]
 8017e4e:	682b      	ldr	r3, [r5, #0]
 8017e50:	0607      	lsls	r7, r0, #24
 8017e52:	f103 0104 	add.w	r1, r3, #4
 8017e56:	6029      	str	r1, [r5, #0]
 8017e58:	d501      	bpl.n	8017e5e <_printf_i+0xbe>
 8017e5a:	681e      	ldr	r6, [r3, #0]
 8017e5c:	e003      	b.n	8017e66 <_printf_i+0xc6>
 8017e5e:	0646      	lsls	r6, r0, #25
 8017e60:	d5fb      	bpl.n	8017e5a <_printf_i+0xba>
 8017e62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017e66:	2e00      	cmp	r6, #0
 8017e68:	da03      	bge.n	8017e72 <_printf_i+0xd2>
 8017e6a:	232d      	movs	r3, #45	; 0x2d
 8017e6c:	4276      	negs	r6, r6
 8017e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e72:	485a      	ldr	r0, [pc, #360]	; (8017fdc <_printf_i+0x23c>)
 8017e74:	230a      	movs	r3, #10
 8017e76:	e012      	b.n	8017e9e <_printf_i+0xfe>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	6820      	ldr	r0, [r4, #0]
 8017e7c:	1d19      	adds	r1, r3, #4
 8017e7e:	6029      	str	r1, [r5, #0]
 8017e80:	0605      	lsls	r5, r0, #24
 8017e82:	d501      	bpl.n	8017e88 <_printf_i+0xe8>
 8017e84:	681e      	ldr	r6, [r3, #0]
 8017e86:	e002      	b.n	8017e8e <_printf_i+0xee>
 8017e88:	0641      	lsls	r1, r0, #25
 8017e8a:	d5fb      	bpl.n	8017e84 <_printf_i+0xe4>
 8017e8c:	881e      	ldrh	r6, [r3, #0]
 8017e8e:	4853      	ldr	r0, [pc, #332]	; (8017fdc <_printf_i+0x23c>)
 8017e90:	2f6f      	cmp	r7, #111	; 0x6f
 8017e92:	bf0c      	ite	eq
 8017e94:	2308      	moveq	r3, #8
 8017e96:	230a      	movne	r3, #10
 8017e98:	2100      	movs	r1, #0
 8017e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017e9e:	6865      	ldr	r5, [r4, #4]
 8017ea0:	60a5      	str	r5, [r4, #8]
 8017ea2:	2d00      	cmp	r5, #0
 8017ea4:	bfa2      	ittt	ge
 8017ea6:	6821      	ldrge	r1, [r4, #0]
 8017ea8:	f021 0104 	bicge.w	r1, r1, #4
 8017eac:	6021      	strge	r1, [r4, #0]
 8017eae:	b90e      	cbnz	r6, 8017eb4 <_printf_i+0x114>
 8017eb0:	2d00      	cmp	r5, #0
 8017eb2:	d04b      	beq.n	8017f4c <_printf_i+0x1ac>
 8017eb4:	4615      	mov	r5, r2
 8017eb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8017eba:	fb03 6711 	mls	r7, r3, r1, r6
 8017ebe:	5dc7      	ldrb	r7, [r0, r7]
 8017ec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017ec4:	4637      	mov	r7, r6
 8017ec6:	42bb      	cmp	r3, r7
 8017ec8:	460e      	mov	r6, r1
 8017eca:	d9f4      	bls.n	8017eb6 <_printf_i+0x116>
 8017ecc:	2b08      	cmp	r3, #8
 8017ece:	d10b      	bne.n	8017ee8 <_printf_i+0x148>
 8017ed0:	6823      	ldr	r3, [r4, #0]
 8017ed2:	07de      	lsls	r6, r3, #31
 8017ed4:	d508      	bpl.n	8017ee8 <_printf_i+0x148>
 8017ed6:	6923      	ldr	r3, [r4, #16]
 8017ed8:	6861      	ldr	r1, [r4, #4]
 8017eda:	4299      	cmp	r1, r3
 8017edc:	bfde      	ittt	le
 8017ede:	2330      	movle	r3, #48	; 0x30
 8017ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017ee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ee8:	1b52      	subs	r2, r2, r5
 8017eea:	6122      	str	r2, [r4, #16]
 8017eec:	f8cd a000 	str.w	sl, [sp]
 8017ef0:	464b      	mov	r3, r9
 8017ef2:	aa03      	add	r2, sp, #12
 8017ef4:	4621      	mov	r1, r4
 8017ef6:	4640      	mov	r0, r8
 8017ef8:	f7ff fee4 	bl	8017cc4 <_printf_common>
 8017efc:	3001      	adds	r0, #1
 8017efe:	d14a      	bne.n	8017f96 <_printf_i+0x1f6>
 8017f00:	f04f 30ff 	mov.w	r0, #4294967295
 8017f04:	b004      	add	sp, #16
 8017f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f0a:	6823      	ldr	r3, [r4, #0]
 8017f0c:	f043 0320 	orr.w	r3, r3, #32
 8017f10:	6023      	str	r3, [r4, #0]
 8017f12:	4833      	ldr	r0, [pc, #204]	; (8017fe0 <_printf_i+0x240>)
 8017f14:	2778      	movs	r7, #120	; 0x78
 8017f16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017f1a:	6823      	ldr	r3, [r4, #0]
 8017f1c:	6829      	ldr	r1, [r5, #0]
 8017f1e:	061f      	lsls	r7, r3, #24
 8017f20:	f851 6b04 	ldr.w	r6, [r1], #4
 8017f24:	d402      	bmi.n	8017f2c <_printf_i+0x18c>
 8017f26:	065f      	lsls	r7, r3, #25
 8017f28:	bf48      	it	mi
 8017f2a:	b2b6      	uxthmi	r6, r6
 8017f2c:	07df      	lsls	r7, r3, #31
 8017f2e:	bf48      	it	mi
 8017f30:	f043 0320 	orrmi.w	r3, r3, #32
 8017f34:	6029      	str	r1, [r5, #0]
 8017f36:	bf48      	it	mi
 8017f38:	6023      	strmi	r3, [r4, #0]
 8017f3a:	b91e      	cbnz	r6, 8017f44 <_printf_i+0x1a4>
 8017f3c:	6823      	ldr	r3, [r4, #0]
 8017f3e:	f023 0320 	bic.w	r3, r3, #32
 8017f42:	6023      	str	r3, [r4, #0]
 8017f44:	2310      	movs	r3, #16
 8017f46:	e7a7      	b.n	8017e98 <_printf_i+0xf8>
 8017f48:	4824      	ldr	r0, [pc, #144]	; (8017fdc <_printf_i+0x23c>)
 8017f4a:	e7e4      	b.n	8017f16 <_printf_i+0x176>
 8017f4c:	4615      	mov	r5, r2
 8017f4e:	e7bd      	b.n	8017ecc <_printf_i+0x12c>
 8017f50:	682b      	ldr	r3, [r5, #0]
 8017f52:	6826      	ldr	r6, [r4, #0]
 8017f54:	6961      	ldr	r1, [r4, #20]
 8017f56:	1d18      	adds	r0, r3, #4
 8017f58:	6028      	str	r0, [r5, #0]
 8017f5a:	0635      	lsls	r5, r6, #24
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	d501      	bpl.n	8017f64 <_printf_i+0x1c4>
 8017f60:	6019      	str	r1, [r3, #0]
 8017f62:	e002      	b.n	8017f6a <_printf_i+0x1ca>
 8017f64:	0670      	lsls	r0, r6, #25
 8017f66:	d5fb      	bpl.n	8017f60 <_printf_i+0x1c0>
 8017f68:	8019      	strh	r1, [r3, #0]
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	6123      	str	r3, [r4, #16]
 8017f6e:	4615      	mov	r5, r2
 8017f70:	e7bc      	b.n	8017eec <_printf_i+0x14c>
 8017f72:	682b      	ldr	r3, [r5, #0]
 8017f74:	1d1a      	adds	r2, r3, #4
 8017f76:	602a      	str	r2, [r5, #0]
 8017f78:	681d      	ldr	r5, [r3, #0]
 8017f7a:	6862      	ldr	r2, [r4, #4]
 8017f7c:	2100      	movs	r1, #0
 8017f7e:	4628      	mov	r0, r5
 8017f80:	f7e8 f9de 	bl	8000340 <memchr>
 8017f84:	b108      	cbz	r0, 8017f8a <_printf_i+0x1ea>
 8017f86:	1b40      	subs	r0, r0, r5
 8017f88:	6060      	str	r0, [r4, #4]
 8017f8a:	6863      	ldr	r3, [r4, #4]
 8017f8c:	6123      	str	r3, [r4, #16]
 8017f8e:	2300      	movs	r3, #0
 8017f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f94:	e7aa      	b.n	8017eec <_printf_i+0x14c>
 8017f96:	6923      	ldr	r3, [r4, #16]
 8017f98:	462a      	mov	r2, r5
 8017f9a:	4649      	mov	r1, r9
 8017f9c:	4640      	mov	r0, r8
 8017f9e:	47d0      	blx	sl
 8017fa0:	3001      	adds	r0, #1
 8017fa2:	d0ad      	beq.n	8017f00 <_printf_i+0x160>
 8017fa4:	6823      	ldr	r3, [r4, #0]
 8017fa6:	079b      	lsls	r3, r3, #30
 8017fa8:	d413      	bmi.n	8017fd2 <_printf_i+0x232>
 8017faa:	68e0      	ldr	r0, [r4, #12]
 8017fac:	9b03      	ldr	r3, [sp, #12]
 8017fae:	4298      	cmp	r0, r3
 8017fb0:	bfb8      	it	lt
 8017fb2:	4618      	movlt	r0, r3
 8017fb4:	e7a6      	b.n	8017f04 <_printf_i+0x164>
 8017fb6:	2301      	movs	r3, #1
 8017fb8:	4632      	mov	r2, r6
 8017fba:	4649      	mov	r1, r9
 8017fbc:	4640      	mov	r0, r8
 8017fbe:	47d0      	blx	sl
 8017fc0:	3001      	adds	r0, #1
 8017fc2:	d09d      	beq.n	8017f00 <_printf_i+0x160>
 8017fc4:	3501      	adds	r5, #1
 8017fc6:	68e3      	ldr	r3, [r4, #12]
 8017fc8:	9903      	ldr	r1, [sp, #12]
 8017fca:	1a5b      	subs	r3, r3, r1
 8017fcc:	42ab      	cmp	r3, r5
 8017fce:	dcf2      	bgt.n	8017fb6 <_printf_i+0x216>
 8017fd0:	e7eb      	b.n	8017faa <_printf_i+0x20a>
 8017fd2:	2500      	movs	r5, #0
 8017fd4:	f104 0619 	add.w	r6, r4, #25
 8017fd8:	e7f5      	b.n	8017fc6 <_printf_i+0x226>
 8017fda:	bf00      	nop
 8017fdc:	080188dd 	.word	0x080188dd
 8017fe0:	080188ee 	.word	0x080188ee

08017fe4 <_scanf_chars>:
 8017fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fe8:	4615      	mov	r5, r2
 8017fea:	688a      	ldr	r2, [r1, #8]
 8017fec:	4680      	mov	r8, r0
 8017fee:	460c      	mov	r4, r1
 8017ff0:	b932      	cbnz	r2, 8018000 <_scanf_chars+0x1c>
 8017ff2:	698a      	ldr	r2, [r1, #24]
 8017ff4:	2a00      	cmp	r2, #0
 8017ff6:	bf0c      	ite	eq
 8017ff8:	2201      	moveq	r2, #1
 8017ffa:	f04f 32ff 	movne.w	r2, #4294967295
 8017ffe:	608a      	str	r2, [r1, #8]
 8018000:	6822      	ldr	r2, [r4, #0]
 8018002:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018094 <_scanf_chars+0xb0>
 8018006:	06d1      	lsls	r1, r2, #27
 8018008:	bf5f      	itttt	pl
 801800a:	681a      	ldrpl	r2, [r3, #0]
 801800c:	1d11      	addpl	r1, r2, #4
 801800e:	6019      	strpl	r1, [r3, #0]
 8018010:	6816      	ldrpl	r6, [r2, #0]
 8018012:	2700      	movs	r7, #0
 8018014:	69a0      	ldr	r0, [r4, #24]
 8018016:	b188      	cbz	r0, 801803c <_scanf_chars+0x58>
 8018018:	2801      	cmp	r0, #1
 801801a:	d107      	bne.n	801802c <_scanf_chars+0x48>
 801801c:	682a      	ldr	r2, [r5, #0]
 801801e:	7811      	ldrb	r1, [r2, #0]
 8018020:	6962      	ldr	r2, [r4, #20]
 8018022:	5c52      	ldrb	r2, [r2, r1]
 8018024:	b952      	cbnz	r2, 801803c <_scanf_chars+0x58>
 8018026:	2f00      	cmp	r7, #0
 8018028:	d031      	beq.n	801808e <_scanf_chars+0xaa>
 801802a:	e022      	b.n	8018072 <_scanf_chars+0x8e>
 801802c:	2802      	cmp	r0, #2
 801802e:	d120      	bne.n	8018072 <_scanf_chars+0x8e>
 8018030:	682b      	ldr	r3, [r5, #0]
 8018032:	781b      	ldrb	r3, [r3, #0]
 8018034:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018038:	071b      	lsls	r3, r3, #28
 801803a:	d41a      	bmi.n	8018072 <_scanf_chars+0x8e>
 801803c:	6823      	ldr	r3, [r4, #0]
 801803e:	06da      	lsls	r2, r3, #27
 8018040:	bf5e      	ittt	pl
 8018042:	682b      	ldrpl	r3, [r5, #0]
 8018044:	781b      	ldrbpl	r3, [r3, #0]
 8018046:	f806 3b01 	strbpl.w	r3, [r6], #1
 801804a:	682a      	ldr	r2, [r5, #0]
 801804c:	686b      	ldr	r3, [r5, #4]
 801804e:	3201      	adds	r2, #1
 8018050:	602a      	str	r2, [r5, #0]
 8018052:	68a2      	ldr	r2, [r4, #8]
 8018054:	3b01      	subs	r3, #1
 8018056:	3a01      	subs	r2, #1
 8018058:	606b      	str	r3, [r5, #4]
 801805a:	3701      	adds	r7, #1
 801805c:	60a2      	str	r2, [r4, #8]
 801805e:	b142      	cbz	r2, 8018072 <_scanf_chars+0x8e>
 8018060:	2b00      	cmp	r3, #0
 8018062:	dcd7      	bgt.n	8018014 <_scanf_chars+0x30>
 8018064:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018068:	4629      	mov	r1, r5
 801806a:	4640      	mov	r0, r8
 801806c:	4798      	blx	r3
 801806e:	2800      	cmp	r0, #0
 8018070:	d0d0      	beq.n	8018014 <_scanf_chars+0x30>
 8018072:	6823      	ldr	r3, [r4, #0]
 8018074:	f013 0310 	ands.w	r3, r3, #16
 8018078:	d105      	bne.n	8018086 <_scanf_chars+0xa2>
 801807a:	68e2      	ldr	r2, [r4, #12]
 801807c:	3201      	adds	r2, #1
 801807e:	60e2      	str	r2, [r4, #12]
 8018080:	69a2      	ldr	r2, [r4, #24]
 8018082:	b102      	cbz	r2, 8018086 <_scanf_chars+0xa2>
 8018084:	7033      	strb	r3, [r6, #0]
 8018086:	6923      	ldr	r3, [r4, #16]
 8018088:	443b      	add	r3, r7
 801808a:	6123      	str	r3, [r4, #16]
 801808c:	2000      	movs	r0, #0
 801808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018092:	bf00      	nop
 8018094:	0801891b 	.word	0x0801891b

08018098 <_scanf_i>:
 8018098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801809c:	4698      	mov	r8, r3
 801809e:	4b74      	ldr	r3, [pc, #464]	; (8018270 <_scanf_i+0x1d8>)
 80180a0:	460c      	mov	r4, r1
 80180a2:	4682      	mov	sl, r0
 80180a4:	4616      	mov	r6, r2
 80180a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80180aa:	b087      	sub	sp, #28
 80180ac:	ab03      	add	r3, sp, #12
 80180ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80180b2:	4b70      	ldr	r3, [pc, #448]	; (8018274 <_scanf_i+0x1dc>)
 80180b4:	69a1      	ldr	r1, [r4, #24]
 80180b6:	4a70      	ldr	r2, [pc, #448]	; (8018278 <_scanf_i+0x1e0>)
 80180b8:	2903      	cmp	r1, #3
 80180ba:	bf18      	it	ne
 80180bc:	461a      	movne	r2, r3
 80180be:	68a3      	ldr	r3, [r4, #8]
 80180c0:	9201      	str	r2, [sp, #4]
 80180c2:	1e5a      	subs	r2, r3, #1
 80180c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80180c8:	bf88      	it	hi
 80180ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80180ce:	4627      	mov	r7, r4
 80180d0:	bf82      	ittt	hi
 80180d2:	eb03 0905 	addhi.w	r9, r3, r5
 80180d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80180da:	60a3      	strhi	r3, [r4, #8]
 80180dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80180e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80180e4:	bf98      	it	ls
 80180e6:	f04f 0900 	movls.w	r9, #0
 80180ea:	6023      	str	r3, [r4, #0]
 80180ec:	463d      	mov	r5, r7
 80180ee:	f04f 0b00 	mov.w	fp, #0
 80180f2:	6831      	ldr	r1, [r6, #0]
 80180f4:	ab03      	add	r3, sp, #12
 80180f6:	7809      	ldrb	r1, [r1, #0]
 80180f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80180fc:	2202      	movs	r2, #2
 80180fe:	f7e8 f91f 	bl	8000340 <memchr>
 8018102:	b328      	cbz	r0, 8018150 <_scanf_i+0xb8>
 8018104:	f1bb 0f01 	cmp.w	fp, #1
 8018108:	d159      	bne.n	80181be <_scanf_i+0x126>
 801810a:	6862      	ldr	r2, [r4, #4]
 801810c:	b92a      	cbnz	r2, 801811a <_scanf_i+0x82>
 801810e:	6822      	ldr	r2, [r4, #0]
 8018110:	2308      	movs	r3, #8
 8018112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018116:	6063      	str	r3, [r4, #4]
 8018118:	6022      	str	r2, [r4, #0]
 801811a:	6822      	ldr	r2, [r4, #0]
 801811c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018120:	6022      	str	r2, [r4, #0]
 8018122:	68a2      	ldr	r2, [r4, #8]
 8018124:	1e51      	subs	r1, r2, #1
 8018126:	60a1      	str	r1, [r4, #8]
 8018128:	b192      	cbz	r2, 8018150 <_scanf_i+0xb8>
 801812a:	6832      	ldr	r2, [r6, #0]
 801812c:	1c51      	adds	r1, r2, #1
 801812e:	6031      	str	r1, [r6, #0]
 8018130:	7812      	ldrb	r2, [r2, #0]
 8018132:	f805 2b01 	strb.w	r2, [r5], #1
 8018136:	6872      	ldr	r2, [r6, #4]
 8018138:	3a01      	subs	r2, #1
 801813a:	2a00      	cmp	r2, #0
 801813c:	6072      	str	r2, [r6, #4]
 801813e:	dc07      	bgt.n	8018150 <_scanf_i+0xb8>
 8018140:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8018144:	4631      	mov	r1, r6
 8018146:	4650      	mov	r0, sl
 8018148:	4790      	blx	r2
 801814a:	2800      	cmp	r0, #0
 801814c:	f040 8085 	bne.w	801825a <_scanf_i+0x1c2>
 8018150:	f10b 0b01 	add.w	fp, fp, #1
 8018154:	f1bb 0f03 	cmp.w	fp, #3
 8018158:	d1cb      	bne.n	80180f2 <_scanf_i+0x5a>
 801815a:	6863      	ldr	r3, [r4, #4]
 801815c:	b90b      	cbnz	r3, 8018162 <_scanf_i+0xca>
 801815e:	230a      	movs	r3, #10
 8018160:	6063      	str	r3, [r4, #4]
 8018162:	6863      	ldr	r3, [r4, #4]
 8018164:	4945      	ldr	r1, [pc, #276]	; (801827c <_scanf_i+0x1e4>)
 8018166:	6960      	ldr	r0, [r4, #20]
 8018168:	1ac9      	subs	r1, r1, r3
 801816a:	f000 f889 	bl	8018280 <__sccl>
 801816e:	f04f 0b00 	mov.w	fp, #0
 8018172:	68a3      	ldr	r3, [r4, #8]
 8018174:	6822      	ldr	r2, [r4, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d03d      	beq.n	80181f6 <_scanf_i+0x15e>
 801817a:	6831      	ldr	r1, [r6, #0]
 801817c:	6960      	ldr	r0, [r4, #20]
 801817e:	f891 c000 	ldrb.w	ip, [r1]
 8018182:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018186:	2800      	cmp	r0, #0
 8018188:	d035      	beq.n	80181f6 <_scanf_i+0x15e>
 801818a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801818e:	d124      	bne.n	80181da <_scanf_i+0x142>
 8018190:	0510      	lsls	r0, r2, #20
 8018192:	d522      	bpl.n	80181da <_scanf_i+0x142>
 8018194:	f10b 0b01 	add.w	fp, fp, #1
 8018198:	f1b9 0f00 	cmp.w	r9, #0
 801819c:	d003      	beq.n	80181a6 <_scanf_i+0x10e>
 801819e:	3301      	adds	r3, #1
 80181a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80181a4:	60a3      	str	r3, [r4, #8]
 80181a6:	6873      	ldr	r3, [r6, #4]
 80181a8:	3b01      	subs	r3, #1
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	6073      	str	r3, [r6, #4]
 80181ae:	dd1b      	ble.n	80181e8 <_scanf_i+0x150>
 80181b0:	6833      	ldr	r3, [r6, #0]
 80181b2:	3301      	adds	r3, #1
 80181b4:	6033      	str	r3, [r6, #0]
 80181b6:	68a3      	ldr	r3, [r4, #8]
 80181b8:	3b01      	subs	r3, #1
 80181ba:	60a3      	str	r3, [r4, #8]
 80181bc:	e7d9      	b.n	8018172 <_scanf_i+0xda>
 80181be:	f1bb 0f02 	cmp.w	fp, #2
 80181c2:	d1ae      	bne.n	8018122 <_scanf_i+0x8a>
 80181c4:	6822      	ldr	r2, [r4, #0]
 80181c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80181ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80181ce:	d1bf      	bne.n	8018150 <_scanf_i+0xb8>
 80181d0:	2310      	movs	r3, #16
 80181d2:	6063      	str	r3, [r4, #4]
 80181d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80181d8:	e7a2      	b.n	8018120 <_scanf_i+0x88>
 80181da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80181de:	6022      	str	r2, [r4, #0]
 80181e0:	780b      	ldrb	r3, [r1, #0]
 80181e2:	f805 3b01 	strb.w	r3, [r5], #1
 80181e6:	e7de      	b.n	80181a6 <_scanf_i+0x10e>
 80181e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80181ec:	4631      	mov	r1, r6
 80181ee:	4650      	mov	r0, sl
 80181f0:	4798      	blx	r3
 80181f2:	2800      	cmp	r0, #0
 80181f4:	d0df      	beq.n	80181b6 <_scanf_i+0x11e>
 80181f6:	6823      	ldr	r3, [r4, #0]
 80181f8:	05d9      	lsls	r1, r3, #23
 80181fa:	d50d      	bpl.n	8018218 <_scanf_i+0x180>
 80181fc:	42bd      	cmp	r5, r7
 80181fe:	d909      	bls.n	8018214 <_scanf_i+0x17c>
 8018200:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018204:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018208:	4632      	mov	r2, r6
 801820a:	4650      	mov	r0, sl
 801820c:	4798      	blx	r3
 801820e:	f105 39ff 	add.w	r9, r5, #4294967295
 8018212:	464d      	mov	r5, r9
 8018214:	42bd      	cmp	r5, r7
 8018216:	d028      	beq.n	801826a <_scanf_i+0x1d2>
 8018218:	6822      	ldr	r2, [r4, #0]
 801821a:	f012 0210 	ands.w	r2, r2, #16
 801821e:	d113      	bne.n	8018248 <_scanf_i+0x1b0>
 8018220:	702a      	strb	r2, [r5, #0]
 8018222:	6863      	ldr	r3, [r4, #4]
 8018224:	9e01      	ldr	r6, [sp, #4]
 8018226:	4639      	mov	r1, r7
 8018228:	4650      	mov	r0, sl
 801822a:	47b0      	blx	r6
 801822c:	f8d8 3000 	ldr.w	r3, [r8]
 8018230:	6821      	ldr	r1, [r4, #0]
 8018232:	1d1a      	adds	r2, r3, #4
 8018234:	f8c8 2000 	str.w	r2, [r8]
 8018238:	f011 0f20 	tst.w	r1, #32
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	d00f      	beq.n	8018260 <_scanf_i+0x1c8>
 8018240:	6018      	str	r0, [r3, #0]
 8018242:	68e3      	ldr	r3, [r4, #12]
 8018244:	3301      	adds	r3, #1
 8018246:	60e3      	str	r3, [r4, #12]
 8018248:	6923      	ldr	r3, [r4, #16]
 801824a:	1bed      	subs	r5, r5, r7
 801824c:	445d      	add	r5, fp
 801824e:	442b      	add	r3, r5
 8018250:	6123      	str	r3, [r4, #16]
 8018252:	2000      	movs	r0, #0
 8018254:	b007      	add	sp, #28
 8018256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801825a:	f04f 0b00 	mov.w	fp, #0
 801825e:	e7ca      	b.n	80181f6 <_scanf_i+0x15e>
 8018260:	07ca      	lsls	r2, r1, #31
 8018262:	bf4c      	ite	mi
 8018264:	8018      	strhmi	r0, [r3, #0]
 8018266:	6018      	strpl	r0, [r3, #0]
 8018268:	e7eb      	b.n	8018242 <_scanf_i+0x1aa>
 801826a:	2001      	movs	r0, #1
 801826c:	e7f2      	b.n	8018254 <_scanf_i+0x1bc>
 801826e:	bf00      	nop
 8018270:	080187fc 	.word	0x080187fc
 8018274:	08018609 	.word	0x08018609
 8018278:	08018521 	.word	0x08018521
 801827c:	0801890f 	.word	0x0801890f

08018280 <__sccl>:
 8018280:	b570      	push	{r4, r5, r6, lr}
 8018282:	780b      	ldrb	r3, [r1, #0]
 8018284:	4604      	mov	r4, r0
 8018286:	2b5e      	cmp	r3, #94	; 0x5e
 8018288:	bf0b      	itete	eq
 801828a:	784b      	ldrbeq	r3, [r1, #1]
 801828c:	1c4a      	addne	r2, r1, #1
 801828e:	1c8a      	addeq	r2, r1, #2
 8018290:	2100      	movne	r1, #0
 8018292:	bf08      	it	eq
 8018294:	2101      	moveq	r1, #1
 8018296:	3801      	subs	r0, #1
 8018298:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801829c:	f800 1f01 	strb.w	r1, [r0, #1]!
 80182a0:	42a8      	cmp	r0, r5
 80182a2:	d1fb      	bne.n	801829c <__sccl+0x1c>
 80182a4:	b90b      	cbnz	r3, 80182aa <__sccl+0x2a>
 80182a6:	1e50      	subs	r0, r2, #1
 80182a8:	bd70      	pop	{r4, r5, r6, pc}
 80182aa:	f081 0101 	eor.w	r1, r1, #1
 80182ae:	54e1      	strb	r1, [r4, r3]
 80182b0:	4610      	mov	r0, r2
 80182b2:	4602      	mov	r2, r0
 80182b4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80182b8:	2d2d      	cmp	r5, #45	; 0x2d
 80182ba:	d005      	beq.n	80182c8 <__sccl+0x48>
 80182bc:	2d5d      	cmp	r5, #93	; 0x5d
 80182be:	d016      	beq.n	80182ee <__sccl+0x6e>
 80182c0:	2d00      	cmp	r5, #0
 80182c2:	d0f1      	beq.n	80182a8 <__sccl+0x28>
 80182c4:	462b      	mov	r3, r5
 80182c6:	e7f2      	b.n	80182ae <__sccl+0x2e>
 80182c8:	7846      	ldrb	r6, [r0, #1]
 80182ca:	2e5d      	cmp	r6, #93	; 0x5d
 80182cc:	d0fa      	beq.n	80182c4 <__sccl+0x44>
 80182ce:	42b3      	cmp	r3, r6
 80182d0:	dcf8      	bgt.n	80182c4 <__sccl+0x44>
 80182d2:	3002      	adds	r0, #2
 80182d4:	461a      	mov	r2, r3
 80182d6:	3201      	adds	r2, #1
 80182d8:	4296      	cmp	r6, r2
 80182da:	54a1      	strb	r1, [r4, r2]
 80182dc:	dcfb      	bgt.n	80182d6 <__sccl+0x56>
 80182de:	1af2      	subs	r2, r6, r3
 80182e0:	3a01      	subs	r2, #1
 80182e2:	1c5d      	adds	r5, r3, #1
 80182e4:	42b3      	cmp	r3, r6
 80182e6:	bfa8      	it	ge
 80182e8:	2200      	movge	r2, #0
 80182ea:	18ab      	adds	r3, r5, r2
 80182ec:	e7e1      	b.n	80182b2 <__sccl+0x32>
 80182ee:	4610      	mov	r0, r2
 80182f0:	e7da      	b.n	80182a8 <__sccl+0x28>

080182f2 <__submore>:
 80182f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182f6:	460c      	mov	r4, r1
 80182f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80182fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182fe:	4299      	cmp	r1, r3
 8018300:	d11d      	bne.n	801833e <__submore+0x4c>
 8018302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018306:	f7ff f927 	bl	8017558 <_malloc_r>
 801830a:	b918      	cbnz	r0, 8018314 <__submore+0x22>
 801830c:	f04f 30ff 	mov.w	r0, #4294967295
 8018310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018318:	63a3      	str	r3, [r4, #56]	; 0x38
 801831a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801831e:	6360      	str	r0, [r4, #52]	; 0x34
 8018320:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018324:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018328:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801832c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018330:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018334:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018338:	6020      	str	r0, [r4, #0]
 801833a:	2000      	movs	r0, #0
 801833c:	e7e8      	b.n	8018310 <__submore+0x1e>
 801833e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018340:	0077      	lsls	r7, r6, #1
 8018342:	463a      	mov	r2, r7
 8018344:	f000 f83a 	bl	80183bc <_realloc_r>
 8018348:	4605      	mov	r5, r0
 801834a:	2800      	cmp	r0, #0
 801834c:	d0de      	beq.n	801830c <__submore+0x1a>
 801834e:	eb00 0806 	add.w	r8, r0, r6
 8018352:	4601      	mov	r1, r0
 8018354:	4632      	mov	r2, r6
 8018356:	4640      	mov	r0, r8
 8018358:	f7ff f884 	bl	8017464 <memcpy>
 801835c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018360:	f8c4 8000 	str.w	r8, [r4]
 8018364:	e7e9      	b.n	801833a <__submore+0x48>

08018366 <memmove>:
 8018366:	4288      	cmp	r0, r1
 8018368:	b510      	push	{r4, lr}
 801836a:	eb01 0402 	add.w	r4, r1, r2
 801836e:	d902      	bls.n	8018376 <memmove+0x10>
 8018370:	4284      	cmp	r4, r0
 8018372:	4623      	mov	r3, r4
 8018374:	d807      	bhi.n	8018386 <memmove+0x20>
 8018376:	1e43      	subs	r3, r0, #1
 8018378:	42a1      	cmp	r1, r4
 801837a:	d008      	beq.n	801838e <memmove+0x28>
 801837c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018380:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018384:	e7f8      	b.n	8018378 <memmove+0x12>
 8018386:	4402      	add	r2, r0
 8018388:	4601      	mov	r1, r0
 801838a:	428a      	cmp	r2, r1
 801838c:	d100      	bne.n	8018390 <memmove+0x2a>
 801838e:	bd10      	pop	{r4, pc}
 8018390:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018394:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018398:	e7f7      	b.n	801838a <memmove+0x24>
	...

0801839c <_sbrk_r>:
 801839c:	b538      	push	{r3, r4, r5, lr}
 801839e:	4d06      	ldr	r5, [pc, #24]	; (80183b8 <_sbrk_r+0x1c>)
 80183a0:	2300      	movs	r3, #0
 80183a2:	4604      	mov	r4, r0
 80183a4:	4608      	mov	r0, r1
 80183a6:	602b      	str	r3, [r5, #0]
 80183a8:	f7eb faa0 	bl	80038ec <_sbrk>
 80183ac:	1c43      	adds	r3, r0, #1
 80183ae:	d102      	bne.n	80183b6 <_sbrk_r+0x1a>
 80183b0:	682b      	ldr	r3, [r5, #0]
 80183b2:	b103      	cbz	r3, 80183b6 <_sbrk_r+0x1a>
 80183b4:	6023      	str	r3, [r4, #0]
 80183b6:	bd38      	pop	{r3, r4, r5, pc}
 80183b8:	2400334c 	.word	0x2400334c

080183bc <_realloc_r>:
 80183bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183c0:	4680      	mov	r8, r0
 80183c2:	4614      	mov	r4, r2
 80183c4:	460e      	mov	r6, r1
 80183c6:	b921      	cbnz	r1, 80183d2 <_realloc_r+0x16>
 80183c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183cc:	4611      	mov	r1, r2
 80183ce:	f7ff b8c3 	b.w	8017558 <_malloc_r>
 80183d2:	b92a      	cbnz	r2, 80183e0 <_realloc_r+0x24>
 80183d4:	f7ff f854 	bl	8017480 <_free_r>
 80183d8:	4625      	mov	r5, r4
 80183da:	4628      	mov	r0, r5
 80183dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183e0:	f000 f914 	bl	801860c <_malloc_usable_size_r>
 80183e4:	4284      	cmp	r4, r0
 80183e6:	4607      	mov	r7, r0
 80183e8:	d802      	bhi.n	80183f0 <_realloc_r+0x34>
 80183ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80183ee:	d812      	bhi.n	8018416 <_realloc_r+0x5a>
 80183f0:	4621      	mov	r1, r4
 80183f2:	4640      	mov	r0, r8
 80183f4:	f7ff f8b0 	bl	8017558 <_malloc_r>
 80183f8:	4605      	mov	r5, r0
 80183fa:	2800      	cmp	r0, #0
 80183fc:	d0ed      	beq.n	80183da <_realloc_r+0x1e>
 80183fe:	42bc      	cmp	r4, r7
 8018400:	4622      	mov	r2, r4
 8018402:	4631      	mov	r1, r6
 8018404:	bf28      	it	cs
 8018406:	463a      	movcs	r2, r7
 8018408:	f7ff f82c 	bl	8017464 <memcpy>
 801840c:	4631      	mov	r1, r6
 801840e:	4640      	mov	r0, r8
 8018410:	f7ff f836 	bl	8017480 <_free_r>
 8018414:	e7e1      	b.n	80183da <_realloc_r+0x1e>
 8018416:	4635      	mov	r5, r6
 8018418:	e7df      	b.n	80183da <_realloc_r+0x1e>
	...

0801841c <_strtol_l.constprop.0>:
 801841c:	2b01      	cmp	r3, #1
 801841e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018422:	d001      	beq.n	8018428 <_strtol_l.constprop.0+0xc>
 8018424:	2b24      	cmp	r3, #36	; 0x24
 8018426:	d906      	bls.n	8018436 <_strtol_l.constprop.0+0x1a>
 8018428:	f7fe ffe8 	bl	80173fc <__errno>
 801842c:	2316      	movs	r3, #22
 801842e:	6003      	str	r3, [r0, #0]
 8018430:	2000      	movs	r0, #0
 8018432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018436:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801851c <_strtol_l.constprop.0+0x100>
 801843a:	460d      	mov	r5, r1
 801843c:	462e      	mov	r6, r5
 801843e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018442:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018446:	f017 0708 	ands.w	r7, r7, #8
 801844a:	d1f7      	bne.n	801843c <_strtol_l.constprop.0+0x20>
 801844c:	2c2d      	cmp	r4, #45	; 0x2d
 801844e:	d132      	bne.n	80184b6 <_strtol_l.constprop.0+0x9a>
 8018450:	782c      	ldrb	r4, [r5, #0]
 8018452:	2701      	movs	r7, #1
 8018454:	1cb5      	adds	r5, r6, #2
 8018456:	2b00      	cmp	r3, #0
 8018458:	d05b      	beq.n	8018512 <_strtol_l.constprop.0+0xf6>
 801845a:	2b10      	cmp	r3, #16
 801845c:	d109      	bne.n	8018472 <_strtol_l.constprop.0+0x56>
 801845e:	2c30      	cmp	r4, #48	; 0x30
 8018460:	d107      	bne.n	8018472 <_strtol_l.constprop.0+0x56>
 8018462:	782c      	ldrb	r4, [r5, #0]
 8018464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018468:	2c58      	cmp	r4, #88	; 0x58
 801846a:	d14d      	bne.n	8018508 <_strtol_l.constprop.0+0xec>
 801846c:	786c      	ldrb	r4, [r5, #1]
 801846e:	2310      	movs	r3, #16
 8018470:	3502      	adds	r5, #2
 8018472:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018476:	f108 38ff 	add.w	r8, r8, #4294967295
 801847a:	f04f 0e00 	mov.w	lr, #0
 801847e:	fbb8 f9f3 	udiv	r9, r8, r3
 8018482:	4676      	mov	r6, lr
 8018484:	fb03 8a19 	mls	sl, r3, r9, r8
 8018488:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801848c:	f1bc 0f09 	cmp.w	ip, #9
 8018490:	d816      	bhi.n	80184c0 <_strtol_l.constprop.0+0xa4>
 8018492:	4664      	mov	r4, ip
 8018494:	42a3      	cmp	r3, r4
 8018496:	dd24      	ble.n	80184e2 <_strtol_l.constprop.0+0xc6>
 8018498:	f1be 3fff 	cmp.w	lr, #4294967295
 801849c:	d008      	beq.n	80184b0 <_strtol_l.constprop.0+0x94>
 801849e:	45b1      	cmp	r9, r6
 80184a0:	d31c      	bcc.n	80184dc <_strtol_l.constprop.0+0xc0>
 80184a2:	d101      	bne.n	80184a8 <_strtol_l.constprop.0+0x8c>
 80184a4:	45a2      	cmp	sl, r4
 80184a6:	db19      	blt.n	80184dc <_strtol_l.constprop.0+0xc0>
 80184a8:	fb06 4603 	mla	r6, r6, r3, r4
 80184ac:	f04f 0e01 	mov.w	lr, #1
 80184b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80184b4:	e7e8      	b.n	8018488 <_strtol_l.constprop.0+0x6c>
 80184b6:	2c2b      	cmp	r4, #43	; 0x2b
 80184b8:	bf04      	itt	eq
 80184ba:	782c      	ldrbeq	r4, [r5, #0]
 80184bc:	1cb5      	addeq	r5, r6, #2
 80184be:	e7ca      	b.n	8018456 <_strtol_l.constprop.0+0x3a>
 80184c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80184c4:	f1bc 0f19 	cmp.w	ip, #25
 80184c8:	d801      	bhi.n	80184ce <_strtol_l.constprop.0+0xb2>
 80184ca:	3c37      	subs	r4, #55	; 0x37
 80184cc:	e7e2      	b.n	8018494 <_strtol_l.constprop.0+0x78>
 80184ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80184d2:	f1bc 0f19 	cmp.w	ip, #25
 80184d6:	d804      	bhi.n	80184e2 <_strtol_l.constprop.0+0xc6>
 80184d8:	3c57      	subs	r4, #87	; 0x57
 80184da:	e7db      	b.n	8018494 <_strtol_l.constprop.0+0x78>
 80184dc:	f04f 3eff 	mov.w	lr, #4294967295
 80184e0:	e7e6      	b.n	80184b0 <_strtol_l.constprop.0+0x94>
 80184e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80184e6:	d105      	bne.n	80184f4 <_strtol_l.constprop.0+0xd8>
 80184e8:	2322      	movs	r3, #34	; 0x22
 80184ea:	6003      	str	r3, [r0, #0]
 80184ec:	4646      	mov	r6, r8
 80184ee:	b942      	cbnz	r2, 8018502 <_strtol_l.constprop.0+0xe6>
 80184f0:	4630      	mov	r0, r6
 80184f2:	e79e      	b.n	8018432 <_strtol_l.constprop.0+0x16>
 80184f4:	b107      	cbz	r7, 80184f8 <_strtol_l.constprop.0+0xdc>
 80184f6:	4276      	negs	r6, r6
 80184f8:	2a00      	cmp	r2, #0
 80184fa:	d0f9      	beq.n	80184f0 <_strtol_l.constprop.0+0xd4>
 80184fc:	f1be 0f00 	cmp.w	lr, #0
 8018500:	d000      	beq.n	8018504 <_strtol_l.constprop.0+0xe8>
 8018502:	1e69      	subs	r1, r5, #1
 8018504:	6011      	str	r1, [r2, #0]
 8018506:	e7f3      	b.n	80184f0 <_strtol_l.constprop.0+0xd4>
 8018508:	2430      	movs	r4, #48	; 0x30
 801850a:	2b00      	cmp	r3, #0
 801850c:	d1b1      	bne.n	8018472 <_strtol_l.constprop.0+0x56>
 801850e:	2308      	movs	r3, #8
 8018510:	e7af      	b.n	8018472 <_strtol_l.constprop.0+0x56>
 8018512:	2c30      	cmp	r4, #48	; 0x30
 8018514:	d0a5      	beq.n	8018462 <_strtol_l.constprop.0+0x46>
 8018516:	230a      	movs	r3, #10
 8018518:	e7ab      	b.n	8018472 <_strtol_l.constprop.0+0x56>
 801851a:	bf00      	nop
 801851c:	0801891b 	.word	0x0801891b

08018520 <_strtol_r>:
 8018520:	f7ff bf7c 	b.w	801841c <_strtol_l.constprop.0>

08018524 <_strtoul_l.constprop.0>:
 8018524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018528:	4f36      	ldr	r7, [pc, #216]	; (8018604 <_strtoul_l.constprop.0+0xe0>)
 801852a:	4686      	mov	lr, r0
 801852c:	460d      	mov	r5, r1
 801852e:	4628      	mov	r0, r5
 8018530:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018534:	5d3e      	ldrb	r6, [r7, r4]
 8018536:	f016 0608 	ands.w	r6, r6, #8
 801853a:	d1f8      	bne.n	801852e <_strtoul_l.constprop.0+0xa>
 801853c:	2c2d      	cmp	r4, #45	; 0x2d
 801853e:	d130      	bne.n	80185a2 <_strtoul_l.constprop.0+0x7e>
 8018540:	782c      	ldrb	r4, [r5, #0]
 8018542:	2601      	movs	r6, #1
 8018544:	1c85      	adds	r5, r0, #2
 8018546:	2b00      	cmp	r3, #0
 8018548:	d057      	beq.n	80185fa <_strtoul_l.constprop.0+0xd6>
 801854a:	2b10      	cmp	r3, #16
 801854c:	d109      	bne.n	8018562 <_strtoul_l.constprop.0+0x3e>
 801854e:	2c30      	cmp	r4, #48	; 0x30
 8018550:	d107      	bne.n	8018562 <_strtoul_l.constprop.0+0x3e>
 8018552:	7828      	ldrb	r0, [r5, #0]
 8018554:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018558:	2858      	cmp	r0, #88	; 0x58
 801855a:	d149      	bne.n	80185f0 <_strtoul_l.constprop.0+0xcc>
 801855c:	786c      	ldrb	r4, [r5, #1]
 801855e:	2310      	movs	r3, #16
 8018560:	3502      	adds	r5, #2
 8018562:	f04f 38ff 	mov.w	r8, #4294967295
 8018566:	2700      	movs	r7, #0
 8018568:	fbb8 f8f3 	udiv	r8, r8, r3
 801856c:	fb03 f908 	mul.w	r9, r3, r8
 8018570:	ea6f 0909 	mvn.w	r9, r9
 8018574:	4638      	mov	r0, r7
 8018576:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801857a:	f1bc 0f09 	cmp.w	ip, #9
 801857e:	d815      	bhi.n	80185ac <_strtoul_l.constprop.0+0x88>
 8018580:	4664      	mov	r4, ip
 8018582:	42a3      	cmp	r3, r4
 8018584:	dd23      	ble.n	80185ce <_strtoul_l.constprop.0+0xaa>
 8018586:	f1b7 3fff 	cmp.w	r7, #4294967295
 801858a:	d007      	beq.n	801859c <_strtoul_l.constprop.0+0x78>
 801858c:	4580      	cmp	r8, r0
 801858e:	d31b      	bcc.n	80185c8 <_strtoul_l.constprop.0+0xa4>
 8018590:	d101      	bne.n	8018596 <_strtoul_l.constprop.0+0x72>
 8018592:	45a1      	cmp	r9, r4
 8018594:	db18      	blt.n	80185c8 <_strtoul_l.constprop.0+0xa4>
 8018596:	fb00 4003 	mla	r0, r0, r3, r4
 801859a:	2701      	movs	r7, #1
 801859c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80185a0:	e7e9      	b.n	8018576 <_strtoul_l.constprop.0+0x52>
 80185a2:	2c2b      	cmp	r4, #43	; 0x2b
 80185a4:	bf04      	itt	eq
 80185a6:	782c      	ldrbeq	r4, [r5, #0]
 80185a8:	1c85      	addeq	r5, r0, #2
 80185aa:	e7cc      	b.n	8018546 <_strtoul_l.constprop.0+0x22>
 80185ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80185b0:	f1bc 0f19 	cmp.w	ip, #25
 80185b4:	d801      	bhi.n	80185ba <_strtoul_l.constprop.0+0x96>
 80185b6:	3c37      	subs	r4, #55	; 0x37
 80185b8:	e7e3      	b.n	8018582 <_strtoul_l.constprop.0+0x5e>
 80185ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80185be:	f1bc 0f19 	cmp.w	ip, #25
 80185c2:	d804      	bhi.n	80185ce <_strtoul_l.constprop.0+0xaa>
 80185c4:	3c57      	subs	r4, #87	; 0x57
 80185c6:	e7dc      	b.n	8018582 <_strtoul_l.constprop.0+0x5e>
 80185c8:	f04f 37ff 	mov.w	r7, #4294967295
 80185cc:	e7e6      	b.n	801859c <_strtoul_l.constprop.0+0x78>
 80185ce:	1c7b      	adds	r3, r7, #1
 80185d0:	d106      	bne.n	80185e0 <_strtoul_l.constprop.0+0xbc>
 80185d2:	2322      	movs	r3, #34	; 0x22
 80185d4:	f8ce 3000 	str.w	r3, [lr]
 80185d8:	4638      	mov	r0, r7
 80185da:	b932      	cbnz	r2, 80185ea <_strtoul_l.constprop.0+0xc6>
 80185dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185e0:	b106      	cbz	r6, 80185e4 <_strtoul_l.constprop.0+0xc0>
 80185e2:	4240      	negs	r0, r0
 80185e4:	2a00      	cmp	r2, #0
 80185e6:	d0f9      	beq.n	80185dc <_strtoul_l.constprop.0+0xb8>
 80185e8:	b107      	cbz	r7, 80185ec <_strtoul_l.constprop.0+0xc8>
 80185ea:	1e69      	subs	r1, r5, #1
 80185ec:	6011      	str	r1, [r2, #0]
 80185ee:	e7f5      	b.n	80185dc <_strtoul_l.constprop.0+0xb8>
 80185f0:	2430      	movs	r4, #48	; 0x30
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d1b5      	bne.n	8018562 <_strtoul_l.constprop.0+0x3e>
 80185f6:	2308      	movs	r3, #8
 80185f8:	e7b3      	b.n	8018562 <_strtoul_l.constprop.0+0x3e>
 80185fa:	2c30      	cmp	r4, #48	; 0x30
 80185fc:	d0a9      	beq.n	8018552 <_strtoul_l.constprop.0+0x2e>
 80185fe:	230a      	movs	r3, #10
 8018600:	e7af      	b.n	8018562 <_strtoul_l.constprop.0+0x3e>
 8018602:	bf00      	nop
 8018604:	0801891b 	.word	0x0801891b

08018608 <_strtoul_r>:
 8018608:	f7ff bf8c 	b.w	8018524 <_strtoul_l.constprop.0>

0801860c <_malloc_usable_size_r>:
 801860c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018610:	1f18      	subs	r0, r3, #4
 8018612:	2b00      	cmp	r3, #0
 8018614:	bfbc      	itt	lt
 8018616:	580b      	ldrlt	r3, [r1, r0]
 8018618:	18c0      	addlt	r0, r0, r3
 801861a:	4770      	bx	lr

0801861c <_init>:
 801861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801861e:	bf00      	nop
 8018620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018622:	bc08      	pop	{r3}
 8018624:	469e      	mov	lr, r3
 8018626:	4770      	bx	lr

08018628 <_fini>:
 8018628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801862a:	bf00      	nop
 801862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801862e:	bc08      	pop	{r3}
 8018630:	469e      	mov	lr, r3
 8018632:	4770      	bx	lr
