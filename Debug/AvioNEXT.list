
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da94  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800dd68  0800dd68  0001dd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800deb8  0800deb8  0001deb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800debc  0800debc  0001debc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800dec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016d4  24000074  0800df34  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001748  0800df34  00021748  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029c73  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c10  00000000  00000000  00049d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020b0  00000000  00000000  0004d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001f58  00000000  00000000  0004f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037da0  00000000  00000000  00051930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029396  00000000  00000000  000896d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172cb2  00000000  00000000  000b2a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00225718  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009274  00000000  00000000  00225768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dd4c 	.word	0x0800dd4c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800dd4c 	.word	0x0800dd4c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <setLEDs>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int datasentflag = 0;

void setLEDs(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b08e      	sub	sp, #56	; 0x38
 8000618:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800061a:	2300      	movs	r3, #0
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
 800061e:	e181      	b.n	8000924 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000620:	4aa1      	ldr	r2, [pc, #644]	; (80008a8 <setLEDs+0x294>)
 8000622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000624:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000628:	2b03      	cmp	r3, #3
 800062a:	f200 8177 	bhi.w	800091c <setLEDs+0x308>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <setLEDs+0x20>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000645 	.word	0x08000645
 8000638:	080006f5 	.word	0x080006f5
 800063c:	080007a5 	.word	0x080007a5
 8000640:	08000855 	.word	0x08000855
		case 0:
			for (int j = 0; j < 3; j++) {
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
 8000648:	e042      	b.n	80006d0 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 800064a:	2300      	movs	r3, #0
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800064e:	e039      	b.n	80006c4 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000650:	4996      	ldr	r1, [pc, #600]	; (80008ac <setLEDs+0x298>)
 8000652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800065c:	4413      	add	r3, r2
 800065e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000666:	fa41 f202 	asr.w	r2, r1, r2
 800066a:	4013      	ands	r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d013      	beq.n	8000698 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000672:	00da      	lsls	r2, r3, #3
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	18d1      	adds	r1, r2, r3
 8000678:	4a8b      	ldr	r2, [pc, #556]	; (80008a8 <setLEDs+0x294>)
 800067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	4413      	add	r3, r2
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	440b      	add	r3, r1
 800068c:	3308      	adds	r3, #8
 800068e:	4a88      	ldr	r2, [pc, #544]	; (80008b0 <setLEDs+0x29c>)
 8000690:	213c      	movs	r1, #60	; 0x3c
 8000692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000696:	e012      	b.n	80006be <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069a:	00da      	lsls	r2, r3, #3
 800069c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069e:	18d1      	adds	r1, r2, r3
 80006a0:	4a81      	ldr	r2, [pc, #516]	; (80008a8 <setLEDs+0x294>)
 80006a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4413      	add	r3, r2
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	440b      	add	r3, r1
 80006b4:	3308      	adds	r3, #8
 80006b6:	4a7e      	ldr	r2, [pc, #504]	; (80008b0 <setLEDs+0x29c>)
 80006b8:	211e      	movs	r1, #30
 80006ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c0:	3301      	adds	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c6:	2b07      	cmp	r3, #7
 80006c8:	ddc2      	ble.n	8000650 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 80006ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006cc:	3301      	adds	r3, #1
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
 80006d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	ddb9      	ble.n	800064a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80006da:	e007      	b.n	80006ec <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 80006dc:	4a74      	ldr	r2, [pc, #464]	; (80008b0 <setLEDs+0x29c>)
 80006de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e0:	2100      	movs	r1, #0
 80006e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80006e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e8:	3301      	adds	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80006ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ee:	2bb1      	cmp	r3, #177	; 0xb1
 80006f0:	ddf4      	ble.n	80006dc <setLEDs+0xc8>
			}
			break;
 80006f2:	e114      	b.n	800091e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
 80006f8:	e042      	b.n	8000780 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
 80006fe:	e039      	b.n	8000774 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000700:	496a      	ldr	r1, [pc, #424]	; (80008ac <setLEDs+0x298>)
 8000702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	4413      	add	r3, r2
 800070e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	6a3a      	ldr	r2, [r7, #32]
 8000716:	fa41 f202 	asr.w	r2, r1, r2
 800071a:	4013      	ands	r3, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d013      	beq.n	8000748 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	00da      	lsls	r2, r3, #3
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	18d1      	adds	r1, r2, r3
 8000728:	4a5f      	ldr	r2, [pc, #380]	; (80008a8 <setLEDs+0x294>)
 800072a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4413      	add	r3, r2
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	440b      	add	r3, r1
 800073c:	3308      	adds	r3, #8
 800073e:	4a5d      	ldr	r2, [pc, #372]	; (80008b4 <setLEDs+0x2a0>)
 8000740:	213c      	movs	r1, #60	; 0x3c
 8000742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000746:	e012      	b.n	800076e <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	00da      	lsls	r2, r3, #3
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	18d1      	adds	r1, r2, r3
 8000750:	4a55      	ldr	r2, [pc, #340]	; (80008a8 <setLEDs+0x294>)
 8000752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	440b      	add	r3, r1
 8000764:	3308      	adds	r3, #8
 8000766:	4a53      	ldr	r2, [pc, #332]	; (80008b4 <setLEDs+0x2a0>)
 8000768:	211e      	movs	r1, #30
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	3301      	adds	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	2b07      	cmp	r3, #7
 8000778:	ddc2      	ble.n	8000700 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	3301      	adds	r3, #1
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	2b02      	cmp	r3, #2
 8000784:	ddb9      	ble.n	80006fa <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	e007      	b.n	800079c <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 800078c:	4a49      	ldr	r2, [pc, #292]	; (80008b4 <setLEDs+0x2a0>)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2100      	movs	r1, #0
 8000792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3301      	adds	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	2bb1      	cmp	r3, #177	; 0xb1
 80007a0:	ddf4      	ble.n	800078c <setLEDs+0x178>
			}
			break;
 80007a2:	e0bc      	b.n	800091e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e042      	b.n	8000830 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e039      	b.n	8000824 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80007b0:	493e      	ldr	r1, [pc, #248]	; (80008ac <setLEDs+0x298>)
 80007b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	69ba      	ldr	r2, [r7, #24]
 80007bc:	4413      	add	r3, r2
 80007be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	fa41 f202 	asr.w	r2, r1, r2
 80007ca:	4013      	ands	r3, r2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d013      	beq.n	80007f8 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	00da      	lsls	r2, r3, #3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	18d1      	adds	r1, r2, r3
 80007d8:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <setLEDs+0x294>)
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	3308      	adds	r3, #8
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <setLEDs+0x2a4>)
 80007f0:	213c      	movs	r1, #60	; 0x3c
 80007f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007f6:	e012      	b.n	800081e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	00da      	lsls	r2, r3, #3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	18d1      	adds	r1, r2, r3
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <setLEDs+0x294>)
 8000802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <setLEDs+0x2a4>)
 8000818:	211e      	movs	r1, #30
 800081a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	2b07      	cmp	r3, #7
 8000828:	ddc2      	ble.n	80007b0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3301      	adds	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	2b02      	cmp	r3, #2
 8000834:	ddb9      	ble.n	80007aa <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000836:	2338      	movs	r3, #56	; 0x38
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	e007      	b.n	800084c <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <setLEDs+0x2a4>)
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	2100      	movs	r1, #0
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	3301      	adds	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	2b69      	cmp	r3, #105	; 0x69
 8000850:	ddf4      	ble.n	800083c <setLEDs+0x228>
			}
			break;
 8000852:	e064      	b.n	800091e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e04e      	b.n	80008f8 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	e045      	b.n	80008ec <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000860:	4912      	ldr	r1, [pc, #72]	; (80008ac <setLEDs+0x298>)
 8000862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	fa41 f202 	asr.w	r2, r1, r2
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01f      	beq.n	80008c0 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	00da      	lsls	r2, r3, #3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	18d1      	adds	r1, r2, r3
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <setLEDs+0x294>)
 800088a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	3308      	adds	r3, #8
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <setLEDs+0x2a8>)
 80008a0:	213c      	movs	r1, #60	; 0x3c
 80008a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008a6:	e01e      	b.n	80008e6 <setLEDs+0x2d2>
 80008a8:	0800ddb4 	.word	0x0800ddb4
 80008ac:	24000970 	.word	0x24000970
 80008b0:	24000090 	.word	0x24000090
 80008b4:	24000358 	.word	0x24000358
 80008b8:	24000620 	.word	0x24000620
 80008bc:	240007c8 	.word	0x240007c8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	00da      	lsls	r2, r3, #3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	18d1      	adds	r1, r2, r3
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <setLEDs+0x350>)
 80008ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4413      	add	r3, r2
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3308      	adds	r3, #8
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <setLEDs+0x354>)
 80008e0:	211e      	movs	r1, #30
 80008e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	ddb6      	ble.n	8000860 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	ddad      	ble.n	800085a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80008fe:	2338      	movs	r3, #56	; 0x38
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	e007      	b.n	8000914 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000904:	4a18      	ldr	r2, [pc, #96]	; (8000968 <setLEDs+0x354>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2100      	movs	r1, #0
 800090a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3301      	adds	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b69      	cmp	r3, #105	; 0x69
 8000918:	ddf4      	ble.n	8000904 <setLEDs+0x2f0>
			}
			break;
 800091a:	e000      	b.n	800091e <setLEDs+0x30a>
		default:
			break;
 800091c:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000920:	3301      	adds	r3, #1
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
 8000924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000926:	2b0d      	cmp	r3, #13
 8000928:	f77f ae7a 	ble.w	8000620 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 800092c:	23b2      	movs	r3, #178	; 0xb2
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <setLEDs+0x358>)
 8000930:	210c      	movs	r1, #12
 8000932:	480f      	ldr	r0, [pc, #60]	; (8000970 <setLEDs+0x35c>)
 8000934:	f00a f9de 	bl	800acf4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000938:	23b2      	movs	r3, #178	; 0xb2
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <setLEDs+0x360>)
 800093c:	2108      	movs	r1, #8
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <setLEDs+0x364>)
 8000940:	f00a f9d8 	bl	800acf4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000944:	236a      	movs	r3, #106	; 0x6a
 8000946:	4a0d      	ldr	r2, [pc, #52]	; (800097c <setLEDs+0x368>)
 8000948:	2104      	movs	r1, #4
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <setLEDs+0x36c>)
 800094c:	f00a f9d2 	bl	800acf4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000950:	236a      	movs	r3, #106	; 0x6a
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <setLEDs+0x354>)
 8000954:	2100      	movs	r1, #0
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <setLEDs+0x36c>)
 8000958:	f00a f9cc 	bl	800acf4 <HAL_TIM_PWM_Start_DMA>

}
 800095c:	bf00      	nop
 800095e:	3738      	adds	r7, #56	; 0x38
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	0800ddb4 	.word	0x0800ddb4
 8000968:	240007c8 	.word	0x240007c8
 800096c:	24000090 	.word	0x24000090
 8000970:	24000e68 	.word	0x24000e68
 8000974:	24000358 	.word	0x24000358
 8000978:	24000d84 	.word	0x24000d84
 800097c:	24000620 	.word	0x24000620
 8000980:	24000dd0 	.word	0x24000dd0

08000984 <HAL_TIM_PWM_PulseFinishedCallback>:
//	while (!datasentflag) {
//	};
//	datasentflag = 0;
//}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	//TIM2->CCR3= 0;
	datasentflag = 1;
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	24001740 	.word	0x24001740
 80009a4:	00000000 	.word	0x00000000

080009a8 <triangle_space>:
  */

//this function looks like this: /\_/\_/\_/\_
//so it's triangles with spaces between them
double triangle_space(double x)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	ed87 0b00 	vstr	d0, [r7]
	const double LENGTH = 3;
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <triangle_space+0xb0>)
 80009b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double normalized = fmod(fabs(x),LENGTH);
 80009bc:	ed97 7b00 	vldr	d7, [r7]
 80009c0:	eeb0 7bc7 	vabs.f64	d7, d7
 80009c4:	ed97 1b04 	vldr	d1, [r7, #16]
 80009c8:	eeb0 0b47 	vmov.f64	d0, d7
 80009cc:	f00d f888 	bl	800dae0 <fmod>
 80009d0:	ed87 0b02 	vstr	d0, [r7, #8]
	if(normalized <= LENGTH/3)
 80009d4:	ed97 6b04 	vldr	d6, [r7, #16]
 80009d8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80009dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009e0:	ed97 6b02 	vldr	d6, [r7, #8]
 80009e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ec:	d80a      	bhi.n	8000a04 <triangle_space+0x5c>
	{
		return LENGTH/3 - normalized;
 80009ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80009f2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80009f6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80009fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80009fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a02:	e01d      	b.n	8000a40 <triangle_space+0x98>
	}
	else if(normalized <= LENGTH*2/3)
 8000a04:	ed97 7b04 	vldr	d7, [r7, #16]
 8000a08:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000a0c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000a10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a14:	ed97 6b02 	vldr	d6, [r7, #8]
 8000a18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a20:	d802      	bhi.n	8000a28 <triangle_space+0x80>
	{
		return 0;
 8000a22:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000a50 <triangle_space+0xa8>
 8000a26:	e00b      	b.n	8000a40 <triangle_space+0x98>
	}
	else
	{
		return normalized - LENGTH*2/3;
 8000a28:	ed97 7b04 	vldr	d7, [r7, #16]
 8000a2c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000a30:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000a34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a38:	ed97 6b02 	vldr	d6, [r7, #8]
 8000a3c:	ee36 7b47 	vsub.f64	d7, d6, d7
	}
}
 8000a40:	eeb0 0b47 	vmov.f64	d0, d7
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	f3af 8000 	nop.w
	...
 8000a58:	40080000 	.word	0x40080000

08000a5c <main>:

int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	ed2d 8b02 	vpush	{d8}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f001 fe0d 	bl	8002684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f8d7 	bl	8000c1c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a6e:	f000 f951 	bl	8000d14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 fe87 	bl	8001784 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a76:	f000 fe45 	bl	8001704 <MX_DMA_Init>
  MX_UART4_Init();
 8000a7a:	f000 fd79 	bl	8001570 <MX_UART4_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000a7e:	f000 fe0f 	bl	80016a0 <MX_USB_OTG_HS_PCD_Init>
  MX_SPI3_Init();
 8000a82:	f000 fbaf 	bl	80011e4 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000a86:	f000 fa5d 	bl	8000f44 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000a8a:	f000 fdbd 	bl	8001608 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000a8e:	f000 f973 	bl	8000d78 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000a92:	f000 fcb9 	bl	8001408 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000a96:	f000 f9e7 	bl	8000e68 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000a9a:	f000 faf7 	bl	800108c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a9e:	f000 fb4b 	bl	8001138 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000aa2:	f000 fab3 	bl	800100c <MX_I2C2_Init>
  MX_TIM2_Init();
 8000aa6:	f000 fbf3 	bl	8001290 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000aaa:	f000 fd07 	bl	80014bc <MX_TIM5_Init>
  MX_TIM3_Init();
 8000aae:	f000 fc47 	bl	8001340 <MX_TIM3_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
		//WS2812_Send();
		//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
		//TIM4->CCR3 = *ptr;
		for(int i = 0; i < 14; i++){
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ab6:	e09c      	b.n	8000bf2 <main+0x196>
			/*
			LED_Color_Data[i][0] = 0;
			LED_Color_Data[i][1] = 0;
			LED_Color_Data[i][2] = 100;
			*/
			const int MAX = 155;
 8000ab8:	239b      	movs	r3, #155	; 0x9b
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
			const double SPEED = 2000;
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	4b51      	ldr	r3, [pc, #324]	; (8000c08 <main+0x1ac>)
 8000ac2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			int time = HAL_GetTick();
 8000ac6:	f001 fe63 	bl	8002790 <HAL_GetTick>
 8000aca:	4603      	mov	r3, r0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
			double height_offset = LED_order[i]*1.0/LED_num_max;//LED_heights_mm[i]*4.0/LED_length;
 8000ace:	4a4f      	ldr	r2, [pc, #316]	; (8000c0c <main+0x1b0>)
 8000ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000ade:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8000c10 <main+0x1b4>
 8000ae2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ae6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000aea:	ed87 7b08 	vstr	d7, [r7, #32]
			double color_offset = time/SPEED + height_offset;
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000af8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000afc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b00:	ed97 6b08 	vldr	d6, [r7, #32]
 8000b04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b08:	ed87 7b06 	vstr	d7, [r7, #24]
			const double r_offset = 0;
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	e9c7 2304 	strd	r2, r3, [r7, #16]
			const double g_offset = 1;
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	4b3d      	ldr	r3, [pc, #244]	; (8000c14 <main+0x1b8>)
 8000b1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
			const double b_offset = 2;
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b2a:	e9c7 2300 	strd	r2, r3, [r7]
			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000b38:	ed97 6b06 	vldr	d6, [r7, #24]
 8000b3c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b44:	eeb0 0b47 	vmov.f64	d0, d7
 8000b48:	f7ff ff2e 	bl	80009a8 <triangle_space>
 8000b4c:	eeb0 7b40 	vmov.f64	d7, d0
 8000b50:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b58:	ee17 0a90 	vmov	r0, s15
 8000b5c:	492e      	ldr	r1, [pc, #184]	; (8000c18 <main+0x1bc>)
 8000b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
 8000b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000b76:	ed97 6b06 	vldr	d6, [r7, #24]
 8000b7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b82:	eeb0 0b47 	vmov.f64	d0, d7
 8000b86:	f7ff ff0f 	bl	80009a8 <triangle_space>
 8000b8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b8e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b96:	ee17 0a90 	vmov	r0, s15
 8000b9a:	491f      	ldr	r1, [pc, #124]	; (8000c18 <main+0x1bc>)
 8000b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	3304      	adds	r3, #4
 8000baa:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
 8000bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000bb6:	ed97 6b06 	vldr	d6, [r7, #24]
 8000bba:	ed97 7b00 	vldr	d7, [r7]
 8000bbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bc2:	eeb0 0b47 	vmov.f64	d0, d7
 8000bc6:	f7ff feef 	bl	80009a8 <triangle_space>
 8000bca:	eeb0 7b40 	vmov.f64	d7, d0
 8000bce:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000bd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bd6:	ee17 0a90 	vmov	r0, s15
 8000bda:	490f      	ldr	r1, [pc, #60]	; (8000c18 <main+0x1bc>)
 8000bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3308      	adds	r3, #8
 8000bea:	6018      	str	r0, [r3, #0]
		for(int i = 0; i < 14; i++){
 8000bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bee:	3301      	adds	r3, #1
 8000bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf4:	2b0d      	cmp	r3, #13
 8000bf6:	f77f af5f 	ble.w	8000ab8 <main+0x5c>
		}
		//LED_Color_Data[4][1] = 0;
		//LED_Color_Data[7][2] = 0;
		setLEDs();
 8000bfa:	f7ff fd0b 	bl	8000614 <setLEDs>
		HAL_Delay(10);
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f001 fdd2 	bl	80027a8 <HAL_Delay>
		for(int i = 0; i < 14; i++){
 8000c04:	e755      	b.n	8000ab2 <main+0x56>
 8000c06:	bf00      	nop
 8000c08:	409f4000 	.word	0x409f4000
 8000c0c:	0800de24 	.word	0x0800de24
 8000c10:	00000006 	.word	0x00000006
 8000c14:	3ff00000 	.word	0x3ff00000
 8000c18:	24000970 	.word	0x24000970

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09c      	sub	sp, #112	; 0x70
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	224c      	movs	r2, #76	; 0x4c
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00c ff50 	bl	800dad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00c ff4a 	bl	800dad0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f006 fac3 	bl	80071c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <SystemClock_Config+0xf4>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c4e:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <SystemClock_Config+0xf4>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <SystemClock_Config+0xf4>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c62:	bf00      	nop
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <SystemClock_Config+0xf4>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c70:	d1f8      	bne.n	8000c64 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000c72:	2323      	movs	r3, #35	; 0x23
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c90:	2304      	movs	r3, #4
 8000c92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000c94:	2312      	movs	r3, #18
 8000c96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 fad1 	bl	800725c <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cc0:	f000 fe4c 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	233f      	movs	r3, #63	; 0x3f
 8000cc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000cd8:	2350      	movs	r3, #80	; 0x50
 8000cda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ce2:	2340      	movs	r3, #64	; 0x40
 8000ce4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f006 fe90 	bl	8007a10 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000cf6:	f000 fe31 	bl	800195c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000cfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2000      	movs	r0, #0
 8000d02:	f007 f83b 	bl	8007d7c <HAL_RCC_MCOConfig>
}
 8000d06:	bf00      	nop
 8000d08:	3770      	adds	r7, #112	; 0x70
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	58024800 	.word	0x58024800

08000d14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0ae      	sub	sp, #184	; 0xb8
 8000d18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	22b8      	movs	r2, #184	; 0xb8
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00c fed5 	bl	800dad0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8000d26:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d36:	230c      	movs	r3, #12
 8000d38:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d46:	23c0      	movs	r3, #192	; 0xc0
 8000d48:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4618      	mov	r0, r3
 8000d62:	f007 fa4b 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000d6c:	f000 fdf6 	bl	800195c <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	37b8      	adds	r7, #184	; 0xb8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2224      	movs	r2, #36	; 0x24
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00c fe9d 	bl	800dad0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000d98:	4a31      	ldr	r2, [pc, #196]	; (8000e60 <MX_ADC1_Init+0xe8>)
 8000d9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	4819      	ldr	r0, [pc, #100]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000df6:	f001 ff41 	bl	8002c7c <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e00:	f000 fdac 	bl	800195c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4813      	ldr	r0, [pc, #76]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000e10:	f002 ff7c 	bl	8003d0c <HAL_ADCEx_MultiModeConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e1a:	f000 fd9f 	bl	800195c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_ADC1_Init+0xec>)
 8000e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e22:	2306      	movs	r3, #6
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e30:	2304      	movs	r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_ADC1_Init+0xe4>)
 8000e44:	f002 f922 	bl	800308c <HAL_ADC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000e4e:	f000 fd85 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000a18 	.word	0x24000a18
 8000e60:	40022000 	.word	0x40022000
 8000e64:	2a000400 	.word	0x2a000400

08000e68 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2224      	movs	r2, #36	; 0x24
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f00c fe2b 	bl	800dad0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000e7c:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <MX_ADC3_Init+0xd4>)
 8000e7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eec:	4812      	ldr	r0, [pc, #72]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000eee:	f001 fec5 	bl	8002c7c <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000ef8:	f000 fd30 	bl	800195c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_ADC3_Init+0xd8>)
 8000efe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f00:	2306      	movs	r3, #6
 8000f02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_ADC3_Init+0xd0>)
 8000f20:	f002 f8b4 	bl	800308c <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000f2a:	f000 fd17 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000a88 	.word	0x24000a88
 8000f3c:	58026000 	.word	0x58026000
 8000f40:	10c00010 	.word	0x10c00010

08000f44 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <MX_FDCAN3_Init+0xc4>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f6e:	2210      	movs	r2, #16
 8000f70:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000fec:	2204      	movs	r2, #4
 8000fee:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_FDCAN3_Init+0xc0>)
 8000ff2:	f005 f953 	bl	800629c <HAL_FDCAN_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000ffc:	f000 fcae 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	24000af8 	.word	0x24000af8
 8001008:	4000d400 	.word	0x4000d400

0800100c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_I2C2_Init+0x74>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <MX_I2C2_Init+0x78>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_I2C2_Init+0x74>)
 8001018:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <MX_I2C2_Init+0x7c>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_I2C2_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_I2C2_Init+0x74>)
 8001024:	2201      	movs	r2, #1
 8001026:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_I2C2_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_I2C2_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_I2C2_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_I2C2_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_I2C2_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_I2C2_Init+0x74>)
 8001048:	f005 fe4e 	bl	8006ce8 <HAL_I2C_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001052:	f000 fc83 	bl	800195c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <MX_I2C2_Init+0x74>)
 800105a:	f005 fed5 	bl	8006e08 <HAL_I2CEx_ConfigAnalogFilter>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001064:	f000 fc7a 	bl	800195c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_I2C2_Init+0x74>)
 800106c:	f005 ff17 	bl	8006e9e <HAL_I2CEx_ConfigDigitalFilter>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 fc71 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000b98 	.word	0x24000b98
 8001084:	40005800 	.word	0x40005800
 8001088:	00808cd2 	.word	0x00808cd2

0800108c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <MX_SPI1_Init+0xa4>)
 8001092:	4a28      	ldr	r2, [pc, #160]	; (8001134 <MX_SPI1_Init+0xa8>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_SPI1_Init+0xa4>)
 8001098:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800109c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010a6:	2203      	movs	r2, #3
 80010a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_SPI1_Init+0xa4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_SPI1_Init+0xa4>)
 8001104:	2200      	movs	r2, #0
 8001106:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_SPI1_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_SPI1_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_SPI1_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_SPI1_Init+0xa4>)
 800111c:	f009 fc54 	bl	800a9c8 <HAL_SPI_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001126:	f000 fc19 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24000bec 	.word	0x24000bec
 8001134:	40013000 	.word	0x40013000

08001138 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_SPI2_Init+0xa4>)
 800113e:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <MX_SPI2_Init+0xa8>)
 8001140:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001144:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001148:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_SPI2_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001152:	2203      	movs	r2, #3
 8001154:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_SPI2_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001164:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001168:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_SPI2_Init+0xa4>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI2_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI2_Init+0xa4>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI2_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI2_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI2_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI2_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SPI2_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI2_Init+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SPI2_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI2_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_SPI2_Init+0xa4>)
 80011c8:	f009 fbfe 	bl	800a9c8 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80011d2:	f000 fbc3 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000c74 	.word	0x24000c74
 80011e0:	40003800 	.word	0x40003800

080011e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_SPI3_Init+0xa4>)
 80011ea:	4a28      	ldr	r2, [pc, #160]	; (800128c <MX_SPI3_Init+0xa8>)
 80011ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_SPI3_Init+0xa4>)
 80011f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_SPI3_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_SPI3_Init+0xa4>)
 80011fe:	2203      	movs	r2, #3
 8001200:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_SPI3_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001210:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001214:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_SPI3_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_SPI3_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_SPI3_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_SPI3_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_SPI3_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_SPI3_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_SPI3_Init+0xa4>)
 8001274:	f009 fba8 	bl	800a9c8 <HAL_SPI_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800127e:	f000 fb6d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	24000cfc 	.word	0x24000cfc
 800128c:	40003c00 	.word	0x40003c00

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_TIM2_Init+0xac>)
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_TIM2_Init+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_TIM2_Init+0xac>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_TIM2_Init+0xac>)
 80012ca:	225a      	movs	r2, #90	; 0x5a
 80012cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM2_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM2_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM2_Init+0xac>)
 80012dc:	f009 fcb3 	bl	800ac46 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e6:	f000 fb39 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_TIM2_Init+0xac>)
 80012fa:	f00a fe13 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 fb2a 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	2208      	movs	r2, #8
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM2_Init+0xac>)
 8001320:	f00a f83c 	bl	800b39c <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800132a:	f000 fb17 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM2_Init+0xac>)
 8001330:	f000 fef4 	bl	800211c <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	24000d84 	.word	0x24000d84

08001340 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_TIM3_Init+0xc0>)
 8001366:	4a27      	ldr	r2, [pc, #156]	; (8001404 <MX_TIM3_Init+0xc4>)
 8001368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MX_TIM3_Init+0xc0>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <MX_TIM3_Init+0xc0>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <MX_TIM3_Init+0xc0>)
 8001378:	225a      	movs	r2, #90	; 0x5a
 800137a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_TIM3_Init+0xc0>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_TIM3_Init+0xc0>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001388:	481d      	ldr	r0, [pc, #116]	; (8001400 <MX_TIM3_Init+0xc0>)
 800138a:	f009 fc5c 	bl	800ac46 <HAL_TIM_PWM_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fae2 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <MX_TIM3_Init+0xc0>)
 80013a8:	f00a fdbc 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013b2:	f000 fad3 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b6:	2360      	movs	r3, #96	; 0x60
 80013b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_TIM3_Init+0xc0>)
 80013ce:	f009 ffe5 	bl	800b39c <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013d8:	f000 fac0 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_TIM3_Init+0xc0>)
 80013e4:	f009 ffda 	bl	800b39c <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013ee:	f000 fab5 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f2:	4803      	ldr	r0, [pc, #12]	; (8001400 <MX_TIM3_Init+0xc0>)
 80013f4:	f000 fe92 	bl	800211c <HAL_TIM_MspPostInit>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24000dd0 	.word	0x24000dd0
 8001404:	40000400 	.word	0x40000400

08001408 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_TIM4_Init+0xac>)
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <MX_TIM4_Init+0xb0>)
 8001430:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_TIM4_Init+0xac>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_TIM4_Init+0xac>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_TIM4_Init+0xac>)
 8001440:	225a      	movs	r2, #90	; 0x5a
 8001442:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_TIM4_Init+0xac>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM4_Init+0xac>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_TIM4_Init+0xac>)
 8001452:	f009 fbf8 	bl	800ac46 <HAL_TIM_PWM_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800145c:	f000 fa7e 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_TIM4_Init+0xac>)
 8001470:	f00a fd58 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800147a:	f000 fa6f 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	2208      	movs	r2, #8
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM4_Init+0xac>)
 8001496:	f009 ff81 	bl	800b39c <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80014a0:	f000 fa5c 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM4_Init+0xac>)
 80014a6:	f000 fe39 	bl	800211c <HAL_TIM_MspPostInit>

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	24000e1c 	.word	0x24000e1c
 80014b8:	40000800 	.word	0x40000800

080014bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_TIM5_Init+0xac>)
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <MX_TIM5_Init+0xb0>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_TIM5_Init+0xac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_TIM5_Init+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_TIM5_Init+0xac>)
 80014f4:	225a      	movs	r2, #90	; 0x5a
 80014f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_TIM5_Init+0xac>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_TIM5_Init+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001504:	4818      	ldr	r0, [pc, #96]	; (8001568 <MX_TIM5_Init+0xac>)
 8001506:	f009 fb9e 	bl	800ac46 <HAL_TIM_PWM_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001510:	f000 fa24 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4811      	ldr	r0, [pc, #68]	; (8001568 <MX_TIM5_Init+0xac>)
 8001524:	f00a fcfe 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800152e:	f000 fa15 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001532:	2360      	movs	r3, #96	; 0x60
 8001534:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	220c      	movs	r2, #12
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM5_Init+0xac>)
 800154a:	f009 ff27 	bl	800b39c <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001554:	f000 fa02 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM5_Init+0xac>)
 800155a:	f000 fddf 	bl	800211c <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	24000e68 	.word	0x24000e68
 800156c:	40000c00 	.word	0x40000c00

08001570 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_UART4_Init+0x90>)
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <MX_UART4_Init+0x94>)
 8001578:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_UART4_Init+0x90>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_UART4_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_UART4_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_UART4_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_UART4_Init+0x90>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_UART4_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_UART4_Init+0x90>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_UART4_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_UART4_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_UART4_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <MX_UART4_Init+0x90>)
 80015ba:	f00a fd6d 	bl	800c098 <HAL_UART_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015c4:	f000 f9ca 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c8:	2100      	movs	r1, #0
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_UART4_Init+0x90>)
 80015cc:	f00b fe73 	bl	800d2b6 <HAL_UARTEx_SetTxFifoThreshold>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015d6:	f000 f9c1 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <MX_UART4_Init+0x90>)
 80015de:	f00b fea8 	bl	800d332 <HAL_UARTEx_SetRxFifoThreshold>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f000 f9b8 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <MX_UART4_Init+0x90>)
 80015ee:	f00b fe29 	bl	800d244 <HAL_UARTEx_DisableFifoMode>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f000 f9b0 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2400110c 	.word	0x2400110c
 8001604:	40004c00 	.word	0x40004c00

08001608 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_USART6_UART_Init+0x90>)
 800160e:	4a23      	ldr	r2, [pc, #140]	; (800169c <MX_USART6_UART_Init+0x94>)
 8001610:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_USART6_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_USART6_UART_Init+0x90>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_USART6_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_USART6_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001652:	f00a fd21 	bl	800c098 <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800165c:	f000 f97e 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001664:	f00b fe27 	bl	800d2b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800166e:	f000 f975 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001672:	2100      	movs	r1, #0
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001676:	f00b fe5c 	bl	800d332 <HAL_UARTEx_SetRxFifoThreshold>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001680:	f000 f96c 	bl	800195c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_USART6_UART_Init+0x90>)
 8001686:	f00b fddd 	bl	800d244 <HAL_UARTEx_DisableFifoMode>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001690:	f000 f964 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	240011a0 	.word	0x240011a0
 800169c:	40011400 	.word	0x40011400

080016a0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <MX_USB_OTG_HS_PCD_Init+0x60>)
 80016a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016ac:	2209      	movs	r2, #9
 80016ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016b2:	2202      	movs	r2, #2
 80016b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016be:	2202      	movs	r2, #2
 80016c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016e8:	f005 fc25 	bl	8006f36 <HAL_PCD_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 80016f2:	f000 f933 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24001234 	.word	0x24001234
 8001700:	40040000 	.word	0x40040000

08001704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_DMA_Init+0x7c>)
 800170c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <MX_DMA_Init+0x7c>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_DMA_Init+0x7c>)
 800171c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	200b      	movs	r0, #11
 800172e:	f002 fcaa 	bl	8004086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001732:	200b      	movs	r0, #11
 8001734:	f002 fcc1 	bl	80040ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	200c      	movs	r0, #12
 800173e:	f002 fca2 	bl	8004086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001742:	200c      	movs	r0, #12
 8001744:	f002 fcb9 	bl	80040ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	200d      	movs	r0, #13
 800174e:	f002 fc9a 	bl	8004086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001752:	200d      	movs	r0, #13
 8001754:	f002 fcb1 	bl	80040ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	200e      	movs	r0, #14
 800175e:	f002 fc92 	bl	8004086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001762:	200e      	movs	r0, #14
 8001764:	f002 fca9 	bl	80040ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	200f      	movs	r0, #15
 800176e:	f002 fc8a 	bl	8004086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001772:	200f      	movs	r0, #15
 8001774:	f002 fca1 	bl	80040ba <HAL_NVIC_EnableIRQ>

}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58024400 	.word	0x58024400

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	4b6b      	ldr	r3, [pc, #428]	; (8001948 <MX_GPIO_Init+0x1c4>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	4a69      	ldr	r2, [pc, #420]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017aa:	4b67      	ldr	r3, [pc, #412]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b8:	4b63      	ldr	r3, [pc, #396]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	4a62      	ldr	r2, [pc, #392]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c8:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	4b5c      	ldr	r3, [pc, #368]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	4a5a      	ldr	r2, [pc, #360]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e6:	4b58      	ldr	r3, [pc, #352]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f4:	4b54      	ldr	r3, [pc, #336]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	4a53      	ldr	r2, [pc, #332]	; (8001948 <MX_GPIO_Init+0x1c4>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <MX_GPIO_Init+0x1c4>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001822:	4b49      	ldr	r3, [pc, #292]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b45      	ldr	r3, [pc, #276]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a44      	ldr	r2, [pc, #272]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800186c:	4b36      	ldr	r3, [pc, #216]	; (8001948 <MX_GPIO_Init+0x1c4>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	4a35      	ldr	r2, [pc, #212]	; (8001948 <MX_GPIO_Init+0x1c4>)
 8001874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <MX_GPIO_Init+0x1c4>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2104      	movs	r1, #4
 800188e:	482f      	ldr	r0, [pc, #188]	; (800194c <MX_GPIO_Init+0x1c8>)
 8001890:	f005 fa10 	bl	8006cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2106      	movs	r1, #6
 8001898:	482d      	ldr	r0, [pc, #180]	; (8001950 <MX_GPIO_Init+0x1cc>)
 800189a:	f005 fa0b 	bl	8006cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2104      	movs	r1, #4
 80018a2:	482c      	ldr	r0, [pc, #176]	; (8001954 <MX_GPIO_Init+0x1d0>)
 80018a4:	f005 fa06 	bl	8006cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a8:	2304      	movs	r3, #4
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	4823      	ldr	r0, [pc, #140]	; (800194c <MX_GPIO_Init+0x1c8>)
 80018c0:	f005 f850 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018c4:	2306      	movs	r3, #6
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	481d      	ldr	r0, [pc, #116]	; (8001950 <MX_GPIO_Init+0x1cc>)
 80018dc:	f005 f842 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018e0:	2304      	movs	r3, #4
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <MX_GPIO_Init+0x1d0>)
 80018f8:	f005 f834 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_GPIO_Init+0x1cc>)
 800191a:	f005 f823 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800192e:	230b      	movs	r3, #11
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_GPIO_Init+0x1d4>)
 800193a:	f005 f813 	bl	8006964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193e:	bf00      	nop
 8001940:	3738      	adds	r7, #56	; 0x38
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	58024400 	.word	0x58024400
 800194c:	58021000 	.word	0x58021000
 8001950:	58020000 	.word	0x58020000
 8001954:	58021800 	.word	0x58021800
 8001958:	58020c00 	.word	0x58020c00

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_MspInit+0x30>)
 8001970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001974:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x30>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x30>)
 8001980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	58024400 	.word	0x58024400

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	; 0x30
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <HAL_ADC_MspInit+0xe0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12a      	bne.n	8001a14 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 80019c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c4:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 80019c6:	f043 0320 	orr.w	r3, r3, #32
 80019ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 80019d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481d      	ldr	r0, [pc, #116]	; (8001a84 <HAL_ADC_MspInit+0xe8>)
 8001a0e:	f004 ffa9 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a12:	e02e      	b.n	8001a72 <HAL_ADC_MspInit+0xd6>
  else if(hadc->Instance==ADC3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_ADC_MspInit+0xec>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d129      	bne.n	8001a72 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a24:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 8001a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 8001a44:	f043 0320 	orr.w	r3, r3, #32
 8001a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_ADC_MspInit+0xe4>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a5a:	2328      	movs	r3, #40	; 0x28
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <HAL_ADC_MspInit+0xf0>)
 8001a6e:	f004 ff79 	bl	8006964 <HAL_GPIO_Init>
}
 8001a72:	bf00      	nop
 8001a74:	3730      	adds	r7, #48	; 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020800 	.word	0x58020800
 8001a88:	58026000 	.word	0x58026000
 8001a8c:	58021400 	.word	0x58021400

08001a90 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0b8      	sub	sp, #224	; 0xe0
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	22b8      	movs	r2, #184	; 0xb8
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00c f80d 	bl	800dad0 <memset>
  if(hfdcan->Instance==FDCAN3)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_FDCAN_MspInit+0xc4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d144      	bne.n	8001b4a <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ac0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f006 fb91 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8001ae0:	f7ff ff3c 	bl	800195c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_FDCAN_MspInit+0xc8>)
 8001ae6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001aea:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <HAL_FDCAN_MspInit+0xc8>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_FDCAN_MspInit+0xc8>)
 8001af6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_FDCAN_MspInit+0xc8>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_FDCAN_MspInit+0xc8>)
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_FDCAN_MspInit+0xc8>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b20:	23c0      	movs	r3, #192	; 0xc0
 8001b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_FDCAN_MspInit+0xcc>)
 8001b46:	f004 ff0d 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	37e0      	adds	r7, #224	; 0xe0
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	4000d400 	.word	0x4000d400
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	58021400 	.word	0x58021400

08001b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b8      	sub	sp, #224	; 0xe0
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	22b8      	movs	r2, #184	; 0xb8
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00b ffa5 	bl	800dad0 <memset>
  if(hi2c->Instance==I2C2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <HAL_I2C_MspInit+0xc4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d145      	bne.n	8001c1c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b90:	f04f 0208 	mov.w	r2, #8
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f006 fb28 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001bb2:	f7ff fed3 	bl	800195c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_I2C_MspInit+0xc8>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_I2C_MspInit+0xc8>)
 8001bbe:	f043 0320 	orr.w	r3, r3, #32
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_I2C_MspInit+0xc8>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bda:	2312      	movs	r3, #18
 8001bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bec:	2304      	movs	r3, #4
 8001bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <HAL_I2C_MspInit+0xcc>)
 8001bfa:	f004 feb3 	bl	8006964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_I2C_MspInit+0xc8>)
 8001c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c04:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_I2C_MspInit+0xc8>)
 8001c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_I2C_MspInit+0xc8>)
 8001c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	37e0      	adds	r7, #224	; 0xe0
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40005800 	.word	0x40005800
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58021400 	.word	0x58021400

08001c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	; 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <HAL_SPI_MspInit+0x15c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d12e      	bne.n	8001cb0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c52:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c58:	4a4d      	ldr	r2, [pc, #308]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c62:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c8e:	23e0      	movs	r3, #224	; 0xe0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	483a      	ldr	r0, [pc, #232]	; (8001d94 <HAL_SPI_MspInit+0x164>)
 8001caa:	f004 fe5b 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cae:	e068      	b.n	8001d82 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a38      	ldr	r2, [pc, #224]	; (8001d98 <HAL_SPI_MspInit+0x168>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d12f      	bne.n	8001d1a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc0:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cf6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d08:	2305      	movs	r3, #5
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	4619      	mov	r1, r3
 8001d12:	4822      	ldr	r0, [pc, #136]	; (8001d9c <HAL_SPI_MspInit+0x16c>)
 8001d14:	f004 fe26 	bl	8006964 <HAL_GPIO_Init>
}
 8001d18:	e033      	b.n	8001d82 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_SPI_MspInit+0x170>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d12e      	bne.n	8001d82 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_SPI_MspInit+0x160>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d72:	2306      	movs	r3, #6
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <HAL_SPI_MspInit+0x174>)
 8001d7e:	f004 fdf1 	bl	8006964 <HAL_GPIO_Init>
}
 8001d82:	bf00      	nop
 8001d84:	3738      	adds	r7, #56	; 0x38
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40013000 	.word	0x40013000
 8001d90:	58024400 	.word	0x58024400
 8001d94:	58020000 	.word	0x58020000
 8001d98:	40003800 	.word	0x40003800
 8001d9c:	58020400 	.word	0x58020400
 8001da0:	40003c00 	.word	0x40003c00
 8001da4:	58020800 	.word	0x58020800

08001da8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d15d      	bne.n	8001e86 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dca:	4b9f      	ldr	r3, [pc, #636]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dd0:	4a9d      	ldr	r2, [pc, #628]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dda:	4b9b      	ldr	r3, [pc, #620]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	623b      	str	r3, [r7, #32]
 8001de6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b97      	ldr	r3, [pc, #604]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dee:	4a96      	ldr	r2, [pc, #600]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df8:	4b93      	ldr	r3, [pc, #588]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e06:	2301      	movs	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e16:	2301      	movs	r3, #1
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	488a      	ldr	r0, [pc, #552]	; (800204c <HAL_TIM_PWM_MspInit+0x2a4>)
 8001e22:	f004 fd9f 	bl	8006964 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001e26:	4b8a      	ldr	r3, [pc, #552]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e28:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001e2a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8001e2c:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e2e:	2214      	movs	r2, #20
 8001e30:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e32:	4b87      	ldr	r3, [pc, #540]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e38:	4b85      	ldr	r3, [pc, #532]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001e3e:	4b84      	ldr	r3, [pc, #528]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e44:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e46:	4b82      	ldr	r3, [pc, #520]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e4e:	4b80      	ldr	r3, [pc, #512]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e54:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001e56:	4b7e      	ldr	r3, [pc, #504]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001e5c:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001e68:	4879      	ldr	r0, [pc, #484]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e6a:	f002 f941 	bl	80040f0 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8001e74:	f7ff fd72 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e7e:	4a74      	ldr	r2, [pc, #464]	; (8002050 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e84:	e13d      	b.n	8002102 <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM3)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a73      	ldr	r2, [pc, #460]	; (8002058 <HAL_TIM_PWM_MspInit+0x2b0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d16d      	bne.n	8001f6c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e90:	4b6d      	ldr	r3, [pc, #436]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e96:	4a6c      	ldr	r2, [pc, #432]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ea0:	4b69      	ldr	r3, [pc, #420]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8001eae:	4b6b      	ldr	r3, [pc, #428]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_TIM_PWM_MspInit+0x2b8>)
 8001eb2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001eb4:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001eb6:	2218      	movs	r2, #24
 8001eb8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eba:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ec6:	4b65      	ldr	r3, [pc, #404]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ecc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ed0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ed4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ed6:	4b61      	ldr	r3, [pc, #388]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ed8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001edc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eea:	4b5c      	ldr	r3, [pc, #368]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001ef0:	485a      	ldr	r0, [pc, #360]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ef2:	f002 f8fd 	bl	80040f0 <HAL_DMA_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8001efc:	f7ff fd2e 	bl	800195c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
 8001f06:	4a55      	ldr	r2, [pc, #340]	; (800205c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8001f0c:	4b55      	ldr	r3, [pc, #340]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f0e:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_TIM_PWM_MspInit+0x2c0>)
 8001f10:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001f12:	4b54      	ldr	r3, [pc, #336]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f14:	2217      	movs	r2, #23
 8001f16:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f18:	4b52      	ldr	r3, [pc, #328]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f1a:	2240      	movs	r2, #64	; 0x40
 8001f1c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1e:	4b51      	ldr	r3, [pc, #324]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f24:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001f3c:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001f4e:	4845      	ldr	r0, [pc, #276]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f50:	f002 f8ce 	bl	80040f0 <HAL_DMA_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8001f5a:	f7ff fcff 	bl	800195c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a40      	ldr	r2, [pc, #256]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
 8001f64:	4a3f      	ldr	r2, [pc, #252]	; (8002064 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f6a:	e0ca      	b.n	8002102 <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3e      	ldr	r2, [pc, #248]	; (800206c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f040 8082 	bne.w	800207c <HAL_TIM_PWM_MspInit+0x2d4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f7e:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f96:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <HAL_TIM_PWM_MspInit+0x2c8>)
 8001fd2:	f004 fcc7 	bl	8006964 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <HAL_TIM_PWM_MspInit+0x2d0>)
 8001fda:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001fde:	221f      	movs	r2, #31
 8001fe0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ffc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002000:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002004:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002008:	2200      	movs	r2, #0
 800200a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002018:	4816      	ldr	r0, [pc, #88]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 800201a:	f002 f869 	bl	80040f0 <HAL_DMA_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_TIM_PWM_MspInit+0x280>
      Error_Handler();
 8002024:	f7ff fc9a 	bl	800195c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
 800202e:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	201e      	movs	r0, #30
 800203a:	f002 f824 	bl	8004086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800203e:	201e      	movs	r0, #30
 8002040:	f002 f83b 	bl	80040ba <HAL_NVIC_EnableIRQ>
}
 8002044:	e05d      	b.n	8002102 <HAL_TIM_PWM_MspInit+0x35a>
 8002046:	bf00      	nop
 8002048:	58024400 	.word	0x58024400
 800204c:	58020000 	.word	0x58020000
 8002050:	24000eb4 	.word	0x24000eb4
 8002054:	40020028 	.word	0x40020028
 8002058:	40000400 	.word	0x40000400
 800205c:	24000f2c 	.word	0x24000f2c
 8002060:	40020058 	.word	0x40020058
 8002064:	24000fa4 	.word	0x24000fa4
 8002068:	40020070 	.word	0x40020070
 800206c:	40000800 	.word	0x40000800
 8002070:	58020c00 	.word	0x58020c00
 8002074:	2400101c 	.word	0x2400101c
 8002078:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_TIM_PWM_MspInit+0x364>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d13d      	bne.n	8002102 <HAL_TIM_PWM_MspInit+0x35a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_TIM_PWM_MspInit+0x368>)
 8002088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_TIM_PWM_MspInit+0x368>)
 800208e:	f043 0308 	orr.w	r3, r3, #8
 8002092:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_TIM_PWM_MspInit+0x368>)
 8002098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_TIM_PWM_MspInit+0x370>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020ac:	223a      	movs	r2, #58	; 0x3a
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ca:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020d2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80020e6:	480b      	ldr	r0, [pc, #44]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020e8:	f002 f802 	bl	80040f0 <HAL_DMA_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_PWM_MspInit+0x34e>
      Error_Handler();
 80020f2:	f7ff fc33 	bl	800195c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
 80020fc:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_TIM_PWM_MspInit+0x36c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002102:	bf00      	nop
 8002104:	3738      	adds	r7, #56	; 0x38
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40000c00 	.word	0x40000c00
 8002110:	58024400 	.word	0x58024400
 8002114:	24001094 	.word	0x24001094
 8002118:	40020040 	.word	0x40020040

0800211c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	; 0x30
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213c:	d120      	bne.n	8002180 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002144:	4a48      	ldr	r2, [pc, #288]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214e:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 8002150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800215c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002166:	2302      	movs	r3, #2
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800216e:	2301      	movs	r3, #1
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	4619      	mov	r1, r3
 8002178:	483c      	ldr	r0, [pc, #240]	; (800226c <HAL_TIM_MspPostInit+0x150>)
 800217a:	f004 fbf3 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800217e:	e06e      	b.n	800225e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_TIM_MspPostInit+0x154>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d11f      	bne.n	80021ca <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 800218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002190:	4a35      	ldr	r2, [pc, #212]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219a:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021a8:	2330      	movs	r3, #48	; 0x30
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021b0:	2302      	movs	r3, #2
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b8:	2302      	movs	r3, #2
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	482a      	ldr	r0, [pc, #168]	; (800226c <HAL_TIM_MspPostInit+0x150>)
 80021c4:	f004 fbce 	bl	8006964 <HAL_GPIO_Init>
}
 80021c8:	e049      	b.n	800225e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a29      	ldr	r2, [pc, #164]	; (8002274 <HAL_TIM_MspPostInit+0x158>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d120      	bne.n	8002216 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	4a23      	ldr	r2, [pc, #140]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021fc:	2302      	movs	r3, #2
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002204:	2302      	movs	r3, #2
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	481a      	ldr	r0, [pc, #104]	; (8002278 <HAL_TIM_MspPostInit+0x15c>)
 8002210:	f004 fba8 	bl	8006964 <HAL_GPIO_Init>
}
 8002214:	e023      	b.n	800225e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_TIM_MspPostInit+0x160>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d11e      	bne.n	800225e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_TIM_MspPostInit+0x14c>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800223e:	2308      	movs	r3, #8
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002246:	2302      	movs	r3, #2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800224e:	2302      	movs	r3, #2
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	4809      	ldr	r0, [pc, #36]	; (8002280 <HAL_TIM_MspPostInit+0x164>)
 800225a:	f004 fb83 	bl	8006964 <HAL_GPIO_Init>
}
 800225e:	bf00      	nop
 8002260:	3730      	adds	r7, #48	; 0x30
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	58024400 	.word	0x58024400
 800226c:	58020400 	.word	0x58020400
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	58020c00 	.word	0x58020c00
 800227c:	40000c00 	.word	0x40000c00
 8002280:	58020000 	.word	0x58020000

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0ba      	sub	sp, #232	; 0xe8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800229c:	f107 0318 	add.w	r3, r7, #24
 80022a0:	22b8      	movs	r2, #184	; 0xb8
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00b fc13 	bl	800dad0 <memset>
  if(huart->Instance==UART4)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a4d      	ldr	r2, [pc, #308]	; (80023e4 <HAL_UART_MspInit+0x160>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d147      	bne.n	8002344 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022b4:	f04f 0202 	mov.w	r2, #2
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f005 ff96 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022d6:	f7ff fb41 	bl	800195c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e0:	4a41      	ldr	r2, [pc, #260]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80022e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022ea:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80022ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_UART_MspInit+0x164>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800231a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002330:	2308      	movs	r3, #8
 8002332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800233a:	4619      	mov	r1, r3
 800233c:	482b      	ldr	r0, [pc, #172]	; (80023ec <HAL_UART_MspInit+0x168>)
 800233e:	f004 fb11 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002342:	e04a      	b.n	80023da <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_UART_MspInit+0x16c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d145      	bne.n	80023da <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800234e:	f04f 0201 	mov.w	r2, #1
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	4618      	mov	r0, r3
 8002366:	f005 ff49 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002370:	f7ff faf4 	bl	800195c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_UART_MspInit+0x164>)
 800237c:	f043 0320 	orr.w	r3, r3, #32
 8002380:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_UART_MspInit+0x164>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023b0:	23c0      	movs	r3, #192	; 0xc0
 80023b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80023c8:	2307      	movs	r3, #7
 80023ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <HAL_UART_MspInit+0x170>)
 80023d6:	f004 fac5 	bl	8006964 <HAL_GPIO_Init>
}
 80023da:	bf00      	nop
 80023dc:	37e8      	adds	r7, #232	; 0xe8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40004c00 	.word	0x40004c00
 80023e8:	58024400 	.word	0x58024400
 80023ec:	58020400 	.word	0x58020400
 80023f0:	40011400 	.word	0x40011400
 80023f4:	58020800 	.word	0x58020800

080023f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b0b2      	sub	sp, #200	; 0xc8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	22b8      	movs	r2, #184	; 0xb8
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f00b fb61 	bl	800dad0 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_PCD_MspInit+0x74>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d124      	bne.n	8002462 <HAL_PCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002418:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002424:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4618      	mov	r0, r3
 8002432:	f005 fee3 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800243c:	f7ff fa8e 	bl	800195c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002440:	f004 fefc 	bl	800723c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_PCD_MspInit+0x78>)
 8002446:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_PCD_MspInit+0x78>)
 800244c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002450:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_PCD_MspInit+0x78>)
 8002456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	37c8      	adds	r7, #200	; 0xc8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40040000 	.word	0x40040000
 8002470:	58024400 	.word	0x58024400

08002474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <NMI_Handler+0x4>

0800247a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <HardFault_Handler+0x4>

08002480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <MemManage_Handler+0x4>

08002486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <UsageFault_Handler+0x4>

08002492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c0:	f000 f952 	bl	8002768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA1_Stream0_IRQHandler+0x10>)
 80024ce:	f002 fbd3 	bl	8004c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2400101c 	.word	0x2400101c

080024dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <DMA1_Stream1_IRQHandler+0x10>)
 80024e2:	f002 fbc9 	bl	8004c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24000eb4 	.word	0x24000eb4

080024f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <DMA1_Stream2_IRQHandler+0x10>)
 80024f6:	f002 fbbf 	bl	8004c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	24001094 	.word	0x24001094

08002504 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <DMA1_Stream3_IRQHandler+0x10>)
 800250a:	f002 fbb5 	bl	8004c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	24000f2c 	.word	0x24000f2c

08002518 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <DMA1_Stream4_IRQHandler+0x10>)
 800251e:	f002 fbab 	bl	8004c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24000fa4 	.word	0x24000fa4

0800252c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <TIM4_IRQHandler+0x10>)
 8002532:	f008 fe13 	bl	800b15c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	24000e1c 	.word	0x24000e1c

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <SystemInit+0xd0>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4a31      	ldr	r2, [pc, #196]	; (8002610 <SystemInit+0xd0>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <SystemInit+0xd4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	2b06      	cmp	r3, #6
 800255e:	d807      	bhi.n	8002570 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <SystemInit+0xd4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <SystemInit+0xd4>)
 800256a:	f043 0307 	orr.w	r3, r3, #7
 800256e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <SystemInit+0xd8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a28      	ldr	r2, [pc, #160]	; (8002618 <SystemInit+0xd8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <SystemInit+0xd8>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <SystemInit+0xd8>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4924      	ldr	r1, [pc, #144]	; (8002618 <SystemInit+0xd8>)
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <SystemInit+0xdc>)
 800258a:	4013      	ands	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <SystemInit+0xd4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <SystemInit+0xd4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 030f 	bic.w	r3, r3, #15
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <SystemInit+0xd4>)
 80025a4:	f043 0307 	orr.w	r3, r3, #7
 80025a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <SystemInit+0xd8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <SystemInit+0xd8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <SystemInit+0xd8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <SystemInit+0xd8>)
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <SystemInit+0xe0>)
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <SystemInit+0xd8>)
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <SystemInit+0xe4>)
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <SystemInit+0xd8>)
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <SystemInit+0xe8>)
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <SystemInit+0xd8>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <SystemInit+0xd8>)
 80025d6:	4a14      	ldr	r2, [pc, #80]	; (8002628 <SystemInit+0xe8>)
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <SystemInit+0xd8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <SystemInit+0xd8>)
 80025e2:	4a11      	ldr	r2, [pc, #68]	; (8002628 <SystemInit+0xe8>)
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <SystemInit+0xd8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <SystemInit+0xd8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <SystemInit+0xd8>)
 80025f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <SystemInit+0xd8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <SystemInit+0xec>)
 8002600:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002604:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00
 8002614:	52002000 	.word	0x52002000
 8002618:	58024400 	.word	0x58024400
 800261c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002620:	02020200 	.word	0x02020200
 8002624:	01ff0000 	.word	0x01ff0000
 8002628:	01010280 	.word	0x01010280
 800262c:	52004000 	.word	0x52004000

08002630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002634:	f7ff ff84 	bl	8002540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263a:	490d      	ldr	r1, [pc, #52]	; (8002670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002650:	4c0a      	ldr	r4, [pc, #40]	; (800267c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800265e:	f00b fa05 	bl	800da6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002662:	f7fe f9fb 	bl	8000a5c <main>
  bx  lr
 8002666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002668:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800266c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002670:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002674:	0800dec0 	.word	0x0800dec0
  ldr r2, =_sbss
 8002678:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800267c:	24001748 	.word	0x24001748

08002680 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC3_IRQHandler>
	...

08002684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268a:	2003      	movs	r0, #3
 800268c:	f001 fcf0 	bl	8004070 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002690:	f005 fbde 	bl	8007e50 <HAL_RCC_GetSysClockFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_Init+0x68>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	4913      	ldr	r1, [pc, #76]	; (80026f0 <HAL_Init+0x6c>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_Init+0x68>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_Init+0x6c>)
 80026b8:	5cd3      	ldrb	r3, [r2, r3]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <HAL_Init+0x70>)
 80026c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026c8:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_Init+0x74>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ce:	200f      	movs	r0, #15
 80026d0:	f000 f814 	bl	80026fc <HAL_InitTick>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e002      	b.n	80026e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026de:	f7ff f943 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58024400 	.word	0x58024400
 80026f0:	0800de5c 	.word	0x0800de5c
 80026f4:	24000004 	.word	0x24000004
 80026f8:	24000000 	.word	0x24000000

080026fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_InitTick+0x60>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e021      	b.n	8002754 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_InitTick+0x64>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_InitTick+0x60>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fcd5 	bl	80040d6 <HAL_SYSTICK_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e00e      	b.n	8002754 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b0f      	cmp	r3, #15
 800273a:	d80a      	bhi.n	8002752 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800273c:	2200      	movs	r2, #0
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f001 fc9f 	bl	8004086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <HAL_InitTick+0x68>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	2400000c 	.word	0x2400000c
 8002760:	24000000 	.word	0x24000000
 8002764:	24000008 	.word	0x24000008

08002768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x20>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x24>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4413      	add	r3, r2
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_IncTick+0x24>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2400000c 	.word	0x2400000c
 800278c:	24001744 	.word	0x24001744

08002790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return uwTick;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_GetTick+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	24001744 	.word	0x24001744

080027a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff ffee 	bl	8002790 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d005      	beq.n	80027ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_Delay+0x44>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ce:	bf00      	nop
 80027d0:	f7ff ffde 	bl	8002790 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d8f7      	bhi.n	80027d0 <HAL_Delay+0x28>
  {
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2400000c 	.word	0x2400000c

080027f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3360      	adds	r3, #96	; 0x60
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <LL_ADC_SetOffset+0x60>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10b      	bne.n	8002894 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002892:	e00b      	b.n	80028ac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	601a      	str	r2, [r3, #0]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	58026000 	.word	0x58026000

080028bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3360      	adds	r3, #96	; 0x60
 80028ca:	461a      	mov	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	611a      	str	r2, [r3, #16]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a0c      	ldr	r2, [pc, #48]	; (800295c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3360      	adds	r3, #96	; 0x60
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	601a      	str	r2, [r3, #0]
  }
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	58026000 	.word	0x58026000

08002960 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <LL_ADC_SetOffsetSaturation+0x40>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d10e      	bne.n	8002992 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3360      	adds	r3, #96	; 0x60
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	58026000 	.word	0x58026000

080029a4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <LL_ADC_SetOffsetSign+0x40>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d10e      	bne.n	80029d6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3360      	adds	r3, #96	; 0x60
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	58026000 	.word	0x58026000

080029e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3360      	adds	r3, #96	; 0x60
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <LL_ADC_SetOffsetState+0x50>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d108      	bne.n	8002a1c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002a1a:	e007      	b.n	8002a2c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	58026000 	.word	0x58026000

08002a3c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3330      	adds	r3, #48	; 0x30
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	4413      	add	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	211f      	movs	r1, #31
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 011f 	and.w	r1, r3, #31
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0e5b      	lsrs	r3, r3, #25
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	0d1b      	lsrs	r3, r3, #20
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2107      	movs	r1, #7
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	401a      	ands	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	0d1b      	lsrs	r3, r3, #20
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d115      	bne.n	8002b2c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0318 	and.w	r3, r3, #24
 8002b16:	4914      	ldr	r1, [pc, #80]	; (8002b68 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b18:	40d9      	lsrs	r1, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	400b      	ands	r3, r1
 8002b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b22:	431a      	orrs	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b2a:	e014      	b.n	8002b56 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0318 	and.w	r3, r3, #24
 8002b42:	4909      	ldr	r1, [pc, #36]	; (8002b68 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b44:	40d9      	lsrs	r1, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	400b      	ands	r3, r1
 8002b4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	58026000 	.word	0x58026000
 8002b68:	000fffff 	.word	0x000fffff

08002b6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6093      	str	r3, [r2, #8]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	5fffffc0 	.word	0x5fffffc0

08002b90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba4:	d101      	bne.n	8002baa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <LL_ADC_EnableInternalRegulator+0x24>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	6fffffc0 	.word	0x6fffffc0

08002be0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <LL_ADC_IsEnabled+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_ADC_IsEnabled+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d101      	bne.n	8002c6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1ee      	b.n	8003074 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fe fe79 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff67 	bl	8002b90 <LL_ADC_IsDeepPowerDownEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff4d 	bl	8002b6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff82 	bl	8002be0 <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d114      	bne.n	8002d0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff66 	bl	8002bb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4b8e      	ldr	r3, [pc, #568]	; (8002f28 <HAL_ADC_Init+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4a8e      	ldr	r2, [pc, #568]	; (8002f2c <HAL_ADC_Init+0x2b0>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cfe:	e002      	b.n	8002d06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f9      	bne.n	8002d00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff65 	bl	8002be0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff76 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002d42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 8188 	bne.w	8003062 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8184 	bne.w	8003062 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff4a 	bl	8002c08 <LL_ADC_IsEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d136      	bne.n	8002de8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	; (8002f30 <HAL_ADC_Init+0x2b4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_ADC_Init+0x112>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_ADC_Init+0x2b8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10e      	bne.n	8002dac <HAL_ADC_Init+0x130>
 8002d8e:	4868      	ldr	r0, [pc, #416]	; (8002f30 <HAL_ADC_Init+0x2b4>)
 8002d90:	f7ff ff3a 	bl	8002c08 <LL_ADC_IsEnabled>
 8002d94:	4604      	mov	r4, r0
 8002d96:	4867      	ldr	r0, [pc, #412]	; (8002f34 <HAL_ADC_Init+0x2b8>)
 8002d98:	f7ff ff36 	bl	8002c08 <LL_ADC_IsEnabled>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e008      	b.n	8002dbe <HAL_ADC_Init+0x142>
 8002dac:	4862      	ldr	r0, [pc, #392]	; (8002f38 <HAL_ADC_Init+0x2bc>)
 8002dae:	f7ff ff2b 	bl	8002c08 <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a5a      	ldr	r2, [pc, #360]	; (8002f30 <HAL_ADC_Init+0x2b4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_Init+0x15a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_ADC_Init+0x2b8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_Init+0x15e>
 8002dd6:	4a59      	ldr	r2, [pc, #356]	; (8002f3c <HAL_ADC_Init+0x2c0>)
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_Init+0x160>
 8002dda:	4a59      	ldr	r2, [pc, #356]	; (8002f40 <HAL_ADC_Init+0x2c4>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f7ff fd04 	bl	80027f0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_ADC_Init+0x2bc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d129      	bne.n	8002e46 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7e5b      	ldrb	r3, [r3, #25]
 8002df6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002dfc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002e02:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d013      	beq.n	8002e34 <HAL_ADC_Init+0x1b8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d00d      	beq.n	8002e30 <HAL_ADC_Init+0x1b4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b1c      	cmp	r3, #28
 8002e1a:	d007      	beq.n	8002e2c <HAL_ADC_Init+0x1b0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b18      	cmp	r3, #24
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_Init+0x1ac>
 8002e24:	2318      	movs	r3, #24
 8002e26:	e006      	b.n	8002e36 <HAL_ADC_Init+0x1ba>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e004      	b.n	8002e36 <HAL_ADC_Init+0x1ba>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	e002      	b.n	8002e36 <HAL_ADC_Init+0x1ba>
 8002e30:	2308      	movs	r3, #8
 8002e32:	e000      	b.n	8002e36 <HAL_ADC_Init+0x1ba>
 8002e34:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002e36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	e00e      	b.n	8002e64 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7e5b      	ldrb	r3, [r3, #25]
 8002e4a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e50:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d106      	bne.n	8002e7c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	3b01      	subs	r3, #1
 8002e74:	045b      	lsls	r3, r3, #17
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	; (8002f38 <HAL_ADC_Init+0x2bc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d115      	bne.n	8002ece <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_ADC_Init+0x2c8>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	611a      	str	r2, [r3, #16]
 8002ecc:	e009      	b.n	8002ee2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_ADC_Init+0x2cc>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	69b9      	ldr	r1, [r7, #24]
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fea1 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002eec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff feae 	bl	8002c54 <LL_ADC_INJ_IsConversionOngoing>
 8002ef8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 808e 	bne.w	800301e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 808a 	bne.w	800301e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_ADC_Init+0x2bc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d11b      	bne.n	8002f4c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7e1b      	ldrb	r3, [r3, #24]
 8002f18:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f20:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	e018      	b.n	8002f5a <HAL_ADC_Init+0x2de>
 8002f28:	24000000 	.word	0x24000000
 8002f2c:	053e2d63 	.word	0x053e2d63
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40022100 	.word	0x40022100
 8002f38:	58026000 	.word	0x58026000
 8002f3c:	40022300 	.word	0x40022300
 8002f40:	58026300 	.word	0x58026300
 8002f44:	fff04007 	.word	0xfff04007
 8002f48:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7e1b      	ldrb	r3, [r3, #24]
 8002f50:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b46      	ldr	r3, [pc, #280]	; (800307c <HAL_ADC_Init+0x400>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	69b9      	ldr	r1, [r7, #24]
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d137      	bne.n	8002fe8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3f      	ldr	r2, [pc, #252]	; (8003080 <HAL_ADC_Init+0x404>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d116      	bne.n	8002fb6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_ADC_Init+0x408>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fa0:	4311      	orrs	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	611a      	str	r2, [r3, #16]
 8002fb4:	e020      	b.n	8002ff8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_ADC_Init+0x40c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	0411      	lsls	r1, r2, #16
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fd2:	4311      	orrs	r1, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	611a      	str	r2, [r3, #16]
 8002fe6:	e007      	b.n	8002ff8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <HAL_ADC_Init+0x404>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d002      	beq.n	800301e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fd63 	bl	8003ae4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10c      	bne.n	8003040 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f023 010f 	bic.w	r1, r3, #15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
 800303e:	e007      	b.n	8003050 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020f 	bic.w	r2, r2, #15
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003054:	f023 0303 	bic.w	r3, r3, #3
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	661a      	str	r2, [r3, #96]	; 0x60
 8003060:	e007      	b.n	8003072 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003072:	7ffb      	ldrb	r3, [r7, #31]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3724      	adds	r7, #36	; 0x24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	ffffbffc 	.word	0xffffbffc
 8003080:	58026000 	.word	0x58026000
 8003084:	fc00f81f 	.word	0xfc00f81f
 8003088:	fc00f81e 	.word	0xfc00f81e

0800308c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b0b9      	sub	sp, #228	; 0xe4
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4aa9      	ldr	r2, [pc, #676]	; (8003354 <HAL_ADC_ConfigChannel+0x2c8>)
 80030ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d102      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x34>
 80030ba:	2302      	movs	r3, #2
 80030bc:	f000 bcfa 	b.w	8003ab4 <HAL_ADC_ConfigChannel+0xa28>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fdae 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 84de 	bne.w	8003a96 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a9e      	ldr	r2, [pc, #632]	; (8003358 <HAL_ADC_ConfigChannel+0x2cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d033      	beq.n	800314c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x76>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2201      	movs	r2, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	e01d      	b.n	800313e <HAL_ADC_ConfigChannel+0xb2>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800311a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800311e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003126:	2320      	movs	r3, #32
 8003128:	e004      	b.n	8003134 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800312a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2201      	movs	r2, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	69d1      	ldr	r1, [r2, #28]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	430b      	orrs	r3, r1
 800314a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	f7ff fc6f 	bl	8002a3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fd63 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8003168:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fd6f 	bl	8002c54 <LL_ADC_INJ_IsConversionOngoing>
 8003176:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800317a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 8270 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003184:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 826b 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	461a      	mov	r2, r3
 800319c:	f7ff fc7a 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6c      	ldr	r2, [pc, #432]	; (8003358 <HAL_ADC_ConfigChannel+0x2cc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10d      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	08db      	lsrs	r3, r3, #3
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031c4:	e032      	b.n	800322c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031c6:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_ADC_ConfigChannel+0x2d0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80031ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d2:	d10b      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x160>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	e01d      	b.n	8003228 <HAL_ADC_ConfigChannel+0x19c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x186>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	e00a      	b.n	8003228 <HAL_ADC_ConfigChannel+0x19c>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d048      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6919      	ldr	r1, [r3, #16]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003244:	f7ff fb08 	bl	8002858 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a42      	ldr	r2, [pc, #264]	; (8003358 <HAL_ADC_ConfigChannel+0x2cc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d119      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6919      	ldr	r1, [r3, #16]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	461a      	mov	r2, r3
 8003260:	f7ff fba0 	bl	80029a4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6919      	ldr	r1, [r3, #16]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1f0>
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	e000      	b.n	800327e <HAL_ADC_ConfigChannel+0x1f2>
 800327c:	2300      	movs	r3, #0
 800327e:	461a      	mov	r2, r3
 8003280:	f7ff fb6e 	bl	8002960 <LL_ADC_SetOffsetSaturation>
 8003284:	e1ee      	b.n	8003664 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6919      	ldr	r1, [r3, #16]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003294:	2b01      	cmp	r3, #1
 8003296:	d102      	bne.n	800329e <HAL_ADC_ConfigChannel+0x212>
 8003298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800329c:	e000      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x214>
 800329e:	2300      	movs	r3, #0
 80032a0:	461a      	mov	r2, r3
 80032a2:	f7ff fb3b 	bl	800291c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6919      	ldr	r1, [r3, #16]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7e1b      	ldrb	r3, [r3, #24]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d102      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x230>
 80032b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032ba:	e000      	b.n	80032be <HAL_ADC_ConfigChannel+0x232>
 80032bc:	2300      	movs	r3, #0
 80032be:	461a      	mov	r2, r3
 80032c0:	f7ff fb12 	bl	80028e8 <LL_ADC_SetDataRightShift>
 80032c4:	e1ce      	b.n	8003664 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <HAL_ADC_ConfigChannel+0x2cc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	f040 8181 	bne.w	80035d4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff faef 	bl	80028bc <LL_ADC_GetOffsetChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x272>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fae4 	bl	80028bc <LL_ADC_GetOffsetChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	e01e      	b.n	800333c <HAL_ADC_ConfigChannel+0x2b0>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fad9 	bl	80028bc <LL_ADC_GetOffsetChannel>
 800330a:	4603      	mov	r3, r0
 800330c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800331c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e004      	b.n	800333a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003330:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x2d4>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0e9b      	lsrs	r3, r3, #26
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	e01e      	b.n	8003392 <HAL_ADC_ConfigChannel+0x306>
 8003354:	47ff0000 	.word	0x47ff0000
 8003358:	58026000 	.word	0x58026000
 800335c:	5c001000 	.word	0x5c001000
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800337c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e004      	b.n	8003392 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	429a      	cmp	r2, r3
 8003394:	d106      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fb22 	bl	80029e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fa86 	bl	80028bc <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x344>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fa7b 	bl	80028bc <LL_ADC_GetOffsetChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	0e9b      	lsrs	r3, r3, #26
 80033ca:	f003 021f 	and.w	r2, r3, #31
 80033ce:	e01e      	b.n	800340e <HAL_ADC_ConfigChannel+0x382>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fa70 	bl	80028bc <LL_ADC_GetOffsetChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80033ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80033f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e004      	b.n	800340c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x39a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0e9b      	lsrs	r3, r3, #26
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	e018      	b.n	8003458 <HAL_ADC_ConfigChannel+0x3cc>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800343a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800343e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800344a:	2320      	movs	r3, #32
 800344c:	e004      	b.n	8003458 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800344e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	429a      	cmp	r2, r3
 800345a:	d106      	bne.n	800346a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2200      	movs	r2, #0
 8003462:	2101      	movs	r1, #1
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fabf 	bl	80029e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fa23 	bl	80028bc <LL_ADC_GetOffsetChannel>
 8003476:	4603      	mov	r3, r0
 8003478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x40a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2102      	movs	r1, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fa18 	bl	80028bc <LL_ADC_GetOffsetChannel>
 800348c:	4603      	mov	r3, r0
 800348e:	0e9b      	lsrs	r3, r3, #26
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	e01e      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x448>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fa0d 	bl	80028bc <LL_ADC_GetOffsetChannel>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80034b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80034bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e004      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x460>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	e014      	b.n	8003516 <HAL_ADC_ConfigChannel+0x48a>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80034fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800350c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	429a      	cmp	r2, r3
 8003518:	d106      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fa60 	bl	80029e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2103      	movs	r1, #3
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f9c4 	bl	80028bc <LL_ADC_GetOffsetChannel>
 8003534:	4603      	mov	r3, r0
 8003536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x4c8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2103      	movs	r1, #3
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f9b9 	bl	80028bc <LL_ADC_GetOffsetChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	f003 021f 	and.w	r2, r3, #31
 8003552:	e017      	b.n	8003584 <HAL_ADC_ConfigChannel+0x4f8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2103      	movs	r1, #3
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f9ae 	bl	80028bc <LL_ADC_GetOffsetChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800356c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e003      	b.n	8003582 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800357a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <HAL_ADC_ConfigChannel+0x510>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	e011      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x534>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80035b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d14f      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2200      	movs	r2, #0
 80035ca:	2103      	movs	r1, #3
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fa0b 	bl	80029e8 <LL_ADC_SetOffsetState>
 80035d2:	e047      	b.n	8003664 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	069b      	lsls	r3, r3, #26
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d107      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800361a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	069b      	lsls	r3, r3, #26
 800362c:	429a      	cmp	r2, r3
 800362e:	d107      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800363e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	069b      	lsls	r3, r3, #26
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003662:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff facd 	bl	8002c08 <LL_ADC_IsEnabled>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 8219 	bne.w	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f7ff fa32 	bl	8002aec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4aa1      	ldr	r2, [pc, #644]	; (8003914 <HAL_ADC_ConfigChannel+0x888>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f040 812e 	bne.w	80038f0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x630>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	3301      	adds	r3, #1
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	bf94      	ite	ls
 80036b4:	2301      	movls	r3, #1
 80036b6:	2300      	movhi	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e019      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x664>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80036ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80036d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2b09      	cmp	r3, #9
 80036e8:	bf94      	ite	ls
 80036ea:	2301      	movls	r3, #1
 80036ec:	2300      	movhi	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d079      	beq.n	80037e8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x684>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0e9b      	lsrs	r3, r3, #26
 8003706:	3301      	adds	r3, #1
 8003708:	069b      	lsls	r3, r3, #26
 800370a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800370e:	e015      	b.n	800373c <HAL_ADC_ConfigChannel+0x6b0>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e003      	b.n	8003734 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800372c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	069b      	lsls	r3, r3, #26
 8003738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_ADC_ConfigChannel+0x6d0>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	3301      	adds	r3, #1
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	e017      	b.n	800378c <HAL_ADC_ConfigChannel+0x700>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800376e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003774:	2320      	movs	r3, #32
 8003776:	e003      	b.n	8003780 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	ea42 0103 	orr.w	r1, r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x726>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0e9b      	lsrs	r3, r3, #26
 80037a2:	3301      	adds	r3, #1
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	051b      	lsls	r3, r3, #20
 80037b0:	e018      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x758>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80037ca:	2320      	movs	r3, #32
 80037cc:	e003      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e4:	430b      	orrs	r3, r1
 80037e6:	e07e      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x778>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0e9b      	lsrs	r3, r3, #26
 80037fa:	3301      	adds	r3, #1
 80037fc:	069b      	lsls	r3, r3, #26
 80037fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003802:	e015      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7a4>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	069b      	lsls	r3, r3, #26
 800382c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x7c4>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	3301      	adds	r3, #1
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	e017      	b.n	8003880 <HAL_ADC_ConfigChannel+0x7f4>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	61bb      	str	r3, [r7, #24]
  return result;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e003      	b.n	8003874 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	ea42 0103 	orr.w	r1, r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x820>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	3301      	adds	r3, #1
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	3b1e      	subs	r3, #30
 80038a4:	051b      	lsls	r3, r3, #20
 80038a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038aa:	e01b      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x858>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	60fb      	str	r3, [r7, #12]
  return result;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f003 021f 	and.w	r2, r3, #31
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	3b1e      	subs	r3, #30
 80038de:	051b      	lsls	r3, r3, #20
 80038e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e4:	430b      	orrs	r3, r1
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7ff f8d2 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f280 80d7 	bge.w	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a06      	ldr	r2, [pc, #24]	; (8003918 <HAL_ADC_ConfigChannel+0x88c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_ADC_ConfigChannel+0x882>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_ADC_ConfigChannel+0x890>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10a      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x898>
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <HAL_ADC_ConfigChannel+0x894>)
 8003910:	e009      	b.n	8003926 <HAL_ADC_ConfigChannel+0x89a>
 8003912:	bf00      	nop
 8003914:	47ff0000 	.word	0x47ff0000
 8003918:	40022000 	.word	0x40022000
 800391c:	40022100 	.word	0x40022100
 8003920:	40022300 	.word	0x40022300
 8003924:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_ADC_ConfigChannel+0xa30>)
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe ff88 	bl	800283c <LL_ADC_GetCommonPathInternalCh>
 800392c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a62      	ldr	r2, [pc, #392]	; (8003ac0 <HAL_ADC_ConfigChannel+0xa34>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_ADC_ConfigChannel+0x8b8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a61      	ldr	r2, [pc, #388]	; (8003ac4 <HAL_ADC_ConfigChannel+0xa38>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10e      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x8d6>
 8003944:	485e      	ldr	r0, [pc, #376]	; (8003ac0 <HAL_ADC_ConfigChannel+0xa34>)
 8003946:	f7ff f95f 	bl	8002c08 <LL_ADC_IsEnabled>
 800394a:	4604      	mov	r4, r0
 800394c:	485d      	ldr	r0, [pc, #372]	; (8003ac4 <HAL_ADC_ConfigChannel+0xa38>)
 800394e:	f7ff f95b 	bl	8002c08 <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	4323      	orrs	r3, r4
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e008      	b.n	8003974 <HAL_ADC_ConfigChannel+0x8e8>
 8003962:	4859      	ldr	r0, [pc, #356]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003964:	f7ff f950 	bl	8002c08 <LL_ADC_IsEnabled>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8084 	beq.w	8003a82 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a53      	ldr	r2, [pc, #332]	; (8003acc <HAL_ADC_ConfigChannel+0xa40>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d132      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x95e>
 8003984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d12c      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4c      	ldr	r2, [pc, #304]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	f040 8086 	bne.w	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a47      	ldr	r2, [pc, #284]	; (8003ac0 <HAL_ADC_ConfigChannel+0xa34>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_ADC_ConfigChannel+0x924>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a46      	ldr	r2, [pc, #280]	; (8003ac4 <HAL_ADC_ConfigChannel+0xa38>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x928>
 80039b0:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa44>)
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x92a>
 80039b4:	4a41      	ldr	r2, [pc, #260]	; (8003abc <HAL_ADC_ConfigChannel+0xa30>)
 80039b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039be:	4619      	mov	r1, r3
 80039c0:	4610      	mov	r0, r2
 80039c2:	f7fe ff28 	bl	8002816 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039c6:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <HAL_ADC_ConfigChannel+0xa48>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	4a42      	ldr	r2, [pc, #264]	; (8003ad8 <HAL_ADC_ConfigChannel+0xa4c>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	3301      	adds	r3, #1
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039da:	e002      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3b01      	subs	r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f9      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e8:	e05e      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <HAL_ADC_ConfigChannel+0xa50>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d120      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x9aa>
 80039f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d11a      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d14e      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ac0 <HAL_ADC_ConfigChannel+0xa34>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0x992>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <HAL_ADC_ConfigChannel+0xa38>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x996>
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa44>)
 8003a20:	e000      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x998>
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <HAL_ADC_ConfigChannel+0xa30>)
 8003a24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f7fe fef1 	bl	8002816 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a34:	e038      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <HAL_ADC_ConfigChannel+0xa54>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d133      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
 8003a40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d12d      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d128      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <HAL_ADC_ConfigChannel+0xa34>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_ADC_ConfigChannel+0x9de>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_ADC_ConfigChannel+0xa38>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x9e2>
 8003a6a:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa44>)
 8003a6c:	e000      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x9e4>
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <HAL_ADC_ConfigChannel+0xa30>)
 8003a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f7fe fecb 	bl	8002816 <LL_ADC_SetCommonPathInternalCh>
 8003a80:	e012      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003a94:	e008      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003ab0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	37e4      	adds	r7, #228	; 0xe4
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	58026300 	.word	0x58026300
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	40022100 	.word	0x40022100
 8003ac8:	58026000 	.word	0x58026000
 8003acc:	c7520000 	.word	0xc7520000
 8003ad0:	40022300 	.word	0x40022300
 8003ad4:	24000000 	.word	0x24000000
 8003ad8:	053e2d63 	.word	0x053e2d63
 8003adc:	c3210000 	.word	0xc3210000
 8003ae0:	cb840000 	.word	0xcb840000

08003ae4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6c      	ldr	r2, [pc, #432]	; (8003ca4 <ADC_ConfigureBoostMode+0x1c0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <ADC_ConfigureBoostMode+0x1c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6b      	ldr	r2, [pc, #428]	; (8003ca8 <ADC_ConfigureBoostMode+0x1c4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d109      	bne.n	8003b14 <ADC_ConfigureBoostMode+0x30>
 8003b00:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <ADC_ConfigureBoostMode+0x1c8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e008      	b.n	8003b26 <ADC_ConfigureBoostMode+0x42>
 8003b14:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <ADC_ConfigureBoostMode+0x1cc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01c      	beq.n	8003b64 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b2a:	f004 fb0b 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 8003b2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b38:	d010      	beq.n	8003b5c <ADC_ConfigureBoostMode+0x78>
 8003b3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b3e:	d873      	bhi.n	8003c28 <ADC_ConfigureBoostMode+0x144>
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d002      	beq.n	8003b4c <ADC_ConfigureBoostMode+0x68>
 8003b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b4a:	d16d      	bne.n	8003c28 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	60fb      	str	r3, [r7, #12]
        break;
 8003b5a:	e068      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	60fb      	str	r3, [r7, #12]
        break;
 8003b62:	e064      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	f005 fce6 	bl	800953c <HAL_RCCEx_GetPeriphCLKFreq>
 8003b70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b7a:	d051      	beq.n	8003c20 <ADC_ConfigureBoostMode+0x13c>
 8003b7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b80:	d854      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003b82:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b86:	d047      	beq.n	8003c18 <ADC_ConfigureBoostMode+0x134>
 8003b88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b8c:	d84e      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003b8e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b92:	d03d      	beq.n	8003c10 <ADC_ConfigureBoostMode+0x12c>
 8003b94:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b98:	d848      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b9e:	d033      	beq.n	8003c08 <ADC_ConfigureBoostMode+0x124>
 8003ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba4:	d842      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003ba6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003baa:	d029      	beq.n	8003c00 <ADC_ConfigureBoostMode+0x11c>
 8003bac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003bb0:	d83c      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003bb2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003bb6:	d01a      	beq.n	8003bee <ADC_ConfigureBoostMode+0x10a>
 8003bb8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003bbc:	d836      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003bbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003bc2:	d014      	beq.n	8003bee <ADC_ConfigureBoostMode+0x10a>
 8003bc4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003bc8:	d830      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bce:	d00e      	beq.n	8003bee <ADC_ConfigureBoostMode+0x10a>
 8003bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd4:	d82a      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003bd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bda:	d008      	beq.n	8003bee <ADC_ConfigureBoostMode+0x10a>
 8003bdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003be0:	d824      	bhi.n	8003c2c <ADC_ConfigureBoostMode+0x148>
 8003be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be6:	d002      	beq.n	8003bee <ADC_ConfigureBoostMode+0x10a>
 8003be8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bec:	d11e      	bne.n	8003c2c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	60fb      	str	r3, [r7, #12]
        break;
 8003bfe:	e016      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
        break;
 8003c06:	e012      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	60fb      	str	r3, [r7, #12]
        break;
 8003c0e:	e00e      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	099b      	lsrs	r3, r3, #6
 8003c14:	60fb      	str	r3, [r7, #12]
        break;
 8003c16:	e00a      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	09db      	lsrs	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]
        break;
 8003c1e:	e006      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	60fb      	str	r3, [r7, #12]
        break;
 8003c26:	e002      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c2c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <ADC_ConfigureBoostMode+0x1d0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d808      	bhi.n	8003c4e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c4c:	e025      	b.n	8003c9a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <ADC_ConfigureBoostMode+0x1d4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d80a      	bhi.n	8003c6c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c68:	609a      	str	r2, [r3, #8]
}
 8003c6a:	e016      	b.n	8003c9a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <ADC_ConfigureBoostMode+0x1d8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d80a      	bhi.n	8003c8a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	e007      	b.n	8003c9a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	40022100 	.word	0x40022100
 8003cac:	40022300 	.word	0x40022300
 8003cb0:	58026300 	.word	0x58026300
 8003cb4:	005f5e10 	.word	0x005f5e10
 8003cb8:	00bebc20 	.word	0x00bebc20
 8003cbc:	017d7840 	.word	0x017d7840

08003cc0 <LL_ADC_IsEnabled>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <LL_ADC_IsEnabled+0x18>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <LL_ADC_IsEnabled+0x1a>
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d101      	bne.n	8003cfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b0a3      	sub	sp, #140	; 0x8c
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0c1      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5e      	ldr	r2, [pc, #376]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d102      	bne.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d44:	4b5d      	ldr	r3, [pc, #372]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e001      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0a0      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ffb9 	bl	8003ce6 <LL_ADC_REG_IsConversionOngoing>
 8003d74:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ffb2 	bl	8003ce6 <LL_ADC_REG_IsConversionOngoing>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 8081 	bne.w	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d17c      	bne.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a48      	ldr	r2, [pc, #288]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a46      	ldr	r2, [pc, #280]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003da6:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003da8:	e000      	b.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003daa:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003dac:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d039      	beq.n	8003e2a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a39      	ldr	r2, [pc, #228]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d10e      	bne.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003ddc:	4836      	ldr	r0, [pc, #216]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dde:	f7ff ff6f 	bl	8003cc0 <LL_ADC_IsEnabled>
 8003de2:	4604      	mov	r4, r0
 8003de4:	4835      	ldr	r0, [pc, #212]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003de6:	f7ff ff6b 	bl	8003cc0 <LL_ADC_IsEnabled>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4323      	orrs	r3, r4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	e008      	b.n	8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003dfa:	4833      	ldr	r0, [pc, #204]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003dfc:	f7ff ff60 	bl	8003cc0 <LL_ADC_IsEnabled>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d047      	beq.n	8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	6811      	ldr	r1, [r2, #0]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	6892      	ldr	r2, [r2, #8]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	431a      	orrs	r2, r3
 8003e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e28:	e03a      	b.n	8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10e      	bne.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003e4a:	481b      	ldr	r0, [pc, #108]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e4c:	f7ff ff38 	bl	8003cc0 <LL_ADC_IsEnabled>
 8003e50:	4604      	mov	r4, r0
 8003e52:	481a      	ldr	r0, [pc, #104]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e54:	f7ff ff34 	bl	8003cc0 <LL_ADC_IsEnabled>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4323      	orrs	r3, r4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e008      	b.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003e68:	4817      	ldr	r0, [pc, #92]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003e6a:	f7ff ff29 	bl	8003cc0 <LL_ADC_IsEnabled>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003e88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e8a:	e009      	b.n	8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003e9e:	e000      	b.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ea0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003eaa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	378c      	adds	r7, #140	; 0x8c
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40022000 	.word	0x40022000
 8003ebc:	40022100 	.word	0x40022100
 8003ec0:	40022300 	.word	0x40022300
 8003ec4:	58026300 	.word	0x58026300
 8003ec8:	58026000 	.word	0x58026000
 8003ecc:	fffff0e0 	.word	0xfffff0e0

08003ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <__NVIC_SetPriorityGrouping+0x40>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eec:	4013      	ands	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <__NVIC_SetPriorityGrouping+0x44>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003efe:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <__NVIC_SetPriorityGrouping+0x40>)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	60d3      	str	r3, [r2, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000ed00 	.word	0xe000ed00
 8003f14:	05fa0000 	.word	0x05fa0000

08003f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <__NVIC_GetPriorityGrouping+0x18>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	f003 0307 	and.w	r3, r3, #7
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	db0b      	blt.n	8003f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	f003 021f 	and.w	r2, r3, #31
 8003f4c:	4907      	ldr	r1, [pc, #28]	; (8003f6c <__NVIC_EnableIRQ+0x38>)
 8003f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2001      	movs	r0, #1
 8003f56:	fa00 f202 	lsl.w	r2, r0, r2
 8003f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	e000e100 	.word	0xe000e100

08003f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	6039      	str	r1, [r7, #0]
 8003f7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	db0a      	blt.n	8003f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	490c      	ldr	r1, [pc, #48]	; (8003fbc <__NVIC_SetPriority+0x4c>)
 8003f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f8e:	0112      	lsls	r2, r2, #4
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	440b      	add	r3, r1
 8003f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f98:	e00a      	b.n	8003fb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4908      	ldr	r1, [pc, #32]	; (8003fc0 <__NVIC_SetPriority+0x50>)
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	3b04      	subs	r3, #4
 8003fa8:	0112      	lsls	r2, r2, #4
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	440b      	add	r3, r1
 8003fae:	761a      	strb	r2, [r3, #24]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000e100 	.word	0xe000e100
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	; 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f1c3 0307 	rsb	r3, r3, #7
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	bf28      	it	cs
 8003fe2:	2304      	movcs	r3, #4
 8003fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d902      	bls.n	8003ff4 <NVIC_EncodePriority+0x30>
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3b03      	subs	r3, #3
 8003ff2:	e000      	b.n	8003ff6 <NVIC_EncodePriority+0x32>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43da      	mvns	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	401a      	ands	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800400c:	f04f 31ff 	mov.w	r1, #4294967295
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	43d9      	mvns	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800401c:	4313      	orrs	r3, r2
         );
}
 800401e:	4618      	mov	r0, r3
 8004020:	3724      	adds	r7, #36	; 0x24
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800403c:	d301      	bcc.n	8004042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800403e:	2301      	movs	r3, #1
 8004040:	e00f      	b.n	8004062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004042:	4a0a      	ldr	r2, [pc, #40]	; (800406c <SysTick_Config+0x40>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b01      	subs	r3, #1
 8004048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800404a:	210f      	movs	r1, #15
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	f7ff ff8e 	bl	8003f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <SysTick_Config+0x40>)
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <SysTick_Config+0x40>)
 800405c:	2207      	movs	r2, #7
 800405e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	e000e010 	.word	0xe000e010

08004070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ff29 	bl	8003ed0 <__NVIC_SetPriorityGrouping>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	4603      	mov	r3, r0
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004094:	f7ff ff40 	bl	8003f18 <__NVIC_GetPriorityGrouping>
 8004098:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	6978      	ldr	r0, [r7, #20]
 80040a0:	f7ff ff90 	bl	8003fc4 <NVIC_EncodePriority>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff5f 	bl	8003f70 <__NVIC_SetPriority>
}
 80040b2:	bf00      	nop
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff33 	bl	8003f34 <__NVIC_EnableIRQ>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ffa4 	bl	800402c <SysTick_Config>
 80040e4:	4603      	mov	r3, r0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7fe fb4a 	bl	8002790 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e314      	b.n	8004732 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a66      	ldr	r2, [pc, #408]	; (80042a8 <HAL_DMA_Init+0x1b8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d04a      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_DMA_Init+0x1bc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d045      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a63      	ldr	r2, [pc, #396]	; (80042b0 <HAL_DMA_Init+0x1c0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d040      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a62      	ldr	r2, [pc, #392]	; (80042b4 <HAL_DMA_Init+0x1c4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d03b      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a60      	ldr	r2, [pc, #384]	; (80042b8 <HAL_DMA_Init+0x1c8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d036      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5f      	ldr	r2, [pc, #380]	; (80042bc <HAL_DMA_Init+0x1cc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d031      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5d      	ldr	r2, [pc, #372]	; (80042c0 <HAL_DMA_Init+0x1d0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d02c      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a5c      	ldr	r2, [pc, #368]	; (80042c4 <HAL_DMA_Init+0x1d4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d027      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a5a      	ldr	r2, [pc, #360]	; (80042c8 <HAL_DMA_Init+0x1d8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d022      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a59      	ldr	r2, [pc, #356]	; (80042cc <HAL_DMA_Init+0x1dc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01d      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a57      	ldr	r2, [pc, #348]	; (80042d0 <HAL_DMA_Init+0x1e0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d018      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <HAL_DMA_Init+0x1e4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a54      	ldr	r2, [pc, #336]	; (80042d8 <HAL_DMA_Init+0x1e8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00e      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a53      	ldr	r2, [pc, #332]	; (80042dc <HAL_DMA_Init+0x1ec>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <HAL_DMA_Init+0x1f0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d004      	beq.n	80041a8 <HAL_DMA_Init+0xb8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_DMA_Init+0x1f4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_DMA_Init+0xbc>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_DMA_Init+0xbe>
 80041ac:	2300      	movs	r3, #0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 813c 	beq.w	800442c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a37      	ldr	r2, [pc, #220]	; (80042a8 <HAL_DMA_Init+0x1b8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04a      	beq.n	8004264 <HAL_DMA_Init+0x174>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a36      	ldr	r2, [pc, #216]	; (80042ac <HAL_DMA_Init+0x1bc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d045      	beq.n	8004264 <HAL_DMA_Init+0x174>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a34      	ldr	r2, [pc, #208]	; (80042b0 <HAL_DMA_Init+0x1c0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d040      	beq.n	8004264 <HAL_DMA_Init+0x174>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <HAL_DMA_Init+0x1c4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d03b      	beq.n	8004264 <HAL_DMA_Init+0x174>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a31      	ldr	r2, [pc, #196]	; (80042b8 <HAL_DMA_Init+0x1c8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d036      	beq.n	8004264 <HAL_DMA_Init+0x174>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a30      	ldr	r2, [pc, #192]	; (80042bc <HAL_DMA_Init+0x1cc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d031      	beq.n	8004264 <HAL_DMA_Init+0x174>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2e      	ldr	r2, [pc, #184]	; (80042c0 <HAL_DMA_Init+0x1d0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02c      	beq.n	8004264 <HAL_DMA_Init+0x174>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_DMA_Init+0x1d4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d027      	beq.n	8004264 <HAL_DMA_Init+0x174>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HAL_DMA_Init+0x1d8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d022      	beq.n	8004264 <HAL_DMA_Init+0x174>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <HAL_DMA_Init+0x1dc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01d      	beq.n	8004264 <HAL_DMA_Init+0x174>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <HAL_DMA_Init+0x1e0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d018      	beq.n	8004264 <HAL_DMA_Init+0x174>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <HAL_DMA_Init+0x1e4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d013      	beq.n	8004264 <HAL_DMA_Init+0x174>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <HAL_DMA_Init+0x1e8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_DMA_Init+0x174>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a24      	ldr	r2, [pc, #144]	; (80042dc <HAL_DMA_Init+0x1ec>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_DMA_Init+0x174>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_DMA_Init+0x1f0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_DMA_Init+0x174>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <HAL_DMA_Init+0x1f4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d108      	bne.n	8004276 <HAL_DMA_Init+0x186>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e007      	b.n	8004286 <HAL_DMA_Init+0x196>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004286:	e02f      	b.n	80042e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004288:	f7fe fa82 	bl	8002790 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b05      	cmp	r3, #5
 8004294:	d928      	bls.n	80042e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2203      	movs	r2, #3
 80042a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e244      	b.n	8004732 <HAL_DMA_Init+0x642>
 80042a8:	40020010 	.word	0x40020010
 80042ac:	40020028 	.word	0x40020028
 80042b0:	40020040 	.word	0x40020040
 80042b4:	40020058 	.word	0x40020058
 80042b8:	40020070 	.word	0x40020070
 80042bc:	40020088 	.word	0x40020088
 80042c0:	400200a0 	.word	0x400200a0
 80042c4:	400200b8 	.word	0x400200b8
 80042c8:	40020410 	.word	0x40020410
 80042cc:	40020428 	.word	0x40020428
 80042d0:	40020440 	.word	0x40020440
 80042d4:	40020458 	.word	0x40020458
 80042d8:	40020470 	.word	0x40020470
 80042dc:	40020488 	.word	0x40020488
 80042e0:	400204a0 	.word	0x400204a0
 80042e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1c8      	bne.n	8004288 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4b84      	ldr	r3, [pc, #528]	; (8004514 <HAL_DMA_Init+0x424>)
 8004302:	4013      	ands	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800430e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004326:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2b04      	cmp	r3, #4
 800433a:	d107      	bne.n	800434c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	4313      	orrs	r3, r2
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b28      	cmp	r3, #40	; 0x28
 8004352:	d903      	bls.n	800435c <HAL_DMA_Init+0x26c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b2e      	cmp	r3, #46	; 0x2e
 800435a:	d91f      	bls.n	800439c <HAL_DMA_Init+0x2ac>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b3e      	cmp	r3, #62	; 0x3e
 8004362:	d903      	bls.n	800436c <HAL_DMA_Init+0x27c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b42      	cmp	r3, #66	; 0x42
 800436a:	d917      	bls.n	800439c <HAL_DMA_Init+0x2ac>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b46      	cmp	r3, #70	; 0x46
 8004372:	d903      	bls.n	800437c <HAL_DMA_Init+0x28c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b48      	cmp	r3, #72	; 0x48
 800437a:	d90f      	bls.n	800439c <HAL_DMA_Init+0x2ac>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b4e      	cmp	r3, #78	; 0x4e
 8004382:	d903      	bls.n	800438c <HAL_DMA_Init+0x29c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b52      	cmp	r3, #82	; 0x52
 800438a:	d907      	bls.n	800439c <HAL_DMA_Init+0x2ac>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b73      	cmp	r3, #115	; 0x73
 8004392:	d905      	bls.n	80043a0 <HAL_DMA_Init+0x2b0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b77      	cmp	r3, #119	; 0x77
 800439a:	d801      	bhi.n	80043a0 <HAL_DMA_Init+0x2b0>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_DMA_Init+0x2b2>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d117      	bne.n	8004408 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00e      	beq.n	8004408 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 fdcc 	bl	8005f88 <DMA_CheckFifoParam>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2240      	movs	r2, #64	; 0x40
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e194      	b.n	8004732 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f001 fd07 	bl	8005e24 <DMA_CalcBaseAndBitshift>
 8004416:	4603      	mov	r3, r0
 8004418:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	223f      	movs	r2, #63	; 0x3f
 8004424:	409a      	lsls	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	609a      	str	r2, [r3, #8]
 800442a:	e0ca      	b.n	80045c2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a39      	ldr	r2, [pc, #228]	; (8004518 <HAL_DMA_Init+0x428>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_Init+0x38c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <HAL_DMA_Init+0x42c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_Init+0x38c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a36      	ldr	r2, [pc, #216]	; (8004520 <HAL_DMA_Init+0x430>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_Init+0x38c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a35      	ldr	r2, [pc, #212]	; (8004524 <HAL_DMA_Init+0x434>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_Init+0x38c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_DMA_Init+0x438>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_Init+0x38c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <HAL_DMA_Init+0x43c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_Init+0x38c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <HAL_DMA_Init+0x440>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_Init+0x38c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <HAL_DMA_Init+0x444>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_DMA_Init+0x390>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_DMA_Init+0x392>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8094 	beq.w	80045b0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_DMA_Init+0x428>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d021      	beq.n	80044d6 <HAL_DMA_Init+0x3e6>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_DMA_Init+0x42c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01c      	beq.n	80044d6 <HAL_DMA_Init+0x3e6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_DMA_Init+0x430>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d017      	beq.n	80044d6 <HAL_DMA_Init+0x3e6>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_DMA_Init+0x434>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d012      	beq.n	80044d6 <HAL_DMA_Init+0x3e6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_DMA_Init+0x438>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00d      	beq.n	80044d6 <HAL_DMA_Init+0x3e6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_DMA_Init+0x43c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d008      	beq.n	80044d6 <HAL_DMA_Init+0x3e6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_DMA_Init+0x440>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <HAL_DMA_Init+0x3e6>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_DMA_Init+0x444>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_DMA_Init+0x448>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d01d      	beq.n	800453c <HAL_DMA_Init+0x44c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d102      	bne.n	800450e <HAL_DMA_Init+0x41e>
 8004508:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800450c:	e017      	b.n	800453e <HAL_DMA_Init+0x44e>
 800450e:	2300      	movs	r3, #0
 8004510:	e015      	b.n	800453e <HAL_DMA_Init+0x44e>
 8004512:	bf00      	nop
 8004514:	fe10803f 	.word	0xfe10803f
 8004518:	58025408 	.word	0x58025408
 800451c:	5802541c 	.word	0x5802541c
 8004520:	58025430 	.word	0x58025430
 8004524:	58025444 	.word	0x58025444
 8004528:	58025458 	.word	0x58025458
 800452c:	5802546c 	.word	0x5802546c
 8004530:	58025480 	.word	0x58025480
 8004534:	58025494 	.word	0x58025494
 8004538:	fffe000f 	.word	0xfffe000f
 800453c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68d2      	ldr	r2, [r2, #12]
 8004542:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004544:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800454c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004554:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800455c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800456c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4b6e      	ldr	r3, [pc, #440]	; (800473c <HAL_DMA_Init+0x64c>)
 8004584:	4413      	add	r3, r2
 8004586:	4a6e      	ldr	r2, [pc, #440]	; (8004740 <HAL_DMA_Init+0x650>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 fc45 	bl	8005e24 <DMA_CalcBaseAndBitshift>
 800459a:	4603      	mov	r3, r0
 800459c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	e008      	b.n	80045c2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2203      	movs	r2, #3
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0b7      	b.n	8004732 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5f      	ldr	r2, [pc, #380]	; (8004744 <HAL_DMA_Init+0x654>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d072      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a5d      	ldr	r2, [pc, #372]	; (8004748 <HAL_DMA_Init+0x658>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d06d      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a5c      	ldr	r2, [pc, #368]	; (800474c <HAL_DMA_Init+0x65c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d068      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5a      	ldr	r2, [pc, #360]	; (8004750 <HAL_DMA_Init+0x660>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d063      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a59      	ldr	r2, [pc, #356]	; (8004754 <HAL_DMA_Init+0x664>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d05e      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a57      	ldr	r2, [pc, #348]	; (8004758 <HAL_DMA_Init+0x668>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d059      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a56      	ldr	r2, [pc, #344]	; (800475c <HAL_DMA_Init+0x66c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d054      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a54      	ldr	r2, [pc, #336]	; (8004760 <HAL_DMA_Init+0x670>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d04f      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a53      	ldr	r2, [pc, #332]	; (8004764 <HAL_DMA_Init+0x674>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d04a      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a51      	ldr	r2, [pc, #324]	; (8004768 <HAL_DMA_Init+0x678>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d045      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a50      	ldr	r2, [pc, #320]	; (800476c <HAL_DMA_Init+0x67c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d040      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <HAL_DMA_Init+0x680>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d03b      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a4d      	ldr	r2, [pc, #308]	; (8004774 <HAL_DMA_Init+0x684>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d036      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a4b      	ldr	r2, [pc, #300]	; (8004778 <HAL_DMA_Init+0x688>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a4a      	ldr	r2, [pc, #296]	; (800477c <HAL_DMA_Init+0x68c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d02c      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a48      	ldr	r2, [pc, #288]	; (8004780 <HAL_DMA_Init+0x690>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d027      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a47      	ldr	r2, [pc, #284]	; (8004784 <HAL_DMA_Init+0x694>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a45      	ldr	r2, [pc, #276]	; (8004788 <HAL_DMA_Init+0x698>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a44      	ldr	r2, [pc, #272]	; (800478c <HAL_DMA_Init+0x69c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a42      	ldr	r2, [pc, #264]	; (8004790 <HAL_DMA_Init+0x6a0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a41      	ldr	r2, [pc, #260]	; (8004794 <HAL_DMA_Init+0x6a4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3f      	ldr	r2, [pc, #252]	; (8004798 <HAL_DMA_Init+0x6a8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3e      	ldr	r2, [pc, #248]	; (800479c <HAL_DMA_Init+0x6ac>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_DMA_Init+0x5c2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3c      	ldr	r2, [pc, #240]	; (80047a0 <HAL_DMA_Init+0x6b0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_DMA_Init+0x5c6>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_DMA_Init+0x5c8>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d032      	beq.n	8004722 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 fcdf 	bl	8006080 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b80      	cmp	r3, #128	; 0x80
 80046c8:	d102      	bne.n	80046d0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d010      	beq.n	8004710 <HAL_DMA_Init+0x620>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d80c      	bhi.n	8004710 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 fd5c 	bl	80061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	e008      	b.n	8004722 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	a7fdabf8 	.word	0xa7fdabf8
 8004740:	cccccccd 	.word	0xcccccccd
 8004744:	40020010 	.word	0x40020010
 8004748:	40020028 	.word	0x40020028
 800474c:	40020040 	.word	0x40020040
 8004750:	40020058 	.word	0x40020058
 8004754:	40020070 	.word	0x40020070
 8004758:	40020088 	.word	0x40020088
 800475c:	400200a0 	.word	0x400200a0
 8004760:	400200b8 	.word	0x400200b8
 8004764:	40020410 	.word	0x40020410
 8004768:	40020428 	.word	0x40020428
 800476c:	40020440 	.word	0x40020440
 8004770:	40020458 	.word	0x40020458
 8004774:	40020470 	.word	0x40020470
 8004778:	40020488 	.word	0x40020488
 800477c:	400204a0 	.word	0x400204a0
 8004780:	400204b8 	.word	0x400204b8
 8004784:	58025408 	.word	0x58025408
 8004788:	5802541c 	.word	0x5802541c
 800478c:	58025430 	.word	0x58025430
 8004790:	58025444 	.word	0x58025444
 8004794:	58025458 	.word	0x58025458
 8004798:	5802546c 	.word	0x5802546c
 800479c:	58025480 	.word	0x58025480
 80047a0:	58025494 	.word	0x58025494

080047a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e226      	b.n	8004c0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_DMA_Start_IT+0x2a>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e21f      	b.n	8004c0e <HAL_DMA_Start_IT+0x46a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	f040 820a 	bne.w	8004bf8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a68      	ldr	r2, [pc, #416]	; (8004998 <HAL_DMA_Start_IT+0x1f4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d04a      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a66      	ldr	r2, [pc, #408]	; (800499c <HAL_DMA_Start_IT+0x1f8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d045      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <HAL_DMA_Start_IT+0x1fc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d040      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a63      	ldr	r2, [pc, #396]	; (80049a4 <HAL_DMA_Start_IT+0x200>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d03b      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a62      	ldr	r2, [pc, #392]	; (80049a8 <HAL_DMA_Start_IT+0x204>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d036      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a60      	ldr	r2, [pc, #384]	; (80049ac <HAL_DMA_Start_IT+0x208>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d031      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5f      	ldr	r2, [pc, #380]	; (80049b0 <HAL_DMA_Start_IT+0x20c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d02c      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5d      	ldr	r2, [pc, #372]	; (80049b4 <HAL_DMA_Start_IT+0x210>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d027      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a5c      	ldr	r2, [pc, #368]	; (80049b8 <HAL_DMA_Start_IT+0x214>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d022      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a5a      	ldr	r2, [pc, #360]	; (80049bc <HAL_DMA_Start_IT+0x218>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01d      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a59      	ldr	r2, [pc, #356]	; (80049c0 <HAL_DMA_Start_IT+0x21c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d018      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a57      	ldr	r2, [pc, #348]	; (80049c4 <HAL_DMA_Start_IT+0x220>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a56      	ldr	r2, [pc, #344]	; (80049c8 <HAL_DMA_Start_IT+0x224>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a54      	ldr	r2, [pc, #336]	; (80049cc <HAL_DMA_Start_IT+0x228>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <HAL_DMA_Start_IT+0x22c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_DMA_Start_IT+0xee>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a51      	ldr	r2, [pc, #324]	; (80049d4 <HAL_DMA_Start_IT+0x230>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <HAL_DMA_Start_IT+0x100>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e007      	b.n	80048b4 <HAL_DMA_Start_IT+0x110>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f001 f906 	bl	8005acc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a34      	ldr	r2, [pc, #208]	; (8004998 <HAL_DMA_Start_IT+0x1f4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d04a      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a33      	ldr	r2, [pc, #204]	; (800499c <HAL_DMA_Start_IT+0x1f8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d045      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a31      	ldr	r2, [pc, #196]	; (80049a0 <HAL_DMA_Start_IT+0x1fc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d040      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <HAL_DMA_Start_IT+0x200>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d03b      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2e      	ldr	r2, [pc, #184]	; (80049a8 <HAL_DMA_Start_IT+0x204>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d036      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2d      	ldr	r2, [pc, #180]	; (80049ac <HAL_DMA_Start_IT+0x208>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d031      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <HAL_DMA_Start_IT+0x20c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02c      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <HAL_DMA_Start_IT+0x210>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d027      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <HAL_DMA_Start_IT+0x214>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a27      	ldr	r2, [pc, #156]	; (80049bc <HAL_DMA_Start_IT+0x218>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01d      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a25      	ldr	r2, [pc, #148]	; (80049c0 <HAL_DMA_Start_IT+0x21c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a24      	ldr	r2, [pc, #144]	; (80049c4 <HAL_DMA_Start_IT+0x220>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a22      	ldr	r2, [pc, #136]	; (80049c8 <HAL_DMA_Start_IT+0x224>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a21      	ldr	r2, [pc, #132]	; (80049cc <HAL_DMA_Start_IT+0x228>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <HAL_DMA_Start_IT+0x22c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_DMA_Start_IT+0x1bc>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <HAL_DMA_Start_IT+0x230>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_DMA_Start_IT+0x1c0>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_DMA_Start_IT+0x1c2>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d036      	beq.n	80049d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 021e 	bic.w	r2, r3, #30
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0216 	orr.w	r2, r2, #22
 800497c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d03e      	beq.n	8004a04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0208 	orr.w	r2, r2, #8
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e035      	b.n	8004a04 <HAL_DMA_Start_IT+0x260>
 8004998:	40020010 	.word	0x40020010
 800499c:	40020028 	.word	0x40020028
 80049a0:	40020040 	.word	0x40020040
 80049a4:	40020058 	.word	0x40020058
 80049a8:	40020070 	.word	0x40020070
 80049ac:	40020088 	.word	0x40020088
 80049b0:	400200a0 	.word	0x400200a0
 80049b4:	400200b8 	.word	0x400200b8
 80049b8:	40020410 	.word	0x40020410
 80049bc:	40020428 	.word	0x40020428
 80049c0:	40020440 	.word	0x40020440
 80049c4:	40020458 	.word	0x40020458
 80049c8:	40020470 	.word	0x40020470
 80049cc:	40020488 	.word	0x40020488
 80049d0:	400204a0 	.word	0x400204a0
 80049d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 020e 	bic.w	r2, r3, #14
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 020a 	orr.w	r2, r2, #10
 80049ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0204 	orr.w	r2, r2, #4
 8004a02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a83      	ldr	r2, [pc, #524]	; (8004c18 <HAL_DMA_Start_IT+0x474>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d072      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a82      	ldr	r2, [pc, #520]	; (8004c1c <HAL_DMA_Start_IT+0x478>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d06d      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a80      	ldr	r2, [pc, #512]	; (8004c20 <HAL_DMA_Start_IT+0x47c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d068      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7f      	ldr	r2, [pc, #508]	; (8004c24 <HAL_DMA_Start_IT+0x480>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d063      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7d      	ldr	r2, [pc, #500]	; (8004c28 <HAL_DMA_Start_IT+0x484>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d05e      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7c      	ldr	r2, [pc, #496]	; (8004c2c <HAL_DMA_Start_IT+0x488>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d059      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a7a      	ldr	r2, [pc, #488]	; (8004c30 <HAL_DMA_Start_IT+0x48c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d054      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a79      	ldr	r2, [pc, #484]	; (8004c34 <HAL_DMA_Start_IT+0x490>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d04f      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a77      	ldr	r2, [pc, #476]	; (8004c38 <HAL_DMA_Start_IT+0x494>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d04a      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a76      	ldr	r2, [pc, #472]	; (8004c3c <HAL_DMA_Start_IT+0x498>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d045      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a74      	ldr	r2, [pc, #464]	; (8004c40 <HAL_DMA_Start_IT+0x49c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d040      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a73      	ldr	r2, [pc, #460]	; (8004c44 <HAL_DMA_Start_IT+0x4a0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d03b      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a71      	ldr	r2, [pc, #452]	; (8004c48 <HAL_DMA_Start_IT+0x4a4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d036      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a70      	ldr	r2, [pc, #448]	; (8004c4c <HAL_DMA_Start_IT+0x4a8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d031      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6e      	ldr	r2, [pc, #440]	; (8004c50 <HAL_DMA_Start_IT+0x4ac>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d02c      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6d      	ldr	r2, [pc, #436]	; (8004c54 <HAL_DMA_Start_IT+0x4b0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d027      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a6b      	ldr	r2, [pc, #428]	; (8004c58 <HAL_DMA_Start_IT+0x4b4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d022      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a6a      	ldr	r2, [pc, #424]	; (8004c5c <HAL_DMA_Start_IT+0x4b8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d01d      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a68      	ldr	r2, [pc, #416]	; (8004c60 <HAL_DMA_Start_IT+0x4bc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a67      	ldr	r2, [pc, #412]	; (8004c64 <HAL_DMA_Start_IT+0x4c0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a65      	ldr	r2, [pc, #404]	; (8004c68 <HAL_DMA_Start_IT+0x4c4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a64      	ldr	r2, [pc, #400]	; (8004c6c <HAL_DMA_Start_IT+0x4c8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a62      	ldr	r2, [pc, #392]	; (8004c70 <HAL_DMA_Start_IT+0x4cc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_DMA_Start_IT+0x350>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a61      	ldr	r2, [pc, #388]	; (8004c74 <HAL_DMA_Start_IT+0x4d0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d101      	bne.n	8004af8 <HAL_DMA_Start_IT+0x354>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <HAL_DMA_Start_IT+0x356>
 8004af8:	2300      	movs	r3, #0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01a      	beq.n	8004b34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a37      	ldr	r2, [pc, #220]	; (8004c18 <HAL_DMA_Start_IT+0x474>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d04a      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a36      	ldr	r2, [pc, #216]	; (8004c1c <HAL_DMA_Start_IT+0x478>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d045      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a34      	ldr	r2, [pc, #208]	; (8004c20 <HAL_DMA_Start_IT+0x47c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d040      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a33      	ldr	r2, [pc, #204]	; (8004c24 <HAL_DMA_Start_IT+0x480>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d03b      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a31      	ldr	r2, [pc, #196]	; (8004c28 <HAL_DMA_Start_IT+0x484>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d036      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a30      	ldr	r2, [pc, #192]	; (8004c2c <HAL_DMA_Start_IT+0x488>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d031      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2e      	ldr	r2, [pc, #184]	; (8004c30 <HAL_DMA_Start_IT+0x48c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d02c      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <HAL_DMA_Start_IT+0x490>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d027      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2b      	ldr	r2, [pc, #172]	; (8004c38 <HAL_DMA_Start_IT+0x494>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d022      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <HAL_DMA_Start_IT+0x498>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d01d      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a28      	ldr	r2, [pc, #160]	; (8004c40 <HAL_DMA_Start_IT+0x49c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d018      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a27      	ldr	r2, [pc, #156]	; (8004c44 <HAL_DMA_Start_IT+0x4a0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <HAL_DMA_Start_IT+0x4a4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <HAL_DMA_Start_IT+0x4a8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <HAL_DMA_Start_IT+0x4ac>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_DMA_Start_IT+0x430>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <HAL_DMA_Start_IT+0x4b0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d108      	bne.n	8004be6 <HAL_DMA_Start_IT+0x442>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e012      	b.n	8004c0c <HAL_DMA_Start_IT+0x468>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e009      	b.n	8004c0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40020010 	.word	0x40020010
 8004c1c:	40020028 	.word	0x40020028
 8004c20:	40020040 	.word	0x40020040
 8004c24:	40020058 	.word	0x40020058
 8004c28:	40020070 	.word	0x40020070
 8004c2c:	40020088 	.word	0x40020088
 8004c30:	400200a0 	.word	0x400200a0
 8004c34:	400200b8 	.word	0x400200b8
 8004c38:	40020410 	.word	0x40020410
 8004c3c:	40020428 	.word	0x40020428
 8004c40:	40020440 	.word	0x40020440
 8004c44:	40020458 	.word	0x40020458
 8004c48:	40020470 	.word	0x40020470
 8004c4c:	40020488 	.word	0x40020488
 8004c50:	400204a0 	.word	0x400204a0
 8004c54:	400204b8 	.word	0x400204b8
 8004c58:	58025408 	.word	0x58025408
 8004c5c:	5802541c 	.word	0x5802541c
 8004c60:	58025430 	.word	0x58025430
 8004c64:	58025444 	.word	0x58025444
 8004c68:	58025458 	.word	0x58025458
 8004c6c:	5802546c 	.word	0x5802546c
 8004c70:	58025480 	.word	0x58025480
 8004c74:	58025494 	.word	0x58025494

08004c78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c84:	4b67      	ldr	r3, [pc, #412]	; (8004e24 <HAL_DMA_IRQHandler+0x1ac>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a67      	ldr	r2, [pc, #412]	; (8004e28 <HAL_DMA_IRQHandler+0x1b0>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	0a9b      	lsrs	r3, r3, #10
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a5f      	ldr	r2, [pc, #380]	; (8004e2c <HAL_DMA_IRQHandler+0x1b4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d04a      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5d      	ldr	r2, [pc, #372]	; (8004e30 <HAL_DMA_IRQHandler+0x1b8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d045      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5c      	ldr	r2, [pc, #368]	; (8004e34 <HAL_DMA_IRQHandler+0x1bc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d040      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a5a      	ldr	r2, [pc, #360]	; (8004e38 <HAL_DMA_IRQHandler+0x1c0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d03b      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a59      	ldr	r2, [pc, #356]	; (8004e3c <HAL_DMA_IRQHandler+0x1c4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d036      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a57      	ldr	r2, [pc, #348]	; (8004e40 <HAL_DMA_IRQHandler+0x1c8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d031      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a56      	ldr	r2, [pc, #344]	; (8004e44 <HAL_DMA_IRQHandler+0x1cc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d02c      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a54      	ldr	r2, [pc, #336]	; (8004e48 <HAL_DMA_IRQHandler+0x1d0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d027      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a53      	ldr	r2, [pc, #332]	; (8004e4c <HAL_DMA_IRQHandler+0x1d4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d022      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a51      	ldr	r2, [pc, #324]	; (8004e50 <HAL_DMA_IRQHandler+0x1d8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01d      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a50      	ldr	r2, [pc, #320]	; (8004e54 <HAL_DMA_IRQHandler+0x1dc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a4e      	ldr	r2, [pc, #312]	; (8004e58 <HAL_DMA_IRQHandler+0x1e0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a4d      	ldr	r2, [pc, #308]	; (8004e5c <HAL_DMA_IRQHandler+0x1e4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a4b      	ldr	r2, [pc, #300]	; (8004e60 <HAL_DMA_IRQHandler+0x1e8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4a      	ldr	r2, [pc, #296]	; (8004e64 <HAL_DMA_IRQHandler+0x1ec>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xd2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a48      	ldr	r2, [pc, #288]	; (8004e68 <HAL_DMA_IRQHandler+0x1f0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_DMA_IRQHandler+0xd6>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <HAL_DMA_IRQHandler+0xd8>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 842b 	beq.w	80055ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2208      	movs	r2, #8
 8004d60:	409a      	lsls	r2, r3
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80a2 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2e      	ldr	r2, [pc, #184]	; (8004e2c <HAL_DMA_IRQHandler+0x1b4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d04a      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2d      	ldr	r2, [pc, #180]	; (8004e30 <HAL_DMA_IRQHandler+0x1b8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d045      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <HAL_DMA_IRQHandler+0x1bc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d040      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <HAL_DMA_IRQHandler+0x1c0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d03b      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <HAL_DMA_IRQHandler+0x1c4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d036      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <HAL_DMA_IRQHandler+0x1c8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d031      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <HAL_DMA_IRQHandler+0x1cc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d02c      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <HAL_DMA_IRQHandler+0x1d0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d027      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <HAL_DMA_IRQHandler+0x1d4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d022      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <HAL_DMA_IRQHandler+0x1d8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d01d      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <HAL_DMA_IRQHandler+0x1dc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d018      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_DMA_IRQHandler+0x1e0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <HAL_DMA_IRQHandler+0x1e4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <HAL_DMA_IRQHandler+0x1e8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <HAL_DMA_IRQHandler+0x1ec>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x194>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_DMA_IRQHandler+0x1f0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d12f      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x1f4>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf14      	ite	ne
 8004e1a:	2301      	movne	r3, #1
 8004e1c:	2300      	moveq	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	e02e      	b.n	8004e80 <HAL_DMA_IRQHandler+0x208>
 8004e22:	bf00      	nop
 8004e24:	24000000 	.word	0x24000000
 8004e28:	1b4e81b5 	.word	0x1b4e81b5
 8004e2c:	40020010 	.word	0x40020010
 8004e30:	40020028 	.word	0x40020028
 8004e34:	40020040 	.word	0x40020040
 8004e38:	40020058 	.word	0x40020058
 8004e3c:	40020070 	.word	0x40020070
 8004e40:	40020088 	.word	0x40020088
 8004e44:	400200a0 	.word	0x400200a0
 8004e48:	400200b8 	.word	0x400200b8
 8004e4c:	40020410 	.word	0x40020410
 8004e50:	40020428 	.word	0x40020428
 8004e54:	40020440 	.word	0x40020440
 8004e58:	40020458 	.word	0x40020458
 8004e5c:	40020470 	.word	0x40020470
 8004e60:	40020488 	.word	0x40020488
 8004e64:	400204a0 	.word	0x400204a0
 8004e68:	400204b8 	.word	0x400204b8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d06e      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a69      	ldr	r2, [pc, #420]	; (8005070 <HAL_DMA_IRQHandler+0x3f8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d04a      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a67      	ldr	r2, [pc, #412]	; (8005074 <HAL_DMA_IRQHandler+0x3fc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d045      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a66      	ldr	r2, [pc, #408]	; (8005078 <HAL_DMA_IRQHandler+0x400>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d040      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a64      	ldr	r2, [pc, #400]	; (800507c <HAL_DMA_IRQHandler+0x404>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d03b      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a63      	ldr	r2, [pc, #396]	; (8005080 <HAL_DMA_IRQHandler+0x408>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d036      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a61      	ldr	r2, [pc, #388]	; (8005084 <HAL_DMA_IRQHandler+0x40c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d031      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a60      	ldr	r2, [pc, #384]	; (8005088 <HAL_DMA_IRQHandler+0x410>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d02c      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5e      	ldr	r2, [pc, #376]	; (800508c <HAL_DMA_IRQHandler+0x414>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d027      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5d      	ldr	r2, [pc, #372]	; (8005090 <HAL_DMA_IRQHandler+0x418>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5b      	ldr	r2, [pc, #364]	; (8005094 <HAL_DMA_IRQHandler+0x41c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a5a      	ldr	r2, [pc, #360]	; (8005098 <HAL_DMA_IRQHandler+0x420>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a58      	ldr	r2, [pc, #352]	; (800509c <HAL_DMA_IRQHandler+0x424>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a57      	ldr	r2, [pc, #348]	; (80050a0 <HAL_DMA_IRQHandler+0x428>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a55      	ldr	r2, [pc, #340]	; (80050a4 <HAL_DMA_IRQHandler+0x42c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a54      	ldr	r2, [pc, #336]	; (80050a8 <HAL_DMA_IRQHandler+0x430>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2ee>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a52      	ldr	r2, [pc, #328]	; (80050ac <HAL_DMA_IRQHandler+0x434>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10a      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x304>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e003      	b.n	8004f84 <HAL_DMA_IRQHandler+0x30c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	2201      	movs	r2, #1
 8004f92:	409a      	lsls	r2, r3
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	f043 0202 	orr.w	r2, r3, #2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2204      	movs	r2, #4
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 808f 	beq.w	80050d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2c      	ldr	r2, [pc, #176]	; (8005070 <HAL_DMA_IRQHandler+0x3f8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d04a      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <HAL_DMA_IRQHandler+0x3fc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d045      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a29      	ldr	r2, [pc, #164]	; (8005078 <HAL_DMA_IRQHandler+0x400>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d040      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a27      	ldr	r2, [pc, #156]	; (800507c <HAL_DMA_IRQHandler+0x404>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d03b      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a26      	ldr	r2, [pc, #152]	; (8005080 <HAL_DMA_IRQHandler+0x408>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d036      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a24      	ldr	r2, [pc, #144]	; (8005084 <HAL_DMA_IRQHandler+0x40c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d031      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a23      	ldr	r2, [pc, #140]	; (8005088 <HAL_DMA_IRQHandler+0x410>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d02c      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a21      	ldr	r2, [pc, #132]	; (800508c <HAL_DMA_IRQHandler+0x414>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d027      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a20      	ldr	r2, [pc, #128]	; (8005090 <HAL_DMA_IRQHandler+0x418>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <HAL_DMA_IRQHandler+0x41c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <HAL_DMA_IRQHandler+0x420>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1b      	ldr	r2, [pc, #108]	; (800509c <HAL_DMA_IRQHandler+0x424>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <HAL_DMA_IRQHandler+0x428>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <HAL_DMA_IRQHandler+0x42c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <HAL_DMA_IRQHandler+0x430>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_DMA_IRQHandler+0x3e2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <HAL_DMA_IRQHandler+0x434>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d12a      	bne.n	80050b0 <HAL_DMA_IRQHandler+0x438>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e023      	b.n	80050b8 <HAL_DMA_IRQHandler+0x440>
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2204      	movs	r2, #4
 80050c6:	409a      	lsls	r2, r3
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f043 0204 	orr.w	r2, r3, #4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	2210      	movs	r2, #16
 80050e2:	409a      	lsls	r2, r3
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a6 	beq.w	800523a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a85      	ldr	r2, [pc, #532]	; (8005308 <HAL_DMA_IRQHandler+0x690>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d04a      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a83      	ldr	r2, [pc, #524]	; (800530c <HAL_DMA_IRQHandler+0x694>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d045      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a82      	ldr	r2, [pc, #520]	; (8005310 <HAL_DMA_IRQHandler+0x698>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d040      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a80      	ldr	r2, [pc, #512]	; (8005314 <HAL_DMA_IRQHandler+0x69c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d03b      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a7f      	ldr	r2, [pc, #508]	; (8005318 <HAL_DMA_IRQHandler+0x6a0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d036      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a7d      	ldr	r2, [pc, #500]	; (800531c <HAL_DMA_IRQHandler+0x6a4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d031      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a7c      	ldr	r2, [pc, #496]	; (8005320 <HAL_DMA_IRQHandler+0x6a8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d02c      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a7a      	ldr	r2, [pc, #488]	; (8005324 <HAL_DMA_IRQHandler+0x6ac>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d027      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a79      	ldr	r2, [pc, #484]	; (8005328 <HAL_DMA_IRQHandler+0x6b0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a77      	ldr	r2, [pc, #476]	; (800532c <HAL_DMA_IRQHandler+0x6b4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a76      	ldr	r2, [pc, #472]	; (8005330 <HAL_DMA_IRQHandler+0x6b8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a74      	ldr	r2, [pc, #464]	; (8005334 <HAL_DMA_IRQHandler+0x6bc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a73      	ldr	r2, [pc, #460]	; (8005338 <HAL_DMA_IRQHandler+0x6c0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a71      	ldr	r2, [pc, #452]	; (800533c <HAL_DMA_IRQHandler+0x6c4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a70      	ldr	r2, [pc, #448]	; (8005340 <HAL_DMA_IRQHandler+0x6c8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_DMA_IRQHandler+0x516>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a6e      	ldr	r2, [pc, #440]	; (8005344 <HAL_DMA_IRQHandler+0x6cc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10a      	bne.n	80051a4 <HAL_DMA_IRQHandler+0x52c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e009      	b.n	80051b8 <HAL_DMA_IRQHandler+0x540>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d03e      	beq.n	800523a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2210      	movs	r2, #16
 80051c6:	409a      	lsls	r2, r3
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d018      	beq.n	800520c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d108      	bne.n	80051fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d024      	beq.n	800523a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
 80051f8:	e01f      	b.n	800523a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01b      	beq.n	800523a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
 800520a:	e016      	b.n	800523a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d107      	bne.n	800522a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0208 	bic.w	r2, r2, #8
 8005228:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2220      	movs	r2, #32
 8005244:	409a      	lsls	r2, r3
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 8110 	beq.w	8005470 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <HAL_DMA_IRQHandler+0x690>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d04a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2b      	ldr	r2, [pc, #172]	; (800530c <HAL_DMA_IRQHandler+0x694>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d045      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a29      	ldr	r2, [pc, #164]	; (8005310 <HAL_DMA_IRQHandler+0x698>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d040      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a28      	ldr	r2, [pc, #160]	; (8005314 <HAL_DMA_IRQHandler+0x69c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d03b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a26      	ldr	r2, [pc, #152]	; (8005318 <HAL_DMA_IRQHandler+0x6a0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d036      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a25      	ldr	r2, [pc, #148]	; (800531c <HAL_DMA_IRQHandler+0x6a4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d031      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a23      	ldr	r2, [pc, #140]	; (8005320 <HAL_DMA_IRQHandler+0x6a8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_DMA_IRQHandler+0x6ac>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d027      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a20      	ldr	r2, [pc, #128]	; (8005328 <HAL_DMA_IRQHandler+0x6b0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1f      	ldr	r2, [pc, #124]	; (800532c <HAL_DMA_IRQHandler+0x6b4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d01d      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <HAL_DMA_IRQHandler+0x6b8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_DMA_IRQHandler+0x6bc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <HAL_DMA_IRQHandler+0x6c0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a19      	ldr	r2, [pc, #100]	; (800533c <HAL_DMA_IRQHandler+0x6c4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_DMA_IRQHandler+0x6c8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x678>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a16      	ldr	r2, [pc, #88]	; (8005344 <HAL_DMA_IRQHandler+0x6cc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d12b      	bne.n	8005348 <HAL_DMA_IRQHandler+0x6d0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	e02a      	b.n	800535c <HAL_DMA_IRQHandler+0x6e4>
 8005306:	bf00      	nop
 8005308:	40020010 	.word	0x40020010
 800530c:	40020028 	.word	0x40020028
 8005310:	40020040 	.word	0x40020040
 8005314:	40020058 	.word	0x40020058
 8005318:	40020070 	.word	0x40020070
 800531c:	40020088 	.word	0x40020088
 8005320:	400200a0 	.word	0x400200a0
 8005324:	400200b8 	.word	0x400200b8
 8005328:	40020410 	.word	0x40020410
 800532c:	40020428 	.word	0x40020428
 8005330:	40020440 	.word	0x40020440
 8005334:	40020458 	.word	0x40020458
 8005338:	40020470 	.word	0x40020470
 800533c:	40020488 	.word	0x40020488
 8005340:	400204a0 	.word	0x400204a0
 8005344:	400204b8 	.word	0x400204b8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8087 	beq.w	8005470 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2220      	movs	r2, #32
 800536c:	409a      	lsls	r2, r3
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b04      	cmp	r3, #4
 800537c:	d139      	bne.n	80053f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0216 	bic.w	r2, r2, #22
 800538c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695a      	ldr	r2, [r3, #20]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800539c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <HAL_DMA_IRQHandler+0x736>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0208 	bic.w	r2, r2, #8
 80053bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	223f      	movs	r2, #63	; 0x3f
 80053c8:	409a      	lsls	r2, r3
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 834a 	beq.w	8005a7c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
          }
          return;
 80053f0:	e344      	b.n	8005a7c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d018      	beq.n	8005432 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	2b00      	cmp	r3, #0
 8005414:	d02c      	beq.n	8005470 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
 800541e:	e027      	b.n	8005470 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d023      	beq.n	8005470 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4798      	blx	r3
 8005430:	e01e      	b.n	8005470 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10f      	bne.n	8005460 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0210 	bic.w	r2, r2, #16
 800544e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8306 	beq.w	8005a86 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8088 	beq.w	8005598 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2204      	movs	r2, #4
 800548c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a7a      	ldr	r2, [pc, #488]	; (8005680 <HAL_DMA_IRQHandler+0xa08>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d04a      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a79      	ldr	r2, [pc, #484]	; (8005684 <HAL_DMA_IRQHandler+0xa0c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d045      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a77      	ldr	r2, [pc, #476]	; (8005688 <HAL_DMA_IRQHandler+0xa10>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d040      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a76      	ldr	r2, [pc, #472]	; (800568c <HAL_DMA_IRQHandler+0xa14>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d03b      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a74      	ldr	r2, [pc, #464]	; (8005690 <HAL_DMA_IRQHandler+0xa18>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d036      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a73      	ldr	r2, [pc, #460]	; (8005694 <HAL_DMA_IRQHandler+0xa1c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d031      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a71      	ldr	r2, [pc, #452]	; (8005698 <HAL_DMA_IRQHandler+0xa20>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02c      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a70      	ldr	r2, [pc, #448]	; (800569c <HAL_DMA_IRQHandler+0xa24>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d027      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a6e      	ldr	r2, [pc, #440]	; (80056a0 <HAL_DMA_IRQHandler+0xa28>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6d      	ldr	r2, [pc, #436]	; (80056a4 <HAL_DMA_IRQHandler+0xa2c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d01d      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a6b      	ldr	r2, [pc, #428]	; (80056a8 <HAL_DMA_IRQHandler+0xa30>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6a      	ldr	r2, [pc, #424]	; (80056ac <HAL_DMA_IRQHandler+0xa34>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a68      	ldr	r2, [pc, #416]	; (80056b0 <HAL_DMA_IRQHandler+0xa38>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a67      	ldr	r2, [pc, #412]	; (80056b4 <HAL_DMA_IRQHandler+0xa3c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a65      	ldr	r2, [pc, #404]	; (80056b8 <HAL_DMA_IRQHandler+0xa40>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_DMA_IRQHandler+0x8b8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a64      	ldr	r2, [pc, #400]	; (80056bc <HAL_DMA_IRQHandler+0xa44>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d108      	bne.n	8005542 <HAL_DMA_IRQHandler+0x8ca>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e007      	b.n	8005552 <HAL_DMA_IRQHandler+0x8da>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	429a      	cmp	r2, r3
 800555c:	d307      	bcc.n	800556e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f2      	bne.n	8005552 <HAL_DMA_IRQHandler+0x8da>
 800556c:	e000      	b.n	8005570 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800556e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2203      	movs	r2, #3
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005586:	e003      	b.n	8005590 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8272 	beq.w	8005a86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
 80055aa:	e26c      	b.n	8005a86 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a43      	ldr	r2, [pc, #268]	; (80056c0 <HAL_DMA_IRQHandler+0xa48>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_DMA_IRQHandler+0x984>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a42      	ldr	r2, [pc, #264]	; (80056c4 <HAL_DMA_IRQHandler+0xa4c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_DMA_IRQHandler+0x984>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a40      	ldr	r2, [pc, #256]	; (80056c8 <HAL_DMA_IRQHandler+0xa50>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_IRQHandler+0x984>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3f      	ldr	r2, [pc, #252]	; (80056cc <HAL_DMA_IRQHandler+0xa54>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_DMA_IRQHandler+0x984>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <HAL_DMA_IRQHandler+0xa58>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_DMA_IRQHandler+0x984>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a3c      	ldr	r2, [pc, #240]	; (80056d4 <HAL_DMA_IRQHandler+0xa5c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_DMA_IRQHandler+0x984>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a3a      	ldr	r2, [pc, #232]	; (80056d8 <HAL_DMA_IRQHandler+0xa60>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_IRQHandler+0x984>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a39      	ldr	r2, [pc, #228]	; (80056dc <HAL_DMA_IRQHandler+0xa64>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_IRQHandler+0x988>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_DMA_IRQHandler+0x98a>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 823f 	beq.w	8005a86 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2204      	movs	r2, #4
 800561a:	409a      	lsls	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80cd 	beq.w	80057c0 <HAL_DMA_IRQHandler+0xb48>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80c7 	beq.w	80057c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2204      	movs	r2, #4
 800563c:	409a      	lsls	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d049      	beq.n	80056e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8210 	beq.w	8005a80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005668:	e20a      	b.n	8005a80 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8206 	beq.w	8005a80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800567c:	e200      	b.n	8005a80 <HAL_DMA_IRQHandler+0xe08>
 800567e:	bf00      	nop
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8
 80056c0:	58025408 	.word	0x58025408
 80056c4:	5802541c 	.word	0x5802541c
 80056c8:	58025430 	.word	0x58025430
 80056cc:	58025444 	.word	0x58025444
 80056d0:	58025458 	.word	0x58025458
 80056d4:	5802546c 	.word	0x5802546c
 80056d8:	58025480 	.word	0x58025480
 80056dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d160      	bne.n	80057ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a7f      	ldr	r2, [pc, #508]	; (80058ec <HAL_DMA_IRQHandler+0xc74>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a7d      	ldr	r2, [pc, #500]	; (80058f0 <HAL_DMA_IRQHandler+0xc78>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a7c      	ldr	r2, [pc, #496]	; (80058f4 <HAL_DMA_IRQHandler+0xc7c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a7a      	ldr	r2, [pc, #488]	; (80058f8 <HAL_DMA_IRQHandler+0xc80>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a79      	ldr	r2, [pc, #484]	; (80058fc <HAL_DMA_IRQHandler+0xc84>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a77      	ldr	r2, [pc, #476]	; (8005900 <HAL_DMA_IRQHandler+0xc88>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a76      	ldr	r2, [pc, #472]	; (8005904 <HAL_DMA_IRQHandler+0xc8c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a74      	ldr	r2, [pc, #464]	; (8005908 <HAL_DMA_IRQHandler+0xc90>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a73      	ldr	r2, [pc, #460]	; (800590c <HAL_DMA_IRQHandler+0xc94>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a71      	ldr	r2, [pc, #452]	; (8005910 <HAL_DMA_IRQHandler+0xc98>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a70      	ldr	r2, [pc, #448]	; (8005914 <HAL_DMA_IRQHandler+0xc9c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6e      	ldr	r2, [pc, #440]	; (8005918 <HAL_DMA_IRQHandler+0xca0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6d      	ldr	r2, [pc, #436]	; (800591c <HAL_DMA_IRQHandler+0xca4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a6b      	ldr	r2, [pc, #428]	; (8005920 <HAL_DMA_IRQHandler+0xca8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_DMA_IRQHandler+0xcac>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_IRQHandler+0xb12>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a68      	ldr	r2, [pc, #416]	; (8005928 <HAL_DMA_IRQHandler+0xcb0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <HAL_DMA_IRQHandler+0xb24>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0208 	bic.w	r2, r2, #8
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e007      	b.n	80057ac <HAL_DMA_IRQHandler+0xb34>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0204 	bic.w	r2, r2, #4
 80057aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8165 	beq.w	8005a80 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057be:	e15f      	b.n	8005a80 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2202      	movs	r2, #2
 80057ca:	409a      	lsls	r2, r3
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80c5 	beq.w	8005960 <HAL_DMA_IRQHandler+0xce8>
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80bf 	beq.w	8005960 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2202      	movs	r2, #2
 80057ec:	409a      	lsls	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d018      	beq.n	800582e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 813a 	beq.w	8005a84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005818:	e134      	b.n	8005a84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8130 	beq.w	8005a84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800582c:	e12a      	b.n	8005a84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	f040 8089 	bne.w	800594c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2b      	ldr	r2, [pc, #172]	; (80058ec <HAL_DMA_IRQHandler+0xc74>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <HAL_DMA_IRQHandler+0xc78>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <HAL_DMA_IRQHandler+0xc7c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <HAL_DMA_IRQHandler+0xc80>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <HAL_DMA_IRQHandler+0xc84>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <HAL_DMA_IRQHandler+0xc88>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a22      	ldr	r2, [pc, #136]	; (8005904 <HAL_DMA_IRQHandler+0xc8c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a20      	ldr	r2, [pc, #128]	; (8005908 <HAL_DMA_IRQHandler+0xc90>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <HAL_DMA_IRQHandler+0xc94>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_DMA_IRQHandler+0xc98>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_DMA_IRQHandler+0xc9c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <HAL_DMA_IRQHandler+0xca0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a19      	ldr	r2, [pc, #100]	; (800591c <HAL_DMA_IRQHandler+0xca4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a17      	ldr	r2, [pc, #92]	; (8005920 <HAL_DMA_IRQHandler+0xca8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a16      	ldr	r2, [pc, #88]	; (8005924 <HAL_DMA_IRQHandler+0xcac>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_IRQHandler+0xc62>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <HAL_DMA_IRQHandler+0xcb0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d128      	bne.n	800592c <HAL_DMA_IRQHandler+0xcb4>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0214 	bic.w	r2, r2, #20
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e027      	b.n	800593c <HAL_DMA_IRQHandler+0xcc4>
 80058ec:	40020010 	.word	0x40020010
 80058f0:	40020028 	.word	0x40020028
 80058f4:	40020040 	.word	0x40020040
 80058f8:	40020058 	.word	0x40020058
 80058fc:	40020070 	.word	0x40020070
 8005900:	40020088 	.word	0x40020088
 8005904:	400200a0 	.word	0x400200a0
 8005908:	400200b8 	.word	0x400200b8
 800590c:	40020410 	.word	0x40020410
 8005910:	40020428 	.word	0x40020428
 8005914:	40020440 	.word	0x40020440
 8005918:	40020458 	.word	0x40020458
 800591c:	40020470 	.word	0x40020470
 8005920:	40020488 	.word	0x40020488
 8005924:	400204a0 	.word	0x400204a0
 8005928:	400204b8 	.word	0x400204b8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 020a 	bic.w	r2, r2, #10
 800593a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8097 	beq.w	8005a84 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800595e:	e091      	b.n	8005a84 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2208      	movs	r2, #8
 800596a:	409a      	lsls	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8088 	beq.w	8005a86 <HAL_DMA_IRQHandler+0xe0e>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8082 	beq.w	8005a86 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a41      	ldr	r2, [pc, #260]	; (8005a8c <HAL_DMA_IRQHandler+0xe14>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d04a      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a3f      	ldr	r2, [pc, #252]	; (8005a90 <HAL_DMA_IRQHandler+0xe18>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d045      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3e      	ldr	r2, [pc, #248]	; (8005a94 <HAL_DMA_IRQHandler+0xe1c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d040      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <HAL_DMA_IRQHandler+0xe20>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d03b      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a3b      	ldr	r2, [pc, #236]	; (8005a9c <HAL_DMA_IRQHandler+0xe24>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d036      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a39      	ldr	r2, [pc, #228]	; (8005aa0 <HAL_DMA_IRQHandler+0xe28>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d031      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a38      	ldr	r2, [pc, #224]	; (8005aa4 <HAL_DMA_IRQHandler+0xe2c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d02c      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a36      	ldr	r2, [pc, #216]	; (8005aa8 <HAL_DMA_IRQHandler+0xe30>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d027      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a35      	ldr	r2, [pc, #212]	; (8005aac <HAL_DMA_IRQHandler+0xe34>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a33      	ldr	r2, [pc, #204]	; (8005ab0 <HAL_DMA_IRQHandler+0xe38>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01d      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a32      	ldr	r2, [pc, #200]	; (8005ab4 <HAL_DMA_IRQHandler+0xe3c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a30      	ldr	r2, [pc, #192]	; (8005ab8 <HAL_DMA_IRQHandler+0xe40>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2f      	ldr	r2, [pc, #188]	; (8005abc <HAL_DMA_IRQHandler+0xe44>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2d      	ldr	r2, [pc, #180]	; (8005ac0 <HAL_DMA_IRQHandler+0xe48>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <HAL_DMA_IRQHandler+0xe4c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xdaa>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a2a      	ldr	r2, [pc, #168]	; (8005ac8 <HAL_DMA_IRQHandler+0xe50>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <HAL_DMA_IRQHandler+0xdbc>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 021c 	bic.w	r2, r2, #28
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e007      	b.n	8005a44 <HAL_DMA_IRQHandler+0xdcc>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 020e 	bic.w	r2, r2, #14
 8005a42:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	e004      	b.n	8005a86 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a7c:	bf00      	nop
 8005a7e:	e002      	b.n	8005a86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a80:	bf00      	nop
 8005a82:	e000      	b.n	8005a86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a84:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a86:	3728      	adds	r7, #40	; 0x28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8

08005acc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ade:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7f      	ldr	r2, [pc, #508]	; (8005ce8 <DMA_SetConfig+0x21c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d072      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7d      	ldr	r2, [pc, #500]	; (8005cec <DMA_SetConfig+0x220>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d06d      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a7c      	ldr	r2, [pc, #496]	; (8005cf0 <DMA_SetConfig+0x224>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d068      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a7a      	ldr	r2, [pc, #488]	; (8005cf4 <DMA_SetConfig+0x228>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d063      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a79      	ldr	r2, [pc, #484]	; (8005cf8 <DMA_SetConfig+0x22c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d05e      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a77      	ldr	r2, [pc, #476]	; (8005cfc <DMA_SetConfig+0x230>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d059      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a76      	ldr	r2, [pc, #472]	; (8005d00 <DMA_SetConfig+0x234>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d054      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a74      	ldr	r2, [pc, #464]	; (8005d04 <DMA_SetConfig+0x238>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04f      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a73      	ldr	r2, [pc, #460]	; (8005d08 <DMA_SetConfig+0x23c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d04a      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a71      	ldr	r2, [pc, #452]	; (8005d0c <DMA_SetConfig+0x240>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d045      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a70      	ldr	r2, [pc, #448]	; (8005d10 <DMA_SetConfig+0x244>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d040      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6e      	ldr	r2, [pc, #440]	; (8005d14 <DMA_SetConfig+0x248>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d03b      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a6d      	ldr	r2, [pc, #436]	; (8005d18 <DMA_SetConfig+0x24c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d036      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a6b      	ldr	r2, [pc, #428]	; (8005d1c <DMA_SetConfig+0x250>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d031      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a6a      	ldr	r2, [pc, #424]	; (8005d20 <DMA_SetConfig+0x254>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d02c      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a68      	ldr	r2, [pc, #416]	; (8005d24 <DMA_SetConfig+0x258>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d027      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a67      	ldr	r2, [pc, #412]	; (8005d28 <DMA_SetConfig+0x25c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a65      	ldr	r2, [pc, #404]	; (8005d2c <DMA_SetConfig+0x260>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a64      	ldr	r2, [pc, #400]	; (8005d30 <DMA_SetConfig+0x264>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a62      	ldr	r2, [pc, #392]	; (8005d34 <DMA_SetConfig+0x268>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a61      	ldr	r2, [pc, #388]	; (8005d38 <DMA_SetConfig+0x26c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5f      	ldr	r2, [pc, #380]	; (8005d3c <DMA_SetConfig+0x270>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5e      	ldr	r2, [pc, #376]	; (8005d40 <DMA_SetConfig+0x274>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <DMA_SetConfig+0x10a>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5c      	ldr	r2, [pc, #368]	; (8005d44 <DMA_SetConfig+0x278>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d101      	bne.n	8005bda <DMA_SetConfig+0x10e>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <DMA_SetConfig+0x110>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005be8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bfa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a39      	ldr	r2, [pc, #228]	; (8005ce8 <DMA_SetConfig+0x21c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04a      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a38      	ldr	r2, [pc, #224]	; (8005cec <DMA_SetConfig+0x220>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d045      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a36      	ldr	r2, [pc, #216]	; (8005cf0 <DMA_SetConfig+0x224>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d040      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a35      	ldr	r2, [pc, #212]	; (8005cf4 <DMA_SetConfig+0x228>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d03b      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a33      	ldr	r2, [pc, #204]	; (8005cf8 <DMA_SetConfig+0x22c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d036      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a32      	ldr	r2, [pc, #200]	; (8005cfc <DMA_SetConfig+0x230>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d031      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a30      	ldr	r2, [pc, #192]	; (8005d00 <DMA_SetConfig+0x234>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02c      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2f      	ldr	r2, [pc, #188]	; (8005d04 <DMA_SetConfig+0x238>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d027      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2d      	ldr	r2, [pc, #180]	; (8005d08 <DMA_SetConfig+0x23c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d022      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2c      	ldr	r2, [pc, #176]	; (8005d0c <DMA_SetConfig+0x240>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d01d      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <DMA_SetConfig+0x244>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d018      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <DMA_SetConfig+0x248>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <DMA_SetConfig+0x24c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00e      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <DMA_SetConfig+0x250>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d009      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <DMA_SetConfig+0x254>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <DMA_SetConfig+0x1d0>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <DMA_SetConfig+0x258>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <DMA_SetConfig+0x1d4>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <DMA_SetConfig+0x1d6>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d059      	beq.n	8005d5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	223f      	movs	r2, #63	; 0x3f
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cc4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d138      	bne.n	8005d48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ce6:	e086      	b.n	8005df6 <DMA_SetConfig+0x32a>
 8005ce8:	40020010 	.word	0x40020010
 8005cec:	40020028 	.word	0x40020028
 8005cf0:	40020040 	.word	0x40020040
 8005cf4:	40020058 	.word	0x40020058
 8005cf8:	40020070 	.word	0x40020070
 8005cfc:	40020088 	.word	0x40020088
 8005d00:	400200a0 	.word	0x400200a0
 8005d04:	400200b8 	.word	0x400200b8
 8005d08:	40020410 	.word	0x40020410
 8005d0c:	40020428 	.word	0x40020428
 8005d10:	40020440 	.word	0x40020440
 8005d14:	40020458 	.word	0x40020458
 8005d18:	40020470 	.word	0x40020470
 8005d1c:	40020488 	.word	0x40020488
 8005d20:	400204a0 	.word	0x400204a0
 8005d24:	400204b8 	.word	0x400204b8
 8005d28:	58025408 	.word	0x58025408
 8005d2c:	5802541c 	.word	0x5802541c
 8005d30:	58025430 	.word	0x58025430
 8005d34:	58025444 	.word	0x58025444
 8005d38:	58025458 	.word	0x58025458
 8005d3c:	5802546c 	.word	0x5802546c
 8005d40:	58025480 	.word	0x58025480
 8005d44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]
}
 8005d58:	e04d      	b.n	8005df6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a29      	ldr	r2, [pc, #164]	; (8005e04 <DMA_SetConfig+0x338>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d022      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <DMA_SetConfig+0x33c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01d      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <DMA_SetConfig+0x340>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d018      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <DMA_SetConfig+0x344>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a23      	ldr	r2, [pc, #140]	; (8005e14 <DMA_SetConfig+0x348>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <DMA_SetConfig+0x34c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a20      	ldr	r2, [pc, #128]	; (8005e1c <DMA_SetConfig+0x350>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <DMA_SetConfig+0x2de>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <DMA_SetConfig+0x354>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d101      	bne.n	8005dae <DMA_SetConfig+0x2e2>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <DMA_SetConfig+0x2e4>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d020      	beq.n	8005df6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d108      	bne.n	8005de6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	60da      	str	r2, [r3, #12]
}
 8005de4:	e007      	b.n	8005df6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	58025408 	.word	0x58025408
 8005e08:	5802541c 	.word	0x5802541c
 8005e0c:	58025430 	.word	0x58025430
 8005e10:	58025444 	.word	0x58025444
 8005e14:	58025458 	.word	0x58025458
 8005e18:	5802546c 	.word	0x5802546c
 8005e1c:	58025480 	.word	0x58025480
 8005e20:	58025494 	.word	0x58025494

08005e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a42      	ldr	r2, [pc, #264]	; (8005f3c <DMA_CalcBaseAndBitshift+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04a      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a41      	ldr	r2, [pc, #260]	; (8005f40 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d045      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3f      	ldr	r2, [pc, #252]	; (8005f44 <DMA_CalcBaseAndBitshift+0x120>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d040      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3e      	ldr	r2, [pc, #248]	; (8005f48 <DMA_CalcBaseAndBitshift+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d03b      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a3c      	ldr	r2, [pc, #240]	; (8005f4c <DMA_CalcBaseAndBitshift+0x128>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d036      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a3b      	ldr	r2, [pc, #236]	; (8005f50 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d031      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a39      	ldr	r2, [pc, #228]	; (8005f54 <DMA_CalcBaseAndBitshift+0x130>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d02c      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a38      	ldr	r2, [pc, #224]	; (8005f58 <DMA_CalcBaseAndBitshift+0x134>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d027      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a36      	ldr	r2, [pc, #216]	; (8005f5c <DMA_CalcBaseAndBitshift+0x138>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a35      	ldr	r2, [pc, #212]	; (8005f60 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a33      	ldr	r2, [pc, #204]	; (8005f64 <DMA_CalcBaseAndBitshift+0x140>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a32      	ldr	r2, [pc, #200]	; (8005f68 <DMA_CalcBaseAndBitshift+0x144>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <DMA_CalcBaseAndBitshift+0x148>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <DMA_CalcBaseAndBitshift+0x14c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <DMA_CalcBaseAndBitshift+0x150>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2c      	ldr	r2, [pc, #176]	; (8005f78 <DMA_CalcBaseAndBitshift+0x154>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <DMA_CalcBaseAndBitshift+0xac>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <DMA_CalcBaseAndBitshift+0xae>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d024      	beq.n	8005f20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	3b10      	subs	r3, #16
 8005ede:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <DMA_CalcBaseAndBitshift+0x158>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d908      	bls.n	8005f10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <DMA_CalcBaseAndBitshift+0x160>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	659a      	str	r2, [r3, #88]	; 0x58
 8005f0e:	e00d      	b.n	8005f2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <DMA_CalcBaseAndBitshift+0x160>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f1e:	e005      	b.n	8005f2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	aaaaaaab 	.word	0xaaaaaaab
 8005f80:	0800de6c 	.word	0x0800de6c
 8005f84:	fffffc00 	.word	0xfffffc00

08005f88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d120      	bne.n	8005fde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d858      	bhi.n	8006056 <DMA_CheckFifoParam+0xce>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <DMA_CheckFifoParam+0x24>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcf 	.word	0x08005fcf
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08006057 	.word	0x08006057
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d048      	beq.n	800605a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fcc:	e045      	b.n	800605a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fd6:	d142      	bne.n	800605e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fdc:	e03f      	b.n	800605e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe6:	d123      	bne.n	8006030 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d838      	bhi.n	8006062 <DMA_CheckFifoParam+0xda>
 8005ff0:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <DMA_CheckFifoParam+0x70>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800600f 	.word	0x0800600f
 8006000:	08006009 	.word	0x08006009
 8006004:	08006021 	.word	0x08006021
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
        break;
 800600c:	e030      	b.n	8006070 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d025      	beq.n	8006066 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800601e:	e022      	b.n	8006066 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006028:	d11f      	bne.n	800606a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800602e:	e01c      	b.n	800606a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	2b02      	cmp	r3, #2
 8006036:	d902      	bls.n	800603e <DMA_CheckFifoParam+0xb6>
 8006038:	2b03      	cmp	r3, #3
 800603a:	d003      	beq.n	8006044 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800603c:	e018      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
        break;
 8006042:	e015      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
    break;
 8006054:	e00b      	b.n	800606e <DMA_CheckFifoParam+0xe6>
        break;
 8006056:	bf00      	nop
 8006058:	e00a      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800605a:	bf00      	nop
 800605c:	e008      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800605e:	bf00      	nop
 8006060:	e006      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 8006062:	bf00      	nop
 8006064:	e004      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
    break;
 800606e:	bf00      	nop
    }
  }

  return status;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a38      	ldr	r2, [pc, #224]	; (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a36      	ldr	r2, [pc, #216]	; (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01d      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a35      	ldr	r2, [pc, #212]	; (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a33      	ldr	r2, [pc, #204]	; (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a32      	ldr	r2, [pc, #200]	; (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2f      	ldr	r2, [pc, #188]	; (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01a      	beq.n	800611e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	3b08      	subs	r3, #8
 80060f0:	4a28      	ldr	r2, [pc, #160]	; (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4b26      	ldr	r3, [pc, #152]	; (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a24      	ldr	r2, [pc, #144]	; (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800611c:	e024      	b.n	8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	3b10      	subs	r3, #16
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d806      	bhi.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d902      	bls.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3308      	adds	r3, #8
 8006144:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4b18      	ldr	r3, [pc, #96]	; (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006158:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2201      	movs	r2, #1
 8006162:	409a      	lsls	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	58025408 	.word	0x58025408
 8006178:	5802541c 	.word	0x5802541c
 800617c:	58025430 	.word	0x58025430
 8006180:	58025444 	.word	0x58025444
 8006184:	58025458 	.word	0x58025458
 8006188:	5802546c 	.word	0x5802546c
 800618c:	58025480 	.word	0x58025480
 8006190:	58025494 	.word	0x58025494
 8006194:	cccccccd 	.word	0xcccccccd
 8006198:	16009600 	.word	0x16009600
 800619c:	58025880 	.word	0x58025880
 80061a0:	aaaaaaab 	.word	0xaaaaaaab
 80061a4:	400204b8 	.word	0x400204b8
 80061a8:	4002040f 	.word	0x4002040f
 80061ac:	10008200 	.word	0x10008200
 80061b0:	40020880 	.word	0x40020880

080061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04a      	beq.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d847      	bhi.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a25      	ldr	r2, [pc, #148]	; (800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d022      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a24      	ldr	r2, [pc, #144]	; (8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d01d      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a22      	ldr	r2, [pc, #136]	; (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a21      	ldr	r2, [pc, #132]	; (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1f      	ldr	r2, [pc, #124]	; (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006224:	2300      	movs	r3, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4b17      	ldr	r3, [pc, #92]	; (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a15      	ldr	r2, [pc, #84]	; (8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800623c:	671a      	str	r2, [r3, #112]	; 0x70
 800623e:	e009      	b.n	8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a11      	ldr	r2, [pc, #68]	; (8006298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006252:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3b01      	subs	r3, #1
 8006258:	2201      	movs	r2, #1
 800625a:	409a      	lsls	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	58025408 	.word	0x58025408
 8006270:	5802541c 	.word	0x5802541c
 8006274:	58025430 	.word	0x58025430
 8006278:	58025444 	.word	0x58025444
 800627c:	58025458 	.word	0x58025458
 8006280:	5802546c 	.word	0x5802546c
 8006284:	58025480 	.word	0x58025480
 8006288:	58025494 	.word	0x58025494
 800628c:	1600963f 	.word	0x1600963f
 8006290:	58025940 	.word	0x58025940
 8006294:	1000823f 	.word	0x1000823f
 8006298:	40020940 	.word	0x40020940

0800629c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b098      	sub	sp, #96	; 0x60
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80062a4:	4a84      	ldr	r2, [pc, #528]	; (80064b8 <HAL_FDCAN_Init+0x21c>)
 80062a6:	f107 030c 	add.w	r3, r7, #12
 80062aa:	4611      	mov	r1, r2
 80062ac:	224c      	movs	r2, #76	; 0x4c
 80062ae:	4618      	mov	r0, r3
 80062b0:	f007 fc00 	bl	800dab4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e1c6      	b.n	800664c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a7e      	ldr	r2, [pc, #504]	; (80064bc <HAL_FDCAN_Init+0x220>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d106      	bne.n	80062d6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fb fbd0 	bl	8001a90 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0210 	bic.w	r2, r2, #16
 80062fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006300:	f7fc fa46 	bl	8002790 <HAL_GetTick>
 8006304:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006306:	e014      	b.n	8006332 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006308:	f7fc fa42 	bl	8002790 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b0a      	cmp	r3, #10
 8006314:	d90d      	bls.n	8006332 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800631c:	f043 0201 	orr.w	r2, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2203      	movs	r2, #3
 800632a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e18c      	b.n	800664c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b08      	cmp	r3, #8
 800633e:	d0e3      	beq.n	8006308 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006350:	f7fc fa1e 	bl	8002790 <HAL_GetTick>
 8006354:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006356:	e014      	b.n	8006382 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006358:	f7fc fa1a 	bl	8002790 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b0a      	cmp	r3, #10
 8006364:	d90d      	bls.n	8006382 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800636c:	f043 0201 	orr.w	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2203      	movs	r2, #3
 800637a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e164      	b.n	800664c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0e3      	beq.n	8006358 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0202 	orr.w	r2, r2, #2
 800639e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7c1b      	ldrb	r3, [r3, #16]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d108      	bne.n	80063ba <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b6:	619a      	str	r2, [r3, #24]
 80063b8:	e007      	b.n	80063ca <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7c5b      	ldrb	r3, [r3, #17]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d108      	bne.n	80063e4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e0:	619a      	str	r2, [r3, #24]
 80063e2:	e007      	b.n	80063f4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	7c9b      	ldrb	r3, [r3, #18]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d108      	bne.n	800640e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800640a:	619a      	str	r2, [r3, #24]
 800640c:	e007      	b.n	800641e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800641c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006442:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0210 	bic.w	r2, r2, #16
 8006452:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d108      	bne.n	800646e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0204 	orr.w	r2, r2, #4
 800646a:	619a      	str	r2, [r3, #24]
 800646c:	e030      	b.n	80064d0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d02c      	beq.n	80064d0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d020      	beq.n	80064c0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800648c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0210 	orr.w	r2, r2, #16
 800649c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d114      	bne.n	80064d0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0220 	orr.w	r2, r2, #32
 80064b4:	619a      	str	r2, [r3, #24]
 80064b6:	e00b      	b.n	80064d0 <HAL_FDCAN_Init+0x234>
 80064b8:	0800dd68 	.word	0x0800dd68
 80064bc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0220 	orr.w	r2, r2, #32
 80064ce:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	3b01      	subs	r3, #1
 80064de:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064e0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064e8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064f8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064fa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006504:	d115      	bne.n	8006532 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	3b01      	subs	r3, #1
 8006512:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006514:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	3b01      	subs	r3, #1
 800651c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800651e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	3b01      	subs	r3, #1
 8006528:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800652e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006530:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006558:	4413      	add	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d011      	beq.n	8006582 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006566:	f023 0107 	bic.w	r1, r3, #7
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	3360      	adds	r3, #96	; 0x60
 8006572:	443b      	add	r3, r7
 8006574:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d011      	beq.n	80065ae <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006592:	f023 0107 	bic.w	r1, r3, #7
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	3360      	adds	r3, #96	; 0x60
 800659e:	443b      	add	r3, r7
 80065a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d012      	beq.n	80065dc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065be:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	3360      	adds	r3, #96	; 0x60
 80065ca:	443b      	add	r3, r7
 80065cc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d012      	beq.n	800660a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065ec:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	3360      	adds	r3, #96	; 0x60
 80065f8:	443b      	add	r3, r7
 80065fa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80065fe:	021a      	lsls	r2, r3, #8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a11      	ldr	r2, [pc, #68]	; (8006654 <HAL_FDCAN_Init+0x3b8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d107      	bne.n	8006624 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f022 0203 	bic.w	r2, r2, #3
 8006622:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f80b 	bl	8006658 <FDCAN_CalcultateRamBlockAddresses>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006648:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800664c:	4618      	mov	r0, r3
 800664e:	3760      	adds	r7, #96	; 0x60
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	4000a000 	.word	0x4000a000

08006658 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800666e:	4ba7      	ldr	r3, [pc, #668]	; (800690c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006670:	4013      	ands	r3, r2
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0091      	lsls	r1, r2, #2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	430b      	orrs	r3, r1
 800667c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006688:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	041a      	lsls	r2, r3, #16
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	4413      	add	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066ae:	4b97      	ldr	r3, [pc, #604]	; (800690c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	0091      	lsls	r1, r2, #2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d0:	041a      	lsls	r2, r3, #16
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80066f0:	4b86      	ldr	r3, [pc, #536]	; (800690c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	0091      	lsls	r1, r2, #2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	430b      	orrs	r3, r1
 80066fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800670a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	041a      	lsls	r2, r3, #16
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006738:	4b74      	ldr	r3, [pc, #464]	; (800690c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800673a:	4013      	ands	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	0091      	lsls	r1, r2, #2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	430b      	orrs	r3, r1
 8006746:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006752:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675a:	041a      	lsls	r2, r3, #16
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006780:	4b62      	ldr	r3, [pc, #392]	; (800690c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	0091      	lsls	r1, r2, #2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	430b      	orrs	r3, r1
 800678e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	4413      	add	r3, r2
 80067a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80067ac:	4b57      	ldr	r3, [pc, #348]	; (800690c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	0091      	lsls	r1, r2, #2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	430b      	orrs	r3, r1
 80067ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067c6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ce:	041a      	lsls	r2, r3, #16
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4413      	add	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80067ee:	4b47      	ldr	r3, [pc, #284]	; (800690c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	0091      	lsls	r1, r2, #2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	430b      	orrs	r3, r1
 80067fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006808:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006810:	041a      	lsls	r2, r3, #16
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006824:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682c:	061a      	lsls	r2, r3, #24
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800683c:	4b34      	ldr	r3, [pc, #208]	; (8006910 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800683e:	4413      	add	r3, r2
 8006840:	009a      	lsls	r2, r3, #2
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	441a      	add	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006872:	fb01 f303 	mul.w	r3, r1, r3
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800688a:	fb01 f303 	mul.w	r3, r1, r3
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	441a      	add	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006902:	4a04      	ldr	r2, [pc, #16]	; (8006914 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d915      	bls.n	8006934 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006908:	e006      	b.n	8006918 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800690a:	bf00      	nop
 800690c:	ffff0003 	.word	0xffff0003
 8006910:	10002b00 	.word	0x10002b00
 8006914:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2203      	movs	r2, #3
 800692c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e010      	b.n	8006956 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	e005      	b.n	8006948 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3304      	adds	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d3f3      	bcc.n	800693c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop

08006964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006964:	b480      	push	{r7}
 8006966:	b089      	sub	sp, #36	; 0x24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006972:	4b86      	ldr	r3, [pc, #536]	; (8006b8c <HAL_GPIO_Init+0x228>)
 8006974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006976:	e18c      	b.n	8006c92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2101      	movs	r1, #1
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	fa01 f303 	lsl.w	r3, r1, r3
 8006984:	4013      	ands	r3, r2
 8006986:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 817e 	beq.w	8006c8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d005      	beq.n	80069a8 <HAL_GPIO_Init+0x44>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d130      	bne.n	8006a0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	2203      	movs	r2, #3
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	4013      	ands	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069de:	2201      	movs	r2, #1
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	43db      	mvns	r3, r3
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	4013      	ands	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	091b      	lsrs	r3, r3, #4
 80069f4:	f003 0201 	and.w	r2, r3, #1
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d017      	beq.n	8006a46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	2203      	movs	r2, #3
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	43db      	mvns	r3, r3
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d123      	bne.n	8006a9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	08da      	lsrs	r2, r3, #3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3208      	adds	r2, #8
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	220f      	movs	r2, #15
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	4013      	ands	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	08da      	lsrs	r2, r3, #3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3208      	adds	r2, #8
 8006a94:	69b9      	ldr	r1, [r7, #24]
 8006a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f003 0203 	and.w	r2, r3, #3
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80d8 	beq.w	8006c8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <HAL_GPIO_Init+0x22c>)
 8006ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ae2:	4a2b      	ldr	r2, [pc, #172]	; (8006b90 <HAL_GPIO_Init+0x22c>)
 8006ae4:	f043 0302 	orr.w	r3, r3, #2
 8006ae8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006aec:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <HAL_GPIO_Init+0x22c>)
 8006aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006afa:	4a26      	ldr	r2, [pc, #152]	; (8006b94 <HAL_GPIO_Init+0x230>)
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	089b      	lsrs	r3, r3, #2
 8006b00:	3302      	adds	r3, #2
 8006b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	220f      	movs	r2, #15
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a1d      	ldr	r2, [pc, #116]	; (8006b98 <HAL_GPIO_Init+0x234>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d04a      	beq.n	8006bbc <HAL_GPIO_Init+0x258>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <HAL_GPIO_Init+0x238>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d02b      	beq.n	8006b86 <HAL_GPIO_Init+0x222>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <HAL_GPIO_Init+0x23c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d025      	beq.n	8006b82 <HAL_GPIO_Init+0x21e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1a      	ldr	r2, [pc, #104]	; (8006ba4 <HAL_GPIO_Init+0x240>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01f      	beq.n	8006b7e <HAL_GPIO_Init+0x21a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <HAL_GPIO_Init+0x244>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d019      	beq.n	8006b7a <HAL_GPIO_Init+0x216>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a18      	ldr	r2, [pc, #96]	; (8006bac <HAL_GPIO_Init+0x248>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_GPIO_Init+0x212>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <HAL_GPIO_Init+0x24c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00d      	beq.n	8006b72 <HAL_GPIO_Init+0x20e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a16      	ldr	r2, [pc, #88]	; (8006bb4 <HAL_GPIO_Init+0x250>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <HAL_GPIO_Init+0x20a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <HAL_GPIO_Init+0x254>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d101      	bne.n	8006b6a <HAL_GPIO_Init+0x206>
 8006b66:	2309      	movs	r3, #9
 8006b68:	e029      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b6a:	230a      	movs	r3, #10
 8006b6c:	e027      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b6e:	2307      	movs	r3, #7
 8006b70:	e025      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b72:	2306      	movs	r3, #6
 8006b74:	e023      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b76:	2305      	movs	r3, #5
 8006b78:	e021      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b7a:	2304      	movs	r3, #4
 8006b7c:	e01f      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e01d      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e01b      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e019      	b.n	8006bbe <HAL_GPIO_Init+0x25a>
 8006b8a:	bf00      	nop
 8006b8c:	58000080 	.word	0x58000080
 8006b90:	58024400 	.word	0x58024400
 8006b94:	58000400 	.word	0x58000400
 8006b98:	58020000 	.word	0x58020000
 8006b9c:	58020400 	.word	0x58020400
 8006ba0:	58020800 	.word	0x58020800
 8006ba4:	58020c00 	.word	0x58020c00
 8006ba8:	58021000 	.word	0x58021000
 8006bac:	58021400 	.word	0x58021400
 8006bb0:	58021800 	.word	0x58021800
 8006bb4:	58021c00 	.word	0x58021c00
 8006bb8:	58022400 	.word	0x58022400
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	f002 0203 	and.w	r2, r2, #3
 8006bc4:	0092      	lsls	r2, r2, #2
 8006bc6:	4093      	lsls	r3, r2
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bce:	4938      	ldr	r1, [pc, #224]	; (8006cb0 <HAL_GPIO_Init+0x34c>)
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	089b      	lsrs	r3, r3, #2
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	43db      	mvns	r3, r3
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4013      	ands	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	43db      	mvns	r3, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4013      	ands	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f47f ae6b 	bne.w	8006978 <HAL_GPIO_Init+0x14>
  }
}
 8006ca2:	bf00      	nop
 8006ca4:	bf00      	nop
 8006ca6:	3724      	adds	r7, #36	; 0x24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	58000400 	.word	0x58000400

08006cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	807b      	strh	r3, [r7, #2]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cc4:	787b      	ldrb	r3, [r7, #1]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cca:	887a      	ldrh	r2, [r7, #2]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006cd0:	e003      	b.n	8006cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006cd2:	887b      	ldrh	r3, [r7, #2]
 8006cd4:	041a      	lsls	r2, r3, #16
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	619a      	str	r2, [r3, #24]
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e07f      	b.n	8006dfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fa ff26 	bl	8001b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	; 0x24
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d107      	bne.n	8006d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	e006      	b.n	8006d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d104      	bne.n	8006d82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b1d      	ldr	r3, [pc, #116]	; (8006e04 <HAL_I2C_Init+0x11c>)
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006da0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	69d9      	ldr	r1, [r3, #28]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1a      	ldr	r2, [r3, #32]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	02008000 	.word	0x02008000

08006e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d138      	bne.n	8006e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e032      	b.n	8006e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2224      	movs	r2, #36	; 0x24
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6819      	ldr	r1, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e000      	b.n	8006e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e90:	2302      	movs	r3, #2
  }
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d139      	bne.n	8006f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e033      	b.n	8006f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2224      	movs	r2, #36	; 0x24
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0201 	bic.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e000      	b.n	8006f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f28:	2302      	movs	r3, #2
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f38:	b08f      	sub	sp, #60	; 0x3c
 8006f3a:	af0a      	add	r7, sp, #40	; 0x28
 8006f3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e116      	b.n	8007176 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fb fa48 	bl	80023f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f006 face 	bl	800d528 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	687e      	ldr	r6, [r7, #4]
 8006f94:	466d      	mov	r5, sp
 8006f96:	f106 0410 	add.w	r4, r6, #16
 8006f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006faa:	1d33      	adds	r3, r6, #4
 8006fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fae:	6838      	ldr	r0, [r7, #0]
 8006fb0:	f006 fa4c 	bl	800d44c <USB_CoreInit>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e0d7      	b.n	8007176 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f006 fabc 	bl	800d54a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
 8006fd6:	e04a      	b.n	800706e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006fd8:	7bfa      	ldrb	r2, [r7, #15]
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	333d      	adds	r3, #61	; 0x3d
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006fec:	7bfa      	ldrb	r2, [r7, #15]
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	333c      	adds	r3, #60	; 0x3c
 8006ffc:	7bfa      	ldrb	r2, [r7, #15]
 8006ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007000:	7bfa      	ldrb	r2, [r7, #15]
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	b298      	uxth	r0, r3
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	3356      	adds	r3, #86	; 0x56
 8007014:	4602      	mov	r2, r0
 8007016:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	3340      	adds	r3, #64	; 0x40
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800702c:	7bfa      	ldrb	r2, [r7, #15]
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3344      	adds	r3, #68	; 0x44
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007040:	7bfa      	ldrb	r2, [r7, #15]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	3348      	adds	r3, #72	; 0x48
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007054:	7bfa      	ldrb	r2, [r7, #15]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	334c      	adds	r3, #76	; 0x4c
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	3301      	adds	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]
 800706e:	7bfa      	ldrb	r2, [r7, #15]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	429a      	cmp	r2, r3
 8007076:	d3af      	bcc.n	8006fd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	e044      	b.n	8007108 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800707e:	7bfa      	ldrb	r2, [r7, #15]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007094:	7bfa      	ldrb	r2, [r7, #15]
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80070a6:	7bfa      	ldrb	r2, [r7, #15]
 80070a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070aa:	7bfa      	ldrb	r2, [r7, #15]
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070c0:	7bfa      	ldrb	r2, [r7, #15]
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070d6:	7bfa      	ldrb	r2, [r7, #15]
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80070ec:	7bfa      	ldrb	r2, [r7, #15]
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	4613      	mov	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	3301      	adds	r3, #1
 8007106:	73fb      	strb	r3, [r7, #15]
 8007108:	7bfa      	ldrb	r2, [r7, #15]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d3b5      	bcc.n	800707e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	687e      	ldr	r6, [r7, #4]
 800711a:	466d      	mov	r5, sp
 800711c:	f106 0410 	add.w	r4, r6, #16
 8007120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007128:	e894 0003 	ldmia.w	r4, {r0, r1}
 800712c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007130:	1d33      	adds	r3, r6, #4
 8007132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007134:	6838      	ldr	r0, [r7, #0]
 8007136:	f006 fa55 	bl	800d5e4 <USB_DevInit>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e014      	b.n	8007176 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	2b01      	cmp	r3, #1
 8007162:	d102      	bne.n	800716a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f80b 	bl	8007180 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f006 fc13 	bl	800d99a <USB_DevDisconnect>

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007180 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	10000003 	.word	0x10000003

080071c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80071d0:	4b19      	ldr	r3, [pc, #100]	; (8007238 <HAL_PWREx_ConfigSupply+0x70>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d00a      	beq.n	80071f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071dc:	4b16      	ldr	r3, [pc, #88]	; (8007238 <HAL_PWREx_ConfigSupply+0x70>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d001      	beq.n	80071ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e01f      	b.n	800722e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e01d      	b.n	800722e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <HAL_PWREx_ConfigSupply+0x70>)
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f023 0207 	bic.w	r2, r3, #7
 80071fa:	490f      	ldr	r1, [pc, #60]	; (8007238 <HAL_PWREx_ConfigSupply+0x70>)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007202:	f7fb fac5 	bl	8002790 <HAL_GetTick>
 8007206:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007208:	e009      	b.n	800721e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800720a:	f7fb fac1 	bl	8002790 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007218:	d901      	bls.n	800721e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e007      	b.n	800722e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <HAL_PWREx_ConfigSupply+0x70>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800722a:	d1ee      	bne.n	800720a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	58024800 	.word	0x58024800

0800723c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	4a04      	ldr	r2, [pc, #16]	; (8007258 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800724a:	60d3      	str	r3, [r2, #12]
}
 800724c:	bf00      	nop
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	58024800 	.word	0x58024800

0800725c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08c      	sub	sp, #48	; 0x30
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e3c8      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 8087 	beq.w	800738a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800727c:	4b88      	ldr	r3, [pc, #544]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007286:	4b86      	ldr	r3, [pc, #536]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	2b10      	cmp	r3, #16
 8007290:	d007      	beq.n	80072a2 <HAL_RCC_OscConfig+0x46>
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	2b18      	cmp	r3, #24
 8007296:	d110      	bne.n	80072ba <HAL_RCC_OscConfig+0x5e>
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d10b      	bne.n	80072ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072a2:	4b7f      	ldr	r3, [pc, #508]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d06c      	beq.n	8007388 <HAL_RCC_OscConfig+0x12c>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d168      	bne.n	8007388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e3a2      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c2:	d106      	bne.n	80072d2 <HAL_RCC_OscConfig+0x76>
 80072c4:	4b76      	ldr	r3, [pc, #472]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a75      	ldr	r2, [pc, #468]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80072ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	e02e      	b.n	8007330 <HAL_RCC_OscConfig+0xd4>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10c      	bne.n	80072f4 <HAL_RCC_OscConfig+0x98>
 80072da:	4b71      	ldr	r3, [pc, #452]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a70      	ldr	r2, [pc, #448]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80072e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4b6e      	ldr	r3, [pc, #440]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6d      	ldr	r2, [pc, #436]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80072ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	e01d      	b.n	8007330 <HAL_RCC_OscConfig+0xd4>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072fc:	d10c      	bne.n	8007318 <HAL_RCC_OscConfig+0xbc>
 80072fe:	4b68      	ldr	r3, [pc, #416]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a67      	ldr	r2, [pc, #412]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	4b65      	ldr	r3, [pc, #404]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a64      	ldr	r2, [pc, #400]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	e00b      	b.n	8007330 <HAL_RCC_OscConfig+0xd4>
 8007318:	4b61      	ldr	r3, [pc, #388]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a60      	ldr	r2, [pc, #384]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800731e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	4b5e      	ldr	r3, [pc, #376]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a5d      	ldr	r2, [pc, #372]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800732a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800732e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d013      	beq.n	8007360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fb fa2a 	bl	8002790 <HAL_GetTick>
 800733c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007340:	f7fb fa26 	bl	8002790 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b64      	cmp	r3, #100	; 0x64
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e356      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007352:	4b53      	ldr	r3, [pc, #332]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f0      	beq.n	8007340 <HAL_RCC_OscConfig+0xe4>
 800735e:	e014      	b.n	800738a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fb fa16 	bl	8002790 <HAL_GetTick>
 8007364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007368:	f7fb fa12 	bl	8002790 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b64      	cmp	r3, #100	; 0x64
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e342      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800737a:	4b49      	ldr	r3, [pc, #292]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f0      	bne.n	8007368 <HAL_RCC_OscConfig+0x10c>
 8007386:	e000      	b.n	800738a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 808c 	beq.w	80074b0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007398:	4b41      	ldr	r3, [pc, #260]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073a2:	4b3f      	ldr	r3, [pc, #252]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <HAL_RCC_OscConfig+0x162>
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	2b18      	cmp	r3, #24
 80073b2:	d137      	bne.n	8007424 <HAL_RCC_OscConfig+0x1c8>
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d132      	bne.n	8007424 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073be:	4b38      	ldr	r3, [pc, #224]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <HAL_RCC_OscConfig+0x17a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e314      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073d6:	4b32      	ldr	r3, [pc, #200]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f023 0219 	bic.w	r2, r3, #25
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	492f      	ldr	r1, [pc, #188]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e8:	f7fb f9d2 	bl	8002790 <HAL_GetTick>
 80073ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073f0:	f7fb f9ce 	bl	8002790 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e2fe      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007402:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800740e:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	4920      	ldr	r1, [pc, #128]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800741e:	4313      	orrs	r3, r2
 8007420:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007422:	e045      	b.n	80074b0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d026      	beq.n	800747a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800742c:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f023 0219 	bic.w	r2, r3, #25
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	4919      	ldr	r1, [pc, #100]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800743a:	4313      	orrs	r3, r2
 800743c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743e:	f7fb f9a7 	bl	8002790 <HAL_GetTick>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007446:	f7fb f9a3 	bl	8002790 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e2d3      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007464:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	061b      	lsls	r3, r3, #24
 8007472:	490b      	ldr	r1, [pc, #44]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007474:	4313      	orrs	r3, r2
 8007476:	604b      	str	r3, [r1, #4]
 8007478:	e01a      	b.n	80074b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800747a:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <HAL_RCC_OscConfig+0x244>)
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fb f983 	bl	8002790 <HAL_GetTick>
 800748a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800748c:	e00a      	b.n	80074a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800748e:	f7fb f97f 	bl	8002790 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d903      	bls.n	80074a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e2af      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
 80074a0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074a4:	4b96      	ldr	r3, [pc, #600]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1ee      	bne.n	800748e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d06a      	beq.n	8007592 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074bc:	4b90      	ldr	r3, [pc, #576]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074c6:	4b8e      	ldr	r3, [pc, #568]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d007      	beq.n	80074e2 <HAL_RCC_OscConfig+0x286>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b18      	cmp	r3, #24
 80074d6:	d11b      	bne.n	8007510 <HAL_RCC_OscConfig+0x2b4>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d116      	bne.n	8007510 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074e2:	4b87      	ldr	r3, [pc, #540]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <HAL_RCC_OscConfig+0x29e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	2b80      	cmp	r3, #128	; 0x80
 80074f4:	d001      	beq.n	80074fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e282      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074fa:	4b81      	ldr	r3, [pc, #516]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	061b      	lsls	r3, r3, #24
 8007508:	497d      	ldr	r1, [pc, #500]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 800750a:	4313      	orrs	r3, r2
 800750c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800750e:	e040      	b.n	8007592 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d023      	beq.n	8007560 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007518:	4b79      	ldr	r3, [pc, #484]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a78      	ldr	r2, [pc, #480]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 800751e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007524:	f7fb f934 	bl	8002790 <HAL_GetTick>
 8007528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800752c:	f7fb f930 	bl	8002790 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e260      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800753e:	4b70      	ldr	r3, [pc, #448]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800754a:	4b6d      	ldr	r3, [pc, #436]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	061b      	lsls	r3, r3, #24
 8007558:	4969      	ldr	r1, [pc, #420]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 800755a:	4313      	orrs	r3, r2
 800755c:	60cb      	str	r3, [r1, #12]
 800755e:	e018      	b.n	8007592 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007560:	4b67      	ldr	r3, [pc, #412]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a66      	ldr	r2, [pc, #408]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800756a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756c:	f7fb f910 	bl	8002790 <HAL_GetTick>
 8007570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007574:	f7fb f90c 	bl	8002790 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e23c      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007586:	4b5e      	ldr	r3, [pc, #376]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f0      	bne.n	8007574 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d036      	beq.n	800760c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d019      	beq.n	80075da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075a6:	4b56      	ldr	r3, [pc, #344]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80075a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075aa:	4a55      	ldr	r2, [pc, #340]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80075ac:	f043 0301 	orr.w	r3, r3, #1
 80075b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b2:	f7fb f8ed 	bl	8002790 <HAL_GetTick>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ba:	f7fb f8e9 	bl	8002790 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e219      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075cc:	4b4c      	ldr	r3, [pc, #304]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80075ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f0      	beq.n	80075ba <HAL_RCC_OscConfig+0x35e>
 80075d8:	e018      	b.n	800760c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075da:	4b49      	ldr	r3, [pc, #292]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80075dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075de:	4a48      	ldr	r2, [pc, #288]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80075e0:	f023 0301 	bic.w	r3, r3, #1
 80075e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e6:	f7fb f8d3 	bl	8002790 <HAL_GetTick>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075ec:	e008      	b.n	8007600 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ee:	f7fb f8cf 	bl	8002790 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e1ff      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007600:	4b3f      	ldr	r3, [pc, #252]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f0      	bne.n	80075ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d036      	beq.n	8007686 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d019      	beq.n	8007654 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007620:	4b37      	ldr	r3, [pc, #220]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a36      	ldr	r2, [pc, #216]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007626:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800762a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800762c:	f7fb f8b0 	bl	8002790 <HAL_GetTick>
 8007630:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007634:	f7fb f8ac 	bl	8002790 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e1dc      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007646:	4b2e      	ldr	r3, [pc, #184]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f0      	beq.n	8007634 <HAL_RCC_OscConfig+0x3d8>
 8007652:	e018      	b.n	8007686 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007654:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a29      	ldr	r2, [pc, #164]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 800765a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800765e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007660:	f7fb f896 	bl	8002790 <HAL_GetTick>
 8007664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007668:	f7fb f892 	bl	8002790 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e1c2      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800767a:	4b21      	ldr	r3, [pc, #132]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1f0      	bne.n	8007668 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 8086 	beq.w	80077a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007694:	4b1b      	ldr	r3, [pc, #108]	; (8007704 <HAL_RCC_OscConfig+0x4a8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <HAL_RCC_OscConfig+0x4a8>)
 800769a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800769e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076a0:	f7fb f876 	bl	8002790 <HAL_GetTick>
 80076a4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076a8:	f7fb f872 	bl	8002790 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b64      	cmp	r3, #100	; 0x64
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e1a2      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <HAL_RCC_OscConfig+0x4a8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0f0      	beq.n	80076a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d106      	bne.n	80076dc <HAL_RCC_OscConfig+0x480>
 80076ce:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80076d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d2:	4a0b      	ldr	r2, [pc, #44]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	6713      	str	r3, [r2, #112]	; 0x70
 80076da:	e032      	b.n	8007742 <HAL_RCC_OscConfig+0x4e6>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d111      	bne.n	8007708 <HAL_RCC_OscConfig+0x4ac>
 80076e4:	4b06      	ldr	r3, [pc, #24]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	4a05      	ldr	r2, [pc, #20]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	6713      	str	r3, [r2, #112]	; 0x70
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f4:	4a02      	ldr	r2, [pc, #8]	; (8007700 <HAL_RCC_OscConfig+0x4a4>)
 80076f6:	f023 0304 	bic.w	r3, r3, #4
 80076fa:	6713      	str	r3, [r2, #112]	; 0x70
 80076fc:	e021      	b.n	8007742 <HAL_RCC_OscConfig+0x4e6>
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400
 8007704:	58024800 	.word	0x58024800
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b05      	cmp	r3, #5
 800770e:	d10c      	bne.n	800772a <HAL_RCC_OscConfig+0x4ce>
 8007710:	4b83      	ldr	r3, [pc, #524]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007714:	4a82      	ldr	r2, [pc, #520]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007716:	f043 0304 	orr.w	r3, r3, #4
 800771a:	6713      	str	r3, [r2, #112]	; 0x70
 800771c:	4b80      	ldr	r3, [pc, #512]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	4a7f      	ldr	r2, [pc, #508]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	6713      	str	r3, [r2, #112]	; 0x70
 8007728:	e00b      	b.n	8007742 <HAL_RCC_OscConfig+0x4e6>
 800772a:	4b7d      	ldr	r3, [pc, #500]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800772c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772e:	4a7c      	ldr	r2, [pc, #496]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007730:	f023 0301 	bic.w	r3, r3, #1
 8007734:	6713      	str	r3, [r2, #112]	; 0x70
 8007736:	4b7a      	ldr	r3, [pc, #488]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773a:	4a79      	ldr	r2, [pc, #484]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800773c:	f023 0304 	bic.w	r3, r3, #4
 8007740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d015      	beq.n	8007776 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774a:	f7fb f821 	bl	8002790 <HAL_GetTick>
 800774e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007750:	e00a      	b.n	8007768 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007752:	f7fb f81d 	bl	8002790 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007760:	4293      	cmp	r3, r2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e14b      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007768:	4b6d      	ldr	r3, [pc, #436]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0ee      	beq.n	8007752 <HAL_RCC_OscConfig+0x4f6>
 8007774:	e014      	b.n	80077a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007776:	f7fb f80b 	bl	8002790 <HAL_GetTick>
 800777a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800777c:	e00a      	b.n	8007794 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800777e:	f7fb f807 	bl	8002790 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	f241 3288 	movw	r2, #5000	; 0x1388
 800778c:	4293      	cmp	r3, r2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e135      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007794:	4b62      	ldr	r3, [pc, #392]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1ee      	bne.n	800777e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 812a 	beq.w	80079fe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077aa:	4b5d      	ldr	r3, [pc, #372]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077b2:	2b18      	cmp	r3, #24
 80077b4:	f000 80ba 	beq.w	800792c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	2b02      	cmp	r3, #2
 80077be:	f040 8095 	bne.w	80078ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c2:	4b57      	ldr	r3, [pc, #348]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a56      	ldr	r2, [pc, #344]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80077c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ce:	f7fa ffdf 	bl	8002790 <HAL_GetTick>
 80077d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d6:	f7fa ffdb 	bl	8002790 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e10b      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077e8:	4b4d      	ldr	r3, [pc, #308]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f0      	bne.n	80077d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077f4:	4b4a      	ldr	r3, [pc, #296]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80077f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077f8:	4b4a      	ldr	r3, [pc, #296]	; (8007924 <HAL_RCC_OscConfig+0x6c8>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007804:	0112      	lsls	r2, r2, #4
 8007806:	430a      	orrs	r2, r1
 8007808:	4945      	ldr	r1, [pc, #276]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800780a:	4313      	orrs	r3, r2
 800780c:	628b      	str	r3, [r1, #40]	; 0x28
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	3b01      	subs	r3, #1
 8007814:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	3b01      	subs	r3, #1
 800781e:	025b      	lsls	r3, r3, #9
 8007820:	b29b      	uxth	r3, r3
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	3b01      	subs	r3, #1
 800782a:	041b      	lsls	r3, r3, #16
 800782c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007836:	3b01      	subs	r3, #1
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800783e:	4938      	ldr	r1, [pc, #224]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007840:	4313      	orrs	r3, r2
 8007842:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007844:	4b36      	ldr	r3, [pc, #216]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	4a35      	ldr	r2, [pc, #212]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007850:	4b33      	ldr	r3, [pc, #204]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007854:	4b34      	ldr	r3, [pc, #208]	; (8007928 <HAL_RCC_OscConfig+0x6cc>)
 8007856:	4013      	ands	r3, r2
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800785c:	00d2      	lsls	r2, r2, #3
 800785e:	4930      	ldr	r1, [pc, #192]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007860:	4313      	orrs	r3, r2
 8007862:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007864:	4b2e      	ldr	r3, [pc, #184]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	f023 020c 	bic.w	r2, r3, #12
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	492b      	ldr	r1, [pc, #172]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007872:	4313      	orrs	r3, r2
 8007874:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007876:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	f023 0202 	bic.w	r2, r3, #2
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007882:	4927      	ldr	r1, [pc, #156]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007884:	4313      	orrs	r3, r2
 8007886:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007888:	4b25      	ldr	r3, [pc, #148]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	4a24      	ldr	r2, [pc, #144]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800788e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a21      	ldr	r2, [pc, #132]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 800789a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800789e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078a0:	4b1f      	ldr	r3, [pc, #124]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80078ac:	4b1c      	ldr	r3, [pc, #112]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4a1b      	ldr	r2, [pc, #108]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078b8:	4b19      	ldr	r3, [pc, #100]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a18      	ldr	r2, [pc, #96]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c4:	f7fa ff64 	bl	8002790 <HAL_GetTick>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078cc:	f7fa ff60 	bl	8002790 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e090      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078de:	4b10      	ldr	r3, [pc, #64]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f0      	beq.n	80078cc <HAL_RCC_OscConfig+0x670>
 80078ea:	e088      	b.n	80079fe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a0b      	ldr	r2, [pc, #44]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 80078f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f8:	f7fa ff4a 	bl	8002790 <HAL_GetTick>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007900:	f7fa ff46 	bl	8002790 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e076      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007912:	4b03      	ldr	r3, [pc, #12]	; (8007920 <HAL_RCC_OscConfig+0x6c4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f0      	bne.n	8007900 <HAL_RCC_OscConfig+0x6a4>
 800791e:	e06e      	b.n	80079fe <HAL_RCC_OscConfig+0x7a2>
 8007920:	58024400 	.word	0x58024400
 8007924:	fffffc0c 	.word	0xfffffc0c
 8007928:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800792c:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007932:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	2b01      	cmp	r3, #1
 800793e:	d031      	beq.n	80079a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f003 0203 	and.w	r2, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800794a:	429a      	cmp	r2, r3
 800794c:	d12a      	bne.n	80079a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	091b      	lsrs	r3, r3, #4
 8007952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800795a:	429a      	cmp	r2, r3
 800795c:	d122      	bne.n	80079a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800796a:	429a      	cmp	r2, r3
 800796c:	d11a      	bne.n	80079a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	0a5b      	lsrs	r3, r3, #9
 8007972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800797c:	429a      	cmp	r2, r3
 800797e:	d111      	bne.n	80079a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	0c1b      	lsrs	r3, r3, #16
 8007984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800798e:	429a      	cmp	r2, r3
 8007990:	d108      	bne.n	80079a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	0e1b      	lsrs	r3, r3, #24
 8007996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d001      	beq.n	80079a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e02b      	b.n	8007a00 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80079a8:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 80079aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ac:	08db      	lsrs	r3, r3, #3
 80079ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d01f      	beq.n	80079fe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	4a11      	ldr	r2, [pc, #68]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079ca:	f7fa fee1 	bl	8002790 <HAL_GetTick>
 80079ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80079d0:	bf00      	nop
 80079d2:	f7fa fedd 	bl	8002790 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	4293      	cmp	r3, r2
 80079dc:	d0f9      	beq.n	80079d2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 80079e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <HAL_RCC_OscConfig+0x7b0>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80079ea:	00d2      	lsls	r2, r2, #3
 80079ec:	4906      	ldr	r1, [pc, #24]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	4a04      	ldr	r2, [pc, #16]	; (8007a08 <HAL_RCC_OscConfig+0x7ac>)
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3730      	adds	r7, #48	; 0x30
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	ffff0007 	.word	0xffff0007

08007a10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e19c      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a24:	4b8a      	ldr	r3, [pc, #552]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d910      	bls.n	8007a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a32:	4b87      	ldr	r3, [pc, #540]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f023 020f 	bic.w	r2, r3, #15
 8007a3a:	4985      	ldr	r1, [pc, #532]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a42:	4b83      	ldr	r3, [pc, #524]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 030f 	and.w	r3, r3, #15
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d001      	beq.n	8007a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e184      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d010      	beq.n	8007a82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	4b7b      	ldr	r3, [pc, #492]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d908      	bls.n	8007a82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a70:	4b78      	ldr	r3, [pc, #480]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	4975      	ldr	r1, [pc, #468]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d010      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695a      	ldr	r2, [r3, #20]
 8007a92:	4b70      	ldr	r3, [pc, #448]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d908      	bls.n	8007ab0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a9e:	4b6d      	ldr	r3, [pc, #436]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	496a      	ldr	r1, [pc, #424]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d010      	beq.n	8007ade <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	4b64      	ldr	r3, [pc, #400]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d908      	bls.n	8007ade <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007acc:	4b61      	ldr	r3, [pc, #388]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	495e      	ldr	r1, [pc, #376]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d010      	beq.n	8007b0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69da      	ldr	r2, [r3, #28]
 8007aee:	4b59      	ldr	r3, [pc, #356]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d908      	bls.n	8007b0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007afa:	4b56      	ldr	r3, [pc, #344]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	4953      	ldr	r1, [pc, #332]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d010      	beq.n	8007b3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	4b4d      	ldr	r3, [pc, #308]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f003 030f 	and.w	r3, r3, #15
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d908      	bls.n	8007b3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b28:	4b4a      	ldr	r3, [pc, #296]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	f023 020f 	bic.w	r2, r3, #15
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	4947      	ldr	r1, [pc, #284]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d055      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b46:	4b43      	ldr	r3, [pc, #268]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	4940      	ldr	r1, [pc, #256]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b60:	4b3c      	ldr	r3, [pc, #240]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d121      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e0f6      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d107      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b78:	4b36      	ldr	r3, [pc, #216]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d115      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e0ea      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d107      	bne.n	8007ba0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b90:	4b30      	ldr	r3, [pc, #192]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d109      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e0de      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ba0:	4b2c      	ldr	r3, [pc, #176]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e0d6      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bb0:	4b28      	ldr	r3, [pc, #160]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f023 0207 	bic.w	r2, r3, #7
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	4925      	ldr	r1, [pc, #148]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc2:	f7fa fde5 	bl	8002790 <HAL_GetTick>
 8007bc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc8:	e00a      	b.n	8007be0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bca:	f7fa fde1 	bl	8002790 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e0be      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007be0:	4b1c      	ldr	r3, [pc, #112]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d1eb      	bne.n	8007bca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d010      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d208      	bcs.n	8007c20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c0e:	4b11      	ldr	r3, [pc, #68]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f023 020f 	bic.w	r2, r3, #15
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	490e      	ldr	r1, [pc, #56]	; (8007c54 <HAL_RCC_ClockConfig+0x244>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d214      	bcs.n	8007c58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c2e:	4b08      	ldr	r3, [pc, #32]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f023 020f 	bic.w	r2, r3, #15
 8007c36:	4906      	ldr	r1, [pc, #24]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c3e:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <HAL_RCC_ClockConfig+0x240>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d005      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e086      	b.n	8007d5e <HAL_RCC_ClockConfig+0x34e>
 8007c50:	52002000 	.word	0x52002000
 8007c54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d010      	beq.n	8007c86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	4b3f      	ldr	r3, [pc, #252]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d208      	bcs.n	8007c86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c74:	4b3c      	ldr	r3, [pc, #240]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	4939      	ldr	r1, [pc, #228]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d010      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695a      	ldr	r2, [r3, #20]
 8007c96:	4b34      	ldr	r3, [pc, #208]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d208      	bcs.n	8007cb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ca2:	4b31      	ldr	r3, [pc, #196]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	492e      	ldr	r1, [pc, #184]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d010      	beq.n	8007ce2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699a      	ldr	r2, [r3, #24]
 8007cc4:	4b28      	ldr	r3, [pc, #160]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d208      	bcs.n	8007ce2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cd0:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	4922      	ldr	r1, [pc, #136]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d010      	beq.n	8007d10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69da      	ldr	r2, [r3, #28]
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d208      	bcs.n	8007d10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007cfe:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	4917      	ldr	r1, [pc, #92]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d10:	f000 f89e 	bl	8007e50 <HAL_RCC_GetSysClockFreq>
 8007d14:	4602      	mov	r2, r0
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	f003 030f 	and.w	r3, r3, #15
 8007d20:	4912      	ldr	r1, [pc, #72]	; (8007d6c <HAL_RCC_ClockConfig+0x35c>)
 8007d22:	5ccb      	ldrb	r3, [r1, r3]
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d2e:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <HAL_RCC_ClockConfig+0x358>)
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	4a0d      	ldr	r2, [pc, #52]	; (8007d6c <HAL_RCC_ClockConfig+0x35c>)
 8007d38:	5cd3      	ldrb	r3, [r2, r3]
 8007d3a:	f003 031f 	and.w	r3, r3, #31
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	fa22 f303 	lsr.w	r3, r2, r3
 8007d44:	4a0a      	ldr	r2, [pc, #40]	; (8007d70 <HAL_RCC_ClockConfig+0x360>)
 8007d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d48:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <HAL_RCC_ClockConfig+0x364>)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <HAL_RCC_ClockConfig+0x368>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fa fcd2 	bl	80026fc <HAL_InitTick>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	0800de5c 	.word	0x0800de5c
 8007d70:	24000004 	.word	0x24000004
 8007d74:	24000000 	.word	0x24000000
 8007d78:	24000008 	.word	0x24000008

08007d7c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08c      	sub	sp, #48	; 0x30
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d12a      	bne.n	8007de4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007d8e:	4b2d      	ldr	r3, [pc, #180]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d94:	4a2b      	ldr	r2, [pc, #172]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007d96:	f043 0301 	orr.w	r3, r3, #1
 8007d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d9e:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	61bb      	str	r3, [r7, #24]
 8007daa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007db2:	2302      	movs	r3, #2
 8007db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007db6:	2303      	movs	r3, #3
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007dc2:	f107 031c 	add.w	r3, r7, #28
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	481f      	ldr	r0, [pc, #124]	; (8007e48 <HAL_RCC_MCOConfig+0xcc>)
 8007dca:	f7fe fdcb 	bl	8006964 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007dce:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	4919      	ldr	r1, [pc, #100]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007de2:	e02a      	b.n	8007e3a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007de4:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dea:	4a16      	ldr	r2, [pc, #88]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007dec:	f043 0304 	orr.w	r3, r3, #4
 8007df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007df4:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e14:	2300      	movs	r3, #0
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007e18:	f107 031c 	add.w	r3, r7, #28
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	480b      	ldr	r0, [pc, #44]	; (8007e4c <HAL_RCC_MCOConfig+0xd0>)
 8007e20:	f7fe fda0 	bl	8006964 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007e24:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	01d9      	lsls	r1, r3, #7
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	430b      	orrs	r3, r1
 8007e34:	4903      	ldr	r1, [pc, #12]	; (8007e44 <HAL_RCC_MCOConfig+0xc8>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	610b      	str	r3, [r1, #16]
}
 8007e3a:	bf00      	nop
 8007e3c:	3730      	adds	r7, #48	; 0x30
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400
 8007e48:	58020000 	.word	0x58020000
 8007e4c:	58020800 	.word	0x58020800

08007e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b089      	sub	sp, #36	; 0x24
 8007e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e56:	4bb3      	ldr	r3, [pc, #716]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e5e:	2b18      	cmp	r3, #24
 8007e60:	f200 8155 	bhi.w	800810e <HAL_RCC_GetSysClockFreq+0x2be>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007ed1 	.word	0x08007ed1
 8007e70:	0800810f 	.word	0x0800810f
 8007e74:	0800810f 	.word	0x0800810f
 8007e78:	0800810f 	.word	0x0800810f
 8007e7c:	0800810f 	.word	0x0800810f
 8007e80:	0800810f 	.word	0x0800810f
 8007e84:	0800810f 	.word	0x0800810f
 8007e88:	0800810f 	.word	0x0800810f
 8007e8c:	08007ef7 	.word	0x08007ef7
 8007e90:	0800810f 	.word	0x0800810f
 8007e94:	0800810f 	.word	0x0800810f
 8007e98:	0800810f 	.word	0x0800810f
 8007e9c:	0800810f 	.word	0x0800810f
 8007ea0:	0800810f 	.word	0x0800810f
 8007ea4:	0800810f 	.word	0x0800810f
 8007ea8:	0800810f 	.word	0x0800810f
 8007eac:	08007efd 	.word	0x08007efd
 8007eb0:	0800810f 	.word	0x0800810f
 8007eb4:	0800810f 	.word	0x0800810f
 8007eb8:	0800810f 	.word	0x0800810f
 8007ebc:	0800810f 	.word	0x0800810f
 8007ec0:	0800810f 	.word	0x0800810f
 8007ec4:	0800810f 	.word	0x0800810f
 8007ec8:	0800810f 	.word	0x0800810f
 8007ecc:	08007f03 	.word	0x08007f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed0:	4b94      	ldr	r3, [pc, #592]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d009      	beq.n	8007ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007edc:	4b91      	ldr	r3, [pc, #580]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	08db      	lsrs	r3, r3, #3
 8007ee2:	f003 0303 	and.w	r3, r3, #3
 8007ee6:	4a90      	ldr	r2, [pc, #576]	; (8008128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8007eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007eee:	e111      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ef0:	4b8d      	ldr	r3, [pc, #564]	; (8008128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ef2:	61bb      	str	r3, [r7, #24]
      break;
 8007ef4:	e10e      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007ef6:	4b8d      	ldr	r3, [pc, #564]	; (800812c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ef8:	61bb      	str	r3, [r7, #24]
      break;
 8007efa:	e10b      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007efc:	4b8c      	ldr	r3, [pc, #560]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007efe:	61bb      	str	r3, [r7, #24]
      break;
 8007f00:	e108      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f02:	4b88      	ldr	r3, [pc, #544]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007f0c:	4b85      	ldr	r3, [pc, #532]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	091b      	lsrs	r3, r3, #4
 8007f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f18:	4b82      	ldr	r3, [pc, #520]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f22:	4b80      	ldr	r3, [pc, #512]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	08db      	lsrs	r3, r3, #3
 8007f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 80e1 	beq.w	8008108 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	f000 8083 	beq.w	8008054 <HAL_RCC_GetSysClockFreq+0x204>
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	f200 80a1 	bhi.w	8008098 <HAL_RCC_GetSysClockFreq+0x248>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCC_GetSysClockFreq+0x114>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d056      	beq.n	8008010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f62:	e099      	b.n	8008098 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f64:	4b6f      	ldr	r3, [pc, #444]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02d      	beq.n	8007fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f70:	4b6c      	ldr	r3, [pc, #432]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	08db      	lsrs	r3, r3, #3
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	4a6b      	ldr	r2, [pc, #428]	; (8008128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9a:	4b62      	ldr	r3, [pc, #392]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007fca:	e087      	b.n	80080dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b51      	ldr	r3, [pc, #324]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ff2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800800e:	e065      	b.n	80080dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800813c <HAL_RCC_GetSysClockFreq+0x2ec>
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b40      	ldr	r3, [pc, #256]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a02 	vldr	s12, [r7, #8]
 8008036:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008052:	e043      	b.n	80080dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a02 	vldr	s12, [r7, #8]
 800807a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008096:	e021      	b.n	80080dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800813c <HAL_RCC_GetSysClockFreq+0x2ec>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80080be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80080dc:	4b11      	ldr	r3, [pc, #68]	; (8008124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	0a5b      	lsrs	r3, r3, #9
 80080e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e6:	3301      	adds	r3, #1
 80080e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	ee07 3a90 	vmov	s15, r3
 80080f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008100:	ee17 3a90 	vmov	r3, s15
 8008104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008106:	e005      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	61bb      	str	r3, [r7, #24]
      break;
 800810c:	e002      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800810e:	4b07      	ldr	r3, [pc, #28]	; (800812c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008110:	61bb      	str	r3, [r7, #24]
      break;
 8008112:	bf00      	nop
  }

  return sysclockfreq;
 8008114:	69bb      	ldr	r3, [r7, #24]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3724      	adds	r7, #36	; 0x24
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	58024400 	.word	0x58024400
 8008128:	03d09000 	.word	0x03d09000
 800812c:	003d0900 	.word	0x003d0900
 8008130:	02faf080 	.word	0x02faf080
 8008134:	46000000 	.word	0x46000000
 8008138:	4c742400 	.word	0x4c742400
 800813c:	4a742400 	.word	0x4a742400
 8008140:	4c3ebc20 	.word	0x4c3ebc20

08008144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800814a:	f7ff fe81 	bl	8007e50 <HAL_RCC_GetSysClockFreq>
 800814e:	4602      	mov	r2, r0
 8008150:	4b10      	ldr	r3, [pc, #64]	; (8008194 <HAL_RCC_GetHCLKFreq+0x50>)
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	0a1b      	lsrs	r3, r3, #8
 8008156:	f003 030f 	and.w	r3, r3, #15
 800815a:	490f      	ldr	r1, [pc, #60]	; (8008198 <HAL_RCC_GetHCLKFreq+0x54>)
 800815c:	5ccb      	ldrb	r3, [r1, r3]
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008168:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <HAL_RCC_GetHCLKFreq+0x50>)
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	4a09      	ldr	r2, [pc, #36]	; (8008198 <HAL_RCC_GetHCLKFreq+0x54>)
 8008172:	5cd3      	ldrb	r3, [r2, r3]
 8008174:	f003 031f 	and.w	r3, r3, #31
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	fa22 f303 	lsr.w	r3, r2, r3
 800817e:	4a07      	ldr	r2, [pc, #28]	; (800819c <HAL_RCC_GetHCLKFreq+0x58>)
 8008180:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008182:	4a07      	ldr	r2, [pc, #28]	; (80081a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008188:	4b04      	ldr	r3, [pc, #16]	; (800819c <HAL_RCC_GetHCLKFreq+0x58>)
 800818a:	681b      	ldr	r3, [r3, #0]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	58024400 	.word	0x58024400
 8008198:	0800de5c 	.word	0x0800de5c
 800819c:	24000004 	.word	0x24000004
 80081a0:	24000000 	.word	0x24000000

080081a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80081a8:	f7ff ffcc 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 80081ac:	4602      	mov	r2, r0
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	091b      	lsrs	r3, r3, #4
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	4904      	ldr	r1, [pc, #16]	; (80081cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80081ba:	5ccb      	ldrb	r3, [r1, r3]
 80081bc:	f003 031f 	and.w	r3, r3, #31
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	58024400 	.word	0x58024400
 80081cc:	0800de5c 	.word	0x0800de5c

080081d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80081d4:	f7ff ffb6 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 80081d8:	4602      	mov	r2, r0
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	4904      	ldr	r1, [pc, #16]	; (80081f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081e6:	5ccb      	ldrb	r3, [r1, r3]
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	58024400 	.word	0x58024400
 80081f8:	0800de5c 	.word	0x0800de5c

080081fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008200:	b0c6      	sub	sp, #280	; 0x118
 8008202:	af00      	add	r7, sp, #0
 8008204:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008208:	2300      	movs	r3, #0
 800820a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800820e:	2300      	movs	r3, #0
 8008210:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008220:	2500      	movs	r5, #0
 8008222:	ea54 0305 	orrs.w	r3, r4, r5
 8008226:	d049      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800822e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008232:	d02f      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008238:	d828      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800823a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800823e:	d01a      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008244:	d822      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800824a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800824e:	d007      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008250:	e01c      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008252:	4bab      	ldr	r3, [pc, #684]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	4aaa      	ldr	r2, [pc, #680]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800825c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800825e:	e01a      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008264:	3308      	adds	r3, #8
 8008266:	2102      	movs	r1, #2
 8008268:	4618      	mov	r0, r3
 800826a:	f002 fa49 	bl	800a700 <RCCEx_PLL2_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008274:	e00f      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827a:	3328      	adds	r3, #40	; 0x28
 800827c:	2102      	movs	r1, #2
 800827e:	4618      	mov	r0, r3
 8008280:	f002 faf0 	bl	800a864 <RCCEx_PLL3_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800828a:	e004      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008292:	e000      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800829e:	4b98      	ldr	r3, [pc, #608]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80082a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ac:	4a94      	ldr	r2, [pc, #592]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082ae:	430b      	orrs	r3, r1
 80082b0:	6513      	str	r3, [r2, #80]	; 0x50
 80082b2:	e003      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80082c8:	f04f 0900 	mov.w	r9, #0
 80082cc:	ea58 0309 	orrs.w	r3, r8, r9
 80082d0:	d047      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d82a      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	080082f9 	.word	0x080082f9
 80082e8:	08008307 	.word	0x08008307
 80082ec:	0800831d 	.word	0x0800831d
 80082f0:	0800833b 	.word	0x0800833b
 80082f4:	0800833b 	.word	0x0800833b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f8:	4b81      	ldr	r3, [pc, #516]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	4a80      	ldr	r2, [pc, #512]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008304:	e01a      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830a:	3308      	adds	r3, #8
 800830c:	2100      	movs	r1, #0
 800830e:	4618      	mov	r0, r3
 8008310:	f002 f9f6 	bl	800a700 <RCCEx_PLL2_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800831a:	e00f      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800831c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008320:	3328      	adds	r3, #40	; 0x28
 8008322:	2100      	movs	r1, #0
 8008324:	4618      	mov	r0, r3
 8008326:	f002 fa9d 	bl	800a864 <RCCEx_PLL3_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008330:	e004      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008338:	e000      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800833a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800833c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008344:	4b6e      	ldr	r3, [pc, #440]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008348:	f023 0107 	bic.w	r1, r3, #7
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008352:	4a6b      	ldr	r2, [pc, #428]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008354:	430b      	orrs	r3, r1
 8008356:	6513      	str	r3, [r2, #80]	; 0x50
 8008358:	e003      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800835e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800836e:	f04f 0b00 	mov.w	fp, #0
 8008372:	ea5a 030b 	orrs.w	r3, sl, fp
 8008376:	d05b      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008380:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008384:	d03b      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008386:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800838a:	d834      	bhi.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800838c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008390:	d037      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008396:	d82e      	bhi.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008398:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800839c:	d033      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800839e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083a2:	d828      	bhi.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80083a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083a8:	d01a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80083aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ae:	d822      	bhi.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80083b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083b8:	d007      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80083ba:	e01c      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083bc:	4b50      	ldr	r3, [pc, #320]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	4a4f      	ldr	r2, [pc, #316]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80083c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083c8:	e01e      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ce:	3308      	adds	r3, #8
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f002 f994 	bl	800a700 <RCCEx_PLL2_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083de:	e013      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	3328      	adds	r3, #40	; 0x28
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f002 fa3b 	bl	800a864 <RCCEx_PLL3_Config>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083f4:	e008      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80083fc:	e004      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80083fe:	bf00      	nop
 8008400:	e002      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008402:	bf00      	nop
 8008404:	e000      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008408:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008410:	4b3b      	ldr	r3, [pc, #236]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008414:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008420:	4a37      	ldr	r2, [pc, #220]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008422:	430b      	orrs	r3, r1
 8008424:	6593      	str	r3, [r2, #88]	; 0x58
 8008426:	e003      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008428:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800842c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800843c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008440:	2300      	movs	r3, #0
 8008442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800844a:	460b      	mov	r3, r1
 800844c:	4313      	orrs	r3, r2
 800844e:	d05d      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008458:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800845c:	d03b      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800845e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008462:	d834      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008468:	d037      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800846a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800846e:	d82e      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008474:	d033      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008476:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800847a:	d828      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800847c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008480:	d01a      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008486:	d822      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800848c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008490:	d007      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008492:	e01c      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008494:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	4a19      	ldr	r2, [pc, #100]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800849a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800849e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084a0:	e01e      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a6:	3308      	adds	r3, #8
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f002 f928 	bl	800a700 <RCCEx_PLL2_Config>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084b6:	e013      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084bc:	3328      	adds	r3, #40	; 0x28
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f002 f9cf 	bl	800a864 <RCCEx_PLL3_Config>
 80084c6:	4603      	mov	r3, r0
 80084c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084cc:	e008      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80084d4:	e004      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80084d6:	bf00      	nop
 80084d8:	e002      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80084da:	bf00      	nop
 80084dc:	e000      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80084de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10d      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80084f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80084f8:	4a01      	ldr	r2, [pc, #4]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084fa:	430b      	orrs	r3, r1
 80084fc:	6593      	str	r3, [r2, #88]	; 0x58
 80084fe:	e005      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008504:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008508:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800850c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008518:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800851c:	2300      	movs	r3, #0
 800851e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008522:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008526:	460b      	mov	r3, r1
 8008528:	4313      	orrs	r3, r2
 800852a:	d03a      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800852c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008532:	2b30      	cmp	r3, #48	; 0x30
 8008534:	d01f      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008536:	2b30      	cmp	r3, #48	; 0x30
 8008538:	d819      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800853a:	2b20      	cmp	r3, #32
 800853c:	d00c      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800853e:	2b20      	cmp	r3, #32
 8008540:	d815      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d019      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008546:	2b10      	cmp	r3, #16
 8008548:	d111      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800854a:	4baa      	ldr	r3, [pc, #680]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	4aa9      	ldr	r2, [pc, #676]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008556:	e011      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800855c:	3308      	adds	r3, #8
 800855e:	2102      	movs	r1, #2
 8008560:	4618      	mov	r0, r3
 8008562:	f002 f8cd 	bl	800a700 <RCCEx_PLL2_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800856c:	e006      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008574:	e002      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008576:	bf00      	nop
 8008578:	e000      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800857a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800857c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10a      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008584:	4b9b      	ldr	r3, [pc, #620]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008588:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800858c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008592:	4a98      	ldr	r2, [pc, #608]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008594:	430b      	orrs	r3, r1
 8008596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008598:	e003      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800859e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80085ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085b2:	2300      	movs	r3, #0
 80085b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80085bc:	460b      	mov	r3, r1
 80085be:	4313      	orrs	r3, r2
 80085c0:	d051      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085cc:	d035      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80085ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d2:	d82e      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80085d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085d8:	d031      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80085da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085de:	d828      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80085e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e4:	d01a      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80085e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ea:	d822      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80085f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f4:	d007      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80085f6:	e01c      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085f8:	4b7e      	ldr	r3, [pc, #504]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	4a7d      	ldr	r2, [pc, #500]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008604:	e01c      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860a:	3308      	adds	r3, #8
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f002 f876 	bl	800a700 <RCCEx_PLL2_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800861a:	e011      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800861c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008620:	3328      	adds	r3, #40	; 0x28
 8008622:	2100      	movs	r1, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f002 f91d 	bl	800a864 <RCCEx_PLL3_Config>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008630:	e006      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008638:	e002      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800863e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008648:	4b6a      	ldr	r3, [pc, #424]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800864a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800864c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008656:	4a67      	ldr	r2, [pc, #412]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008658:	430b      	orrs	r3, r1
 800865a:	6513      	str	r3, [r2, #80]	; 0x50
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008662:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008676:	2300      	movs	r3, #0
 8008678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800867c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d053      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800868c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008690:	d033      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008696:	d82c      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800869c:	d02f      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800869e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086a2:	d826      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086a8:	d02b      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80086aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086ae:	d820      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086b4:	d012      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80086b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ba:	d81a      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d022      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c4:	d115      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ca:	3308      	adds	r3, #8
 80086cc:	2101      	movs	r1, #1
 80086ce:	4618      	mov	r0, r3
 80086d0:	f002 f816 	bl	800a700 <RCCEx_PLL2_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086da:	e015      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e0:	3328      	adds	r3, #40	; 0x28
 80086e2:	2101      	movs	r1, #1
 80086e4:	4618      	mov	r0, r3
 80086e6:	f002 f8bd 	bl	800a864 <RCCEx_PLL3_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086f0:	e00a      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80086f8:	e006      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80086fa:	bf00      	nop
 80086fc:	e004      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008710:	4b38      	ldr	r3, [pc, #224]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008714:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871e:	4a35      	ldr	r2, [pc, #212]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008720:	430b      	orrs	r3, r1
 8008722:	6513      	str	r3, [r2, #80]	; 0x50
 8008724:	e003      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008726:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800872a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800872e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800873a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800873e:	2300      	movs	r3, #0
 8008740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008744:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008748:	460b      	mov	r3, r1
 800874a:	4313      	orrs	r3, r2
 800874c:	d058      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800874e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800875a:	d033      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800875c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008760:	d82c      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008766:	d02f      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876c:	d826      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800876e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008772:	d02b      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008778:	d820      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800877a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800877e:	d012      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008784:	d81a      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d022      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800878a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800878e:	d115      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008794:	3308      	adds	r3, #8
 8008796:	2101      	movs	r1, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f001 ffb1 	bl	800a700 <RCCEx_PLL2_Config>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087a4:	e015      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087aa:	3328      	adds	r3, #40	; 0x28
 80087ac:	2101      	movs	r1, #1
 80087ae:	4618      	mov	r0, r3
 80087b0:	f002 f858 	bl	800a864 <RCCEx_PLL3_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087ba:	e00a      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80087c2:	e006      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087c4:	bf00      	nop
 80087c6:	e004      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087c8:	bf00      	nop
 80087ca:	e002      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087cc:	bf00      	nop
 80087ce:	e000      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10e      	bne.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80087e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087ea:	4a02      	ldr	r2, [pc, #8]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087ec:	430b      	orrs	r3, r1
 80087ee:	6593      	str	r3, [r2, #88]	; 0x58
 80087f0:	e006      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80087f2:	bf00      	nop
 80087f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800880c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008810:	2300      	movs	r3, #0
 8008812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008816:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800881a:	460b      	mov	r3, r1
 800881c:	4313      	orrs	r3, r2
 800881e:	d037      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800882a:	d00e      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800882c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008830:	d816      	bhi.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d018      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800883a:	d111      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800883c:	4bc4      	ldr	r3, [pc, #784]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4ac3      	ldr	r2, [pc, #780]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008848:	e00f      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800884a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884e:	3308      	adds	r3, #8
 8008850:	2101      	movs	r1, #1
 8008852:	4618      	mov	r0, r3
 8008854:	f001 ff54 	bl	800a700 <RCCEx_PLL2_Config>
 8008858:	4603      	mov	r3, r0
 800885a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800885e:	e004      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008866:	e000      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800886a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008872:	4bb7      	ldr	r3, [pc, #732]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800887a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008880:	4ab3      	ldr	r2, [pc, #716]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008882:	430b      	orrs	r3, r1
 8008884:	6513      	str	r3, [r2, #80]	; 0x50
 8008886:	e003      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800888c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800889c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80088aa:	460b      	mov	r3, r1
 80088ac:	4313      	orrs	r3, r2
 80088ae:	d039      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d81c      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088d1 	.word	0x080088d1
 80088c8:	080088df 	.word	0x080088df
 80088cc:	080088fd 	.word	0x080088fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d0:	4b9f      	ldr	r3, [pc, #636]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	4a9e      	ldr	r2, [pc, #632]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088dc:	e00f      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e2:	3308      	adds	r3, #8
 80088e4:	2102      	movs	r1, #2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 ff0a 	bl	800a700 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088f2:	e004      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80088fa:	e000      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80088fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008906:	4b92      	ldr	r3, [pc, #584]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890a:	f023 0103 	bic.w	r1, r3, #3
 800890e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008914:	4a8e      	ldr	r2, [pc, #568]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008916:	430b      	orrs	r3, r1
 8008918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800891a:	e003      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008934:	2300      	movs	r3, #0
 8008936:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800893a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800893e:	460b      	mov	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	f000 8099 	beq.w	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008946:	4b83      	ldr	r3, [pc, #524]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a82      	ldr	r2, [pc, #520]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800894c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008952:	f7f9 ff1d 	bl	8002790 <HAL_GetTick>
 8008956:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800895a:	e00b      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895c:	f7f9 ff18 	bl	8002790 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b64      	cmp	r3, #100	; 0x64
 800896a:	d903      	bls.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008972:	e005      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008974:	4b77      	ldr	r3, [pc, #476]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0ed      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008984:	2b00      	cmp	r3, #0
 8008986:	d173      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008988:	4b71      	ldr	r3, [pc, #452]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800898a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800898c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008994:	4053      	eors	r3, r2
 8008996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800899a:	2b00      	cmp	r3, #0
 800899c:	d015      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800899e:	4b6c      	ldr	r3, [pc, #432]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089aa:	4b69      	ldr	r3, [pc, #420]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	4a68      	ldr	r2, [pc, #416]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089b6:	4b66      	ldr	r3, [pc, #408]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ba:	4a65      	ldr	r2, [pc, #404]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089c2:	4a63      	ldr	r2, [pc, #396]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d6:	d118      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7f9 feda 	bl	8002790 <HAL_GetTick>
 80089dc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e0:	e00d      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e2:	f7f9 fed5 	bl	8002790 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80089ec:	1ad2      	subs	r2, r2, r3
 80089ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d903      	bls.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80089fc:	e005      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089fe:	4b54      	ldr	r3, [pc, #336]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0eb      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d129      	bne.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a22:	d10e      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008a24:	4b4a      	ldr	r3, [pc, #296]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a34:	091a      	lsrs	r2, r3, #4
 8008a36:	4b48      	ldr	r3, [pc, #288]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	4a45      	ldr	r2, [pc, #276]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	6113      	str	r3, [r2, #16]
 8008a40:	e005      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008a42:	4b43      	ldr	r3, [pc, #268]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	4a42      	ldr	r2, [pc, #264]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a4c:	6113      	str	r3, [r2, #16]
 8008a4e:	4b40      	ldr	r3, [pc, #256]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a5e:	4a3c      	ldr	r2, [pc, #240]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a60:	430b      	orrs	r3, r1
 8008a62:	6713      	str	r3, [r2, #112]	; 0x70
 8008a64:	e008      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8008a6e:	e003      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f002 0301 	and.w	r3, r2, #1
 8008a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008a92:	460b      	mov	r3, r1
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f000 808f 	beq.w	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aa0:	2b28      	cmp	r3, #40	; 0x28
 8008aa2:	d871      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008aa4:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008b91 	.word	0x08008b91
 8008ab0:	08008b89 	.word	0x08008b89
 8008ab4:	08008b89 	.word	0x08008b89
 8008ab8:	08008b89 	.word	0x08008b89
 8008abc:	08008b89 	.word	0x08008b89
 8008ac0:	08008b89 	.word	0x08008b89
 8008ac4:	08008b89 	.word	0x08008b89
 8008ac8:	08008b89 	.word	0x08008b89
 8008acc:	08008b5d 	.word	0x08008b5d
 8008ad0:	08008b89 	.word	0x08008b89
 8008ad4:	08008b89 	.word	0x08008b89
 8008ad8:	08008b89 	.word	0x08008b89
 8008adc:	08008b89 	.word	0x08008b89
 8008ae0:	08008b89 	.word	0x08008b89
 8008ae4:	08008b89 	.word	0x08008b89
 8008ae8:	08008b89 	.word	0x08008b89
 8008aec:	08008b73 	.word	0x08008b73
 8008af0:	08008b89 	.word	0x08008b89
 8008af4:	08008b89 	.word	0x08008b89
 8008af8:	08008b89 	.word	0x08008b89
 8008afc:	08008b89 	.word	0x08008b89
 8008b00:	08008b89 	.word	0x08008b89
 8008b04:	08008b89 	.word	0x08008b89
 8008b08:	08008b89 	.word	0x08008b89
 8008b0c:	08008b91 	.word	0x08008b91
 8008b10:	08008b89 	.word	0x08008b89
 8008b14:	08008b89 	.word	0x08008b89
 8008b18:	08008b89 	.word	0x08008b89
 8008b1c:	08008b89 	.word	0x08008b89
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008b89 	.word	0x08008b89
 8008b28:	08008b89 	.word	0x08008b89
 8008b2c:	08008b91 	.word	0x08008b91
 8008b30:	08008b89 	.word	0x08008b89
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b89 	.word	0x08008b89
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	08008b89 	.word	0x08008b89
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b91 	.word	0x08008b91
 8008b50:	58024400 	.word	0x58024400
 8008b54:	58024800 	.word	0x58024800
 8008b58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b60:	3308      	adds	r3, #8
 8008b62:	2101      	movs	r1, #1
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 fdcb 	bl	800a700 <RCCEx_PLL2_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b70:	e00f      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b76:	3328      	adds	r3, #40	; 0x28
 8008b78:	2101      	movs	r1, #1
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 fe72 	bl	800a864 <RCCEx_PLL3_Config>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b86:	e004      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b8e:	e000      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b9a:	4bbf      	ldr	r3, [pc, #764]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ba8:	4abb      	ldr	r2, [pc, #748]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008baa:	430b      	orrs	r3, r1
 8008bac:	6553      	str	r3, [r2, #84]	; 0x54
 8008bae:	e003      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f002 0302 	and.w	r3, r2, #2
 8008bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	d041      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d824      	bhi.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c35 	.word	0x08008c35
 8008bec:	08008c01 	.word	0x08008c01
 8008bf0:	08008c17 	.word	0x08008c17
 8008bf4:	08008c35 	.word	0x08008c35
 8008bf8:	08008c35 	.word	0x08008c35
 8008bfc:	08008c35 	.word	0x08008c35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c04:	3308      	adds	r3, #8
 8008c06:	2101      	movs	r1, #1
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 fd79 	bl	800a700 <RCCEx_PLL2_Config>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c14:	e00f      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1a:	3328      	adds	r3, #40	; 0x28
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 fe20 	bl	800a864 <RCCEx_PLL3_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c2a:	e004      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c32:	e000      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c3e:	4b96      	ldr	r3, [pc, #600]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c42:	f023 0107 	bic.w	r1, r3, #7
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c4c:	4a92      	ldr	r2, [pc, #584]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	6553      	str	r3, [r2, #84]	; 0x54
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f002 0304 	and.w	r3, r2, #4
 8008c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c76:	460b      	mov	r3, r1
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	d044      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c84:	2b05      	cmp	r3, #5
 8008c86:	d825      	bhi.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008cdd 	.word	0x08008cdd
 8008c94:	08008ca9 	.word	0x08008ca9
 8008c98:	08008cbf 	.word	0x08008cbf
 8008c9c:	08008cdd 	.word	0x08008cdd
 8008ca0:	08008cdd 	.word	0x08008cdd
 8008ca4:	08008cdd 	.word	0x08008cdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cac:	3308      	adds	r3, #8
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 fd25 	bl	800a700 <RCCEx_PLL2_Config>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cbc:	e00f      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc2:	3328      	adds	r3, #40	; 0x28
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 fdcc 	bl	800a864 <RCCEx_PLL3_Config>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cd2:	e004      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008cda:	e000      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10b      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ce6:	4b6c      	ldr	r3, [pc, #432]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cea:	f023 0107 	bic.w	r1, r3, #7
 8008cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf6:	4a68      	ldr	r2, [pc, #416]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8008cfc:	e003      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f002 0320 	and.w	r3, r2, #32
 8008d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d16:	2300      	movs	r3, #0
 8008d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d055      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d32:	d033      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d38:	d82c      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d3e:	d02f      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d44:	d826      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d4a:	d02b      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008d4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d50:	d820      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d56:	d012      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d5c:	d81a      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d022      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d66:	d115      	bne.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 fcc5 	bl	800a700 <RCCEx_PLL2_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d7c:	e015      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d82:	3328      	adds	r3, #40	; 0x28
 8008d84:	2102      	movs	r1, #2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 fd6c 	bl	800a864 <RCCEx_PLL3_Config>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d92:	e00a      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d9a:	e006      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008d9c:	bf00      	nop
 8008d9e:	e004      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008da0:	bf00      	nop
 8008da2:	e002      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008da4:	bf00      	nop
 8008da6:	e000      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008daa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008db2:	4b39      	ldr	r3, [pc, #228]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc2:	4a35      	ldr	r2, [pc, #212]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	6553      	str	r3, [r2, #84]	; 0x54
 8008dc8:	e003      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008dde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008de8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d058      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008dfe:	d033      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008e00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e04:	d82c      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e0a:	d02f      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e10:	d826      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e16:	d02b      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e1c:	d820      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e22:	d012      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e28:	d81a      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d022      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e32:	d115      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e38:	3308      	adds	r3, #8
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 fc5f 	bl	800a700 <RCCEx_PLL2_Config>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e48:	e015      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4e:	3328      	adds	r3, #40	; 0x28
 8008e50:	2102      	movs	r1, #2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 fd06 	bl	800a864 <RCCEx_PLL3_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e5e:	e00a      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e66:	e006      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e68:	bf00      	nop
 8008e6a:	e004      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e6c:	bf00      	nop
 8008e6e:	e002      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e70:	bf00      	nop
 8008e72:	e000      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10e      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e7e:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e8e:	4a02      	ldr	r2, [pc, #8]	; (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e90:	430b      	orrs	r3, r1
 8008e92:	6593      	str	r3, [r2, #88]	; 0x58
 8008e94:	e006      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008e96:	bf00      	nop
 8008e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ea0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008eba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	d055      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ecc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ed0:	d033      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008ed2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ed6:	d82c      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008edc:	d02f      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee2:	d826      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008ee4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ee8:	d02b      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008eea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008eee:	d820      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ef4:	d012      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008efa:	d81a      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d022      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f04:	d115      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fbf6 	bl	800a700 <RCCEx_PLL2_Config>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f1a:	e015      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f20:	3328      	adds	r3, #40	; 0x28
 8008f22:	2102      	movs	r1, #2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 fc9d 	bl	800a864 <RCCEx_PLL3_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f30:	e00a      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f38:	e006      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f3a:	bf00      	nop
 8008f3c:	e004      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f3e:	bf00      	nop
 8008f40:	e002      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f42:	bf00      	nop
 8008f44:	e000      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f50:	4ba0      	ldr	r3, [pc, #640]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f60:	4a9c      	ldr	r2, [pc, #624]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f62:	430b      	orrs	r3, r1
 8008f64:	6593      	str	r3, [r2, #88]	; 0x58
 8008f66:	e003      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f002 0308 	and.w	r3, r2, #8
 8008f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	d01e      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa2:	3328      	adds	r3, #40	; 0x28
 8008fa4:	2102      	movs	r1, #2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 fc5c 	bl	800a864 <RCCEx_PLL3_Config>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008fb8:	4b86      	ldr	r3, [pc, #536]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc8:	4a82      	ldr	r2, [pc, #520]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f002 0310 	and.w	r3, r2, #16
 8008fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fe4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4313      	orrs	r3, r2
 8008fec:	d01e      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ffa:	d10c      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009000:	3328      	adds	r3, #40	; 0x28
 8009002:	2102      	movs	r1, #2
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fc2d 	bl	800a864 <RCCEx_PLL3_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009016:	4b6f      	ldr	r3, [pc, #444]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800901e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009026:	4a6b      	ldr	r2, [pc, #428]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009028:	430b      	orrs	r3, r1
 800902a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800902c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009038:	67bb      	str	r3, [r7, #120]	; 0x78
 800903a:	2300      	movs	r3, #0
 800903c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800903e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009042:	460b      	mov	r3, r1
 8009044:	4313      	orrs	r3, r2
 8009046:	d03e      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009054:	d022      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800905a:	d81b      	bhi.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009064:	d00b      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009066:	e015      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906c:	3308      	adds	r3, #8
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f001 fb45 	bl	800a700 <RCCEx_PLL2_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800907c:	e00f      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800907e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009082:	3328      	adds	r3, #40	; 0x28
 8009084:	2102      	movs	r1, #2
 8009086:	4618      	mov	r0, r3
 8009088:	f001 fbec 	bl	800a864 <RCCEx_PLL3_Config>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009092:	e004      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800909a:	e000      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800909c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800909e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090a6:	4b4b      	ldr	r3, [pc, #300]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80090ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090b6:	4a47      	ldr	r2, [pc, #284]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090b8:	430b      	orrs	r3, r1
 80090ba:	6593      	str	r3, [r2, #88]	; 0x58
 80090bc:	e003      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80090d2:	673b      	str	r3, [r7, #112]	; 0x70
 80090d4:	2300      	movs	r3, #0
 80090d6:	677b      	str	r3, [r7, #116]	; 0x74
 80090d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80090dc:	460b      	mov	r3, r1
 80090de:	4313      	orrs	r3, r2
 80090e0:	d03b      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090ee:	d01f      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80090f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090f4:	d818      	bhi.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80090f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090fa:	d003      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80090fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009100:	d007      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009102:	e011      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009104:	4b33      	ldr	r3, [pc, #204]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4a32      	ldr	r2, [pc, #200]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800910a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800910e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009110:	e00f      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009116:	3328      	adds	r3, #40	; 0x28
 8009118:	2101      	movs	r1, #1
 800911a:	4618      	mov	r0, r3
 800911c:	f001 fba2 	bl	800a864 <RCCEx_PLL3_Config>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009126:	e004      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800912e:	e000      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009132:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10b      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800913a:	4b26      	ldr	r3, [pc, #152]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800913c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800914a:	4a22      	ldr	r2, [pc, #136]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800914c:	430b      	orrs	r3, r1
 800914e:	6553      	str	r3, [r2, #84]	; 0x54
 8009150:	e003      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009152:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009156:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800915a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009166:	66bb      	str	r3, [r7, #104]	; 0x68
 8009168:	2300      	movs	r3, #0
 800916a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800916c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009170:	460b      	mov	r3, r1
 8009172:	4313      	orrs	r3, r2
 8009174:	d034      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800917a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009184:	d007      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009186:	e011      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009188:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	4a11      	ldr	r2, [pc, #68]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800918e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009194:	e00e      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919a:	3308      	adds	r3, #8
 800919c:	2102      	movs	r1, #2
 800919e:	4618      	mov	r0, r3
 80091a0:	f001 faae 	bl	800a700 <RCCEx_PLL2_Config>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091aa:	e003      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10d      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ca:	4a02      	ldr	r2, [pc, #8]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091cc:	430b      	orrs	r3, r1
 80091ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091d0:	e006      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80091d2:	bf00      	nop
 80091d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80091ec:	663b      	str	r3, [r7, #96]	; 0x60
 80091ee:	2300      	movs	r3, #0
 80091f0:	667b      	str	r3, [r7, #100]	; 0x64
 80091f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80091f6:	460b      	mov	r3, r1
 80091f8:	4313      	orrs	r3, r2
 80091fa:	d00c      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009200:	3328      	adds	r3, #40	; 0x28
 8009202:	2102      	movs	r1, #2
 8009204:	4618      	mov	r0, r3
 8009206:	f001 fb2d 	bl	800a864 <RCCEx_PLL3_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009222:	65bb      	str	r3, [r7, #88]	; 0x58
 8009224:	2300      	movs	r3, #0
 8009226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009228:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800922c:	460b      	mov	r3, r1
 800922e:	4313      	orrs	r3, r2
 8009230:	d036      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800923c:	d018      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800923e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009242:	d811      	bhi.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009248:	d014      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800924a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800924e:	d80b      	bhi.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009250:	2b00      	cmp	r3, #0
 8009252:	d011      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009258:	d106      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800925a:	4bb7      	ldr	r3, [pc, #732]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800925c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925e:	4ab6      	ldr	r2, [pc, #728]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009264:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009266:	e008      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800926e:	e004      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009270:	bf00      	nop
 8009272:	e002      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009274:	bf00      	nop
 8009276:	e000      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800927a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009282:	4bad      	ldr	r3, [pc, #692]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800928a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800928e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009290:	4aa9      	ldr	r2, [pc, #676]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009292:	430b      	orrs	r3, r1
 8009294:	6553      	str	r3, [r2, #84]	; 0x54
 8009296:	e003      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800929c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80092ac:	653b      	str	r3, [r7, #80]	; 0x50
 80092ae:	2300      	movs	r3, #0
 80092b0:	657b      	str	r3, [r7, #84]	; 0x54
 80092b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80092b6:	460b      	mov	r3, r1
 80092b8:	4313      	orrs	r3, r2
 80092ba:	d009      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092bc:	4b9e      	ldr	r3, [pc, #632]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80092c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	4a9b      	ldr	r2, [pc, #620]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092cc:	430b      	orrs	r3, r1
 80092ce:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80092dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092de:	2300      	movs	r3, #0
 80092e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80092e6:	460b      	mov	r3, r1
 80092e8:	4313      	orrs	r3, r2
 80092ea:	d009      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092ec:	4b92      	ldr	r3, [pc, #584]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80092f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092fa:	4a8f      	ldr	r2, [pc, #572]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092fc:	430b      	orrs	r3, r1
 80092fe:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800930c:	643b      	str	r3, [r7, #64]	; 0x40
 800930e:	2300      	movs	r3, #0
 8009310:	647b      	str	r3, [r7, #68]	; 0x44
 8009312:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009316:	460b      	mov	r3, r1
 8009318:	4313      	orrs	r3, r2
 800931a:	d00e      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800931c:	4b86      	ldr	r3, [pc, #536]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	4a85      	ldr	r2, [pc, #532]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009326:	6113      	str	r3, [r2, #16]
 8009328:	4b83      	ldr	r3, [pc, #524]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800932a:	6919      	ldr	r1, [r3, #16]
 800932c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009334:	4a80      	ldr	r2, [pc, #512]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800933a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009346:	63bb      	str	r3, [r7, #56]	; 0x38
 8009348:	2300      	movs	r3, #0
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800934c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d009      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009356:	4b78      	ldr	r3, [pc, #480]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800935a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800935e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009364:	4a74      	ldr	r2, [pc, #464]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009366:	430b      	orrs	r3, r1
 8009368:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800936a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009376:	633b      	str	r3, [r7, #48]	; 0x30
 8009378:	2300      	movs	r3, #0
 800937a:	637b      	str	r3, [r7, #52]	; 0x34
 800937c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009380:	460b      	mov	r3, r1
 8009382:	4313      	orrs	r3, r2
 8009384:	d00a      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009386:	4b6c      	ldr	r3, [pc, #432]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009396:	4a68      	ldr	r2, [pc, #416]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009398:	430b      	orrs	r3, r1
 800939a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800939c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	2100      	movs	r1, #0
 80093a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80093b2:	460b      	mov	r3, r1
 80093b4:	4313      	orrs	r3, r2
 80093b6:	d011      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093bc:	3308      	adds	r3, #8
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 f99d 	bl	800a700 <RCCEx_PLL2_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80093cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	2100      	movs	r1, #0
 80093e6:	6239      	str	r1, [r7, #32]
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
 80093ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093f2:	460b      	mov	r3, r1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	d011      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fc:	3308      	adds	r3, #8
 80093fe:	2101      	movs	r1, #1
 8009400:	4618      	mov	r0, r3
 8009402:	f001 f97d 	bl	800a700 <RCCEx_PLL2_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800940c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009414:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009418:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800941c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	2100      	movs	r1, #0
 8009426:	61b9      	str	r1, [r7, #24]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009432:	460b      	mov	r3, r1
 8009434:	4313      	orrs	r3, r2
 8009436:	d011      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943c:	3308      	adds	r3, #8
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f001 f95d 	bl	800a700 <RCCEx_PLL2_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800944c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009454:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009458:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800945c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	2100      	movs	r1, #0
 8009466:	6139      	str	r1, [r7, #16]
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009472:	460b      	mov	r3, r1
 8009474:	4313      	orrs	r3, r2
 8009476:	d011      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800947c:	3328      	adds	r3, #40	; 0x28
 800947e:	2100      	movs	r1, #0
 8009480:	4618      	mov	r0, r3
 8009482:	f001 f9ef 	bl	800a864 <RCCEx_PLL3_Config>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800948c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009490:	2b00      	cmp	r3, #0
 8009492:	d003      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	2100      	movs	r1, #0
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094b2:	460b      	mov	r3, r1
 80094b4:	4313      	orrs	r3, r2
 80094b6:	d011      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094bc:	3328      	adds	r3, #40	; 0x28
 80094be:	2101      	movs	r1, #1
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 f9cf 	bl	800a864 <RCCEx_PLL3_Config>
 80094c6:	4603      	mov	r3, r0
 80094c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80094cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	2100      	movs	r1, #0
 80094e6:	6039      	str	r1, [r7, #0]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	607b      	str	r3, [r7, #4]
 80094ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80094f2:	460b      	mov	r3, r1
 80094f4:	4313      	orrs	r3, r2
 80094f6:	d011      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fc:	3328      	adds	r3, #40	; 0x28
 80094fe:	2102      	movs	r1, #2
 8009500:	4618      	mov	r0, r3
 8009502:	f001 f9af 	bl	800a864 <RCCEx_PLL3_Config>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800950c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800951c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	e000      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
}
 800952a:	4618      	mov	r0, r3
 800952c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009530:	46bd      	mov	sp, r7
 8009532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400

0800953c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b090      	sub	sp, #64	; 0x40
 8009540:	af00      	add	r7, sp, #0
 8009542:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800954e:	430b      	orrs	r3, r1
 8009550:	f040 8094 	bne.w	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009554:	4b9b      	ldr	r3, [pc, #620]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009558:	f003 0307 	and.w	r3, r3, #7
 800955c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	2b04      	cmp	r3, #4
 8009562:	f200 8087 	bhi.w	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009566:	a201      	add	r2, pc, #4	; (adr r2, 800956c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956c:	08009581 	.word	0x08009581
 8009570:	080095a9 	.word	0x080095a9
 8009574:	080095d1 	.word	0x080095d1
 8009578:	0800966d 	.word	0x0800966d
 800957c:	080095f9 	.word	0x080095f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009580:	4b90      	ldr	r3, [pc, #576]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800958c:	d108      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800958e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009592:	4618      	mov	r0, r3
 8009594:	f000 ff62 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959c:	f000 bc93 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a4:	f000 bc8f 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095a8:	4b86      	ldr	r3, [pc, #536]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b4:	d108      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b6:	f107 0318 	add.w	r3, r7, #24
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fca6 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c4:	f000 bc7f 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095cc:	f000 bc7b 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095d0:	4b7c      	ldr	r3, [pc, #496]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095dc:	d108      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fde6 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ec:	f000 bc6b 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095f4:	f000 bc67 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095f8:	4b72      	ldr	r3, [pc, #456]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009600:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009602:	4b70      	ldr	r3, [pc, #448]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b04      	cmp	r3, #4
 800960c:	d10c      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800960e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009614:	4b6b      	ldr	r3, [pc, #428]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	08db      	lsrs	r3, r3, #3
 800961a:	f003 0303 	and.w	r3, r3, #3
 800961e:	4a6a      	ldr	r2, [pc, #424]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009620:	fa22 f303 	lsr.w	r3, r2, r3
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009626:	e01f      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009628:	4b66      	ldr	r3, [pc, #408]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009634:	d106      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800963c:	d102      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800963e:	4b63      	ldr	r3, [pc, #396]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009642:	e011      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009644:	4b5f      	ldr	r3, [pc, #380]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800964c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009650:	d106      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009658:	d102      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800965a:	4b5d      	ldr	r3, [pc, #372]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800965c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800965e:	e003      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009664:	f000 bc2f 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009668:	f000 bc2d 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800966c:	4b59      	ldr	r3, [pc, #356]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009670:	f000 bc29 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009678:	f000 bc25 	b.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800967c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009680:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009684:	430b      	orrs	r3, r1
 8009686:	f040 80a7 	bne.w	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800968a:	4b4e      	ldr	r3, [pc, #312]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800968c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800968e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009692:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800969a:	d054      	beq.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a2:	f200 808b 	bhi.w	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096ac:	f000 8083 	beq.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096b6:	f200 8081 	bhi.w	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096c0:	d02f      	beq.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096c8:	d878      	bhi.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d004      	beq.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d6:	d012      	beq.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80096d8:	e070      	b.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096da:	4b3a      	ldr	r3, [pc, #232]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096e6:	d107      	bne.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 feb5 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096f6:	e3e6      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096fc:	e3e3      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096fe:	4b31      	ldr	r3, [pc, #196]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800970a:	d107      	bne.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800970c:	f107 0318 	add.w	r3, r7, #24
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fbfb 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800971a:	e3d4      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009720:	e3d1      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009722:	4b28      	ldr	r3, [pc, #160]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800972a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800972e:	d107      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009730:	f107 030c 	add.w	r3, r7, #12
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fd3d 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800973e:	e3c2      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009744:	e3bf      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009746:	4b1f      	ldr	r3, [pc, #124]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800974e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009750:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0304 	and.w	r3, r3, #4
 8009758:	2b04      	cmp	r3, #4
 800975a:	d10c      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800975c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009762:	4b18      	ldr	r3, [pc, #96]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	08db      	lsrs	r3, r3, #3
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	4a16      	ldr	r2, [pc, #88]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800976e:	fa22 f303 	lsr.w	r3, r2, r3
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009774:	e01e      	b.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009776:	4b13      	ldr	r3, [pc, #76]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009782:	d106      	bne.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800978a:	d102      	bne.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800978c:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800978e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009790:	e010      	b.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009792:	4b0c      	ldr	r3, [pc, #48]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800979e:	d106      	bne.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80097a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a6:	d102      	bne.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097a8:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ac:	e002      	b.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80097b2:	e388      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097b4:	e387      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097b6:	4b07      	ldr	r3, [pc, #28]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ba:	e384      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097c0:	e381      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097c2:	bf00      	nop
 80097c4:	58024400 	.word	0x58024400
 80097c8:	03d09000 	.word	0x03d09000
 80097cc:	003d0900 	.word	0x003d0900
 80097d0:	02faf080 	.word	0x02faf080
 80097d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80097d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097dc:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80097e0:	430b      	orrs	r3, r1
 80097e2:	f040 809c 	bne.w	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80097e6:	4b9e      	ldr	r3, [pc, #632]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80097ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097f6:	d054      	beq.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097fe:	f200 808b 	bhi.w	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009808:	f000 8083 	beq.w	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009812:	f200 8081 	bhi.w	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800981c:	d02f      	beq.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009824:	d878      	bhi.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	2b00      	cmp	r3, #0
 800982a:	d004      	beq.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009832:	d012      	beq.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009834:	e070      	b.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009836:	4b8a      	ldr	r3, [pc, #552]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800983e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009842:	d107      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009848:	4618      	mov	r0, r3
 800984a:	f000 fe07 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009852:	e338      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009858:	e335      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800985a:	4b81      	ldr	r3, [pc, #516]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009866:	d107      	bne.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009868:	f107 0318 	add.w	r3, r7, #24
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fb4d 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009876:	e326      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800987c:	e323      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800987e:	4b78      	ldr	r3, [pc, #480]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800988a:	d107      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fc8f 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989a:	e314      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098a0:	e311      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098a2:	4b6f      	ldr	r3, [pc, #444]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098ac:	4b6c      	ldr	r3, [pc, #432]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d10c      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80098b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d109      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098be:	4b68      	ldr	r3, [pc, #416]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	08db      	lsrs	r3, r3, #3
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	4a66      	ldr	r2, [pc, #408]	; (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80098ca:	fa22 f303 	lsr.w	r3, r2, r3
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d0:	e01e      	b.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098d2:	4b63      	ldr	r3, [pc, #396]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098de:	d106      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80098e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098e6:	d102      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098e8:	4b5f      	ldr	r3, [pc, #380]	; (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ec:	e010      	b.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098ee:	4b5c      	ldr	r3, [pc, #368]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098fa:	d106      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80098fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009902:	d102      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009904:	4b59      	ldr	r3, [pc, #356]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009908:	e002      	b.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800990e:	e2da      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009910:	e2d9      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009912:	4b57      	ldr	r3, [pc, #348]	; (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009916:	e2d6      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800991c:	e2d3      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800991e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009922:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009926:	430b      	orrs	r3, r1
 8009928:	f040 80a7 	bne.w	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800992c:	4b4c      	ldr	r3, [pc, #304]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800992e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009930:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009934:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800993c:	d055      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009944:	f200 8096 	bhi.w	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800994e:	f000 8084 	beq.w	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009958:	f200 808c 	bhi.w	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009962:	d030      	beq.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800996a:	f200 8083 	bhi.w	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800997a:	d012      	beq.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800997c:	e07a      	b.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800997e:	4b38      	ldr	r3, [pc, #224]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800998a:	d107      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800998c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fd63 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800999a:	e294      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099a0:	e291      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099a2:	4b2f      	ldr	r3, [pc, #188]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099ae:	d107      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b0:	f107 0318 	add.w	r3, r7, #24
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 faa9 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099be:	e282      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099c4:	e27f      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099c6:	4b26      	ldr	r3, [pc, #152]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099d2:	d107      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 fbeb 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099e2:	e270      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099e8:	e26d      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099ea:	4b1d      	ldr	r3, [pc, #116]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80099ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099f4:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d10c      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d109      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a06:	4b16      	ldr	r3, [pc, #88]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	08db      	lsrs	r3, r3, #3
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	4a14      	ldr	r2, [pc, #80]	; (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009a12:	fa22 f303 	lsr.w	r3, r2, r3
 8009a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a18:	e01e      	b.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a1a:	4b11      	ldr	r3, [pc, #68]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a26:	d106      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a2e:	d102      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a30:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a34:	e010      	b.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a36:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a42:	d106      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a4a:	d102      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a4c:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a50:	e002      	b.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a56:	e236      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a58:	e235      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a5e:	e232      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a60:	58024400 	.word	0x58024400
 8009a64:	03d09000 	.word	0x03d09000
 8009a68:	003d0900 	.word	0x003d0900
 8009a6c:	02faf080 	.word	0x02faf080
 8009a70:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a78:	e225      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009a82:	430b      	orrs	r3, r1
 8009a84:	f040 8085 	bne.w	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009a88:	4b9c      	ldr	r3, [pc, #624]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009a90:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a98:	d06b      	beq.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aa0:	d874      	bhi.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009aa8:	d056      	beq.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ab0:	d86c      	bhi.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ab8:	d03b      	beq.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ac0:	d864      	bhi.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ac8:	d021      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad0:	d85c      	bhi.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d004      	beq.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ade:	d004      	beq.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009ae0:	e054      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009ae2:	f7fe fb5f 	bl	80081a4 <HAL_RCC_GetPCLK1Freq>
 8009ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ae8:	e1ed      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aea:	4b84      	ldr	r3, [pc, #528]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009af6:	d107      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af8:	f107 0318 	add.w	r3, r7, #24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fa05 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b06:	e1de      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b0c:	e1db      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b0e:	4b7b      	ldr	r3, [pc, #492]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b1a:	d107      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b1c:	f107 030c 	add.w	r3, r7, #12
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fb47 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b2a:	e1cc      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b30:	e1c9      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b32:	4b72      	ldr	r3, [pc, #456]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0304 	and.w	r3, r3, #4
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	d109      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b3e:	4b6f      	ldr	r3, [pc, #444]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	08db      	lsrs	r3, r3, #3
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	4a6d      	ldr	r2, [pc, #436]	; (8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b50:	e1b9      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b56:	e1b6      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b58:	4b68      	ldr	r3, [pc, #416]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b64:	d102      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009b66:	4b67      	ldr	r3, [pc, #412]	; (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b6a:	e1ac      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b70:	e1a9      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b72:	4b62      	ldr	r3, [pc, #392]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b7e:	d102      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009b80:	4b61      	ldr	r3, [pc, #388]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b84:	e19f      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b8a:	e19c      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b90:	e199      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b96:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009b9a:	430b      	orrs	r3, r1
 8009b9c:	d173      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009b9e:	4b57      	ldr	r3, [pc, #348]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ba6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bae:	d02f      	beq.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb6:	d863      	bhi.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bc4:	d012      	beq.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009bc6:	e05b      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bc8:	4b4c      	ldr	r3, [pc, #304]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bd4:	d107      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd6:	f107 0318 	add.w	r3, r7, #24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f996 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be4:	e16f      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bea:	e16c      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bec:	4b43      	ldr	r3, [pc, #268]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bf8:	d107      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bfa:	f107 030c 	add.w	r3, r7, #12
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fad8 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c08:	e15d      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c0e:	e15a      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c10:	4b3a      	ldr	r3, [pc, #232]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c18:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c1a:	4b38      	ldr	r3, [pc, #224]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d10c      	bne.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d109      	bne.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c2c:	4b33      	ldr	r3, [pc, #204]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	08db      	lsrs	r3, r3, #3
 8009c32:	f003 0303 	and.w	r3, r3, #3
 8009c36:	4a32      	ldr	r2, [pc, #200]	; (8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009c38:	fa22 f303 	lsr.w	r3, r2, r3
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c3e:	e01e      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c40:	4b2e      	ldr	r3, [pc, #184]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c4c:	d106      	bne.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c54:	d102      	bne.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c56:	4b2b      	ldr	r3, [pc, #172]	; (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c5a:	e010      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c5c:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c68:	d106      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c70:	d102      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c72:	4b25      	ldr	r3, [pc, #148]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c76:	e002      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c7c:	e123      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c7e:	e122      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c84:	e11f      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c8a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009c8e:	430b      	orrs	r3, r1
 8009c90:	d13c      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009c92:	4b1a      	ldr	r3, [pc, #104]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ca8:	d012      	beq.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009caa:	e023      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cac:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cb8:	d107      	bne.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fbcc 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc8:	e0fd      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cce:	e0fa      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cdc:	d107      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cde:	f107 0318 	add.w	r3, r7, #24
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 f912 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cec:	e0eb      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cf2:	e0e8      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cf8:	e0e5      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009cfa:	bf00      	nop
 8009cfc:	58024400 	.word	0x58024400
 8009d00:	03d09000 	.word	0x03d09000
 8009d04:	003d0900 	.word	0x003d0900
 8009d08:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d10:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009d14:	430b      	orrs	r3, r1
 8009d16:	f040 8085 	bne.w	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009d1a:	4b6d      	ldr	r3, [pc, #436]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009d22:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d2a:	d06b      	beq.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d32:	d874      	bhi.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3a:	d056      	beq.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d42:	d86c      	bhi.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d4a:	d03b      	beq.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d52:	d864      	bhi.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d5a:	d021      	beq.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d62:	d85c      	bhi.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d70:	d004      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009d72:	e054      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009d74:	f000 f8b4 	bl	8009ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d78:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d7a:	e0a4      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d7c:	4b54      	ldr	r3, [pc, #336]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d88:	d107      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d8a:	f107 0318 	add.w	r3, r7, #24
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f8bc 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d98:	e095      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d9e:	e092      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009da0:	4b4b      	ldr	r3, [pc, #300]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dac:	d107      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dae:	f107 030c 	add.w	r3, r7, #12
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f9fe 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dbc:	e083      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc2:	e080      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dc4:	4b42      	ldr	r3, [pc, #264]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0304 	and.w	r3, r3, #4
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	d109      	bne.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dd0:	4b3f      	ldr	r3, [pc, #252]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	08db      	lsrs	r3, r3, #3
 8009dd6:	f003 0303 	and.w	r3, r3, #3
 8009dda:	4a3e      	ldr	r2, [pc, #248]	; (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8009de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009de2:	e070      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de8:	e06d      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009dea:	4b39      	ldr	r3, [pc, #228]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df6:	d102      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009df8:	4b37      	ldr	r3, [pc, #220]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dfc:	e063      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e02:	e060      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e04:	4b32      	ldr	r3, [pc, #200]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e10:	d102      	bne.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009e12:	4b32      	ldr	r3, [pc, #200]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e16:	e056      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e1c:	e053      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e22:	e050      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e28:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	d148      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e30:	4b27      	ldr	r3, [pc, #156]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e40:	d02a      	beq.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e48:	d838      	bhi.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e56:	d00d      	beq.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009e58:	e030      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e5a:	4b1d      	ldr	r3, [pc, #116]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e66:	d102      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009e68:	4b1c      	ldr	r3, [pc, #112]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e6c:	e02b      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e72:	e028      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e74:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e80:	d107      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fae8 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e90:	e019      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e96:	e016      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e98:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ea4:	d107      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ea6:	f107 0318 	add.w	r3, r7, #24
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f82e 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eb4:	e007      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009eba:	e004      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec0:	e001      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3740      	adds	r7, #64	; 0x40
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	03d09000 	.word	0x03d09000
 8009ed8:	003d0900 	.word	0x003d0900
 8009edc:	02faf080 	.word	0x02faf080

08009ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ee4:	f7fe f92e 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	091b      	lsrs	r3, r3, #4
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ef6:	5ccb      	ldrb	r3, [r1, r3]
 8009ef8:	f003 031f 	and.w	r3, r3, #31
 8009efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	58024400 	.word	0x58024400
 8009f08:	0800de5c 	.word	0x0800de5c

08009f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b089      	sub	sp, #36	; 0x24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f14:	4ba1      	ldr	r3, [pc, #644]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009f1e:	4b9f      	ldr	r3, [pc, #636]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	0b1b      	lsrs	r3, r3, #12
 8009f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f2a:	4b9c      	ldr	r3, [pc, #624]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	091b      	lsrs	r3, r3, #4
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009f36:	4b99      	ldr	r3, [pc, #612]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3a:	08db      	lsrs	r3, r3, #3
 8009f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	fb02 f303 	mul.w	r3, r2, r3
 8009f46:	ee07 3a90 	vmov	s15, r3
 8009f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 8111 	beq.w	800a17c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	f000 8083 	beq.w	800a068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	f200 80a1 	bhi.w	800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d056      	beq.n	800a024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009f76:	e099      	b.n	800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f78:	4b88      	ldr	r3, [pc, #544]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d02d      	beq.n	8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f84:	4b85      	ldr	r3, [pc, #532]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	08db      	lsrs	r3, r3, #3
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	4a84      	ldr	r2, [pc, #528]	; (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f90:	fa22 f303 	lsr.w	r3, r2, r3
 8009f94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fae:	4b7b      	ldr	r3, [pc, #492]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fde:	e087      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff2:	4b6a      	ldr	r3, [pc, #424]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a002:	ed97 6a03 	vldr	s12, [r7, #12]
 800a006:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a022:	e065      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a036:	4b59      	ldr	r3, [pc, #356]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a046:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a066:	e043      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a07a:	4b48      	ldr	r3, [pc, #288]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0aa:	e021      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0be:	4b37      	ldr	r3, [pc, #220]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a0f0:	4b2a      	ldr	r3, [pc, #168]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a10a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a116:	ee17 2a90 	vmov	r2, s15
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a11e:	4b1f      	ldr	r3, [pc, #124]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	0c1b      	lsrs	r3, r3, #16
 800a124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a128:	ee07 3a90 	vmov	s15, r3
 800a12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a138:	edd7 6a07 	vldr	s13, [r7, #28]
 800a13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a144:	ee17 2a90 	vmov	r2, s15
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a14c:	4b13      	ldr	r3, [pc, #76]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	0e1b      	lsrs	r3, r3, #24
 800a152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a166:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a172:	ee17 2a90 	vmov	r2, s15
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a17a:	e008      	b.n	800a18e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	609a      	str	r2, [r3, #8]
}
 800a18e:	bf00      	nop
 800a190:	3724      	adds	r7, #36	; 0x24
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	58024400 	.word	0x58024400
 800a1a0:	03d09000 	.word	0x03d09000
 800a1a4:	46000000 	.word	0x46000000
 800a1a8:	4c742400 	.word	0x4c742400
 800a1ac:	4a742400 	.word	0x4a742400
 800a1b0:	4c3ebc20 	.word	0x4c3ebc20

0800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b089      	sub	sp, #36	; 0x24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1bc:	4ba1      	ldr	r3, [pc, #644]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a1c6:	4b9f      	ldr	r3, [pc, #636]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ca:	0d1b      	lsrs	r3, r3, #20
 800a1cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a1d2:	4b9c      	ldr	r3, [pc, #624]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a1de:	4b99      	ldr	r3, [pc, #612]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e2:	08db      	lsrs	r3, r3, #3
 800a1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	fb02 f303 	mul.w	r3, r2, r3
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 8111 	beq.w	800a424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b02      	cmp	r3, #2
 800a206:	f000 8083 	beq.w	800a310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	f200 80a1 	bhi.w	800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d056      	beq.n	800a2cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a21e:	e099      	b.n	800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a220:	4b88      	ldr	r3, [pc, #544]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0320 	and.w	r3, r3, #32
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d02d      	beq.n	800a288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a22c:	4b85      	ldr	r3, [pc, #532]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	08db      	lsrs	r3, r3, #3
 800a232:	f003 0303 	and.w	r3, r3, #3
 800a236:	4a84      	ldr	r2, [pc, #528]	; (800a448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a238:	fa22 f303 	lsr.w	r3, r2, r3
 800a23c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	ee07 3a90 	vmov	s15, r3
 800a244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a256:	4b7b      	ldr	r3, [pc, #492]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a266:	ed97 6a03 	vldr	s12, [r7, #12]
 800a26a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a286:	e087      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a292:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a29a:	4b6a      	ldr	r3, [pc, #424]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2ca:	e065      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2de:	4b59      	ldr	r3, [pc, #356]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e6:	ee07 3a90 	vmov	s15, r3
 800a2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a30e:	e043      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a322:	4b48      	ldr	r3, [pc, #288]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a332:	ed97 6a03 	vldr	s12, [r7, #12]
 800a336:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a352:	e021      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a366:	4b37      	ldr	r3, [pc, #220]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36e:	ee07 3a90 	vmov	s15, r3
 800a372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a376:	ed97 6a03 	vldr	s12, [r7, #12]
 800a37a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a398:	4b2a      	ldr	r3, [pc, #168]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	0a5b      	lsrs	r3, r3, #9
 800a39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3be:	ee17 2a90 	vmov	r2, s15
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a3c6:	4b1f      	ldr	r3, [pc, #124]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	0c1b      	lsrs	r3, r3, #16
 800a3cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ec:	ee17 2a90 	vmov	r2, s15
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a3f4:	4b13      	ldr	r3, [pc, #76]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	0e1b      	lsrs	r3, r3, #24
 800a3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a40a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a41a:	ee17 2a90 	vmov	r2, s15
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a422:	e008      	b.n	800a436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	609a      	str	r2, [r3, #8]
}
 800a436:	bf00      	nop
 800a438:	3724      	adds	r7, #36	; 0x24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	58024400 	.word	0x58024400
 800a448:	03d09000 	.word	0x03d09000
 800a44c:	46000000 	.word	0x46000000
 800a450:	4c742400 	.word	0x4c742400
 800a454:	4a742400 	.word	0x4a742400
 800a458:	4c3ebc20 	.word	0x4c3ebc20

0800a45c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b089      	sub	sp, #36	; 0x24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a464:	4ba0      	ldr	r3, [pc, #640]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a468:	f003 0303 	and.w	r3, r3, #3
 800a46c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a46e:	4b9e      	ldr	r3, [pc, #632]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	091b      	lsrs	r3, r3, #4
 800a474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a478:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a47a:	4b9b      	ldr	r3, [pc, #620]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a484:	4b98      	ldr	r3, [pc, #608]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	08db      	lsrs	r3, r3, #3
 800a48a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	ee07 3a90 	vmov	s15, r3
 800a498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8111 	beq.w	800a6ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	f000 8083 	beq.w	800a5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	f200 80a1 	bhi.w	800a5fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d056      	beq.n	800a572 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a4c4:	e099      	b.n	800a5fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c6:	4b88      	ldr	r3, [pc, #544]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d02d      	beq.n	800a52e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4d2:	4b85      	ldr	r3, [pc, #532]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	08db      	lsrs	r3, r3, #3
 800a4d8:	f003 0303 	and.w	r3, r3, #3
 800a4dc:	4a83      	ldr	r2, [pc, #524]	; (800a6ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a4de:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	ee07 3a90 	vmov	s15, r3
 800a4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fc:	4b7a      	ldr	r3, [pc, #488]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a504:	ee07 3a90 	vmov	s15, r3
 800a508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a510:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a528:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a52c:	e087      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a538:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a53c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a540:	4b69      	ldr	r3, [pc, #420]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a550:	ed97 6a03 	vldr	s12, [r7, #12]
 800a554:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a570:	e065      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a584:	4b58      	ldr	r3, [pc, #352]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a594:	ed97 6a03 	vldr	s12, [r7, #12]
 800a598:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a59c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5b4:	e043      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a5c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c8:	4b47      	ldr	r3, [pc, #284]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5f8:	e021      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	ee07 3a90 	vmov	s15, r3
 800a600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a604:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60c:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a614:	ee07 3a90 	vmov	s15, r3
 800a618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a620:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a638:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a63c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a63e:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	0a5b      	lsrs	r3, r3, #9
 800a644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a648:	ee07 3a90 	vmov	s15, r3
 800a64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a658:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a664:	ee17 2a90 	vmov	r2, s15
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a66c:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a686:	edd7 6a07 	vldr	s13, [r7, #28]
 800a68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a69a:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69e:	0e1b      	lsrs	r3, r3, #24
 800a6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c0:	ee17 2a90 	vmov	r2, s15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a6c8:	e008      	b.n	800a6dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	609a      	str	r2, [r3, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	3724      	adds	r7, #36	; 0x24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	58024400 	.word	0x58024400
 800a6ec:	03d09000 	.word	0x03d09000
 800a6f0:	46000000 	.word	0x46000000
 800a6f4:	4c742400 	.word	0x4c742400
 800a6f8:	4a742400 	.word	0x4a742400
 800a6fc:	4c3ebc20 	.word	0x4c3ebc20

0800a700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a70e:	4b53      	ldr	r3, [pc, #332]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	2b03      	cmp	r3, #3
 800a718:	d101      	bne.n	800a71e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e099      	b.n	800a852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a71e:	4b4f      	ldr	r3, [pc, #316]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a4e      	ldr	r2, [pc, #312]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a72a:	f7f8 f831 	bl	8002790 <HAL_GetTick>
 800a72e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a730:	e008      	b.n	800a744 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a732:	f7f8 f82d 	bl	8002790 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e086      	b.n	800a852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a744:	4b45      	ldr	r3, [pc, #276]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f0      	bne.n	800a732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a750:	4b42      	ldr	r3, [pc, #264]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a754:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	031b      	lsls	r3, r3, #12
 800a75e:	493f      	ldr	r1, [pc, #252]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a760:	4313      	orrs	r3, r2
 800a762:	628b      	str	r3, [r1, #40]	; 0x28
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	3b01      	subs	r3, #1
 800a76a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	3b01      	subs	r3, #1
 800a774:	025b      	lsls	r3, r3, #9
 800a776:	b29b      	uxth	r3, r3
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	3b01      	subs	r3, #1
 800a780:	041b      	lsls	r3, r3, #16
 800a782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	061b      	lsls	r3, r3, #24
 800a790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a794:	4931      	ldr	r1, [pc, #196]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a796:	4313      	orrs	r3, r2
 800a798:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a79a:	4b30      	ldr	r3, [pc, #192]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	492d      	ldr	r1, [pc, #180]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a7ac:	4b2b      	ldr	r3, [pc, #172]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	f023 0220 	bic.w	r2, r3, #32
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	4928      	ldr	r1, [pc, #160]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a7be:	4b27      	ldr	r3, [pc, #156]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a26      	ldr	r2, [pc, #152]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7c4:	f023 0310 	bic.w	r3, r3, #16
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a7ca:	4b24      	ldr	r3, [pc, #144]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7ce:	4b24      	ldr	r3, [pc, #144]	; (800a860 <RCCEx_PLL2_Config+0x160>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	69d2      	ldr	r2, [r2, #28]
 800a7d6:	00d2      	lsls	r2, r2, #3
 800a7d8:	4920      	ldr	r1, [pc, #128]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7de:	4b1f      	ldr	r3, [pc, #124]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e2:	4a1e      	ldr	r2, [pc, #120]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7e4:	f043 0310 	orr.w	r3, r3, #16
 800a7e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7f0:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	4a19      	ldr	r2, [pc, #100]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7fc:	e00f      	b.n	800a81e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d106      	bne.n	800a812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	4a14      	ldr	r2, [pc, #80]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a80a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a80e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a810:	e005      	b.n	800a81e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a812:	4b12      	ldr	r3, [pc, #72]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	4a11      	ldr	r2, [pc, #68]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a81c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a0e      	ldr	r2, [pc, #56]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a82a:	f7f7 ffb1 	bl	8002790 <HAL_GetTick>
 800a82e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a830:	e008      	b.n	800a844 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a832:	f7f7 ffad 	bl	8002790 <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d901      	bls.n	800a844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e006      	b.n	800a852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a844:	4b05      	ldr	r3, [pc, #20]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0f0      	beq.n	800a832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
 800a860:	ffff0007 	.word	0xffff0007

0800a864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a872:	4b53      	ldr	r3, [pc, #332]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d101      	bne.n	800a882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e099      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a882:	4b4f      	ldr	r3, [pc, #316]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a4e      	ldr	r2, [pc, #312]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a88c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a88e:	f7f7 ff7f 	bl	8002790 <HAL_GetTick>
 800a892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a894:	e008      	b.n	800a8a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a896:	f7f7 ff7b 	bl	8002790 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d901      	bls.n	800a8a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e086      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8a8:	4b45      	ldr	r3, [pc, #276]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1f0      	bne.n	800a896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a8b4:	4b42      	ldr	r3, [pc, #264]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	051b      	lsls	r3, r3, #20
 800a8c2:	493f      	ldr	r1, [pc, #252]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	025b      	lsls	r3, r3, #9
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	041b      	lsls	r3, r3, #16
 800a8e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8f8:	4931      	ldr	r1, [pc, #196]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8fe:	4b30      	ldr	r3, [pc, #192]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	492d      	ldr	r1, [pc, #180]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a90c:	4313      	orrs	r3, r2
 800a90e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a910:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	4928      	ldr	r1, [pc, #160]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a91e:	4313      	orrs	r3, r2
 800a920:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a922:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a926:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a92c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a92e:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a932:	4b24      	ldr	r3, [pc, #144]	; (800a9c4 <RCCEx_PLL3_Config+0x160>)
 800a934:	4013      	ands	r3, r2
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	69d2      	ldr	r2, [r2, #28]
 800a93a:	00d2      	lsls	r2, r2, #3
 800a93c:	4920      	ldr	r1, [pc, #128]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a942:	4b1f      	ldr	r3, [pc, #124]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a94c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a954:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	4a19      	ldr	r2, [pc, #100]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a95a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a95e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a960:	e00f      	b.n	800a982 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d106      	bne.n	800a976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a96e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a972:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a974:	e005      	b.n	800a982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a976:	4b12      	ldr	r3, [pc, #72]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	4a11      	ldr	r2, [pc, #68]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a97c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a980:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a0e      	ldr	r2, [pc, #56]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a98c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a98e:	f7f7 feff 	bl	8002790 <HAL_GetTick>
 800a992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a994:	e008      	b.n	800a9a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a996:	f7f7 fefb 	bl	8002790 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d901      	bls.n	800a9a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e006      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0f0      	beq.n	800a996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	ffff0007 	.word	0xffff0007

0800a9c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e10f      	b.n	800abfa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a87      	ldr	r2, [pc, #540]	; (800ac04 <HAL_SPI_Init+0x23c>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d00f      	beq.n	800aa0a <HAL_SPI_Init+0x42>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a86      	ldr	r2, [pc, #536]	; (800ac08 <HAL_SPI_Init+0x240>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d00a      	beq.n	800aa0a <HAL_SPI_Init+0x42>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a84      	ldr	r2, [pc, #528]	; (800ac0c <HAL_SPI_Init+0x244>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d005      	beq.n	800aa0a <HAL_SPI_Init+0x42>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	2b0f      	cmp	r3, #15
 800aa04:	d901      	bls.n	800aa0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e0f7      	b.n	800abfa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f900 	bl	800ac10 <SPI_GetPacketSize>
 800aa10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a7b      	ldr	r2, [pc, #492]	; (800ac04 <HAL_SPI_Init+0x23c>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d00c      	beq.n	800aa36 <HAL_SPI_Init+0x6e>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a79      	ldr	r2, [pc, #484]	; (800ac08 <HAL_SPI_Init+0x240>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d007      	beq.n	800aa36 <HAL_SPI_Init+0x6e>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a78      	ldr	r2, [pc, #480]	; (800ac0c <HAL_SPI_Init+0x244>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d002      	beq.n	800aa36 <HAL_SPI_Init+0x6e>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b08      	cmp	r3, #8
 800aa34:	d811      	bhi.n	800aa5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa3a:	4a72      	ldr	r2, [pc, #456]	; (800ac04 <HAL_SPI_Init+0x23c>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d009      	beq.n	800aa54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a70      	ldr	r2, [pc, #448]	; (800ac08 <HAL_SPI_Init+0x240>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d004      	beq.n	800aa54 <HAL_SPI_Init+0x8c>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a6f      	ldr	r2, [pc, #444]	; (800ac0c <HAL_SPI_Init+0x244>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d104      	bne.n	800aa5e <HAL_SPI_Init+0x96>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b10      	cmp	r3, #16
 800aa58:	d901      	bls.n	800aa5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e0cd      	b.n	800abfa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d106      	bne.n	800aa78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7f7 f8dc 	bl	8001c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 0201 	bic.w	r2, r2, #1
 800aa8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800aa9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaa4:	d119      	bne.n	800aada <HAL_SPI_Init+0x112>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaae:	d103      	bne.n	800aab8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d008      	beq.n	800aaca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10c      	bne.n	800aada <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aac8:	d107      	bne.n	800aada <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aad8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00f      	beq.n	800ab06 <HAL_SPI_Init+0x13e>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	2b06      	cmp	r3, #6
 800aaec:	d90b      	bls.n	800ab06 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	430a      	orrs	r2, r1
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e007      	b.n	800ab16 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	69da      	ldr	r2, [r3, #28]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab28:	ea42 0103 	orr.w	r1, r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	431a      	orrs	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab76:	ea42 0103 	orr.w	r1, r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d113      	bne.n	800abb6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aba0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 0201 	bic.w	r2, r2, #1
 800abc4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00a      	beq.n	800abe8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	40013000 	.word	0x40013000
 800ac08:	40003800 	.word	0x40003800
 800ac0c:	40003c00 	.word	0x40003c00

0800ac10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1c:	095b      	lsrs	r3, r3, #5
 800ac1e:	3301      	adds	r3, #1
 800ac20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	3307      	adds	r3, #7
 800ac2e:	08db      	lsrs	r3, r3, #3
 800ac30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e049      	b.n	800acec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d106      	bne.n	800ac72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7f7 f89b 	bl	8001da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2202      	movs	r2, #2
 800ac76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3304      	adds	r3, #4
 800ac82:	4619      	mov	r1, r3
 800ac84:	4610      	mov	r0, r2
 800ac86:	f000 fdab 	bl	800b7e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d109      	bne.n	800ad20 <HAL_TIM_PWM_Start_DMA+0x2c>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	bf0c      	ite	eq
 800ad18:	2301      	moveq	r3, #1
 800ad1a:	2300      	movne	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	e03c      	b.n	800ad9a <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d109      	bne.n	800ad3a <HAL_TIM_PWM_Start_DMA+0x46>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	bf0c      	ite	eq
 800ad32:	2301      	moveq	r3, #1
 800ad34:	2300      	movne	r3, #0
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	e02f      	b.n	800ad9a <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b08      	cmp	r3, #8
 800ad3e:	d109      	bne.n	800ad54 <HAL_TIM_PWM_Start_DMA+0x60>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	bf0c      	ite	eq
 800ad4c:	2301      	moveq	r3, #1
 800ad4e:	2300      	movne	r3, #0
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	e022      	b.n	800ad9a <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b0c      	cmp	r3, #12
 800ad58:	d109      	bne.n	800ad6e <HAL_TIM_PWM_Start_DMA+0x7a>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	bf0c      	ite	eq
 800ad66:	2301      	moveq	r3, #1
 800ad68:	2300      	movne	r3, #0
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	e015      	b.n	800ad9a <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b10      	cmp	r3, #16
 800ad72:	d109      	bne.n	800ad88 <HAL_TIM_PWM_Start_DMA+0x94>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	bf0c      	ite	eq
 800ad80:	2301      	moveq	r3, #1
 800ad82:	2300      	movne	r3, #0
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	e008      	b.n	800ad9a <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	bf0c      	ite	eq
 800ad94:	2301      	moveq	r3, #1
 800ad96:	2300      	movne	r3, #0
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e1ba      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d109      	bne.n	800adbc <HAL_TIM_PWM_Start_DMA+0xc8>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	bf0c      	ite	eq
 800adb4:	2301      	moveq	r3, #1
 800adb6:	2300      	movne	r3, #0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	e03c      	b.n	800ae36 <HAL_TIM_PWM_Start_DMA+0x142>
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b04      	cmp	r3, #4
 800adc0:	d109      	bne.n	800add6 <HAL_TIM_PWM_Start_DMA+0xe2>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b01      	cmp	r3, #1
 800adcc:	bf0c      	ite	eq
 800adce:	2301      	moveq	r3, #1
 800add0:	2300      	movne	r3, #0
 800add2:	b2db      	uxtb	r3, r3
 800add4:	e02f      	b.n	800ae36 <HAL_TIM_PWM_Start_DMA+0x142>
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b08      	cmp	r3, #8
 800adda:	d109      	bne.n	800adf0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	bf0c      	ite	eq
 800ade8:	2301      	moveq	r3, #1
 800adea:	2300      	movne	r3, #0
 800adec:	b2db      	uxtb	r3, r3
 800adee:	e022      	b.n	800ae36 <HAL_TIM_PWM_Start_DMA+0x142>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b0c      	cmp	r3, #12
 800adf4:	d109      	bne.n	800ae0a <HAL_TIM_PWM_Start_DMA+0x116>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	bf0c      	ite	eq
 800ae02:	2301      	moveq	r3, #1
 800ae04:	2300      	movne	r3, #0
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	e015      	b.n	800ae36 <HAL_TIM_PWM_Start_DMA+0x142>
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b10      	cmp	r3, #16
 800ae0e:	d109      	bne.n	800ae24 <HAL_TIM_PWM_Start_DMA+0x130>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2301      	moveq	r3, #1
 800ae1e:	2300      	movne	r3, #0
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	e008      	b.n	800ae36 <HAL_TIM_PWM_Start_DMA+0x142>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	bf0c      	ite	eq
 800ae30:	2301      	moveq	r3, #1
 800ae32:	2300      	movne	r3, #0
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d034      	beq.n	800aea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <HAL_TIM_PWM_Start_DMA+0x152>
 800ae40:	887b      	ldrh	r3, [r7, #2]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e166      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <HAL_TIM_PWM_Start_DMA+0x166>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2202      	movs	r2, #2
 800ae54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae58:	e026      	b.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d104      	bne.n	800ae6a <HAL_TIM_PWM_Start_DMA+0x176>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae68:	e01e      	b.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d104      	bne.n	800ae7a <HAL_TIM_PWM_Start_DMA+0x186>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2202      	movs	r2, #2
 800ae74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae78:	e016      	b.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b0c      	cmp	r3, #12
 800ae7e:	d104      	bne.n	800ae8a <HAL_TIM_PWM_Start_DMA+0x196>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae88:	e00e      	b.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b10      	cmp	r3, #16
 800ae8e:	d104      	bne.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2202      	movs	r2, #2
 800ae94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae98:	e006      	b.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aea2:	e001      	b.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e137      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b0c      	cmp	r3, #12
 800aeac:	f200 80ae 	bhi.w	800b00c <HAL_TIM_PWM_Start_DMA+0x318>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800aeed 	.word	0x0800aeed
 800aebc:	0800b00d 	.word	0x0800b00d
 800aec0:	0800b00d 	.word	0x0800b00d
 800aec4:	0800b00d 	.word	0x0800b00d
 800aec8:	0800af35 	.word	0x0800af35
 800aecc:	0800b00d 	.word	0x0800b00d
 800aed0:	0800b00d 	.word	0x0800b00d
 800aed4:	0800b00d 	.word	0x0800b00d
 800aed8:	0800af7d 	.word	0x0800af7d
 800aedc:	0800b00d 	.word	0x0800b00d
 800aee0:	0800b00d 	.word	0x0800b00d
 800aee4:	0800b00d 	.word	0x0800b00d
 800aee8:	0800afc5 	.word	0x0800afc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	4a8b      	ldr	r2, [pc, #556]	; (800b120 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aef2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef8:	4a8a      	ldr	r2, [pc, #552]	; (800b124 <HAL_TIM_PWM_Start_DMA+0x430>)
 800aefa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	4a89      	ldr	r2, [pc, #548]	; (800b128 <HAL_TIM_PWM_Start_DMA+0x434>)
 800af02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800af08:	6879      	ldr	r1, [r7, #4]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3334      	adds	r3, #52	; 0x34
 800af10:	461a      	mov	r2, r3
 800af12:	887b      	ldrh	r3, [r7, #2]
 800af14:	f7f9 fc46 	bl	80047a4 <HAL_DMA_Start_IT>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	e0fa      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68da      	ldr	r2, [r3, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af30:	60da      	str	r2, [r3, #12]
      break;
 800af32:	e06e      	b.n	800b012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af38:	4a79      	ldr	r2, [pc, #484]	; (800b120 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800af3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af40:	4a78      	ldr	r2, [pc, #480]	; (800b124 <HAL_TIM_PWM_Start_DMA+0x430>)
 800af42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af48:	4a77      	ldr	r2, [pc, #476]	; (800b128 <HAL_TIM_PWM_Start_DMA+0x434>)
 800af4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3338      	adds	r3, #56	; 0x38
 800af58:	461a      	mov	r2, r3
 800af5a:	887b      	ldrh	r3, [r7, #2]
 800af5c:	f7f9 fc22 	bl	80047a4 <HAL_DMA_Start_IT>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e0d6      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68da      	ldr	r2, [r3, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af78:	60da      	str	r2, [r3, #12]
      break;
 800af7a:	e04a      	b.n	800b012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	4a67      	ldr	r2, [pc, #412]	; (800b120 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800af82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	4a66      	ldr	r2, [pc, #408]	; (800b124 <HAL_TIM_PWM_Start_DMA+0x430>)
 800af8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	4a65      	ldr	r2, [pc, #404]	; (800b128 <HAL_TIM_PWM_Start_DMA+0x434>)
 800af92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800af98:	6879      	ldr	r1, [r7, #4]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	333c      	adds	r3, #60	; 0x3c
 800afa0:	461a      	mov	r2, r3
 800afa2:	887b      	ldrh	r3, [r7, #2]
 800afa4:	f7f9 fbfe 	bl	80047a4 <HAL_DMA_Start_IT>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e0b2      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afc0:	60da      	str	r2, [r3, #12]
      break;
 800afc2:	e026      	b.n	800b012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc8:	4a55      	ldr	r2, [pc, #340]	; (800b120 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800afca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd0:	4a54      	ldr	r2, [pc, #336]	; (800b124 <HAL_TIM_PWM_Start_DMA+0x430>)
 800afd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd8:	4a53      	ldr	r2, [pc, #332]	; (800b128 <HAL_TIM_PWM_Start_DMA+0x434>)
 800afda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800afe0:	6879      	ldr	r1, [r7, #4]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3340      	adds	r3, #64	; 0x40
 800afe8:	461a      	mov	r2, r3
 800afea:	887b      	ldrh	r3, [r7, #2]
 800afec:	f7f9 fbda 	bl	80047a4 <HAL_DMA_Start_IT>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e08e      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68da      	ldr	r2, [r3, #12]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b008:	60da      	str	r2, [r3, #12]
      break;
 800b00a:	e002      	b.n	800b012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	75fb      	strb	r3, [r7, #23]
      break;
 800b010:	bf00      	nop
  }

  if (status == HAL_OK)
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d17e      	bne.n	800b116 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2201      	movs	r2, #1
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	4618      	mov	r0, r3
 800b022:	f000 ff59 	bl	800bed8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a40      	ldr	r2, [pc, #256]	; (800b12c <HAL_TIM_PWM_Start_DMA+0x438>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d013      	beq.n	800b058 <HAL_TIM_PWM_Start_DMA+0x364>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a3e      	ldr	r2, [pc, #248]	; (800b130 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d00e      	beq.n	800b058 <HAL_TIM_PWM_Start_DMA+0x364>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a3d      	ldr	r2, [pc, #244]	; (800b134 <HAL_TIM_PWM_Start_DMA+0x440>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d009      	beq.n	800b058 <HAL_TIM_PWM_Start_DMA+0x364>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a3b      	ldr	r2, [pc, #236]	; (800b138 <HAL_TIM_PWM_Start_DMA+0x444>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_TIM_PWM_Start_DMA+0x364>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a3a      	ldr	r2, [pc, #232]	; (800b13c <HAL_TIM_PWM_Start_DMA+0x448>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d101      	bne.n	800b05c <HAL_TIM_PWM_Start_DMA+0x368>
 800b058:	2301      	movs	r3, #1
 800b05a:	e000      	b.n	800b05e <HAL_TIM_PWM_Start_DMA+0x36a>
 800b05c:	2300      	movs	r3, #0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d007      	beq.n	800b072 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b070:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a2d      	ldr	r2, [pc, #180]	; (800b12c <HAL_TIM_PWM_Start_DMA+0x438>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d02c      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b084:	d027      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a2d      	ldr	r2, [pc, #180]	; (800b140 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d022      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a2b      	ldr	r2, [pc, #172]	; (800b144 <HAL_TIM_PWM_Start_DMA+0x450>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d01d      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a2a      	ldr	r2, [pc, #168]	; (800b148 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d018      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a21      	ldr	r2, [pc, #132]	; (800b130 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d013      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a26      	ldr	r2, [pc, #152]	; (800b14c <HAL_TIM_PWM_Start_DMA+0x458>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d00e      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a1d      	ldr	r2, [pc, #116]	; (800b134 <HAL_TIM_PWM_Start_DMA+0x440>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d009      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a22      	ldr	r2, [pc, #136]	; (800b150 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d004      	beq.n	800b0d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a20      	ldr	r2, [pc, #128]	; (800b154 <HAL_TIM_PWM_Start_DMA+0x460>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d115      	bne.n	800b102 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	689a      	ldr	r2, [r3, #8]
 800b0dc:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <HAL_TIM_PWM_Start_DMA+0x464>)
 800b0de:	4013      	ands	r3, r2
 800b0e0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	2b06      	cmp	r3, #6
 800b0e6:	d015      	beq.n	800b114 <HAL_TIM_PWM_Start_DMA+0x420>
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0ee:	d011      	beq.n	800b114 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0201 	orr.w	r2, r2, #1
 800b0fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b100:	e008      	b.n	800b114 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f042 0201 	orr.w	r2, r2, #1
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	e000      	b.n	800b116 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b114:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b116:	7dfb      	ldrb	r3, [r7, #23]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	0800b6cf 	.word	0x0800b6cf
 800b124:	0800b777 	.word	0x0800b777
 800b128:	0800b63d 	.word	0x0800b63d
 800b12c:	40010000 	.word	0x40010000
 800b130:	40010400 	.word	0x40010400
 800b134:	40014000 	.word	0x40014000
 800b138:	40014400 	.word	0x40014400
 800b13c:	40014800 	.word	0x40014800
 800b140:	40000400 	.word	0x40000400
 800b144:	40000800 	.word	0x40000800
 800b148:	40000c00 	.word	0x40000c00
 800b14c:	40001800 	.word	0x40001800
 800b150:	4000e000 	.word	0x4000e000
 800b154:	4000e400 	.word	0x4000e400
 800b158:	00010007 	.word	0x00010007

0800b15c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d122      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0302 	and.w	r3, r3, #2
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d11b      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0202 	mvn.w	r2, #2
 800b188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2201      	movs	r2, #1
 800b18e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa24 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b1a4:	e005      	b.n	800b1b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa16 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7f5 fbe9 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f003 0304 	and.w	r3, r3, #4
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	d122      	bne.n	800b20c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b04      	cmp	r3, #4
 800b1d2:	d11b      	bne.n	800b20c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0204 	mvn.w	r2, #4
 800b1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9fa 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b1f8:	e005      	b.n	800b206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f9ec 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7f5 fbbf 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f003 0308 	and.w	r3, r3, #8
 800b216:	2b08      	cmp	r3, #8
 800b218:	d122      	bne.n	800b260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f003 0308 	and.w	r3, r3, #8
 800b224:	2b08      	cmp	r3, #8
 800b226:	d11b      	bne.n	800b260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0208 	mvn.w	r2, #8
 800b230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2204      	movs	r2, #4
 800b236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	f003 0303 	and.w	r3, r3, #3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f9d0 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b24c:	e005      	b.n	800b25a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f9c2 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7f5 fb95 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	f003 0310 	and.w	r3, r3, #16
 800b26a:	2b10      	cmp	r3, #16
 800b26c:	d122      	bne.n	800b2b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f003 0310 	and.w	r3, r3, #16
 800b278:	2b10      	cmp	r3, #16
 800b27a:	d11b      	bne.n	800b2b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f06f 0210 	mvn.w	r2, #16
 800b284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2208      	movs	r2, #8
 800b28a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f9a6 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b2a0:	e005      	b.n	800b2ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f998 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7f5 fb6b 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d10e      	bne.n	800b2e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d107      	bne.n	800b2e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f06f 0201 	mvn.w	r2, #1
 800b2d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f972 	bl	800b5c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ea:	2b80      	cmp	r3, #128	; 0x80
 800b2ec:	d10e      	bne.n	800b30c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f8:	2b80      	cmp	r3, #128	; 0x80
 800b2fa:	d107      	bne.n	800b30c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 feb2 	bl	800c070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b31a:	d10e      	bne.n	800b33a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b326:	2b80      	cmp	r3, #128	; 0x80
 800b328:	d107      	bne.n	800b33a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fea5 	bl	800c084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b344:	2b40      	cmp	r3, #64	; 0x40
 800b346:	d10e      	bne.n	800b366 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b352:	2b40      	cmp	r3, #64	; 0x40
 800b354:	d107      	bne.n	800b366 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b35e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f957 	bl	800b614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	f003 0320 	and.w	r3, r3, #32
 800b370:	2b20      	cmp	r3, #32
 800b372:	d10e      	bne.n	800b392 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b20      	cmp	r3, #32
 800b380:	d107      	bne.n	800b392 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f06f 0220 	mvn.w	r2, #32
 800b38a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fe65 	bl	800c05c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b392:	bf00      	nop
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
	...

0800b39c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d101      	bne.n	800b3ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	e0ff      	b.n	800b5ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b14      	cmp	r3, #20
 800b3c6:	f200 80f0 	bhi.w	800b5aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b3ca:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d0:	0800b425 	.word	0x0800b425
 800b3d4:	0800b5ab 	.word	0x0800b5ab
 800b3d8:	0800b5ab 	.word	0x0800b5ab
 800b3dc:	0800b5ab 	.word	0x0800b5ab
 800b3e0:	0800b465 	.word	0x0800b465
 800b3e4:	0800b5ab 	.word	0x0800b5ab
 800b3e8:	0800b5ab 	.word	0x0800b5ab
 800b3ec:	0800b5ab 	.word	0x0800b5ab
 800b3f0:	0800b4a7 	.word	0x0800b4a7
 800b3f4:	0800b5ab 	.word	0x0800b5ab
 800b3f8:	0800b5ab 	.word	0x0800b5ab
 800b3fc:	0800b5ab 	.word	0x0800b5ab
 800b400:	0800b4e7 	.word	0x0800b4e7
 800b404:	0800b5ab 	.word	0x0800b5ab
 800b408:	0800b5ab 	.word	0x0800b5ab
 800b40c:	0800b5ab 	.word	0x0800b5ab
 800b410:	0800b529 	.word	0x0800b529
 800b414:	0800b5ab 	.word	0x0800b5ab
 800b418:	0800b5ab 	.word	0x0800b5ab
 800b41c:	0800b5ab 	.word	0x0800b5ab
 800b420:	0800b569 	.word	0x0800b569
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68b9      	ldr	r1, [r7, #8]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 fa7e 	bl	800b92c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	699a      	ldr	r2, [r3, #24]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0208 	orr.w	r2, r2, #8
 800b43e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0204 	bic.w	r2, r2, #4
 800b44e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6999      	ldr	r1, [r3, #24]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	691a      	ldr	r2, [r3, #16]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	430a      	orrs	r2, r1
 800b460:	619a      	str	r2, [r3, #24]
      break;
 800b462:	e0a5      	b.n	800b5b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68b9      	ldr	r1, [r7, #8]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 faee 	bl	800ba4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699a      	ldr	r2, [r3, #24]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b47e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699a      	ldr	r2, [r3, #24]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b48e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6999      	ldr	r1, [r3, #24]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	021a      	lsls	r2, r3, #8
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	619a      	str	r2, [r3, #24]
      break;
 800b4a4:	e084      	b.n	800b5b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68b9      	ldr	r1, [r7, #8]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 fb57 	bl	800bb60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	69da      	ldr	r2, [r3, #28]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f042 0208 	orr.w	r2, r2, #8
 800b4c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69da      	ldr	r2, [r3, #28]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f022 0204 	bic.w	r2, r2, #4
 800b4d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69d9      	ldr	r1, [r3, #28]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	61da      	str	r2, [r3, #28]
      break;
 800b4e4:	e064      	b.n	800b5b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68b9      	ldr	r1, [r7, #8]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fbbf 	bl	800bc70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	69da      	ldr	r2, [r3, #28]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	69da      	ldr	r2, [r3, #28]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	69d9      	ldr	r1, [r3, #28]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	021a      	lsls	r2, r3, #8
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	61da      	str	r2, [r3, #28]
      break;
 800b526:	e043      	b.n	800b5b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fc08 	bl	800bd44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f042 0208 	orr.w	r2, r2, #8
 800b542:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f022 0204 	bic.w	r2, r2, #4
 800b552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	691a      	ldr	r2, [r3, #16]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	430a      	orrs	r2, r1
 800b564:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b566:	e023      	b.n	800b5b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fc4c 	bl	800be0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	021a      	lsls	r2, r3, #8
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5a8:	e002      	b.n	800b5b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop

0800b5c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b648:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d107      	bne.n	800b664 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2201      	movs	r2, #1
 800b658:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b662:	e02a      	b.n	800b6ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d107      	bne.n	800b67e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2202      	movs	r2, #2
 800b672:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b67c:	e01d      	b.n	800b6ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d107      	bne.n	800b698 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2204      	movs	r2, #4
 800b68c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b696:	e010      	b.n	800b6ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d107      	bne.n	800b6b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2208      	movs	r2, #8
 800b6a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6b0:	e003      	b.n	800b6ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff ffb4 	bl	800b628 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	771a      	strb	r2, [r3, #28]
}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d10b      	bne.n	800b6fe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d136      	bne.n	800b762 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6fc:	e031      	b.n	800b762 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	429a      	cmp	r2, r3
 800b706:	d10b      	bne.n	800b720 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2202      	movs	r2, #2
 800b70c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d125      	bne.n	800b762 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b71e:	e020      	b.n	800b762 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	429a      	cmp	r2, r3
 800b728:	d10b      	bne.n	800b742 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2204      	movs	r2, #4
 800b72e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	69db      	ldr	r3, [r3, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d114      	bne.n	800b762 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b740:	e00f      	b.n	800b762 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d10a      	bne.n	800b762 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2208      	movs	r2, #8
 800b750:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	69db      	ldr	r3, [r3, #28]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d103      	bne.n	800b762 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7f5 f90e 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	771a      	strb	r2, [r3, #28]
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b782:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d103      	bne.n	800b796 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2201      	movs	r2, #1
 800b792:	771a      	strb	r2, [r3, #28]
 800b794:	e019      	b.n	800b7ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d103      	bne.n	800b7a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	771a      	strb	r2, [r3, #28]
 800b7a6:	e010      	b.n	800b7ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d103      	bne.n	800b7ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	771a      	strb	r2, [r3, #28]
 800b7b8:	e007      	b.n	800b7ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d102      	bne.n	800b7ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2208      	movs	r2, #8
 800b7c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff ff18 	bl	800b600 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	771a      	strb	r2, [r3, #28]
}
 800b7d6:	bf00      	nop
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a44      	ldr	r2, [pc, #272]	; (800b904 <TIM_Base_SetConfig+0x124>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d013      	beq.n	800b820 <TIM_Base_SetConfig+0x40>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7fe:	d00f      	beq.n	800b820 <TIM_Base_SetConfig+0x40>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a41      	ldr	r2, [pc, #260]	; (800b908 <TIM_Base_SetConfig+0x128>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d00b      	beq.n	800b820 <TIM_Base_SetConfig+0x40>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a40      	ldr	r2, [pc, #256]	; (800b90c <TIM_Base_SetConfig+0x12c>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d007      	beq.n	800b820 <TIM_Base_SetConfig+0x40>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a3f      	ldr	r2, [pc, #252]	; (800b910 <TIM_Base_SetConfig+0x130>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d003      	beq.n	800b820 <TIM_Base_SetConfig+0x40>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a3e      	ldr	r2, [pc, #248]	; (800b914 <TIM_Base_SetConfig+0x134>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d108      	bne.n	800b832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a33      	ldr	r2, [pc, #204]	; (800b904 <TIM_Base_SetConfig+0x124>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d027      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b840:	d023      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a30      	ldr	r2, [pc, #192]	; (800b908 <TIM_Base_SetConfig+0x128>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d01f      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a2f      	ldr	r2, [pc, #188]	; (800b90c <TIM_Base_SetConfig+0x12c>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d01b      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a2e      	ldr	r2, [pc, #184]	; (800b910 <TIM_Base_SetConfig+0x130>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d017      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a2d      	ldr	r2, [pc, #180]	; (800b914 <TIM_Base_SetConfig+0x134>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d013      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a2c      	ldr	r2, [pc, #176]	; (800b918 <TIM_Base_SetConfig+0x138>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00f      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a2b      	ldr	r2, [pc, #172]	; (800b91c <TIM_Base_SetConfig+0x13c>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d00b      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a2a      	ldr	r2, [pc, #168]	; (800b920 <TIM_Base_SetConfig+0x140>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d007      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a29      	ldr	r2, [pc, #164]	; (800b924 <TIM_Base_SetConfig+0x144>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d003      	beq.n	800b88a <TIM_Base_SetConfig+0xaa>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a28      	ldr	r2, [pc, #160]	; (800b928 <TIM_Base_SetConfig+0x148>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d108      	bne.n	800b89c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689a      	ldr	r2, [r3, #8]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a10      	ldr	r2, [pc, #64]	; (800b904 <TIM_Base_SetConfig+0x124>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00f      	beq.n	800b8e8 <TIM_Base_SetConfig+0x108>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a12      	ldr	r2, [pc, #72]	; (800b914 <TIM_Base_SetConfig+0x134>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d00b      	beq.n	800b8e8 <TIM_Base_SetConfig+0x108>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a11      	ldr	r2, [pc, #68]	; (800b918 <TIM_Base_SetConfig+0x138>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d007      	beq.n	800b8e8 <TIM_Base_SetConfig+0x108>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a10      	ldr	r2, [pc, #64]	; (800b91c <TIM_Base_SetConfig+0x13c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d003      	beq.n	800b8e8 <TIM_Base_SetConfig+0x108>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a0f      	ldr	r2, [pc, #60]	; (800b920 <TIM_Base_SetConfig+0x140>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d103      	bne.n	800b8f0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	691a      	ldr	r2, [r3, #16]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	615a      	str	r2, [r3, #20]
}
 800b8f6:	bf00      	nop
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	40010000 	.word	0x40010000
 800b908:	40000400 	.word	0x40000400
 800b90c:	40000800 	.word	0x40000800
 800b910:	40000c00 	.word	0x40000c00
 800b914:	40010400 	.word	0x40010400
 800b918:	40014000 	.word	0x40014000
 800b91c:	40014400 	.word	0x40014400
 800b920:	40014800 	.word	0x40014800
 800b924:	4000e000 	.word	0x4000e000
 800b928:	4000e400 	.word	0x4000e400

0800b92c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	f023 0201 	bic.w	r2, r3, #1
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	4b37      	ldr	r3, [pc, #220]	; (800ba34 <TIM_OC1_SetConfig+0x108>)
 800b958:	4013      	ands	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f023 0303 	bic.w	r3, r3, #3
 800b962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f023 0302 	bic.w	r3, r3, #2
 800b974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a2d      	ldr	r2, [pc, #180]	; (800ba38 <TIM_OC1_SetConfig+0x10c>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d00f      	beq.n	800b9a8 <TIM_OC1_SetConfig+0x7c>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a2c      	ldr	r2, [pc, #176]	; (800ba3c <TIM_OC1_SetConfig+0x110>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d00b      	beq.n	800b9a8 <TIM_OC1_SetConfig+0x7c>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a2b      	ldr	r2, [pc, #172]	; (800ba40 <TIM_OC1_SetConfig+0x114>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d007      	beq.n	800b9a8 <TIM_OC1_SetConfig+0x7c>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a2a      	ldr	r2, [pc, #168]	; (800ba44 <TIM_OC1_SetConfig+0x118>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d003      	beq.n	800b9a8 <TIM_OC1_SetConfig+0x7c>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a29      	ldr	r2, [pc, #164]	; (800ba48 <TIM_OC1_SetConfig+0x11c>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d10c      	bne.n	800b9c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f023 0308 	bic.w	r3, r3, #8
 800b9ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f023 0304 	bic.w	r3, r3, #4
 800b9c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a1c      	ldr	r2, [pc, #112]	; (800ba38 <TIM_OC1_SetConfig+0x10c>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00f      	beq.n	800b9ea <TIM_OC1_SetConfig+0xbe>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a1b      	ldr	r2, [pc, #108]	; (800ba3c <TIM_OC1_SetConfig+0x110>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d00b      	beq.n	800b9ea <TIM_OC1_SetConfig+0xbe>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a1a      	ldr	r2, [pc, #104]	; (800ba40 <TIM_OC1_SetConfig+0x114>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d007      	beq.n	800b9ea <TIM_OC1_SetConfig+0xbe>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a19      	ldr	r2, [pc, #100]	; (800ba44 <TIM_OC1_SetConfig+0x118>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d003      	beq.n	800b9ea <TIM_OC1_SetConfig+0xbe>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a18      	ldr	r2, [pc, #96]	; (800ba48 <TIM_OC1_SetConfig+0x11c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d111      	bne.n	800ba0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	621a      	str	r2, [r3, #32]
}
 800ba28:	bf00      	nop
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	fffeff8f 	.word	0xfffeff8f
 800ba38:	40010000 	.word	0x40010000
 800ba3c:	40010400 	.word	0x40010400
 800ba40:	40014000 	.word	0x40014000
 800ba44:	40014400 	.word	0x40014400
 800ba48:	40014800 	.word	0x40014800

0800ba4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	f023 0210 	bic.w	r2, r3, #16
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	699b      	ldr	r3, [r3, #24]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4b34      	ldr	r3, [pc, #208]	; (800bb48 <TIM_OC2_SetConfig+0xfc>)
 800ba78:	4013      	ands	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	021b      	lsls	r3, r3, #8
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f023 0320 	bic.w	r3, r3, #32
 800ba96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	011b      	lsls	r3, r3, #4
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a29      	ldr	r2, [pc, #164]	; (800bb4c <TIM_OC2_SetConfig+0x100>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d003      	beq.n	800bab4 <TIM_OC2_SetConfig+0x68>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a28      	ldr	r2, [pc, #160]	; (800bb50 <TIM_OC2_SetConfig+0x104>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d10d      	bne.n	800bad0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	011b      	lsls	r3, r3, #4
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a1e      	ldr	r2, [pc, #120]	; (800bb4c <TIM_OC2_SetConfig+0x100>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d00f      	beq.n	800baf8 <TIM_OC2_SetConfig+0xac>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a1d      	ldr	r2, [pc, #116]	; (800bb50 <TIM_OC2_SetConfig+0x104>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d00b      	beq.n	800baf8 <TIM_OC2_SetConfig+0xac>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a1c      	ldr	r2, [pc, #112]	; (800bb54 <TIM_OC2_SetConfig+0x108>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d007      	beq.n	800baf8 <TIM_OC2_SetConfig+0xac>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a1b      	ldr	r2, [pc, #108]	; (800bb58 <TIM_OC2_SetConfig+0x10c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d003      	beq.n	800baf8 <TIM_OC2_SetConfig+0xac>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a1a      	ldr	r2, [pc, #104]	; (800bb5c <TIM_OC2_SetConfig+0x110>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d113      	bne.n	800bb20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bafe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	621a      	str	r2, [r3, #32]
}
 800bb3a:	bf00      	nop
 800bb3c:	371c      	adds	r7, #28
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	feff8fff 	.word	0xfeff8fff
 800bb4c:	40010000 	.word	0x40010000
 800bb50:	40010400 	.word	0x40010400
 800bb54:	40014000 	.word	0x40014000
 800bb58:	40014400 	.word	0x40014400
 800bb5c:	40014800 	.word	0x40014800

0800bb60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4b33      	ldr	r3, [pc, #204]	; (800bc58 <TIM_OC3_SetConfig+0xf8>)
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f023 0303 	bic.w	r3, r3, #3
 800bb96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	021b      	lsls	r3, r3, #8
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a28      	ldr	r2, [pc, #160]	; (800bc5c <TIM_OC3_SetConfig+0xfc>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d003      	beq.n	800bbc6 <TIM_OC3_SetConfig+0x66>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a27      	ldr	r2, [pc, #156]	; (800bc60 <TIM_OC3_SetConfig+0x100>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d10d      	bne.n	800bbe2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	021b      	lsls	r3, r3, #8
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bbe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a1d      	ldr	r2, [pc, #116]	; (800bc5c <TIM_OC3_SetConfig+0xfc>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d00f      	beq.n	800bc0a <TIM_OC3_SetConfig+0xaa>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a1c      	ldr	r2, [pc, #112]	; (800bc60 <TIM_OC3_SetConfig+0x100>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d00b      	beq.n	800bc0a <TIM_OC3_SetConfig+0xaa>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a1b      	ldr	r2, [pc, #108]	; (800bc64 <TIM_OC3_SetConfig+0x104>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d007      	beq.n	800bc0a <TIM_OC3_SetConfig+0xaa>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a1a      	ldr	r2, [pc, #104]	; (800bc68 <TIM_OC3_SetConfig+0x108>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d003      	beq.n	800bc0a <TIM_OC3_SetConfig+0xaa>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a19      	ldr	r2, [pc, #100]	; (800bc6c <TIM_OC3_SetConfig+0x10c>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d113      	bne.n	800bc32 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	621a      	str	r2, [r3, #32]
}
 800bc4c:	bf00      	nop
 800bc4e:	371c      	adds	r7, #28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	fffeff8f 	.word	0xfffeff8f
 800bc5c:	40010000 	.word	0x40010000
 800bc60:	40010400 	.word	0x40010400
 800bc64:	40014000 	.word	0x40014000
 800bc68:	40014400 	.word	0x40014400
 800bc6c:	40014800 	.word	0x40014800

0800bc70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	4b24      	ldr	r3, [pc, #144]	; (800bd2c <TIM_OC4_SetConfig+0xbc>)
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	021b      	lsls	r3, r3, #8
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	031b      	lsls	r3, r3, #12
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a19      	ldr	r2, [pc, #100]	; (800bd30 <TIM_OC4_SetConfig+0xc0>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00f      	beq.n	800bcf0 <TIM_OC4_SetConfig+0x80>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a18      	ldr	r2, [pc, #96]	; (800bd34 <TIM_OC4_SetConfig+0xc4>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00b      	beq.n	800bcf0 <TIM_OC4_SetConfig+0x80>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a17      	ldr	r2, [pc, #92]	; (800bd38 <TIM_OC4_SetConfig+0xc8>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d007      	beq.n	800bcf0 <TIM_OC4_SetConfig+0x80>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a16      	ldr	r2, [pc, #88]	; (800bd3c <TIM_OC4_SetConfig+0xcc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d003      	beq.n	800bcf0 <TIM_OC4_SetConfig+0x80>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a15      	ldr	r2, [pc, #84]	; (800bd40 <TIM_OC4_SetConfig+0xd0>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d109      	bne.n	800bd04 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	019b      	lsls	r3, r3, #6
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	621a      	str	r2, [r3, #32]
}
 800bd1e:	bf00      	nop
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	feff8fff 	.word	0xfeff8fff
 800bd30:	40010000 	.word	0x40010000
 800bd34:	40010400 	.word	0x40010400
 800bd38:	40014000 	.word	0x40014000
 800bd3c:	40014400 	.word	0x40014400
 800bd40:	40014800 	.word	0x40014800

0800bd44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	4b21      	ldr	r3, [pc, #132]	; (800bdf4 <TIM_OC5_SetConfig+0xb0>)
 800bd70:	4013      	ands	r3, r2
 800bd72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bd84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	041b      	lsls	r3, r3, #16
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a18      	ldr	r2, [pc, #96]	; (800bdf8 <TIM_OC5_SetConfig+0xb4>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d00f      	beq.n	800bdba <TIM_OC5_SetConfig+0x76>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a17      	ldr	r2, [pc, #92]	; (800bdfc <TIM_OC5_SetConfig+0xb8>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d00b      	beq.n	800bdba <TIM_OC5_SetConfig+0x76>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a16      	ldr	r2, [pc, #88]	; (800be00 <TIM_OC5_SetConfig+0xbc>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d007      	beq.n	800bdba <TIM_OC5_SetConfig+0x76>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a15      	ldr	r2, [pc, #84]	; (800be04 <TIM_OC5_SetConfig+0xc0>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d003      	beq.n	800bdba <TIM_OC5_SetConfig+0x76>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a14      	ldr	r2, [pc, #80]	; (800be08 <TIM_OC5_SetConfig+0xc4>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d109      	bne.n	800bdce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	021b      	lsls	r3, r3, #8
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	621a      	str	r2, [r3, #32]
}
 800bde8:	bf00      	nop
 800bdea:	371c      	adds	r7, #28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	fffeff8f 	.word	0xfffeff8f
 800bdf8:	40010000 	.word	0x40010000
 800bdfc:	40010400 	.word	0x40010400
 800be00:	40014000 	.word	0x40014000
 800be04:	40014400 	.word	0x40014400
 800be08:	40014800 	.word	0x40014800

0800be0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b087      	sub	sp, #28
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	4b22      	ldr	r3, [pc, #136]	; (800bec0 <TIM_OC6_SetConfig+0xb4>)
 800be38:	4013      	ands	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	021b      	lsls	r3, r3, #8
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	4313      	orrs	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	051b      	lsls	r3, r3, #20
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	4313      	orrs	r3, r2
 800be5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a19      	ldr	r2, [pc, #100]	; (800bec4 <TIM_OC6_SetConfig+0xb8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d00f      	beq.n	800be84 <TIM_OC6_SetConfig+0x78>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a18      	ldr	r2, [pc, #96]	; (800bec8 <TIM_OC6_SetConfig+0xbc>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d00b      	beq.n	800be84 <TIM_OC6_SetConfig+0x78>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a17      	ldr	r2, [pc, #92]	; (800becc <TIM_OC6_SetConfig+0xc0>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d007      	beq.n	800be84 <TIM_OC6_SetConfig+0x78>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a16      	ldr	r2, [pc, #88]	; (800bed0 <TIM_OC6_SetConfig+0xc4>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d003      	beq.n	800be84 <TIM_OC6_SetConfig+0x78>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a15      	ldr	r2, [pc, #84]	; (800bed4 <TIM_OC6_SetConfig+0xc8>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d109      	bne.n	800be98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	029b      	lsls	r3, r3, #10
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	4313      	orrs	r3, r2
 800be96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	621a      	str	r2, [r3, #32]
}
 800beb2:	bf00      	nop
 800beb4:	371c      	adds	r7, #28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	feff8fff 	.word	0xfeff8fff
 800bec4:	40010000 	.word	0x40010000
 800bec8:	40010400 	.word	0x40010400
 800becc:	40014000 	.word	0x40014000
 800bed0:	40014400 	.word	0x40014400
 800bed4:	40014800 	.word	0x40014800

0800bed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bed8:	b480      	push	{r7}
 800beda:	b087      	sub	sp, #28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f003 031f 	and.w	r3, r3, #31
 800beea:	2201      	movs	r2, #1
 800beec:	fa02 f303 	lsl.w	r3, r2, r3
 800bef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6a1a      	ldr	r2, [r3, #32]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	43db      	mvns	r3, r3
 800befa:	401a      	ands	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6a1a      	ldr	r2, [r3, #32]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f003 031f 	and.w	r3, r3, #31
 800bf0a:	6879      	ldr	r1, [r7, #4]
 800bf0c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf10:	431a      	orrs	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	621a      	str	r2, [r3, #32]
}
 800bf16:	bf00      	nop
 800bf18:	371c      	adds	r7, #28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
	...

0800bf24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d101      	bne.n	800bf3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf38:	2302      	movs	r3, #2
 800bf3a:	e077      	b.n	800c02c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a35      	ldr	r2, [pc, #212]	; (800c038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d004      	beq.n	800bf70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a34      	ldr	r2, [pc, #208]	; (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d108      	bne.n	800bf82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a25      	ldr	r2, [pc, #148]	; (800c038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d02c      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfae:	d027      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a22      	ldr	r2, [pc, #136]	; (800c040 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d022      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a21      	ldr	r2, [pc, #132]	; (800c044 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d01d      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a1f      	ldr	r2, [pc, #124]	; (800c048 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d018      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a1a      	ldr	r2, [pc, #104]	; (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d013      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a1b      	ldr	r2, [pc, #108]	; (800c04c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d00e      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a1a      	ldr	r2, [pc, #104]	; (800c050 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d009      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a18      	ldr	r2, [pc, #96]	; (800c054 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d004      	beq.n	800c000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a17      	ldr	r2, [pc, #92]	; (800c058 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d10c      	bne.n	800c01a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c006:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	4313      	orrs	r3, r2
 800c010:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr
 800c038:	40010000 	.word	0x40010000
 800c03c:	40010400 	.word	0x40010400
 800c040:	40000400 	.word	0x40000400
 800c044:	40000800 	.word	0x40000800
 800c048:	40000c00 	.word	0x40000c00
 800c04c:	40001800 	.word	0x40001800
 800c050:	40014000 	.word	0x40014000
 800c054:	4000e000 	.word	0x4000e000
 800c058:	4000e400 	.word	0x4000e400

0800c05c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e042      	b.n	800c130 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7f6 f8e1 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2224      	movs	r2, #36	; 0x24
 800c0c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f022 0201 	bic.w	r2, r2, #1
 800c0d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f82c 	bl	800c138 <UART_SetConfig>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d101      	bne.n	800c0ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e022      	b.n	800c130 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fe8c 	bl	800ce10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689a      	ldr	r2, [r3, #8]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f042 0201 	orr.w	r2, r2, #1
 800c126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 ff13 	bl	800cf54 <UART_CheckIdleState>
 800c12e:	4603      	mov	r3, r0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c13c:	b092      	sub	sp, #72	; 0x48
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	431a      	orrs	r2, r3
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	431a      	orrs	r2, r3
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	4bbe      	ldr	r3, [pc, #760]	; (800c460 <UART_SetConfig+0x328>)
 800c168:	4013      	ands	r3, r2
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	6812      	ldr	r2, [r2, #0]
 800c16e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c170:	430b      	orrs	r3, r1
 800c172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4ab3      	ldr	r2, [pc, #716]	; (800c464 <UART_SetConfig+0x32c>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d004      	beq.n	800c1a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	4baf      	ldr	r3, [pc, #700]	; (800c468 <UART_SetConfig+0x330>)
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	6812      	ldr	r2, [r2, #0]
 800c1b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	f023 010f 	bic.w	r1, r3, #15
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	430a      	orrs	r2, r1
 800c1cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4aa6      	ldr	r2, [pc, #664]	; (800c46c <UART_SetConfig+0x334>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d177      	bne.n	800c2c8 <UART_SetConfig+0x190>
 800c1d8:	4ba5      	ldr	r3, [pc, #660]	; (800c470 <UART_SetConfig+0x338>)
 800c1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1e0:	2b28      	cmp	r3, #40	; 0x28
 800c1e2:	d86d      	bhi.n	800c2c0 <UART_SetConfig+0x188>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <UART_SetConfig+0xb4>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c291 	.word	0x0800c291
 800c1f0:	0800c2c1 	.word	0x0800c2c1
 800c1f4:	0800c2c1 	.word	0x0800c2c1
 800c1f8:	0800c2c1 	.word	0x0800c2c1
 800c1fc:	0800c2c1 	.word	0x0800c2c1
 800c200:	0800c2c1 	.word	0x0800c2c1
 800c204:	0800c2c1 	.word	0x0800c2c1
 800c208:	0800c2c1 	.word	0x0800c2c1
 800c20c:	0800c299 	.word	0x0800c299
 800c210:	0800c2c1 	.word	0x0800c2c1
 800c214:	0800c2c1 	.word	0x0800c2c1
 800c218:	0800c2c1 	.word	0x0800c2c1
 800c21c:	0800c2c1 	.word	0x0800c2c1
 800c220:	0800c2c1 	.word	0x0800c2c1
 800c224:	0800c2c1 	.word	0x0800c2c1
 800c228:	0800c2c1 	.word	0x0800c2c1
 800c22c:	0800c2a1 	.word	0x0800c2a1
 800c230:	0800c2c1 	.word	0x0800c2c1
 800c234:	0800c2c1 	.word	0x0800c2c1
 800c238:	0800c2c1 	.word	0x0800c2c1
 800c23c:	0800c2c1 	.word	0x0800c2c1
 800c240:	0800c2c1 	.word	0x0800c2c1
 800c244:	0800c2c1 	.word	0x0800c2c1
 800c248:	0800c2c1 	.word	0x0800c2c1
 800c24c:	0800c2a9 	.word	0x0800c2a9
 800c250:	0800c2c1 	.word	0x0800c2c1
 800c254:	0800c2c1 	.word	0x0800c2c1
 800c258:	0800c2c1 	.word	0x0800c2c1
 800c25c:	0800c2c1 	.word	0x0800c2c1
 800c260:	0800c2c1 	.word	0x0800c2c1
 800c264:	0800c2c1 	.word	0x0800c2c1
 800c268:	0800c2c1 	.word	0x0800c2c1
 800c26c:	0800c2b1 	.word	0x0800c2b1
 800c270:	0800c2c1 	.word	0x0800c2c1
 800c274:	0800c2c1 	.word	0x0800c2c1
 800c278:	0800c2c1 	.word	0x0800c2c1
 800c27c:	0800c2c1 	.word	0x0800c2c1
 800c280:	0800c2c1 	.word	0x0800c2c1
 800c284:	0800c2c1 	.word	0x0800c2c1
 800c288:	0800c2c1 	.word	0x0800c2c1
 800c28c:	0800c2b9 	.word	0x0800c2b9
 800c290:	2301      	movs	r3, #1
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e326      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c298:	2304      	movs	r3, #4
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e322      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2a0:	2308      	movs	r3, #8
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e31e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2a8:	2310      	movs	r3, #16
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ae:	e31a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2b0:	2320      	movs	r3, #32
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b6:	e316      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2b8:	2340      	movs	r3, #64	; 0x40
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2be:	e312      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2c0:	2380      	movs	r3, #128	; 0x80
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e30e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a69      	ldr	r2, [pc, #420]	; (800c474 <UART_SetConfig+0x33c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d130      	bne.n	800c334 <UART_SetConfig+0x1fc>
 800c2d2:	4b67      	ldr	r3, [pc, #412]	; (800c470 <UART_SetConfig+0x338>)
 800c2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b05      	cmp	r3, #5
 800c2dc:	d826      	bhi.n	800c32c <UART_SetConfig+0x1f4>
 800c2de:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <UART_SetConfig+0x1ac>)
 800c2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e4:	0800c2fd 	.word	0x0800c2fd
 800c2e8:	0800c305 	.word	0x0800c305
 800c2ec:	0800c30d 	.word	0x0800c30d
 800c2f0:	0800c315 	.word	0x0800c315
 800c2f4:	0800c31d 	.word	0x0800c31d
 800c2f8:	0800c325 	.word	0x0800c325
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c302:	e2f0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c304:	2304      	movs	r3, #4
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30a:	e2ec      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c30c:	2308      	movs	r3, #8
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c312:	e2e8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c314:	2310      	movs	r3, #16
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31a:	e2e4      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c31c:	2320      	movs	r3, #32
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c322:	e2e0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c324:	2340      	movs	r3, #64	; 0x40
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e2dc      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c32c:	2380      	movs	r3, #128	; 0x80
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e2d8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a4f      	ldr	r2, [pc, #316]	; (800c478 <UART_SetConfig+0x340>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d130      	bne.n	800c3a0 <UART_SetConfig+0x268>
 800c33e:	4b4c      	ldr	r3, [pc, #304]	; (800c470 <UART_SetConfig+0x338>)
 800c340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c342:	f003 0307 	and.w	r3, r3, #7
 800c346:	2b05      	cmp	r3, #5
 800c348:	d826      	bhi.n	800c398 <UART_SetConfig+0x260>
 800c34a:	a201      	add	r2, pc, #4	; (adr r2, 800c350 <UART_SetConfig+0x218>)
 800c34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c350:	0800c369 	.word	0x0800c369
 800c354:	0800c371 	.word	0x0800c371
 800c358:	0800c379 	.word	0x0800c379
 800c35c:	0800c381 	.word	0x0800c381
 800c360:	0800c389 	.word	0x0800c389
 800c364:	0800c391 	.word	0x0800c391
 800c368:	2300      	movs	r3, #0
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36e:	e2ba      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c370:	2304      	movs	r3, #4
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c376:	e2b6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c378:	2308      	movs	r3, #8
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37e:	e2b2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c380:	2310      	movs	r3, #16
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c386:	e2ae      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c388:	2320      	movs	r3, #32
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38e:	e2aa      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c390:	2340      	movs	r3, #64	; 0x40
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c396:	e2a6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c398:	2380      	movs	r3, #128	; 0x80
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39e:	e2a2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a35      	ldr	r2, [pc, #212]	; (800c47c <UART_SetConfig+0x344>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d130      	bne.n	800c40c <UART_SetConfig+0x2d4>
 800c3aa:	4b31      	ldr	r3, [pc, #196]	; (800c470 <UART_SetConfig+0x338>)
 800c3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ae:	f003 0307 	and.w	r3, r3, #7
 800c3b2:	2b05      	cmp	r3, #5
 800c3b4:	d826      	bhi.n	800c404 <UART_SetConfig+0x2cc>
 800c3b6:	a201      	add	r2, pc, #4	; (adr r2, 800c3bc <UART_SetConfig+0x284>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c3d5 	.word	0x0800c3d5
 800c3c0:	0800c3dd 	.word	0x0800c3dd
 800c3c4:	0800c3e5 	.word	0x0800c3e5
 800c3c8:	0800c3ed 	.word	0x0800c3ed
 800c3cc:	0800c3f5 	.word	0x0800c3f5
 800c3d0:	0800c3fd 	.word	0x0800c3fd
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3da:	e284      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3dc:	2304      	movs	r3, #4
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e280      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3e4:	2308      	movs	r3, #8
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ea:	e27c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3ec:	2310      	movs	r3, #16
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f2:	e278      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3f4:	2320      	movs	r3, #32
 800c3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fa:	e274      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3fc:	2340      	movs	r3, #64	; 0x40
 800c3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c402:	e270      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c404:	2380      	movs	r3, #128	; 0x80
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40a:	e26c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a1b      	ldr	r2, [pc, #108]	; (800c480 <UART_SetConfig+0x348>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d142      	bne.n	800c49c <UART_SetConfig+0x364>
 800c416:	4b16      	ldr	r3, [pc, #88]	; (800c470 <UART_SetConfig+0x338>)
 800c418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41a:	f003 0307 	and.w	r3, r3, #7
 800c41e:	2b05      	cmp	r3, #5
 800c420:	d838      	bhi.n	800c494 <UART_SetConfig+0x35c>
 800c422:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <UART_SetConfig+0x2f0>)
 800c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c428:	0800c441 	.word	0x0800c441
 800c42c:	0800c449 	.word	0x0800c449
 800c430:	0800c451 	.word	0x0800c451
 800c434:	0800c459 	.word	0x0800c459
 800c438:	0800c485 	.word	0x0800c485
 800c43c:	0800c48d 	.word	0x0800c48d
 800c440:	2300      	movs	r3, #0
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c446:	e24e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c448:	2304      	movs	r3, #4
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44e:	e24a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c450:	2308      	movs	r3, #8
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c456:	e246      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c458:	2310      	movs	r3, #16
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45e:	e242      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c460:	cfff69f3 	.word	0xcfff69f3
 800c464:	58000c00 	.word	0x58000c00
 800c468:	11fff4ff 	.word	0x11fff4ff
 800c46c:	40011000 	.word	0x40011000
 800c470:	58024400 	.word	0x58024400
 800c474:	40004400 	.word	0x40004400
 800c478:	40004800 	.word	0x40004800
 800c47c:	40004c00 	.word	0x40004c00
 800c480:	40005000 	.word	0x40005000
 800c484:	2320      	movs	r3, #32
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e22c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e228      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c494:	2380      	movs	r3, #128	; 0x80
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e224      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4ab1      	ldr	r2, [pc, #708]	; (800c768 <UART_SetConfig+0x630>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d176      	bne.n	800c594 <UART_SetConfig+0x45c>
 800c4a6:	4bb1      	ldr	r3, [pc, #708]	; (800c76c <UART_SetConfig+0x634>)
 800c4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4ae:	2b28      	cmp	r3, #40	; 0x28
 800c4b0:	d86c      	bhi.n	800c58c <UART_SetConfig+0x454>
 800c4b2:	a201      	add	r2, pc, #4	; (adr r2, 800c4b8 <UART_SetConfig+0x380>)
 800c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b8:	0800c55d 	.word	0x0800c55d
 800c4bc:	0800c58d 	.word	0x0800c58d
 800c4c0:	0800c58d 	.word	0x0800c58d
 800c4c4:	0800c58d 	.word	0x0800c58d
 800c4c8:	0800c58d 	.word	0x0800c58d
 800c4cc:	0800c58d 	.word	0x0800c58d
 800c4d0:	0800c58d 	.word	0x0800c58d
 800c4d4:	0800c58d 	.word	0x0800c58d
 800c4d8:	0800c565 	.word	0x0800c565
 800c4dc:	0800c58d 	.word	0x0800c58d
 800c4e0:	0800c58d 	.word	0x0800c58d
 800c4e4:	0800c58d 	.word	0x0800c58d
 800c4e8:	0800c58d 	.word	0x0800c58d
 800c4ec:	0800c58d 	.word	0x0800c58d
 800c4f0:	0800c58d 	.word	0x0800c58d
 800c4f4:	0800c58d 	.word	0x0800c58d
 800c4f8:	0800c56d 	.word	0x0800c56d
 800c4fc:	0800c58d 	.word	0x0800c58d
 800c500:	0800c58d 	.word	0x0800c58d
 800c504:	0800c58d 	.word	0x0800c58d
 800c508:	0800c58d 	.word	0x0800c58d
 800c50c:	0800c58d 	.word	0x0800c58d
 800c510:	0800c58d 	.word	0x0800c58d
 800c514:	0800c58d 	.word	0x0800c58d
 800c518:	0800c575 	.word	0x0800c575
 800c51c:	0800c58d 	.word	0x0800c58d
 800c520:	0800c58d 	.word	0x0800c58d
 800c524:	0800c58d 	.word	0x0800c58d
 800c528:	0800c58d 	.word	0x0800c58d
 800c52c:	0800c58d 	.word	0x0800c58d
 800c530:	0800c58d 	.word	0x0800c58d
 800c534:	0800c58d 	.word	0x0800c58d
 800c538:	0800c57d 	.word	0x0800c57d
 800c53c:	0800c58d 	.word	0x0800c58d
 800c540:	0800c58d 	.word	0x0800c58d
 800c544:	0800c58d 	.word	0x0800c58d
 800c548:	0800c58d 	.word	0x0800c58d
 800c54c:	0800c58d 	.word	0x0800c58d
 800c550:	0800c58d 	.word	0x0800c58d
 800c554:	0800c58d 	.word	0x0800c58d
 800c558:	0800c585 	.word	0x0800c585
 800c55c:	2301      	movs	r3, #1
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e1c0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c564:	2304      	movs	r3, #4
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e1bc      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c56c:	2308      	movs	r3, #8
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c572:	e1b8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c574:	2310      	movs	r3, #16
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57a:	e1b4      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c57c:	2320      	movs	r3, #32
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c582:	e1b0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c584:	2340      	movs	r3, #64	; 0x40
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58a:	e1ac      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c58c:	2380      	movs	r3, #128	; 0x80
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c592:	e1a8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a75      	ldr	r2, [pc, #468]	; (800c770 <UART_SetConfig+0x638>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d130      	bne.n	800c600 <UART_SetConfig+0x4c8>
 800c59e:	4b73      	ldr	r3, [pc, #460]	; (800c76c <UART_SetConfig+0x634>)
 800c5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b05      	cmp	r3, #5
 800c5a8:	d826      	bhi.n	800c5f8 <UART_SetConfig+0x4c0>
 800c5aa:	a201      	add	r2, pc, #4	; (adr r2, 800c5b0 <UART_SetConfig+0x478>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c5c9 	.word	0x0800c5c9
 800c5b4:	0800c5d1 	.word	0x0800c5d1
 800c5b8:	0800c5d9 	.word	0x0800c5d9
 800c5bc:	0800c5e1 	.word	0x0800c5e1
 800c5c0:	0800c5e9 	.word	0x0800c5e9
 800c5c4:	0800c5f1 	.word	0x0800c5f1
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e18a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5d0:	2304      	movs	r3, #4
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d6:	e186      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5d8:	2308      	movs	r3, #8
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5de:	e182      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5e0:	2310      	movs	r3, #16
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e6:	e17e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5e8:	2320      	movs	r3, #32
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ee:	e17a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5f0:	2340      	movs	r3, #64	; 0x40
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f6:	e176      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5f8:	2380      	movs	r3, #128	; 0x80
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e172      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a5b      	ldr	r2, [pc, #364]	; (800c774 <UART_SetConfig+0x63c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d130      	bne.n	800c66c <UART_SetConfig+0x534>
 800c60a:	4b58      	ldr	r3, [pc, #352]	; (800c76c <UART_SetConfig+0x634>)
 800c60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60e:	f003 0307 	and.w	r3, r3, #7
 800c612:	2b05      	cmp	r3, #5
 800c614:	d826      	bhi.n	800c664 <UART_SetConfig+0x52c>
 800c616:	a201      	add	r2, pc, #4	; (adr r2, 800c61c <UART_SetConfig+0x4e4>)
 800c618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61c:	0800c635 	.word	0x0800c635
 800c620:	0800c63d 	.word	0x0800c63d
 800c624:	0800c645 	.word	0x0800c645
 800c628:	0800c64d 	.word	0x0800c64d
 800c62c:	0800c655 	.word	0x0800c655
 800c630:	0800c65d 	.word	0x0800c65d
 800c634:	2300      	movs	r3, #0
 800c636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63a:	e154      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c63c:	2304      	movs	r3, #4
 800c63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c642:	e150      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c644:	2308      	movs	r3, #8
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64a:	e14c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c64c:	2310      	movs	r3, #16
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c652:	e148      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c654:	2320      	movs	r3, #32
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65a:	e144      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c65c:	2340      	movs	r3, #64	; 0x40
 800c65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c662:	e140      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c664:	2380      	movs	r3, #128	; 0x80
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66a:	e13c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a41      	ldr	r2, [pc, #260]	; (800c778 <UART_SetConfig+0x640>)
 800c672:	4293      	cmp	r3, r2
 800c674:	f040 8082 	bne.w	800c77c <UART_SetConfig+0x644>
 800c678:	4b3c      	ldr	r3, [pc, #240]	; (800c76c <UART_SetConfig+0x634>)
 800c67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c680:	2b28      	cmp	r3, #40	; 0x28
 800c682:	d86d      	bhi.n	800c760 <UART_SetConfig+0x628>
 800c684:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <UART_SetConfig+0x554>)
 800c686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68a:	bf00      	nop
 800c68c:	0800c731 	.word	0x0800c731
 800c690:	0800c761 	.word	0x0800c761
 800c694:	0800c761 	.word	0x0800c761
 800c698:	0800c761 	.word	0x0800c761
 800c69c:	0800c761 	.word	0x0800c761
 800c6a0:	0800c761 	.word	0x0800c761
 800c6a4:	0800c761 	.word	0x0800c761
 800c6a8:	0800c761 	.word	0x0800c761
 800c6ac:	0800c739 	.word	0x0800c739
 800c6b0:	0800c761 	.word	0x0800c761
 800c6b4:	0800c761 	.word	0x0800c761
 800c6b8:	0800c761 	.word	0x0800c761
 800c6bc:	0800c761 	.word	0x0800c761
 800c6c0:	0800c761 	.word	0x0800c761
 800c6c4:	0800c761 	.word	0x0800c761
 800c6c8:	0800c761 	.word	0x0800c761
 800c6cc:	0800c741 	.word	0x0800c741
 800c6d0:	0800c761 	.word	0x0800c761
 800c6d4:	0800c761 	.word	0x0800c761
 800c6d8:	0800c761 	.word	0x0800c761
 800c6dc:	0800c761 	.word	0x0800c761
 800c6e0:	0800c761 	.word	0x0800c761
 800c6e4:	0800c761 	.word	0x0800c761
 800c6e8:	0800c761 	.word	0x0800c761
 800c6ec:	0800c749 	.word	0x0800c749
 800c6f0:	0800c761 	.word	0x0800c761
 800c6f4:	0800c761 	.word	0x0800c761
 800c6f8:	0800c761 	.word	0x0800c761
 800c6fc:	0800c761 	.word	0x0800c761
 800c700:	0800c761 	.word	0x0800c761
 800c704:	0800c761 	.word	0x0800c761
 800c708:	0800c761 	.word	0x0800c761
 800c70c:	0800c751 	.word	0x0800c751
 800c710:	0800c761 	.word	0x0800c761
 800c714:	0800c761 	.word	0x0800c761
 800c718:	0800c761 	.word	0x0800c761
 800c71c:	0800c761 	.word	0x0800c761
 800c720:	0800c761 	.word	0x0800c761
 800c724:	0800c761 	.word	0x0800c761
 800c728:	0800c761 	.word	0x0800c761
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	2301      	movs	r3, #1
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c736:	e0d6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73e:	e0d2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c746:	e0ce      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74e:	e0ca      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c750:	2320      	movs	r3, #32
 800c752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c756:	e0c6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75e:	e0c2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c766:	e0be      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c768:	40011400 	.word	0x40011400
 800c76c:	58024400 	.word	0x58024400
 800c770:	40007800 	.word	0x40007800
 800c774:	40007c00 	.word	0x40007c00
 800c778:	40011800 	.word	0x40011800
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4aad      	ldr	r2, [pc, #692]	; (800ca38 <UART_SetConfig+0x900>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d176      	bne.n	800c874 <UART_SetConfig+0x73c>
 800c786:	4bad      	ldr	r3, [pc, #692]	; (800ca3c <UART_SetConfig+0x904>)
 800c788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c78e:	2b28      	cmp	r3, #40	; 0x28
 800c790:	d86c      	bhi.n	800c86c <UART_SetConfig+0x734>
 800c792:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <UART_SetConfig+0x660>)
 800c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c798:	0800c83d 	.word	0x0800c83d
 800c79c:	0800c86d 	.word	0x0800c86d
 800c7a0:	0800c86d 	.word	0x0800c86d
 800c7a4:	0800c86d 	.word	0x0800c86d
 800c7a8:	0800c86d 	.word	0x0800c86d
 800c7ac:	0800c86d 	.word	0x0800c86d
 800c7b0:	0800c86d 	.word	0x0800c86d
 800c7b4:	0800c86d 	.word	0x0800c86d
 800c7b8:	0800c845 	.word	0x0800c845
 800c7bc:	0800c86d 	.word	0x0800c86d
 800c7c0:	0800c86d 	.word	0x0800c86d
 800c7c4:	0800c86d 	.word	0x0800c86d
 800c7c8:	0800c86d 	.word	0x0800c86d
 800c7cc:	0800c86d 	.word	0x0800c86d
 800c7d0:	0800c86d 	.word	0x0800c86d
 800c7d4:	0800c86d 	.word	0x0800c86d
 800c7d8:	0800c84d 	.word	0x0800c84d
 800c7dc:	0800c86d 	.word	0x0800c86d
 800c7e0:	0800c86d 	.word	0x0800c86d
 800c7e4:	0800c86d 	.word	0x0800c86d
 800c7e8:	0800c86d 	.word	0x0800c86d
 800c7ec:	0800c86d 	.word	0x0800c86d
 800c7f0:	0800c86d 	.word	0x0800c86d
 800c7f4:	0800c86d 	.word	0x0800c86d
 800c7f8:	0800c855 	.word	0x0800c855
 800c7fc:	0800c86d 	.word	0x0800c86d
 800c800:	0800c86d 	.word	0x0800c86d
 800c804:	0800c86d 	.word	0x0800c86d
 800c808:	0800c86d 	.word	0x0800c86d
 800c80c:	0800c86d 	.word	0x0800c86d
 800c810:	0800c86d 	.word	0x0800c86d
 800c814:	0800c86d 	.word	0x0800c86d
 800c818:	0800c85d 	.word	0x0800c85d
 800c81c:	0800c86d 	.word	0x0800c86d
 800c820:	0800c86d 	.word	0x0800c86d
 800c824:	0800c86d 	.word	0x0800c86d
 800c828:	0800c86d 	.word	0x0800c86d
 800c82c:	0800c86d 	.word	0x0800c86d
 800c830:	0800c86d 	.word	0x0800c86d
 800c834:	0800c86d 	.word	0x0800c86d
 800c838:	0800c865 	.word	0x0800c865
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e050      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c844:	2304      	movs	r3, #4
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e04c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c84c:	2308      	movs	r3, #8
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e048      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c854:	2310      	movs	r3, #16
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85a:	e044      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c85c:	2320      	movs	r3, #32
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c862:	e040      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c864:	2340      	movs	r3, #64	; 0x40
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86a:	e03c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c86c:	2380      	movs	r3, #128	; 0x80
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c872:	e038      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a71      	ldr	r2, [pc, #452]	; (800ca40 <UART_SetConfig+0x908>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d130      	bne.n	800c8e0 <UART_SetConfig+0x7a8>
 800c87e:	4b6f      	ldr	r3, [pc, #444]	; (800ca3c <UART_SetConfig+0x904>)
 800c880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	2b05      	cmp	r3, #5
 800c888:	d826      	bhi.n	800c8d8 <UART_SetConfig+0x7a0>
 800c88a:	a201      	add	r2, pc, #4	; (adr r2, 800c890 <UART_SetConfig+0x758>)
 800c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c890:	0800c8a9 	.word	0x0800c8a9
 800c894:	0800c8b1 	.word	0x0800c8b1
 800c898:	0800c8b9 	.word	0x0800c8b9
 800c89c:	0800c8c1 	.word	0x0800c8c1
 800c8a0:	0800c8c9 	.word	0x0800c8c9
 800c8a4:	0800c8d1 	.word	0x0800c8d1
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e01a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8b0:	2304      	movs	r3, #4
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e016      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8b8:	2308      	movs	r3, #8
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8be:	e012      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8c0:	2310      	movs	r3, #16
 800c8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c6:	e00e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8c8:	2320      	movs	r3, #32
 800c8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ce:	e00a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8d0:	2340      	movs	r3, #64	; 0x40
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d6:	e006      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8d8:	2380      	movs	r3, #128	; 0x80
 800c8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8de:	e002      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8e0:	2380      	movs	r3, #128	; 0x80
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a55      	ldr	r2, [pc, #340]	; (800ca40 <UART_SetConfig+0x908>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	f040 80f8 	bne.w	800cae2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8f6:	2b20      	cmp	r3, #32
 800c8f8:	dc46      	bgt.n	800c988 <UART_SetConfig+0x850>
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	db75      	blt.n	800c9ea <UART_SetConfig+0x8b2>
 800c8fe:	3b02      	subs	r3, #2
 800c900:	2b1e      	cmp	r3, #30
 800c902:	d872      	bhi.n	800c9ea <UART_SetConfig+0x8b2>
 800c904:	a201      	add	r2, pc, #4	; (adr r2, 800c90c <UART_SetConfig+0x7d4>)
 800c906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90a:	bf00      	nop
 800c90c:	0800c98f 	.word	0x0800c98f
 800c910:	0800c9eb 	.word	0x0800c9eb
 800c914:	0800c997 	.word	0x0800c997
 800c918:	0800c9eb 	.word	0x0800c9eb
 800c91c:	0800c9eb 	.word	0x0800c9eb
 800c920:	0800c9eb 	.word	0x0800c9eb
 800c924:	0800c9a7 	.word	0x0800c9a7
 800c928:	0800c9eb 	.word	0x0800c9eb
 800c92c:	0800c9eb 	.word	0x0800c9eb
 800c930:	0800c9eb 	.word	0x0800c9eb
 800c934:	0800c9eb 	.word	0x0800c9eb
 800c938:	0800c9eb 	.word	0x0800c9eb
 800c93c:	0800c9eb 	.word	0x0800c9eb
 800c940:	0800c9eb 	.word	0x0800c9eb
 800c944:	0800c9b7 	.word	0x0800c9b7
 800c948:	0800c9eb 	.word	0x0800c9eb
 800c94c:	0800c9eb 	.word	0x0800c9eb
 800c950:	0800c9eb 	.word	0x0800c9eb
 800c954:	0800c9eb 	.word	0x0800c9eb
 800c958:	0800c9eb 	.word	0x0800c9eb
 800c95c:	0800c9eb 	.word	0x0800c9eb
 800c960:	0800c9eb 	.word	0x0800c9eb
 800c964:	0800c9eb 	.word	0x0800c9eb
 800c968:	0800c9eb 	.word	0x0800c9eb
 800c96c:	0800c9eb 	.word	0x0800c9eb
 800c970:	0800c9eb 	.word	0x0800c9eb
 800c974:	0800c9eb 	.word	0x0800c9eb
 800c978:	0800c9eb 	.word	0x0800c9eb
 800c97c:	0800c9eb 	.word	0x0800c9eb
 800c980:	0800c9eb 	.word	0x0800c9eb
 800c984:	0800c9dd 	.word	0x0800c9dd
 800c988:	2b40      	cmp	r3, #64	; 0x40
 800c98a:	d02a      	beq.n	800c9e2 <UART_SetConfig+0x8aa>
 800c98c:	e02d      	b.n	800c9ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c98e:	f7fd faa7 	bl	8009ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c994:	e02f      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fd fab6 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a4:	e027      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9a6:	f107 0318 	add.w	r3, r7, #24
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fd fc02 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b4:	e01f      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9b6:	4b21      	ldr	r3, [pc, #132]	; (800ca3c <UART_SetConfig+0x904>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9c2:	4b1e      	ldr	r3, [pc, #120]	; (800ca3c <UART_SetConfig+0x904>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	08db      	lsrs	r3, r3, #3
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ca44 <UART_SetConfig+0x90c>)
 800c9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9d4:	e00f      	b.n	800c9f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9d6:	4b1b      	ldr	r3, [pc, #108]	; (800ca44 <UART_SetConfig+0x90c>)
 800c9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9da:	e00c      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ca48 <UART_SetConfig+0x910>)
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e0:	e009      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e8:	e005      	b.n	800c9f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 81ee 	beq.w	800cdda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca02:	4a12      	ldr	r2, [pc, #72]	; (800ca4c <UART_SetConfig+0x914>)
 800ca04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca10:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	4413      	add	r3, r2
 800ca1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d305      	bcc.n	800ca2e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d910      	bls.n	800ca50 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca34:	e1d1      	b.n	800cdda <UART_SetConfig+0xca2>
 800ca36:	bf00      	nop
 800ca38:	40011c00 	.word	0x40011c00
 800ca3c:	58024400 	.word	0x58024400
 800ca40:	58000c00 	.word	0x58000c00
 800ca44:	03d09000 	.word	0x03d09000
 800ca48:	003d0900 	.word	0x003d0900
 800ca4c:	0800de74 	.word	0x0800de74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca52:	2200      	movs	r2, #0
 800ca54:	60bb      	str	r3, [r7, #8]
 800ca56:	60fa      	str	r2, [r7, #12]
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5c:	4ac0      	ldr	r2, [pc, #768]	; (800cd60 <UART_SetConfig+0xc28>)
 800ca5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	2200      	movs	r2, #0
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	607a      	str	r2, [r7, #4]
 800ca6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca72:	f7f3 fc4d 	bl	8000310 <__aeabi_uldivmod>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	f04f 0200 	mov.w	r2, #0
 800ca82:	f04f 0300 	mov.w	r3, #0
 800ca86:	020b      	lsls	r3, r1, #8
 800ca88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca8c:	0202      	lsls	r2, r0, #8
 800ca8e:	6979      	ldr	r1, [r7, #20]
 800ca90:	6849      	ldr	r1, [r1, #4]
 800ca92:	0849      	lsrs	r1, r1, #1
 800ca94:	2000      	movs	r0, #0
 800ca96:	460c      	mov	r4, r1
 800ca98:	4605      	mov	r5, r0
 800ca9a:	eb12 0804 	adds.w	r8, r2, r4
 800ca9e:	eb43 0905 	adc.w	r9, r3, r5
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	469a      	mov	sl, r3
 800caaa:	4693      	mov	fp, r2
 800caac:	4652      	mov	r2, sl
 800caae:	465b      	mov	r3, fp
 800cab0:	4640      	mov	r0, r8
 800cab2:	4649      	mov	r1, r9
 800cab4:	f7f3 fc2c 	bl	8000310 <__aeabi_uldivmod>
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	4613      	mov	r3, r2
 800cabe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cac6:	d308      	bcc.n	800cada <UART_SetConfig+0x9a2>
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cace:	d204      	bcs.n	800cada <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad6:	60da      	str	r2, [r3, #12]
 800cad8:	e17f      	b.n	800cdda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cae0:	e17b      	b.n	800cdda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caea:	f040 80bd 	bne.w	800cc68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800caee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800caf2:	2b20      	cmp	r3, #32
 800caf4:	dc48      	bgt.n	800cb88 <UART_SetConfig+0xa50>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	db7b      	blt.n	800cbf2 <UART_SetConfig+0xaba>
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	d879      	bhi.n	800cbf2 <UART_SetConfig+0xaba>
 800cafe:	a201      	add	r2, pc, #4	; (adr r2, 800cb04 <UART_SetConfig+0x9cc>)
 800cb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb04:	0800cb8f 	.word	0x0800cb8f
 800cb08:	0800cb97 	.word	0x0800cb97
 800cb0c:	0800cbf3 	.word	0x0800cbf3
 800cb10:	0800cbf3 	.word	0x0800cbf3
 800cb14:	0800cb9f 	.word	0x0800cb9f
 800cb18:	0800cbf3 	.word	0x0800cbf3
 800cb1c:	0800cbf3 	.word	0x0800cbf3
 800cb20:	0800cbf3 	.word	0x0800cbf3
 800cb24:	0800cbaf 	.word	0x0800cbaf
 800cb28:	0800cbf3 	.word	0x0800cbf3
 800cb2c:	0800cbf3 	.word	0x0800cbf3
 800cb30:	0800cbf3 	.word	0x0800cbf3
 800cb34:	0800cbf3 	.word	0x0800cbf3
 800cb38:	0800cbf3 	.word	0x0800cbf3
 800cb3c:	0800cbf3 	.word	0x0800cbf3
 800cb40:	0800cbf3 	.word	0x0800cbf3
 800cb44:	0800cbbf 	.word	0x0800cbbf
 800cb48:	0800cbf3 	.word	0x0800cbf3
 800cb4c:	0800cbf3 	.word	0x0800cbf3
 800cb50:	0800cbf3 	.word	0x0800cbf3
 800cb54:	0800cbf3 	.word	0x0800cbf3
 800cb58:	0800cbf3 	.word	0x0800cbf3
 800cb5c:	0800cbf3 	.word	0x0800cbf3
 800cb60:	0800cbf3 	.word	0x0800cbf3
 800cb64:	0800cbf3 	.word	0x0800cbf3
 800cb68:	0800cbf3 	.word	0x0800cbf3
 800cb6c:	0800cbf3 	.word	0x0800cbf3
 800cb70:	0800cbf3 	.word	0x0800cbf3
 800cb74:	0800cbf3 	.word	0x0800cbf3
 800cb78:	0800cbf3 	.word	0x0800cbf3
 800cb7c:	0800cbf3 	.word	0x0800cbf3
 800cb80:	0800cbf3 	.word	0x0800cbf3
 800cb84:	0800cbe5 	.word	0x0800cbe5
 800cb88:	2b40      	cmp	r3, #64	; 0x40
 800cb8a:	d02e      	beq.n	800cbea <UART_SetConfig+0xab2>
 800cb8c:	e031      	b.n	800cbf2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb8e:	f7fb fb09 	bl	80081a4 <HAL_RCC_GetPCLK1Freq>
 800cb92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb94:	e033      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb96:	f7fb fb1b 	bl	80081d0 <HAL_RCC_GetPCLK2Freq>
 800cb9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb9c:	e02f      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fd f9b2 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbac:	e027      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbae:	f107 0318 	add.w	r3, r7, #24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fd fafe 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbbc:	e01f      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbbe:	4b69      	ldr	r3, [pc, #420]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0320 	and.w	r3, r3, #32
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d009      	beq.n	800cbde <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbca:	4b66      	ldr	r3, [pc, #408]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	08db      	lsrs	r3, r3, #3
 800cbd0:	f003 0303 	and.w	r3, r3, #3
 800cbd4:	4a64      	ldr	r2, [pc, #400]	; (800cd68 <UART_SetConfig+0xc30>)
 800cbd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbdc:	e00f      	b.n	800cbfe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cbde:	4b62      	ldr	r3, [pc, #392]	; (800cd68 <UART_SetConfig+0xc30>)
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe2:	e00c      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbe4:	4b61      	ldr	r3, [pc, #388]	; (800cd6c <UART_SetConfig+0xc34>)
 800cbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe8:	e009      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf0:	e005      	b.n	800cbfe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 80ea 	beq.w	800cdda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	4a55      	ldr	r2, [pc, #340]	; (800cd60 <UART_SetConfig+0xc28>)
 800cc0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc10:	461a      	mov	r2, r3
 800cc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc14:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc18:	005a      	lsls	r2, r3, #1
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	085b      	lsrs	r3, r3, #1
 800cc20:	441a      	add	r2, r3
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	2b0f      	cmp	r3, #15
 800cc30:	d916      	bls.n	800cc60 <UART_SetConfig+0xb28>
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc38:	d212      	bcs.n	800cc60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	f023 030f 	bic.w	r3, r3, #15
 800cc42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	085b      	lsrs	r3, r3, #1
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc52:	4313      	orrs	r3, r2
 800cc54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc5c:	60da      	str	r2, [r3, #12]
 800cc5e:	e0bc      	b.n	800cdda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc66:	e0b8      	b.n	800cdda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc6c:	2b20      	cmp	r3, #32
 800cc6e:	dc4b      	bgt.n	800cd08 <UART_SetConfig+0xbd0>
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f2c0 8087 	blt.w	800cd84 <UART_SetConfig+0xc4c>
 800cc76:	2b20      	cmp	r3, #32
 800cc78:	f200 8084 	bhi.w	800cd84 <UART_SetConfig+0xc4c>
 800cc7c:	a201      	add	r2, pc, #4	; (adr r2, 800cc84 <UART_SetConfig+0xb4c>)
 800cc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc82:	bf00      	nop
 800cc84:	0800cd0f 	.word	0x0800cd0f
 800cc88:	0800cd17 	.word	0x0800cd17
 800cc8c:	0800cd85 	.word	0x0800cd85
 800cc90:	0800cd85 	.word	0x0800cd85
 800cc94:	0800cd1f 	.word	0x0800cd1f
 800cc98:	0800cd85 	.word	0x0800cd85
 800cc9c:	0800cd85 	.word	0x0800cd85
 800cca0:	0800cd85 	.word	0x0800cd85
 800cca4:	0800cd2f 	.word	0x0800cd2f
 800cca8:	0800cd85 	.word	0x0800cd85
 800ccac:	0800cd85 	.word	0x0800cd85
 800ccb0:	0800cd85 	.word	0x0800cd85
 800ccb4:	0800cd85 	.word	0x0800cd85
 800ccb8:	0800cd85 	.word	0x0800cd85
 800ccbc:	0800cd85 	.word	0x0800cd85
 800ccc0:	0800cd85 	.word	0x0800cd85
 800ccc4:	0800cd3f 	.word	0x0800cd3f
 800ccc8:	0800cd85 	.word	0x0800cd85
 800cccc:	0800cd85 	.word	0x0800cd85
 800ccd0:	0800cd85 	.word	0x0800cd85
 800ccd4:	0800cd85 	.word	0x0800cd85
 800ccd8:	0800cd85 	.word	0x0800cd85
 800ccdc:	0800cd85 	.word	0x0800cd85
 800cce0:	0800cd85 	.word	0x0800cd85
 800cce4:	0800cd85 	.word	0x0800cd85
 800cce8:	0800cd85 	.word	0x0800cd85
 800ccec:	0800cd85 	.word	0x0800cd85
 800ccf0:	0800cd85 	.word	0x0800cd85
 800ccf4:	0800cd85 	.word	0x0800cd85
 800ccf8:	0800cd85 	.word	0x0800cd85
 800ccfc:	0800cd85 	.word	0x0800cd85
 800cd00:	0800cd85 	.word	0x0800cd85
 800cd04:	0800cd77 	.word	0x0800cd77
 800cd08:	2b40      	cmp	r3, #64	; 0x40
 800cd0a:	d037      	beq.n	800cd7c <UART_SetConfig+0xc44>
 800cd0c:	e03a      	b.n	800cd84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd0e:	f7fb fa49 	bl	80081a4 <HAL_RCC_GetPCLK1Freq>
 800cd12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd14:	e03c      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd16:	f7fb fa5b 	bl	80081d0 <HAL_RCC_GetPCLK2Freq>
 800cd1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd1c:	e038      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fd f8f2 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2c:	e030      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd2e:	f107 0318 	add.w	r3, r7, #24
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fd fa3e 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd3c:	e028      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd3e:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0320 	and.w	r3, r3, #32
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d012      	beq.n	800cd70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd4a:	4b06      	ldr	r3, [pc, #24]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	08db      	lsrs	r3, r3, #3
 800cd50:	f003 0303 	and.w	r3, r3, #3
 800cd54:	4a04      	ldr	r2, [pc, #16]	; (800cd68 <UART_SetConfig+0xc30>)
 800cd56:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd5c:	e018      	b.n	800cd90 <UART_SetConfig+0xc58>
 800cd5e:	bf00      	nop
 800cd60:	0800de74 	.word	0x0800de74
 800cd64:	58024400 	.word	0x58024400
 800cd68:	03d09000 	.word	0x03d09000
 800cd6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd70:	4b24      	ldr	r3, [pc, #144]	; (800ce04 <UART_SetConfig+0xccc>)
 800cd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd74:	e00c      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd76:	4b24      	ldr	r3, [pc, #144]	; (800ce08 <UART_SetConfig+0xcd0>)
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7a:	e009      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd82:	e005      	b.n	800cd90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cd84:	2300      	movs	r3, #0
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd8e:	bf00      	nop
    }

    if (pclk != 0U)
 800cd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d021      	beq.n	800cdda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9a:	4a1c      	ldr	r2, [pc, #112]	; (800ce0c <UART_SetConfig+0xcd4>)
 800cd9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cda0:	461a      	mov	r2, r3
 800cda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	085b      	lsrs	r3, r3, #1
 800cdae:	441a      	add	r2, r3
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbc:	2b0f      	cmp	r3, #15
 800cdbe:	d909      	bls.n	800cdd4 <UART_SetConfig+0xc9c>
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdc6:	d205      	bcs.n	800cdd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60da      	str	r2, [r3, #12]
 800cdd2:	e002      	b.n	800cdda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2200      	movs	r2, #0
 800cdee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cdf6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3748      	adds	r7, #72	; 0x48
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce04:	03d09000 	.word	0x03d09000
 800ce08:	003d0900 	.word	0x003d0900
 800ce0c:	0800de74 	.word	0x0800de74

0800ce10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00a      	beq.n	800ce3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00a      	beq.n	800ce7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce82:	f003 0308 	and.w	r3, r3, #8
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00a      	beq.n	800cea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	430a      	orrs	r2, r1
 800ce9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00a      	beq.n	800cec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec6:	f003 0320 	and.w	r3, r3, #32
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00a      	beq.n	800cee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	430a      	orrs	r2, r1
 800cee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d01a      	beq.n	800cf26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf0e:	d10a      	bne.n	800cf26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00a      	beq.n	800cf48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	430a      	orrs	r2, r1
 800cf46:	605a      	str	r2, [r3, #4]
  }
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b098      	sub	sp, #96	; 0x60
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf64:	f7f5 fc14 	bl	8002790 <HAL_GetTick>
 800cf68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0308 	and.w	r3, r3, #8
 800cf74:	2b08      	cmp	r3, #8
 800cf76:	d12f      	bne.n	800cfd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf80:	2200      	movs	r2, #0
 800cf82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f88e 	bl	800d0a8 <UART_WaitOnFlagUntilTimeout>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d022      	beq.n	800cfd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	e853 3f00 	ldrex	r3, [r3]
 800cf9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfa6:	653b      	str	r3, [r7, #80]	; 0x50
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	461a      	mov	r2, r3
 800cfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfb0:	647b      	str	r3, [r7, #68]	; 0x44
 800cfb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfb8:	e841 2300 	strex	r3, r2, [r1]
 800cfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1e6      	bne.n	800cf92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e063      	b.n	800d0a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f003 0304 	and.w	r3, r3, #4
 800cfe2:	2b04      	cmp	r3, #4
 800cfe4:	d149      	bne.n	800d07a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfe6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfee:	2200      	movs	r2, #0
 800cff0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f857 	bl	800d0a8 <UART_WaitOnFlagUntilTimeout>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d03c      	beq.n	800d07a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d008:	e853 3f00 	ldrex	r3, [r3]
 800d00c:	623b      	str	r3, [r7, #32]
   return(result);
 800d00e:	6a3b      	ldr	r3, [r7, #32]
 800d010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d014:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	461a      	mov	r2, r3
 800d01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d01e:	633b      	str	r3, [r7, #48]	; 0x30
 800d020:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d026:	e841 2300 	strex	r3, r2, [r1]
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d1e6      	bne.n	800d000 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3308      	adds	r3, #8
 800d038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	e853 3f00 	ldrex	r3, [r3]
 800d040:	60fb      	str	r3, [r7, #12]
   return(result);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f023 0301 	bic.w	r3, r3, #1
 800d048:	64bb      	str	r3, [r7, #72]	; 0x48
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3308      	adds	r3, #8
 800d050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d052:	61fa      	str	r2, [r7, #28]
 800d054:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	69b9      	ldr	r1, [r7, #24]
 800d058:	69fa      	ldr	r2, [r7, #28]
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	617b      	str	r3, [r7, #20]
   return(result);
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e5      	bne.n	800d032 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2220      	movs	r2, #32
 800d06a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d076:	2303      	movs	r3, #3
 800d078:	e012      	b.n	800d0a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2220      	movs	r2, #32
 800d07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2220      	movs	r2, #32
 800d086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3758      	adds	r7, #88	; 0x58
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	603b      	str	r3, [r7, #0]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0b8:	e049      	b.n	800d14e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c0:	d045      	beq.n	800d14e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0c2:	f7f5 fb65 	bl	8002790 <HAL_GetTick>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	1ad3      	subs	r3, r2, r3
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d302      	bcc.n	800d0d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e048      	b.n	800d16e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 0304 	and.w	r3, r3, #4
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d031      	beq.n	800d14e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	f003 0308 	and.w	r3, r3, #8
 800d0f4:	2b08      	cmp	r3, #8
 800d0f6:	d110      	bne.n	800d11a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2208      	movs	r2, #8
 800d0fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f839 	bl	800d178 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2208      	movs	r2, #8
 800d10a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e029      	b.n	800d16e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d128:	d111      	bne.n	800d14e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f000 f81f 	bl	800d178 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2220      	movs	r2, #32
 800d13e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d14a:	2303      	movs	r3, #3
 800d14c:	e00f      	b.n	800d16e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	69da      	ldr	r2, [r3, #28]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	4013      	ands	r3, r2
 800d158:	68ba      	ldr	r2, [r7, #8]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	bf0c      	ite	eq
 800d15e:	2301      	moveq	r3, #1
 800d160:	2300      	movne	r3, #0
 800d162:	b2db      	uxtb	r3, r3
 800d164:	461a      	mov	r2, r3
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d0a6      	beq.n	800d0ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d178:	b480      	push	{r7}
 800d17a:	b095      	sub	sp, #84	; 0x54
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d188:	e853 3f00 	ldrex	r3, [r3]
 800d18c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d194:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19e:	643b      	str	r3, [r7, #64]	; 0x40
 800d1a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1a6:	e841 2300 	strex	r3, r2, [r1]
 800d1aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1e6      	bne.n	800d180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3308      	adds	r3, #8
 800d1b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	e853 3f00 	ldrex	r3, [r3]
 800d1c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1c2:	69fa      	ldr	r2, [r7, #28]
 800d1c4:	4b1e      	ldr	r3, [pc, #120]	; (800d240 <UART_EndRxTransfer+0xc8>)
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1da:	e841 2300 	strex	r3, r2, [r1]
 800d1de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e5      	bne.n	800d1b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d118      	bne.n	800d220 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	e853 3f00 	ldrex	r3, [r3]
 800d1fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f023 0310 	bic.w	r3, r3, #16
 800d202:	647b      	str	r3, [r7, #68]	; 0x44
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	461a      	mov	r2, r3
 800d20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d20c:	61bb      	str	r3, [r7, #24]
 800d20e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d210:	6979      	ldr	r1, [r7, #20]
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	e841 2300 	strex	r3, r2, [r1]
 800d218:	613b      	str	r3, [r7, #16]
   return(result);
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1e6      	bne.n	800d1ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2220      	movs	r2, #32
 800d224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d234:	bf00      	nop
 800d236:	3754      	adds	r7, #84	; 0x54
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	effffffe 	.word	0xeffffffe

0800d244 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d252:	2b01      	cmp	r3, #1
 800d254:	d101      	bne.n	800d25a <HAL_UARTEx_DisableFifoMode+0x16>
 800d256:	2302      	movs	r3, #2
 800d258:	e027      	b.n	800d2aa <HAL_UARTEx_DisableFifoMode+0x66>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2224      	movs	r2, #36	; 0x24
 800d266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f022 0201 	bic.w	r2, r2, #1
 800d280:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d288:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2220      	movs	r2, #32
 800d29c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3714      	adds	r7, #20
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d101      	bne.n	800d2ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	e02d      	b.n	800d32a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2224      	movs	r2, #36	; 0x24
 800d2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f022 0201 	bic.w	r2, r2, #1
 800d2f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f850 	bl	800d3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2220      	movs	r2, #32
 800d31c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d342:	2b01      	cmp	r3, #1
 800d344:	d101      	bne.n	800d34a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d346:	2302      	movs	r3, #2
 800d348:	e02d      	b.n	800d3a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2201      	movs	r2, #1
 800d34e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2224      	movs	r2, #36	; 0x24
 800d356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f022 0201 	bic.w	r2, r2, #1
 800d370:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	683a      	ldr	r2, [r7, #0]
 800d382:	430a      	orrs	r2, r1
 800d384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f812 	bl	800d3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2220      	movs	r2, #32
 800d398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
	...

0800d3b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d108      	bne.n	800d3d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3d0:	e031      	b.n	800d436 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3d2:	2310      	movs	r3, #16
 800d3d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3d6:	2310      	movs	r3, #16
 800d3d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	0e5b      	lsrs	r3, r3, #25
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	f003 0307 	and.w	r3, r3, #7
 800d3e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	0f5b      	lsrs	r3, r3, #29
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 0307 	and.w	r3, r3, #7
 800d3f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
 800d3fc:	7b3a      	ldrb	r2, [r7, #12]
 800d3fe:	4911      	ldr	r1, [pc, #68]	; (800d444 <UARTEx_SetNbDataToProcess+0x94>)
 800d400:	5c8a      	ldrb	r2, [r1, r2]
 800d402:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d406:	7b3a      	ldrb	r2, [r7, #12]
 800d408:	490f      	ldr	r1, [pc, #60]	; (800d448 <UARTEx_SetNbDataToProcess+0x98>)
 800d40a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d40c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d410:	b29a      	uxth	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d418:	7bfb      	ldrb	r3, [r7, #15]
 800d41a:	7b7a      	ldrb	r2, [r7, #13]
 800d41c:	4909      	ldr	r1, [pc, #36]	; (800d444 <UARTEx_SetNbDataToProcess+0x94>)
 800d41e:	5c8a      	ldrb	r2, [r1, r2]
 800d420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d424:	7b7a      	ldrb	r2, [r7, #13]
 800d426:	4908      	ldr	r1, [pc, #32]	; (800d448 <UARTEx_SetNbDataToProcess+0x98>)
 800d428:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d42a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d42e:	b29a      	uxth	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d436:	bf00      	nop
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	0800de8c 	.word	0x0800de8c
 800d448:	0800de94 	.word	0x0800de94

0800d44c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d44c:	b084      	sub	sp, #16
 800d44e:	b580      	push	{r7, lr}
 800d450:	b084      	sub	sp, #16
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	f107 001c 	add.w	r0, r7, #28
 800d45a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	2b01      	cmp	r3, #1
 800d462:	d120      	bne.n	800d4a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68da      	ldr	r2, [r3, #12]
 800d474:	4b2a      	ldr	r3, [pc, #168]	; (800d520 <USB_CoreInit+0xd4>)
 800d476:	4013      	ands	r3, r2
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d105      	bne.n	800d49a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 faac 	bl	800d9f8 <USB_CoreReset>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	73fb      	strb	r3, [r7, #15]
 800d4a4:	e01a      	b.n	800d4dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 faa0 	bl	800d9f8 <USB_CoreReset>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	639a      	str	r2, [r3, #56]	; 0x38
 800d4ce:	e005      	b.n	800d4dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d116      	bne.n	800d510 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4f0:	4b0c      	ldr	r3, [pc, #48]	; (800d524 <USB_CoreInit+0xd8>)
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	f043 0206 	orr.w	r2, r3, #6
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	f043 0220 	orr.w	r2, r3, #32
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d510:	7bfb      	ldrb	r3, [r7, #15]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d51c:	b004      	add	sp, #16
 800d51e:	4770      	bx	lr
 800d520:	ffbdffbf 	.word	0xffbdffbf
 800d524:	03ee0000 	.word	0x03ee0000

0800d528 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	f023 0201 	bic.w	r2, r3, #1
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	460b      	mov	r3, r1
 800d554:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d556:	2300      	movs	r3, #0
 800d558:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d566:	78fb      	ldrb	r3, [r7, #3]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d115      	bne.n	800d598 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d578:	2001      	movs	r0, #1
 800d57a:	f7f5 f915 	bl	80027a8 <HAL_Delay>
      ms++;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	3301      	adds	r3, #1
 800d582:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fa29 	bl	800d9dc <USB_GetMode>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d01e      	beq.n	800d5ce <USB_SetCurrentMode+0x84>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b31      	cmp	r3, #49	; 0x31
 800d594:	d9f0      	bls.n	800d578 <USB_SetCurrentMode+0x2e>
 800d596:	e01a      	b.n	800d5ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d598:	78fb      	ldrb	r3, [r7, #3]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d115      	bne.n	800d5ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	f7f5 f8fc 	bl	80027a8 <HAL_Delay>
      ms++;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fa10 	bl	800d9dc <USB_GetMode>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d005      	beq.n	800d5ce <USB_SetCurrentMode+0x84>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2b31      	cmp	r3, #49	; 0x31
 800d5c6:	d9f0      	bls.n	800d5aa <USB_SetCurrentMode+0x60>
 800d5c8:	e001      	b.n	800d5ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e005      	b.n	800d5da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b32      	cmp	r3, #50	; 0x32
 800d5d2:	d101      	bne.n	800d5d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e000      	b.n	800d5da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
	...

0800d5e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5e4:	b084      	sub	sp, #16
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b086      	sub	sp, #24
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d5f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d5fe:	2300      	movs	r3, #0
 800d600:	613b      	str	r3, [r7, #16]
 800d602:	e009      	b.n	800d618 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	3340      	adds	r3, #64	; 0x40
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4413      	add	r3, r2
 800d60e:	2200      	movs	r2, #0
 800d610:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	3301      	adds	r3, #1
 800d616:	613b      	str	r3, [r7, #16]
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	2b0e      	cmp	r3, #14
 800d61c:	d9f2      	bls.n	800d604 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d620:	2b00      	cmp	r3, #0
 800d622:	d11c      	bne.n	800d65e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d632:	f043 0302 	orr.w	r3, r3, #2
 800d636:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	e005      	b.n	800d66a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d670:	461a      	mov	r2, r3
 800d672:	2300      	movs	r3, #0
 800d674:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67c:	4619      	mov	r1, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d684:	461a      	mov	r2, r3
 800d686:	680b      	ldr	r3, [r1, #0]
 800d688:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d10c      	bne.n	800d6aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	2b00      	cmp	r3, #0
 800d694:	d104      	bne.n	800d6a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d696:	2100      	movs	r1, #0
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 f965 	bl	800d968 <USB_SetDevSpeed>
 800d69e:	e008      	b.n	800d6b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f960 	bl	800d968 <USB_SetDevSpeed>
 800d6a8:	e003      	b.n	800d6b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d6aa:	2103      	movs	r1, #3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f95b 	bl	800d968 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d6b2:	2110      	movs	r1, #16
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f8f3 	bl	800d8a0 <USB_FlushTxFifo>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f91f 	bl	800d908 <USB_FlushRxFifo>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6da:	461a      	mov	r2, r3
 800d6dc:	2300      	movs	r3, #0
 800d6de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	613b      	str	r3, [r7, #16]
 800d6fc:	e043      	b.n	800d786 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	015a      	lsls	r2, r3, #5
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4413      	add	r3, r2
 800d706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d714:	d118      	bne.n	800d748 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	4413      	add	r3, r2
 800d724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d728:	461a      	mov	r2, r3
 800d72a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d72e:	6013      	str	r3, [r2, #0]
 800d730:	e013      	b.n	800d75a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	015a      	lsls	r2, r3, #5
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	4413      	add	r3, r2
 800d73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73e:	461a      	mov	r2, r3
 800d740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d744:	6013      	str	r3, [r2, #0]
 800d746:	e008      	b.n	800d75a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	015a      	lsls	r2, r3, #5
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4413      	add	r3, r2
 800d750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d754:	461a      	mov	r2, r3
 800d756:	2300      	movs	r3, #0
 800d758:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	015a      	lsls	r2, r3, #5
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	4413      	add	r3, r2
 800d762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d766:	461a      	mov	r2, r3
 800d768:	2300      	movs	r3, #0
 800d76a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	015a      	lsls	r2, r3, #5
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	4413      	add	r3, r2
 800d774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d778:	461a      	mov	r2, r3
 800d77a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d77e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	3301      	adds	r3, #1
 800d784:	613b      	str	r3, [r7, #16]
 800d786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d3b7      	bcc.n	800d6fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d78e:	2300      	movs	r3, #0
 800d790:	613b      	str	r3, [r7, #16]
 800d792:	e043      	b.n	800d81c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	015a      	lsls	r2, r3, #5
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	4413      	add	r3, r2
 800d79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7aa:	d118      	bne.n	800d7de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10a      	bne.n	800d7c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	015a      	lsls	r2, r3, #5
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7be:	461a      	mov	r2, r3
 800d7c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	e013      	b.n	800d7f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	015a      	lsls	r2, r3, #5
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d7da:	6013      	str	r3, [r2, #0]
 800d7dc:	e008      	b.n	800d7f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	015a      	lsls	r2, r3, #5
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	015a      	lsls	r2, r3, #5
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	2300      	movs	r3, #0
 800d800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	015a      	lsls	r2, r3, #5
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	4413      	add	r3, r2
 800d80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d80e:	461a      	mov	r2, r3
 800d810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	3301      	adds	r3, #1
 800d81a:	613b      	str	r3, [r7, #16]
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	693a      	ldr	r2, [r7, #16]
 800d820:	429a      	cmp	r2, r3
 800d822:	d3b7      	bcc.n	800d794 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d836:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d844:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d105      	bne.n	800d858 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	f043 0210 	orr.w	r2, r3, #16
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	699a      	ldr	r2, [r3, #24]
 800d85c:	4b0e      	ldr	r3, [pc, #56]	; (800d898 <USB_DevInit+0x2b4>)
 800d85e:	4313      	orrs	r3, r2
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d866:	2b00      	cmp	r3, #0
 800d868:	d005      	beq.n	800d876 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	f043 0208 	orr.w	r2, r3, #8
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d105      	bne.n	800d888 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	699a      	ldr	r2, [r3, #24]
 800d880:	4b06      	ldr	r3, [pc, #24]	; (800d89c <USB_DevInit+0x2b8>)
 800d882:	4313      	orrs	r3, r2
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d888:	7dfb      	ldrb	r3, [r7, #23]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d894:	b004      	add	sp, #16
 800d896:	4770      	bx	lr
 800d898:	803c3800 	.word	0x803c3800
 800d89c:	40000004 	.word	0x40000004

0800d8a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	4a13      	ldr	r2, [pc, #76]	; (800d904 <USB_FlushTxFifo+0x64>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d901      	bls.n	800d8c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e01b      	b.n	800d8f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	daf2      	bge.n	800d8ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	019b      	lsls	r3, r3, #6
 800d8d0:	f043 0220 	orr.w	r2, r3, #32
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4a08      	ldr	r2, [pc, #32]	; (800d904 <USB_FlushTxFifo+0x64>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d901      	bls.n	800d8ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	e006      	b.n	800d8f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	f003 0320 	and.w	r3, r3, #32
 800d8f2:	2b20      	cmp	r3, #32
 800d8f4:	d0f0      	beq.n	800d8d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	00030d40 	.word	0x00030d40

0800d908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d910:	2300      	movs	r3, #0
 800d912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	3301      	adds	r3, #1
 800d918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	4a11      	ldr	r2, [pc, #68]	; (800d964 <USB_FlushRxFifo+0x5c>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d901      	bls.n	800d926 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d922:	2303      	movs	r3, #3
 800d924:	e018      	b.n	800d958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	daf2      	bge.n	800d914 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d92e:	2300      	movs	r3, #0
 800d930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2210      	movs	r2, #16
 800d936:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	3301      	adds	r3, #1
 800d93c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	4a08      	ldr	r2, [pc, #32]	; (800d964 <USB_FlushRxFifo+0x5c>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d901      	bls.n	800d94a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e006      	b.n	800d958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	f003 0310 	and.w	r3, r3, #16
 800d952:	2b10      	cmp	r3, #16
 800d954:	d0f0      	beq.n	800d938 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	00030d40 	.word	0x00030d40

0800d968 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	460b      	mov	r3, r1
 800d972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	68f9      	ldr	r1, [r7, #12]
 800d984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d988:	4313      	orrs	r3, r2
 800d98a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3714      	adds	r7, #20
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr

0800d99a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d99a:	b480      	push	{r7}
 800d99c:	b085      	sub	sp, #20
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9b4:	f023 0303 	bic.w	r3, r3, #3
 800d9b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9c8:	f043 0302 	orr.w	r3, r3, #2
 800d9cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	f003 0301 	and.w	r3, r3, #1
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3301      	adds	r3, #1
 800da08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	4a13      	ldr	r2, [pc, #76]	; (800da5c <USB_CoreReset+0x64>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d901      	bls.n	800da16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e01b      	b.n	800da4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	daf2      	bge.n	800da04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da1e:	2300      	movs	r3, #0
 800da20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	f043 0201 	orr.w	r2, r3, #1
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3301      	adds	r3, #1
 800da32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	4a09      	ldr	r2, [pc, #36]	; (800da5c <USB_CoreReset+0x64>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d901      	bls.n	800da40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da3c:	2303      	movs	r3, #3
 800da3e:	e006      	b.n	800da4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	f003 0301 	and.w	r3, r3, #1
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d0f0      	beq.n	800da2e <USB_CoreReset+0x36>

  return HAL_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3714      	adds	r7, #20
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	00030d40 	.word	0x00030d40

0800da60 <__errno>:
 800da60:	4b01      	ldr	r3, [pc, #4]	; (800da68 <__errno+0x8>)
 800da62:	6818      	ldr	r0, [r3, #0]
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	24000010 	.word	0x24000010

0800da6c <__libc_init_array>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	4d0d      	ldr	r5, [pc, #52]	; (800daa4 <__libc_init_array+0x38>)
 800da70:	4c0d      	ldr	r4, [pc, #52]	; (800daa8 <__libc_init_array+0x3c>)
 800da72:	1b64      	subs	r4, r4, r5
 800da74:	10a4      	asrs	r4, r4, #2
 800da76:	2600      	movs	r6, #0
 800da78:	42a6      	cmp	r6, r4
 800da7a:	d109      	bne.n	800da90 <__libc_init_array+0x24>
 800da7c:	4d0b      	ldr	r5, [pc, #44]	; (800daac <__libc_init_array+0x40>)
 800da7e:	4c0c      	ldr	r4, [pc, #48]	; (800dab0 <__libc_init_array+0x44>)
 800da80:	f000 f964 	bl	800dd4c <_init>
 800da84:	1b64      	subs	r4, r4, r5
 800da86:	10a4      	asrs	r4, r4, #2
 800da88:	2600      	movs	r6, #0
 800da8a:	42a6      	cmp	r6, r4
 800da8c:	d105      	bne.n	800da9a <__libc_init_array+0x2e>
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	f855 3b04 	ldr.w	r3, [r5], #4
 800da94:	4798      	blx	r3
 800da96:	3601      	adds	r6, #1
 800da98:	e7ee      	b.n	800da78 <__libc_init_array+0xc>
 800da9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da9e:	4798      	blx	r3
 800daa0:	3601      	adds	r6, #1
 800daa2:	e7f2      	b.n	800da8a <__libc_init_array+0x1e>
 800daa4:	0800deb8 	.word	0x0800deb8
 800daa8:	0800deb8 	.word	0x0800deb8
 800daac:	0800deb8 	.word	0x0800deb8
 800dab0:	0800debc 	.word	0x0800debc

0800dab4 <memcpy>:
 800dab4:	440a      	add	r2, r1
 800dab6:	4291      	cmp	r1, r2
 800dab8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dabc:	d100      	bne.n	800dac0 <memcpy+0xc>
 800dabe:	4770      	bx	lr
 800dac0:	b510      	push	{r4, lr}
 800dac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daca:	4291      	cmp	r1, r2
 800dacc:	d1f9      	bne.n	800dac2 <memcpy+0xe>
 800dace:	bd10      	pop	{r4, pc}

0800dad0 <memset>:
 800dad0:	4402      	add	r2, r0
 800dad2:	4603      	mov	r3, r0
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d100      	bne.n	800dada <memset+0xa>
 800dad8:	4770      	bx	lr
 800dada:	f803 1b01 	strb.w	r1, [r3], #1
 800dade:	e7f9      	b.n	800dad4 <memset+0x4>

0800dae0 <fmod>:
 800dae0:	b508      	push	{r3, lr}
 800dae2:	ed2d 8b04 	vpush	{d8-d9}
 800dae6:	eeb0 9b40 	vmov.f64	d9, d0
 800daea:	eeb0 8b41 	vmov.f64	d8, d1
 800daee:	f000 f81b 	bl	800db28 <__ieee754_fmod>
 800daf2:	eeb4 9b48 	vcmp.f64	d9, d8
 800daf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dafa:	d60c      	bvs.n	800db16 <fmod+0x36>
 800dafc:	ed9f 9b08 	vldr	d9, [pc, #32]	; 800db20 <fmod+0x40>
 800db00:	eeb4 8b49 	vcmp.f64	d8, d9
 800db04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db08:	d105      	bne.n	800db16 <fmod+0x36>
 800db0a:	f7ff ffa9 	bl	800da60 <__errno>
 800db0e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800db12:	2321      	movs	r3, #33	; 0x21
 800db14:	6003      	str	r3, [r0, #0]
 800db16:	ecbd 8b04 	vpop	{d8-d9}
 800db1a:	bd08      	pop	{r3, pc}
 800db1c:	f3af 8000 	nop.w
	...

0800db28 <__ieee754_fmod>:
 800db28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db2c:	ed8d 1b00 	vstr	d1, [sp]
 800db30:	e9dd 6500 	ldrd	r6, r5, [sp]
 800db34:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800db38:	ea57 0306 	orrs.w	r3, r7, r6
 800db3c:	46b4      	mov	ip, r6
 800db3e:	d00d      	beq.n	800db5c <__ieee754_fmod+0x34>
 800db40:	ee10 9a90 	vmov	r9, s1
 800db44:	4a7b      	ldr	r2, [pc, #492]	; (800dd34 <__ieee754_fmod+0x20c>)
 800db46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db4a:	4293      	cmp	r3, r2
 800db4c:	dc06      	bgt.n	800db5c <__ieee754_fmod+0x34>
 800db4e:	4272      	negs	r2, r6
 800db50:	4879      	ldr	r0, [pc, #484]	; (800dd38 <__ieee754_fmod+0x210>)
 800db52:	4332      	orrs	r2, r6
 800db54:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 800db58:	4282      	cmp	r2, r0
 800db5a:	d908      	bls.n	800db6e <__ieee754_fmod+0x46>
 800db5c:	ed9d 7b00 	vldr	d7, [sp]
 800db60:	ee20 7b07 	vmul.f64	d7, d0, d7
 800db64:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800db68:	b003      	add	sp, #12
 800db6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db6e:	42bb      	cmp	r3, r7
 800db70:	ee10 ea10 	vmov	lr, s0
 800db74:	ee10 1a10 	vmov	r1, s0
 800db78:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 800db7c:	dc09      	bgt.n	800db92 <__ieee754_fmod+0x6a>
 800db7e:	dbf3      	blt.n	800db68 <__ieee754_fmod+0x40>
 800db80:	45b6      	cmp	lr, r6
 800db82:	d3f1      	bcc.n	800db68 <__ieee754_fmod+0x40>
 800db84:	d105      	bne.n	800db92 <__ieee754_fmod+0x6a>
 800db86:	4b6d      	ldr	r3, [pc, #436]	; (800dd3c <__ieee754_fmod+0x214>)
 800db88:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800db8c:	ed94 0b00 	vldr	d0, [r4]
 800db90:	e7ea      	b.n	800db68 <__ieee754_fmod+0x40>
 800db92:	ea19 0f00 	tst.w	r9, r0
 800db96:	d14d      	bne.n	800dc34 <__ieee754_fmod+0x10c>
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d144      	bne.n	800dc26 <__ieee754_fmod+0xfe>
 800db9c:	4868      	ldr	r0, [pc, #416]	; (800dd40 <__ieee754_fmod+0x218>)
 800db9e:	4672      	mov	r2, lr
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	dc3d      	bgt.n	800dc20 <__ieee754_fmod+0xf8>
 800dba4:	4a64      	ldr	r2, [pc, #400]	; (800dd38 <__ieee754_fmod+0x210>)
 800dba6:	402a      	ands	r2, r5
 800dba8:	2a00      	cmp	r2, #0
 800dbaa:	d155      	bne.n	800dc58 <__ieee754_fmod+0x130>
 800dbac:	2f00      	cmp	r7, #0
 800dbae:	d149      	bne.n	800dc44 <__ieee754_fmod+0x11c>
 800dbb0:	46b0      	mov	r8, r6
 800dbb2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dbb6:	f1b8 0f00 	cmp.w	r8, #0
 800dbba:	dc3f      	bgt.n	800dc3c <__ieee754_fmod+0x114>
 800dbbc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800dd44 <__ieee754_fmod+0x21c>
 800dbc0:	4540      	cmp	r0, r8
 800dbc2:	db4d      	blt.n	800dc60 <__ieee754_fmod+0x138>
 800dbc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbcc:	f8df e174 	ldr.w	lr, [pc, #372]	; 800dd44 <__ieee754_fmod+0x21c>
 800dbd0:	4572      	cmp	r2, lr
 800dbd2:	db59      	blt.n	800dc88 <__ieee754_fmod+0x160>
 800dbd4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dbd8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800dbdc:	1a80      	subs	r0, r0, r2
 800dbde:	1b5e      	subs	r6, r3, r5
 800dbe0:	eba1 070c 	sub.w	r7, r1, ip
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d165      	bne.n	800dcb4 <__ieee754_fmod+0x18c>
 800dbe8:	4561      	cmp	r1, ip
 800dbea:	bf38      	it	cc
 800dbec:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dbf0:	2e00      	cmp	r6, #0
 800dbf2:	bfa4      	itt	ge
 800dbf4:	4639      	movge	r1, r7
 800dbf6:	4633      	movge	r3, r6
 800dbf8:	ea53 0001 	orrs.w	r0, r3, r1
 800dbfc:	d0c3      	beq.n	800db86 <__ieee754_fmod+0x5e>
 800dbfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc02:	db6c      	blt.n	800dcde <__ieee754_fmod+0x1b6>
 800dc04:	484f      	ldr	r0, [pc, #316]	; (800dd44 <__ieee754_fmod+0x21c>)
 800dc06:	4282      	cmp	r2, r0
 800dc08:	db6f      	blt.n	800dcea <__ieee754_fmod+0x1c2>
 800dc0a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc0e:	4323      	orrs	r3, r4
 800dc10:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800dc14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc18:	460c      	mov	r4, r1
 800dc1a:	ec45 4b10 	vmov	d0, r4, r5
 800dc1e:	e7a3      	b.n	800db68 <__ieee754_fmod+0x40>
 800dc20:	3801      	subs	r0, #1
 800dc22:	0052      	lsls	r2, r2, #1
 800dc24:	e7bc      	b.n	800dba0 <__ieee754_fmod+0x78>
 800dc26:	4847      	ldr	r0, [pc, #284]	; (800dd44 <__ieee754_fmod+0x21c>)
 800dc28:	02da      	lsls	r2, r3, #11
 800dc2a:	2a00      	cmp	r2, #0
 800dc2c:	ddba      	ble.n	800dba4 <__ieee754_fmod+0x7c>
 800dc2e:	3801      	subs	r0, #1
 800dc30:	0052      	lsls	r2, r2, #1
 800dc32:	e7fa      	b.n	800dc2a <__ieee754_fmod+0x102>
 800dc34:	1518      	asrs	r0, r3, #20
 800dc36:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800dc3a:	e7b3      	b.n	800dba4 <__ieee754_fmod+0x7c>
 800dc3c:	3a01      	subs	r2, #1
 800dc3e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800dc42:	e7b8      	b.n	800dbb6 <__ieee754_fmod+0x8e>
 800dc44:	4a3f      	ldr	r2, [pc, #252]	; (800dd44 <__ieee754_fmod+0x21c>)
 800dc46:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 800dc4a:	f1b8 0f00 	cmp.w	r8, #0
 800dc4e:	ddb5      	ble.n	800dbbc <__ieee754_fmod+0x94>
 800dc50:	3a01      	subs	r2, #1
 800dc52:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800dc56:	e7f8      	b.n	800dc4a <__ieee754_fmod+0x122>
 800dc58:	153a      	asrs	r2, r7, #20
 800dc5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dc5e:	e7ad      	b.n	800dbbc <__ieee754_fmod+0x94>
 800dc60:	eba8 0100 	sub.w	r1, r8, r0
 800dc64:	291f      	cmp	r1, #31
 800dc66:	dc09      	bgt.n	800dc7c <__ieee754_fmod+0x154>
 800dc68:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 800dc6c:	408b      	lsls	r3, r1
 800dc6e:	fa2e f808 	lsr.w	r8, lr, r8
 800dc72:	ea48 0303 	orr.w	r3, r8, r3
 800dc76:	fa0e f101 	lsl.w	r1, lr, r1
 800dc7a:	e7a7      	b.n	800dbcc <__ieee754_fmod+0xa4>
 800dc7c:	4b32      	ldr	r3, [pc, #200]	; (800dd48 <__ieee754_fmod+0x220>)
 800dc7e:	1a1b      	subs	r3, r3, r0
 800dc80:	fa0e f303 	lsl.w	r3, lr, r3
 800dc84:	2100      	movs	r1, #0
 800dc86:	e7a1      	b.n	800dbcc <__ieee754_fmod+0xa4>
 800dc88:	ebae 0c02 	sub.w	ip, lr, r2
 800dc8c:	f1bc 0f1f 	cmp.w	ip, #31
 800dc90:	dc09      	bgt.n	800dca6 <__ieee754_fmod+0x17e>
 800dc92:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800dc96:	fa07 f70c 	lsl.w	r7, r7, ip
 800dc9a:	fa26 f505 	lsr.w	r5, r6, r5
 800dc9e:	433d      	orrs	r5, r7
 800dca0:	fa06 fc0c 	lsl.w	ip, r6, ip
 800dca4:	e79a      	b.n	800dbdc <__ieee754_fmod+0xb4>
 800dca6:	4d28      	ldr	r5, [pc, #160]	; (800dd48 <__ieee754_fmod+0x220>)
 800dca8:	1aad      	subs	r5, r5, r2
 800dcaa:	fa06 f505 	lsl.w	r5, r6, r5
 800dcae:	f04f 0c00 	mov.w	ip, #0
 800dcb2:	e793      	b.n	800dbdc <__ieee754_fmod+0xb4>
 800dcb4:	4561      	cmp	r1, ip
 800dcb6:	bf38      	it	cc
 800dcb8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dcbc:	2e00      	cmp	r6, #0
 800dcbe:	da05      	bge.n	800dccc <__ieee754_fmod+0x1a4>
 800dcc0:	0fce      	lsrs	r6, r1, #31
 800dcc2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dcc6:	0049      	lsls	r1, r1, #1
 800dcc8:	3801      	subs	r0, #1
 800dcca:	e788      	b.n	800dbde <__ieee754_fmod+0xb6>
 800dccc:	ea56 0307 	orrs.w	r3, r6, r7
 800dcd0:	f43f af59 	beq.w	800db86 <__ieee754_fmod+0x5e>
 800dcd4:	0ffb      	lsrs	r3, r7, #31
 800dcd6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800dcda:	0079      	lsls	r1, r7, #1
 800dcdc:	e7f4      	b.n	800dcc8 <__ieee754_fmod+0x1a0>
 800dcde:	0fc8      	lsrs	r0, r1, #31
 800dce0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800dce4:	0049      	lsls	r1, r1, #1
 800dce6:	3a01      	subs	r2, #1
 800dce8:	e789      	b.n	800dbfe <__ieee754_fmod+0xd6>
 800dcea:	1a80      	subs	r0, r0, r2
 800dcec:	2814      	cmp	r0, #20
 800dcee:	dc0c      	bgt.n	800dd0a <__ieee754_fmod+0x1e2>
 800dcf0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800dcf4:	fa03 f202 	lsl.w	r2, r3, r2
 800dcf8:	40c1      	lsrs	r1, r0
 800dcfa:	430a      	orrs	r2, r1
 800dcfc:	4103      	asrs	r3, r0
 800dcfe:	ea43 0104 	orr.w	r1, r3, r4
 800dd02:	4610      	mov	r0, r2
 800dd04:	ec41 0b10 	vmov	d0, r0, r1
 800dd08:	e72e      	b.n	800db68 <__ieee754_fmod+0x40>
 800dd0a:	281f      	cmp	r0, #31
 800dd0c:	dc07      	bgt.n	800dd1e <__ieee754_fmod+0x1f6>
 800dd0e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800dd12:	40c1      	lsrs	r1, r0
 800dd14:	fa03 f202 	lsl.w	r2, r3, r2
 800dd18:	430a      	orrs	r2, r1
 800dd1a:	4623      	mov	r3, r4
 800dd1c:	e7ef      	b.n	800dcfe <__ieee754_fmod+0x1d6>
 800dd1e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800dd22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dd26:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800dd2a:	32e2      	adds	r2, #226	; 0xe2
 800dd2c:	fa43 f202 	asr.w	r2, r3, r2
 800dd30:	e7f3      	b.n	800dd1a <__ieee754_fmod+0x1f2>
 800dd32:	bf00      	nop
 800dd34:	7fefffff 	.word	0x7fefffff
 800dd38:	7ff00000 	.word	0x7ff00000
 800dd3c:	0800dea0 	.word	0x0800dea0
 800dd40:	fffffbed 	.word	0xfffffbed
 800dd44:	fffffc02 	.word	0xfffffc02
 800dd48:	fffffbe2 	.word	0xfffffbe2

0800dd4c <_init>:
 800dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4e:	bf00      	nop
 800dd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd52:	bc08      	pop	{r3}
 800dd54:	469e      	mov	lr, r3
 800dd56:	4770      	bx	lr

0800dd58 <_fini>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	bf00      	nop
 800dd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5e:	bc08      	pop	{r3}
 800dd60:	469e      	mov	lr, r3
 800dd62:	4770      	bx	lr
